[{"source": "https://www.embla-carousel.com/api/", "title": "API", "text": "API lightweight carousel limited core features. That's Embla Carousel API designed extensibility mind, exposes rich API easily extended cover use cases carousels. Explore API Options Discover customize Embla Carousel available options. Read moreMethods Explore Embla Carousel methods useful extending carousel beyond native functionality. Read moreEvents Learn listen Embla Carousel events make use them. Read morePlugins Learn add plugins Embla Carousel extend it. Read"},
{"source": "https://www.embla-carousel.com/api/events/", "title": "Events", "text": "Events Embla Carousel exposes events listen order react changes carousel. Usage need initialized carousel order make use events. Events fired lifecycle carousel added event listeners persist even hard reset carousel reInit method. Adding event listeners initializing carousel, we're going subscribe slidesInView event following example: import EmblaCarousel 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode) function logSlidesInView(emblaApi) { console.log(emblaApi.slidesInView())} emblaApi.on('slidesInView', logSlidesInView) import { useCallback, useEffect } 'react'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel() const logSlidesInView = useCallback((emblaApi) => { console.log(emblaApi.slidesInView()) }, []) useEffect(() => { (emblaApi) emblaApi.on('slidesInView', logSlidesInView) }, [emblaApi, logSlidesInView]) // ...} <script setup> import { onMounted } 'vue' import emblaCarouselVue 'embla-carousel-vue' const [emblaRef, emblaApi] = emblaCarouselVue() function logSlidesInView(emblaApi) { console.log(emblaApi.slidesInView()) } onMounted(() => { (emblaApi.value) emblaApi.value.on('slidesInView', logSlidesInView) }) // ...</script> import { onMount } 'solid-js'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel() function logSlidesInView(emblaApi) { console.log(emblaApi.slidesInView()) } onMount(() => { const api = emblaApi() (api) api.on('slidesInView', logSlidesInView) }) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' let emblaApi function logSlidesInView(emblaApi) { console.log(emblaApi.slidesInView()) } function onInit(event) { emblaApi = event.detail emblaApi.on('slidesInView', logSlidesInView) }</script> <div class=\"embla\" use:emblaCarouselSvelte onemblaInit=\"{onInit}\">...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. Removing event listeners order remove event listener, call method make sure pass callback reference passed method: import EmblaCarousel 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode) function logSlidesInViewOnce(emblaApi) { console.log(emblaApi.slidesInView()) emblaApi.off('slidesInView', logSlidesInViewOnce)} emblaApi.on('slidesInView', logSlidesInViewOnce) import { useCallback, useEffect } 'react'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel() const logSlidesInViewOnce = useCallback((emblaApi) => { console.log(emblaApi.slidesInView()) emblaApi.off('slidesInView', logSlidesInViewOnce) }, []) useEffect(() => { (emblaApi) emblaApi.on('slidesInView', logSlidesInViewOnce) }, [emblaApi, logSlidesInViewOnce]) // ...} <script setup> import { onMounted } 'vue' import emblaCarouselVue 'embla-carousel-vue' const [emblaRef, emblaApi] = emblaCarouselVue() function logSlidesInViewOnce(emblaApi) { console.log(emblaApi.slidesInView()) emblaApi.off('slidesInView', logSlidesInViewOnce) } onMounted(() => { (emblaApi.value) emblaApi.value.on('slidesInView', logSlidesInViewOnce) }) // ...</script> import { onMount } 'solid-js'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel() function logSlidesInViewOnce(emblaApi) { console.log(emblaApi.slidesInView()) emblaApi.off('slidesInView', logSlidesInViewOnce) } onMount(() => { const api = emblaApi() (api) api.on('slidesInView', logSlidesInViewOnce) }) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' let emblaApi function logSlidesInViewOnce(emblaApi) { console.log(emblaApi.slidesInView()) emblaApi.off('slidesInView', logSlidesInViewOnce) } function onInit(event) { emblaApi = event.detail emblaApi.on('slidesInView', logSlidesInViewOnce) }</script> <div class=\"embla\" use:emblaCarouselSvelte onemblaInit=\"{onInit}\">...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. TypeScript EmblaEventType obtained directly core package embla-carousel used like so: import EmblaCarousel, { EmblaCarouselType, EmblaEventType} 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode) function logEmblaEvent( emblaApi: EmblaCarouselType, eventName: EmblaEventType): void { console.log(`Embla triggered ${eventName}!`)} emblaApi.on('slidesInView', logEmblaEvent) import React, { useCallback } 'react'import { EmblaCarouselType, EmblaEventType } 'embla-carousel'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel() const logEmblaEvent = useCallback( (emblaApi: EmblaCarouselType, eventName: EmblaEventType) => { console.log(`Embla triggered ${eventName}!`) }, [] ) useEffect(() => { (emblaApi) emblaApi.on('slidesInView', logEmblaEvent) }, [emblaApi, logEmblaEvent]) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-react embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script setup> import { onMounted } 'vue' import { EmblaCarouselType, EmblaEventType } 'embla-carousel' import emblaCarouselVue 'embla-carousel-vue' const [emblaRef] = emblaCarouselVue() function logEmblaEvent( emblaApi: EmblaCarouselType, eventName: EmblaEventType ): void { console.log(`Embla triggered ${eventName}!`) } onMounted(() => { (emblaApi.value) emblaApi.value.on('slidesInView', logEmblaEvent) }) // ...</script> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-vue embla-carousel dependency, pnpm makes nested dependencies inaccessible design. import { onMount } 'solid-js'import { EmblaCarouselType, EmblaEventType } 'embla-carousel'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel() function logEmblaEvent( emblaApi: EmblaCarouselType, eventName: EmblaEventType ): void { console.log(`Embla triggered ${eventName}!`) } onMount(() => { const api = emblaApi() (api) api.on('slidesInView', logEmblaEvent) }) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-solid embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script> import { EmblaCarouselType, EmblaEventType } 'embla-carousel' import emblaCarouselSvelte 'embla-carousel-svelte' let emblaApi: EmblaCarouselType function logEmblaEvent( emblaApi: EmblaCarouselType, eventName: EmblaEventType ): void { console.log(`Embla triggered ${eventName}!`) } function onInit(event: CustomEvent<EmblaCarouselType>): void { emblaApi = event.detail emblaApi.on('slidesInView', logEmblaEvent) }</script> <div class=\"embla\" use:emblaCarouselSvelte onemblaInit=\"{onInit}\">...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-svelte embla-carousel dependency, pnpm makes nested dependencies inaccessible design. Reference follows exhaustive list Embla Carousel events together information work. init Once: yes Runs carousel mounts first time. fires means fire carousel re-initialized using reInit method. reInit Once: Runs reInit method called. window resized, Embla Carousel automatically calls reInit method also fire event. destroy Once: yes Runs carousel destroyed using destroy method. fires last event carousel fires. select Once: Runs selected scroll snap changes. select event triggered drag interactions scrollNext, scrollPrev scrollTo methods. scroll Once: Runs carousel scrolling. might good idea throttle expensive stuff callback function. settle Once: Runs carousel settled scroll triggered. Please note take longer think dragFree enabled using slow transitions. resize Once: Runs carousel container slide sizes change. using ResizeObserver hood. slidesInView Once: Runs slide entered exited viewport. event intended used together slidesInView and/or slidesNotInView methods. slidesChanged Once: Runs slides added to, removed carousel container. using MutationObserver hood. slideFocus Once: Runs slide receives focus. example, focusable element like button, link input receives focus inside slide. pointerDown Once: Runs user pointer carousel. triggered touchstart mousedown event. pointerUp Once: Runs user released pointer carousel. triggered touchend mouseup event."},
{"source": "https://www.embla-carousel.com/api/methods/", "title": "Methods", "text": "Methods Embla Carousel exposes set useful methods makes extensible. Usage need initialized carousel order make use methods. accessed lifecycle carousel anything carousel instance destroyed destroy method. Calling methods following example, slideNodes method called logged console soon carousel initialized: import EmblaCarousel 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode) console.log(emblaApi.slideNodes()) import { useEffect } 'react'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel() useEffect(() => { (emblaApi) console.log(emblaApi.slideNodes()) }, [emblaApi]) // ...} <script setup> import { onMounted } 'vue' import emblaCarouselVue 'embla-carousel-vue' const [emblaRef, emblaApi] = emblaCarouselVue() onMounted(() => { (emblaApi.value) console.log(emblaApi.value.slideNodes()) }) // ...</script> import { onMount } 'solid-js'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel() onMount(() => { const api = emblaApi() (api) console.log(api.slideNodes()) }) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' let emblaApi function onInit(event) { emblaApi = event.detail console.log(emblaApi.slideNodes()) }</script> <div class=\"embla\" use:emblaCarouselSvelte onemblaInit=\"{onInit}\">...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. TypeScript EmblaCarouselType obtained directly core package embla-carousel used like so: import EmblaCarousel, { EmblaCarouselType } 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode) function logSlidesInView(emblaApi: EmblaCarouselType): void { console.log(emblaApi.slidesInView())} emblaApi.on('slidesInView', logSlidesInView) import React, { useCallback } 'react'import { EmblaCarouselType } 'embla-carousel'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel() const logSlidesInView = useCallback((emblaApi: EmblaCarouselType) => { console.log(emblaApi.slidesInView()) }, []) useEffect(() => { (emblaApi) emblaApi.on('slidesInView', logSlidesInView) }, [emblaApi, logSlidesInView]) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-react embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script setup lang=\"ts\"> import { onMounted } 'vue' import { EmblaCarouselType } 'embla-carousel' import emblaCarouselVue 'embla-carousel-vue' const [emblaRef] = emblaCarouselVue() function logSlidesInView(emblaApi: EmblaCarouselType): void { console.log(emblaApi.slidesInView()) } onMounted(() => { (emblaApi.value) emblaApi.value.on('slidesInView', logSlidesInView) }) // ...</script> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-vue embla-carousel dependency, pnpm makes nested dependencies inaccessible design. import { onMount } 'solid-js'import { EmblaCarouselType } 'embla-carousel'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel() function logSlidesInView(emblaApi: EmblaCarouselType): void { console.log(emblaApi.slidesInView()) } onMount(() => { const api = emblaApi() (api) api.on('slidesInView', logSlidesInView) }) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-solid embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script> import { EmblaCarouselType } 'embla-carousel' import emblaCarouselSvelte 'embla-carousel-svelte' let emblaApi: EmblaCarouselType function logSlidesInView(emblaApi: EmblaCarouselType): void { console.log(emblaApi.slidesInView()) } function onInit(event: CustomEvent<EmblaCarouselType>): void { emblaApi = event.detail emblaApi.on('slidesInView', logSlidesInView) }</script> <div class=\"embla\" use:emblaCarouselSvelte onemblaInit=\"{onInit}\">...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-svelte embla-carousel dependency, pnpm makes nested dependencies inaccessible design. Reference follows exhaustive list Embla Carousel methods respective parameters return values. rootNode Parameters: none Returns: HTMLElement Get root node holds scroll container slides inside. method useful need manipulate root element dynamically similar. containerNode Parameters: none Returns: HTMLElement Get container node holds slides. method useful need manipulate container element dynamically similar. slideNodes Parameters: none Returns: HTMLElement[] Get slide nodes inside container. method useful need manipulate slide elements dynamically similar. scrollNext Parameters: jump?: boolean Returns: void Scroll next snap point possible. loop disabled carousel reached last snap point, method anything. Set jump parameter true want go next slide instantly. scrollPrev Parameters: jump?: boolean Returns: void Scroll previous snap point possible. loop disabled carousel reached first snap point, method anything. Set jump parameter true want go previous slide instantly. scrollTo Parameters: index: number , jump?: boolean Returns: void Scroll snap point unique index. loop enabled, Embla Carousel choose closest way target snap point. Set jump parameter true want go desired slide instantly. canScrollNext Parameters: none Returns: boolean Check possiblity scroll next snap point. loop enabled container holds slides, always return true . canScrollPrev Parameters: none Returns: boolean Check possiblity scroll previous snap point. loop enabled container holds slides, always return true . selectedScrollSnap Parameters: none Returns: number Get index selected snap point. previousScrollSnap Parameters: none Returns: number Get index previously selected snap point. scrollSnapList Parameters: none Returns: number[] Get array containing snap point positions. position represents far carousel needs progress order reach position. scrollProgress Parameters: none Returns: number Check far carousel scrolled scrollable length 0 - 1. example, 0.5 equals 50%. example, useful creating scroll progress bar. slidesInView Parameters: none Returns: number[] Get slide indexes visible carousel viewport. Honors inViewThreshold option. slidesNotInView Parameters: none Returns: number[] Get slide indexes visible carousel viewport. Honors inViewThreshold option. internalEngine Parameters: none Returns: EmblaEngineType Exposes almost internal functionality used Embla. Useful creating plugins similar. Note: Please refrain creating bug reports related method. using running problems, 99.8% chance understand works. Use risk. reInit Parameters: options?: EmblaOptionsType , plugins?: EmblaPluginType[] Returns: void Hard reset carousel initialized. method allows changing options plugins initializing carousel. Note: Passed options merged current options, passed plugins replace current plugins. plugins Parameters: none Returns: EmblaPluginsType Returns object key value pairs keys plugin names, plugin API:s values. destroy Parameters: none Returns: void Destroy carousel instance permanently. one way operation intended used cleanup measure carousel instance needed anymore. Parameters: event: EmblaEventType , callback: (emblaApi: EmblaCarouselType, eventName: EmblaEventType) => void Returns: void Subscribe Embla specific event callback. Added event listeners persist even reInit called, either carousel destroyed event removed method. Parameters: event: EmblaEventType , callback: (emblaApi: EmblaCarouselType, eventName: EmblaEventType) => void Returns: void Unsubscribe Embla specific event. Make sure pass callback reference callback added method. emit Parameters: event: EmblaEventType Returns: void Emits embla event. trigger internal Embla functionality."},
{"source": "https://www.embla-carousel.com/api/options/", "title": "Options", "text": "Options Embla Carousel takes various options order customize carousel works. Usage provide options two different ways: constructor options and/or global options. provided, merged, options conflict, constructor option precedence override global options. Constructor options constructor options default way providing options Embla Carousel. following example, carousel loop option set true : import EmblaCarousel 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode, { loop: true }) import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [emblaRef] = useEmblaCarousel({ loop: true }) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' const [emblaRef] = emblaCarouselVue({ loop: true }) // ...</script> import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [emblaRef] = createEmblaCarousel(() => ({ loop: true })) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' let options = { loop: true }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ options }}\">...</div> Global options Setting global options applied carousels override Embla default options own. following example loop set true : import EmblaCarousel 'embla-carousel' EmblaCarousel.globalOptions = { loop: true } const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode, { align: 'start' }) import useEmblaCarousel 'embla-carousel-react' useEmblaCarousel.globalOptions = { loop: true } export function EmblaCarousel() { const [emblaRef] = useEmblaCarousel({ align: 'start' }) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' emblaCarouselVue.globalOptions = { loop: true } const [emblaRef] = emblaCarouselVue({ align: 'start' }) // ...</script> import createEmblaCarousel 'embla-carousel-solid' createEmblaCarousel.globalOptions = { loop: true } export function EmblaCarousel() { const [emblaRef] = createEmblaCarousel(() => ({ align: 'start' })) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' emblaCarouselSvelte.globalOptions = { loop: true } let options = { align: 'start' }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ options }}\">...</div> Make sure assign global options initializing carousel assign once. Re-assigning global options might lead confusing code unexpected behaviour. Changing options possible change options passed Embla Carousel constructor initialization reInit method. React, Vue, Solid Svelte wrappers pass reactive options carousel automatically reinitialize change. examples: import EmblaCarousel 'embla-carousel' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode, { loop: true }) emblaApi.reInit({ loop: false }) import { useState, useCallback } 'react'import useEmblaCarousel 'embla-carousel-react' export function EmblaCarousel() { const [options, setOptions] = useState({ loop: true }) const [emblaRef, emblaApi] = useEmblaCarousel(options) const toggleLoop = useCallback(() => { setOptions((currentOptions) => ({ ...currentOptions, loop: !currentOptions.loop })) }, []) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' const options = ref({ loop: true }) const [emblaRef, emblaApi] = emblaCarouselVue(options) function toggleLoop() { options.value = { ...options.value, loop: !options.value.loop } } // ...</script> import { createSignal } 'solid-js'import createEmblaCarousel 'embla-carousel-solid' export function EmblaCarousel() { const [options, setOptions] = createSignal({ loop: true }) const [emblaRef] = createEmblaCarousel(() => options()) function toggleLoop() { setOptions((currentOptions) => ({ ...currentOptions, loop: !currentOptions.loop })) } // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' let options = { loop: true } function toggleLoop() { options = { ...options, loop: !options.loop } }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ options }}\">...</div> TypeScript EmblaOptionsType obtained directly core package embla-carousel used like so: import EmblaCarousel, { EmblaOptionsType } 'embla-carousel' const emblaNode = document.querySelector('.embla')const options: EmblaOptionsType = { loop: true }const emblaApi = EmblaCarousel(emblaNode, options) import React 'react'import { EmblaOptionsType } 'embla-carousel'import useEmblaCarousel 'embla-carousel-react' type PropType = { options?: EmblaOptionsType} export function EmblaCarousel(props: PropType) { const [emblaRef, emblaApi] = useEmblaCarousel(props.options) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-react embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script setup lang=\"ts\"> import { EmblaOptionsType } 'embla-carousel' import emblaCarouselVue 'embla-carousel-vue' const options: EmblaOptionsType = { loop: true } const [emblaRef] = emblaCarouselVue(options) // ...</script> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-vue embla-carousel dependency, pnpm makes nested dependencies inaccessible design. import { EmblaOptionsType } 'embla-carousel'import createEmblaCarousel 'embla-carousel-solid' type PropType = { options?: EmblaOptionsType} export function EmblaCarousel(props) { const [emblaRef] = createEmblaCarousel(props.options) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-solid embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script> import { EmblaOptionsType } 'embla-carousel' import emblaCarouselSvelte 'embla-carousel-svelte' let options: EmblaOptionsType = { loop: true }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ options }}\">...</div> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-svelte embla-carousel dependency, pnpm makes nested dependencies inaccessible design. Reference follows exhaustive list Embla Carousel options default values. active Type: boolean Default: true Setting false activate deactivate carousel. Useful used together breakpoints option toggle carousel active/inactive depending media queries. align Type: string | (viewSize: number, snapSize: number, index: number) => number Default: center Align slides relative carousel viewport. Use one predefined alignments start , center end . Alternatively, provide callback fully customize alignment. axis Type: string Default: x Choose scroll axis x . Remember stack slides horizontally vertically using CSS match option. breakpoints Type: EmblaOptionsType Default: {} object options applied given breakpoint overriding options root level. Example: '(min-width: 768px)': { loop: false } . Note: multiple queries match, merged. breakpoint options clash, last one list precedence. container Type: string | HTMLElement | null Default: null Enables choosing custom container element holds slides. default, Embla choose first direct child element root element. Provide either valid CSS selector string HTML element . containScroll Type: false | string Default: 'trimSnaps' Clear leading trailing empty space causes excessive scrolling. Use trimSnaps use snap points trigger scrolling keepSnaps keep them. Note: active, override alignments applied align option enough slides start end carousel, order cover leading trailing space. direction Type: string Default: ltr Choose content direction ltr rtl . Note: using rtl , content direction also set RTL, either using HTML dir attribute CSS direction property. dragFree Type: boolean Default: false Enables momentum scrolling. duration continued scrolling proportional vigorous drag gesture is. dragThreshold Type: number Default: 10 Drag threshold pixels. affects clicks fired not. contrast carousel libraries, affect dragging carousel starts. Note: Browsers handle touch events differently mouse events. Browsers fire click event touch event includes accidental slight swipe gesture. threshold works mouse events. duration Type: number Default: 25 Set scroll duration triggered API methods. Higher numbers enables slower scrolling. Drag interactions affected duration determined drag force. Note: Duration milliseconds Embla uses attraction physics simulation scrolling instead easings. values 20 -60 recommended. inViewThreshold Type: IntersectionObserverInit.threshold Default: 0 Intersection Observer threshold option applied slides. loop Type: boolean Default: false Enables infinite looping. Embla apply translateX translateY slides need change position order create loop effect. Embla automatically falls back false slide content enough create loop effect without visible glitches. skipSnaps Type: boolean Default: false Allow carousel skip scroll snaps dragged vigorously. Note option ignored dragFree option set true . slides Type: string | HTMLElement[] | NodeListOf<HTMLElement> | null Default: null Enables using custom slide elements. default, Embla choose direct child elements container. Provide either valid CSS selector string nodeList/array containing HTML elements . Note: Even though possible provide custom slide elements, still direct descendants carousel container. Warning: place elements inside carousel container slides, either size, detached document flow position: absolute similar. slidesToScroll Type: string | number Default: 1 Group slides together. Drag interactions, dot navigation, previous/next buttons mapped group slides given number, integer. Set auto want Embla group slides automatically. startIndex Type: number Default: 0 Set initial scroll snap given number. First snap index starts 0 . Please note necessarily equal number slides used together slidesToScroll option. watchDrag Type: boolean | (emblaApi: EmblaCarouselType, event: MouseEvent | TouchEvent) => boolean | void Default: true Enables scrolling carousel mouse touch interactions. Set false disable drag events pass custom callback add drag logic. Note: passing custom callback run default Embla drag behaviour. Return true callback want Embla run default drag behaviour callback, return false want skip it. watchFocus Type: boolean | (emblaApi: EmblaCarouselType, event: FocusEvent) => boolean | void Default: true Embla automatically watches slides focus events. default callback fires slideFocus event scrolls focused element. Set false disable behaviour pass custom callback add focus logic. Note: passing custom callback run default Embla focus behaviour. Return true callback want Embla run default focus behaviour callback, return false want skip it. watchResize Type: boolean | (emblaApi: EmblaCarouselType, entries: ResizeObserverEntry[]) => boolean | void Default: true Embla automatically watches container slides size changes runs reInit size changed. Set false disable behaviour pass custom callback add resize logic. Note: passing custom callback run default Embla resize behaviour. Return true callback want Embla run default resize behaviour callback, return false want skip it. watchSlides Type: boolean | (emblaApi: EmblaCarouselType, mutations: MutationRecord[]) => boolean | void Default: true Embla automatically watches container added and/or removed slides runs reInit needed. Set false disable behaviour pass custom callback add slides changed logic. Note: passing custom callback run default Embla mutation behaviour. Return true callback want Embla run default mutation behaviour callback, return false want skip it."},
{"source": "https://www.embla-carousel.com/api/options/api/options/", "title": "Page not found", "text": "app works JavaScript enabled. Page found Sorry - couldn\u2019t find looking for. Embla Carousel Homepage"},
{"source": "https://www.embla-carousel.com/api/plugins/", "title": "Plugins", "text": "Plugins possible extend Embla carousel additional features using plugins. complete list official plugins found here. Installation official plugins separate NPM packages. They're prefixed embla-carousel followed unique plugin name. example, Autoplay plugin installed like so: <script src=\"https://unpkg.com/embla-carousel-autoplay/embla-carousel-autoplay.umd.js\"></script> npm install embla-carousel-autoplay --save yarn add embla-carousel-autoplay Usage Embla Carousel constructor accepts array plugins. plugin might options, methods events. Adding plugin constructor plugin array default way providing plugins Embla Carousel. following example, Autoplay plugin added carousel: import EmblaCarousel 'embla-carousel'import Autoplay 'embla-carousel-autoplay' const emblaNode = document.querySelector('.embla')const embla = EmblaCarousel(emblaNode, { loop: true }, [Autoplay()]) import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef] = useEmblaCarousel({ loop: true }, [Autoplay()]) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' const [emblaRef] = emblaCarouselVue({ loop: true }, [Autoplay()]) // ...</script> import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef] = createEmblaCarousel( () => ({ loop: true }), () => [AutoPlay()] ) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' let plugins = [Autoplay()]</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\">...</div> Note possible change plugins passed Embla Carousel constructor initialization reInit method. Constructor options Plugins specific options first argument plugin constructor. allows configuring plugin liking: import EmblaCarousel 'embla-carousel'import Autoplay 'embla-carousel-autoplay' const emblaNode = document.querySelector('.embla')const embla = EmblaCarousel(emblaNode, { loop: true }, [ Autoplay({ delay: 4000 })]) import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef] = useEmblaCarousel({ loop: true }, [ Autoplay({ delay: 4000 }) ]) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' const [emblaRef] = emblaCarouselVue({ loop: true }, [ Autoplay({ delay: 4000 }) ]) // ...</script> import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef] = createEmblaCarousel( () => ({ loop: true }), () => [AutoPlay({ delay: 4000 })] ) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' let plugins = [Autoplay({ delay: 4000 })]</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\">...</div> Global options official plugins allows set global options applied instances. allows overriding default plugin options own: import EmblaCarousel 'embla-carousel'import Autoplay 'embla-carousel-autoplay' Autoplay.globalOptions = { delay: 4000 } const emblaNode = document.querySelector('.embla')const embla = EmblaCarousel(emblaNode, { loop: true }, [Autoplay()]) import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' Autoplay.globalOptions = { delay: 4000 } export function EmblaCarousel() { const [emblaRef] = useEmblaCarousel({ loop: true }, [Autoplay()]) // ...} <script setup> import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' Autoplay.globalOptions = { delay: 4000 } const [emblaRef] = emblaCarouselVue({ loop: true }, [Autoplay()]) // ...</script> import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' Autoplay.globalOptions = { delay: 4000 } export function EmblaCarousel() { const [emblaRef] = createEmblaCarousel( () => ({ loop: true }), () => [AutoPlay()] ) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' Autoplay.globalOptions = { delay: 4000 } let plugins = [Autoplay()]</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\">...</div> Make sure assign global options initializing carousel assign once. Re-assigning global options might lead confusing code unexpected behaviour. Calling methods Additionally, plugins expose API methods. access plugin methods calling plugin method like demonstrated below: import EmblaCarousel 'embla-carousel'import Autoplay 'embla-carousel-autoplay' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode, { loop: true }, [Autoplay()]) emblaApi.plugins().autoplay.stop() import { useEffect } 'react'import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, [Autoplay()]) useEffect(() => { (emblaApi) emblaApi.plugins().autoplay.stop() }, [emblaApi]) // ...} <script setup> import { onMounted } 'vue' import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' const [emblaRef, emblaApi] = emblaCarouselVue({ loop: true }, [Autoplay()]) onMounted(() => { (emblaApi.value) emblaApi.value.plugins().autoplay.stop() }) // ...</script> import { onMount } 'solid-js'import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel( () => ({ loop: true }), () => [AutoPlay()] ) onMount(() => { const api = emblaApi() (api) api.plugins().autoplay.stop() }) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' let emblaApi let plugins = [Autoplay()] function onInit(event) { emblaApi = event.detail emblaApi.plugins().autoplay.stop() }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\" onemblaInit=\"{onInit}\"> ...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. Adding event listeners plugins fire events. Plugin events structured follows <plugin-name>:eventname . Adding removing plugin event listeners done way native Embla events. Here's example event added autoplay plugin: import EmblaCarousel 'embla-carousel'import Autoplay 'embla-carousel-autoplay' const emblaNode = document.querySelector('.embla')const emblaApi = EmblaCarousel(emblaNode, { loop: true }, [Autoplay()]) function logPluginEvent(emblaApi, eventName) { console.log(`Autoplay triggered ${eventName}!`)} emblaApi.on('autoplay:stop', logPluginEvent) import { useEffect, useCallback } 'react'import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, [Autoplay()]) const logPluginEvent = useCallback((emblaApi, eventName) => { console.log(`Autoplay triggered ${eventName}!`) }, []) useEffect(() => { (emblaApi) emblaApi.on('autoplay:stop', logPluginEvent) }, [emblaApi, logPluginEvent]) // ...} <script setup> import { onMounted } 'vue' import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' const [emblaRef, emblaApi] = emblaCarouselVue({ loop: true }, [Autoplay()]) function logPluginEvent(emblaApi, eventName) { console.log(`Autoplay triggered ${eventName}!`) } onMounted(() => { (emblaApi.value) emblaApi.value.on('autoplay:stop', logPluginEvent) }) // ...</script> import { onMount } 'solid-js'import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' export function EmblaCarousel() { const [emblaRef, emblaApi] = createEmblaCarousel( () => ({ loop: true }), () => [AutoPlay()] ) function logPluginEvent(emblaApi, eventName) { console.log(`Autoplay triggered ${eventName}!`) } onMount(() => { const api = emblaApi() (api) api.on('autoplay:stop', logPluginEvent) }) // ...} <script> import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' let emblaApi let plugins = [Autoplay()] function logPluginEvent(emblaApi, eventName) { console.log(`Autoplay triggered ${eventName}!`) } function onInit(event) { emblaApi = event.detail emblaApi.on('autoplay:stop', logPluginEvent) }</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\" onemblaInit=\"{onInit}\"> ...</div> Note: Starting Svelte 5, on: event handlers deprecated. However, on:emblaInit remain backward compatibility. TypeScript EmblaPluginType obtained directly core package embla-carousel used like so: import EmblaCarousel, { EmblaPluginType } 'embla-carousel'import Autoplay 'embla-carousel-autoplay' const emblaNode = document.querySelector('.embla')const plugins: EmblaPluginType[] = [Autoplay()]const emblaApi = EmblaCarousel(emblaNode, { loop: true }, plugins) import React 'react'import { EmblaPluginType } 'embla-carousel'import useEmblaCarousel 'embla-carousel-react'import Autoplay 'embla-carousel-autoplay' type PropType = { plugins?: EmblaPluginType[]} export function EmblaCarousel(props) { const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, props.plugins) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-react embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script setup lang=\"ts\"> import { EmblaPluginType } 'embla-carousel' import emblaCarouselVue 'embla-carousel-vue' import Autoplay 'embla-carousel-autoplay' const plugins: EmblaPluginType[] = [Autoplay()] const [emblaRef] = emblaCarouselVue({ loop: true }, plugins) // ...</script> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-vue embla-carousel dependency, pnpm makes nested dependencies inaccessible design. import { EmblaPluginType } 'embla-carousel'import createEmblaCarousel 'embla-carousel-solid'import Autoplay 'embla-carousel-autoplay' type PropType = { plugins?: EmblaPluginType[]} export function EmblaCarousel(props) { const [emblaRef, emblaApi] = createEmblaCarousel( () => ({ loop: true }), props.plugins ) // ...} using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-solid embla-carousel dependency, pnpm makes nested dependencies inaccessible design. <script> import { EmblaPluginType } 'embla-carousel' import emblaCarouselSvelte 'embla-carousel-svelte' import Autoplay 'embla-carousel-autoplay' let emblaApi let plugins: EmblaPluginType[] = [Autoplay()]</script> <div class=\"embla\" use:emblaCarouselSvelte=\"{{ plugins }}\">...</div> using pnpm , need install embla-carousel devDependency importing types like demonstrated above. even though embla-carousel-svelte embla-carousel dependency, pnpm makes nested dependencies inaccessible design."},
{"source": "https://www.embla-carousel.com/plugins/", "title": "Plugins", "text": "Plugins list available Embla Carousel plugins extend carousels additional features, goes beyond built-in Embla Carousel core features. Choose plugin Autoplay Learn use Autoplay plugin Embla Carousel Read moreAuto Scroll Learn use Auto Scroll plugin Embla Carousel Read moreAuto Height Learn use Auto Height plugin Embla Carousel Read moreClass Names Learn use Class Names plugin Embla Carousel Read moreFade Learn use Fade plugin Embla Carousel Read moreWheel Gestures Learn add Wheel Gesture plugin Embla Carousel Read"},
{"source": "https://www.embla-carousel.com/plugins/auto-height/", "title": "Auto Height", "text": "Auto Height View plugin GitHub plugin used extend Embla Carousel auto height functionality. changes height carousel container fit height highest slide view. Example Installation First need install npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-auto-height/embla-carousel-auto-height.umd.js\"></script> npm install embla-carousel-auto-height --save yarn add embla-carousel-auto-height make use CSS transitions transition height changes. beware: Transitioning height triggers reflow may cause performance hit. .embla__container { transition: height 0.2s;} following along guides get started section, want make sure slide height determined content holds. Add following CSS achieve this: .embla__container { display: flex; align-items: flex-start; /* Add */}"},
{"source": "https://www.embla-carousel.com/plugins/auto-scroll/", "title": "Auto Scroll", "text": "Auto Scroll View plugin GitHub plugin used extend Embla Carousel auto scroll functionality. Example Installation Start installing npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-auto-scroll/embla-carousel-auto-scroll.umd.js\"></script> npm install embla-carousel-auto-scroll --save yarn add embla-carousel-auto-scroll Options follows exhaustive list Auto Scroll options default values. speed Type: number Default: 2 Number pixels auto scroll advance per frame. startDelay Type: number Default: 1000 Number milliseconds auto scroll wait starts. also applies user interactions end stopOnInteraction false . direction Type: string Default: forward option used set auto scroll direction. Set backward want scroll opposite direction. playOnInit Type: boolean Default: true set false , start auto scroll calling play method. stopOnInteraction Type: boolean Default: true set false , auto scroll disabled drag interactions, restart every time interaction. stopOnMouseEnter Type: boolean Default: false enabled, auto scroll stop mouse pointer enters Embla Carousel container. stopOnInteraction also false , auto scroll resume mouse leaves carousel container. stopOnFocusIn Type: boolean Default: true enabled, auto scroll stop focusable element inside carousel recieves focus. stopOnInteraction false , auto scroll resume user leaves focus. rootNode Type: (emblaRoot: HTMLElement) => HTMLElement | null Default: null node respond user interactions like stopOnMouseEnter stopOnInteraction. omitted, node wraps Embla Carousel used default. Methods follows exhaustive list Auto Scroll methods respective parameters return values. play Parameters: startDelayOverride?: number Returns: void Start auto scroll. Pass startDelayOverride want change startDelay option plugin initialized. stop Parameters: none Returns: void Stops auto scroll. reset Parameters: none Returns: void Stops auto scroll, starts timer using startDelay carousel settled. take effect auto scroll playing. auto scroll stopped, method trigger anything. isPlaying Parameters: none Returns: boolean Returns boolean whether carousel auto scrolling not. Events follows exhaustive list Auto Scroll events together information work. autoScroll:play Once: Fires auto scroll starts playing. autoScroll:stop Once: Fires auto scroll stops scrolling."},
{"source": "https://www.embla-carousel.com/plugins/autoplay/", "title": "Autoplay", "text": "Autoplay View plugin GitHub plugin used extend Embla Carousel autoplay functionality. Example Installation Start installing npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-autoplay/embla-carousel-autoplay.umd.js\"></script> npm install embla-carousel-autoplay --save yarn add embla-carousel-autoplay Options follows exhaustive list Autoplay options default values. delay Type: number | (scrollSnapList: number[], emblaApi: EmblaCarouselType) => number[] Default: 4000 Choose delay transitions milliseconds. pass number, delay applied transitions. pass function, return array numbers based scrollSnapList parameter set different delays scroll snap. jump Type: boolean Default: false set true true , autoplay instant slide transitions advancing. playOnInit Type: boolean Default: true set false , start autoplay manually calling play method. useful set false want full control timing. example, building autoplay progress bar. stopOnInteraction Type: boolean Default: true set false , autoplay disabled drag interactions, restart every time interaction. stopOnMouseEnter Type: boolean Default: false enabled, autoplay stop mouse pointer enters Embla Carousel container. stopOnInteraction also false , autoplay resume mouse leaves carousel container. stopOnFocusIn Type: boolean Default: true enabled, autoplay stop focusable element inside carousel recieves focus. stopOnInteraction false , autoplay resume user leaves focus. stopOnLastSnap Type: boolean Default: false parameter enabled, autoplay stop reaches last slide. rootNode Type: (emblaRoot: HTMLElement) => HTMLElement | null Default: null node respond user interactions like stopOnMouseEnter stopOnInteraction. omitted, node wraps Embla Carousel used default. Methods follows exhaustive list Autoplay methods respective parameters return values. play Parameters: jump?: boolean Returns: void Start autoplay. Set jump parameter true want autoplay instant slide transitions advancing. Please note providing value method vill override jump option. stop Parameters: none Returns: void Stop autoplay. reset Parameters: none Returns: void Resets timer starts over. take effect autoplay already active. autoplay stopped, method anything. isPlaying Parameters: none Returns: boolean Returns boolean whether autoplay playing not. timeUntilNext Parameters: none Returns: number | null autoplay timer active, return number representing time left autoplay scrolls next snap. timer active, return null . Use together autoplay:timerset autoplay:timerstopped events create custom progress bar autoplay. using reactive wrapper Embla Carousel like embla-carousel-react building autoplay progress bar, probably want set playOnInit false call play method manually fully control timing. autoplay plugin start playing soon initialized, might want cases. Events follows exhaustive list Autoplay events together information work. autoplay:play Once: Fires autoplay starts playing. event triggered, autoplay timer active, autoplay select next scroll snap start scrolling delay passed. autoplay:stop Once: Fires autoplay stops playing. event triggered, autoplay timer active anymore. autoplay:select Once: Fires directly autoplay selects next scroll snap starts scrolling it. autoplay:timerset Once: Fires autoplay timer set. soon timer set, countdown autoplay next scroll snap begin. autoplay:timerstopped Once: Fires autoplay timer stopped."},
{"source": "https://www.embla-carousel.com/plugins/class-names/", "title": "Class Names", "text": "Class Names View plugin GitHub Class Names class name toggle utility plugin Embla Carousel enables automate toggling class names carousel. Example Installation First need install npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-class-names/embla-carousel-class-names.umd.js\"></script> npm install embla-carousel-class-names --save yarn add embla-carousel-class-names Usage Please read plugins page learn work plugins. Options follows exhaustive list Class Names options default values. snapped Type: string | string[] Default: is-snapped Choose class name applied snapped slides. also possible pass array class names. Pass empty string opt-out. inView Type: string | string[] Default: is-in-view Choose class name applied slides view. also possible pass array class names. Pass empty string opt-out. feature honor inViewThreshold option. draggable Type: string | string[] Default: is-draggable Choose class name applied draggable carousel. also possible pass array class names. Pass empty string opt-out. dragging Type: string | string[] Default: is-dragging Choose class name applied container dragging. also possible pass array class names. Pass empty string opt-out. loop Type: string | string[] Default: is-loop Choose class name applied carousel loop activated. also possible pass array class names. Pass empty string opt-out."},
{"source": "https://www.embla-carousel.com/plugins/fade/", "title": "Fade", "text": "Fade View plugin GitHub plugin used replace Embla Carousel scroll functionality fade transitions. Example Installation Start installing npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-fade/embla-carousel-fade.umd.js\"></script> npm install embla-carousel-fade --save yarn add embla-carousel-fade Fade plugin enabled, inViewThreshold option longer effect. Fade plugin stacks slides opacity higher 0 top other, eliminating concept scrolling gradual appearance slides. slides less 100% viewport width, recommended set options using Fade plugin avoid confusing UX: const options = { align: 'center', containScroll: false} However, align: center default omit setting align option achieve thing like so: const options = { containScroll: false}"},
{"source": "https://www.embla-carousel.com/plugins/wheel-gestures/", "title": "Wheel Gestures", "text": "Wheel Gestures View plugin GitHub plugin used extend Embla Carousel ability use mouse/trackpad wheel navigate carousel. Installation First need install npm package save dependencies: <script src=\"https://unpkg.com/embla-carousel-wheel-gestures/dist/embla-carousel-wheel-gestures.umd.js\"></script> npm install embla-carousel-wheel-gestures --save yarn add embla-carousel-wheel-gestures Usage plugin accepts single optional parameter, options object allows configure it. import EmblaCarousel 'embla-carousel'import { WheelGesturesPlugin } 'embla-carousel-wheel-gestures' const embla = EmblaCarousel(emblaRoot, { loop: false }, [WheelGesturesPlugin()]) // Add plugin Options follows exhaustive list Wheel Gestures options default values. wheelDraggingClass Type: string Default: is-wheel-dragging Choose classname applied container wheel gesture. Pass empty string opt-out. forceWheelAxis Type: string | undefined Default: undefined Force axis listen wheel events. Choose scroll axis x . Useful want slide horizontally scrolling vertically vice versa. target Type: Element Default: undefined Specify element observed wheel events."}]