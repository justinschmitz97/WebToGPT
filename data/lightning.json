{
  "name": "https://www.lightningdesignsystem.com",
  "url": "https://https://www.lightningdesignsystem.com",
  "pages": [
    {
      "url": "https://www.lightningdesignsystem.com",
      "title": "Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Ready-to-use HTML and CSS UI elements provide the foundation for Salesforce experience development Go to Blueprints Visual design values and attributes that ensure branding and UI consistency at scale View Tokens Design principles and best practices that guide beautiful, consistent, user-friendly product experiences Read Guidelines Easy-to-use tools help all Trailblazers optimize workflows and bring Salesforce ideas to life Get Tools"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/color-contrast/known-issues",
      "title": "Known Issue with iframes - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Overview", "Steps to reproduce", "Workaround"]
        },
        {
          "type": "p",
          "text": "Lightning components in iframes may show up with the old non-accessible colors.Styling hooks for colorsalso may not work when under an iframe. This issue is not specific to a particular page or cloud. This issue is related to iframes, which can be present in any of your pages. We expect that Lightning components and Styling Hook color changes will work in an iframe in Summer â24 (safe harbor). You can, however, make Lightning components and styling hooks work in Spring â24 with the workaround below. If you notice that a certain section of your page has old non-accessible colors, that part of your page might be loaded through an iframe."
        },
        {
          "type": "list",
          "items": [
            "Open the developer tools of the browser and navigate to the Elements tab.",
            "Check if the body tag of the page has theslds-wcagclass. If so, search for Iframe tags.",
            "If you find an iframe tag, verify whether the elements or components you observed for the old non-accessible colors are present inside the iframe.",
            "If present, you are encountering the known issue.",
            "If you don't find an iframe tag and the elements or components are in old non-accessible colors, please contact Salesforce with the details."
          ]
        },
        {
          "type": "p",
          "text": "Styling hooks and new color changes to components are currently scoped under theslds-wcagclass, which is present on the body tag of the main page. If you own the content inside the iframe, addslds-wcagto your iframe's body tag. This change will result in Lightning components displaying with the new accessible colors and styling hooks will work. If you own a page with iframes, but do not own the content in the iframe, consider adding the following to your page:"
        },
        {
          "type": "code",
          "code": "checkForIframes:function(){// fetch the iframevariframe=document.querySelector('iframe');if(iframe){// wait for iframe to loadiframe.addEventListener(\"load\",function(){variframeDocument=iframe.contentDocument||iframe.contentWindow.document;// Add the class to the body tag of iframeiframeDocument&&iframeDocument.querySelector(\"body\")&&iframeDocument.querySelector(\"body\").classList.add('slds-wcag');});}}"
        },
        {
          "type": "p",
          "text": "These workarounds should not be needed in Summer â24 (safe harbor)."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/color-contrast/migration-guide",
      "title": "Migration Guide - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Finding Styling Hooks",
            "MigrationLightning Base ComponentsSLDS BlueprintsPartial SLDS BlueprintsSLDS Tokens or ClassesCustom TokensHard-coded Values--lwc overrideUI Namespace ComponentsSummary",
            "Lightning Base Components",
            "SLDS Blueprints",
            "Partial SLDS Blueprints",
            "SLDS Tokens or Classes",
            "Custom Tokens",
            "Hard-coded Values",
            "--lwc override",
            "UI Namespace Components",
            "Summary",
            "Download NPM Packages"
          ]
        },
        {
          "type": "p",
          "text": "This document helps developers using the Salesforce Lightning Design System (SLDS) or base Lightning components to ensure that their custom components align with the color-contrast changes released in Summer '23 and continuing in Winter '24. Follow the guidelines in this document to avoid visual regressions in your custom components. Salesforce is updating the color contrast of non-text functional UI elements to meet our commitments to accessibility. These changes help users discern functional UI elements, making Salesforce easier to use for people with low vision. Web Content Accessibility Guidelines (WCAG)are a series of web accessibility guidelines published by theWeb Accessibility Initiative (WAI)of theWorld Wide Web Consortium (W3C). The guidelines include criteria fornon-text contrast. Good color contrast means that all users can more easily see the content on any device or in any lighting conditions. We started the color-contrast changes inSummer '23. We will continue the rollout in Winter '24 to all pages in Lightning Experience and the changes will also apply to base Lightning components used in a custom component (safe harbor). For an overview of color usage in SLDS, see theSalesforce Color Guidelines."
        },
        {
          "type": "list",
          "items": [
            "New global color styling hooks have been added to SLDS.",
            "Base Lightning components and SLDS component blueprints have updated color values using global color styling hooks.",
            "Icons have updated background colors for improved color contrast."
          ]
        },
        {
          "type": "p",
          "text": "To make your custom components consistent with the color-contrast changes:"
        },
        {
          "type": "list",
          "items": [
            "All functional usage of red is Red-40 (ex. destructive button background, icons, text, badges, etc)",
            "Any other states use Red-30 (ex. hover state)"
          ]
        },
        {
          "type": "list",
          "items": ["All instances of Orange-70 have moved to Orange-60"]
        },
        {
          "type": "list",
          "items": ["Background for Path has moved from Green-70 to Green-60"]
        },
        {
          "type": "list",
          "items": [
            "All links have moved from Blue-50 to Blue-40",
            "All links hover states have moved from Blue-40 to Blue-30"
          ]
        },
        {
          "type": "list",
          "items": [
            "All functional borders have moved from Neutral-80 to Neutral-50"
          ]
        },
        {
          "type": "p",
          "text": "Before we talk about how to update custom components to look and feel the same as the changes in the Salesforce Lightning Design System (SLDS) and Lightning Experience, let's align on some terminology. The set of shared components provided by Salesforce to help build more consistent and high-quality UI. See the full list in theComponent Library. TheSalesforce Lightning Design System(SLDS) is a collection of design guidelines, component specifications, and production CSS that provides a consistent look and user experience for Salesforce apps. A blueprint is aset of specificationsfor how to implement a UI component that uses SLDS. A component is said to \"implement a blueprint\" when its markup matches the SLDS specification, and it uses SLDS classes like.slds-button The full name for blueprints is component blueprints. People often refer to them as just components, but that's not entirely accurate. Components are generally fully functional, but the HTML5 and CSS in SLDS are static. You must integrate an SLDS blueprint with a JavaScript framework before a user can interact with it. In CSS, a custom property is a way to create shared values using the--syntax. Examples include--lwc-colorBorderand--slds-c-button-text-color. Styling hooksare CSS custom properties that are used by SLDS to make styling customizable in predictable ways. There are two types of styling hooks: global and component-level. Global color styling hooks (--slds-g-*) are pre-defined values for usage globally in an app. For example, to rebrand your application, use global hooks to make a change across all the components you are using. Component-level styling hooks (--slds-c-*) enable you to update properties in a specific component. For example, to make one single button have a thicker border, edit the component hook for that button, and it won't affect any other components. Assign styling hooks with thevar()syntax in LWC. This makes your CSS simpler and easier to maintain. Design tokensare shared values used in CSS. Design tokens help to maintain a scalable and consistent UI. When you use a token, each instance of the token is automatically updated every time that token is updated in SLDS, with no manual updates required. Using tokens to represent design attributes makes it easy for the design system team to update and scale design elements across web and native applications. Replace design tokens with global color styling hooks, where possible. Historically, you could createcustom Aura tokensif the SLDS design tokens didn't satisfy your design needs. However, using an Aura design token makes your custom UI less maintainable. Replace custom Aura tokens with SLDS styling hooks. For details, seeCustom Component with Custom Tokens. To replace a hard-coded color value or a design token with the closestglobal color styling hook:"
        },
        {
          "type": "list",
          "items": [
            "Look for global color styling hooks that have the same semantic meaning as the value that you're replacing.  For example, if you are using a styling hook to apply colors for error messages, narrow your search down to styling hooks in the \"error\" category.",
            "From the styling hooks category, select the global color styling hook that has the closest color match to the value that you're replacing."
          ]
        },
        {
          "type": "p",
          "text": "This guide lists different classifications of custom components with details on how to handle each migration scenario to align with the color-contrast changes."
        },
        {
          "type": "list",
          "items": [
            "Look through the classifications of custom components to identify if any of them apply to your custom Aura or Lightning web components. Find a list of your custom components from Setup. In the Quick Find box, enter Lightning Components, and then select Lightning Components.",
            "Use the recommended approach to update your custom components."
          ]
        },
        {
          "type": "list",
          "items": [
            "Base Lightning Component",
            "Custom Component with SLDS Blueprint",
            "Custom Component with Partial SLDS Blueprint",
            "Custom Component with SLDS Tokens or Classes",
            "Custom Component with Custom Tokens",
            "Custom Component with Hard-coded Values",
            "Base Component with --lwc override",
            "UI Namespace Components"
          ]
        },
        {
          "type": "p",
          "text": "You use a Lightning web component or an Aura component without any additional overrides. Here's an example of a custom Lightning web component."
        },
        {
          "type": "code",
          "code": "<!-- Markup --><template><lightning-button>Save</lightning-button></template>"
        },
        {
          "type": "p",
          "text": "Nothing.Color updates happen for free as thebase Lightning componentsimplementSLDS blueprints. You use a custom component that implements a SLDS blueprint and only use SLDS classes for styling. Here's an example of a custom Lightning web component."
        },
        {
          "type": "code",
          "code": "<!-- myComponent.html --><template><buttonclass=\"slds-button slds-button_neutral\">Save</button></template>"
        },
        {
          "type": "p",
          "text": "Nothing.Color updates happen for free if your component exactly implements anSLDS blueprint. This scenario is similar to2. Custom Component with SLDS Blueprint, but you use a custom component that partially implements an SLDS blueprint or uses more than SLDS classes for styling. Here's an example of a custom Lightning web component."
        },
        {
          "type": "code",
          "code": "<!-- Markup --><template><buttonclass=\"slds-button slds-button_neutral my-class\">Save</button></template>/* CSS */\n.my-class {\n  color: #ccc; <-- This value needs to get updated to meet WCAG guidelines\n  margin-left: 1rem;\n}"
        },
        {
          "type": "p",
          "text": "You may need to update colors in your custom CSS if you see visual regressions."
        },
        {
          "type": "list",
          "items": [
            "If abase Lightning componentexists for that blueprint and variant, we recommend replacing your custom component with the base Lightning component.",
            "If you need to customize component styling, we recommend that you use --sldsstyling hooksfor any hardcoded color values. If the hardcoded color value doesn't have an exact match in styling hooks, consider using the styling hook that has the closest matching color value.",
            "You may want to check for sufficient color contrast for the component before updating the hardcoded value to a styling hook. TheStark Accessibility Checkerhas a free color contrast tool that's available as a browser extension in multiple browsers. For Chrome, get the extension at thechrome web store.",
            "Color changes to SLDS classes happen for free. Because changes are scoped to color, these classes should otherwise continue to function, as expected."
          ]
        },
        {
          "type": "p",
          "text": "In this example, the custom CSS class.my-classoverrides a value from.slds-button_neutral. You should update the value associated with the custom class to have better color contrast. The entire implementation would also be more maintainable if you replace it with a base Lightning component and use the--slds-c-button-text-colorstyling hook to make an accessible override. Note:If no styling hook exists for the hard coded value, we recommend using the styling hook that has the closest matching color value."
        },
        {
          "type": "code",
          "code": "<!-- Fixed Markup --><template><lightning-buttonclass=\"slds-m-left_medium\">Save</lightning-button></template>/* Fixed CSS */\n:host {\n  --slds-c-button-text-color: var(--slds-g-color-neutral-base-80, #C9C9C9);\n}"
        },
        {
          "type": "p",
          "text": "You use a custom component that either directly uses SLDS tokens within custom CSS or uses SLDS classes in the markup. Here's an example of a custom Lightning web component."
        },
        {
          "type": "code",
          "code": "<!-- Markup --><template><buttonclass=\"my-button\">Save</button></template>/* CSS */\n.my-button{\n  border-color: var(--lwc-colorBorder);\n}"
        },
        {
          "type": "p",
          "text": "You may need to replacetokensin custom CSS with therelevant global color styling hooks, as necessary. In this example, the tokent(colorBorder)is intended for decorative borders like cards and dividers. It should be replaced with a styling hook that's aligned with theSLDS Button blueprint."
        },
        {
          "type": "code",
          "code": "/* Fixed CSS\n*  Closest matching styling hooks for t(colorBorder)\n*/.my-button{border-color:var(--slds-g-color-neutral-base-50,#747474);}"
        },
        {
          "type": "p",
          "text": "You use a custom component that uses custom Aura design tokens. Here's the definition of a custom Aura design token and a custom component's CSS that references the custom token."
        },
        {
          "type": "code",
          "code": "<!-- Custom Aura token --><aura:tokens><aura:tokenname=\"myBackgroundColor\"value=\"#f4f6f9\"/></aura:tokens><!-- Markup --><template><divclass=\"my-div\">...</div><template>/* CSS */\n.my-div{\n  background-color: t(myBackgroundColor);\n}\n\n/* or */\n\n.my-div{\n  background-color: var(--c-myBackgroundColor);\n}"
        },
        {
          "type": "p",
          "text": "We recommend replacing custom design tokens with SLDS styling hooks, where possible. When using styling hooks, use a hook that has the right semantic context. For example, a hook such as--slds-g-color-border-base-1should only be used for borders. This approach ensures that your product remains consistent with Salesforce's styling as future color updates occur. If you must keep your custom token for whatever reason, double check that your custom token hasn't experienced any visual regressions. In this example, the tokent(myBackgroundColor)is using an outdated color value from SLDS. The current Lightning visual language no longer uses this color. The custom token should be replaced with theclosest color from the list of styling hooks. In this example,slds-g-color-neutral-base-95: #f3f3f3is the closest matching SLDS Styling hook."
        },
        {
          "type": "code",
          "code": "/* CSS Fixed */.my-div{background-color:var(--slds-g-color-neutral-base-95,#f3f3f3);}"
        },
        {
          "type": "p",
          "text": "You use a custom component that uses a hard-coded color value like#444orrgb(68,68,68). Your code might look like example 3 above. We recommend replacing hard-coded colors with styling hooks if an analogous color exists. When selecting tokens, be sure to use semantic tokens in ways that preserve their meaning. For example--slds-g-color-border-base-1should only be used as the border color of form elements. If you want to keep your hard-coded color value, verify that these colors have not experienced any visual regressions. Note:Fallback values can remain as hard-coded color values. Thevar()function accepts two arguments: a CSS custom property and an optional fallback value. In this example,--slds-c-badge-color-backgroundis the first argument, the CSS custom property, and#ECEBEAis the second argument, the fallback value."
        },
        {
          "type": "code",
          "code": "var(--slds-c-badge-color-background,#ECEBEA)"
        },
        {
          "type": "p",
          "text": "You use a base Lightning component and you're overriding a--lwctoken to customize the style of one or more components. Here's an example of a custom Lightning web component."
        },
        {
          "type": "code",
          "code": "<!-- Markup --><template><lightning-radio-groupname=\"radioGroup\"label=\"Radio Group\"options={options}value={value}type=\"button\"></lightning-radio-group></template>/* CSS */\n:host {\n  --lwc-colorBorder: red;\n}"
        },
        {
          "type": "p",
          "text": "NOTE:This is not a recommended way to customize components and there is no guarantee that customizations made in this way will continue to function."
        },
        {
          "type": "list",
          "items": [
            "Check if you are overriding and--lwctokens for any of thesecomponents.",
            "Replace each overridden--lwctoken with a--sldsstyling hook."
          ]
        },
        {
          "type": "p",
          "text": "In this example, overriding--lwc-colorBorderto red turns all the button borders red. The SLDS team updated this component variant to use a global color styling hook so this override will stop working. In this case, simply use--slds-g-color-border-base-4under the selector scope to override the border color."
        },
        {
          "type": "code",
          "code": "// CSS fixed:host{--slds-g-color-border-base-4:red;}"
        },
        {
          "type": "p",
          "text": "You are using ui components such asui:inputTextorui:menu. UI namespace components were deprecated and should be replaced by their counterparts from the lightning namespace.See here for more info."
        },
        {
          "type": "list",
          "items": [
            "Check for visual regressions by looking at pages that contain custom components.",
            "Replace hard-coded color values with global color styling hooks, where possible.",
            "Replace design tokens with global color styling hooks, where possible.",
            "Replace--lwcstyling hooks with global color styling hooks.",
            "If there's no exact styling hook match for the hard-coded color value, use the closest available matching styling hook.",
            "Pick styling hooks that correspond to the context of usage. For example, when replacing the hard-coded value of#747474with a styling hook, there are two alternatives to choose from--slds-g-color-border-base-4or--slds-g-color-neutral-base-50. We recommend that you use--slds-g-color-border-base-4for the CSS styling context of \"border\" rather than--slds-g-color-neutral-base-50.",
            "Use other categories of Styling hooks also beyond color Styling hooks for the hardcoded values.",
            "We recommend using a hardcoded fallback value invar(..)statement in case a legacy browser cannot read the styling hook or design token. This is optional.Example:var(--slds-g-color-neutral-base-50,#747474);",
            "We recommend any color customizations that you make meet WCAG 2.1 text and non-text color contrast standards."
          ]
        },
        {
          "type": "p",
          "text": "There's a separate version of the SLDS NPM package and other assets that have the new accessible colors. Below are the links to the updated packages.  The main branch for npm packages and Lightning Design System zip's will be updated with the new accessible colors on 10/13/23."
        },
        {
          "type": "list",
          "items": ["NPM Package"]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/global-color-styling-hooks",
      "title": "Global Color Styling Hooks - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["System Colors", "Palette Colors"]
        },
        {
          "type": "p",
          "text": "This section lists the available global color styling hooks. System-level styling hooks provide a way to manage the visual appearance of elements across an entire application. The system color styling hooks in this list are compatible with Lightning UI, but theyâre incompatible with Enhanced Lightning UI."
        },
        {
          "type": "list",
          "items": [
            "--slds-g-color-border-base-2",
            "--slds-g-color-border-base-3",
            "--slds-g-color-border-base-4",
            "--slds-g-color-border-brand-1",
            "--slds-g-color-border-brand-2",
            "--slds-g-color-neutral-10-opacity-10",
            "--slds-g-color-neutral-10-opacity-25",
            "--slds-g-color-neutral-10-opacity-50",
            "--slds-g-color-neutral-100-opacity-25",
            "--slds-g-color-neutral-100-opacity-75",
            "--slds-g-link-color",
            "--slds-g-link-color-active",
            "--slds-g-link-color-focus",
            "--slds-g-link-color-hover",
            "--slds-g-link-text-color-hover"
          ]
        },
        {
          "type": "p",
          "text": "All other system color styling hooks in this table are compatible with Lightning UI and Enhanced Lightning UI. #FFFFFF PALETTE_NEUTRAL_100 #F3F3F3 PALETTE_NEUTRAL_95 #E5E5E5 PALETTE_NEUTRAL_90 #C9C9C9 PALETTE_NEUTRAL_80 #AEAEAE PALETTE_NEUTRAL_70 #A0A0A0 PALETTE_NEUTRAL_65 #939393 PALETTE_NEUTRAL_60 #747474 PALETTE_NEUTRAL_50 #5C5C5C PALETTE_NEUTRAL_40 #444444 PALETTE_NEUTRAL_30 #2E2E2E PALETTE_NEUTRAL_20 #242424 PALETTE_NEUTRAL_15 #181818 PALETTE_NEUTRAL_10 #FFFFFF PALETTE_BLUE_100 #EEF4FF PALETTE_BLUE_95 #D8E6FE PALETTE_BLUE_90 #AACBFF PALETTE_BLUE_80 #78B0FD PALETTE_BLUE_70 #57A3FD PALETTE_BLUE_65 #1B96FF PALETTE_BLUE_60 #0176D3 PALETTE_BLUE_50 #0B5CAB PALETTE_BLUE_40 #014486 PALETTE_BLUE_30 #032D60 PALETTE_BLUE_20 #03234D PALETTE_BLUE_15 #001639 PALETTE_BLUE_10 #FFFFFF PALETTE_NEUTRAL_100 #FEDED8 PALETTE_RED_90 #FEB8AB PALETTE_RED_80 #FE8F7D PALETTE_RED_70 #FE5C4C PALETTE_RED_60 #EA001E PALETTE_RED_50 #BA0517 PALETTE_RED_40 #8E030F PALETTE_RED_30 #640103 PALETTE_RED_20 #300C01 PALETTE_RED_10 #FFFFFF PALETTE_NEUTRAL_100 #FEDFD0 PALETTE_ORANGE_90 #FFBA90 PALETTE_ORANGE_80 #FE9339 PALETTE_ORANGE_70 #DD7A01 PALETTE_ORANGE_60 #A96404 PALETTE_ORANGE_50 #825101 PALETTE_ORANGE_40 #5F3E02 PALETTE_ORANGE_30 #3E2B02 PALETTE_ORANGE_20 #201600 PALETTE_ORANGE_10 #FFFFFF PALETTE_NEUTRAL_100 #CDEFC4 PALETTE_GREEN_90 #91DB8B PALETTE_GREEN_80 #45C65A PALETTE_GREEN_70 #3BA755 PALETTE_GREEN_60 #2E844A PALETTE_GREEN_50 #396547 PALETTE_GREEN_40 #194E31 PALETTE_GREEN_30 #1C3326 PALETTE_GREEN_20 #071B12 PALETTE_GREEN_10 #C9C9C9 PALETTE_NEUTRAL_80 #AEAEAE PALETTE_NEUTRAL_70 #939393 PALETTE_NEUTRAL_60 #747474 PALETTE_NEUTRAL_50 #78B0FD PALETTE_BLUE_70 #1B96FF PALETTE_BLUE_60 #0B5CAB PALETTE_BLUE_40 #014486 PALETTE_BLUE_30 #014486 PALETTE_BLUE_30 #032D60 PALETTE_BLUE_20 rgba(24, 24, 24, 0.1)  rgba(24, 24, 24, 0.25)  rgba(24, 24, 24, 0.5)  rgba(24, 24, 24, 0.75)  rgba(255, 255, 255, 0.1)  rgba(255, 255, 255, 0.25)  rgba(255, 255, 255, 0.5)  rgba(255, 255, 255, 0.75)  Generic colors to use within a Salesforce application. #001639 PALETTE_BLUE_10 #03234D PALETTE_BLUE_15 #032D60 PALETTE_BLUE_20 #014486 PALETTE_BLUE_30 #0B5CAB PALETTE_BLUE_40 #0176D3 PALETTE_BLUE_50 #1B96FF PALETTE_BLUE_60 #57A3FD PALETTE_BLUE_65 #78B0FD PALETTE_BLUE_70 #AACBFF PALETTE_BLUE_80 #D8E6FE PALETTE_BLUE_90 #EEF4FF PALETTE_BLUE_95 #001A28 PALETTE_CLOUD_BLUE_10 #0A2636 PALETTE_CLOUD_BLUE_15 #023248 PALETTE_CLOUD_BLUE_20 #084968 PALETTE_CLOUD_BLUE_30 #05628A PALETTE_CLOUD_BLUE_40 #107CAD PALETTE_CLOUD_BLUE_50 #0D9DDA PALETTE_CLOUD_BLUE_60 #08ABED PALETTE_CLOUD_BLUE_65 #1AB9FF PALETTE_CLOUD_BLUE_70 #90D0FE PALETTE_CLOUD_BLUE_80 #CFE9FE PALETTE_CLOUD_BLUE_90 #EAF5FE PALETTE_CLOUD_BLUE_95 #071B12 PALETTE_GREEN_10 #0C2912 PALETTE_GREEN_15 #1C3326 PALETTE_GREEN_20 #194E31 PALETTE_GREEN_30 #396547 PALETTE_GREEN_40 #2E844A PALETTE_GREEN_50 #3BA755 PALETTE_GREEN_60 #41B658 PALETTE_GREEN_65 #45C65A PALETTE_GREEN_70 #91DB8B PALETTE_GREEN_80 #CDEFC4 PALETTE_GREEN_90 #EBF7E6 PALETTE_GREEN_95 #281202 PALETTE_HOT_ORANGE_10 #421604 PALETTE_HOT_ORANGE_15 #4A2413 PALETTE_HOT_ORANGE_20 #7E2600 PALETTE_HOT_ORANGE_30 #AA3001 PALETTE_HOT_ORANGE_40 #D83A00 PALETTE_HOT_ORANGE_50 #FF5D2D PALETTE_HOT_ORANGE_60 #FF784F PALETTE_HOT_ORANGE_65 #FF906E PALETTE_HOT_ORANGE_70 #FEB9A5 PALETTE_HOT_ORANGE_80 #FFDED5 PALETTE_HOT_ORANGE_90 #FEF1ED PALETTE_HOT_ORANGE_95 #200647 PALETTE_INDIGO_10 #1F0974 PALETTE_INDIGO_15 #321D71 PALETTE_INDIGO_20 #2F2CB7 PALETTE_INDIGO_30 #3A49DA PALETTE_INDIGO_40 #5867E8 PALETTE_INDIGO_50 #7F8CED PALETTE_INDIGO_60 #8E9BEF PALETTE_INDIGO_65 #9EA9F1 PALETTE_INDIGO_70 #BEC7F6 PALETTE_INDIGO_80 #E0E5F8 PALETTE_INDIGO_90 #F1F3FB PALETTE_INDIGO_95 #201600 PALETTE_ORANGE_10 #371E03 PALETTE_ORANGE_15 #3E2B02 PALETTE_ORANGE_20 #5F3E02 PALETTE_ORANGE_30 #825101 PALETTE_ORANGE_40 #A96404 PALETTE_ORANGE_50 #DD7A01 PALETTE_ORANGE_60 #F38303 PALETTE_ORANGE_65 #FE9339 PALETTE_ORANGE_70 #FFBA90 PALETTE_ORANGE_80 #FEDFD0 PALETTE_ORANGE_90 #FFF1EA PALETTE_ORANGE_95 #370114 PALETTE_PINK_10 #4B0620 PALETTE_PINK_15 #61022A PALETTE_PINK_20 #8A033E PALETTE_PINK_30 #B60554 PALETTE_PINK_40 #E3066A PALETTE_PINK_50 #FF538A PALETTE_PINK_60 #FE7298 PALETTE_PINK_65 #FE8AA7 PALETTE_PINK_70 #FDB6C5 PALETTE_PINK_80 #FDDDE3 PALETTE_PINK_90 #FEF0F3 PALETTE_PINK_95 #240643 PALETTE_PURPLE_10 #300B60 PALETTE_PURPLE_15 #401075 PALETTE_PURPLE_20 #5A1BA9 PALETTE_PURPLE_30 #7526E3 PALETTE_PURPLE_40 #9050E9 PALETTE_PURPLE_50 #AD7BEE PALETTE_PURPLE_60 #B78DEF PALETTE_PURPLE_65 #C29EF1 PALETTE_PURPLE_70 #D7BFF2 PALETTE_PURPLE_80 #ECE1F9 PALETTE_PURPLE_90 #F6F2FB PALETTE_PURPLE_95 #300C01 PALETTE_RED_10 #4A0C04 PALETTE_RED_15 #640103 PALETTE_RED_20 #8E030F PALETTE_RED_30 #BA0517 PALETTE_RED_40 #EA001E PALETTE_RED_50 #FE5C4C PALETTE_RED_60 #FE7765 PALETTE_RED_65 #FE8F7D PALETTE_RED_70 #FEB8AB PALETTE_RED_80 #FEDED8 PALETTE_RED_90 #FEF1EE PALETTE_RED_95 #071B12 PALETTE_TEAL_10 #072825 PALETTE_TEAL_15 #023434 PALETTE_TEAL_20 #024D4C PALETTE_TEAL_30 #056764 PALETTE_TEAL_40 #0B827C PALETTE_TEAL_50 #06A59A PALETTE_TEAL_60 #03B4A7 PALETTE_TEAL_65 #01C3B3 PALETTE_TEAL_70 #04E1CB PALETTE_TEAL_80 #ACF3E4 PALETTE_TEAL_90 #DEF9F3 PALETTE_TEAL_95 #2E0039 PALETTE_VIOLET_10 #3D0157 PALETTE_VIOLET_15 #481A54 PALETTE_VIOLET_20 #730394 PALETTE_VIOLET_30 #9602C7 PALETTE_VIOLET_40 #BA01FF PALETTE_VIOLET_50 #CB65FF PALETTE_VIOLET_60 #D17DFE PALETTE_VIOLET_65 #D892FE PALETTE_VIOLET_70 #E5B9FE PALETTE_VIOLET_80 #F2DEFE PALETTE_VIOLET_90 #F9F0FF PALETTE_VIOLET_95 #281202 PALETTE_YELLOW_10 #2E2204 PALETTE_YELLOW_15 #4F2100 PALETTE_YELLOW_20 #6F3400 PALETTE_YELLOW_30 #8C4B02 PALETTE_YELLOW_40 #A86403 PALETTE_YELLOW_50 #CA8501 PALETTE_YELLOW_60 #D79304 PALETTE_YELLOW_65 #E4A201 PALETTE_YELLOW_70 #FCC003 PALETTE_YELLOW_80 #F9E3B6 PALETTE_YELLOW_90 #FBF3E0 PALETTE_YELLOW_95 #181818 PALETTE_NEUTRAL_10 #242424 PALETTE_NEUTRAL_15 #2E2E2E PALETTE_NEUTRAL_20 #444444 PALETTE_NEUTRAL_30 #5C5C5C PALETTE_NEUTRAL_40 #747474 PALETTE_NEUTRAL_50 #939393 PALETTE_NEUTRAL_60 #A0A0A0 PALETTE_NEUTRAL_65 #AEAEAE PALETTE_NEUTRAL_70 #C9C9C9 PALETTE_NEUTRAL_80 #E5E5E5 PALETTE_NEUTRAL_90 #F3F3F3 PALETTE_NEUTRAL_95 #FFFFFF PALETTE_NEUTRAL_100"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/guidelines/global-focus",
      "title": "Global Focus Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "General",
            "Errors",
            "Lists and Tables",
            "Dialogs",
            "Notification Cards",
            "Rich Text Editors",
            "Toasts",
            "Global Orchestration",
            "Page Loads and Refreshes"
          ]
        },
        {
          "type": "p",
          "text": "Keyboard navigation of single page apps and large web interfaces can get complicated in a hurry. Use focus management appropriately to guide keyboard users through dynamic UIs. Many users navigate web interfaces with only their keyboard, tabbing between focusable elements and using arrow keys to navigate interactive widgets such as menus. In dynamic user interfaces, the set of focusable elements on the screen changes as the user interacts with it. When a user's action causes a UI change, such as an element appearing or disappearing from the screen, we can use focus management techniques to prevent the user from getting lost. When focus management is done right, it helps keyboard and screen reader users discover UI changes and easily reach the next logical step in their flow."
        },
        {
          "type": "list",
          "items": [
            "The user's focus should never move without their actions triggering a change.",
            "If the user's action causes the currently focused element to disappear, move their focus to the next logical place in the UI.",
            "Ensure that the user can always tell where their focus is on the page. Every focusable element should have a focus style that is visually distinct from its unfocused stated.",
            "When a user closes a menu, dialog, or other sort of popover component, their focus should return to the element that triggered the display of that component."
          ]
        },
        {
          "type": "list",
          "items": [
            "When the user attempts to save and is presented with an error:If there areform element errors, place focus on the first input field with an associated error message. This makes it easy for the user to quickly correct the value.If an error popover appears, such as in theDocked Form Footercomponent, place focus inside the popover.If a page-level error appears, place focus on the error message.",
            "If there areform element errors, place focus on the first input field with an associated error message. This makes it easy for the user to quickly correct the value.",
            "If an error popover appears, such as in theDocked Form Footercomponent, place focus inside the popover.",
            "If a page-level error appears, place focus on the error message.",
            "For error toasts, refer to the focus guidelines forToasts."
          ]
        },
        {
          "type": "p",
          "text": "Component Examples:Data Tables,Setup Assistant,Vertical Navigation,Trial Bar When a row is removed from a list, via a button or menu on that list item, where to place focus depends on where the item sits within the list:"
        },
        {
          "type": "list",
          "items": [
            "First row or any middle row:Place focus on the first focusable element in the next row.",
            "Last row in the list:Place focus on last focusable element of previous row.",
            "Only row in the list:Place focus on the list container or any content identifying the list as being empty."
          ]
        },
        {
          "type": "p",
          "text": "There are several ways to show more items in a list. The important aspect is to ensure that focus is never lost and that when new items are added, focus continues to move \"downhill.\" Vertical Navigationis a good example of this strategy, as it uses markup forExpandable Sectionsinline with a list."
        },
        {
          "type": "list",
          "items": [
            "User tabs through the items in the list.",
            "If there is a \"Show More\" button, user tabs to this button after the last item in the list.",
            "Pressing the \"Show More\" button reveals more items below the toggle, but focus remains on this button.",
            "PressingTabon the \"Show More\" button moves focus to the first item after the button."
          ]
        },
        {
          "type": "p",
          "text": "Instead of a \"Show More\" / \"Show Less\" toggle, sometimes there may only be a single âShow Moreâ button that goes away when pressed. If this is the case, place focus on the first new item that is added to the list."
        },
        {
          "type": "list",
          "items": [
            "If a list loads as a user scrolls down the page, it also needs to load as a user tabs through the items in the list. There should be no hiccups when tabbing through a lazy loading list. It is best to load new items as the userâs focus approaches the end of the list. Donât wait until they reach the last item, or tab beyond the last item.",
            "There must be some keyboard mechanism for moving beyond an infinitely loading list. This will prevent a keyboard-only user from getting stuck in a list that \"never ends\" when they want to move beyond the list. Options include but are not limited to:A skip link before the list to take a user to the first focusable element after the listA keyboard shortcut to move the user to the first focusable element after the list",
            "A skip link before the list to take a user to the first focusable element after the list",
            "A keyboard shortcut to move the user to the first focusable element after the list"
          ]
        },
        {
          "type": "p",
          "text": "Dialogs come in two forms:modalandnon-modal:"
        },
        {
          "type": "list",
          "items": [
            "Amodal dialogis a window that sits above the main application. When it is displayed, the content behind is inactive. The user cannot interact with the content behind the modal until they close the dialog.",
            "Anon-modal dialogis a small application window that sits above the main application. It's displayed and focusable at the same time as the main application. This means that a user can switch back and forth between the non-modal dialog and the main application."
          ]
        },
        {
          "type": "p",
          "text": "Modal Dialog Examples:Modals,Welcome Mat Non-Modal Examples:Docked Composers,Notification Card,Panels,Popovers,Trial Bar"
        },
        {
          "type": "list",
          "items": [
            "The user must initiate the action to open a dialog, by clicking or pressingEnter/Spacebara button (known as the dialog's trigger).",
            "When the dialog opens, move focus into the dialog.",
            "Focus should always be trapped inside the dialog. This means when tabbing from the last item in the dialog, focus goes back to the first item in the dialog."
          ]
        },
        {
          "type": "p",
          "text": "To determine where focus should go when the modal opens, follow these questions:"
        },
        {
          "type": "list",
          "items": [
            "Question 1: Is it a multi-step modal?Yes - Is there a subtitle that changes for each step?Yes - Focus the subtitle that changesNo - Go to question 2",
            "Yes - Is there a subtitle that changes for each step?Yes - Focus the subtitle that changes",
            "Yes - Focus the subtitle that changes",
            "No - Go to question 2",
            "Question 2: Is there a Title inside the modal header?Yes - Focus the title inside the modal headerNo - Go to question 3",
            "Yes - Focus the title inside the modal header",
            "No - Go to question 3",
            "Question 3: Are there interactive elements anywhere within the modal body, excluding modal footer (ie. links, buttons, inputs)?Yes - Is the first interactive element a tooltip?Yes - Focus the close buttonNo - Focus the first interactive elementNo - Focus the close button",
            "Yes - Is the first interactive element a tooltip?Yes - Focus the close buttonNo - Focus the first interactive element",
            "Yes - Focus the close button",
            "No - Focus the first interactive element",
            "No - Focus the close button"
          ]
        },
        {
          "type": "p",
          "text": "If none of these apply or you have an exception, consult your friendly neighborhood accessibility specialist."
        },
        {
          "type": "list",
          "items": [
            "TheEscapekey should close the dialog. Actions such as \"OK,\" \"Cancel,\" or any other closing buttons may also apply.",
            "When closing the dialog via one of the above mechanisms, focus must return to the item that triggered the dialog.If the dialog was triggered from within a menu, place focus on the menuâs trigger.If the trigger no longer exists in the DOM, place focus in a logical place, dependent on the new landscape of the page. An example of this would be deleting a record from a table view. If you choose the \"Delete\" action from the record's actions menu, youâll get a modal prompt to confirm deletion. After the deletion, the row and thus the action menu will be gone. In this case, consult ourLists and Tablesfocus guidelines to learn where to place focus after removing an item.",
            "If the dialog was triggered from within a menu, place focus on the menuâs trigger.",
            "If the trigger no longer exists in the DOM, place focus in a logical place, dependent on the new landscape of the page. An example of this would be deleting a record from a table view. If you choose the \"Delete\" action from the record's actions menu, youâll get a modal prompt to confirm deletion. After the deletion, the row and thus the action menu will be gone. In this case, consult ourLists and Tablesfocus guidelines to learn where to place focus after removing an item.",
            "If closing a dialog results in aToastor other confirmation, place focus inside of the toast. When the toast closes, place focus on the element that initially triggered the dialog."
          ]
        },
        {
          "type": "p",
          "text": "PressingCmd/Ctrl + F6should move focus between the dialog, other open dialogs, and the application. Consult theGlobal Orchestrationsection of these guidelines for more onF6. Notification cards appear as a series of non-modal dialogs, preceded by a visually hidden DOM element with a definedaria-liveattribute. Updates to the content of the aria-live element will read out to screen reader users."
        },
        {
          "type": "list",
          "items": [
            "When a notification card appears, focus stays put where it is. The text inside the aria-live element should be updated to announce the card's arrival to screen readers.",
            "PressingCmd/Ctrl + F6will move through the various non-modal dialogs that are open on the screen, and ultimately onto the notification card.",
            "If there are multiple cards,Cmd/Ctrl + F6should move focus through the cards.",
            "From the last card,Cmd/Ctrl + F6should move focus out of the notification cards and back to the app."
          ]
        },
        {
          "type": "p",
          "text": "Component Examples:Notification Card Newly loaded rich text editors should not grab focus. Component Examples:Rich Text Editor Toasts work like dialogs, but with the attributerole=\"alert\". This attribute ensures that their contents are read by screen readers. Component Examples:Toast Toasts may only be launched based on a user action, such as saving, creating, deleting or converting a record. This is because toast components act as dialogs. As dialogs, focus must go into them in order for their contents to be read by screen readers. It would be confusing and inappropriate to move focus into dialog without the user triggering this action themselves. When exiting, focus should go to the item that triggered the toast, such as the button that launched a create dialog. If there are multiple toasts,Cmd/Ctrl + F6should move focus from toast to toast and then back to the application. For interfaces with a number of alerts, panels, composers, and major sections of the page, focus orchestration at an app-wide level allows the user to easily navigate the application. The industry standard is to use theF6key for global focus management. For web UIs, combine theF6key with theCmdkey on Mac or theCtrlkey on other operating systems so as not to conflict with browsers' app-wide keyboard shortcuts. PressingCmd/Ctrl + F6should cycle a user through the following regions in a reliable and consistent sequence:"
        },
        {
          "type": "list",
          "items": [
            "Open non-modal dialogs",
            "Open utility panels",
            "Open docked composers",
            "Task notifications",
            "Toast messages",
            "Main content",
            "Split view"
          ]
        },
        {
          "type": "p",
          "text": "When the user pressesCmd/Ctrl + F6to navigate to the next region, focus should go to the first focusable element in that region if nothing was previously focused there, or to the element in that region that last held focus. PressingShift + Cmd/Ctrl + F6should follow these same rules, but move focus into the previous region instead of the next one. Depending on how a page is loaded, the placement of focus varies. The guidelines below are based on Salesforce's Lightning UI and may not universally apply to other apps."
        },
        {
          "type": "list",
          "items": [
            "Refresh or direct navigation to URL:Focus goes to the very beginning of the page, before the skip navigation links.",
            "Global Navigation:When opening an object or record from the global navigation, focus should go to center stage.",
            "Global Navigation (Console):When choosing a record or object in Console apps, focus should go to the workspace tab for the new item added. When opening a new subtab from a workspace tab, focus should go to the subtabâs tab.",
            "Vertical Navigation:When choosing an item from a vertical navigation, such as that in Reports, Dashboards, Files, or Chatter, focus should go to center stage for this object.",
            "App Launcher:When switching applications, focus should go to the very beginning of the page, before the skip navigation links.",
            "Global Search:When performing a global search, focus should go to the results.",
            "Skip Links:When clicking on a skip link, focus should be placed where the skip link says it will go, e.g. main navigation, main content area, etc."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/guidelines/keyboard",
      "title": "Keyboard Interaction Accessibility Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Prerequisites",
            "Testing Checklist",
            "Component InteractionsComboboxMenuModal DialogNon-Modal Dialog (Popover)TabsTable/Data Grid",
            "Combobox",
            "Menu",
            "Modal Dialog",
            "Non-Modal Dialog (Popover)",
            "Tabs",
            "Table/Data Grid"
          ]
        },
        {
          "type": "p",
          "text": "OS X doesnât have full keyboard access enabled by default, so youâll need to do a one-time setup. Enable Keyboard Access on OS X"
        },
        {
          "type": "list",
          "items": [
            "OpenKeyboardsettings inSystem Preferences.",
            "Select theShortcutstab.",
            "Under Full Keyboard Access, selectAll controls."
          ]
        },
        {
          "type": "p",
          "text": "Enable Keyboard Access for Safari"
        },
        {
          "type": "list",
          "items": [
            "Open SafariPreferences.",
            "Select theAdvancedtab.",
            "Under Accessibility, checkPress Tab to highlight each item on a webpage."
          ]
        },
        {
          "type": "list",
          "items": [
            "Tabnavigates to next focusable element",
            "Shift+Tabnavigates to previous focusable element",
            "Arrowsnavigate between related radio buttons, menu items, or widget items",
            "Enteractivates a link or button, or submits a form",
            "Spaceactivates a button or toggle",
            "Esccloses menus, modals, and other popover variations"
          ]
        },
        {
          "type": "p",
          "text": "Many complex UI components are covered by the ARIA specification, which describes a suggested (and often user-expected) like-for-like keyboard interaction model based on desktop software equivalents. TheARIA Authoring Practicesis a great place to learn about these interactions. We've also included some common patterns below:"
        },
        {
          "type": "list",
          "items": [
            "Combobox",
            "Menu",
            "Modal Dialog",
            "Non-Modal Dialog (Popover)",
            "Tabs",
            "Table/Data Grid"
          ]
        },
        {
          "type": "p",
          "text": "Interactive elements are those that perform actions. Examples include buttons, links, input fields, toggles, tooltip triggers, tree nodes, and menu options. You should be able to focus on every interactive element, whether by Tabbing to it or by Tabbing to certain container widgets and using arrow keys to reach an option within the widget. Once you get to an interactive element, can you trigger its primary action using your keyboard? Some interactive elements are activated as soon as you focus on themâfor example, tabs and radio inputs. Others can be activated by pressing Enter or Space.Make sure that every click event has a corresponding keyboard event. If you can focus on a noninteractive element, thatâs almost always a bug. Images, text elements, disabled buttons, and other static elements should not be focusable. You might be wondering how screen reader users can read information on a page if they canât Tab to it. Donât worry: screen readers have their own special set of keyboard shortcuts for navigating through all elements in the DOM, not just the interactive onesâso you donât need to make noninteractive elements focusable for screen readers to read them. The currently focused element should always have a visual focus state that is distinctive from its unfocused state. In Salesforce UIs, focus is commonly represented with a fuzzy blue border and/or an underline. When navigating the UI with just your keyboard, you should never end up focused on an offscreen element. Always keep the currently focused element in view. A user's focus should never move without a user's action triggering a change. Interacting with an element often results in a UI change; make sure that your focus moves appropriately when it does. Some examples:"
        },
        {
          "type": "list",
          "items": [
            "If pressing an X button on a card removes that card, your focus should move to the next logical place in the DOM, usually the card after it.",
            "If pressing a button opens a modal, your focus should move into that modal."
          ]
        },
        {
          "type": "p",
          "text": "See theGlobal Focus Patternsdocumentation for expected behavior. If hovering over an element shows a custom tooltip for that element, focusing should do the same. Making drag-and-drop keyboard accessible isn't as hard as you think. Check out4 Major Patterns for Accessible Drag and Dropon the Salesforce UX blog for guidelines on keyboard-accessible drag-and-drop patterns. Find live examples and code in the blog post'scorresponding GitHub repo."
        },
        {
          "type": "list",
          "items": [
            "Characterkeys filter options",
            "Up and Down arrowsselect option and keep focus in input",
            "Left and Right arrowsmove cursor in the input field",
            "Enteractivates the selected option",
            "Esccollapses the options list"
          ]
        },
        {
          "type": "p",
          "text": "Additional References:"
        },
        {
          "type": "list",
          "items": [
            "Component Blueprint:Combobox",
            "ARIA Authoring PracticesCombobox"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enter/Spaceopens the menu and focuses first option",
            "Arrow keyscycle selection among menu items",
            "Enteractivates a menu item",
            "Esccloses the menu",
            "Characterkey typeahead"
          ]
        },
        {
          "type": "p",
          "text": "Additional References"
        },
        {
          "type": "list",
          "items": [
            "Component Blueprint:Menu",
            "Accessibility Pattern:Menu",
            "ARIA Authoring PracticesMenu"
          ]
        },
        {
          "type": "list",
          "items": [
            "Focusmoves to the dialogâs first focusable element when opened, returns to trigger when closed",
            "Esccloses the dialog",
            "Entersubmits the modalâs form data, if applicable"
          ]
        },
        {
          "type": "p",
          "text": "Modals alwaystrap focus. Pressing Tab while focused in the modal keeps focus in the modal rather than moving it to the underlying page. Additional References:"
        },
        {
          "type": "list",
          "items": [
            "Component Blueprint:Modal",
            "ARIA Authoring Practices:Modal Dialog"
          ]
        },
        {
          "type": "list",
          "items": [
            "Focusmoves to dialogâs first focusable element when opened, returns to trigger when closed",
            "Esccloses the dialog"
          ]
        },
        {
          "type": "p",
          "text": "Non-modal dialogs alwaystrap focus. Pressing Tab while focused in the dialog keeps focus in the dialog rather than moving it to the underlying page. Additional References:"
        },
        {
          "type": "list",
          "items": ["Component Blueprint:Popover"]
        },
        {
          "type": "list",
          "items": [
            "Arrow keyscycle selection among tabs",
            "Tab/Shift+Tabmoves focus between the focusable element before the tabset, the selected tab, and the focusable elements in the visible tab panel"
          ]
        },
        {
          "type": "p",
          "text": "Additional References:"
        },
        {
          "type": "list",
          "items": ["Component Blueprint:Tabs", "ARIA Authoring Practices:Tabs"]
        },
        {
          "type": "p",
          "text": "Just a simple table? Use basic keyboard navigation. Highly interactive? Infinite scrolling? Use a grid keyboard pattern:"
        },
        {
          "type": "list",
          "items": [
            "Arrow keysmove among cells",
            "Enterswitches from Nav Mode to Action Mode",
            "Tabmoves between focusable elements in Action Mode",
            "Escreturns to Nav Mode"
          ]
        },
        {
          "type": "p",
          "text": "Additional References:"
        },
        {
          "type": "list",
          "items": [
            "Component Blueprint:Data Tables",
            "ARIA Authoring Practices:Grid"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/guidelines/mobile-design",
      "title": "Accessible Mobile Design Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Starting Your Design Process",
            "Refining Your Design",
            "Preparing Specs for Developers"
          ]
        },
        {
          "type": "p",
          "text": "SLDS uses global web interaction patterns and visual accessibility affordances. Our goal is to provide a consistent user experience for all users, whether theyâre navigating with a mouse/touchscreen, keyboard, or screen reader. When designing new UIs, rely as much as possible on these existing, accessible patterns, and include links to relevant components in your engineering specs. If you're creating a new component or pattern (one that doesn't exist in SLDS), discuss it with an accessibility specialist to identify any requirements before implementation. Placeholder text isnât enoughâit can deeply confuse users when it disappears. The only exceptions to this rule (which still require a visually hidden label for assistive technology users):"
        },
        {
          "type": "list",
          "items": [
            "Search fields, where the magnifying glass icon serves as a visible label",
            "Publishersâ rich text area, where surrounding elements provide context"
          ]
        },
        {
          "type": "p",
          "text": "To make them understandable to screen reader users, label toggles and buttons, and identify if theyâre in a pressed or checked state. Label both radio button groups and each individual radio button. When using an icon as a button, give each state its own label. For buttons such as theSLDS stateful buttonthat change color when pressed, make sure that the buttonâs pressed state is returned. Every custom gesture should have a one-finger equivalent, so users with limited motor capabilities can use it. All custom gestures must be duplicated in the custom actions system of the screen reader. Make custom gestures easily discoverable, and include accessible help text describing their behavior. Long or infinitely horizontal scrolling lists make it difficult for screen reader users to track their place, given that only parts of them are visible in the viewport at any given time. Screen readers rely on content to be in the viewport to communicate information reliably to the user. Differentiate elements with a second indicator, such as informational text, icons, textures, or thicker borders. For example, instead of using green text to indicate success and red to indicate failure, use a green checkmark and a red X. Not everyone has 20/20 vision or $1,000 Retina monitors. Plug your colors intowww.AreMyColorsAccessible.comto ensure that most users can see them, with a ratio of 4.5:1 or higher for regular-sized text, 3:1 for icons and large text (24px and above or 18px bolded text). Disabled elements, such as a gray noninteractive buttons, do not need to pass contrast requirements. Use SLDS tokens semantically. For example, donât use colorTextWarning to make an item red; use it only for warning-state text. Keep all action bars (those containing buttons or other interactive controls) in the viewport at all times, even when the user scrolls. Screen reader users who use direct touch need such elements to stay in one place. In the example below, the contents of the record detail change, but the action bar remains in one place. The height of the highlights area does not change when its content changes. Anchor floating action buttons (those that exist on a plane above the regular scrolling UI) on the page, aligning them either in a corner or centered on an edge. They may disappear, as long as their behavior is reliable. Rare exceptions are possible, but please consult an accessibility specialist. To serve all users, make tap targets at least 44pt/dp/px, regardless of operating system. In your design specs, provide good descriptions for informational images, and indicate when images are purely decorative (if you need the image to understand the UI, itâs informational). Unsure? Consult your friendly neighborhood doc writer or accessibility specialist, or check outWebAIM: Alternative Text. Users should never be able to touch outside of a modal, or touch any components behind it. Always provide a tap target to close the modalâa gesture is not sufficient, nor is tapping on the mask. If you use half sheets, provide a tap target to let users toggle between half and full screen. Itâs OK to provide a gesture as long as you also provide a tap target. Tapping on \"My Favorites\" will expand or shrink the half sheet Present carousel content in a consistent order each time the page or view containing it is loaded. Avoid looping and autoplay, which can leave users unclear as to their location in the carousel. Always include a âview allâ or âshow moreâ control."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/guidelines/text-on-backgrounds",
      "title": "Text on Backgrounds - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "When text is against a non-solid background, such as an image or a gradient, it can present legibility issues for various users, especially those with low vision or cognitive disabilities such as dyslexia. To minimize visual and cognitive load on the user, follow these guidelines:"
        },
        {
          "type": "list",
          "items": [
            "Only heading text may appear on non-solid backgrounds.Text should be at least18pxand ideally only one line; longer strings of text can be harder to navigate when the background varies slightly behind each word or line.",
            "Gradient backgrounds can only be vertical,i.e. the color at the top is different than the color at the bottom. Avoid horizontal, diagonal, and radial gradients, which have the potential to change the background color for each character in a string.",
            "Always define a backup background color.Some users turn off background images due to accessibility concerns, so make sure that with the background image disabled, text is still legible and passes contrast requirements (4.5:1)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Font weight must be at least400 (normal font size and above).",
            "Text must have atext-shadowwith a4px blurin a color that has at least a7:1contrast ratio when compared to the textâs color.",
            "If any part of the image touching text has a non-solid background, apply either:a vertical background gradient, where the lightest portion of the gradient behind the text has at least a4.5:1contrast ratio with the font colora semi-transparent background that, when layered above a white background, would have at least a4.5:1contrast ratio with the font color",
            "a vertical background gradient, where the lightest portion of the gradient behind the text has at least a4.5:1contrast ratio with the font color",
            "a semi-transparent background that, when layered above a white background, would have at least a4.5:1contrast ratio with the font color"
          ]
        },
        {
          "type": "list",
          "items": [
            "Font weight must be at least400.",
            "Text must have atext-shadowwith a3px blurin a color that has at least a7:1contrast ratio when compared to the textâs color (for example: white).",
            "If any part of the image touching text has a non-solid background, apply either:a vertical background gradient, where the lightest portion of the gradient behind the text has at least a4.5:1contrast ratio with the font color, between the text and the background imagea semi-transparent background that, when layered above a black background, would have at least a4.5:1contrast ratio with the font color, between the text and the background image",
            "a vertical background gradient, where the lightest portion of the gradient behind the text has at least a4.5:1contrast ratio with the font color, between the text and the background image",
            "a semi-transparent background that, when layered above a black background, would have at least a4.5:1contrast ratio with the font color, between the text and the background image"
          ]
        },
        {
          "type": "p",
          "text": "Design note: This is a much less common pattern on the web. Ensure one of the following is true:"
        },
        {
          "type": "list",
          "items": [
            "Every color in the gradient has at least a4.5:1contrast ratio with its text.",
            "One end of the gradient has at least a4.5:1contrast ratio with the font color, and the text must have a4px text-shadowin a color that has at least a7:1contrast ratio with the font color."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/guidelines/web-design",
      "title": "Accessible Web Design Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Starting Your Design Process",
            "Refining Your Design",
            "Preparing Specs for Developers"
          ]
        },
        {
          "type": "p",
          "text": "SLDS uses global web interaction patterns and visual accessibility affordances. Our goal is to provide a consistent user experience for all users, whether theyâre navigating with a mouse/touchscreen, keyboard, or screen reader. When designing new UIs, rely as much as possible on these existing, accessible patterns, and include links to relevant components in your engineering specs. If you're creating a new component or pattern (one that doesn't exist in SLDS), discuss it with an accessibility specialist to identify any requirements before implementation. Placeholder text isnât enoughâit can deeply confuse users when it disappears. The only exceptions to this rule (which still require a visually hidden label for assistive technology users):"
        },
        {
          "type": "list",
          "items": [
            "Search fields, where the magnifying glass icon serves as a visible label",
            "Publishersâ rich text area, where surrounding elements provide context"
          ]
        },
        {
          "type": "p",
          "text": "Make sure that users donât have to hover over, or click in, arbitrary whitespace to make available actions appear, and that each action's tap target is large enough for users to select without error. Keep in mind that many users navigate without a mouse. For instance, users of voice dictation require visible actions for all mouse actions, and touchscreen users have no equivalent hover function for progressive disclosure techniques. Do: Always show available actions for rows. This helps users discover available actions and gives users a visible click, tap, or keypress target for performing them. Don't: Show actions only on row hover. Users navigating via keyboard, touchscreen, or voice dictation may not find these. Keyboard and screen reader users often progress linearly through a page. For example, in English, a user would move top to bottom, left to right, using the tab or arrow keys. Avoid making changes above the userâs current place in the UI. Use screen reader announcements and focus management to guide the user. For best practices, see theGlobal Focus Patternsdocumentation. For Example Imagine that youâre designing a new Chatter publisher UI. When the user navigates into the publisher input, the publisher expands into a modal with additional editing functionality. Where do you put the theming options? Do: Add new functionality after the user's current place. If you add a list of theming options below the input field, keyboard and screen reader users will naturally navigate to it after filling in their status. Don't: Add new functionality above the user's current place. If you add a list of theming options above the input field, users navigating with a keyboard will have to go back to access it. Screenreader users might not even know that these options are available. For desktop UIs, deliver akeyboard pathwith your design specs. During product development, test the most common workflows using only a keyboard. For every element a mouse user can click on and perform an action with, a keyboard-only user must be able to perform the same action with just key presses. Consult ourKeyboard Guidefor best practices. Makecustom gestures and keyboard shortcutseasily discoverable. Include accessible help text to describe their behavior for screen reader users. Every custom gesture should also have a one-finger equivalent, so users with limited motor capabilities can use it. Differentiate elements with a second indicator, such as informational text, icons, textures, or thicker borders. For example, instead of using green text to indicate success and red to indicate failure, use a green checkmark and a red X. Not everyone has 20/20 vision or $1,000 Retina monitors. Plug your colors intowww.AreMyColorsAccessible.comto ensure that most users can see them, with a ratio of 4.5:1 or higher for regular-sized text, 3:1 for icons and large text (24px and above or 18px bolded text). Disabled elements, such as a gray noninteractive buttons, do not need to pass contrast requirements. Use SLDS tokens semantically. For example, donât use colorTextWarning to make an item red; use it only for warning-state text. Avoid placing text on top of backgrounds that arenât a solid color (such as clouds, images, and gradients). If you do, follow theText on Background Guidelinesto make sure the text is legible. Always make it visually apparent to users which element theyâre interacting with. Some interactive elements, such as tabs and vertical navigation, also require a distinction between selected+unfocused and selected+focused states. For focused states, use SLDS patterns (blue box-shadow, text underline, etc.) whenever possible. When designing custom focus states, do more than change the font or outline color. If youâre unsure, use the default browser focus. In your design specs, provide good descriptions for informational images, and indicate when images are purely decorative (if you need the image to understand the UI, itâs informational). Unsure? Consult your friendly neighborhood doc writer or accessibility specialist, or check outWebAIM: Alternative Text."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/overview",
      "title": "Accessibility Overview - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Lightning Design System provides accessible markup which will serve as a foundation for your application development. In order to make sure you build accessible components, however, you will need to follow the accessibility guidance for our interactive components. This includes keyboard behavior as well as the management of ARIA roles and properties. Web accessibility ensures that people with disabilities can perceive, understand, navigate, interact with, and contribute to the applications you create. This means that pages arePerceivable, Operable, Understandable and Robust. This includes providing keyboard interaction alternatives for all mouse-based actions, properly identifying all form fields and buttons, providing text based alternatives for all images, videos, icons and SVGs, as well as building components that properly convey their identity, operation model, and state to assistive technologies. The Design System enables accessible development by providing a set of semantically correct components, each with appropriateARIAmarkup so they can be identified correctly to users of assistive technologies. The semantic markup and use of ARIA roles in our components are based on W3C standards and industry best practices. This markup is the perfect starting point for building accessible components. While we do not provide the JavaScript that is necessary to make our components interactive, in theAccessibility Patterns, we provide working examples of basic patterns with documentation on what interactions are required. There is also advice in the individual componentâs documentation on how to create keyboard-accessible components. Our components follow the two main rules of accessibility as it relates to color:"
        },
        {
          "type": "list",
          "items": [
            "We never use color as the only means of providing information or requesting an action.",
            "The combinations of text and their background colors do not fall below theWCAG recommended thresholdratio of 4.5:1 for standard or small text and 3:1 for larger text."
          ]
        },
        {
          "type": "p",
          "text": "To learn more about appropriate use of color, visit theColor Guidelines Overview. Our forms offer proper use of<fieldset>and<legend>tags as well as appropriate labeling for input controls. Our radio button and checkbox controls provide a balanced solution that offers accessibility as well as design flexibility. We provide a means of offering text-based alternatives for all images, icons and SVGs. Our interactive components are created in accordance with the latestARIA Authoring Practices, with attributes that are understandable by screen reader users on key page elements. It is important to note that as a component is interacted with, the ARIA attributes may need updating to reflect the new state. Hence, we provided detailed guidance on how and when to do this. The Design System is only the foundation for accessible application development. We recommend that you review the accessibility of your applications before release and ensure that it meets theWCAG Standard at the AA Level."
        },
        {
          "type": "list",
          "items": [
            "Salesforce's accessibility blog posts",
            "W3C Web Accessibility Initiative",
            "WAI-ARIA Authoring Practices",
            "WebAIM",
            "The A11Y Project",
            "Are My Colors Accessible?",
            "Salesforce Trailblazer Community: Disability Topics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/accordion",
      "title": "Accordion Pattern - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "There are two main parts of an accordion section:"
        },
        {
          "type": "list",
          "items": [
            "The header: which is used to control the display of the sections body",
            "The body: a container that holds any content associated to the section, which is either visible or hidden"
          ]
        },
        {
          "type": "list",
          "items": [
            "+Example Header 1Content for Example header 1",
            "+Example Header 2Content for Example header 2",
            "+Example Header 3Content for Example header 3"
          ]
        },
        {
          "type": "list",
          "items": [
            "Each section header is focusable",
            "EnterandSpace: when focused on a section header, should toggle the visibility of its body",
            "Recommended:UpandDownarrows: when focused on a section header should navigate to the next/previous header.Thisshould notchange the state of the section (if the section is hidden, it stays hidden).",
            "UpandDownarrows: when focused on a section header should navigate to the next/previous header.",
            "Thisshould notchange the state of the section (if the section is hidden, it stays hidden)."
          ]
        },
        {
          "type": "p",
          "text": "The header should contain a<button />element that:"
        },
        {
          "type": "list",
          "items": [
            "Has the header text within it",
            "Hasaria-controlswith the value set to the id of the body container that it controls and is associated with",
            "When the content is hiddenaria-expandedshould be set to\"false\"",
            "When the content is visiblearia-expandedshould be set to\"true\"",
            "If the section cannot be closed setaria-disabled=\"true\"along witharia-expanded=\"true\""
          ]
        },
        {
          "type": "list",
          "items": ["Accordion", "App Launcher", "Expandable Section"]
        },
        {
          "type": "p",
          "text": "ARIA Documentation:http://w3c.github.io/aria-practices/#accordion"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/listbox",
      "title": "Listbox Pattern - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Listboxes have options that can be selected, reordered and made to perform an action",
            "Options themselvescannot containany interactive elements. For example, there cannot be a button, link or input within an option",
            "Option names are flattened strings andshould notcontain any formatting, semantics or hierarchy that is a requirement for understanding the options meaning",
            "Optionscannotbe required",
            "Listboxes can be disabled, where each option is not selectable",
            "Individual options can also be disabled",
            "Listbox options can be grouped, with a label for each group"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "list",
          "items": [
            "A listbox should act as a single tab stop, in that a user should be able to press the tab key once to leave the control",
            "Only one option should be focusable in the list. That option should be the most recently selected option. By default that is the first option in the list",
            "UpandDownarrows: movefocus and selectionto the previous/next option",
            "Arrow navigation should wrap within the list when at the first or last option, unless you are using lazy loading or infinite scrolling techniques",
            "Recommended if more than 5 options:HomeandEndshould move focus to the first/last optionType-ahead:Type a character: focus moves to the next option that starts with the characterType multiple characters in rapid succession: focus moves to the next option that starts with the string of characters",
            "HomeandEndshould move focus to the first/last option",
            "Type-ahead:Type a character: focus moves to the next option that starts with the characterType multiple characters in rapid succession: focus moves to the next option that starts with the string of characters",
            "Type a character: focus moves to the next option that starts with the character",
            "Type multiple characters in rapid succession: focus moves to the next option that starts with the string of characters"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "A horizontally orientated Listbox should follow all the same keyboard interaction as Single Select, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "Rightarrow: behaves the same as theDownarrow, both keys should navigate down the list",
            "Leftarrow: behaves the same as theUparrow, both keys should navigate up the list"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "A Multi Select Listbox should follow all the same keyboard interaction as Single Select, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "Shift + UpandShift + Down: moves focus and selects additional, consecutive options",
            "Control + UpandControl + Down: moves focus only",
            "Control + A: selects/deselects all the options in the list",
            "RecommendedControl + Shift + Home/End: Selects the focused option and all options to the first/last option",
            "Control + Shift + Home/End: Selects the focused option and all options to the first/last option"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "A Re-orderable Listbox should follow all the same keyboard interaction as Single Select, and optionally the Multi Select Listboxes, with the addition of"
        },
        {
          "type": "list",
          "items": [
            "Space: togglesDrag and Drop Mode:If not inDrag and Drop Mode: space grabs the selected option(s)If inDrag and Drop Mode: space drops the option(s) at their current position",
            "If not inDrag and Drop Mode: space grabs the selected option(s)",
            "If inDrag and Drop Mode: space drops the option(s) at their current position",
            "UpandDown: if inDrag and Drop Mode, move the selected options within the list"
          ]
        },
        {
          "type": "p",
          "text": "For demo purposes we use an Unordered List<ul />as the root container element."
        },
        {
          "type": "list",
          "items": [
            "The root node needsrole=\"listbox\"",
            "The listbox should be labelled. This can be witharia-label=\"Label name\"oraria-labelledby, which points to a visible label"
          ]
        },
        {
          "type": "p",
          "text": "For demo purposes we use List Items<li />as a Listbox option."
        },
        {
          "type": "list",
          "items": [
            "Element needsrole=\"option\"",
            "Options must be direct descendants of theListbox.When using a markup pattern likeul[role=\"listbox\"] > li > a[role=\"option\"], where the anchor element is the clickableoption, you should addrole=\"presentation\"to theli. This will cause assistive technology to only see aul[role=\"listbox\"] > a[role=\"option\"]direct descendant relationship",
            "When using a markup pattern likeul[role=\"listbox\"] > li > a[role=\"option\"], where the anchor element is the clickableoption, you should addrole=\"presentation\"to theli. This will cause assistive technology to only see aul[role=\"listbox\"] > a[role=\"option\"]direct descendant relationship",
            "aria-selected=\"true\"is set on theoptionthat is currently selected and in focusSingle select Listboxes only requirearia-selectedto be set on a singleoption. Itshould notbe set on otheroptions",
            "Single select Listboxes only requirearia-selectedto be set on a singleoption. Itshould notbe set on otheroptions",
            "tabindex=0should be set on the only focusableoptionin the listbox and should move with user selection."
          ]
        },
        {
          "type": "p",
          "text": "Requires all the same markup as related vertically oriented listbox, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "Thelistboxelement should havearia-orientation=\"horizontal\"applied"
          ]
        },
        {
          "type": "p",
          "text": "Requires all the same markup as the single select, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "Thelistboxelement also needsaria-multiselectable=\"true\"",
            "Eachoptionshould now havearia-selectedapplied, which defaults tofalse. Only selectedoptions should be set totrue"
          ]
        },
        {
          "type": "p",
          "text": "Requires all the same markup as the single select listbox and optionally all of the multi select listbox markup, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "Should havearia-describedbyon thelistboxset to the id of an element that contains instructions on how the drag and drop works (which can be visually hidden)",
            "Should have an element separate from the unordered list:with the attributearia-live=\"assertive\"that contains the status of the elements being dragged. For example: \"Element 1 grabbed. Current position 1 of 4\", \"Element 1 moved, new positon 2 of 4\", and \"Element 1 dropped, final position 2 of 4\".",
            "with the attributearia-live=\"assertive\"",
            "that contains the status of the elements being dragged. For example: \"Element 1 grabbed. Current position 1 of 4\", \"Element 1 moved, new positon 2 of 4\", and \"Element 1 dropped, final position 2 of 4\"."
          ]
        },
        {
          "type": "p",
          "text": "If the complete list of options is not currently visible, but the size of the option set is known (for example, if using lazy loading) each list element needs:"
        },
        {
          "type": "list",
          "items": [
            "aria-setsizeset to the length of the list",
            "aria-posinsetset to the element's position in the list"
          ]
        },
        {
          "type": "list",
          "items": [
            "Combobox(Single and Multi Select)",
            "Dueling Picklist(Single and Multi Select, Re-orderable)",
            "Listbox of Pills(Multi Select)",
            "Lookups(Single Select)",
            "Path(Horizontal Single Select)",
            "Picklist(Single and Multi Select)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Windows:List Boxes(Single and Multi Select)",
            "Windows:List Views(Re-orderable)"
          ]
        },
        {
          "type": "p",
          "text": "ARIA Documentation:http://w3c.github.io/aria-practices/#Listbox"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/menu",
      "title": "Menu Pattern - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Menus display a list of available actions",
            "Menuscannotcontain headings",
            "Menu items can be grouped by the use of separators",
            "Menu items can only perform a single action"
          ]
        },
        {
          "type": "list",
          "items": [
            "Item 1",
            "Item 2",
            "Item 3",
            "Item 4Sub Item 1Sub Item 2Sub Item 3Sub Item 4",
            "Sub Item 1",
            "Sub Item 2",
            "Sub Item 3",
            "Sub Item 4"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enter:when focused on the menu button: opens the menu and focuses on the first itemwhen focused on a menu item: activates that item and closes the menu",
            "when focused on the menu button: opens the menu and focuses on the first item",
            "when focused on a menu item: activates that item and closes the menu",
            "Space: when focused on the menu button: opens the menu and focuses on the first item",
            "Uparrow: when focused on a menu item: moves to the previous item (should wrap first to last)",
            "Downarrow:when focused on the menu button: opens the menu and focuses on the first itemwhen focused on a menu item: moves to the next item (should wrap last to first)",
            "when focused on the menu button: opens the menu and focuses on the first item",
            "when focused on a menu item: moves to the next item (should wrap last to first)",
            "Rightarrow: when focused on an item with a submenu: opens the submenu and focuses on the first item",
            "Leftarrow: when focused on an item within a submenu: closes the submenu and focuses on the parent item that contains the submenu",
            "Escape: closes the menu or submenu and focuses on the parent button or item",
            "TabandShift + Tab: navigate away from the menu and closes it",
            "Recommended:type a character: focus moves to the next item that starts with the character",
            "type a character: focus moves to the next item that starts with the character"
          ]
        },
        {
          "type": "list",
          "items": ["Item 1", "Item 2", "Item 3", "Item 4"]
        },
        {
          "type": "p",
          "text": "A Menubar should have all the same keyboard interaction as a menu button, with the addition of:"
        },
        {
          "type": "list",
          "items": [
            "RightandLeft: when on an item in the menu bar: navigate to the next/previous item",
            "For submenus in items in the menu bar: the interaction is the same as menu buttons"
          ]
        },
        {
          "type": "list",
          "items": [
            "Hasaria-haspopup=\"true\"",
            "Optional:aria-expanded=\"true|false\"depending on if the menu is expanded or not"
          ]
        },
        {
          "type": "list",
          "items": ["Container element should haverole=\"menu\"applied"]
        },
        {
          "type": "list",
          "items": [
            "If the item is actionable,role=\"menuitem\"should be applied",
            "If the item is a separator,role=\"separator\"should be applied",
            "Should havetabindex=-1to make it focusable on click",
            "If the item is disabled: needsaria-disabled=\"true\"",
            "If the item has a submenu: needsaria-haspopup=\"true\""
          ]
        },
        {
          "type": "p",
          "text": "Requires all the same markup as a menu, except:"
        },
        {
          "type": "list",
          "items": [
            "The container element should haverole=\"menubar\", instead ofmenu",
            "tabindex=0should be set on the only focusableitemin the menu bar and should move with user selection. Default is the firstitem."
          ]
        },
        {
          "type": "list",
          "items": ["Menus", "Global Navigation", "Feeds"]
        },
        {
          "type": "list",
          "items": [
            "Windows:Menus(Menu Buttons)",
            "Windows:App Bars(Menu Bars)"
          ]
        },
        {
          "type": "p",
          "text": "ARIA Documentation:http://w3c.github.io/aria-practices/#menu"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/overview",
      "title": "Accessibility Patterns Overview - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Accessibility can seem complicated, but you can make accessible web apps with semantic markup and 18 principle patterns. These patterns form the basis of the Lightning Design System Components and are a companion to the accessibility documentation available on each component page."
        },
        {
          "type": "list",
          "items": [
            "Accordion",
            "Alert Dialog",
            "Alert/Status",
            "Combobox",
            "Expandable Section",
            "Feed",
            "Grid",
            "Listbox",
            "Live Region",
            "Menu",
            "Modal Dialog",
            "Non-Modal Dialog",
            "Tabs",
            "Toggle Button",
            "Toolbar",
            "Tooltip",
            "Tree View",
            "Treegrid"
          ]
        },
        {
          "type": "p",
          "text": "Accessibility patterns are the principle patterns a lot of the Lightning Components are built on. These patterns originate from traditional software applications and have been adapted to web applications in theW3Câs ARIA specifications. The ARIA specifications follow patterns from traditional software applications because most assistive technology and power users are familiar with their interactions, layout, and naming conventions. So, to make your web based software feel familiar to your users, you should follow these conventions. What makes these patterns accessible are additional HTML attributes and consistent keyboard interactions on top of semantic HTML markup. The attributes ARIA requires convey the patternâs identity, operation, relationship to other elements, and state to assistive technologies. This way, users know what is going on, what to do next, and how to do it. Our documentation includes:"
        },
        {
          "type": "list",
          "items": [
            "The required markup and behavior for each pattern",
            "Working examples of the patterns for reference when implementing Lightning Components",
            "References to where the patterns are used in the Design System and traditional software applications"
          ]
        },
        {
          "type": "p",
          "text": "Note:the Lightning Componentsextendthe Accessibility Patterns. All the attributes and keyboard interactions of the Accessibility Pattern should be present in the Lightning Component. Due to the complexity of Lightning Components, however, there may be additional steps necessary to make the component completely accessible, which are documented on the componentâs page."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/togglebutton",
      "title": "Toggle Button Pattern - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "A Toggle Button has 2 states:pressedandunpressed",
            "A Toggle Button's textshould notchange based on state"
          ]
        },
        {
          "type": "list",
          "items": [
            "EnterorSpacepress the button",
            "Focus should stay on the button when it is pressed"
          ]
        },
        {
          "type": "list",
          "items": [
            "Needsaria-pressed=\"true\"when it is toggled on andfalseotherwise",
            "The visual labelshould notchange based on its pressed state"
          ]
        },
        {
          "type": "p",
          "text": "Note:due to inconsistent browser and assistive technology support for this role at the time of writing (Aug 2017),role=\"button\"needs to be added to the button element"
        },
        {
          "type": "list",
          "items": ["Stateful Buttons", "Stateful Icon Buttons"]
        },
        {
          "type": "list",
          "items": ["lightning-button", "lightning-button-icon"]
        },
        {
          "type": "list",
          "items": ["Windows:Toggle Switches"]
        },
        {
          "type": "p",
          "text": "ARIA Documentation:http://w3c.github.io/aria-practices/#button"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/accessibility/patterns/tooltip",
      "title": "Tooltip Pattern - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "A Tooltipmusthave a focusable, interactive trigger",
            "A Tooltip should show on mouse hoverandkeyboard focus",
            "A Tooltipmust notcontain focusable or interactive content"
          ]
        },
        {
          "type": "list",
          "items": [
            "Tabbing to the element displays the tooltip",
            "Escapehides the tooltip",
            "Focus always stays on the trigger element"
          ]
        },
        {
          "type": "list",
          "items": [
            "VoiceOver:Control + Alt + Shift + H: reads the tooltip when focused on the element"
          ]
        },
        {
          "type": "list",
          "items": ["Needsrole=\"tooltip\""]
        },
        {
          "type": "list",
          "items": ["Needsaria-describedbyset to theidof the tooltip"]
        },
        {
          "type": "list",
          "items": ["Tooltips"]
        },
        {
          "type": "list",
          "items": ["Windows:Tooltips"]
        },
        {
          "type": "p",
          "text": "ARIA Documentation:http://w3c.github.io/aria-practices/#tooltip"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/accordion",
      "title": "Accordion - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/activity-timeline",
      "title": "Activity Timeline - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/alert",
      "title": "Alert - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/app-launcher",
      "title": "App Launcher - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/avatar",
      "title": "Avatar - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/avatar-group",
      "title": "Avatar Group - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/badges",
      "title": "Badges - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/brand-band",
      "title": "Brand Band - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/breadcrumbs",
      "title": "Breadcrumbs - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/builder-header",
      "title": "Builder Header - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/button-groups",
      "title": "Button Groups - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/button-icons",
      "title": "Button Icons - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/buttons",
      "title": "Buttons - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/cards",
      "title": "Cards - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/carousel",
      "title": "Carousel - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/chat",
      "title": "Chat - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/checkbox",
      "title": "Checkbox - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/checkbox-button",
      "title": "Checkbox Button - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/checkbox-button-group",
      "title": "Checkbox Button Group - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/checkbox-toggle",
      "title": "Checkbox Toggle - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/color-picker",
      "title": "Color Picker - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/combobox",
      "title": "Combobox - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/counter",
      "title": "Counter - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/data-tables",
      "title": "Data Tables - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/datepickers",
      "title": "Datepickers - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/datetime-picker",
      "title": "Datetime Picker - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/docked-composer",
      "title": "Docked Composer - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/docked-form-footer",
      "title": "Docked Form Footer - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/docked-utility-bar",
      "title": "Docked Utility Bar - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/drop-zone",
      "title": "Drop Zone - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/dueling-picklist",
      "title": "Dueling Picklist - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/dynamic-icons",
      "title": "Dynamic Icons - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/dynamic-menu",
      "title": "Dynamic Menu - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/expandable-section",
      "title": "Expandable Section - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/expression",
      "title": "Expression - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/feeds",
      "title": "Feeds - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/file-selector",
      "title": "File Selector - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/files",
      "title": "Files - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/form-element",
      "title": "Form Element - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/global-header",
      "title": "Global Header - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/global-navigation",
      "title": "Global Navigation - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/icons",
      "title": "Icons - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/illustration",
      "title": "Illustration - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/input",
      "title": "Input - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/list-builder",
      "title": "List Builder - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/lookups",
      "title": "Lookups - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/map",
      "title": "Map - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/menus",
      "title": "Menus - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/modals",
      "title": "Modals - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/notifications",
      "title": "Notifications - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/overview",
      "title": "Blueprint Overview - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/page-headers",
      "title": "Page Headers - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/panels",
      "title": "Panels - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/path",
      "title": "Path - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/picklist",
      "title": "Picklist - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/pills",
      "title": "Pills - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/popovers",
      "title": "Popovers - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/progress-bar",
      "title": "Progress Bar - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/progress-indicator",
      "title": "Progress Indicator - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/progress-ring",
      "title": "Progress Ring - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/prompt",
      "title": "Prompt - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/publishers",
      "title": "Publishers - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/radio-button-group",
      "title": "Radio Button Group - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/radio-group",
      "title": "Radio Group - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/rich-text-editor",
      "title": "Rich Text Editor - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/scoped-notifications",
      "title": "Scoped Notifications - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/scoped-tabs",
      "title": "Scoped Tabs - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/select",
      "title": "Select - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/setup-assistant",
      "title": "Setup Assistant - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/slider",
      "title": "Slider - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/spinners",
      "title": "Spinners - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/split-view",
      "title": "Split View - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/summary-detail",
      "title": "Summary Detail - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/tabs",
      "title": "Tabs - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/textarea",
      "title": "Textarea - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/tiles",
      "title": "Tiles - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/timepicker",
      "title": "Timepicker - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/toast",
      "title": "Toast - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/tooltips",
      "title": "Tooltips - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/tree-grid",
      "title": "Tree Grid - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/trees",
      "title": "Trees - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/trial-bar",
      "title": "Trial Bar - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/vertical-navigation",
      "title": "Vertical Navigation - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/vertical-tabs",
      "title": "Vertical Tabs - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/visual-picker",
      "title": "Visual Picker - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/components/welcome-mat",
      "title": "Welcome Mat - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/design-tokens",
      "title": "Design Tokens - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Colors",
            "Background Color",
            "Text Color",
            "Border Color",
            "Font",
            "Font Size",
            "Opacity",
            "Line Height",
            "Spacing",
            "Radius",
            "Sizing",
            "Shadow",
            "Time",
            "Touch",
            "Media Query",
            "Z-index"
          ]
        },
        {
          "type": "p",
          "text": "Design tokens are the visual design atoms of the design system â specifically, they are named entities that store visual design attributes. We use them in place of hard-coded values (such as hex values for color or pixel values for spacing) in order to maintain a scalable and consistent visual system forUIdevelopment. Using Lightning Components? Read the Developer Guide onStyling with Design Tokens. Token Support Legend: Generic colors to use within a Salesforce application. Tokens that have the prefix of \"BRAND\" are brandable tokens and are subject to change when a customer applies theming to their org. Please refer to the description of each token for their intended usage. Dark variant of BRAND that is accessible with white Active / Hover state of BRAND_A11Y Dark variant of BRAND_BACKGROUND_PRIMARY, used within gradient of background color These RGBA values need to be updated if BRAND_BACKGROUND_DARK changes, solves webkit bug Primary page background color These RGBA values need to be updated if BRAND_BACKGROUND_PRIMARY changes, solves webkit bug Variant of BRAND that is accessible with BRAND Active / Hover state of BRAND_CONTRAST Dark variant of BRAND that is accessible with light colors Active / Hover state of BRAND_DARK Disabled state of BRAND_A11Y Background color a branded app header Variant of BRAND_HEADER that is accessible with BRAND_HEADER Active / Hover state of BRAND_HEADER_CONTRAST Variant of BRAND_HEADER_CONTRAST that provides a cool color Active / Hover state of BRAND_HEADER_CONTRAST_COOL Variant of BRAND_HEADER that is accessible with BRAND_HEADER Active / Hover state of BRAND_HEADER_CONTRAST Variant of BRAND_HEADER_CONTRAST that provides a warm color Active / Hover state of BRAND_HEADER_CONTRAST_WARM Weak contrast ratio, useful for iconography Active / Hover state of BRAND_HEADER_CONTRAST_WEAK Disabled state of BRAND_HEADER_CONTRAST_WEAK Icons of BRAND_HEADER that is accessible with BRAND_HEADER Active / Hover state of BRAND_HEADER_ICON Disabled state of BRAND_HEADER_ICON Light variant of BRAND that is accessible with dark colors Active / Hover state of BRAND_LIGHT Primary brand color Active / Hover state of BRAND_PRIMARY Transparent value of BRAND_PRIMARY Transparent value of BRAND_PRIMARY at 10% Transparent value of BRAND_PRIMARY at 40% Primary text link brand color Active / Hover state of BRAND_TEXT_LINK Gray Color 1 Gray Color 2 Gray Color 3 Gray Color 4 Gray Color 5 Gray Color 6 Gray Color 7 Gray Color 8 Gray Color 9 Gray Color 10 Gray Color 11 Gray Color 12 Gray Color 13 Blue 10 Blue 15 Blue 20 Blue 30 Blue 40 Blue 50 Blue 60 Blue 65 Blue 70 Blue 80 Blue 90 Blue 95 Cloud Blue 10 Cloud Blue 15 Cloud Blue 20 Cloud Blue 30 Cloud Blue 40 Cloud Blue 50 Cloud Blue 60 Cloud Blue 65 Cloud Blue 70 Cloud Blue 80 Cloud Blue 90 Cloud Blue 95 Green 10 Green 15 Green 20 Green 30 Green 40 Green 50 Green 60 Green 65 Green 70 Green 80 Green 90 Green 95 Hot Orange 10 Hot Orange 15 Hot Orange 20 Hot Orange 30 Hot Orange 40 Hot Orange 50 Hot Orange 60 Hot Orange 65 Hot Orange 70 Hot Orange 80 Hot Orange 90 Hot Orange 95 Indigo 10 Indigo 15 Indigo 20 Indigo 30 Indigo 40 Indigo 50 Indigo 60 Indigo 65 Indigo 70 Indigo 80 Indigo 90 Indigo 95 Neutral 10 Neutral 20 Neutral 30 Neutral 40 Neutral 50 Neutral 60 Neutral 70 Neutral 80 Neutral 90 Neutral 95 Neutral 100 Orange 10 Orange 15 Orange 20 Orange 30 Orange 40 Orange 50 Orange 60 Orange 65 Orange 70 Orange 80 Orange 90 Orange 95 Pink 10 Pink 15 Pink 20 Pink 30 Pink 40 Pink 50 Pink 60 Pink 65 Pink 70 Pink 80 Pink 90 Pink 95 Purple 10 Purple 15 Purple 20 Purple 30 Purple 40 Purple 50 Purple 60 Purple 65 Purple 70 Purple 80 Purple 90 Purple 95 Red 10 Red 15 Red 20 Red 30 Red 40 Red 50 Red 60 Red 65 Red 70 Red 80 Red 90 Red 95 Teal 10 Teal 15 Teal 20 Teal 30 Teal 40 Teal 50 Teal 60 Teal 65 Teal 70 Teal 80 Teal 90 Teal 95 Violet 10 Violet 15 Violet 20 Violet 30 Violet 40 Violet 50 Violet 60 Violet 65 Violet 70 Violet 80 Violet 90 Violet 95 Yellow 10 Yellow 15 Yellow 20 Yellow 30 Yellow 40 Yellow 50 Yellow 60 Yellow 65 Yellow 70 Yellow 80 Yellow 90 Yellow 95 Use these tokens for background colors only. Do not use these for border colors or text colors. Default background color for the whole app. Second default background color for the app. Alternative background color for dark portions of the app. The color of the mask overlay that appears when you enter a modal state. The color of the mask overlay that provides user feedback on interaction. Background color for UI elements related to the concept of an external user or customer. Dark variant of COLOR_BACKGROUND. Color for UI elements related to destructive actions. Active color for UI elements related to destructive actions. Hover color for UI elements related to destructive actions. Color for UI elements related to errors. Dark color for UI elements related to errors. Accessible with white text. Background color for highlighting UI elements. Background color for highlighting text in search results. Color of mask overlay that sits on top of an image when text is present. Background color for UI elements related to providing neutral information (not error, success, or warning). Disabled checkboxes Disabled input Default background color for dark portions of the app (like Stage Left or tooltips). Light variant of COLOR_BACKGROUND_INVERSE. Light variant of COLOR_BACKGROUND. Background color for a new notification list item. Color for UI elements related to the offline state. Background color of comment posts in the feed. Used as the background color for the active state on rows or items on list-like components. Used as the background color for the hover state on rows or items on list-like components. Used as the background color for the new state on rows or items on list-like components. Used as the background color for selected rows or items on list-like components. The background color of an internal scrollbar. The background color of an internal scrollbar track. Background color for text selected with a mouse. Color of the spinner dot. Used as background for loading stencils on white background. Used as an alternate background for loading stencils on gray backgrounds. Color for UI elements that have to do with success. Dark color for UI elements that have to do with success. Accessible with white text. Darker color for UI elements that have to do with success. Accessible with white text. Background color for toast messaging. Toggle background color. Disabled toggle background color. Hovered toggle background color. Color for UI elements that have to do with warning. Dark Color for UI elements that have to do with warning. Our product brand blue. Our product brand blue, darkened to meet accessibility color contrast ratios with white text. Our product brand blue, darkened even further. Default Page Header background color Use these tokens for text colors only. Do not use these for border colors or background colors. Action label text color Action label active text color Our product brand blue. Text color found on any primary brand color Text color for default secondary button - disabled state Text color for a button that has a parent element that has a hover state. This is the default text/icon color for that button before its parent has been hovered over. Text color for a button that has a parent element that has a hover state. This is the default text/icon color for that button before its parent has been hovered over. Customer text used in anchor subtitle Body text color Text color for destructive actions Text color for destructive actions - hover state Error text for inputs and error misc Default icon color. Default icon color - disabled state Icon color for a button that has a parent element that has a hover state. This is the default text/icon color for that button before its parent has been hovered over. Icon color on dark background Icon color on dark background - active state Icon color on dark background - hover state Input disabled text Input icon Inverse text color for dark backgrounds Weak inverse text color for dark backgrounds Text color for field labels. Link text (508) Active link text Disabled link text Focus link text Hover link text Link color on dark background Link color on dark background - active state Link color on dark background - disabled state Link color on dark background - hover state Input placeholder text. Input placeholder text on dark backgrounds. Color of required field marker. Text color for success text. Text color for success text on dark backgrounds. Color for default text in a tab group. Color for disabled text in a tab group. Color for disabled toggles Color for texts or icons that are related to warnings on a dark background. Color for texts that are related to warnings on a light background. Color for text that is purposefully de-emphasized to create visual hierarchy. Use these tokens for border colors only. Do not use these for background colors or text colors. Default border color for UI elements. Our product brand blue. Our product brand blue, darkened to meet accessibility color contrast ratios with white text. Border color for default secondary button Border color for UI elements related to the concept of an external user or customer. Border color for UI elements that have to do with destructive actions. Active border color for UI elements that have to do with destructive actions. Hover border color for UI elements that have to do with destructive actions. Border color for UI elements that have to do with errors. Alternative border color for UI elements related to errors. Dark alternative border color for UI elements related to errors. Border color for UI elements related to providing neutral information (not error, success, or warning). Border color on form elements. Border color on disabled form elements. Border color to match UI elements using color-background-inverse. Border color for UI elements related to the offline state. Border color on notification reminders. Used as the border color for selected rows or items on list-like components. Used as the border color for the hover state on selected rows or items on list-like components. Used to delineate the boundary of a selected component. Specific to builders. Used to delineate the boundary of a component that is being clicked. Specific to builders. Used to delineate the boundary of a component that is being hovered over. Specific to builders. Lightest separator color - used as default separator on white backgrounds. Medium separator color - used as default separator on light gray backgrounds. Darkest separator color - used as an alternate separator color when more differentiation is desired. Used as a separator on dark backgrounds, such as stage left navigation. Border color for UI elements that have to do with success. Dark alternative border color for UI elements that have to do with success. Border color for UI elements that have to do with warnings. Use these font weights to change how thin or heavy the weight is for our font. Use for active tab. Default font-family for Salesforce applications Used sparingly for emphasized text within regular body copy. Most all body copy. Use for active tab. Use these sizing tokens for font sizes. Constant typography token for font size 1 Constant typography token for font size 2 Constant typography token for font size 3 Constant typography token for font size 4 Constant typography token for font size 5 Constant typography token for font size 6 Constant typography token for font size 7 Constant typography token for font size 8 Constant typography token for font size 9 Constant typography token for font size 10 Constant typography token for font size 11 Variable typography token for font size 1 Variable typography token for font size 2 Variable typography token for font size 3 Variable typography token for font size 4 Variable typography token for font size 5 Variable typography token for font size 6 Variable typography token for font size 7 Variable typography token for font size 8 Variable typography token for font size 9 Variable typography token for font size 10 Variable typography token for font size 11 Use these opacity tokens for element transparency. 50% transparency of an element 80% transparency of an element Use these tokens for changing the line-height of elements. Usually, the line-height-text is already inherited by default. Only set it if you need to apply it again. Unitless line-heights for reusability Remove extra leading. Unitless line-heights for reusability Unitless line-heights for reusability Variable unitless line-heights for reusability Spacing tokens are used for padding, margins, and position coordinates. Border-width tokens are used for the border property. Constant spacing token for size Large Constant spacing token for size Medium Constant spacing token for 0 Constant spacing token for size Small Constant spacing token for size X Large Constant spacing token for size X small Constant spacing token for size XX Large Constant spacing token for size XX small Constant spacing token for size XXX small Variable horizontal spacing token for size Large Variable horizontal spacing token for size Medium Variable horizontal spacing token for size Small Variable horizontal spacing token for size X Large Variable horizontal spacing token for size X Small Variable horizontal spacing token for size XX Large Variable horizontal spacing token for size XX Small Variable horizontal spacing token for size XXX Small Variable spacing token for size Large Variable spacing token for size Medium Variable spacing token for size Small Variable vertical spacing token for size Large Variable vertical spacing token for size Medium Variable vertical spacing token for size Small Variable vertical spacing token for size X Large Variable vertical spacing token for size X Small Variable vertical spacing token for size XX Large Variable vertical spacing token for size XX Small Variable vertical spacing token for size XXX Small Variable spacing token for size X Large Variable spacing token for size X Small Variable spacing token for size XX Large Variable spacing token for size XX Small Variable spacing token for size XXX Small Use radius tokens to change the border-radius size (rounded corners). Circle for global use, action icon bgd shape Icons in lists, record home icon, unbound input elements Use sizing tokens to set elements to our sizing scale. Size tokens can be used for the width and height properties. Square tokens are used for both width and height. Header for desktop. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Generic sizing token scale for UI components. Anchor: Outer colored tile Anchor: avatar Anchor: Icon content (white shape) Medium tap target size Stage left & actions: Outer colored tile Icon button boundary. Stage left & actions: Icon content (white shape) Alternate medium tap target size Search Results: Outer colored tile Search Results: Icon content (white shape) Large utility icon without border. Medium utility icon without border. Small utility icon without border. Very small icon button boundary. Very small icons in icon buttons. Very very small icon button boundary. Variable medium boundary for square icons Use shadow tokens to set a box shadow. Hard dropshadow found on outer cards Hard dropshadow on page header Shadow for active states on interactive elements. Shadow for drag-n-drop. Shadow for drop down. Use timing tokens for animation durations. 0.05 seconds, 3 frames 0 seconds, 0 frames 3.2 seconds, 192 frames 0.2 seconds, 12 frames 0.1 seconds, 6 frames 0.4 seconds, 24 frames Tokens that are specific to touch enabled devices Tap target size for elements that rely on height or line-height Small tap target size for elements that rely on height or line-height Tap target size for elements that rely on width and height dimensions Small tap target size for elements that rely on width and height dimensions X-small tap target size for elements that rely on width and height dimensions Xx-small tap target size for elements that rely on width and height dimensions Use media query tokens to set media query width ranges. Large form factor:  devices larger than tablet Medium form factor:  devices larger than phone Medium form factor, landscape:  devices larger than phone, in landscape orientation Small form factor: devices smaller than tablet Use z-index tokens to set the z order layering of elements. Deep dive Default Dialog Docked element Dropdown Modal Overlay Popup Notifications under modals Spinner Stickied element Toasts"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/dev-guidelines/best-practices",
      "title": "SLDS Development Best Practices - Lightning Design System",
      "content": [
        {
          "type": "code",
          "code": "background-colorborder-colorcolorborder-radiusbox-shadowfillfont-sizefont-weight"
        },
        {
          "type": "code",
          "code": "/* LWC CSS */.my-custom-container {Â  background-color:Â var(--lwc-cardColorBackground);}/* Aura CSS */.THIS .my-custom-container {Â Â background-color: t(cardColorBackground);}/*Â  -----Â Refactor to -----Â  *//* Updated LWC CSS */.my-custom-container {Â Â background-color: var(--slds-g-color-surface-container-1,Âvar(--lwc-cardColorBackground));}/* Updated Aura CSS */.THISÂ .my-custom-container {Â Â background-color: var(--slds-g-color-surface-container-1,Â t(cardColorBackground));}"
        },
        {
          "type": "code",
          "code": "/* Deprecated hook */--slds-g-color-border-base-4/* Updated hook */--slds-g-color-border-2"
        },
        {
          "type": "code",
          "code": "/* Deprecated CSS */.my-custom-container {Â Â background-color: var(--slds-g-color-neutral-base-100);}/* Markup */<div class=\"my-custom-container\">...</div>/* Â ----- Refactor to ----- Â *//* Updated CSS */.my-custom-container {Â Â background-color: var(--slds-g-color-surface-container-1);}/* Markup */<div class=\"my-custom-container\">...</div>"
        },
        {
          "type": "code",
          "code": "/* Hard-coded CSS */.my-custom-card {Â Â background-color:#ffffff;Â Â border-radius: 1rem;}/* Â ----- Refactor to ----- Â *//* Updated CSS */.my-custom-card {Â Â background-color: var(--slds-g-color-surface-container-1,Â #ffffff);Â Â border-radius:Â var(--slds-g-radius-border-4,Â 1rem);}"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/getting-started",
      "title": "Getting Started - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Salesforce Lightning Design System includes the resources to create user interfaces consistent with the Salesforce Lightning principles, design language, and best practices. Rather than focusing on pixels, developers can focus on application logic, whileÂ designers can focus on user experience, interactions, andÂ flows. This site provides a range of resources for designers and developers, whichÂ includes:"
        },
        {
          "type": "list",
          "items": [
            "semantic and accessible componentÂ markup.",
            "cross-browser compatibleÂ CSS.",
            "icons, font, and designÂ guidelines."
          ]
        },
        {
          "type": "p",
          "text": "Start with theÂ following:"
        },
        {
          "type": "list",
          "items": [
            "Explore theGuidelinesto learn the Salesforce product design patterns andÂ principles.",
            "Review the Components section, to familiarize yourself with the existing components which you can incorporate into yourÂ designs."
          ]
        },
        {
          "type": "p",
          "text": "Familiarize yourself with theÂ following:"
        },
        {
          "type": "list",
          "items": [
            "Get an overview of ourMarkup and Styleguidelines including the class naming conventions used in ourÂ CSS.",
            "Review the Components; each component provides semantically correct and accessible markup andÂ documentation.",
            "Dive into the platform-specific getting started stepsÂ below."
          ]
        },
        {
          "type": "p",
          "text": "Get started with the Lightning Design System onLightning. Please be careful to pay attention to the specific requirements for the Lightning technology you areÂ using:"
        },
        {
          "type": "list",
          "items": [
            "LightningÂ Experience",
            "Salesforce1",
            "Stand-alone LightningÂ app",
            "Lightning OutÂ component",
            "Lightning Components for Visualforce"
          ]
        },
        {
          "type": "p",
          "text": "Get started with the Lightning Design System onÂVisualforce. Get started with the Lightning Design System onÂHeroku."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/canvas",
      "title": "Canvas - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "UsageCanvas NavigationCanvas ScalingCanvas Guides and GridsCanvas ActionsCanvas Views and Modes",
            "Canvas Navigation",
            "Canvas Scaling",
            "Canvas Guides and Grids",
            "Canvas Actions",
            "Canvas Views and Modes",
            "Canvas for Logic BuildersPartsCreating Elements on the CanvasWorking on the Canvas",
            "Parts",
            "Creating Elements on the Canvas",
            "Working on the Canvas",
            "Canvas for Content BuildersPartsCreating Content on the CanvasWorking with Components on the Canvas",
            "Parts",
            "Creating Content on the Canvas",
            "Working with Components on the Canvas"
          ]
        },
        {
          "type": "p",
          "text": "A canvas is the main work area in a builderâwhere users create and work with visual data. The canvas is the main working area of a builder layout, and occupies the bulk of UX real estate. Here users can add and manipulate components, nodes and connectors, or data elements. The canvas provides a visual representation of the content, app, or process a user is building. Users create, configure, and save that representation using UI controls in the header, panels, or the canvas itself. Accessibility Note:When building a canvas solution, partner with engineering to specify and implement both keyboard and mouse controls for all canvas interaction. With large flows or content, users need a way to navigate around the canvas. Options include a zoom tool, scrollbars, and search functions or hierarchical component lists that let users jump to a chosen node or component. Canvas scaling and navigation are critical aspects of builder UI. Scaling may be expressed in terms of window size, panel configuration, or magnification. Elements should scale smoothly and quickly, with guardrails on scaling size. These options can add structure to a layout. Controls or settings can let users enable, disable, show, hide, and otherwise configure a grid or guides. Users should be able to add, move, edit, and delete elements on the canvas. Methods for adding include create actions in the header or panels, drag and drop (from a panel), and click to create (from within the canvas). In one common pattern, users select a component or node on the canvas, then open a property configuration panel. Put controls for toggling canvas viewsâfor example, desktop/mobile views of an email or design/code views of a webpageâin the header toolbar. The header is also a good location for mode change controls. A mode changeâsay, a dynamic data preview modeâcommonly exists as a new layer or modal over the existing canvas. In logic builders, the canvas is used to create a visual flow or step sequence. Nodes, steps, or entities listed in the left side panel may be added to the canvas with a creation method such as drag and drop or click to create. On the canvas, use connectors to represent relationships between nodes or a sequence of events. Click nodes or connectors to access more information or configure elements. Nodes are the building blocks of a workflow. Each node represents an action. SeeNodesfor more information Connectors are lines that connect nodes, representing relationships and movements between them. SeeConnectorsfor more information Users drag and drop nodes or other elements from a toolbox/component panel to the canvas. This method may also be used to move or connect elements on the canvas. SeeDrag and Dropfor more information Here, users click to create nodes or other elements. Clicking directly on the canvas or on dedicated creation points opens a popover with contextual options; the selected option is added to the canvas. SeeClick to Createfor more information The zoom tool is recommended for logic builders so the canvas view can be adjusted and scaled to see all or part of a flow. SeeZoom Controlsfor more information In content builders, the canvas is used to construct a visual representation of a content type, such as a web page, email message or social post. Components listed in the left side panel may be added to the canvas using drag and drop, click to create, or keyboard interactions. On the canvas, use layout components to organize and structure the content. Components in a drop zone use a drop zone container to highlight and label selected components. Button icons are used to perform actions such as moving or deleting a component. Select a component to open its property configuration panel. Components are content building blocks. On the canvas, they provide a WYSIWYG representation of a configuration. For example, an image component displays a selected image on the canvas at the correct size, while a rich text component displays accurately formatted and styled text. Until they are configured, components in thedrop zone containerdisplay a default state. Selected components are highlighted, and their property configuration panels opened. Any additional actions are shown as icons on the right side of the component drop zone container. Layout is the underlying grid structure of rows and columns used to organize content on the canvas. In the simplest case, a single cell may hold an image. A complex web page may include underlying sections, rows, and columns, each of which behaves responsively. Layouts can be fixed or customizable. A content builder may include settings and controls that let users create custom layouts. Layout settings should always map to the underlying technology used to render the builderâs final output. Layout components establish the sections, rows, or columns that will contain other components. They control factors such as number and size of columns, margins, padding, background colors, and border styles. SeeLayoutfor more information By default, a canvas has a nonselectable one-column rowâthe only layout component that another layout component can be dragged on top of. The purpose of this empty row is to help users understand how to get started. Document-level settings can be made immediately available when a user creates a new content record. Drag and drop enables users to select a component and drag it onto the canvas, targeting a drop zone above, below, or within existing content. SeeDrag and Dropfor more information Here users click (or use a keyboard) to open and choose from a contextual list of components that can be added in a selected position. SeeClick to Createfor more information Selecting a component on the canvas highlights its drop zone container and opens the property panel Clicking Move in a componentâs drop zone container lets the user drag and drop that component anywhere on the canvas. Selecting the Move icon with the keyboard enables a similar \"move mode,\" in which the arrow keys are used to select and move a component. Clicking or selecting Delete in a componentâs drop zone container prompts a confirmation modal before deleting the component. If the selection is a layout component and the row has content, include details in the confirmation modal about the rows, columns or content to be deleted. Clicking or selecting Layout in a componentâs drop zone container opens the property panel for its rowâs underlying layout component, along with its columnâs scoped tab. SeeLayoutfor more information Next:Click to Create"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/click",
      "title": "Click to Create - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "UsageInsertion Points (Nodes)Popover MenuCanvas Updates",
            "Insertion Points (Nodes)",
            "Popover Menu",
            "Canvas Updates"
          ]
        },
        {
          "type": "p",
          "text": "This contextual action opens a modifiable, movable components list. With click to create, users click (or use a keyboard) to open a contextual list of components that can be added to a selected position on the canvas."
        },
        {
          "type": "list",
          "items": [
            "Click to create insertion points appear:",
            "In empty columns",
            "Below each row (there isnât a node for click to create at the top of the canvas)",
            "On an empty/default canvas, include a node in any empty row/column, allowing a layout component to be selected."
          ]
        },
        {
          "type": "list",
          "items": [
            "In a popover menu, clicking the node icon (a plus sign) changes it into a close icon. Clicking again changes it back and closes the menu.",
            "Alslds-p-bottom_nonel menu options should map to available components in the left-hand component panel."
          ]
        },
        {
          "type": "list",
          "items": [
            "When content is added to an empty canvas, add a node for click to create below each new row.",
            "Clicking to add a component selects that component and shows its property sheet (just as when dropping a component onto the canvas)."
          ]
        },
        {
          "type": "p",
          "text": "Next:Connectors"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/configuration",
      "title": "Configuration - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Builder Parts",
            "Logic Builders",
            "Content BuildersFixed PanelsFlexible Panels",
            "Fixed Panels",
            "Flexible Panels"
          ]
        },
        {
          "type": "p",
          "text": "A builder is made up of a set of parts that can be configured to meet the needs of an application, business process, or content type. When creating a new builder, start with a builder type, then make design choices that support its use case. Use alogic builderto visualize a business process, flow, or sequence of events. Logic builders often feature nodes and connectors representing relationships between entities on a canvas. Use acontent builderto lay out and configure web pages, messages, ads, social posts, and images. Content builders often feature configurable components that can be arranged in static or dynamic layouts on a canvas. Use adata builderwhen creating reports and presentations featuring data tables, charts, or graphs. Use acode builderif you are working mostly with code views or database schemas. After identifying the most appropriate builder type, look at key use cases. What actions are needed in the header, and which is the primary action? Which tools and components will be used with the canvas? Which panels and interactions support creation and configuration? A builder is made up of a set of parts, some common and others unique to specific builders. Required and optional builder parts are documented in the patterns section; those with ready-to-use markup link to SLDS component blueprints. Every builder must have a builder header and a toolbarâelements that indicate that users are in a builder. Almost all builders focus on a canvas or open work area, which is used to add and configure elements such as content components, nodes and connectors, or data. In addition to these requirements, a builder can include one or more panels, modals, or popovers, which are used to configure items on the canvas. Optional patterns include canvas zoom, canvas click to create, drag and drop, panel drill in, and validation. A logic builder requires a canvas, workflow connectors, and nodes. Logic builders include Flow Builder, Engagement Studio, Journey Builder, and Process Builder. Consider the following when configuring a logic builder header:"
        },
        {
          "type": "list",
          "items": [
            "How is the builder launched, and where does the 'Back' button return the user to?",
            "What is the primary action? Will both Save and Activate be required for this builder?",
            "What settings, guardrails, and help options exist?",
            "What actions should be included in the toolbar?",
            "Will search be supported?",
            "What validation types (errors and warnings) will be surfaced to the header?"
          ]
        },
        {
          "type": "p",
          "text": "Consider the following when configuring a logic builder canvas:"
        },
        {
          "type": "list",
          "items": [
            "What types of elements (nodes) will be used?",
            "What relationships between nodes are required?",
            "How will elements be added to the canvas? How will they be edited, moved, and deleted?",
            "Will elements be arranged in a fixed grid or positioned ad hoc on the canvas?",
            "How many elements will be needed to represent a common process or flow?",
            "How will the user move around or scale the canvas?",
            "How will canvas elements be named and configured? Is a popover, panel, direct edit, or modal the best way to edit element details?",
            "How will the user accomplish all of these tasks using different inputs (ie. keyboard not mouse, screen reader, etc)?"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "Content builders have several required parts: a canvas, components, and panels. Content builders include Lightning App Builder, Experience Builder, Page Designer and Email Builder. Consider the following when configuring a content builder header:"
        },
        {
          "type": "list",
          "items": [
            "How will the builder launch? Where will the back button return to?",
            "What is the primary action? Will both Save and Publish be required for this builder?",
            "What settings, guardrails and help options exist?",
            "What actions will be included in the toolbar?",
            "Will toggles be used to show/hide panels or to change the view (e.g., from desktop to mobile)?",
            "Will search be supported?",
            "What validation types (e.g., errors and warnings) will be surfaced to the header?"
          ]
        },
        {
          "type": "p",
          "text": "Consider the following when configuring a content builder canvas:"
        },
        {
          "type": "list",
          "items": [
            "What component types will be used?",
            "Will the builder support third-party components?",
            "What layout structure types will be supported?",
            "How will components be added to the canvas, and edited, moved, and deleted?",
            "What size and shape is the content?",
            "Does the workflow require a full-screen or responsive canvas?",
            "Are other view modes, such as code view, text view, or dynamic preview, required?",
            "How will the user move around or scale the canvas?",
            "How will canvas components be named and configured? Is a popover, panel, direct edit, or modal the best way to edit details? Will inline editing be used for any rich text areas?",
            "Will versions be supported?",
            "How will the user accomplish all of these tasks using different inputs (ie. keyboard not mouse, screen reader, etc)?"
          ]
        },
        {
          "type": "p",
          "text": "Choose a fixed or flexible panel configuration depending on content type. Note: Fixed panel configuration is the default approach for content builders This configuration features fixed left and right panels, with the canvas scaling to fit between them. If a panel is closed or toggled off, the canvas resizes to fit the available space, up to the full width of the window. Fixed panels give users easy access to components or tools on the left and a persistent property sheet on the right. Fixed-panel content builders include Lightning App Builder and Email Builder. Fixed panels are:"
        },
        {
          "type": "list",
          "items": [
            "Ideal for content that is small in size, or can be scaled without affecting clarity or efficiency",
            "Good for workflows requiring complex configuration in panels, or where there is little reason to remove panels from the working view",
            "The best choice if the entire canvas must be visible during configuration, as panels never overlay the canvas"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "Note: Flexible panel configuration and floating panels should only be used in Experience Builder, Commerce Page Designer, or other web page content builders. This configuration features a fixed left-hand panel and a floating property panel. Users can show or hide the left-hand panel; in both cases, a fixed left rail with icons is present. When the left panel is open, the canvas resizes to fit the available space. All panels and toolbars can be hidden, enabling content building on a full-window canvas. A flexible panel allows for a larger canvas view. Flexible panel content builders include Experience Builder (community) and Page Designer (commerce). Flexible panels are:"
        },
        {
          "type": "list",
          "items": [
            "Ideal for builders used to create web pages and other large-scale content",
            "Ideal for viewing and testing responsive content",
            "Good for workflows that can benefit from more control over panel arrangement"
          ]
        },
        {
          "type": "p",
          "text": "Note that floating panels overlay the canvas when selected. If the entire canvas must be visible during configuration, use fixed panels."
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "Accessibility Note:When implementing a flexible panel configuration, partner with engineering to specify and implement keyboard controls for floating panels."
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "Next:Canvas"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/connectors",
      "title": "Connectors - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "Usage"]
        },
        {
          "type": "p",
          "text": "Connectors represent relationships between nodes on the canvas. Connectors are lines that connect nodes, representing relationships and movements between them"
        },
        {
          "type": "list",
          "items": [
            "Use connectors to connect to nodes horizontally or vertically.",
            "Avoid 45Â° and freeform connectors.",
            "Use the badge component to label connectors."
          ]
        },
        {
          "type": "p",
          "text": "In testing mode, a user can choose a path through a workflow, then see it reflected in color and line-weight changes to the connector path. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Next:Drag and Drop"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/drag",
      "title": "Drag and Drop - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "Usage", "Variations"]
        },
        {
          "type": "p",
          "text": "Drag and drop lets users select and move items on the screen. Users can move elements on the screen by dragging and dropping them, using a mouse, keyboard, or other input device. When a component is dragged over an eligible area of the canvas, the drop zone should be the height of the default empty row component minus its default padding. The drop zone should have a green background, and should push the content below it. When the user drags over an area withno existing components, fill the entire width of the canvas and the full height of a default row. Dragging into a multicolumn row:"
        },
        {
          "type": "list",
          "items": [
            "If a component is dragged into an eligible column in a multicolumn row, the drop zone should fill only the bordered region."
          ]
        },
        {
          "type": "p",
          "text": "Dragging above existing content:"
        },
        {
          "type": "list",
          "items": [
            "If a component is dragged above the canvas, existing content should bepushed downto create a drop zone."
          ]
        },
        {
          "type": "p",
          "text": "Dragging below existing content:"
        },
        {
          "type": "list",
          "items": [
            "Until the canvas extends beyond the bottom of the viewport, the entire area below the existing canvas should be an eligible drop zone. Thisappendsthe component to the bottom of the canvas.",
            "Once the canvas extends beyond the viewport (requiring scrolling), the user must drop precisely at the bottom of the last existing element."
          ]
        },
        {
          "type": "p",
          "text": "Dragging to an ineligible area:"
        },
        {
          "type": "list",
          "items": [
            "For areas not eligible for a dropped component, set the cursor CSS value tono-drop."
          ]
        },
        {
          "type": "p",
          "text": "Accessibility Note:When implementing drag and drop, include a drag handle button. Work with developers to specify and implement equivalent keyboard actions. Next:Header"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/header",
      "title": "Header - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Top BarStyles & ColorsLeft Side ActionsRight Side Actions",
            "Styles & Colors",
            "Left Side Actions",
            "Right Side Actions",
            "ToolbarPrimary ActionsSaveActivate/DeactivateStatus TextAlertsUtility ActionsSearchUndo/RedoPreviewingPanel Toggling",
            "Primary Actions",
            "Save",
            "Activate/Deactivate",
            "Status Text",
            "Alerts",
            "Utility Actions",
            "Search",
            "Undo/Redo",
            "Previewing",
            "Panel Toggling"
          ]
        },
        {
          "type": "p",
          "text": "The builder header persists at the top of the window. It contains navigation elements and file information. Every builder needs a builder header, which contains basic navigation elements. It also shows the builder type and document or file name. See theBuilder Headercomponent blueprint for implementation information The top bar of the header should be consistent across builders. Use the following styles and colors for the top bar."
        },
        {
          "type": "list",
          "items": [
            "Top Bar BackgroundBackground-color: #16325C / Biscay",
            "Background-color: #16325C / Biscay",
            "Top Bar Separator LinesColor: #061C3F / Deep Cove",
            "Color: #061C3F / Deep Cove",
            "ButtonBackground-color: transparentText Color: #FFFFFF / White",
            "Background-color: transparent",
            "Text Color: #FFFFFF / White",
            "Button: hoverBackground-color: #061C3F / Deep CoveText Color: #FFFFFF / White",
            "Background-color: #061C3F / Deep Cove",
            "Text Color: #FFFFFF / White",
            "Button: hoverBackground-color: #061C3F / Deep CoveText Color: #FFFFFF / WhiteText-decoration: underline",
            "Background-color: #061C3F / Deep Cove",
            "Text Color: #FFFFFF / White",
            "Text-decoration: underline"
          ]
        },
        {
          "type": "p",
          "text": "The left-hand side of the top bar may contain one or more of these four elements, in this order from left to right:"
        },
        {
          "type": "list",
          "items": [
            "Back button.",
            "Builder logo and name. If this element has a menu, include a chevron to let users know it is clickable.",
            "Pages menu (optional).",
            "File name and version number."
          ]
        },
        {
          "type": "p",
          "text": "The Back button is located at the top left of the builder header. Use hover text to show where the builder has launched from. If the builder launches from only one location, hover text should read âBack.â Specify a launch site with hover text such as âBack to setup,â âBack to journey,â or âBack to email record.â A menu can be added to an element in the top bar, when needed."
        },
        {
          "type": "list",
          "items": [
            "If users can add new pages, include an Add Page item at the top of the Pages menu.",
            "Menus may be divided into sections.",
            "Menus may include scrollable overflow. Menu height can be set dynamically, with scrolling triggered after a set height.",
            "The builder name can function as a menu if needed.",
            "Any element with a menu should be a button element. Include a chevron to let users know it is clickable.Â"
          ]
        },
        {
          "type": "p",
          "text": "A builder may have no settings, just builder or canvas settings, or both builder and canvas settings. Builder-level settings affect the overall configuration and behaviors of the builder and should persist each time the builder is opened. Builder settings are located next to Help at the top right of the header. The Settings button opens a popover or modal where settings can be edited and saved.Â Canvas-level settings affect the canvas or configuration of the current record or file. Canvas settings are located on the left side of the action toolbar. The canvas-level settings button opens a popover or modal where settings or preferences can be edited and saved. After each save, the builder canvas should reflect any updates. The help menu contains resources for learning about, using, and offering feedback on the builder. It includes a guardrail tips section."
        },
        {
          "type": "list",
          "items": [
            "Use icons to differentiate help resources.",
            "Use sections to group menu items.",
            "Use dynamic counts or badges for items such as guardrail tips."
          ]
        },
        {
          "type": "p",
          "text": "The toolbar is located below the top bar. It contains buttons that affect the builder as whole, such as Save, Activate, Publish, Undo, Copy, and Zoom. Keep the action toolbar lean and meanâuse an overflow menu to manage additional options. See theBuilder Headercomponent blueprint for implementation information The builder header bar should contain only one primary action button, at the far right of the toolbar. Place any additional action buttons associated with the open file to its immediate left. When the user clicks a primary action button, thestatus textupdates to reflect the action in progress, then updates again when the action is complete.  Saving commits all changes to the server. Status text updates to reflect saving in progress, then updates again when saving is complete."
        },
        {
          "type": "list",
          "items": [
            "Use âSave Asâ to create a new copy of a current record.",
            "Donât usetoastsoralertsfor save messages. When users save often, toasts can be disruptive. Banners are reserved for systemwide messages."
          ]
        },
        {
          "type": "p",
          "text": "Accessibility Note:Background status text changes should not trigger screen reader alerts.Â Activation and deactivation are significant milestonesâuse atoastto notify users of success or failure. When the action is in progress, update the status message to read âActivating...â or âDeactivating....â Use an animated spinner. For builders with activate and deactivate actions, this may be the primary action (button Brand) or a secondary action (button Neutral). Usetext destructive(not destructive) style for the deactivate button. The save button is disabled after activation and the Activate button is replaced with Deactivate. To avoid shifting, make the Activate and Deactivate buttons the same width. Use status text and alerts with action buttons to reinforce status notifications, warnings, and errors. In the toolbar, show status with inline text next the action buttons. Use a focusable text button that includes hidden text for screen readers. Avoid badges, which are visually heavy and not focusable. A status text can include:"
        },
        {
          "type": "list",
          "items": [
            "A file (version) state,such as active, inactive, draft (e.g. \"Inactive - Modified a few seconds ago\")",
            "Action, plus Last Modified Time, represented withrelativeDateTime. (e.g. \"Saved 1 day ago\")"
          ]
        },
        {
          "type": "p",
          "text": "When the user hovers or focuses status text, use a tooltip to communicate additional details (e.g.,Version 2 saved by Johnny Appleseed Today 9:00 AM). When an action, such as saving or activating, is in progress, disable action buttons. Status text should include the action name and an animatedspinner icon. Do not alter button states to indicate actions in progress. When an action is in progress, disable the canvas and show an animation. When an action is complete, update the status text. Disable the Save button until any further changes are made. In the toolbar, alert icons are located to the left of actions buttons, and to the right of status text. When the canvas or a canvas element generates a warning or error, an alert icon appears in the toolbar. On hover, a popover shows detailed information on all current unresolved warnings or errors. Accessibility Note:In the alert focus popover, up/down arrow keys move keyboard focus between listed errors. Pressing Enter moves keyboard focus to the related component in the canvas. SeeValidationfor more information Utility actions are tools related to the canvas. They appear at the left side of the toolbar. Some actions, such as Undo/Redo, may affect both the canvas and related panel settings. Buttons for common actions such as Canvas Settings, Cut, Copy, Paste and Undo/Redo should appear in a consistent location across builders. Buttons that appear without text should use tooltips indicating their functions and related keyboard shortcuts. When a builder includes a large number of utility actions, use an overflow menu. To save space, dropdown menus may be collapsed to icon-only menus. A search bar/lookup lets users search for components or elements on the canvas. To save space, use a search button, with the search bar in a popover. When a search list item has focus, the canvas should move to show and highlight the corresponding element. When a search list item is selected, the canvas should remain in position to show and highlight the corresponding selected element. Undo/Redo actions affect all areas below the header, including the canvas and panels. If the builder can access multiple pages, maintain an undo/redo queue for each page. Accessibility Note:Undo/Redo should provide screen readers with highly specific, visually hidden updatesâfor example,changes to component x undoneinstead ofchanges undone. The queue for undo/redo includes all creation and configuration actions. Undo/redo will not affect primary actions such as save or activate. Left Panel"
        },
        {
          "type": "list",
          "items": [
            "Drag to add component to canvas",
            "A resource edit or definition (Flow Builder)"
          ]
        },
        {
          "type": "p",
          "text": "Canvas"
        },
        {
          "type": "list",
          "items": [
            "Click to create a component to canvas",
            "Move element",
            "Delete element",
            "Copy and paste element",
            "Connector change",
            "Canvas scaling or zooming"
          ]
        },
        {
          "type": "p",
          "text": "Property Panel"
        },
        {
          "type": "list",
          "items": [
            "Changes to any input",
            "Layout property change",
            "Rich text editor changes",
            "Text entry (based on delimiting and debouncing)"
          ]
        },
        {
          "type": "p",
          "text": "If needed, use a preview mode to verify content or flows before publication or activation. Transition to Preview Make the transition from editing to preview as clear as possible."
        },
        {
          "type": "list",
          "items": [
            "In the header, hide any actions not needed in preview.",
            "On the canvas, hide any guides, indicators, or elements not included in the final rendered or activated state.",
            "Close any open panels.",
            "Provide a clear button action to return to editing mode."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. In builders with a left-hand components/tool panel, use a stateful button in the toolbar to open and close the panel. Users can also close the panel by clicking the âXâ button in the panel header. When this panel is opened and closed, the canvas should resize using drawer behavior. The panel should not overlay the canvas. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Next:Layout"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/layout",
      "title": "Layout - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Layout Settings PanelColumnsStyle",
            "Columns",
            "Style"
          ]
        },
        {
          "type": "p",
          "text": "Layout is the structure used to organize content. Layout is the underlying grid structure of rows and columns used to organize content on the canvas. In the simplest case, just one cell may be used for an image. A complex web page may include many underlying sections, rows, and columns, all of which behave responsively. Layouts can be fixed or customizable. Content builders may use different layout settings and controls to meet designersâ and developersâ needs. In all cases, layout settings should map to the underlying technology used to render the final publishable output of the builder. A layout component establishes columns within which other components are added. Each layout component controls its number of columns and column widths. Clicking the Layout action in the drop zone container for any component opens the property panel for the underlying layout component for that row, and also opens to the specific columnâs scoped tab. Selecting Component Layout from the drop zone container:Clicking this button on any component opens the property panel for the underlying layout component, and makes the specific columnâs scoped tab active. Selecting Component Layout from the component property panel:Each non-layout component has a menu link that opens the property panel for its underlying layout component. Selecting a different component when editing layout:If the user selects a different component on the canvas or from the tabs in the layout editor, the new component or column is selected on the canvas, and the accompanying tab opens in the layout editor. Deleting a column with content:A confirmation modal will confirm before deleting a column with a component. Any new settings applied to anentire rowshould be added to the layout settings paneloutside the scoped column tabs. Add settings for a specific column inside its scoped tabs. Set number of columns:Use the input to set the number of columns, from one to twelve, for the row. Updating the column number updates the canvas and the scoped tabs. Reducing the number of columns removes the rightmost column(s). If any column to be deleted has existing content, confirm deletion with a modal. Set column width and padding for each column:In the scoped tab for each column, adjust column width (based on a 12-column grid) and padding (in pixels). Updates to column width and padding should be immediately reflected on the canvas. Change column size:When column sizing changes,change the value of the column immediately to the right,relative to the new selection."
        },
        {
          "type": "list",
          "items": [
            "If this action will result in a column having a value of0, reduce the width of the next column to the right.",
            "If selecting therightmostcolumn, change the value of the column immediately to theleft.",
            "If this action will result in a column having a value of0, reduce the width of the next column to the left."
          ]
        },
        {
          "type": "p",
          "text": "Reset column widths and padding:Click the button âReset Column Widths and Paddingâ to return to defaults (evenly sized columns with no padding). Disable this button when there is only one column. Set column spacing in pixels:Update Column Spacing to set spacing between all columns. Set column alignment:Update Column Alignment to set vertical alignment of content to the top, middle, or bottom of a column. Set row background color:Update Background Color to set the background color of a row using the color picker. Next:Modals"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/modals",
      "title": "Modals - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "Usage", "When to Use Panels or Modals"]
        },
        {
          "type": "p",
          "text": "Modals display messaging and other content in a layer above the app. Modals display content in a layer above the app. Theyâre used for messaging, setup, and for viewing or editing additional details of the currently selected component or record. A builder can include both modals and panels. In general, panels are preferred over modals, though each has its uses. Use this decision matrix to guide your choices."
        },
        {
          "type": "list",
          "items": [
            "Small and medium panels maintain the context of the builder beneath them.",
            "Full panels allow greater focus when viewing a single elementâideal for emails and other large visual elements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Can partially or completely obscure the canvas.",
            "Doesn't require Save or Cancel actions, which can result in confusion."
          ]
        },
        {
          "type": "list",
          "items": [
            "Maintain trust with explicit Save, Cancel, and similar actions.",
            "Have greater versatility; can appear in any context.",
            "Provide focus in any context by obscuring anything below the modal."
          ]
        },
        {
          "type": "list",
          "items": [
            "Obscures canvas completely.",
            "Difficult to cross-reference other elements on canvas and tool palette."
          ]
        },
        {
          "type": "p",
          "text": "See how modals can be used for specific use cases inContent Builders  Next:Nodes"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/nodes",
      "title": "Nodes - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Node Deletion",
            "Node Error Behavior"
          ]
        },
        {
          "type": "p",
          "text": "Nodes represent actions in a workflow. Nodes are the building blocks of a workflow. Each one represents an action."
        },
        {
          "type": "list",
          "items": [
            "Use paired shapes and colors to represent each possible action and process step.",
            "Don't use multiple colors and shapes to represent the same state.",
            "Keep node shapes and colors consistent across actions. Standardize type color, size, and spacing.",
            "Each node must have a name label. A node may also include a text description and link. These labels can be up to 132 pixels across.",
            "Nodes may also include an icon inside the node. Use icons to differentiate related functions such as Start and End."
          ]
        },
        {
          "type": "p",
          "text": "The trashcan icon denotes removing an element, while the âxâ icon denotes closing or dismissing it. Use the trashcan icon to allow removal of a workflow node when the user hovers over it. Use a 44x44 pixel touch target for mobile web. The ban icon denotes an error. Use the ban icon in the upper left corner of the node. When errors are identified and appear in theError Popover, highlight the affected node with an outline. Allow the user to navigate between elements to address an error. Use a 44x44 pixel touch target for mobile web. Next:Panels"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/overview",
      "title": "Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "WorkflowWhere to Launch a BuilderRecord Information: Names, Versions, and StatusesSettings and HelpSaving Builder RecordsAutosaveActivating or PublishingExiting a Builder",
            "Where to Launch a Builder",
            "Record Information: Names, Versions, and Statuses",
            "Settings and Help",
            "Saving Builder Records",
            "Autosave",
            "Activating or Publishing",
            "Exiting a Builder"
          ]
        },
        {
          "type": "p",
          "text": "Declaratively build and visualize applications and business processes. A builder is a tool that lets everyone from developers and admins to business users create and customize applications and business processes. Developers and admins use builders such as Lightning App Builder, Experience Builder, Bot Builder, and Flow Builder to create interfaces for business users. Users can also create experiences for teams or customers with tools such as Journey Builder and Engagement Studio.  There are four main types of builder:"
        },
        {
          "type": "list",
          "items": [
            "Logic buildersvisualize business processes, flows, or sequences.",
            "Content buildersare used to design and configure web pages and other visual elements.",
            "Data buildershelp users develop reports and presentations featuring tables, charts, and graphs.",
            "Code buildersare used to develop code views and database schemas."
          ]
        },
        {
          "type": "p",
          "text": "When should you think about using a builder? Start, as always, with the user. If users will be doing one or more of these things, there could be a builder in your future:"
        },
        {
          "type": "list",
          "items": [
            "Working with WYSIWYG (âwhat you see is what you getâ) declarative elements that can be added with clicks and customized with forms",
            "Designing a business process on a blank canvas",
            "Creating and defining a series of logical actions that result in different outputs",
            "Defining the relationship of one element to anotherâfor example, in a workflow or visual layout",
            "Saving and tracking multiple drafts or versions"
          ]
        },
        {
          "type": "p",
          "text": "If a builder isnât a good fit, consider using another framework, such as adirectional modal,Channel Studios on Marketing Cloud, or use anexpression,form, orfilter. Depending on your target user, a builder can be opened from Setup, an app, or a record page."
        },
        {
          "type": "list",
          "items": [
            "In Setup, launch the builder in full-screen mode.",
            "Make sure that the builder, its list-view, and any detail pages can be accessed from the builder home page in Setup."
          ]
        },
        {
          "type": "list",
          "items": [
            "Launch a builder from a relevant record detail page or app page. For example, Journey Builder can be launched from any Journey record page."
          ]
        },
        {
          "type": "list",
          "items": [
            "In Salesforce Console, a builder should open in a new window or browser tabânotin a console tab or subtab.",
            "A utility bar that overlays the interface can persist over a builder. If the user navigates away from the builder by clicking the utility bar, an alert should warn that unsaved changes may be lost. SeeModal usagefor warning messages.",
            "Builder record metadata can be represented in a console tab or sub-tab."
          ]
        },
        {
          "type": "p",
          "text": "Before opening a builder, start on therecord listpage, which includes a clear summary offile names,versions, andstatuses. Display this information in the builder, in the record list, record detail, and builder header. Display file name, version, and status in the builder list. To orient users without making them return to the builder, provide a dedicated view of file name and version(s) for each record.Â The builder header should include the builder name, file name, and save status.Â For more information about the Builder header, seeHeader GuidelinesandHeader Component Blueprint. The top right of the builderâs header bar is reserved for links to builder-level settings and help documentation. When working in a builder, users tend to save changes often. Some builders also let users activate, run, or publish. Saving is a server-side snapshot of an object and its state. Note that saving does not equal approval to push an object for activation or publication; these are two separate actions. If saving does activate/publish a file or execute a process, explicitly call this out."
        },
        {
          "type": "list",
          "items": [
            "Use a Save button to initiate a server-side save of the entire object.",
            "When a builder allows manual saving, users should be allowed to save even when their work contains errors. (SeeValidationfor more information on messaging.)",
            "When a save also triggers activation/publication, allow the file to be saved without push. Alert the user to any errors blocking activation/publication."
          ]
        },
        {
          "type": "list",
          "items": [
            "Builders may allow object versioning. If your builder does so, let users clone or copy objects with a Save As command.",
            "If a builder autosaves (and creates auto-versions for each save), batch any changes into a new version. Make it easy for users to view and revert to previous versions."
          ]
        },
        {
          "type": "list",
          "items": [
            "Multiple records can be viewed simultaneously in new browser windows or tabs.",
            "An explicit save affects only the record currently in focusânotother open records.",
            "When a user attempts to closes a browser window with unsaved records, display a warning that they will lose all unsaved changes."
          ]
        },
        {
          "type": "p",
          "text": "Clearly communicate the status of save, activate, and other actions, without overwhelming users or drawing focus from the task at hand. For more information, seeStatus Textin the Header Toolbar section.  Consider these principles when using autosave:"
        },
        {
          "type": "list",
          "items": [
            "Confidence.Make clear what is and isnât saved at all times. Can an autosave offer the trust of an explicit save button?",
            "Simplicity.How are previous versions presented? Reinstated? Whatâs a simple, easy, and on-pattern way for users to perform these actions?",
            "Data.Where do autosave versions live? Do they affect a userâs data limits? Are both users and Salesforce prepared to deal with the data implications?",
            "Performance.What effect will constant saving have on performance? Are the benefits of autosaving and versioning enough to outweigh any lag?"
          ]
        },
        {
          "type": "p",
          "text": "Most builders separate save functionality from publication/activation, allowing users to edit without affecting runtime or live business processes. Place the Activate or Publish action at the right side of the builder toolbar, with other action buttons. If technical or other factors make that difficult, place it on the Builder Home or Record Overview page. For more information, seeActivate/Deactivatein the Header Toolbar section.  To exit a builder, users close the browser window or click the Back button in the header bar. The user will return to the page from which the builder was launched. Next:Configuration"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/panels",
      "title": "Panels - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Panel Behavior",
            "Parts",
            "Panel Sizing",
            "Panel NavigationToggle Panel VisibilityDock Panel to Right Side",
            "Toggle Panel Visibility",
            "Dock Panel to Right Side",
            "Component Panel Variants for Content BuildersFixed Component Panel (Base)Fixed Component Panel (Page Tree)Flexible Component Panel",
            "Fixed Component Panel (Base)",
            "Fixed Component Panel (Page Tree)",
            "Flexible Component Panel",
            "Property Panel Variants for Content BuildersFixed Property Panel (Base)Fixed Property Panel (Content-specific Header)Floating PanelProperty Panel Inputs",
            "Fixed Property Panel (Base)",
            "Fixed Property Panel (Content-specific Header)",
            "Floating Panel",
            "Property Panel Inputs",
            "Panel Drill-in and ExpansionPanel Drill-inModalPopover",
            "Panel Drill-in",
            "Modal",
            "Popover",
            "Panel Validation",
            "Canvas UpdateUndo/RedoSaving",
            "Undo/Redo",
            "Saving"
          ]
        },
        {
          "type": "p",
          "text": "Panels present contextual tasks and information. Panels present momentary tasks, properties, and supplemental information associated with the current builder, or a selection made within the canvas. Panel hierarchy moves from left to right. The left panel hosts primary functions and tasks used in the builder. The right panel (or a floating variant) hosts secondary functions, plus supplemental information related to active canvas items. By default, panels are non-modal dialogs that float above the canvas on a raised z-index. Use panel overlay behavior if a panelâs content takes temporary focus. Panels may also open as drawers, reflowing canvas content. Use this option if panel content shares focus with the canvasâfor example, where both panel and canvas must be referenced at the same time. A panel consists of the following parts: Header"
        },
        {
          "type": "list",
          "items": [
            "Title: Identifies the panel; usually a title or the name of a selected element.",
            "Close button (as needed): Icon located at the top right of the panel header.",
            "Dock/undock button (as needed): Icon located at the top right of the panel header. Commonly used with the floating panel variant."
          ]
        },
        {
          "type": "p",
          "text": "Body"
        },
        {
          "type": "list",
          "items": [
            "Display of information, properties, and forms can be customized.",
            "Group inputs, content, and configuration requirements in sections.",
            "Tabs may use either accordions or static section headers. Do not use both in one tab."
          ]
        },
        {
          "type": "p",
          "text": "Horizontal tabs"
        },
        {
          "type": "list",
          "items": [
            "Tabs can be implemented between the header and body. Use theSLDS overflow patternwhen necessary."
          ]
        },
        {
          "type": "p",
          "text": "Accordions"
        },
        {
          "type": "list",
          "items": [
            "Use accordions to group sections of information, streamline workflow, and minimize scrolling. Do not use accordions with only one section.",
            "The first accordion should be open by default. Expand only one accordion at a time. Clicking a collapsed accordion expands it and collapses any open accordions."
          ]
        },
        {
          "type": "p",
          "text": "Static sections"
        },
        {
          "type": "list",
          "items": [
            "Panels can be organized with static section titles and subtitles. The panel title may serve as a section title if only one static section is needed.Â"
          ]
        },
        {
          "type": "p",
          "text": "Default Builder panel width is 320px. Panel width should be fixed, but may be adjusted to suit content. Fixed panel height should extend from the header to the base of the window. Default height for floating panels is 400px. Floating panels may be vertically resized. Use a button icon in the builder header toolbar to toggle panel visibility. Use a button icon in the panel header to dock or undock a floating panel to the side of the window. The canvas will resize when a floating panel is docked and expand when it is undocked. Note:floating panels are only supported for Experience Builder, Commerce Page Designer and other web content builders. The left-hand component panel lists items used on the canvas. It is open by default, and can be closed using a toolbar action button. It uses drawer behavior and does not overlay other elements. The base version of this panel has a header and a body area. Body content may be organized with tabs, accordions, and static sections. Add a search bar to help users locate components by name. Accessibility Note: For the best keyboard experience, if the sections are a list of elements, build panel sections as HTML listboxes Use a page tree to outline the structure and hierarchy of components on the canvas. Select an element in the page tree and the canvas will move and highlight the selection. The page tree supports other actions such as delete or drag and drop to move elements. Add a vertical tab bar or rail to the base component panel to create this variant. Note:The flexible component panel is only supported for Experience Builder, Commerce Page Designer and other web content builders. The vertical tab bar sits beside the canvas and provides space for multiple component panel options. Selecting an icon on the bar opens a panel, causing the canvas to resize in the remaining available space. The tab bar and panel use drawer behavior and do not overlay other elements. Content builders use the property panel to configure and style selected content on the canvas. This panel is open by default, and persists unless it is closed; a close button is optional. It uses drawer behavior and does not overlay other elements. Note:Because canvas updates happen continuously as changes are made, the base panel does not use a footer action bar. SeeCanvasupdate recommendations. The base version of this panel has a header and a body area. Body content may be organized with tabs, accordions, and static sections. This panel variation is positioned over the base panel. When a component is selected, its header background color and icon change to reflect the chosen component type. The panel may also contain a short component description and action menu. Floating property panels appear over the canvas to provide context for selected items. This panel variation supports theflexible panel configuration. Note:The floating panel and flexible panel configuration are only supported for Experience Builder, Commerce Page Designer and other web content builders. Each floating panel has a header and a body area. The header contains a Dock to Side icon. Body content may be organized with tabs, accordions, and static sections. The body has a minimum height of 310 pixels; floating panels can be resized vertically. Accessibility Note:If floating panels can be dragged and resized, include a keyboard equivalent for these actions. Content builders require specific inputs for common use cases such as adding images, HTML editing, and personalization. Each input should have a persistent, visible label associated with it. When editing a code property, such as the contents of a code block, use atextarea inputwith$font-family-monospace. Use a toolbar for actions such as Merge Fields. For basic text properties, include neutral action buttons below the text field or textarea, spaced at$spacing-xx-small. For properties that require rich text formatting (e.g., font weight, bullets, and alignment), use theRich Text Editorand include actions in the toolbar. Use the image selection pattern when selecting an image, especially from a library. In the default empty state, use thefile selector - imagecomponent."
        },
        {
          "type": "list",
          "items": [
            "The primary button opens a dropdown list of available sources.",
            "The secondary button replaces the empty state with an input field, where the user can enter a prehosted URL.",
            "The cancel button returns to the empty state."
          ]
        },
        {
          "type": "p",
          "text": "When the user selects an image, thefilescomponent generates a preview. Deleting the image returns to the empty state. Accessibility Note:There should be a way for users to add alt text to the images they upload. SeeColor PickerComponent Blueprint for more information Use color picker component variants to control the color options available for the user."
        },
        {
          "type": "list",
          "items": [
            "When the user can specify any color, use the custom-only version of the SLDS color picker.",
            "If user-defined colors are allowed and the user has defined swatches, use the base version of the color picker.",
            "Consider using the predefined-only version to show a limited set of brand colors."
          ]
        },
        {
          "type": "p",
          "text": "A panel drill-in shows a second level of builder content in a panel. When a user selects its base-layer element, the drill-in layer slides over the existing panel body (below the panel header and any existing tabs). The drill-in layer has a header with a back button and title, plus optional actions. It may include a confirmation footer if needed. When more space is needed, a modal can be triggered from within a panel. Modals are often used for content selection. When the user chooses content from a property panel, a modal launches the media browser. Once actions are performed in the modal, the user selects Done or Save to return focus to the panel, with the panel state and canvas updated. A modal can also offer an expanded view for HTML editing, formula editing, or expression building. A popover is a nonmodal dialog used to display contextual information. Launched by a clickable trigger element in a panel, it contains at least one focusable element. Popovers can be used to edit a component title and description, update an image name, or set conditional visibility on a component. Panels may also display warnings and errors as part of a builderâs validation system. Field validation should follow SLDS guidelines for required fields and incomplete or invalid input. Tabs and accordions may contain warning or error icons. The associated alerts should also be surfaced to the header and canvas. SeeValidationfor more information The canvas should update whenever an action if performed. When a user enters text or code (for example, basic text, rich text, or HTML), the canvas should refresh continuously based on delimiting/debouncing settings. This update interval should also be tracked in the undo/redo action queue. Properties such as as radio buttons, check boxes, and image selections should refresh the canvas on field blur or property change. User actions (defined as updates to canvas components and changes to component content or properties) are recorded and linked to the toolbarâs undo/redo buttons. Text/code property changes:each recorded action is based on a string delimiter Examples:"
        },
        {
          "type": "list",
          "items": [
            "Delimit by space - typing âhello, friendsâ > hit undo > the value is now âhello,â",
            "By a command on the text - bold âhelloâ > hit undo > âhelloâ is now unbolded"
          ]
        },
        {
          "type": "p",
          "text": "Nontext property changes:the new property value is a recorded action Example:"
        },
        {
          "type": "list",
          "items": [
            "Choose new option from picklist > hit undo > reverted to previous selection"
          ]
        },
        {
          "type": "p",
          "text": "Canvas component changes position or is deleted:each change represents a recorded action Example:"
        },
        {
          "type": "list",
          "items": [
            "Move a component > hit undo > returns to previous position"
          ]
        },
        {
          "type": "p",
          "text": "Accessibility note:Undo/Redo should provide screen readers with highly specific, visually hidden updatesâfor example, changes to component x undone instead of changes undone. Changes are saved locally each time the canvas is updated. If a panel is closed, any changes will have been saved locally at the time of the canvas update. Server-side saves require a Save button. Warn users against using the Back button and closing tabs with unsaved changes. Accessibility note:There should be a visually hidden screen reader announcement to let users know the builder saved. Next:Popover"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/popover",
      "title": "Popover - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Error Popover Variant",
            "Warning Popover Variant",
            "Panel Information Variant",
            "Click to Create VariantList MenuVisual MenuDrill-inTest Mode Variant",
            "List Menu",
            "Visual Menu",
            "Drill-in",
            "Test Mode Variant"
          ]
        },
        {
          "type": "p",
          "text": "A popover presents information on whatever it points to on the canvas.Â Popovers are nonmodal dialogs that give the user contextual information and actions on canvas elements, and message users about errors and warnings. Clicking a popoverâs trigger element or node opens the popover, and either highlights relevant information or provides actions against the trigger element. All popover messages must be:"
        },
        {
          "type": "list",
          "items": [
            "Dynamically generated (based on builder file contents, with no static messages)",
            "Actionable (the user can take action against the element)"
          ]
        },
        {
          "type": "p",
          "text": "Any error that prevents a builder from being saved should appear in a toolbar popover. Error messages include header text on a red background; footers are optional. Any issue that prevents a builder from being activated or published, or prevents runtime, should appear in a toolbar popover. Warning popovers include header text on a gold background; footers are optional. This popover variant provides contextual editing for the name and description of a component in a panel header. This popover variant lets users build workflows by selecting nodes, connectors, and other workflow elements from its menu. The âaddâ icon rotates 45Â° to look like a âcloseâ icon when the popover is open, in addition to other animation changes.  Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. The list menu layout presents options visually. The tile menu layout lets users select from a limited number of options. For longer, nested option menus, add a drill-in and a search input. A back button lets users navigate branches of the original menu. In manual workflow testing, users evaluate paths for logic and flow. At each decision point, a popover offers options (for example, an audience group or an event). To present two options, use two buttons side by side. For three to four options, stack the option buttons. For five or more options, add a scroll bar. Next:Validation"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/validation",
      "title": "Validation - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "VariationsWarning IconWarning PopoverHiding Alerts on the CanvasInvalid ComponentsConfirmation ModalPopover/Icon Auto-DisplayError IconError PopoverError Alert Modal on Save or Secondary Action",
            "Warning Icon",
            "Warning Popover",
            "Hiding Alerts on the Canvas",
            "Invalid Components",
            "Confirmation Modal",
            "Popover/Icon Auto-Display",
            "Error Icon",
            "Error Popover",
            "Error Alert Modal on Save or Secondary Action"
          ]
        },
        {
          "type": "p",
          "text": "Validation identifies, and suggests solutions for, invalid components. Validation alerts users to invalid components and offers possible solutions."
        },
        {
          "type": "list",
          "items": [
            "If a builder allows saves with invalid components, the validation alert is called awarning.",
            "If a builder only allows saves using valid components, the validation alert is called anerror."
          ]
        },
        {
          "type": "p",
          "text": "Validation should be implemented as a system, with warnings or errors appearing in the header, on the canvas, and in any relevant panels. Make validations that require attention easily discoverable. Users should also be able to hide alerts on the canvas, to maintain a clear WYSIWYG view. Validation can take several forms:"
        },
        {
          "type": "list",
          "items": [
            "For builders that allow saving or secondary actions when invalid components exist, any warnings are highlighted in the header, canvas, and panels. A confirmation modal confirms a save or secondary action (such as publishing) despite warnings.",
            "For builders that donât allow saving or secondary actions when invalid components exist, errors are highlighted in the header, canvas, and panels. Errors must be fixed before saving or using a secondary action.",
            "If warnings and errors exist at the same time, both should appear in the header. Saving and secondary actions should be prohibited until all errors are fixed."
          ]
        },
        {
          "type": "p",
          "text": "Accessibility Note:When buildingvalidation, work with Engineering to specify and implement screen reader notifications. The Warning icon appears in the builder header to alert users to issues thatdonâtprevent saving or secondary actions. When a user clicks the Warning icon in the toolbar, a warning popover dropdown appears, and warning icons are highlighted on invalid components. When the user clicks the warning popover dropdown:"
        },
        {
          "type": "list",
          "items": [
            "If the associated component is not in view, pan until component is in view and is triggered to the warning-related select state.",
            "A property sheet opens in the right panel, highlighting any invalid fields."
          ]
        },
        {
          "type": "p",
          "text": "When the user selects the Hide on Canvas button:"
        },
        {
          "type": "list",
          "items": [
            "Warning icons on all components are hidden.",
            "The button name becomes Show on Canvas. Clicking this button is the equivalent of clicking the warning icon in the header; all warning icons reappear on the canvas."
          ]
        },
        {
          "type": "p",
          "text": "When the user hovers over an invalid component, it enters a state similar to the select state. When the user hovers or clicks a warning icon on an invalid component, a popover appears showing warning(s) for that component. When the user selects an invalid component, a property sheet appears, with invalid fields highlighted. When all issues are addressed, the componentâs select state updates; it is no longer invalid. When the user selects Save, a confirmation modal displays existing warnings. The user can review the warnings, or choose to save. When the user selects Review Warnings,the browser again displays the popover dropdown and canvas warning icons. When the user clicks Publish, a confirmation modal displays any existing warnings. The user can review the warnings, or choose to publish. After publishing, the popover dropdown and canvas warning icons remain. To address warnings for published or activated content, the content may need to be deactivated, then updated, saved and republished. When a user reopens the builder after exiting a previous session, any popover dropdowns and warning icons are displayed. The Error icon appears in the builder header to alert users to issues that do prevent saving or secondary actions. When a user clicks the Error icon in the toolbar, a warning popover dropdown appears, and error icons are highlighted on invalid components. Invalid components have a visually distinctive select/hover state. When the user selects Save, a confirmation modal displays existing errors. The user must fix all errors in order to save. When the user selects Activate, a confirmation modal displays existing errors. The user must fix all errors in order to activate. Next:Zoom Controls"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/builder/zoom",
      "title": "Zoom Controls - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "Usage", "Toggle Zoom Variant"]
        },
        {
          "type": "p",
          "text": "Zoom controls let users magnify or minimize their screen view. Use aButton Groupto create a zoom tool that allows users to magnify or minimize the screen view, zooming in or out on items viewed. The preferred mode isincremental zoom, a button group using the minus, plus, and expand/contract icons. Users can click to incrementally zoom out (-) or zoom in (+), and can toggle between zoom-to-fit (contract) and zoom-to-100% (expand) views of the canvas. Note:UseUtility icons: dash, expand_alt, contract_alt, add. When first opening a record, users view the canvas at 100%, with the first node in a workflow at the upper left of the canvas. Zooms in and out are based on the current center point of the canvas in view; users can pan to shift the center point. If a user clicks on a node or other canvas element, that element becomes the center point of any zooming action."
        },
        {
          "type": "list",
          "items": [
            "Place the zoom button group inside the canvas, ideally at the bottom right, as shown below.",
            "Set canvas zoom speed at 250ms per increment.",
            "When maximum or minimum zoom threshold is reached, disable the corresponding - or + button."
          ]
        },
        {
          "type": "p",
          "text": "Toggle zoom lets users switch between two views, 100%, and zoom-to-fit. If zoom functionality is controlled in the toolbar, use toggle zoom."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/color/color-accessibility",
      "title": "Color Accessibility - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Web accessibility empowers individuals with disabilities to fully engage with and contribute to the applications you develop. This crucial principle encompasses various aspects, including the intentional utilization of colors. Your color system should adhere to the principles of beingperceivable, operable, understandable, and robustfor all users. Color contrast compliance is required within our experience. Thecontrast ratiois the difference between colors that live on top of one another or next to one another, also known asadjacent colors. If the design elements within any design pattern contain information critical to understanding the interaction, it must pass color contrast. Non-objects (ex. text on backgrounds): Any color that makes a 50 point difference or greater is a 4.5:1 or greater contrast ratio.Objects (ex. buttons): Any color that makes a 40 point difference or greater is a 3:1 or greater contrast ratio. All four objects in this example pass color contrast, including the default informational text (1), the informational non-text (2), the selected informational text (3), and the decorative non-text (4) objects. Ensuring colors meet WCAG color contrast rules can be a tricky, manual process. Our system provides clear and obvious guidance on which colors work together, and which ones donât. Built-in contrast ratio scores solve for those decisions. When designing any element of the UI there are questions we need to always be asking ourselves. Do you know what the difference betweendecorativeandfunctionalUI is? Is the UI element or elements of a design pattern decorative or functional? The answer to these questions determines the color contrast requirements of the UI element or elements being created. In this example, the badge provides necessary information for the user to understand in order to advance within an experience. These qualities make it functional. However, the UI elements that compose a badge may be functional (the text) or decorative (such as the shape or background.) This image shows a decorative background (1), a decorative badge (2), and functional text (3). For the neutral button in this example, the image shows a decorative background (4), a functional background within the visible container (5), a functional visible boundary (6), and functional text (7). Note that decisions can be more nuanced and should be informed by our color contrast guidelines. (Review the Color Contrast Rules in the section below.) Knowing whether a UI element is decorative or functional is crucial for meeting color contrast guidelines. Test your ability to design with accessibility compliance in mind by taking thisHow to Design with Color Contrast quiz."
        },
        {
          "type": "list",
          "items": [
            "If it serves a function, make it contrast-compliant.",
            "Text always requires contrast.",
            "To convey meaning, donât solely rely on color.",
            "Intended visibility must pass contrast.",
            "Use secondary indicators."
          ]
        },
        {
          "type": "p",
          "text": "In our numerical color system, itâs simple to remember the âmagic numbersâ: Any color that makes a 50 point difference or greater is 4.5:1 or greater contrast ratio and meets accessibility compliance.Any color that makes a 40 point difference or greater is 3:1 or greater contrast ratio and meets accessibility compliance. Non-bold text that is less than 24px (1.5rem, 18pt) must meet 4.5:1 contrastBold text that is less than 19px (~1.2rem, 14pt) must meet 4.5:1 contrast Text that is larger than 24px is considered âlargeâ and can be as low as 3:1 contrastIconography (unless decorative)Objects that are functional and can be interacted with. This rule also includes any visible boundary. We declare elements in our experience as either decorative or functional. Decorative elements arenât required to pass color contrast accessibility requirements while functional items do. Decorativerefers to a visual in the UI that doesnât convey information or possess functionality (ex. an illustration or a redundant object).Functionaldescribes a visual in the UI that is required for interaction, conveys information, or aids in error prevention (ex. a button.) In this example, the decorative image (1) is an illustration being used for brand expression. It doesnât include information or functionality that would disrupt a user from taking action. Because of that it isnât required to pass color contrast. However, the functional button text and background (2) are required to be color contrast compliant. This is because they can be interacted with and convey important information. Keep in mind, however, that just because something doesn't \"need\" to pass color contrast doesn't mean it shouldn't. There are always opportunities to make a UI more accessible, even if there aren't rules that say it's needed. Just because there's a bare minimum doesn't mean we should strive for that. Designing accessibly serves all users better. What is the difference between when something is redundant and something is informational? A visual element becomes redundant when paired with a functional element. In this example, the displayed descriptive text for percentage on the progress bar makes the graphic of progress (in blue and gray) redundant. Havingcontextual awarenessis important. Just because something is considered redundant here, doesnât mean it may not be used elsewhere as an informational or functional element. An element may be compliant in one part of an experience but that doesnât automatically mean that itâs compliant elsewhere. Understanding this principle is key to practicing contextual awareness while designing. In this example, because the first icon (1) isnât paired with descriptive text itâs required to be 3:1 contrast ratio or greater. However, because the second icon (2) is paired with descriptive text, technically speaking, it isnât required to pass 3:1. In our system, to alleviate deltas, all of our icons meet a 3:1 contrast ratio or greater. Color contrast guidelines for state changes and other status communication are often hard to meet for complex interactions because of the number of colors that must contrast with each other. This requirement only applies when color is the only means of conveying information. Common ways to avoid this requirement by providing a secondary information source are: Adding a state iconAdding a text equivalent to visualizationsAdding a texture change to color blocks in chartsThickness changes (such as borders)Modification of shape (square versus circle, line versus dash) These examples show that a state icon can act as a secondary information source that reduces sole reliance on color. Although we commonly use white text on backgrounds, sometimes background colors are too light for white text or objects. In those cases, consider using dark text for added emphasis and to meet compliance. To read more about text on backgrounds, visitGeneral Guidelines for Text on Backgrounds. If thereâs a perceivable target boundary or click target, it must pass 3:1+ contrast ratio. This rule applies to gray borders and backgrounds. The w3C recommendsmaking the target area visibleto assist users with cognitive disabilities, and their recommendation is our rule. We saw the recommendation as an opportunity to evaluate our own patterns. In that investigation we recognized value in creating a rule for all interactive visual boundaries to meet a 3:1 or greater color contrast. In this example, the border in the first buttonâs target boundary uses neutral-60 and passes at 3:1. The second button doesnât pass color contrast."
        },
        {
          "type": "list",
          "items": [
            "Creating Color Contrast Guidelines to Meet WCAG 2.1 and Beyond",
            "Do You Know How to Design with Color Contrast? Quiz Yourself to Find Out",
            "Are My Colours Accessible",
            "Introducing the Salesforce Color System",
            "The A11Y Project",
            "Web Accessibility Initiative: Making the Web Accessible",
            "Web Accessibility in Mind",
            "Salesforce Design Accessibility Topics",
            "Salesforce Disability Topics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/color/color-palettes",
      "title": "Color Palettes - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Salesforce Color Palettes are essential for establishing a consistent visual language and user experience. By adhering to these palettes, designers and developers can ensure harmonious color usage, evoke appropriate emotions and reinforce brand recognition. Additionally, the palettes come equipped with accessibility guidelines, guaranteeing that chosen colors meet contrast requirements and are accessible to all users. Itâs important to understand where Salesforce color decisions come from, so you can better understand how to use them. Our guidelines provide detailed direction and cover most use cases. We have a large palette thatâs broken down into sub-palettes, and those sub-palettes are associated with color patterns in our UI. For example, we have a messaging palette where green is used to convey success, orange for warning, and red for error. We also have a sub-palette for standard object and action icons that allow for shared rules, provided by the color associations in our messaging palette. This icon palette is mostly driven by color contrast compliance, and within it are sub-palettes that relate to how the icon is being used. Each sub-palette is constructed with intention, as all color decisions should be. Our primary palette is composed of colors from the blue in our logo, our action colors, and our messaging color patterns. The Salesforce Primary Palette is comprised of red (1), orange (2), green (3), blue (4), and Cloud blue (5) color patterns. These colors are separated out from our larger palette because they carry important user associations across our experiences. Using them as our primary palette strengthens the impact of these visual patterns. To see all the color values available, seeGlobal Color Styling Hooks. Our secondary palette is made of colors that complement our primary color patterns. This color group is available for varietyâs sake. Use these colors to add visual expression. The Salesforce Secondary Palette is composed of hot orange (1), yellow (2), teal (3), indigo (4), purple (5), violet (6), and pink (7) color patterns. Colors from this secondary palette can be picked with confidence because they complement key visual patterns (like those assigned within the primary palette). Salesforce has guidelines for what purpose each neutral (or gray) tint serves and how to use them. These guidelines include when to use each, how to strike a balance, and general direction on these neutrals. Use Neutral-10 (1) and Neutral-30 (2) as text colors, and use Neutral-50 (4) as placeholder text.Neutral-40 (3) and Neutral-60 (5) are specific to a single use-case as background for standard object icons.Use Neutral-50 (4) for visible boundaries of functional UI patterns, like our neutral border button, and for utility icons.Use Neutral-80 (6) as a decorative UI for dividing lines and borders around non-functional UI, and for disabled states.The primary background color is Neutral-100 or white (8). Neutral-95 (7) is also a background color, although it isn't used nearly as much as white. There are multiple palettes for iconography.Our iconography familiesinclude Object(StandardandCustom,)Action,Utility,andDoctype. Per accessibility contrast guidelines, thereâs a separation between functional items that are interactive or informational and decorative items that are non-essential to navigating the experience. Functional items must pass a 3:1 color contrast ratio, while decorative items arenât required to pass contrast guidelines. For more information, see ourIconography Design Guidelines. This is ourStandard Object Iconpalette. These colors meet compliance for color contrast. This palette combines colors from our Primary and Secondary palettes. Use this color set with intent. Ideally, the colors used in any experience connect to current visual patterns for brand, core actions, and messaging. Keep your color experience simple and straightforward. Use only one color for icons across your experience. If you need variety, expand to other monochromatic colors within that hue. The iconâs image conveys its meaning, so using a different color with every icon is distracting and creates unintended color associations. Choose one color to be quickly identifiable as an icon across your whole experience, so users can find them easily in a full page. Utility Iconsare simple, single-color glyphs that identify labels and actions across all user devices. They can be paired with text or used alone, have no background shape, and can be any color as long as they follow color-contrast accessibility guidelines. Doctype Iconsare functional; they convey meaning beyond being decorative. These icons inform the user of what file format they represent, to improve scan-ability and navigation within an experience. The palette diverges from other iconography palettes because these icons have different styling requirements. Doctype icons are composed of functional and decorative items. In the example image, you can see that the background (1), text (2), and icon (3) colors are functional, while the folds (4) and shadows (5) are decorative. The messaging color family displays visual cues across a spectrum, from positive to negative. These colors are traditionally used on solid backgrounds, though they can also be used for highlighting content areas. Messaging is a subset color family used for messaging components, includingBadges,Toast,andPopovers. These are the specific areas of use and their color associations.Successâ GreenWarningâ OrangeErrorâ RedInformationalâ Light grayOfflineâ Dark gray Hover states occur when a user momentarily pauses with a cursor over a possible interaction. A majority of our hover states are 10 points or darker than the default state. We donât support using different color hues for hover states. Hover states should always be10 points or darker on light UIthan the default color.Hover states should always be10 points or lighter on dark UIthan the default color. In this example, the cursor also changes in the desktop space. Otherwise, this interaction looks like itâs only color. The default background button color uses Blue-50, therefore in this example, the hover background color is 10 points darker = Blue-40. Focus states occur when a user highlights an object using a keyboard or voice. We use one global style for focus states: a blue outline focus indicator surrounding the focused box, visible in the example image. This âhaloâ is a visual indication of focus, also known as outline, provided by custom CSS or the user-agent default that outlines a component. In this example the blue outline surrounding the button is the halo, the indication of a focus state. Selected states occur when a user makes a deliberate interaction with an object to make a selection. We support single and multiselect components. The example image shows components with various styles of selected states. Blue-50 is a common color we use for select states. Disabled states occur to inform a user that the object canât be interacted with. We can use certain colors to reduce possible user confusion of what can or canât be interacted with, but disabled states still need to pass accessibility contrast ratio guidelines. Neutral-80 is a common color we use for disabled states. More information can be found in the Neutrals Sub-Palette section."
        },
        {
          "type": "list",
          "items": [
            "Creating Color Contrast Guidelines to Meet WCAG 2.1 and Beyond",
            "Do You Know How to Design with Color Contrast? Quiz Yourself to Find Out",
            "Are My Colours Accessible",
            "Introducing the Salesforce Color System",
            "The A11Y Project",
            "Web Accessibility Initiative: Making the Web Accessible",
            "Web Accessibility in Mind",
            "Salesforce Design Accessibility Topics",
            "Salesforce Disability Topics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/color/our-color-system",
      "title": "Our Color System - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Salesforce color system unites the variety of solutions necessary for scale. Using a single-source color system provides opportunities to automate decisions and evolve them with flexibility. Color solutions for accessibility are built into our color system. Each colorâs tones are given a value that ranges from 0 through 100. In this color system, 100 points (points) is white and 0 points is black. The full spectrum of the color, ranging from 0 to 100, makes up acolor lane. Each color in this system, and within each lane, is assigned a number, such as the 15 in Cloud Blue-15. Color stepsare the 5- to 10-point increments that make up a color lane. They help define acolor patternthat can be replicated across hues. Colors share horizontal values across hues, using the same system vertically within each monochromatic palette. This way, rules can be replicated across all color lanes in our system using color steps. Applying this approach eliminates any need to use a contrast ratio checker tool. Themagic numbersin this system are 50 points and 40 points. If two colors are 50 points away from one another, they meet 4.5:1+ contrast ratio compliance. If theyâre 40 points away from one another, they meet 3:1+ compliance. This method also works across alternate hues. For example, button backgrounds are required to meet a 3:1 contrast ratio or higher on the background the container sits on top of, which is a 40 points difference. In this example, the button background is 50 points, and the hover state is 40 points, so both values are compliant on the 95 point gray page background. And we can use this 10 point step, from 50 to 40 points, across all color lanes for hover states. Note:The term \"magic numbers\" as referenced in the these Color Guidelines derives its origins from the U.S. Web Design System (USWDS). This concept is employed to describe the color steps and patterns integrated within the Salesforce Color System. The USWDS is acknowledged for coining this term, which has been adopted and further developed within the context of the SLDS Guidelines. It signifies a structured approach to color progression and harmony, contributing to the visual cohesiveness and usability of Salesforce's design ecosystem. To learn more about how to apply the magic numbers, visitColor Accessibility. Additionally, to find all the tools you need to work with and learn about Salesforce Lightning Design System, visit ourTools Overviewpage. Colors that touch or interact with each other have important relationships, including adjacent colors, visual states, and transparencies. Keep these relationships in mind to create a cohesive color experience. Adjacent colors influence perceivable contrast between two visual elements. They may indicate a border, or delineate an input or objects next to one another and their background from the rest of the page. In this example the iconâs orange background is the adjacent color to the icon symbol. And the white background color is the adjacent color to the iconâs orange color. These adjacent colors define thevisual boundary, which defines the edges of the input or control. Visual boundaries convey the componentâs identity and indicate the touch or click target area for interacting with it. State colors give users visual feedback for the actions they take, like a button getting darker to indicate hovering. As shown in the example image, the main types of visual states are:Defaultâ What is in existence before an interaction. (1)Hoverâ A visual modification to the default state that indicates to the user the object is interactive. (2)Activeâ Visual feedback associated with user interaction.Focusâ Visually identifying feedback that an object has been highlighted using a keyboard or voice. (3)Disabledâ Any object that canât be interacted with. (4)Selectedâ Presents feedback to the user that an object has been picked. (5) Color contrast guidelines for state changes are often hard to meet for complex interactions because of the number of colors that must contrast with each other. To meet guidelines easier, supplement color choices with other visual indicators, like labels and alt text. Sometimes, state changes can be indicated by other means, including cursor changes. For more information about accessible visual labeling, seeAccessible Web Design Guidelines. Only use transparencies for decorative UI, never for functional UI. With transparencies, the numbers system no longer applies, so you can't quickly determine if something is color contrast compliant. To keep your experience accessible to all, use transparency sparingly, and manually check contrast ratios."
        },
        {
          "type": "list",
          "items": [
            "Creating Color Contrast Guidelines to Meet WCAG 2.1 and Beyond",
            "Do You Know How to Design with Color Contrast? Quiz Yourself to Find Out",
            "Are My Colours Accessible",
            "Introducing the Salesforce Color System",
            "The A11Y Project",
            "Web Accessibility Initiative: Making the Web Accessible",
            "Web Accessibility in Mind",
            "Salesforce Design Accessibility Topics",
            "Salesforce Disability Topics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/color/overview",
      "title": "Color Overview - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Color serves as a powerful tool that is able to establish hierarchy, enhance branding, and foster cohesion. It imbues visual elements with profound significance, empowering users to swiftly comprehend information and navigate with intuitive ease. In the world of visual design, color conveys emotion, focuses the viewerâs attention, and guides their actions. Salesforce has an easy to use, yet sophisticated color system that helps those using it to find consistency, continuity, and meaning with their color selections. This system also simplifies meeting color contrast accessibility requirements in an intuitive way. When designing with color, itâs important to keep four key principles in mind: intentionality, hierarchy, branding, and accessibility. Good color choice is intentional. Color conveys both conscious and unconscious meaning to users, so pick colors with purpose and build color associations for users consuming the experience. For example, red is sometimes associated with error messages, but using red in the User Interface (UI) for an âAcceptâ button in some cultures causes hesitation or confusion. Good color choice is also intentionally cohesive. Choose colors as part of the greater whole, so that no one decision operates alone. This is called color continuity, and itâs the backbone of how users associate color within an experience. If you maintain continuity, your use of color carries itself within and across any experience. For example, we use blue for our buttons and links so our users associate the color with interactive elements. In the Salesforce experience, that color drives action. These decisions become learned behaviors within our color system, and they support conscious and subconscious navigation. Ideally, users can understand meaning just by glancing at a UI object. Good color choice indicates hierarchy at a glance. Use color contrast to make certain elements stand out. The higher an objectâs contrast, the more attention it draws. Levels of contrast construct hierarchy within an experience. Colors guide the user to key visual elements, but a screen with too many competing colors creates visual noise. Donât over-use color where it isn't necessary. We want users to focus on whatâs important to most efficiently achieve their goals. For example, in this simplified illustration of the Salesforce UI, the blue used for buttons and links carries a stronger contrast to a majority of the colors in our experience to help users locate an action. Within a Light UI itâs common to use lighter neutral colors for backgrounds. In this example the background is primarily white and gray. These color choices enable the blue to stand out more, to elevate users' visual navigation. Good color choice defines and emphasizes your brand. Colors in a well-branded experience come from or are influenced by a brandâs logo and other colors that define a brandâs look and feel. Choose additional colors that complement these colors or support use cases across an experience.The Salesforce branduses one color within its logo, Cloud Blue, while some other brands are composed of multiple colors. There are varying levels of brand representation. Whether subtle or loud, the colors communicate a feeling to the user and cement the feeling into an association. For example, vibrant and bright colors convey energy and excitement, while subdued and dark colors convey a cool, sleek aesthetic. Color choices are crucial decisions that influence how users experience a brand. Good color choice considers accessibility at the beginning of the design phase. Salesforce color palettes adhere to accessibility guidelines and design patterns that meet those requirements automatically. Our palettes operate as a whole, instead of a single solution. Itâs a color system that solves for color solutions beyond our Salesforce brands and can support our customersâ own branding. The goal is to simplify color, so people have more time to focus on what they do best. Our accessible palettes take the guesswork out of accessible color design decisions. To learn more about our accessibility guidelines, see theSalesforce Lightning Design System Accessibilityoverview or visit theColor Accessibilitysection. Our system uses theHCL(Hue, Chroma, Lightness) color space, which is defined by how humans perceive color. We used this model to identify complementary hues based on our Salesforce blue, and used a color generation tool to create our palette. The model helped to connect the entire color palette to our brand. Our approach comes packaged with these benefits:Guaranteed accessibilityLong-term model that doesnât require reinventing the wheelSingle source for brand and product palettes The use of the HCL color model and the accompanying benefits it brings empowers Salesforce customers with visually appealing, accessible, and consistent design experiences. This approach reflects Salesforce's commitment to delivering high-quality products and services that cater to the diverse needs and preferences of our customer base. For more information on how Salesforce created this color system, seeIntroducing the Salesforce Color System."
        },
        {
          "type": "list",
          "items": [
            "Creating Color Contrast Guidelines to Meet WCAG 2.1 and Beyond",
            "Do You Know How to Design with Color Contrast? Quiz Yourself to Find Out",
            "Are My Colours Accessible",
            "Introducing the Salesforce Color System",
            "The A11Y Project",
            "Web Accessibility Initiative: Making the Web Accessible",
            "Web Accessibility in Mind",
            "Salesforce Design Accessibility Topics",
            "Salesforce Disability Topics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/accessibility-and-inclusion",
      "title": "Accessibility and Inclusion - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Emoji", "Slang", "Languages Other Than English"]
        },
        {
          "type": "p",
          "text": "Make sure your text is inclusive-both in the words you choose but also for all customers, such as those who use screen readers. Use emoji strategically as they can mean different things to different groups. They can also render on devices in different ways depending on the manufacturer. Screen readers By default screen readers read the emoji alt text option in line with other text, so be careful about which emoji to use and where theyâre placed. Placing an emoji at the beginning of a sentence will result in a person who is blind or has low vision having to wait longer to hear the core message content, which can be disruptive and confusing. Additionally, if there is more than one name (aka alias) for an emoji, the screen reader will only read the first alt text option. For example, the laughing with tears emojiâðâmay have multiple aliases, like âjoyâ, âcry-laughâ or âlaughterâ, either because a person gave the emoji a custom name, or because there are different emoji-naming systems in use worldwide. The name read aloud by a screen reader may depend on a variety of factors. Hand gesture emoji Bots using hand gestures may seem like the bot is trying too much to be human, which can cause feelings of unease towards a bot. We advise against using emoji with hand gestures or human body parts to avoid the uncanny valley. Recommendations"
        },
        {
          "type": "list",
          "items": [
            "Use emoji sparingly to emphasize enthusiasm or to call the userâs attention.",
            "Place emoji at the end of phrases rather than the beginning, and before punctuation if used.",
            "Use one emoji max per bot message.",
            "Only use emoji in every other bot message (max).",
            "Avoid emoji with hand gestures or human body parts."
          ]
        },
        {
          "type": "p",
          "text": "Have fun with conversation flow and diction, but make sure not to appropriate. While it's important to demonstrate enthusiasm with building your bot and to ensure it connects with users universally, it's equally important to avoid using colloquialisms that are heavily associated with or come from a particular region or social group. Keep local regulations in mind. For example, companies based in different parts of Canada handle language preference in different ways."
        },
        {
          "type": "list",
          "items": [
            "A Quebec-based organization will follow Quebec language laws and lead with French but then offer English: âComment puis-je vous aider? For English, press 1â;",
            "Whereas outside of Quebec, the bot will ask for the preferred language first."
          ]
        },
        {
          "type": "p",
          "text": "Some channels automatically handle this for you. For example, using an IP address to identify location, and then delivering a language-specific page assigned to that location."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/best-practices",
      "title": "Best Practices - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Bot Introduction",
            "Main Menu",
            "Acknowledgements",
            "Apologies",
            "Bot Response Delays",
            "Menu Options",
            "Conversation Repair"
          ]
        },
        {
          "type": "p",
          "text": "Think about best practices when designing a conversational experience that will be natural and helpful for users. Be transparent The first thing a bot should do is warmly introduce itself to the user and let them know that it's a bot. Starting the conversation with this disclosure establishes trust with the user and sets the proper expectations from the beginning. Note that informing the user that they're speaking with a bot is a requirement outlined in theSalesforce Acceptable Use and External-Facing Services Policy. Be helpful State what your bot can help with, and use menus and guiding questions to direct the user. Name your bot Giving your bot a name is a great way to personalize it, but as far as possible avoid using human names such as Erika or Ada to make it clear that the bot is non-human. The exception to this is if a human name is required for consistency of branding,voice and tone, or personality - in this instance the human name should be accompanied by further clarification. To optimize for scalability, bot names should be general, and not restricted to any one channel. It's preferable to avoid the word \"chat\" in the name to minimize channel-specificity. Using the word \"bot\" in the name is acceptable because it can refer to any channel: a voicebot, a Slackbot, an SMS-bot, or a chatbot. Bot names and introductions should avoid any terms that sound too much like a human job/position. It's also advisable to avoid references that may seem human in your bot loading language, for example Agent Offline or Live Chat. Bot avatar Use a product logo or robot graphic for the bot avatar to keep things transparentânot a picture of a person. Greetings New Users Returning Users If your customer wants to start the conversation over (to perform another task), the welcome should be skipped and the dialog picked to start over should make sense on its own. Always separate the Main Menu options from the Greetings in the Welcome dialog. This ensures that any users returning to the main menu from elsewhere in a bot conversation don't hear the Welcome greetings repeated."
        },
        {
          "type": "list",
          "items": [
            "Close the loop. If the bot asks a customer to do something in the chat and they respond, acknowledge that their input was received.",
            "Switch up acknowledgements to avoid being overly repetitive.",
            "Give the user a path to move forward if the bot can no longer help. Provide a means for creating a case, contacting a human, or engaging through another channel."
          ]
        },
        {
          "type": "p",
          "text": "The bot copy should be goal-oriented, so apologizing will distract. It also takes on culpability that we legally should not. Instead of apologizing, use terms such as: âunfortunatelyâ, âsoâ, âwellâ, âit seemsâ, âit turns outâ. The bot should leave a long enough pause between messages to allow the user time to read and process what it has said. Slowing down the bot responses makes the conversational turn-taking more natural and gives more cadence to the conversation. A poor bot experience sends 4-5 messages at once with no time in between. The user then has to scroll up to read and catch up. A good bot experience uses a bot response delay and ellipses to give the user time to read each utterance. The Einstein Bot Builder incorporates this feature in the bot Overview page, with the default bot response delay set to 1.2 seconds. We recommend extending this if your bot conveys several large chunks of information. If youâre asking the customer to do somethingâsuch as perform an action or select a menu optionâideally start it with a verb. This encourages the customer to take that action. (Nouns can however be used for topic menus, such as in Knowledge Search.)"
        },
        {
          "type": "list",
          "items": [
            "We recommend presenting no more than 4 actions/menu options at once. This is best practice in terms of cognitive load and what is likely to fit on a phone screen.",
            "If you have many actions that need to be grouped, you can ask a question to guide the customer before delivering actions. For example, you may have two different experiences for users who are chatting with a bot about health-related reasons and non-health related reasons. Instead of the bot asking âOK, what would you like to learn about?â and showing all the menu items at once, the bot can ask âBefore we get started, may I ask, are you chatting with me for a health-related reason?â and then show menu items based on their answer.",
            "Aim to use unique verbs for different menu options to optimize recognition."
          ]
        },
        {
          "type": "list",
          "items": [
            "SendReminders",
            "InviteTeammates",
            "CheckStatus",
            "ResetPassword",
            "ManageData",
            ""
          ]
        },
        {
          "type": "list",
          "items": [
            "Reminder Setup",
            "Teammates to Add",
            "Status Info",
            "Office Hours",
            "Events this Week",
            "Notes"
          ]
        },
        {
          "type": "p",
          "text": "It's inevitable that your bot will occasionally encounter difficulties, such as misunderstanding a user's intent, or not understanding their utterance at all. The key is to design for these types of situations and teach your bot how to move forward by building error handling into your dialogs."
        },
        {
          "type": "list",
          "items": [
            "Ask follow-up questions, expand on what users say, give bots options for rephrasing.",
            "Ensure each message flows into the next. If your bot utilizes NLP, this can be especially tough because the conversation can jump anywhere. Try different combinations to make sure your conversational flow makes sense.",
            "Your conversation repair messages should be designed to handle the most common failures and provide a graceful next action.",
            "Test your bot and make sure that it is conversationally prepared to handle most situations."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/bot-personality",
      "title": "Bot Personality - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Target Audience",
            "Gender Identity",
            "Brand Voice and Tone"
          ]
        },
        {
          "type": "p",
          "text": "Bots represent your company in conversations with users-they're an extension of your brand and should reflect your brand voice and tone. If you don't define your bot's personality, your users will! Customers expect more from bots than a generic or neutral experience similar to that of filling out an online form or survey. Because bots rely on conversation to carry out a process or action to completion and may require a customer to input sensitive or personal information to be effective, bots must provide a similar level of empathetic support as a human agent would. Bots are also, in essence, another form of representation of a customerâs brand. Ideally bots should have a personality to better engage and build a trusting relationship with users. While conversational tasks and style might vary from industry to industry, at Salesforce we still want our conversational bots to sound like they're part of the same Salesforce family. Let's look at some examples."
        },
        {
          "type": "list",
          "items": [
            "Approachable",
            "Bold/Spunky",
            "Empathetic",
            "Encouraging",
            "Formal",
            "Informal"
          ]
        },
        {
          "type": "list",
          "items": [
            "Knowledgeable",
            "Professional",
            "Reserved",
            "Respectful",
            "Welcoming"
          ]
        },
        {
          "type": "p",
          "text": "Confirmations Apologies The target audience for your bot will dictate its level of formality, how you think about different language characteristics, and certain requirements for bot functionality. Think about your industry and audience need when considering your bot language. For example, a bot in the healthcare space will need to follow certain guidelines such as HIPAA when handling sensitive customer information, and a serious tone may be useful to maintain trust that a customer can hand that sort of private information to a bot. Likewise, a bot in the government space will sound different to a bot delivering a retail experience. Even within that experience, language might change relative to where a user is in their journey."
        },
        {
          "type": "list",
          "items": [
            "If the user has just completed a task, we should acknowledge that with language that is celebratory.",
            "If we are walking the user through a new feature, we would want our response to be encouraging.",
            "If the bot is attempting to solve an issue, we would want the tone to be constructive."
          ]
        },
        {
          "type": "p",
          "text": "Write your copy based on your target end users Think about different language, voice, and tone used in workplace-genre television: The Office, Grey's Anatomy, Parks and Recreation, and Superstore are all shows about the workplace, but they each use different language and tone due to their contexts. Consider the key purpose of your bot:"
        },
        {
          "type": "list",
          "items": [
            "Enhancing a workflow",
            "Healthcare information",
            "Retail consumer service flow",
            "FAQs / general information"
          ]
        },
        {
          "type": "p",
          "text": "Here are a few ways to keep the customer first:"
        },
        {
          "type": "list",
          "items": [
            "If you know their name, include it in a greeting.",
            "Use images in a practical way, such as to break up text and ensure confirmation.For example, if a customer is asking about a product, show them an image to ensure the bot has it correct.Images can also show data or enhance an emotional response to users.",
            "For example, if a customer is asking about a product, show them an image to ensure the bot has it correct.",
            "Images can also show data or enhance an emotional response to users.",
            "Optimize for verbs and actions that are most relevant for your end user (e.g. add a note, update an opportunity for Sales; create a campaign for Marketing, etc.)"
          ]
        },
        {
          "type": "p",
          "text": "We advise against involving gender or gender identity as an intentional trait of bot personalities because it can reinforce stereotypes and norms around what kinds of communication is gendered. It also doesn't often manifest in a meaningful way in syntax and flow. While your bot should have a brand of its own, as a facet of your company and the products it puts out, it should also closely follow your company's overarching brand identity. There can be some deviations to make the bot more personable or casual, but overall, it shouldn't give your customer whiplash to navigate from your site experience to your service desk. For example, with many different teams within Salesforce working on bots there are slight variations from bot to bot, but we all aim to adhere to the same set of Salesforce brand voice and tone guidelines. Here are a few of those to illustrate:"
        },
        {
          "type": "list",
          "items": [
            "Honest:Trust is our number one value.Bots often get a bad rap, but by setting expectations and communicating transparency, we can earn trust.",
            "Bots often get a bad rap, but by setting expectations and communicating transparency, we can earn trust.",
            "Clear:Our writing is concise, digestible, and relevantWe avoid unhelpful detail and get right to the point.",
            "We avoid unhelpful detail and get right to the point.",
            "Inclusive:A safe space that communicates you belong here.Conversation is the beginning of any relationship. Here at Salesforce, we want quality relationships with all of our customers.",
            "Conversation is the beginning of any relationship. Here at Salesforce, we want quality relationships with all of our customers."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/language-and-style",
      "title": "Language and Style - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "5 Must Knows",
            "Conciseness",
            "Consistency",
            "Discourse Markers",
            "Pronouns"
          ]
        },
        {
          "type": "p",
          "text": "Be intentional about your conversational style and how it manifests in language. 1. Start with turn-takingConversation is all about turn-taking. 2. Check your language biasBe open-minded about conversational language. 3. Pick a conversational styleUsers expect a conversational experience to express style or have a persona. Pick the characteristics of your voice and tone and stay consistent. 4. Be action drivenEvery dialog should be motivated by the action weâre facilitating for the user. 5. Have a reason for all things languageEvery punctuation mark, word, phrase, and character signals meaning, gives users context, and builds the relationship. Just like conversations in real life, conversational copy should be more informal and natural than written text. For example:"
        },
        {
          "type": "list",
          "items": [
            "Use informal words like âgiveâ instead of âprovideâ.",
            "Usediscourse markersand transitions such as âOKâ, âGot itâ, âAlrightâ, and switch them up so you're not using the same one each time.",
            "Avoid jargon or too many acronyms.If using acronyms, provide the unabbreviated form of the acronym on the first mention.",
            "If using acronyms, provide the unabbreviated form of the acronym on the first mention.",
            "If youâre asking multiple questions in a row (up to 4), donât start them all the same way. The best way to test this is to read the questions out loud and see if it sounds too repetitive.e.g. Whatâs your first name? And your last name? What about your email? Preferred phone number?",
            "e.g. Whatâs your first name? And your last name? What about your email? Preferred phone number?"
          ]
        },
        {
          "type": "p",
          "text": "Keep your bot messages simple and concise so that the core message is conveyed quickly and effectively. With written language it is also recommended for the main point to be at the beginning as people tend to read the first sentence and skim the rest (compared to voicebots where the main point should be at the end)."
        },
        {
          "type": "list",
          "items": [
            "Aim for a maximum of two sentences per message and keep theâOne Breath Testâin mind. If your message starts looking like a paragraph in the UI, itâs too long; break the text up into separate turns.",
            "If asking more than 5 questions to a customer, use a form instead.",
            "If your bot/app is authenticated, you may be able to access basic user information and use conditional logic to skip questions. Write your conversational copy to handle both flows."
          ]
        },
        {
          "type": "p",
          "text": "Consistency of your bot's language will ensure a smoother, more natural interaction. For example:"
        },
        {
          "type": "list",
          "items": [
            "Consistent punctuation in bot messages and menu options. We recommend choosing one style and sticking to it.Title case (e.g. Update Email Address) or sentence case (e.g. Update email address) for your menu options.Use of exclamation points oremoji.",
            "Title case (e.g. Update Email Address) or sentence case (e.g. Update email address) for your menu options.",
            "Use of exclamation points oremoji.",
            "Use of standard phrases, such as âlog inâ and âsign upâ vs. âloginâ and âsignupâ, âclickâ vs. âselectâWe recommend use of âselectâ rather than âclickâ as it is channel/UI agnostic.",
            "We recommend use of âselectâ rather than âclickâ as it is channel/UI agnostic.",
            "If your bot messages contain URLs, decide how to display these and be consistent, e.g. short links vs. embedded text.We recommend embedded text for URLs.For accessibility, use the title of the page as the linked text to help screen readers scan for links, e.g. \"Trailhead Help\" rather than \"click here\".",
            "We recommend embedded text for URLs.",
            "For accessibility, use the title of the page as the linked text to help screen readers scan for links, e.g. \"Trailhead Help\" rather than \"click here\".",
            "Ensure yourvoice and toneis consistent throughout."
          ]
        },
        {
          "type": "p",
          "text": "Discourse markers are words or phrases such as \"OK\", âGot itâ, âGreatâ, \"Alright\". These âfiller wordsâ help to create a natural flow to a conversation and to confirm, acknowledge, react to, or guide a user through steps in a conversation. You can also think of them as conjunctions; for example, using âandâ means you're building upon an idea; whereas, âyetâ means you're comparing two things. Building discourse markers into your bot's dialogs can make the conversation feel less rigid, by providing smooth transitions between different sentences and themes. We recommend a mix of different discourse markers to avoid monotony, and using them strategically to avoid crowding the core message. We also never use discourse markers that signify cognitive processing-such as \"hmm\", \"uh\", \"umm\"-which machines are incapable of. This helps us to avoid theUncanny Valley. Here are a few more examples:"
        },
        {
          "type": "list",
          "items": [
            "âohâ = Signifies receipt/realization of info",
            "âsoâ = Shows the result of a prior action",
            "âwellâ = Diverges from the options provided in a previous question"
          ]
        },
        {
          "type": "p",
          "text": "We generally default to the bot referring to itself as \"I\", as this is more natural in conversation. The focus is then on who/what the user is talking toâit's a singular bot and not the company or team behind the scenes. However, there are certain cases where using \"we\" may be more applicable, such as if the bot is:"
        },
        {
          "type": "list",
          "items": [
            "Referring to a factual piece of information decided by the institution as a whole (that the bot represents), e.g. \"To prepare yourself for the exam, we recommend the following...\", or \"If the email doesn't show as bounced or delivered, it's likely we were unable to send the email.\"",
            "Referring to a team that will address an issue the user has flagged, but that the bot can't resolve on its own, e.g. \"We'll look into the issue and get back to you within 5 working days\" (or even better \"The support team will look into the issue and get back to you within 5 working days.\")",
            "Accomplishing a task with the user, e.g. \"We can configure that in the next few steps\" or \"Let's get started\""
          ]
        },
        {
          "type": "p",
          "text": "Ultimately, the bot shouldnât need to refer to itself too much and instead puts more focus on the user, such as \"What would you like to do?\"."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/overview",
      "title": "Conversation Design - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "What Is Conversation Design?",
            "Who Are These Guidelines For?",
            "How to Use These Guidelines",
            "Key Elements Of a Bot Conversation"
          ]
        },
        {
          "type": "p",
          "text": "The Salesforce Conversation Design Guidelines reflect the standardized approach in designing inclusive conversational experiences across the Salesforce ecosystem. If we want Salesforce to be asystem of engagement,we have tostart with user trust.We build trust by designinguser-centered, natural conversations. Demand for botsâespecially customer service chatbotsâhas surged in recent years, both due to an increased need for asynchronous conversational experiences to handle customer needs at any time of day and because of increased digitization requiring workflow changes. Conversation Design (CXD for short) is a field of user experience design focused on the design of interactions for conversational interfaces, including chatbots, voicebots and IVRs (Interactive Voice Response systems). But it's more than just stringing words together and throwing in emoji for personality. Weâve all had experiences with chatbots and digital assistants that have left us frustrated and nowhere near solving the issue we had. The experience was long, confusing, or its personality was trying too hard to be funny that it ended up being insulting. \"Conversation Design is the process of designing a natural*, two way interaction between a user and a system (via voice or text) based on the principles of human-to-human conversation.\" These principles guide Conversation Designers in creating simple and easy-to-use conversational systems. Conversation Designers pull knowledge from multiple fields and industries. They rely on knowledge of psychology, linguistics, and AI and combine it with technical expertise in UX design and UX writing, research, and the nuances of human to human conversation to deliver a good user experience. *Though Conversation Design draws on real world conversational dynamics, we must remember that bot conversation is not meant to perfectly mirror human interaction. We want to design a natural, two-way conversation hat's expressive and comparable to a human-to-human conversation, but always making it clear to the user that they're interacting with a bot. These guidelines are designed as a tool for everyone looking to write conversations or bots using Salesforce standards. For Conversation Designers, this serves as the blueprint for writing conversations that align with Salesforce values, which defines Salesforce's unique place in the market. Conversation Design allows Salesforce to meet users where they are, building trust by creating inclusive experiences that allow users to feel and be heard, and driving customer success. However, these guidelines are not only for dedicated Conversation Designers. Many other roles can benefit from the principles outlined here:"
        },
        {
          "type": "list",
          "items": [
            "CCX, UX and Technical Writersinvolved with conversational systems and searching for a way to level up their ability and understanding as a partner",
            "UX Designerswho want to get a better idea of how conversation design might influence the text, personae, or systems used in their prototypes or wireframes",
            "Product Managersupskilling their knowledge of their team or determining if a conversational system is worth investing more time and resources in",
            "Sales teams and Account Managerslooking for more context on why conversational experiences are a great relationship-building tool for Salesforce customers to use with their consumer audience",
            "Customer Success Group membersediting an existing bot, or building a bot for a demo.",
            "Anyone building a botor the âConversation Curiousâ, such as Product Marketing Managers."
          ]
        },
        {
          "type": "p",
          "text": "These guidelines can help anyone get an overview on how to write great conversational copy. Refer to this document when you are:"
        },
        {
          "type": "list",
          "items": [
            "Unsure about the voice and tone of your bot",
            "Creating any system where a bot and a user take turns providing input",
            "Looking for inspiration for your conversational system",
            "Writing dialogs for your bot and want to see if they match Salesforce guidelines",
            "Questioning whether your bot is context-appropriate",
            "Trying to make sure you have created a bot experience that is consistent"
          ]
        },
        {
          "type": "list",
          "items": [
            "Menu -Vertical list of options that help guide the user through a dialogHorizontal lists, called buttons, are often used for quick actions",
            "Horizontal lists, called buttons, are often used for quick actions",
            "User Utterance -Anything typed by the user",
            "Bot Response -Anything the bot says in response to the user input (typed text or menu choice)",
            "Entity -A type of data that you want to collect from a customer",
            "Intent -The customer's reasons for interacting with your bot"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/conversation-design/resources",
      "title": "Resources & FAQ - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["SPEAKING Framework", "Glossary", "FAQ", "Links"]
        },
        {
          "type": "p",
          "text": "Interested in diving deeper into Conversation Design or related topics? Check out the resources below. Dell Hymes, a linguist and anthropologist, created the SPEAKING framework that we can use as a conceptual framework in planning and analyzing the context and dialogs of our conversation design."
        },
        {
          "type": "list",
          "items": [
            "Where are the participants/users?",
            "Are the users in an office, at home, or out in the field?",
            "Are the participants under time pressure to solve a case?"
          ]
        },
        {
          "type": "list",
          "items": [
            "Who will interact with your digital assistant/bot?",
            "Describe your participants/users in the real world setting",
            "Accessibility",
            "Inclusive",
            "Bot personality"
          ]
        },
        {
          "type": "list",
          "items": [
            "What are the goals of each of the participants?",
            "What do the participants want to achieve in the conversation?"
          ]
        },
        {
          "type": "list",
          "items": [
            "This will show the different conversation flows, turn-taking dialogs or paths.",
            "Initial conversation, first time user, returning user? Itâs like meeting someone for the first time, thereâs an introduction, then getting to know perhaps, then a farewell. However, the next meeting wonât have the same sequence, because you already know that person and itâll be odd if you make the same introductions or ask the same questions."
          ]
        },
        {
          "type": "list",
          "items": [
            "Whatâs the mood of the conversation?",
            "What emojis are we going to use?",
            "Punctuation: period (.) or exclamation (!)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Are the users using a website or an app?",
            "Channel for chatbots = writing (but often writing like we speak)",
            "Channel for voicebots = speaking"
          ]
        },
        {
          "type": "list",
          "items": [
            "Are there any norms or standard ways on how the participants communicate?",
            "What topics are acceptable for the participants to talk about?",
            "Clear and concise",
            "Truthful in giving information",
            "Repetition and/or asking for clarifications",
            "How do Sales agents communicate with each other and to the customers?",
            "What are the industryâs conversation norms among/between Care Coordinators, Nurses, Physicians, Patients?"
          ]
        },
        {
          "type": "list",
          "items": ["Bot-Human Interaction", "Human-Human Interaction"]
        },
        {
          "type": "p",
          "text": "When to use Conversational AI? Before moving forward with designing a bot, it's essential to first decide if a conversational experience is definitely the best interface for your usersâ needs. For example, creating a dialog where you ask the user's name to get to know them can feel personal and help to build rapport with your customers. However, when that is followed by several more questions asking for their address, their last name, etc, the turn-taking becomes cumbersome for the user. In this example, a form would be better. Similarly, presenting the content of a lengthy Help article back to the user in an attempt to answer their question is not an ideal bot scenario. This content could be broken into smaller, more conversational key points, or presented as a URL for the user to follow. Resolution is key. The bot needs to provide value to the user, or they will lose trust and potentially not interact with the bot in future. What roles make up a Conversational AI Team? While there is no definitive answer to who should be involved in building a conversational experience, we have a few suggestions to help you ensure that your bot has the proper investment to get it off the ground, and team resources to maintain it as it gains users. We suggest including:"
        },
        {
          "type": "list",
          "items": [
            "Product Managersto manage contributor alignment and timelines, ensure executive sponsorship, and properly price and package the system for the end user",
            "Engineersto build any additional scripts or integrate any APIs or data necessary as the scope for the system evolves",
            "UX Designersto ensure accessibility and consistency across devices and unify multimodal experiences",
            "CCX, UX and/or Technical Writersto partner with Conversation Design and UX Design to ensure that UI text follows all company brand, style, and tone guidelines.",
            "Conversation Designersto craft the information architecture flow and conversational copy"
          ]
        },
        {
          "type": "p",
          "text": "What exactly is NLP (and NLU)? People often think of artificial intelligence (AI) when they hear âchatbot,â but not all bots can respond flexibly (like a human) the way AI can. The ones that can, use natural language processing (NLP) or natural language understanding (NLU) to interpret user inputs and respond appropriately. In the world of bots, we call these user inputs âutterancesâ. Different utterances that signal the same request make up an âintentâ. Having an NLP-based bot allows the user to interact with the bot using the same words they would use in regular conversation. Which type of bot is best for your needs? Chatbots can be categorized into the following categories:"
        },
        {
          "type": "list",
          "items": [
            "Menu-based bots(or Decision Tree bots) are based on a set of rules and use a planned, guided dialog. They allow users to select a path based on a menu of options within the chat. These bots are easy to set up, deliver high value on low-level tasks such as password resets, and help you deliver a curated experience to the customer.",
            "NLP botscan interpret free text using NLP. Users can choose where an NLP bot moves, so they have more control over the experience. Also, NLP bots can interpret multiple pieces of information within one phrase, so they can complete certain tasks in fewer steps.",
            "Hybrid botsuse menu-based methods and NLP methods at the right time to create a blended experience. A menu helps customers understand what the bot can do. And NLP helps the bot sound smarter and more conversational."
          ]
        },
        {
          "type": "p",
          "text": "Menu-based botsare great for automating common requests, easier to implement than NLP bots, and they give customers a sense of what they can do by providing them with clear options off the bat. One would likely use menus when options are limited to a set number of predetermined actions. NLP or hybrid botsare more versatile and conversational but they take more resources to set up and maintain. Most strong bot experiences use a combination of menus and NLP intents to offer a well-rounded experience that allows the user some degree of freedom and control in guiding the conversation while offering guardrails and likely suggestions through menus. If you choose to create a menu-based bot and later change your mind, don't worry. It's entirely possible to add NLP to your menu-based bot down the track. What are Slack Slash Commands? Slash commands in Slack make it easy to perform very simple tasks, but theyâre not always very obvious for the user to discover. At Salesforce, we leverage both NLP and Slash Commands in Slack to provide the best experience. NLPWhen the user needs to expand or negotiate more context.Example:@salesApp Which opportunities should I focus on to meet my quota? Slash CommandWhen the user needs to do basic lookup or task management.Example:What is my highest-risk Opportunity? â /sales oppty biggest risk Recommendations:"
        },
        {
          "type": "list",
          "items": [
            "Always prioritize NLP/free text inputs from the user â this meets the user where they are.",
            "Educate user on Slash commands as a back-up resource during conversation repair."
          ]
        },
        {
          "type": "p",
          "text": "For more information on NLP, intents and different types of bots,check out this article. What is the Uncanny Valley? The Uncanny Valley is a psychological concept that describes the feelings of unease or revulsion that people tend to have toward artificial representations of human beings, as robots or computer animations, that closely imitate many but not all the features and behaviors of actual human beings. Is conversation design for bots different for conversation design for generative AI? If so, how? Conversation design for generative AI use cases is more commonly referred to as prompt design. At Salesforce, that involves helping shape and create prompts and provide feedback on any interaction needed from the user for a conversational interface. The involvement of a conversation designer here helps ensure output quality, making sure it's precise, accurate, unbiased at scale, and, if needed, considerate of customer data in context. Conversation design also takes into account the fact that there might be prompt injection attacks or attempts to jailbreak the model, helping to safeguard internal prompts from undesirable attempts to harm the business of both the user and Salesforce and defining how the model should handle said attempts. For bots, conversation designers work in Einstein Bot Builder to create information architectures and language designs, along with training the bot's intents, which the model interprets using NLP. What do we consider a high quality prompt? To make the model output as precise and efficient to get the job done in the way our users need, designing a high quality prompt is crucial. We define high quality as:"
        },
        {
          "type": "list",
          "items": [
            "tightly scoped",
            "explicit about what will be done with the model output",
            "clear about the nature of the relationship between the recipient of the model output and the model output itself",
            "linguistically explicit about the style (AKA \"tone\") of the model output",
            "localizable"
          ]
        },
        {
          "type": "list",
          "items": [
            "Conversation Design-Trailhead Module",
            "Relationship Design-Trailhead Module",
            "Writing Style-Trailhead Module",
            "Greg Bennett:Conversation Design The Salesforce Way | L3-AI 2021, August 11 2021",
            "Greg Bennett & George Hu:Service Conversation Design Best Practices, September 26, 2018",
            "Greg Bennett:Voice & Tone Design Exercise, September 26, 2018",
            "9 Tips to Design Conversational Style for Your Bot, October 6, 2017",
            "Conversation Design is the Future of UX, March 4, 2021",
            "Einstein Bots Basics-Trailhead Module",
            "Einstein Bots Project Planning-Trailhead Module",
            "Write Utterances for Einstein Bots",
            "Use Exact Matching for Intents",
            "Use Intents to Understand Your Customers"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/data-entry",
      "title": "Data Entry - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Salesforce users need to add, change, and delete information frequently. A wide variety of text entry and selection options clearly and efficiently facilitates this experience. The simplest method of freeform data entry, for single and multiple lines of text. To limit the amount of text, use a singleÂ­line input. To restrict the type of input, you can specify the format, such as number or email address. Multiline text areas allow the user to enter longÂ­form plain text. You canât specify a format to restrict the type of content. Label the input area above or to the left of the field. In most contexts, a stacked label (label on top) is better for readability and clarity. Use horizontal labels only if you need to save vertical real estate and have fewer than 10 fields. To group related fields together, such as individual parts of an address, use compound inputs. The default text size creates a visual hierarchy between the label text and the input text. To conserve vertical space or when you have a long list of fields in a width-constrained sidebar, a smaller input size is also available. The input width depends on the label placement. The input width is 100% of the container. To assist the users, you can add help text. If the explanation is lengthy, use an âinfoâ icon and tooltip. For brief explanations (shorter than a sentence), you can place the text underneath the field. You can also use placeholder text to provide an example of the type of input required. For example, in a Name field, show a name in the correct format. Complex text inputs provide users with additional assistance in specific types of data entry. Instead of forcing the user to manually type a date, a datepicker provides a visual way for the user to browse and select a single date or range of dates. A lookup allows the user to search a database for records to fill a field. The lookup can either limit the user to a single record or allow for multiple records to populate a single field."
        },
        {
          "type": "list",
          "items": [
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢"
          ]
        },
        {
          "type": "p",
          "text": "Selection inputs allow a user to choose between a limited number of options for a given field. Use a single checkbox for Boolean fields in which the user can choose only between true and false or on and off. A radio list allows the user to select one option from a short list (fewer than 10 options). You must have enough space to present all options together to make comparison easy. Typically, radio lists are presented as a standalone field, such as a poll within a feed, and not used in a larger form. A toggle is similar to a checkbox in that it presents users with a binary choice for an item. However, a toggle is self-contained â think of it as a short form with only one field. When user turns a toggle on or off, the change for that item is saved immediately. Toggles are useful for reducing ambiguity. Since toggles save immediately, what users see on the page is always a clean state (never an unsaved/dirty state). Use a toggle if the field youâre building:"
        },
        {
          "type": "list",
          "items": [
            "Exists on a page with no other form components that can appear in unsaved states.",
            "Can be saved independently of other fields on the page",
            "Semantically fits the on/off model"
          ]
        },
        {
          "type": "p",
          "text": "A toggle is always accompanied by two external labels:"
        },
        {
          "type": "list",
          "items": [
            "Field label, which describes the item that the user is modifying, e.g. Post sharing, Desktop notifications, etc.",
            "State label, which describes the current state of the field. This label is binary and works in conjunction with the on/off state, but itâs more contextual to the field. E.g. Disabled/Enabled, Not Allowed/Allowed, etc."
          ]
        },
        {
          "type": "p",
          "text": "Picklists, commonly known as dropdown menus, allow the user to select one option or multiple options from a list. Picklists are used instead of radio lists and checkbox lists inside of a larger form. They provide more flexibility in the number of options the user can choose from."
        },
        {
          "type": "list",
          "items": [
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢"
          ]
        },
        {
          "type": "p",
          "text": "Use this control when the user needs to select more than one option and define the order of the selected items."
        },
        {
          "type": "list",
          "items": [
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢",
            "ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢ð¢"
          ]
        },
        {
          "type": "list",
          "items": []
        },
        {
          "type": "p",
          "text": "Inline editing allows the user to edit some part of a record without making a major switch between viewing and editing. This is a highly efficient method of updating a record. A user can make their changes without losing context and they can immediately return to what they were doing before. A field that can be edited inline will have a pencil icon next to it. The user can either double click on the field value or click on the pencil icon to activate inline edit."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/data-visualization/charts",
      "title": "Charts - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Chart TypesComparisonTrendingRelationshipCompositionsDistributionMetricLocationPipeline",
            "Comparison",
            "Trending",
            "Relationship",
            "Compositions",
            "Distribution",
            "Metric",
            "Location",
            "Pipeline",
            "ColorChart ColorColor Best Practices",
            "Chart Color",
            "Color Best Practices"
          ]
        },
        {
          "type": "p",
          "text": "Charts illustrateâand give us insight intoâcomplex data relationships. Charts tell the story of information. They make abstract data complete; give us an intuitive grasp of patterns; and help us identify trends, make comparisons, and track progress. To tell the story of the data you're presenting, you need to choose the chart that most clearly presents the main insight you want to share. Use the wrong chart type, and you risk misrepresenting the underlying dataâand confusing or even misleading your audience. So how do you choose the right chart for your data?"
        },
        {
          "type": "list",
          "items": [
            "First, think aboutintent. What is the essence of the information you want to convey?",
            "Who is youraudience, and how do they prefer to consume information?",
            "Is thedataused to show:Comparison: difference or similarity between different values?Trending: data that has changed over time?Relationship: correlation in data values?Composition: relative makeup of a value?Distribution: volume distribution and identification of outliers?Metric: measuring progress at a glance?Location:values on a geographical coordinate system?Pipeline: stages (or flow between stages) of a process?",
            "Comparison: difference or similarity between different values?",
            "Trending: data that has changed over time?",
            "Relationship: correlation in data values?",
            "Composition: relative makeup of a value?",
            "Distribution: volume distribution and identification of outliers?",
            "Metric: measuring progress at a glance?",
            "Location:values on a geographical coordinate system?",
            "Pipeline: stages (or flow between stages) of a process?"
          ]
        },
        {
          "type": "p",
          "text": " Comparison charts are used to show differences and similarities in data values. They include bar and column charts and dot plots. The bar chart is the workhorse of analytics. Because our eyes can quickly discern differences in height and length, it's a good choice for presenting simple nominal or ordinal data. The column chart is a common variant of a bar chart, used to compare ordinal values. Stacked bar charts are good for showing group relationships and value differences across more complex categories and subcategories. Stacked column charts can also be used to show group relationships within subsets of ordinal data. The dot plot uses circles to map values across x and y axes, then adds third or fourth measures in the form of dot size and color/intensity. It's a favorite of design guru Edward Tufte, due to its judicious use of ink and ability to convey complex information in a relatively uncluttered space. Trending charts, such as line charts, are used to represent data that has changed over time. Line charts are good for representing changes in one or more values over time, especially trending data. Overlay multiple values (up to four) in one chart to help readers visualize the relationship between values. Relationship charts, such as scatter plots, are used to show relationships and correlation between values in data. Scatter plots are useful for showing more complex data relationships, including correlation of multiple variables. For example, to illustrate correlation of revenue with number of open opportunities, plot the two measures on the x and y axis. As with the dot plot, dot size and color/intensity can convey additional information. Composition charts are used to show relative value, or represent relative makeup of a value, across a group. They include pie charts and treemaps. A pie chart maps relative value, or relative makeup of a value, across a data set. These charts highlight relative value (e.g., percentages) rather than absolute value. A treemap shows the composition of hierarchical data using nested rectangles. Distribution charts are used to visualize volume distribution and spot outliers or anomalies. They include heatmaps and matrix charts. Heatmaps use color density to show concentration patterns for a single variable. Matrix charts use color density and bubble size to show concentration patterns for two variables. Metric charts show progress at a glance. They include flat and polar gauges and ratings charts. A flat gauge shows progress toward a specific metric. It's useful where space may be limited. A polar gauge also shows progress toward a specific metric, with the circle representing 100% of the goal. Polar gauges can progress either by filling or draining, depending on the information conveyed. A ratings chart works much like a polar gauge, with the addition of comparison against a target quantity or expectation. Location charts show values using a geographical or coordinate map. Variations include bubble maps and geo maps. A standard location chart maps data values to a map or other geographical component. Areas of the map are shaded in proportion to related values, highlighting high- or low-value areas. A bubble map functions much like a location chart. As in the dot plot, dot size and color/intensity can convey additional information about each plotted point. Geo maps help readers visualize data that contains geographical coordinates (latitude and longitude). The coordinates allow more precise connection of data elements to locations. Pipeline charts show stages of a process, and the flow between those stages. They include funnel, waterfall, origami, and sankey charts. A funnel chart is used to represent stages in the sales or marketing process, with a value for each stage. A waterfall chart is used to show starting, intermediate, and final values for the stages of a process. Origami charts display pop-out values in data with a single measure and grouping. You can also use them to show variability in stages whose values donât decrease sequentially. They can work well to highlight values that are performing well relative to others in a category. Sankey charts show how values flow between two groupings, demonstrating how a given metric is distributed as it moves from one to another. A Sankey chart can display negative numbers and calculate their effect on overall totals. Color is important for data visualization. Colors help tell a story, guiding the user to view alerts or outliers and take desired actions. Color plays an integral part of narrating stories through a data visualization. Our team conducteduser researchand came up with color themes that were accessible, easy to distinguish and had enough colors to show categories in data. Users can select color themes from the Salesforce charting library. The default palette uses midtone hues from around the color wheel. All other themes have hues that are roughly 180 degrees from each other in the color wheel. Depending on hue chromaticity, certain hues have different RGB curves. Our accessible color-safe theme passes WCAG 2.0 guidelines for contrast accessibility. Research shows that most people's short-term memory can retain up to five pieces of information at one time, making five a good maximum for color choices. Also keep accessibility in mind. When using color to distinguish chart elements, always use symbols or text as well. Use color-safe themes whenever possible."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/data-visualization/metric-display",
      "title": "Metric Display - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Consistent Displays and Alerts",
            "Elements of Metric VisualizationMetric tile",
            "Metric tile",
            "Object ModelLabelValueUnitTimestampTrend IndicatorNoteTime SeriesRange Selector",
            "Label",
            "Value",
            "Unit",
            "Timestamp",
            "Trend Indicator",
            "Note",
            "Time Series",
            "Range Selector",
            "Tile Variations",
            "Branding",
            "OverlaysMetric on MetricEvent on Metric",
            "Metric on Metric",
            "Event on Metric",
            "PatternsDashboardKPI BannerCompact LayoutInline",
            "Dashboard",
            "KPI Banner",
            "Compact Layout",
            "Inline",
            "InteractivityMessagingDrill DownTriggersAlerts",
            "Messaging",
            "Drill Down",
            "Triggers",
            "Alerts"
          ]
        },
        {
          "type": "p",
          "text": "Best practices for presenting numbers that change with time. Metrics are the special numbers we use for monitoring change. They help us better understand how a system is changing (or not changing) over time. We do this by:"
        },
        {
          "type": "list",
          "items": [
            "Defining a set of measurements, ormetricsthat report useful things about the status of a system of interest",
            "Capturing thevalueof these metrics at regular intervals and storing them as atime series, indexed by metricnameandtimestamp",
            "Comparing the current value for each metric to past values to show how the system is changing, ortrending, over time."
          ]
        },
        {
          "type": "p",
          "text": "Monitoring is directly tied to taking actions. If you are monitoring a system where change is expected or desired, and change isn't happening, then you need to define the actions required to create change. Conversely, if you are monitoring a system where you want stability, but are seeing change, you'll need to define and take actions to stabilize the system. Therefore, to create the best metric experience for our users we need:"
        },
        {
          "type": "list",
          "items": [
            "to show them the latest value",
            "show how the value has been trending",
            "and enable them to initiate useful actions directly from the display itself"
          ]
        },
        {
          "type": "p",
          "text": "The goal of this guideline is to help the Salesforce design community to deliver consistent and useful metric visualizations to our end users. This matters because metric displays are powerful tools for building consensus among collaborators, for understanding cyclical patterns, and as a place for initiating actions when something isn't right. And these powerful experiences will be the most intuitive and easy to use for our customers when they look and work the same across the entire Salesforce ecosystem. However, without discounting the value of a consistent metric display experience, it is critical for designers to realize that, in practical use,almost no onewants a metric display as their primary monitoring experience. Instead, users prefer some kind of alert, coming on a high visibility channel such as a text or chat, that grabs their attention when something important changes and directs them to a display where they can begin to understand what has happened and how to respond. The point is that when your product requirements include the display of metrics, your UX strategy must also consider the companion issue of alerting. A great monitoring experience brings metrics and alerts together in a way that enables the end user to understand them as both entirely complimentary and completely distinct. The most common format for displaying metrics is atileâa specialized kind of data visualization designed for communicating the value of a metric relative to time. A metric tilemustshow the most current value of the metric and is infinitely more useful if it also visualizes a comparison of current and historical values. The metric label must be an end user recognizable version of the metric name. This is important because metrics tend to be stored in back end systems with cryptic names that need to be converted to a form that is meaningful to an end userbeforeappearing in the metric tile. The label text should also function as theDetail View. The value is a number representing the most recent reading for the metric available. It is critical that the metric value is displayed immediately adjacent to the label, following a natural reading order, and without any elements other than white space separating them. The unit is a name defined by standards, regulatory agencies, or common sense that identifies the magnitude of the thing the metric is measuring. The unit must be displayed because knowing the unit is critically important to assessing the meaning of the metric. For example, a hot tub water temperature reading of 100 has entirely different implications if the unit is Fahrenheit or Celsius! For common quantities with well known units, it is fine to use an abbreviation. The timestamp establishes the recency and relevance of the value. It should report the time when the metric was actually measured, not when the metric was received by the application displaying the metric. The trend indicator uses text and a directional icon with an accessible label to communicate which way the metric is trending. The amount of change can be given as an absolute value, a percentage, or both. The pointer direction is, by convention, up when the metric increases in value, down when it decreases, and pointed to the right when there is no change. The trend indicator has two important aspects to consider: To report a trend you need tocomparea current value against apreviousvalue. For example, stock trend indicators compare the current value against the value at yesterday's market close. Unfortunately, most metrics don't have a well understood previous value so you will need to choose a reasonable option such as1 day ago or 1 week ago, or the penultimate value,and accept that your viewer may need to consult documentation to know which you've chosen. A second complexity arises if you want the trend indicator to communicate whether the change is good or bad. In this case your application will need to know, for each metric being displayed, whether the end-user considers anincreasegood or adecreasegood. Ensure that color is not the sole indication of better/worse by using a secondary indication such as an icon or text that says \"better/worse\". If a tile includes a time series (discussed below) then the trend indicator is somewhat redundant and so, given the complexities and clutter it creates, may be best removed from your display. The note is a text string that provides additional context for understanding what the metric means, why it is important, or anything else about it that a user might find helpful. Including a note is useful if your end user views the metric display infrequently. If your target persona is an expert then suppress the note and save screen real estate. If a note is present it should be associated to the element that defines the card (which has role group) with aria-describedby. The time series is a line chart showing the behavior of the metric over time. Each point in the timeline should be reachable with the keyboard and when it has focus it should be labeled with the axis data in a way that's available to assistive technology. The points can all be one tab stop, using the arrow keys to move between them. The value of the most recent data point displayed in the time series should match the latest value reported in the region above. The appearance of the line chart should follow existingSLDS guidelines. A time series is extremely useful because it intuitively conveys the metric value's range, rate of change, and behavioral patterns in the same display. Unfortunately, a lack of the back end services required to store the historical data and render it to the screen may make it impossible to include a time series chart in your application. The range selector allows the user to set the time period displayed along the x-axis of the time series. For performance reasons, allow only specific time ranges for which the data can be cached. Obviously, if a time series is not being included in the display, a range selector would not be included either. If the range selector is used, the chart's accessible label should include information about the current range. The optional and required features of the metric display may be combined in a variety of sensible ways depending upon use case and technical constraints as shown in these examples. In general, avoid decorating the metric tile with marketing pixels. However, in cases where product requirements insist on branding, limit it to the label region where it will not interfere or distract from the data visualization. In the general display case, each tile represents a single metric. However, to enable correlation and comparison it is extremely helpful to use overlays. There are two kinds of overlays: The metric on metric overlay case can be best understood by imagining two or more transparent tiles are sitting on top of each other, aligned on the time axis of the trend line display. A tile in the metric on metric overlay tile includes:"
        },
        {
          "type": "list",
          "items": [
            "a title that explains the grouping or purpose of the overlay.",
            "a legend that enables differentiation of the lines in the trend display."
          ]
        },
        {
          "type": "p",
          "text": "The scale for the y-axis can be tricky with this kind of overlay. If the values of the metrics being overlaid share the same order of magnitude the scale range can represent the range of the actual values. However if the value of the metrics differ by 1 or more orders of magnitude the scales must be normalized. Because the range of future values cannot usually be known, normalizing the scales always is the safest approach. Legend and trend line colors need to contrast 3:1 with each other AND the background. For this reason it is often recommended to use a pattern in addition to color to differentiate data. The Event on Metric overlay displays markers for events on the same timeline as the metric. Events are things that happened that have a timestamp, but no scale. This kind of overlay is a powerful way to demonstrate or explore whether there is a temporal correlation between the event and the behavior of the metric. For example, overlay below shows a code check-in event overlaid on a time series of CPU Load, a common hardware performance metric. In this made up example, it looks like perhaps the check-in introduced a bug that is causing CPU load to rise dramatically. Now that we've fully described the metric tile let's discuss the most common ways that this basic unit is used in interfaces. A metric dashboard contains an overall title, and within a clear visual boundary or border, a tabular display of tiles with uniformly sized rows and columns. A dashboard presentation works well for two different use cases:"
        },
        {
          "type": "list",
          "items": [
            "to display an index of all available metrics which the user can search, browse, and filter to select metrics of interest.",
            "to display a predefined set of critical metrics that a group of users have agreed to use to manage a specific business process."
          ]
        },
        {
          "type": "p",
          "text": "Each of the tiles in the dashboard must be synchronized by time and share the same background variables. Background variables define context; quantities that are not displayed in the tiles themselves, but influence the reported values. As a somewhat silly example, if you had a dashboard that displayed metrics to do with e-commerce, the viewer will assumeâand you should ensureâthat all tiles display values are coming from the backend of the same e-commerce website! The dashboard layout should be responsive. Use max-width & min-width rules on the tile to drive the number of columns displayed at each breakpoint. A KPI (Key Performance Indicator) Banner is a special case of the dashboard that appears as a single row (or column) of tiles displaying only latest value information, no time series. The KPI banner may or may not include the title and grouping border shown in this illustration. The common use case for the KPI Banner is to display, compactly, the latest value for a set of metrics critical to evaluating the success or failure of some business process. The compact layout supports an opt-in-to-detail experience that supplements or enriches a more general display. In this case some form of the metric tile is displayed within a standardpopovercomponent. A popover-based approach will need a lot of accessibility attention. If we want an approach like this, there will need to be a control that opens the chart on click and sets focus into the chart so the user can navigate it. The chart popover cannot open on hover or focus alone. Inline provides an extremely compact metric presentation directly in the context of free text or lists. The inline case will either display a simplified version of the current value region of the metric tile, or a simplified version of the time series region (commonly called asparkline) but not both at the same time. An inline chart will need an accessible alternative like a text-based summary or a table-based alternative presentation of the data (which can be visually hidden). Users needing to respond to the change they see in your metric display will very much appreciate being able to do so quickly and intuitively directly from the display itself. Perhaps the most basic action a person takes in response to noticing an anomaly is to share the discovery with someone else to get confirmation that there is a problem, or to ask them to fix the problem. Regularly checking a metric you care about gives you an intuitive sense of what normal and anomalous behavior patterns look like and what you can do to influence them. However, before responding to a change, it is nice to be able to review the underlying details to be certain of what is going on. Users expect to be able to navigate from the metric to a separate detail display. Metrics are signals communicating the state of a system or business process. When a metric is understood well enough to be partitioned into ranges of \"good\" values versus \"bad\" values, then it can be used to create triggers that initiate automationâincluding alertsâwhenever a metric rises above or falls below a threshold value. The most intuitive interactive model will enable the trigger to be set directly on the display. Simple, clear, standardized metric displays are powerful tools for building consensus among collaborators, understanding cyclical patterns and initiating actions when something isn't right. However, despite their utility, almost no one wants their monitoring experience to start with a metric display! Instead, people want their monitoring entry point to be real-time alerts coming on high visibility channels like text or chat that grab their attention. People want these alerts to be important. And finally, if the alert requires a response, people want to be able to jump directly from the alert to the kind of richer display we have been discussing here. Think of alerts and metrics as two sides of the same coin: when your product requirements include the display of metrics your UX strategy must also include a plan for alerting."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/displaying-data",
      "title": "Displaying Data - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Lists and feeds help users navigate data either by theme or chronology. These various ways of displaying data are optimized to help users locate, browse, and work together on records. Record lists organize information to help users locate and/or browse specific records. You can display records as a table, tile list, or interactive card. Differentiate types of items either by separating them into different lists or by clearly labeling them within the list. For example, put different file types into separate lists, or if they live in the same list, label each file file type (PDF, JPG, and so on). Make sure to provide a visible affordance, such as an icon or a button, for all points of interaction on a list or record. Title each list of records. Include field labels where possible. User name, date, and number fields are especially ambiguous when shown without a label. Itâs recommended to provide a message when a list is empty. For example, âNo items to display. Try editing filters for this list view or switching list views.â A table is the most basic format for displaying a list. Each record is represented by a single row of data that begins with the recordâs primary field and shows additional fields in subsequent columns. The data is labeled using column headers that can be interactive. This display type is appropriate for large numbers of records because you can easily scan it and navigate the list using sorting, filtering, or scrolling. If you are allowing the user to modify the column widths, allow horizontal scrolling but donât responsively resize columns. On narrow screens where only a few columns will fit, tables should elegantly and responsively collapse into tile lists. A tree grid is useful for displaying large amounts of hierarchical data, where records are grouped into parent-child relationships. This format is similar to a table, with the exception that the first column also represents the relationship between records. It also offers similar benefits including sorting and filtering. A chevron button at the end of the row shows and hides nested children. It also indicates whether a record has children. Children are indented below their parent to communicate their position in the hierarchy. Records and their children must share the same data structure to be displayed in columns. For example, files and folders share a similar set of metadata. When parent and child records have different fields, a tree grid should not be used. Consider using a related list or master detail instead. On narrow screens where only a few columns will fit, tree grids should elegantly and responsively collapse into a tree list. A tile begins with a primary field and can include a supporting icon or image and additional fields. Data is presented as labelÂ­value pairs. The user interacts with elements within the tile, such as buttons and links, not the tile as a whole. Use tiles when you are horizontally constrained for space. Tiles are appropriate for short listsâfewer than 10 items. Tile layouts do not stretch well, so to use available horizontal space, add a column of tiles. On wider screens where more than 2 columns of tiles will appear, tile lists should elegantly and responsively expand into tables. To make tiles more interactive, you can add a card wrapper around individual tiles and allow users to drag and drop them. Use cards when the order and placement of individual items in a list is important. Feeds offer a way for users to communicate and stay informed of activities related to records. Include a search feature so that users can search feeds. Itâs recommended to provide a message when a feed is empty. For example, an activity feed might say, âNo next steps. To get things moving, add a task or set up a meeting.â A discussion feed is a conversation between users. Individual messages in the discussion allow inline replies and comments, but donât allow replies to those repliesâno layered threading. In addition to the message, each item in the feed displays the user who posted it, date it was posted, row level actions to bookmark or delete (owner only), a button to like the post, and the number of likes. A post can include mentioning other users and file attachments. The discussion feed can include multiple message types that add interactive features. For example, you could include a poll. An activity feed tracks what a user has done and what a user is about to do on a record. Each feed item includes the activity type, subject, and additional fields specific to that activity type. Activity types can include email messages, tasks, calendar events, calls logs, and other updates to the record or related records. The activity feed can show past and future events."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/empty-state",
      "title": "Empty State - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Usage",
            "Empty State PartsMessageCall to ActionIllustration",
            "Message",
            "Call to Action",
            "Illustration"
          ]
        },
        {
          "type": "p",
          "text": "Empty states tell users that thereâs no content to displayâand what they can do next. Empty states are messages that appear whenever an element has no content to display to the user. They can appear anywhere in Salesforce, in both desktop and mobile interfaces. They can alert users to empty search results, unconfigured features, or, in some cases, errors. They can even appear to tell users that an empty area has been intentionally left blank. See the Illustration component blueprint for implementation information An empty state is a means to communicate with users. It should tell userswhatitâs for,whytheyâre seeing itâandwhat they can do next. Itâs also an opportunity to engage users, adding energy and motivating them to interact. It can guide users through an onboarding process or help them get more value from Salesforce, without overwhelming them with too much information at once. And itâs a great way to reinforce our brand while injecting a bit of fun and Ohana spirit into the user experience. When designing an empty state, consider how well it will work fordesktopandmobileuse cases. For example, will it be used in both environments, or just one? Does the call to action apply for mobile users? How will the image work on a small screen? Each empty state must have amessage. Acall to actionandillustrationare optional. An empty state message consists of two pieces:"
        },
        {
          "type": "list",
          "items": [
            "Theheadlineoffers an opportunity to convey more information while adding some fun.",
            "Body textadds details and engages users."
          ]
        },
        {
          "type": "p",
          "text": "For readability, keepline lengthfor each of these pieces under 66 characters per line. In general, try to keep the line length the width of your illustration. Please consider localization when writing copy that may cause wrapping to another line when localized. Make sure the message, call to action, and illustrationwork together. Donât reserve fun for illustrationsâconvey it through writing too. And if an image changes, work with any writers involved to keep image and text in sync. Some guidelines to help you produce strong empty state messaging:"
        },
        {
          "type": "list",
          "items": [
            "Theheadlineshould start with a verb. Use the friendly, approachable Trailhead voice and tone.",
            "Body textshould be short and informative, telling the user whatâs happening. Keep the tone consistent."
          ]
        },
        {
          "type": "p",
          "text": "A CTA stands for call to action. It's a button that draws attention to the most logical action. A CTA helps users move from an empty state to a situation where the page, component, or element at hand is useful to them. CTAs are optional, but helpful. They should be as specific as possible, answering the questionWhat should the user do next? When writing a CTA, consider the userâs most likelynext best action. A CTA could let the user (in order of preference):"
        },
        {
          "type": "list",
          "items": [
            "Click to take the action now",
            "Launch a way to help âfillâ the empty state",
            "Launch a walkthrough that teaches the user about the feature",
            "Launch a Trailhead module in a new tab",
            "Launch a related Help topic in a new tab"
          ]
        },
        {
          "type": "p",
          "text": "You might also have no CTAânot all situations have a clear next step. Some considerations when choosing a CTA:"
        },
        {
          "type": "list",
          "items": [
            "Many platform features are limited bypermissions. Will all the users seeing your CTA have permission to take the action? If not, consider a more universal CTA, or none at all.",
            "Is this empty state ateaching moment, or is quick action more important? If itâs an action users are likely todo often(e.g., creating a new record), point to the primary method of completing that action so they can learn. If itâs more of a one-off, open a modal or other shortcut.",
            "Do you needtwo CTAs? Oneâs usually enough, but occasionally youâll want a primary CTA that helps the user âfillâ the empty state, plus a second to provide context or point to learning opportunities. In cases where a second CTA is useful, it should be placed immediately after the body text (or in place of the body text if there isnât any).",
            "Donât repeat the headlinein the CTA."
          ]
        },
        {
          "type": "p",
          "text": "Some options for CTA placement:"
        },
        {
          "type": "list",
          "items": [
            "Text link, immediately after the message.",
            "Text link, visually separated from the message.",
            "Text link + icon, visually separated from the message.",
            "With two CTAs, separate the primary CTA from the message, and put the secondary CTA immediately after the message. Never use more than two CTAs."
          ]
        },
        {
          "type": "p",
          "text": "For empty states, illustrations are optionalâbut theyâre a great way to add a touch of fun and visual interest while helping users understand their situation. Use illustrationsjudiciouslyâtoo many can be busy and confusing. Create anew illustrationonly if you canât find an existing one that works."
        },
        {
          "type": "list",
          "items": [
            "Choose illustrations that are fun and support the situation. They should be able to stand on their own without characters.",
            "Donât make Salesforcecharactersthe focus of your illustration. Because Salesforce orgs can be themed, characters should live only in the background, as outlinesâyour illustrations should be able to be understood without them."
          ]
        },
        {
          "type": "p",
          "text": "When an empty state illustration has acolored background:"
        },
        {
          "type": "list",
          "items": [
            "Keep white fills in foreground objects",
            "Donât remove fills from objects",
            "Never have a white fill as the background"
          ]
        },
        {
          "type": "p",
          "text": "Sometimes, an illustration is not needed. An illustration should clarify the situation. If your image doesnât add anything to the userâs understanding, skip it. Some examples where no illustration may be the right call:"
        },
        {
          "type": "list",
          "items": [
            "When components are used inside other components",
            "When it's not possible to create an illustration that adds clarity isnât possible",
            "When using components that are likely to appear with many other empty components"
          ]
        },
        {
          "type": "p",
          "text": "When an illustration is warranted, use the rightsizefor the context."
        },
        {
          "type": "list",
          "items": [
            "Use alarge illustrationwhen the empty state is likely to be the only thing on the page, or the primary focusâfor example, on Setup pages.",
            "Use asmall illustrationwhen youâll have multiple empty states on a page, or if the component will be used on multiple pages.",
            "An illustration can exist as afull page, in themain bodyorsidebarof a page, or in acomponent."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/iconography",
      "title": "Iconography - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Overview",
            "Design Principles",
            "AccessibilityInformational IconsDecorative Icons",
            "Informational Icons",
            "Decorative Icons",
            "Grid System and Keyline Shapes",
            "Mobile Tap Targeting",
            "Icon Categories and Types",
            "Object IconsAnatomyKeyline ShapesArtboardDos and Donâts",
            "Anatomy",
            "Keyline Shapes",
            "Artboard",
            "Dos and Donâts",
            "Utility IconsAnatomyKeyline ShapesArtboardDos and Donâts",
            "Anatomy",
            "Keyline Shapes",
            "Artboard",
            "Dos and Donâts",
            "Action IconsAnatomyKeyline ShapesArtboard",
            "Anatomy",
            "Keyline Shapes",
            "Artboard",
            "Doctype IconsAnatomyKeyline ShapeArtboardDos and Donâts",
            "Anatomy",
            "Keyline Shape",
            "Artboard",
            "Dos and Donâts",
            "Product Icons"
          ]
        },
        {
          "type": "p",
          "text": "Icons are symbols used to represent features, functionality, or content. Visit theicon pageto see a library of all icons and thecomponent blueprint pagefor implementation details. Five types of icons are used to communicate information within Salesforce, each with variations based on use case and representation. From most to least used, they are: Utility iconsare simple, single-color glyphs that identify labels and actions across form factors. They can be paired with text or used alone, and can be any color. They have no background shape. Object iconsfall into two categories. Standard object icons (e.g., Accounts, Leads, Opportunities, and Cases) come with Salesforce. Custom object icons are a unique set of icons used to create custom objects. Each object icon is made up of a white glyph on a squircle (square + circle = square with rounded corners). Object icons use a specific, limited color palette. Action iconsare touch-device specific icons that appear next to an itemâfor example, a page header or cardâto let users take action in a specific context. Each action icon is made up of a white glyph on a colored circle. Action icons use a specific, limited color palette. Doctype iconsrepresent document file formats. Each doctype icon is made up of a white glyph representing its file type, on a background resembling a piece of paper with a folded corner. Product iconsrepresent applications using product logos. On the desktop, theyâre used only in the app launcher and at the top left of each Salesforce application window. On mobile-device home screens, they launch the corresponding mobile app. Product icons are full color and use official product color palettes. Salesforce icon design is a blend of professional and playful. Our icons are simple, approachable, and legible, distinguished by negative space and large rounded corners. Icons should be recognizable and easy to remember. Screen readers handle the two major icon types differently. Informational icons are read to convey information to users, while decorative icons are ignored. Choose the right icon type for each use case; for informational icons, write preliminary labels for CX review and developer use. For more information on icon accessibility, see theAccessibility sectionof the Icon blueprint. Informational iconsâfor example, icon buttons and standalone avatarsâconvey important information that surrounding text doesnât. Each icon should be accompanied by either assistive text or aria-label (a code string that labels the element). Each image should have an alt description. In the alt description, write what the icon or image does, not what it looks like (e.g., \"Upload File\" instead of \"paperclip\"). Informational Icon Example: Users click the X icon within a toast message to dismiss the message. Screen readers should read this icon as âClose.â Icons and images add no relevant information or functionality. Redundant icons and images, which reinforce adjacent textâs meaning but add no new information, also fall into this category. Screen readers shouldskip overdecorative icons. For images, use an empty alt tag, to force screen readers to skip over them. Decorative Icon Example: The following icons are decorative; the visible text next to them reiterates their new information. Icons are based on a 8pt grid system and come in four keyline shapesâcircle, square, vertical rectangle, and horizontal rectangle. These shapes are created using business process model and notation diagram (BPMN) conventions. When designing for mobile, add space around each icon to make it easier to select. Salesforce uses four main icon types: object, utility, action, and doctype. Keep design elements consistent within each icon type. (See Iconography specs for details.) Object icons are used for both mobile and desktop applications. They consist of white images on colored squares with 4px rounded corners."
        },
        {
          "type": "list",
          "items": [
            "Standard iconsrepresent Salesforce objects and entities that come with the product (for example, Account or Contact records).",
            "Custom iconsrepresent custom Salesforce that objects customers create to meet their business needs."
          ]
        },
        {
          "type": "list",
          "items": [
            "Based on a 60x60px grid",
            "6px stroke weight",
            "6px corner radius",
            "6px negative space"
          ]
        },
        {
          "type": "list",
          "items": [
            "Recommended canvas size for setting up Illustrator or Figma files: 100x100px",
            "Live area of 60x60px, with 20px padding on each side"
          ]
        },
        {
          "type": "p",
          "text": "Utility iconsare simple, single-color images representing UI-specific actions such as closing a dialog, searching, opening a menu, and sharing a feed post. These actions can be either generic or Salesforce specific. Utility icons do not have keyline shape backgrounds. Utility icons appear in both mobile and desktop environmentsâincluding in feeds, Global Header, navigation, Docked Composer, Button Groups, Alerts, and Toasts. Utility icons can include text describing their functions. Text and image are center aligned."
        },
        {
          "type": "list",
          "items": [
            "Based on a 16x16px grid",
            "1px stroke weight",
            "1px corner radius",
            "1px negative space"
          ]
        },
        {
          "type": "list",
          "items": [
            "Based on a 24x24px grid",
            "2px stroke weight",
            "2px corner radius",
            "2px negative space"
          ]
        },
        {
          "type": "p",
          "text": "When scaling icons larger than 24px, increase the stroke and spacing: 32px icon (2px stroke weight), 48px icon (4px stroke weight), and 60px icon (6px stroke weight)."
        },
        {
          "type": "list",
          "items": [
            "Recommended canvas size for setting up Illustrator or Figma files: 52x52px",
            "Live area of 48px, with 2px padding on each side"
          ]
        },
        {
          "type": "p",
          "text": "Action icons represent actions that users can take within a touch device app. These important icons, which represent the main ways Salesforce users accomplish tasks, appear only in themobile action bar."
        },
        {
          "type": "list",
          "items": [
            "Based on a grid of 48x48px",
            "4px stroke weight",
            "4px corner radius",
            "4px negative space"
          ]
        },
        {
          "type": "list",
          "items": [
            "Recommended canvas size for setting up Illustrator or Figma files: 52x52px",
            "Live area of 48x48px, with 2px padding on each side",
            "Circle background: Live area of 52x52px (circle), 32x32px (icon), with 10px padding on each side"
          ]
        },
        {
          "type": "p",
          "text": "Doctype iconsrepresent file types, and are often used when a file preview is unavailable. Use a recognizable white glyph inside these icons if a familiar visual metaphor is available; otherwise, use a text abbreviations of the corresponding file extension. Doctype icons are used in both mobile and desktop environments, including inside feeds, publishers, cards, and related lists."
        },
        {
          "type": "list",
          "items": [
            "Based on a grid of 56x64px",
            "Live area of 36x12px (letter) or 36x22px (icon), with 10px padding",
            "6px corner radius",
            "Icon: color #fff",
            "Text: Proxima Nova Soft, Regular 18 pt, color #fff",
            "Flip: color #fff with opacity of 50%; drop shadow: color #000 with opacity of 10%",
            "Add a background color"
          ]
        },
        {
          "type": "p",
          "text": "Vertical Rectangle (56x64px)"
        },
        {
          "type": "list",
          "items": [
            "Recommended canvas size for setting up Illustrator or Figma files: 56x64px",
            "Live area of 36x12px (letter) or 36x22px (icon), with 10px padding"
          ]
        },
        {
          "type": "p",
          "text": "Product icons are the branding for each Salesforce product. Each product icon is made up of a two-color glyph with a 4px rounded stroke on a white background. These are used as mobile application icons; in the product, they represent each official Salesforce application in theApp Launcheras a 48x48px icon."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/in-app-feedback/overview",
      "title": "In App Feedback Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Why Collect In App Feedback?",
            "Values & Goals",
            "Planning the Scope of Your Project"
          ]
        },
        {
          "type": "p",
          "text": "The In App Feedback Framework consists of research, design, and implementation guidelines for hearing directly from users within the product. The user is at the center of our products. Throughout the Salesforce ecosystem, we collect feedback from users in many different waysâsuch as research studies, surveys, and in person experiences like Dreamforce. However, collecting feedback within the app uniquely helps us to understand how end users experience technology in the moment, bringing the voice of the end user to the center of product decisions. Trustis our #1 value. Gathering feedback is an opportunity to build trust with users by ensuring their voice is heard and valued. It's important to close the loop with users, thanking them for their feedback and prioritizing any issues surfaced in their comments. An effective feedback loop puts the customer front and center, while also reinforcing research goals, creating a positive user experience and surfacing valuable insights that can drive the business forward. There are a few steps to keep in mind as you embark on your journey of collecting feedback from users. While these guidelines cover design and research strategy for implementing effective feedback mechanisms, be sure to talk to your engineering partners to understand implementation strategy and technical constraints early in the process. Check out theScenariospage to see how all the pieces fit together for an effective feedback mechanism. Next:Scenarios"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/in-app-feedback/patterns",
      "title": "In App Feedback Patterns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Overview",
            "Pairing Questions and Elements",
            "In App Feedback Question ElementsRating ScaleYes or No QuestionOpen Response Text FieldMultiple Choice QuestionVisual FeedbackUser Initiated Topic TaggingConsent Opt In",
            "Rating Scale",
            "Yes or No Question",
            "Open Response Text Field",
            "Multiple Choice Question",
            "Visual Feedback",
            "User Initiated Topic Tagging",
            "Consent Opt In",
            "Feedback Containers",
            "Pairing Elements and Containers",
            "In App Feedback ContainersInlineDocked Composer and Half SheetPopoverFull PageModal",
            "Inline",
            "Docked Composer and Half Sheet",
            "Popover",
            "Full Page",
            "Modal"
          ]
        },
        {
          "type": "p",
          "text": "Feedback mechanisms consist of question elements at the atomic level, which are brought together into a container that displays them to the user in the UI. Often a combination of pattern elements will be the best solution to collect the most meaningful and actionable feedback for your use case. This section covers types of elements and containers, and best practices around when to use them depending on your research objective. Once you have chosen your research objective, assess which element would provide the best experience for your users while also enabling you to capture meaningful feedback. Use this table to help you select the right feedback element for each scenario. These guidelines include example question elements and their suggested usage. Think of them as mechanisms that you can adapt to meet your own needs. Numeric ratings are commonly used linear scale questions. They typically are scaled using whole numbers from 1-5 or 1-7. A notable exception is the Net Promotor Score (NPS) which is scaled from 0-10; this question however, has a unique method of analyzing results. Because the endpoints are more variable, the numeric rating scale offers more flexibility than the star rating scale. Stars are a commonly used visual, linear, rating scale question. One of the most common scales is 1-5 stars where 1 is low and 5 is high. Numeric rating scales are often used for things like satisfaction, ease, brand favorability, feature importance, and likelihood to recommend.1For ease of use, a statistically validated question called the Single Ease Question (SEQ) may immediately follow a task:Overall, how difficult or easy was the task to complete?where 1 = Very Difficult and 7 = Very Easy. You might use a rating scale to ask a user to indicate how helpful a feature was, how helpful results or information presented felt, etc. They are used at the end of an experience, as an evaluative assessment. Dolabel at least the endpoints of the numeric scale. Only use icon based rating scales, such as stars, for relatively simple evaluations. When assessing results, be careful of comparing averages without considering volume of responses. Don'tuse non standard rating lengths (ex: 1-3, 1-9). For scenarios where the nuance is critical, donât only use rating scales. To assess nuance, a rating needs to be paired with an accompanying qualitative element (much like a rating + comment option common to eCommerce experiences). A simple, visual, or text based rating system to express a single sentiment, positive or negative, towards an element. Yes or No votes are quick to complete, and can show at a glance sentiment. Results are often surfaced to users as a means of providing a visual cue as to the level of positive or negative sentiment about an element, such as an IdeaExchange idea. They can be icon or text basedbuttonsand are used to answer a Yes/No question, such asWas this information helpful? Douse voting for quick questions where there are two possible sentiments - yes/positive, no/negative. Don'tonly use voting if there's the potential for more than yes/positive, no/negative. Capturing the gray area requires a qualitative element, such asOther. Open response text allows users to provide a detailed response to a prompt. These fields are sometimes limited in length (ex: 1-2 sentences), which can indicate to users the type of response that is expected. Use open response text when the set of likely possible responses is not known. For example, this can be used to understand reasoning behind a numeric rating, an opinion about a feature, or an explanation for an action. Douse open response text fields for exploration, they can be a great tool for uncovering new insights. Don'tuse open response text fields in excess; because they take time to complete, the likelihood of completion decreases as the number of open response text fields increases. Multiple choice questions provide a concrete set of responses that a user can select. They can be either single or multi select. Use multiple choice questions when the set of likely responses is known. Common multiple choice questions include age, industry, and current device. Multiple choice questions are often answered in the form ofcheckboxesorradio buttons Douse multiple choice questions for quick data capture. Don'tuse multiple choice questions for responses that are too similar, too long, or too complex. Visual feedback provides users the ability to highlight an issue within the product through showing with an image or screenshot in addition to telling through written feedback. Use visual feedback when things such as layout or UI elements will be relevant to the information being provided, or when something can be more easily or quickly shown rather than described. This generally involves the user uploading a screen capture or other .png or .jpeg file to illustrate the issue or comment. Douse visuals for helping to give further context to the feedback that a user is providing. Situations such as reporting a bug, factual error, or providing usability feedback benefit greatly from added visual feedback.  This is best paired with an open response text field to allow the user to further explain the image that they have shared. Don'tuse visual feedback to collect any type of personally identifying data about the customer or their organization that may unintentionally violate privacy mandates. User initiated tagging is a mechanism that allows users to associate or tag their feedback with particular features or product areas in the system to help better explain the context of the feedback and improve analysis. Use this when collecting more general feedback that needs to be associated to a particular flow, feature, or element of the system to have better context. Douse tagging for allowing users to identify feature areas that their comments are about. Don'tcreate categories that are overly limiting to the user, this should be an optional field or the user should have the ability to choose âotherâ and fill in their own answer. Consent opt in from users is an important part of collecting feedback in app. Depending on the nature of the feedback provided, how you plan to use the responses, or if you will contact participants for follow up there may be various legal requirements or needs for informed consent from participants to be able to take those next steps with the responses and data that they have provided. Use consent opt in when you would like to contact a participant for follow up or additional research and to let them know how their data will be used.  Consent opt in often takes the form of acheckboxor signatureinputthat is paired with legal language that is relevant to the situation or type of information being collected. This often appears at the beginning or end of a set of research questions and should be required before the user is able to submit their feedback. Douse consent opt in for the ability to follow up with a participant for further research sessions and to inform the participant of what they are legally agreeing to, and what their response is being used for. Don'tuse consent opt in for collecting personal information that could identify users based on their responses or to collect confidential data from participants businesses. 1. Note: Insights for Rating Scale usage were sourced fromhttps://measuringu.com/rating-scales/ A container is a component that brings together question elements at the atomic level and displays them to the user in the UI. Once you have chosen specific question elements to align with your research objective, assess which container would provide the best experience for your users while also enabling you to capture meaningful feedback. Use this table to help you select the right feedback container based on the elements that you are using. These guidelines include example containers and their suggested usage. Think of them as mechanisms that you can adapt to meet your own needs. Usage Inline feedback persists on the UI and it is used to collect a response to short surveys, such ashelpful or not, about relevant information in the same section. Itâs displayed inline and doesnât block any other part of the interface, or disrupt a userâs task flow. Usage Adocked composeris a persistent utility bar that can expand or collapse a composer window on desktop. It allows us to gather feedback from users without disrupting them continually using the app to complete tasks. A docked composer could surface the same survey across multiple pages. A half sheet serves a similar function in the mobile space though can be a bit more disruptive to users. Usage Apopoveris a non modal dialog opened by a clickable trigger element. It is used to display contextual surveys without having a layer cover the app. A popover contains a simple survey that usually does not require multiple steps/pages. Usage A full page has the most space to display a survey.  Usually this is for questions that will require taking the user's attention away from their current tasks. Be sure that the user is opting in to give additional feedback and understands that they will be redirected from their current workflow to a separate full page. Depending on the level of detail you seek to collect, the survey could be presented in multiple steps or pages. Usage Modalsdisplay a fair amount of the content in a layer above the app. A modal is used when a survey needs to be shown without the user losing the page context, and allows them to easily return to the underlying page after the form is submitted or dismissed. Paired with a progress indicator, a feedback form could be displayed progressively in the modal."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/in-app-feedback/research-strategy",
      "title": "In App Feedback Research Strategy - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Overview",
            "Translating Research Needs into User Centric Questions",
            "General Best Practices",
            "Sampling and Segmentation Strategy",
            "Monitor, Analyze, and Revise"
          ]
        },
        {
          "type": "p",
          "text": "Building an effective feedback loop requires alignment between research objectives and UI patterns. When collecting In App Feedback, it's important to align on a research objective before choosing UI patterns to use. Each In App Feedback pattern element serves a different function, and some elements are better than others for specific research objectives. Steps for creating your feedback mechanism"
        },
        {
          "type": "list",
          "items": [
            "Translate your research need into user centric questions.",
            "Choose In App Feedback pattern elements that align with the user centric questions you would like to ask the user.",
            "Choose an appropriate container that aligns with your research objective and delivers a smooth, consistent, and positive experience for your users."
          ]
        },
        {
          "type": "p",
          "text": "The quality of the data you capture through feedback mechanisms directly correlates to the quality of questions you ask. Once you settle on a research objective, it's important to translate the objective into questions that capture the nuance of user behavior and intent. Keeping questions open ended will allow the user to give honest feedback without limiting the substance of what they may talk about. If you ask a star rating question or a binary yes or no question, be sure to follow up with an additional open text field or multiple choice option to help inform rating selections. Referencing specific moments during the experience such asthe last time you used this featurealso helps to ground the user in their experience rather than rely on subjective memory or opinions of your product."
        },
        {
          "type": "list",
          "items": [
            "Limit length to 3-5 questions.Optimally, the full range of questions should be viewable without scrolling. The priority should be to collect any feedback at all rather than collecting the most comprehensive or detailed. If the user notices at first glance there are too many questions, the user may quickly close or abandon the mechanism before leaving feedback.",
            "Choose a mix of open text, rating or multiple choice questions to collect more actionable feedback.In App Feedback mechanisms should generally leverage a mix of question types when appropriate. Ensure questions are open ended enough to capture user sentiment. Try to build your mechanism to collect multidimensional dataâa mix of a multiple choice, open text etc, usage data, etc.Verbatim/open ended:Generally, these are best written as non specific prompts for the user to describe their experience.It is best to avoid asking the user to providesuggestions for improvingthe system, as this is quite different than asking them to describe their experience.Phrasing could take some of the following forms: (1)Tell us about your experience with our [system/site/app].; (2)Is there any feedback you would like to share?System or brand level satisfaction rating:These are best asked in the context of general proactive surveys or user invoked surveys, not task based proactive surveys.Task or feature level ease/effort/satisfaction:These are best asked in the context of task based proactive surveys.Reasons for satisfaction/dissatisfaction:If you're using a star or numerical rating question, follow up with a set of multiple choice options that include possible reasons for someone's rating, to contextualize the score.",
            "Verbatim/open ended:Generally, these are best written as non specific prompts for the user to describe their experience.It is best to avoid asking the user to providesuggestions for improvingthe system, as this is quite different than asking them to describe their experience.Phrasing could take some of the following forms: (1)Tell us about your experience with our [system/site/app].; (2)Is there any feedback you would like to share?",
            "System or brand level satisfaction rating:These are best asked in the context of general proactive surveys or user invoked surveys, not task based proactive surveys.",
            "Task or feature level ease/effort/satisfaction:These are best asked in the context of task based proactive surveys.",
            "Reasons for satisfaction/dissatisfaction:If you're using a star or numerical rating question, follow up with a set of multiple choice options that include possible reasons for someone's rating, to contextualize the score."
          ]
        },
        {
          "type": "p",
          "text": "Identify your target audience.Once you have aligned on a research objective, work with your engineering team to understand what data may be available to inform more targeted sampling and segmentation of your user base. Ensure your audience can be targeted by the feedback mechanism. For example, if you want to hear specifically from users who work on cases every day, ensure that data or instrumentation in the product supports segmenting the user base by role type. Explore other methods if your target audience cannot be reached via an In App Feedback mechanism. Outline a segmentation and sampling strategy.While collecting massive amounts feedback may sound exciting at first, this route can make analysis broad and cumbersome. Segmenting your users in specific ways enables you to collect more informed, actionable feedback. Take a look below for a few examples of potential sampling and segmentation strategies. A group of users who have completed a task or flow Trigger popup to 10% of users at first login Display mechanism to all users on the final page of a difficult flow or task Trigger model 25% of users who have used a feature 5 times Used to address feature specific research questions Refine and beta test new versions of a release or feature Resource intensive, requires more engineering work to implement the correct triggers Potentially small sample size if for a very specific set of tasks A random sample of the entire user base Trigger mechanism to 20% of all users Trigger mechanism to 10% of users who have logged in during the past month Large sample size and diversity of responses can make your data highly representative of overall audience Can collect lots of other usage data to support broader open-ended answers Sample may be too broad to address narrow research questions Possible to oversample or burn through sample without collecting meaningful information All users User inititiated mechanism behind an icon or menu item A user can give feedback at any time Builds trust and makes the user feel heard You will get a lot of responses, and if you don't have a plan to analyze all of the feedback, it is not worth the effort to build something like this It takes a lot of work post implementation to continue to derive value from the mechanism Identify additional data you want to collect.In addition to collecting feedback provided by the user, you could also collect a series of data points available through product instrumentation. For example, it may be useful to collect what version of a feature the user is using, how long the user has been using a specific feature or product, or how many clicks the user made on a specific page. Collecting additional data will make the feedback more actionable and facilitate deeper exploration of the data. After you launch your feedback mechanism, monitor incoming feedback and response rate while the mechanism is active. Be careful to not over sample your users. Have an intended sample size in mind before deploying the mechanism. Take the time to synthesize the feedback into meaningful, actionable insights, and share with relevant functional teams. Work with you research partners to align on insights and recommendations. After analysis, gather your insights and revisit your research objective. Determine whether it's necessary to revise the mechanism, keep it enabled as is, or disable the mechanism. When revising the mechanism, be sure to incorporate insights from past feedback. Next:Patterns"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/in-app-feedback/scenarios",
      "title": "In App Feedback Scenarios - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["The User Journey", "Scenarios"]
        },
        {
          "type": "p",
          "text": "In App Feedback should come together to create a cohesive experience for your users. There are many touch points to consider when implementing In App Feedback.  The overview of a basic user journey helps to define what that flow will look like for users and ensures that appropriate messaging and follow up is included. There are two strategies for triggering feedback mechanisms that we'll walk through in these scenarios: user initiated mechanisms and system initiated mechanisms. User Initiated Mechanisms:These mechanisms persist in the experience, allowing a user to provide feedback at any time through an easy access point. These feedback mechanisms allow you to meet the user where they are on their digital journey to capture a moment to moment reaction. These mechanisms are less interruptive for users than system initiated  mechanisms. System Initiated Mechanisms:Feedback mechanisms initiated by the system are generally reserved for high business impact research questions as they are more interruptive for users. System initiated mechanisms can leverage data to segment the user base and hear from specific audiences. These mechanisms generally do not persist in the experience. Once triggered, a user has the opportunity to provide feedback or may ignore or close the mechanism. Strategy:User initiated, in line component on a page Research purpose In line components allow you to engage with a specific set of people who visit a page or complete a specific flow, rather than gathering feedback site wide. In line components are great for capturing a reaction from your users about a specific interaction or series of interactions they may have had with the product. Example questions"
        },
        {
          "type": "list",
          "items": [
            "How helpful was this content? 1-5 rating - 1 (not helpful at all) 5 (very helpful)",
            "Help us understand the factors that informed your score (these can also be a rating scale)Time to completeLevel of difficulty",
            "Time to complete",
            "Level of difficulty",
            "Your feedback is valuable to us. We want to know what's working well and what we can improve. Anything else you want us to know? (open text field)"
          ]
        },
        {
          "type": "p",
          "text": "Building the mechanism The research purpose in this scenario is more targeted. The feedback launch point should be in a location in line with the content that it references, so that you are able to hear from the specific segment of users who interact with that content. The team can leverage usage data to only show the component to users who meet specific criteria. Once the user completes the question(s) and submits their feedback, the question may fade away or remain depending on the use case, and success messaging or a thank you message should appear for confirmation to the user. Teams can also use this space to socialize the User Research program if the user wants to continue to give feedback a more consistent basis. Depending on the research purpose, in line components may or may not appear the next time a user navigates to that same page. Strategy:User initiated, feedback behind a navigation element or icon Research purpose Persistent feedback mechanisms have a variety of uses, but mainly serve to give users an opportunity to freely voice their comments, concerns or questions about a specific moment using the product or overall experience. These mechanisms are best for capturing feedback from a broad audience over time. Example questions"
        },
        {
          "type": "list",
          "items": [
            "Your feedback is valuable to us. We want to know what's working well and what we can improve.",
            "What tasks were you trying to accomplish today? Did [product or service] allow you to successfully accomplish your tasks?",
            "What are some of the top challenges you are facing with [product or service]? What has been working well for you?"
          ]
        },
        {
          "type": "p",
          "text": "Building the mechanism Since the research purpose here is broad and user feedback can relate to a variety of topics, the feedback launch point should be global and accessible on all pages. This can be under a global menu, or any other set of global navigation items that appear on all pages of the application. A user can click on a menu item with a clear title about giving feedback. Strategy:System initiated, feedback during a task or flow Research purpose System triggered feedback can be intrusive and interruptive for users, so should be reserved for research questions with high importance and high impact. Example questions"
        },
        {
          "type": "list",
          "items": [
            "We're sad to see you leave. Help us understand why?Pre populated multiple choice with hypothesesOther",
            "Pre populated multiple choice with hypotheses",
            "Other",
            "Your feedback is valuable to us. We want to hear what was working well for you and what could be improved to ensure we're creating the best experience for our users.Open text field",
            "Open text field"
          ]
        },
        {
          "type": "p",
          "text": "Building the mechanism Since any system initiated mechanism could disturb the user or interrupt their workflow, try to choose moments that would be least interruptive to prompt the mechanism. Prompting the mechanism after a user completes a task or at first login before a user has started a task can help to limit the level of interruption to the user. Using containers that do not cover the full screen can also help to limit interruption. Or Strategy:System initiated, Net Promoter Score survey Research purpose The Net Promoter Score metric is used to measure a customer's loyalty to the company by asking the following question: Example questions How likely is it that you would recommend our company/product/service to a friend or colleague? The user can select a score between 0 and 10. This question can be included in other customer surveys, or run as a standalone NPS measurement, with follow up questions related to reasons that may have informed the score. Building the mechanism While it is best not to interrupt/prompt users in the middle of the flow, waiting until the final step could introduce biases (namely, over indexing on successful attempts and not hearing from users who abandoned or failed). So, we might consider presenting task based proactive surveys both: (1) At the end of the flow; (2) On exit/while backtracking (e.g., in a 3-step flow the user reaches step 2 but backtracks to step 1 or navigates to a different page). Next:Research Strategy"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/layout",
      "title": "Layout - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "A layout is a structural template that supports consistency across applications by defining visual grids, spacing, and sections. Before selecting a layout, review these guidelines:"
        },
        {
          "type": "list",
          "items": [
            "Know your use case.Understand how the information on the page will be used.",
            "Prioritize your content.Organize your content to highlight the most important information.",
            "Group related content together.Make it efficient for users to work with the content."
          ]
        },
        {
          "type": "p",
          "text": "Record layouts consist of a page header, a main content area and a sidebar. The content that should appear in each of these areas depends on the primary use case you are solving for. The page header above the content area extends across the entire viewport. When the user scrolls, the panel is fixed to provide locational context, but it shrinks to preserve vertical real estate. The main content area uses two-thirds of the viewport. The sidebar uses the other third, with a minimum width of 400px to maintain readability. If the reference layout appears inside of a Master/Detail, the sidebar collapses into a tab in the main content area. A workspace layout facilitates user collaboration on records. It highlights the activity and discussion that is happening around a record by placing this information prominently in the larger content area, while simultaneously displaying the related records in the sidebar. A summary of the recordâs details are in a panel above the content area for easy reference. A reference layout is optimized for when users are primarily jumping to related records. It highlights the related records by displaying this information in the larger content area. Collaborative items are placed in the smaller sidebar. A summary of the recordâs details are in a panel above the content area for easy reference. A list layout consists of a simple page header and body that allows users to switch between predefined lists of items. Common controls include sorting, filtering, charting, and actions for the item type. Users can also switch between list layouts using the âDisplayâ menu. Choose the types of list layout that best supports your use case:"
        },
        {
          "type": "list",
          "items": [
            "Tableâ Best for managing large sets of data and comparing values",
            "Boardâ Use to monitor a workflow or milestones where users can drag cards between stages to indicate progress",
            "Master-Detailâ Allows users to see and edit the details of an item on one screen"
          ]
        },
        {
          "type": "p",
          "text": "Use a table layout for flexibly viewing and managing large sets of data. The layout uses 100% of the viewport. Items are displayed as rows with their fields organized in columns. The columns are fixed width and use as much horizontal space as necessary. Columns do not resize when the window changes width. Users can choose which columns to show and how wide each column is. If the grid is wider than the viewport, users horizontally scroll to see more data. The table can be of infinite length. Data is loaded as the user scrolls. This lets your users access their data most efficiently. Avoid using manual pagination controls, which reduce efficiency. Use a board layout for items that are advancing through a linear workflow, such as a sales process, because it allows users to quickly move items between stages. The layout displays items in columns that are based on a picklist field on the object being viewed; a good example is the Stage field on a list of opportunities. Items are displayed as stacked cards in each column and can be moved between columns. Each column can optionally display an aggregate of any numerical data from that columnâs items, such as the total monetary value of a column of Opportunities. The minimum column width is 12rem, and the maximum is 25rem to ensure that cards are legible. If the columns donât fit in the viewport, users scroll horizontally to see more data. If the columns donât fill the viewport, they are expanded to their maximum width, and the area to the right of the last column remains empty. A master-detail layout is ideal for working through a queue of items because it allows the user to stay on the same screen while viewing and editing multiple items. The layout groups together two layout views with a one-to-many relationship. Selecting an item from the master view (which contains a list) causes the details of that item to be populated in the detail view, using a condensed reference or workspace layout. A master-detail layout is also useful for exploring a deeply nested tree, like a file system, by displaying a tree component on the left and a table component on the right. This allows users to jump between nodes in the tree and to simultaneously view the full contents of each node as a list. Master detail layouts work best on a larger screen (minimum of 1024px). If the screen is smaller, the two layout views should be defined as separate pages."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/loading",
      "title": "Loading - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Loading indicators help to reassure the user that the system is actively retrieving data. Show spinners when retrieving data or performing slow computations. Spinners are animated SVGs or GIFs. They reduce the use of awkward white screens and blank containers to communicate that the system is working. Use spinners when a component on a page is making an asynchronous update without refreshing the page. Center the spinner horizontally and vertically within the container. Donât place spinners directly over text or other visual elements on a page without first applying a light or dark mask. If necessary, you can use a text label to communicate what the system is doing, such as âUploading data â¦â Example Spinner Loading Process:"
        },
        {
          "type": "list",
          "items": [
            "Card Loading",
            "Lazy Loading",
            "List Loading",
            "Modal Loading",
            "Full Screen Loading"
          ]
        },
        {
          "type": "p",
          "text": "Stencils are placeholders that visually communicate that content is in the process of loading. Stencils abstractly represent what the resulting content layout will look like. Use stencils for full page refreshes, not asynchronous updates. Stencils offer a more visually appealing experience than dozens of spinners animating at the same time or a blank white page. Use stencils when data takes longer than 300 ms to retrieve. For less than 300 ms, just show the data. If the data takes 301 ms to load, the stencil fades-in promptly and then cross-fades to the data. Do not have a âwhite flashâ between stencils and data. If a component is only displayed when it has data, then donât show a stencil. Keep stencils simple and lightweight, by using simple, subtle shapes to indicate content, but donât include the placement of buttons and other UI elements. Keep the shape heights consistent to reduce visual noise. Stencils should be responsive and stretch to fill the container that they are in. Load stencils from the top left of the page to the bottom right. For table lists, donât fill the screen up with stencils. Render a table data row stencil 20 times and reduce the opacity of each row by 5% to create a fade effect from 100% to 0% opacity, giving an infinite data effect. (see example below) Feed fades out over five instances to indicate infinite scroll. Each related list shows one instance of the component-specific stencil."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/localization",
      "title": "Localization - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Salesforce is committed to providing a high-quality experience to international customers. Here are a number of guidelines for writing content for international audiences: For example, the color red is associated with warning and danger in Western cultures, while it symbolizes luck and happiness in some Asian cultures, like China and Japan. Language and country are different concepts. Flags are symbols that represent countries or nations while languages represent a shared method of communication between people. For example, Spanish is spoken in 29 countries and Spain is only one of them. Countries like Canada have more than 1 official language. Which language do you think the maple flag represents? When designing a language selector, use plain text despite its lack of visual appeal. Only use flags to represent countries, not languages. When English text gets translated to another language, the translated text can be as much as three times longer. Leave blank space around condensed UI components, such as buttons and tabs. Make UI components expandable whenever possible. Do not assign a fixed-width or height to your UI component unless you have a good reason. For longer text, wrapping is a good solution. Be aware of the potential vertical expansion since translated text will take more lines. Truncation with hover text can be a compromise. Be aware that this brings the risk of making the UI less effective. Another typical UI pattern that introduces a localization issue is the use of inline forms such as input fields or dropdown lists in the middle of a sentence. This problem is caused by the fact that most languages do not follow the same word order as English. Due to this fact, the inline forms need to be repositioned to accommodate correct sentence structure in translated text. When âFrom DATE1 To DATE2â is translated into other languages, for example Japanese, the word order will change to âDATE1 ãããDATE2 ã¾ã§â (DATE1 From DATE2 To), which will cause grammatically incorrect translation unless we reposition inline forms in Japanese specifically. This will require language-specific CSS, which increases complexity. Since repositioning inline forms per language is not practical and adds CSS maintenance costs, we suggest avoiding any UI components in the middle of a sentence. If you have to, consider using a colon to connect the label and UI component and try to make the label a full sentence. In the previous example, we can use âStart: DATE1 End: DATE2â to make the label more independent. Capitalization can be very tricky, even in English. There are different rules for capitalization at the title, header, and sentence level. These rules keep changing. In most English style guides, almost every word in a title or heading is capitalized except for articles and prepositions. Here is an example of dropdown in Chatter Feed. Every word in English is capitalized: In French, however, only the first word is capitalized. This also applies to other continental European languages (Spanish, Italian) and Nordic languages (Danish, Finnish, Norwegian). In fact, in many languages, capitalization is used less than in English. For example, a languageâs name, calendar months and organization names are capitalized in English, but none of these are capitalized in French. Due to these differences, itâs important that a developer avoids using CSS to handle capitalization. Leave capitalization up to the translators since they are the experts when it comes to styling rules in their own languages. Text alignment is a common styling in CSS and is widely used for UI text in components such as buttons, menus and tabs. As in text editors where you can use space to center a text, in CSS you can center text by adding padding to a component. But a simpler and more localization-friendly way is using CSS text align property. Here is an example of a case record from Milestone Tracker. The word âDone!â here is centered by adding a 40-pixel padding to the left and right as well as a width. This looks perfect in English; however, when âDone!â gets translated into Portuguese, the text becomes longer and begins to overflow. The hassle-free way to handle alignment is using the CSStext-alignproperty, which is a better solution than moving text over using padding. When UI text gets translated into another language, the text length often changes. For example, English is a very compact language, leading to longer translated text in most cases. The general rule for text expansion is: âthe shorter the English text, the longer the translated text is likely to beâ. The following table shows the average text expansion rate for different English text lengths fromIBMâs localization guidelines: In addition to English text length, the target language also has an impact upon the amount of expansion. The following table shows the expansion factor for the English text âShareâ into various languages: In general, Asian languages are more space-friendly since they tend to be more compact than European languages. But thereâs no âalwaysâ. CJK (Chinese, Japanese and Korean) languages have more complicated characters than Latin characters and their characters tend to be more square, thus taking more horizontal space. Japanese is especially problematic due to itâs use of Katakana for transliteration of foreign words. For example, âFollowâ in English and Japanese both have 6 characters, but Japanese is 20% longer than English due to wider characters."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/markup-and-style",
      "title": "Markup and Style - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Salesforce Lightning Design System (SLDS) component library is actively developed to enable Salesforce developers to create a uniform look and feel across all Salesforce-related applications while adhering to CSS best practices and conventions. In order to accomplish this goal, weâve chosen to use very specific naming techniques. These allow us to keep our code base flat, with low specificity, and keeps us from fighting specificity wars that start with frustration and end with!important. Though we base our naming on the BEM method, we have a few additions of our own outlined below. BEMis a well-known method of naming components â block, element, modifier. If youâre comfortable with BEM, move down to the âWhere we diverge from BEMâ section. For those unfamiliar or who need a quick refresh, letâs briefly look at how BEM works. As an example, weâll build a house component. A block represents the main component name. If you were building a house component, the class name would be.house. All of the properties you want included for all houses would be included in the base.houseclass. An element represents a part of a component and is separated by two underscores. The door of the house would be represented by the class.house__door. A window would be.house__window. Be careful to look for smaller component possibilities within a larger component. Especially if itâs a pattern that might be repeated in an unrelated component. Avoid using a class like.house__stair__step. Instead, either use.house__stair-step(a single dash does not indicate anything in BEM and can simply be used for compound naming). Or if the stair portion of the component might be used inside another component, make the.staira smaller component within the larger component and use.stair__stepas an element of it. A modifier is a component or element variation and is separated by a single underscore. The variation can apply to the overall component or it can be applied to an element within the component. Since the properties that should apply to every house are placed on the main.houseclass, all houses receive the.houseclass as the base. If there is a variation of a house â perhaps it is gray â the.house_grayclass would be added to the component in addition to the.houseclass. If the house has a pink door, a variation can be placed on the door element itself â.house__door_pink. In some cases, for reasons of brevity and comprehension, weâve added to, or deviated from, typical BEM naming conventions. These changes are outlined below. Though BEM syntax is traditionally based off an initial block, in some cases (in our utilities) we have opted to remove that requirement. For example, margin and padding are indicated with the formula.slds-m-top_medium(margin, top, medium). So while there is no base.slds-mor.slds-m-topclass as a base class, we feel itâs an easily understandable way to indicate that there is a size variation in these utility classes. Our spacing utilities similarly use the syntax.slds-size_1-of-2without a base.slds-sizeclass. Text sizing uses class names like.slds-text-body_smalland.slds-text-heading_largewithout a base.slds-text-bodyor.slds-text-headingclass. Though generic.slds-container-*classes exist, sometimes a component has an optional container â but it is specific to that component alone. Those containers should also be indicated by a class using a single underscore. For example, when a.pillhas an optional container applied, that class is written as.slds-pill_container. In order to make this framework easy to use with other frameworks, weâve added the.slds-namespace. Rather than using.button, our framework uses.slds-button. This allows you to integrate the Lightning Design System (SLDS) with your own bespoke CSS or to integrate it with an application that uses the modified Salesforce Bootstrap framework previously used as you wean your application away from it. In some cases, within the Salesforce ecosystem, SLDS CSS is not yet available. In those cases, for example, when building within Visualforce, Lightning Applications (my.app), or deploying components via Lightning Out, you should scope components built with SLDS. In this case, we haveprovided a tool for you to create your custom-scoped CSS. The components built with your custom-scoped SLDS will need your custom scoped class at the highest level of the DOM where the components are included. In some cases this will be a wrapper at the component level, in other cases you may wrap several components. Do not place your custom class on the body element of the application if you are including non-SLDS components within that area as well. This would cause the non-SLDS components to be scoped and could override expected styles with unwanted effects. When a component has a variety of states, we add a class to indicate the state the component, or certain portions of the component, are in. Some examples are:.slds-is-selected,.slds-is-active,.slds-is-expanded,.slds-is-nested,.slds-is-open,.slds-has-focus,.slds-has-error, etc. Please address any questions about our code style or contributing to our project to ourGitHub issues."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/a-conversation",
      "title": "A Conversation - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Empty States",
            "Real-time Actions",
            "System Messages",
            "Conversation Entries",
            "Summary or Highlights",
            "Post Conversation Actions"
          ]
        },
        {
          "type": "p",
          "text": "Conversations can be very complex. Consider the different states of a conversation (first time vs. continuation) as well as actions that can be taken during or after. Let's consider the actions and experiences of a particular conversationâacollection of conversation entries, or even an empty conversation. When a conversation is opened with no previous dialogue, what should the user see? A message (req), call to action (opt), or illustration (opt)âor should we prompt the next best action? (i.e. FB messenger asking you to \"wave\")"
        },
        {
          "type": "list",
          "items": ["First use", "User cleared", "Errors", "No results/data"]
        },
        {
          "type": "p",
          "text": "The actions that happen in a conversation may differ if it is actively happening or historical. There are several actions a participant might be able to take, especially in a business setting. Many times these actions will be initiated by the publisher, though they can be launched from other places as well."
        },
        {
          "type": "list",
          "items": [
            "Ability to transfer",
            "Flag supervisor for help",
            "Swarm around an issue with outside participants",
            "Reactions (emojis, likes, star/favorite)",
            "Screenshare"
          ]
        },
        {
          "type": "p",
          "text": "These are notifications about events that happen during the conversation. Example: Someone has joined, left, shared file, transfer, etc."
        },
        {
          "type": "list",
          "items": [
            "Often includes timestamp and description of the event or action (seeaction indicator)",
            "Can be used to indicate a user interaction, such as selecting an option from a list picker",
            "Participants joining or leaving"
          ]
        },
        {
          "type": "p",
          "text": "These are the individual messages sent back and forth. (Details in theMessage Entries Page. ) A real-time conversation might include highlights of why a customer is reaching out. Or a conversation that has already ended might include a summary of the full interaction. Similar to individual message entries, there may be different actions available to a full conversation history. Some might pose ethical concerns. Examples:"
        },
        {
          "type": "list",
          "items": [
            "Share conversation",
            "Save to library",
            "Export (could include a transcript, maybe audio or video files.",
            "Reactions (emojis, likes, star/favorite)"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/additional-accessibility-concerns",
      "title": "Additional Accessibility Concerns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Entering text Content",
            "Screen Reader Experience",
            "ARIA Assertive vs. PoliteâAssertive Will Interrupt Other Things Being Spoken",
            "Context MattersâWhere is the User Currently?",
            "Use of Sounds"
          ]
        },
        {
          "type": "list",
          "items": [
            "All images (including avatars) should have alt text.",
            "Consider how keyboard users will be able to navigate the messaging UI",
            "When utilizing a highlight, use <mark> tag to differentiate highlighted text from regular text"
          ]
        },
        {
          "type": "p",
          "text": "When typing a message, consider the impact keyboard commands might play for publishing. For example:Enter vs. Ctrl+Enterfor line break vs. submit, which one is used in which context? Can users toggle that interaction (like in LinkedIn messages) with something such as a checkbox? There should be a clearly documented keyboard spec of how one might navigate the different parts of a conversation using a keyboard. For example:Command/Ctrl+Enteris a common way to send a message without pressing send button What should be proactively announced to the screen reader? When a new message comes in or when there is a new system message? Should it announce the name of the sender or just the message? It can be overwhelming when too much is announced. For example: asking which option a user wants to choose and then reading all of the options out. If the user is active on the tab with the conversation, read it out immediately. If the user is in another tab, perhaps play a sound and read out the message or system message upon returning to the active conversation tab. If a structured content message is sent out including a question with a list of options, should ALL items be read out at once? Ideally, it should let the user know what is there and let them slowly explore the details rather than saying all of the content all at once. For instance: \"A carousel with 3 options was sent\". As opposed to reading out each card in the carousel automatically without pause. You will want to establish a point of view around when to use ARIA assertive vs. polite in real-time messaging as it will impact the user experience for those using screen readers. If a user is in a tab with Jane Smith and actively having a conversation with her, it makes sense that their screen reader would read out the message she sent since I am actively in the tab. However, if the Salesforce user is in another tab a ping might be more ideal. It would be nice to allow users to configure settings for sounds. If new messages play a sound, it could get very confusing if notifications from other tabs are also making sounds."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/conversation-publishers",
      "title": "Conversation Publishers - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Conversation Publisher AnatomyConsiderations for Content InputPrimary ActionsSecondary ActionsAbility to Select Which Channel to Send or Reply FromAbility to select TO and FROM",
            "Considerations for Content Input",
            "Primary Actions",
            "Secondary Actions",
            "Ability to Select Which Channel to Send or Reply From",
            "Ability to select TO and FROM"
          ]
        },
        {
          "type": "p",
          "text": "Conversation publishers are known by many names and range in complexity. This section covers the parts that can make up publishers from simple text input fields to enterprise-level dynamic publishers. In text-based messaging applications, a publisher is where users input message entries. This can include the text itself, or other more rich content, such as attachments and more. Sometimes publishers are also referred to as composers. For the purposes of this guideline, we are focusing on only text-based conversation UIs. The majority of the content will be input in a text area, so there are some things to consider: Is there a limit to the number of characters a user can send at one time? If so, this should be indicated with some sort of error messaging and/or character counter as the threshold is approached. Another thing to consider is that some channels will automatically break up content into separate conversation entries if a character limit has been reached. For example, the SMS character limit is 160. When you send an SMS Message over that limitthe message will be concatenated and split into chunks. If you can, try to make sure that the limitation of characters will be high enough that the majority of your users will not be impacted with it; and prefer the automatic splitting of the content into chunks vs. the character counter solution. Note:In addition to typing with a keyboard, text may sometimes be input by voice-to-text features. What are the primary message type actions available to users of your publisher? Examples include send, reply, reply all, forward, or an option to leave the conversation. If there is more than 1 option, consider how would they be selected. For instance, it could be buttons side by side or a button with a dropdown. Secondary actions might be dynamic actions, which are available is based on the channel. For instance, SMS does not allow for text formatting, but a native in-app conversation app might. Other secondary actions might include attaching files, hyperlinking, inserting knowledge articles, transferring, etc. Depending on the expected interaction when using secondary actions, consider the consistency of the user's experience. For instance, should clicking on attachments open a modal with a file picker? Would adding pre-saved \"quick text\" entries work the same? Or would it utilize a popover? In the enterprise world, channel switching is sometimes necessary. When a user reaches out via a real-time web chat and asks for proof of their purchase, an agent might want to send it via email, so that the user can access it at any time. Rather than opening a new tab and sending the email, the agent may want to stay within the publisher and simply change the channel that the message is sent from. For example, sending TO Jane Smith's personal WhatsApp FROM the UK support WhatsApp instead of sending TO Jane Smith's work WhatsApp FROM Global support WhatsApp. Although this guideline does not cover the intricacies of email patterns, this sort of selection is popular when a user has multiple accounts they can send to or from."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/message-entries",
      "title": "Messaging Entries - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Conversation Terms & DefinitionsContentParticipantAvatarLabelTyping IndicatorActions Available to Conversation EntriesAction IndicatorsTimestampConversation Entry AnatomyError Handling",
            "Content",
            "Participant",
            "Avatar",
            "Label",
            "Typing Indicator",
            "Actions Available to Conversation Entries",
            "Action Indicators",
            "Timestamp",
            "Conversation Entry Anatomy",
            "Error Handling",
            "Ethical Concerns",
            "Content Visibility",
            "Structured Content"
          ]
        },
        {
          "type": "p",
          "text": "The bulk of the messaging is comprised of conversation entries. This is \"what is said/sent\". In addition to entry types, this section touches on ethical concerns & content visibility Message entries go by many names: messages, conversations, transcripts, dialogs, and dialog groups to list a few. Each team or group may have different ways to refer to message entries, and for now, we don't have a POV on which term is best. We'll be using \"messages\" within this guideline for consistency, but keep in mind that some teams use different terminology. Individual message entries are usually represented as bubbles or line items that contain the content of the conversation. These entries are often grouped together, encompassing an entire conversation, though they can be used individually as highlights or \"snippets\" to summarize important takeaways. Some conversation applications have a feature to favorite, save, or pin particular message entries. What was said or sent, such as text, file attachments, or structured content. A user who says or sends content in a conversation. To start, you'll need to know who theparticipantsare. Since we will be focusing on the B2C conversation experience, you'll want to consider if this message UI is meant to support conversations between employee & customer, employee & employee, or customer & customer. Another important consideration is whether bots will be participants in the conversation. The first thing a bot should do is warmly introduce themselves to the user and clearly identify that they are a bot. This establishes trust with the user and sets the right expectations in the beginning. Giving your bot a name is a great way to personalize the bot. Try one that isn't too common of a human name to avoid triggering the uncanny valley. It's also a good idea to use a product logo or robot graphic for the bot avatar to keep things transparent. Helps break up conversation and quickly identify which participant said or sent something. If usingavatars, it is important to define a default/fallback. The users' initials are ideal, as they help identify the user and differentiate from others. Another common fallback is providing a default avatar photo if users are not uploading images for their avatar. Some conversation applications that use avatars will display them for all users. Others will intentionally only show the user the avatar(s) of other participants besides themself. For bot participants, the avatars need to indicate that the end-user is conversing with a bot. Avatars can be represented using circles or rounded rectangles. For example, Slack uses rounded rectangle-shaped avatars while Quip and Salesforce use circle-shaped avatars. Note:We design experiences for a range of visual abilities, and avatars won't be helpful for all users. This can be used to identify \"who is who\" in conversations as small as two and as large as a conference. For instance, the labels \"Agent\", \"Dedicated Rep\", \"VIP customer\", or \"Tier 1\" can be used to also quickly call out any pertinent information. An indicator for text-based channels or real-time transcription of audio that shows when a user is actively typing. There are someethical privacy concernsto be aware of when dealing with typing indicators. The actions that can be taken during a given message entry. Different circumstances may require different sets of available actions, so consider the following: Should actions differ from real-time to historical? Should users be able to edit, delete, share, pin, or bookmark messages? Do users need a \"Save to Library\" functionality to catalog good (or bad) examples from customer conversations? It's also important to consider how available actions might change based on the type of content, text might allow editing and forwarding actions, while images may allow drawing or saving actions. Consider how some of these actions fit into the Service or Sales use cases. We don't want agents or users to be able to modify or manipulate sent messages. An indication that shows if a message has been delivered, received, read, edited, or deleted. This can includesystem messages, such as when a user joins a conversation in addition to read receipts or even error messages related to sending or receiving messages. An indicator that shows the time when something was said or sent. Above are three images of simplified conversation entries. The first represents a threaded UI style and the other two represent chat bubbles. These styles will be discussed in more detail in a later section of this guideline. Messaging experiences should have a way to handle when a variety of errors occur. How and where the error is relayed to the user is important to consider. Often errors on a particular message entry will be expressed via text and an icon below the entry itself (where action indicators like read receipts are). With accessibility in mind, there should be a game plan on how a screen reader will be notified of errors. Examples of errors to consider for message entries include the following:"
        },
        {
          "type": "list",
          "items": [
            "Validation errors like too many characters, or incomplete email addresses",
            "Offline message waiting to finish sending",
            "Network connectivity issues",
            "Fetching detail errors"
          ]
        },
        {
          "type": "p",
          "text": "With read receipts and typing indicators, there might be ethical concerns around privacy. All parties should be able to configure if they want to turn this functionality off. Enabling users to take edit or delete actions on a message that has already been sent (and seen) can bring up ethical concerns around the integrity of this data. For instance: allowing a participant to edit what they said for internal communication (such as Slack) is generally fine, as they might have made a typo or said something unclearly. However editing an entry between an employee and a customer is changing the source of truth, potentially covering up something that should not have been said, or skewing the analysis later on. The same goes for simply deleting something that was said in a conversation between, say, an agent and a customer. Showing metadata of how many times something has been edited/deleted and recording every edit might be a way to allow for the integrity of data. If a revision history is not feasible, disabling users from editing or deleting messages once they have been seen by at least one other participant can also be a way to mitigate the concern of data integrity. Another option is to include an 'Undo' option immediately after delivering a message, which will be visible for a few seconds. This way your users will be able to correct mistakes when they accidentally happen in real-time, but won't be able to edit or delete the message afterward. In some instances, particularly in conversations with multiple users, there is content that not all participants can see. For example:"
        },
        {
          "type": "list",
          "items": [
            "A bot might send a message to only some participants, such as a reminder, an insight, or a warning.",
            "In situations where a user is being managed by a supervisor, there might be messages sent back and forth in the context of the conversation that only the agent/rep and the supervisor see, but are invisible to the customer. This is a common feature for service use cases and is referred to as supervisor whispers and agent flagging."
          ]
        },
        {
          "type": "p",
          "text": "Structured content is inherently more complex than sending a text message, that's why previews should be available before a user commits to sending. This preview might show up in the publisher to introduce friction for the sender, minimizing the risk of accidentally sending the wrong thing. Structured content might include rich interactive messages such as list pickers, carousels, E-commerce checkout, rich links, quick replies, or attachments (like Salesforce data). It's important to keep in mind that there are channel-specific requirements and fallbacks for how to handle all types of structured content. When a user pastes a link mid-sentence vs. stand alone or at the end of a message, there are some best practices to consider. Links sent in isolation, at the start of a message, or at the end, should be sent as separate messages from other text and rendered as rich links. Links sent in the middle of a statement likewww.this.comin the context of this paragraph render only as URLs and do not send separately as rich links."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/messaging-ui-styling",
      "title": "Messaging UI Styling - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Styling OptionsThreaded UIChat Bubble",
            "Threaded UI",
            "Chat Bubble"
          ]
        },
        {
          "type": "p",
          "text": "Different messaging UI styles should be determined based on many criteria, and a seemingly simple visual change can affect how messages are grouped (or not), searched, and so much more. Implementing the right approach to your messaging UI styling can make the difference between simply enabling users to \"get the job done\" and providing an outstanding experience that reduces the time needed to do the job and increases user and company satisfaction. When considering which transcript UI style to go within, keep in mind that as a platform, we support many channels, all of which have unique ways of handling things. One of Salesforce's value propositions is standardization across channels. That means that if a user is able to interact with transcripts from multiple different channels (voice calls, social messages, support chats, emails, etc),there should be a level of consistency. Simply utilizing the customer-facing UI for every individual channel creates inconsistent experiences, context switching and can hinder our users' ability to do their job efficiently. In general, threaded/line-item style UI is ideal for longer-term conversations. The thread-centric design creates an opportunity to efficiently collaborate asynchronously. For example: Slack and email use threading to group together a conversation around a particular subject. As an enterprise platform, our customers have more complex jobs to be done around a conversation. This can involve additional participants being added to collaborate asynchronously, managers providing feedback on the way a conversation was handled, searching and filtering across all conversations to find trends, and more. Due to the nature of the Salesforce platform, utilizing a threaded UI for conversational messaging can provide a solid foundation for enabling these jobs. Most short-term, casual, and social interactions are displayed using a chat bubble. That makes this pattern great for peer-to-peer applications. Think of text messages and Social Media direct messages. While there are newer patterns in the industry around \"replying to\" a previous message within a chat bubble, it is not ideal for more elaborate collaboration. Often, the conversation flow is interrupted and a duplication of a previous message is displayed in order to provide context for the user when \"replying to\" another message. In short, a chat bubble is not ideal for conversations that might require collaboration. Chat bubbles can be a great solution for a customer app, while a threaded UI is better suited to handle conversations on the Salesforce user side."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging-ui/overview",
      "title": "Messaging UI - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "What's Included", "What's Not Included"]
        },
        {
          "type": "p",
          "text": "Design and understand the user experience of messaging within a user interface. Messaging, or a conversation experience is any time users and customers converse with each other (generally in real-time). Conversations can be session-based with a distinct start and end, or more asynchronous in nature where participants can respond and engage through text, voice, or video, as they're available, without worrying about the session ending. This guideline will support you and your teams in creating rich, consistent, and powerful messaging experiences across Salesforce, as well as lay out a model for what conversational experiences should be across Clouds. This guideline covers messaging UI (what the conversation and interactive areas look like) and messaging UX (how participants engage in conversing and utilizing its capabilities). More specifically, this focuses on first-party Salesforce messaging experiences that deliver active, text-based conversation between a business and customer. Chat & Omni in Salesforce, Mobile & Web chat for customer experiences, and historical transcripts of text-based conversation. With any messaging application, there are common features, UIs, and overall patterns that should be taken into account. We will not (yet) cover experiences outside of text-based conversations such as commenting, Chatter feeds, email, voice, or video conversation experiences. Some of the familiar patterns utilized in Slack will also not be covered in detail. For instance, threading, search, channels, pinning, and workflows will not be covered. Conversation Design,the practice of designing language-driven interactionsthat live within a graphical interface or otherwise, will likewise not be covered here."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/alerts",
      "title": "Alerts - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Alert in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Alertscommunicate a state that affects the entire system, not just a feature or page. It persists over a session and appear without user initiating the action. Note:Alerts are part of system messaging and are handled internally by Salesforce. Partners building apps that appear within Salesforce shouldnât use alerts."
        },
        {
          "type": "list",
          "items": [
            "Visual:Visible",
            "Voice & Tone:Informational",
            "Motion:Delicate",
            "Duration:Permanent",
            "Audio:Muted"
          ]
        },
        {
          "type": "p",
          "text": "An alert persists over a session and appears without user initiating the action. It communicates system-level messages that are relevant to the user regardless of their place in the application. An alert can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Error:to tell the user that they cannot proceed with their Salesforce experience, e.g. due to an outdated browser.",
            "Informational:to show admin-related status (e.g. logged in as a user), system maintenance, etc.",
            "Offline:to inform the user that they are in offline mode.",
            "Warning:to warn the user of potential issues with their Salesforce experience, e.g. due to an outdated browser."
          ]
        },
        {
          "type": "p",
          "text": "Alerts appear as soon as the user logs in as a full-width strip above the global header. They persist while a user is logged in, and are generally not dismissible. Alerts are dismissible only if they communicate future impact to the system, but has no bearing on the system at the moment, e.g. notifying users of scheduled maintenance."
        },
        {
          "type": "list",
          "items": [
            "Douse alerts sparingly.",
            "Dokeep the UI text short. If needed, include a link to let the user take an action or read the message in more details."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse alerts as a feedback mechanism. Look intoinline text,popover,toast, ormodalinstead.",
            "Do notmake alerts dismissible if the message remains relevant to the user while they are logged in."
          ]
        },
        {
          "type": "list",
          "items": ["100% width", "No icon"]
        },
        {
          "type": "p",
          "text": "UI text can vary greatly case to case, depending on the context. The guidelines below serve as examples, but you are not limited to them. Refer to this code samplefor the alert markup."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/illustration-inline-text",
      "title": "Illustration & Inline Text - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Illustration & Text in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Illustration & Inline Textwork in tandem to communicate a state in a more friendly way."
        },
        {
          "type": "list",
          "items": [
            "Visual:Pronounced",
            "Voice & Tone:Informational",
            "Motion:Static",
            "Duration:Permanent",
            "Audio:Soft (or Vibrate)"
          ]
        },
        {
          "type": "p",
          "text": "Illustration & inline text is used to show one of these states:"
        },
        {
          "type": "list",
          "items": [
            "Empty:when there is no record in the current page or there isnât any item that needs attention.",
            "Informational:when system is under maintenance.",
            "Error:when a page is not found, user doesnât have sufficient privilege, or other miscellaneous error (often related to inaccessible content)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Douse illustrations to soften negative impacts on the user. When a user expects to see an item but finds out that they canât, the experience leaves a negative impression on themâillustrations help reduce this.",
            "Doinclude actionable text to guide the user. For instance, if the user is seeing an empty list page, include a link in the accompanying text to create a new record."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse illustrations inside related lists or cards. For these,plain inline textis enough.",
            "Do notdisplay more than one illustration component on a page. Illustrations should not be competing with each other for user attention.",
            "Do notuse illustrations as feedback for direct CRUD actions. Look intotoastsorpopoversinstead."
          ]
        },
        {
          "type": "p",
          "text": "Illustrations can either exist as a full page, in the main body, or in the sidebar. In general, illustration & text show one of three states (empty, informative, or error), but the individual illustration & UI text will vary depending on the context. Below are some commonly used examples, but you are not limited to these variants. No opportunities to display. No updates here yet. Sorry for the inconvenience. Weâll be back shortly. Letâs get you authenticated. Maybe the page was deleted, the URL is incorrect, or something else went wrong. If you know the page exists but you still canât get to it, pleasevisit our support page. If you think you should have access, ask your admin for help. Sorry about that. The data youâre trying to access isnât available. It might be due to another user deleting it or a system error. If you know the data isnât deleted and you canât get to it, please visit oursupportÂ page. You may not have access to the items this walkthrough points to.Ask your administratorfor the appropriate permissions for this feature and try again. The page didnât load. Please try again later. Sorry for the inconvenience. Weâll be back shortly."
        },
        {
          "type": "list",
          "items": ["300px max width", "180px max height", "Smaller text"]
        },
        {
          "type": "p",
          "text": "UI text can vary greatly case to case, depending on the context. The guidelines below serve as examples, but you are not limited to them. Letâs get you authenticated. Connect to Google Drive"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/inline-text",
      "title": "Inline Text - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Inline Text in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Inline textcommunicates messages in an non-blocking way. Itâs displayed inline and doesnât block any other part of the interface."
        },
        {
          "type": "list",
          "items": [
            "Visual:CamouflagedâVisible",
            "Voice & Tone:(Varies per circumstance)",
            "Motion:Static",
            "Duration:Permanent",
            "Audio:Muted"
          ]
        },
        {
          "type": "p",
          "text": "Inline text can be more hidden or visible (depending on the context), but itâs always displayed inline, inside a UI component or next to another UI component. The text should blend with the surrounding UI, except for error states. Inline text can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Empty:when data is absent or unavailable.",
            "Error:when the system cannot load content, or when a form field is problematic.",
            "Informational:when an item has an atypical status, e.g. duplicates.",
            "Transient:when the system is processing an action, e.g. saving, loading, sending email, etc."
          ]
        },
        {
          "type": "p",
          "text": "For an empty state that affects the whole page, consider usingInline Text + Illustration. For form error, the message is displayed in red and typically used in conjunction with apopover. Inline text can appear in many different contexts. Refer to the variants sections below to see the different examples."
        },
        {
          "type": "list",
          "items": [
            "Dokeep it short. 1â2 sentences is sufficient for most use cases.",
            "Douse a different color when displaying error messages."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notdepend on inline text if the message is more urgent, e.g. warn when user is about to delete a record.",
            "Do notvisually differentiate inline text too much from the surrounding UI. Avoid significant changes, e.g. bigger font size, inverted background colors, etc. At most, the text should change color (for errors).",
            "Do notuse animation/motion to display inline text. At most, it should fade in/out for transient states."
          ]
        },
        {
          "type": "p",
          "text": "No next steps. To get things moving,add a taskorset up a meeting. This idea has been merged into another idea. To comment or vote on this idea, please visitOpen links in Console. No next steps. To get things moving,add a taskorset up a meeting. Canât load contact.Try again? Review the following errors. It looks as if duplicates exist for this lead.View Duplicates. 3 of 10 files selected Savingâ¦ 3 potential duplicates found. There are no special variants for text messaging component in mobile. Just as it is in desktop, the text should adapt to the surrounding UI. Text can vary greatly case to case, depending on the context. The guidelines below serve as examples, but you are not limited to them. Refer to this code samplefor basic text markup. In general, the messaging text should conform to the text specifications within that UI component. If itâs a component that normally doesnât have text, treat the messaging text as regular body text. If itâs an error, add the specs below."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/modals",
      "title": "Modals - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Modal in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Modalcan show an action in progress, confirm a user action, or communicate about an error."
        },
        {
          "type": "list",
          "items": [
            "Visual:Pronounced",
            "Voice & Tone:Informational",
            "Motion:Dramatic",
            "Duration:Permanent",
            "Audio:Soft (or Vibrate)"
          ]
        },
        {
          "type": "p",
          "text": "In the context of messaging, a modal can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Transient:when a user is uploading files.",
            "Warning:when a user tries to commit a destructive action (e.g. deleting a record), complete an action that has major impacts (e.g. sending an email to all 100,000 subscribers), or abandon an incomplete action (e.g. leaving an unsaved form)."
          ]
        },
        {
          "type": "p",
          "text": "Modals behave the same whether theyâre used as a create/edit container or as a messaging container. Use the default modal component specs plus the animation specs (seeRecommended Specs)."
        },
        {
          "type": "list",
          "items": [
            "Douse modals only when needed to convey progress, confirmation, or an error. A user shouldnât see multiple warning modals in one flow.",
            "Doplace the action buttons on the bottom right, consistent with the overall modal pattern.",
            "Domatch the title and action button label. For instance, if the modal title is âDelete contact?â the action button should say âDelete.â"
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse a modal to notify the user of a successful action, such as âContact was added to the opportunity.â Use atoastfor that instead.",
            "Do notfocus the cursor on the action button. A user that relies on keyboard a lot may accidentally confirms the action."
          ]
        },
        {
          "type": "p",
          "text": "N/A (There is only one UI version of the modal, but the UI text will change depending on the context) Are you sure you want to delete opportunity âTesla CloudHub + Anypoint Connectorsâ?"
        },
        {
          "type": "list",
          "items": [
            "Smaller title",
            "Full-width buttons",
            "Donât include body text unless it adds crucial information about the result of the action"
          ]
        },
        {
          "type": "p",
          "text": "Refer to this code samplefor the modal markup. Modals behave the same whether theyâre used as a create/edit container or as a messaging container. Use the default modal component specs plus the animation specs below."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/notifications",
      "title": "Notifications - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Notification in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Notificationinforms users of relevant activities across the board by surfacing actionable information & shortcuts."
        },
        {
          "type": "list",
          "items": [
            "Visual:Visible",
            "Voice & Tone:Informational",
            "Motion:StaticâDelicate",
            "Duration:Dismissible",
            "Audio:MutedâSoft (or Vibrate)"
          ]
        },
        {
          "type": "p",
          "text": "Notifications let the user know when there are updates to items that are relevant to them. This includes the following:"
        },
        {
          "type": "list",
          "items": [
            "@ me. A userâs name is mentioned in an item, or an item is assigned to the user.e.g. Sally Smith mentioned you in a comment: â@John Doe can you postâ¦â",
            "Custom criteria. An item meets the custom criteria set by the user.e.g. let me know when this opportunity reaches ânegotiationâ stage.",
            "Approval. A user needs to approve an item, or the userâs requested approval is completed.e.g. you need to approve a 15% discount for âACME - 100 widgets.â",
            "Reminder. An event or deadline is coming up.e.g. you have 7 days left to update your health insurance information.",
            "Process update. A process that the user initiated is either successfully completed or has errors.e.g. data import is complete.",
            "Product announcement. The application needs to inform the user of product-related news.e.g. read the release notes for Summer â17."
          ]
        },
        {
          "type": "p",
          "text": "Notification is composed of two elements:"
        },
        {
          "type": "list",
          "items": [
            "Icon:shows a counter with the number of unread notification items.",
            "Tray:contains all the notification items that the user has received."
          ]
        },
        {
          "type": "p",
          "text": "The notification icon resides in the header and clicking on it toggles the tray on and off. When a new notification item comes in, a counter will be added to the icon; when there are multiple new items, the counter is updated accordingly. Each notification item in the tray links to the affected item respectively. A notification item can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Error:when a process that the user initiated (e.g. data import) has errors.",
            "Informational:when a relevant activity happens in a different part of the application. This will be the case for most notifications.",
            "Success:when a process that the user initiated (e.g. data import) is successfully completed."
          ]
        },
        {
          "type": "list",
          "items": [
            "Doinclude inline actions when appropriate, so the user can resolve an item immediately; e.g. a record needs your approval - âapproveâ or âreject.â",
            "Doallow user to mute individual notification items.",
            "Dobatch notifications for the same item to minimize noise."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse notifications as a feedback mechanism. Look intoinline text,popover,toast, ormodalinstead.",
            "Do nottreat notifications as a single source of all activities. Notifications are highly customizable and a user may choose to mute certain items.",
            "Do notoverload the user. Be selective with what you choose to send via notifications.",
            "Do notinclude multi-step actions in a notification item. Include only one-step actions, e.g. approve or reject, check off task, etc."
          ]
        },
        {
          "type": "list",
          "items": [
            "Kelly Chan mentioned you in a comment:I just got off a phone call with the east Coast team to follow up on this. I think the best thing we can do right now is put together another report for the client, but wait until after the long weekend to share it with them.10m agoShow More"
          ]
        },
        {
          "type": "list",
          "items": [
            "Description of iconJohn Doe needs your approval:ACME - 100 widgets10m agoApproveRejectShow More"
          ]
        },
        {
          "type": "list",
          "items": [
            "Description of iconBob Belcher assigned you a task:Did you complete this task?Prepare report for Q1 2016 by June 110m agoShow More"
          ]
        },
        {
          "type": "list",
          "items": [
            "Description of iconâSummer 2017â met its members goal:5,142 / 5,00010m agoShow More"
          ]
        },
        {
          "type": "p",
          "text": "A notification item isnât displayed differently whether itâs showing an informational or success message. It will still havecomponent states(unread, hover, etc.), however. In mobile, the notification tray acts a little differently from its desktop equivalent. Instead of floating above the page, the notification tray in mobile slides in from the right to reveal the items. Additionally, keep in mind that depending on their settings, a user may receive OS-level notification on their phone when they are not in the application. Refer to this code samplefor the notification markup."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/overview",
      "title": "Messaging Components - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "There are a number of messaging components available for use. To choose a messaging element, you can refer to either Components orStatesas a starting point. Each component haspropertiesthat determine their prominence. For example:"
        },
        {
          "type": "list",
          "items": ["Camouflaged", "Visible", "Pronounced"]
        },
        {
          "type": "list",
          "items": ["Conversational", "Informational", "Imperative"]
        },
        {
          "type": "list",
          "items": ["Static", "Delicate", "Dramatic"]
        },
        {
          "type": "list",
          "items": ["Temporary", "Dismissible", "Permanent"]
        },
        {
          "type": "list",
          "items": ["Muted", "Soft (or Vibrate)", "Loud"]
        },
        {
          "type": "p",
          "text": "These properties are mapped to each component. Below is an example for âinline textâ component."
        },
        {
          "type": "list",
          "items": [
            "Visual:CamouflagedâVisible",
            "Voice & Tone:ConversationalâInformational",
            "Motion:Static",
            "Duration:Permanent",
            "Audio:Muted"
          ]
        },
        {
          "type": "p",
          "text": "Once everything is mapped, an order emerges."
        },
        {
          "type": "list",
          "items": [
            "Inline Text",
            "Popovers",
            "Notifications",
            "Toasts",
            "Alerts",
            "Illustration &Â Text",
            "Modals",
            "Prompts"
          ]
        },
        {
          "type": "list",
          "items": [
            "less interruptive",
            "occupies a smaller section of the page, either as a component, alongside another component, or in aÂ âcardâ",
            "is temporary, dismissible, or displayed inline"
          ]
        },
        {
          "type": "list",
          "items": [
            "âin-your-faceâ",
            "occupies the whole page or a large amount of space",
            "is either permanent or forces the user to take an action before disappearing"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/popovers",
      "title": "Popovers - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Popover in Context",
            "Dos and Dont's",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Popoverscalls attention to a problem or a potential problem with a field or record."
        },
        {
          "type": "list",
          "items": [
            "Visual:Visible",
            "Voice & Tone:ConversationalâInformational",
            "Motion:StaticâDelicate",
            "Duration:Dismissible",
            "Audio:Muted"
          ]
        },
        {
          "type": "p",
          "text": "A popover can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Error:to communicate error messages after a user submits their data.",
            "Warning:when the system nudges the user to engage with a record that hasnât had recent activities."
          ]
        },
        {
          "type": "p",
          "text": "A popover contains a title and body with optional inline links. In error scenarios, a red alert icon is displayed to the left of the action buttons (typically Save and Cancel). The popover is also red and appears above the icon. An error popover is displayed in conjunction with one or more field level error messages. This is more noticeable than an inline message but still doesnât block other components. Show error popovers by default (after user submits the form, if there are errors). In case of multiple errors, the body text can be a bulleted list. In engagement/warning scenarios, the relevant item displays a yellow alert icon, and the popover typically appears to the right of the icon. Users display engagement popovers by clicking the icon. Donât show engagement popovers by default."
        },
        {
          "type": "list",
          "items": [
            "Douse animation to show/hide the popover.",
            "Domake sure that links and the close button inside the popover are accessible via keyboard."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse error popover outside of forms.",
            "Do notuse warning popover liberally. Make sure the criteria for calling a warning popover is flexible enough so the user doesnât constantly feel pestered."
          ]
        },
        {
          "type": "p",
          "text": "N/A (do not use this pattern in mobile)"
        },
        {
          "type": "list",
          "items": [
            "Name cannot contain letters",
            "Email is not in the correct format"
          ]
        },
        {
          "type": "p",
          "text": "Refer to this code samplefor the popover markup."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/prompts",
      "title": "Prompts - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Prompts in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Promptsalert users to system-related issues and updates. Note:If youâre a partner building an app that appears within Salesforce, donât use this component."
        },
        {
          "type": "list",
          "items": [
            "Visual:Pronounced",
            "Voice & Tone:(Varies per circumstance)",
            "Motion:Dramatic",
            "Duration:Permanent",
            "Audio:Loud"
          ]
        },
        {
          "type": "p",
          "text": "Prompts appear when the system needs to communicate a message to the user; it doesnât show up as a result of user action. Prompts should appearrarelyand generally should not be a part of a typical user flow. Prompts do not have a close (Ã) button. To dismiss a prompt, the user needs to hit the action button inside of the prompt. A prompt can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Error:when the system is running into a system issue that may prevent the user from moving forward properly.",
            "Informational:when the system needs to relay system-related information that isnât necessarily work-stopping."
          ]
        },
        {
          "type": "list",
          "items": [
            "Douse prompts sparingly. They should not be your first choice to display system messaging because they interrupt the user and block everything else on the page.",
            "Dosolicit user feedback in prompts when it makes sense. When an unexpected system error happens, for example, user feedback may be a good way to identify the issue."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse prompts as a confirmation for user action, e.g. warning before user deletes an item. Use astandard modalinstead for this.",
            "Do notstack multiple prompts."
          ]
        },
        {
          "type": "p",
          "text": "Sunday March 15, 08:00 AM PST â 10:00 AM PDT Please be advised that salesforce.com will be performing scheduled maintenance during the above time period. Salesforce.com may be intermittently unavailable or slow during this period. For security, we log you out if youâre inactive for too long. This page has an error. You might just need to refresh it. First, would you give us some details? (Weâre reporting this as error ID: 7491d3-88xd-5obnp034271twp). Unfortunately, there was a problem. Please try again. If the problem continues, get in touch with your adminstrator. Sunday March 15, 08:00 AM PST â 10:00 AM PDT Please be advised that salesforce.com will be performing scheduled maintenance during the above time period. Salesforce.com may be intermittently unavailable or slow during this period. Sunday March 15, 08:00 AM PST â 10:00 AM PDT Please be advised that salesforce.com will be performing scheduled maintenance during the above time period. Salesforce.com may be intermittently unavailable or slow during this period."
        },
        {
          "type": "list",
          "items": ["Smaller title", "Full-width button"]
        },
        {
          "type": "p",
          "text": "UI text can vary greatly case to case, depending on the context. The guidelines below serve as examples, but you are not limited to them. Sunday March 15, 08:00 AM PST â 10:00 AM PDT. Please be advised that salesforce.com will be performing scheduled maintenance during the above time period. Salesforce.com may be intermittently unavailable or slow during this period. Refer to this code samplefor the prompt markup. Use the default prompt component specs plus the animation specs below."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/components/toasts",
      "title": "Toasts - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Usage",
            "Prompts in Context",
            "Dos and Dont's",
            "Variants - Component",
            "Variants - State",
            "Variants - Screen Size",
            "UI Text",
            "Recommended Specs"
          ]
        },
        {
          "type": "p",
          "text": "Toastserves as a feedback & confirmation mechanism after the user takes an action."
        },
        {
          "type": "list",
          "items": [
            "Visual:Visible",
            "Voice & Tone:Informational",
            "Motion:Delicate",
            "Duration:Dismissible",
            "Audio:Soft (or Vibrate)"
          ]
        },
        {
          "type": "p",
          "text": "A toast appears in reaction to user action: creating, editing, deleting. For example, a user edits an opportunity via a modal and saves it. The modal closes and the toast appears at the top of the opportunity detail page. A toast can show one of the following states:"
        },
        {
          "type": "list",
          "items": [
            "Error:when a user completes an action, but system-related issues prevent the action to be truly executed.",
            "Informational:when a user completes an action, but there are some additional info to be shown.",
            "Success:when a user completes/executes an action.",
            "Warning:when a user cannot complete an action due to external factors (e.g. permission) rather than something they can fix right away (e.g. form error)."
          ]
        },
        {
          "type": "p",
          "text": "Toasts persist at the top of the page regardless of scrolling, and they are visible until a user dismisses them or the defined duration elapses. They show 1â2 full sentences (no truncation), including an inline link (when appropriate), and an X to close. Toasts on desktop include an icon denoting the type of message, but toasts on mobile donât include one. The width of a toast is determined by the length of its content and its inside padding, but at minimum it should be 480 px and centered within the canvas of the page."
        },
        {
          "type": "list",
          "items": [
            "Dobatch toasts of the same type to minimize the number of toasts that appear.",
            "Dostack multiple toasts if you have more than one type appearing. Show the most recent on top and the rest underneath it in chronological order."
          ]
        },
        {
          "type": "list",
          "items": [
            "Do notuse toasts to confirm success when a create action brings the user to the newly created item. For example, creating a new record from a list view leads to the new record, so a toast is unnecessary.",
            "Do notshow toasts after inline edit. Returning to view state is indication enough that the changes were successfully submittedâif the form didnât save properly, it would still be open (+ error popover& message).",
            "Do notkeep toasts after the user navigates away. A toast displays status thatâs only relevant to the current page they are on; if they move to a different page, the toast message is no longer relevant."
          ]
        },
        {
          "type": "p",
          "text": "258 contacts were already added and they remained as is."
        },
        {
          "type": "list",
          "items": [
            "90% width",
            "No icon",
            "Smaller, left-aligned text",
            "No description text"
          ]
        },
        {
          "type": "p",
          "text": "Basic rules around UI text in toast:"
        },
        {
          "type": "list",
          "items": [
            "The syntax is as follows:Â«record typeÂ»Â Â Â Â«record nameÂ»Â Â Â Â was/were Â Â Â Â«past tense actionÂ»",
            "If the action is create a record, the newly created record should be linked. Otherwise, the affected record should be shown inside quotation marks, but not linked.",
            "If the action affects multiple recipients, the first one should be listed, and the rest should be shown as âX othersâ and linked."
          ]
        },
        {
          "type": "p",
          "text": "Refer to this code samplefor the toast markup. All Toasts need to have a close âxâ icon button so that users can dismiss them. All Toasts should persist (be sticky) until the user closes it except for the Success Toast without a link. Success Toasts can auto-dismiss after 3-5 seconds When Toasts appear, keyboard focus should not move to them. Users should pressCmd + F6to quickly jump between the main app and the toast container if they want to access any links inside the Toast or dismiss it."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/overview",
      "title": "Messaging Overview - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Lightning Messaging Framework is a design guideline for messaging patterns in the Salesforce ecosystem. Effective messaging instills trust in the system, communicates relevant information, & creates moments of delight for the user. How do I determine the appropriate messaging forxwhenyhappens?"
        },
        {
          "type": "list",
          "items": [
            "Select the appropriatemessaging typebased on userâs interaction with the application",
            "Pick amessaging componentfrom the category thatâ¦Makes sense given the user flow & the UIHas the appropriate level of prominence",
            "Makes sense given the user flow & the UI",
            "Has the appropriate level of prominence",
            "Examine whichmessaging statebest characterizes the message."
          ]
        },
        {
          "type": "p",
          "text": "Keep these principles in mind when you design messaging for your feature/product"
        },
        {
          "type": "list",
          "items": [
            "Timely, not noisy.Deliver messages at the right time. Not every interaction requires messaging to go with it.",
            "Informative, not verbose.Say whatâs necessary and not much more.",
            "Actionable, not static.Enable shortcuts for relevant actions to improve efficiency.",
            "Cross device, not duplicative.When appropriate, alert users on all their devices, but clear the messaging once user has read it."
          ]
        },
        {
          "type": "p",
          "text": "Icons may be used in messaging components. Follow these guidelines when deciding which icon to use in your messages. A salesperson just got off a call to discuss a potential sale of 100 widgets with ACME thatâs been in the pipeline for a while. The sale finally went through, but some of the numbers also changed. She goes into the application and updates this record so the data is properly tracked.What should be the applicationâs response to show that the record is saved? First, examine the user interaction in this flow to determine the messaging type."
        },
        {
          "type": "list",
          "items": [
            "User initiated the interaction.",
            "Since it is user-initiated, the possible messaging types for this flow are âaccessâ and âfeedback.â",
            "The record is accessible, and the user successfully saves their changes. Given that, we are left with one option.",
            "Messaging Type: Feedback"
          ]
        },
        {
          "type": "p",
          "text": "Next, letâs take a look at the components."
        },
        {
          "type": "list",
          "items": [
            "Based on the guideline, we have these components available for feedback messaging: text, popover, toast, & modal.Inline Textis used for empty and inaccessible states in feed/card/related list, field-level error message, or in-between states (saving, loading, etc.). We need something more prominent to display a success message.Popoveris used to either âengage the user and nudge them to take an actionâ or âcommunicate error messages after a user submits their data.â Neither of which applies to this example.Toastserves as a âconfirmation mechanism after the user takes an actionâ¦ [and] in conjunction with create/edit/delete actions.âModalacts as âa warning mechanism to ensure the user action is intentional and not accidental.â In this case, the action is completely intentional (editing the record) and no warning is needed.",
            "Inline Textis used for empty and inaccessible states in feed/card/related list, field-level error message, or in-between states (saving, loading, etc.). We need something more prominent to display a success message.",
            "Popoveris used to either âengage the user and nudge them to take an actionâ or âcommunicate error messages after a user submits their data.â Neither of which applies to this example.",
            "Toastserves as a âconfirmation mechanism after the user takes an actionâ¦ [and] in conjunction with create/edit/delete actions.â",
            "Modalacts as âa warning mechanism to ensure the user action is intentional and not accidental.â In this case, the action is completely intentional (editing the record) and no warning is needed.",
            "From the list above, it seems like toast is the right pick. Check to see if itâs the right level of prominence given the UI.",
            "Messaging Component: Toast"
          ]
        },
        {
          "type": "p",
          "text": "Finally, determine the messaging state."
        },
        {
          "type": "list",
          "items": [
            "In this case, the user successfully saved the changes they made to the record.",
            "Messaging State: Success"
          ]
        },
        {
          "type": "p",
          "text": "So what should be the applicationâs response to show that the record is saved successfully? Based on the analysis above, the application shouldshow a success toast."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/states",
      "title": "Messaging States - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Empty",
            "Error",
            "Informational",
            "Offline",
            "Success",
            "Transient",
            "Warning"
          ]
        },
        {
          "type": "p",
          "text": "Messaging state informs the UI textâs voice & tone. In keeping with messaging principles, the UI text should beinformativeandactionable(when possible). Empty state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "A component on a page has no item to show",
            "A page has no item to show"
          ]
        },
        {
          "type": "p",
          "text": "Each of the scenario above shows the empty message a little differently. Below are some guidelines around what components to use for each case. Ifâ¦ a component on a page has no item to show,Thenâ¦ showinline textinside the component. Ifâ¦ a page has no item to show,Thenâ¦ load the page withillustration & inline text. Error state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "A user submits a form that contains error on one or more fields",
            "A user completes an action (e.g. submitting a form), but system-related issues prevent the action to be truly executed",
            "A cardâs content cannot be loaded",
            "A system-related error is affecting the userâs current session",
            "A system-related error occurs at random",
            "A pageâs content is inaccessible (e.g. it cannot be found, user doesnât have sufficient privilege, etc).",
            "A process that the user initiated (e.g. data import) has errors."
          ]
        },
        {
          "type": "p",
          "text": "Each of the scenario above shows the error message a little differently. Below are some guidelines around what components to use for each case. Ifâ¦ a user submits a form that contains error on one or more fields,Thenâ¦ showinline text& pair it up withpopover. The field-level inline text displays error message relevant to that field (e.g. phone number cannot contain letters), whereas the popover shows a high-level summary (e.g. Review the following fields: phone number). Alternativelyâ¦ if you cannot use a popover in your design, showinline text (+ icon variant)instead. Ifâ¦ a user completes an action, but system-related issues prevent the action to be truly executed,Thenâ¦ display anerror toastafter the action fails to finish. Use the âtitle & descriptionâ variant if you need to display additional information. This should appearrarelyand generally should not be a part of a typical user flow. Ifâ¦ a cardâs content cannot be loaded,Thenâ¦ showerror inline textinside the card. Ifâ¦ a system-related error is affecting the userâs current session,Thenâ¦ display analertwhile the user is using the application. Ifâ¦ a system-related error occurs at random,Thenâ¦ call apromptto notify the user. Note that a prompt should appearrarelyand generally should not be a part of a typical user flow. Ifâ¦ a pageâs content is not accessible after the user tries to open it,Thenâ¦ load the page withillustration & inline text. Ifâ¦ a process that the user initiated (e.g. data import) has errors,Thenâ¦ alert the user vianotification. Informational state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "An item has an atypical status, e.g. duplicates",
            "A user completes an action, but there are some additional info to be shown",
            "An admin-related status applies to userâs current session",
            "The system is unavailable, e.g. under maintenance",
            "The system needs to relay information thatâs important but not immediately work-stopping",
            "The system needs to inform the user about a relevant activity that happened in a different part of the application."
          ]
        },
        {
          "type": "p",
          "text": "Each of the scenario above shows the informational message a little differently. Below are some guidelines around what components to use for each case. Ifâ¦ an item has an atypical status,Thenâ¦ showinline text with an iconon top of the content. Ifâ¦ a user completes an action, but there are some additional info to be shown,Thenâ¦ display aninformational toast. Use the âtitle & descriptionâ variant if you need to display additional information. For example, a user may have successfully added 100 people to a campaign, but 20 of those were already in the list. The system still added the remaining 80, but itâs useful to tell the user that 20 of them were in the list to begin with. Ifâ¦ an admin-related status applies to userâs current session,Thenâ¦ display analertwhile the user is using the application. Ifâ¦ the system is unavailable,Thenâ¦ load the page withillustration & inline text. Ifâ¦ the system needs to relay information thatâs important but not immediately work-stopping,Thenâ¦ call apromptto notify the user. Ifâ¦ the system needs to inform the user about a relevant activity that happened in a different part of the application,Thenâ¦ alert the user vianotification. Offline state appears when the system detects that the user isnât connected. Ifâ¦ the system detects that the user isnât connected,Thenâ¦ display analertuntil the user is back online. Success state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "An action that requires userâs manual input (e.g. submitting a form) is successfully completed",
            "An action that is triggered automatically (e.g. auto-saving a note) is successfully completed",
            "A process that the user initiated (e.g. data import) is successfully completed"
          ]
        },
        {
          "type": "p",
          "text": "Each of the scenario above shows the success message a little differently. Below are some guidelines around what components to use for each case. Ifâ¦ an action is completed after userâs manual input,Thenâ¦ display asuccess toastafterward. Ifâ¦ an action is completed automatically,Thenâ¦ showinline textafterward. In this case, the success message is likely to appear frequently, so we want to use a component that is the least obtrusive. Ifâ¦ a process that the user initiated (e.g. data import) is successfully completed,Thenâ¦ alert the user vianotification. Transient state appears when the system is processing an action, e.g. saving, loading, sending email, etc. Ifâ¦ the system is processing an action,Thenâ¦ showinline textand remove it when the system is done processing. Ifâ¦ the system is processing file upload(s),Thenâ¦ show a modal with progress bar and remove it when the system is done processing. Warning state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "The system detects potential issues with the form a user is working on (e.g. duplicates)",
            "The system nudges the user to engage with a record that hasnât had recent activities",
            "A user cannot complete an action due to external factors (e.g. permission) rather than something they can fix right away (e.g. form error)",
            "A system-related issue is affecting the userâs current session",
            "A user is about to commit an action that is destructive, has major impacts, or abandons incomplete action"
          ]
        },
        {
          "type": "p",
          "text": "Ifâ¦ the system detects potential issues with the form a user is working on,Thenâ¦ showinline text (+ icon variant)on top of the form as soon as it loads. Ifâ¦ the system nudges the user to engage with a record that hasnât had recent activities,Thenâ¦ show apopovernext to the item in question. This typically appears in a list/card view, where many records are displayed on the page; the icon would appear inside the affected card. Ifâ¦ a user cannot complete an action due to external factors,Thenâ¦ display awarning toastafter the action fails to finish. Ifâ¦ a system-related issue is affecting the userâs current session,Thenâ¦ display analertwhile the user is using the application. Ifâ¦ a user is about to commit an action that is destructive, completes an action that has major impacts, or abandons incomplete action,Thenâ¦ call amodalto ask for user confirmation."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/messaging/types",
      "title": "Messaging Types - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "At a high-level, we categorize messaging types by the nature of user interaction:"
        },
        {
          "type": "list",
          "items": [
            "System messagingalerts the user of important system-related issues or status. Itâs initiated by the system and itâs not a result of the userâs actions.e.g. System maintenance coming up this weekend.",
            "Engagement messagingnudges the user to enter or update data in the system. It can be initiated by either the system or another user.e.g. No activity on Opportunityxin the past 30 days. Create a task or schedule an event.",
            "Access messagingappears when the user tries to access an item thatâs not available to them. It may be because the record has been deleted, the user doesnât have access, etc. etc.e.g. Leadxisnât available.",
            "Feedback messagingis the applicationâs response when the user is interacting with it. The majority of create, read, update, delete (CRUD) actions will result in feedback messaging.e.g. Accountxwas created."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/navigation",
      "title": "Navigation - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Navigational patterns help users move between pages and situate themselves in the application. Use tabs to separate information into logical sections based on functionality or use case.  Users can easily switch between tabs to perform tasks without leaving the page. Assign a default tab based on the most important use case for the page. The sections that the tabs define function independently of each other, so do not use tabs to define a linear, ordered process. Tab names must be consistentâuse the same part of speech for each tab, such as a noun or verb. If your tabs donât fit in the horizontal space, place the tabs that donât fit into an overflow menu that sits in the last tab position. Selecting a tab from the overflow menu should replace the last fully visible tab in the ribbon. The tab that was replaced should go into the tab overflow menu in the topmost position. A global tab changes all of the content below it. For example, the Activity, Collaboration, and Details tabs change all of the content within the left column on an Opportunity. A scoped tab affects only the content within the visual container that it sits on top of. For example, the publisher tabs change just the form for the activity timeline, but nothing changes in the feed below. This is useful when one wants to stack several tabbed sections. Although not ideal, you might occasionally need to nest tabs. You can nest scoped tabs within a global tab set, but do not nest global tabs. If additional hierarchy is necessary, consider using a tree component. Organize pages in a tree to indicate hierarchy. Use a tree if your app has layered navigation that canât be represented in a simple tab set. A tree helps users navigate to pages and quickly find a nested child page without loading each page while navigating to the final destination page. Be sure to carefully study the mental models of users when deciding how to group pages in your tree. You can use a tree in conjunction with breadcrumbs to further help users navigate the hierarchy. Trees can technically have unlimited nesting, but we recommend avoiding excessive nesting. Flatter trees are generally easier to navigate. Every item in the list doesnât have to have a corresponding page. Instead, you can use label groups to organize related pages without providing an unnecessary landing page. Breadcrumbs help users navigate back up a hierarchy of pages. A breadcrumb indicates the hierarchy path (parentÂ­-child relationships) of the page a user is on, rather than the order of the userâs browsing history. Breadcrumbs are especially useful when a user links directly to a page that is nested in a hierarchy but needs to go to a parent page. They also helps users situate themselves in the application. Breadcrumbs are commonly used in conjunction with a tree for navigating between nested pages. The full hierarchy path is listed on a second or third level page. When the user is on a page deeper than three levels, the breadcrumb displays only the last two links. The rest of the hierarchy path is truncated, as shown in the following figure. Use a modal when you want users to focus on a specific task within the context of the original page. Use modals for pages that require the full attention of the user. Modals prevent the user from interacting with other elements on the page. A typical use of a modal is to display a form for entering or editing data. You can also use a directional modal for wizards and other forms that require linear navigation. Modals are broken into three sections: the header, body, and footer. Headerâ Includes the title and an optional tagline. The title reflects the button text that triggered it. The tagline can contain links, or the entire tagline can be a link. Bodyâ You can have any type of content: forms, text, videos, and other media. For a directional modal, you can add a step indicator to indicate the userâs progress. Footerâ Contains the navigational and action buttons. Action buttons, such as Save, Close, Delete, are on the right. Place the primary buttonâthe one that guides the user toward the default action on the far right. For a directional modal, like a wizard, place the Next and Back navigation buttons on the opposite sides (left for Back and right for Next). Modals take up 50% of the userâs viewport. If the content requires a lot of horizontal space, you can use the large modal, which takes up 90% of the viewport. A minimum and maximum width are specified to avoid going too narrow or too wide. The height of a modal is determined primarily by the length of its contents. The maximum height of the modal container is determined by its exterior margin. If the content is longer than the length of the modal, allow the user to scroll within the modal. The header and footer are fixed."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/notifications/interface-feedback/overview",
      "title": "Interface Feedback Guideline Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Notifications Vs. Interface Feedback",
            "Feedback Types",
            "Optimizing the Feedback Experience",
            "Feedback Design Principles",
            "Icons",
            "Determining Feedback Characteristics"
          ]
        },
        {
          "type": "p",
          "text": "Interface feedback provides reactive responses and contextual information that help instill trust in the system. While notifications and interface feedback communicate using similar patterns, they have two key differences."
        },
        {
          "type": "list",
          "items": [
            "Notifications are traceable, meaning a user can view or dismiss a notification, and revisit its content later. Dismissed interface feedback however, is not retrievable.",
            "Interface feedback is the system's response to direct user inputâfor example, a confirmation toast confirming a record change. Notifications, on the other hand, are not always reactive and not necessarily system driven."
          ]
        },
        {
          "type": "p",
          "text": "There are four types of feedback:system, engagement, access,andstandard. At the highest level, feedback types are categorized by user interaction type:"
        },
        {
          "type": "list",
          "items": [
            "System feedbackalerts users to important system-level issues or statuses. It's initiated by the system, not a result of user actions.Example: System maintenance this weekend.",
            "Engagement feedbacknudges users to update data or explore a new feature.Example: No activity on Opportunity X in the past 30 days. Create a task or schedule an event.",
            "Access feedbackappears when users try to access unavailable items, perhaps because a record has been deleted or the user doesn't have access to certain data.Example: Lead X unavailable.",
            "Standard feedbackresponds tomost create, read, update, and delete (CRUD) actions.Example: Account created."
          ]
        },
        {
          "type": "p",
          "text": "Here are three simple steps to help make the feedback experience both relevant and helpful."
        },
        {
          "type": "list",
          "items": [
            "Select the appropriatefeedback typebased on user's interaction with the application.",
            "Pick apatternfrom the category that makes sense given the user flow and UI, and has the appropriate visibility ranging from discrete to urgent.",
            "Determine whichstatebest characterizes the feedback message."
          ]
        },
        {
          "type": "p",
          "text": "Keep these principles in mind when designing feedback:"
        },
        {
          "type": "list",
          "items": [
            "Timely, not noisy. Provide feedback at the right time. Not every interaction requires feedback.",
            "Informative, not verbose. Say what's necessary and not much more.",
            "Actionable, not static. Enable shortcuts for relevant actions to improve efficiency.",
            "Cross device, not duplicative. When appropriate, alert users on all their devices, but clear the message once a user has read it."
          ]
        },
        {
          "type": "p",
          "text": "Icons may be used in feedback components. Follow these guidelines when deciding which icon to use: A salesperson finalizes a sale, but some of the initial numbers have changed. She updates the record. How should the application confirm that the record is saved?"
        },
        {
          "type": "list",
          "items": [
            "To determine the feedback type, look at the user interaction flow:The user initiates the interaction.The record is accessible, and the user successfully saves changes.Feedback type: Standard",
            "The user initiates the interaction.",
            "The record is accessible, and the user successfully saves changes.",
            "Feedback type: Standard",
            "Choose from the four standard feedback components:Inline textis used for empty and inaccessible states, field-level error messages, and in-between states such as saving and loading. (Use a more prominent component for success messages.)A popoversuggests a user action or communicates an error after the user submits data.A toastconfirms a create, edit, or delete action.A modalwarns the user, confirming that an action is intentional, not accidental.Feedback component: Toast",
            "Inline textis used for empty and inaccessible states, field-level error messages, and in-between states such as saving and loading. (Use a more prominent component for success messages.)",
            "A popoversuggests a user action or communicates an error after the user submits data.",
            "A toastconfirms a create, edit, or delete action.",
            "A modalwarns the user, confirming that an action is intentional, not accidental.",
            "Feedback component: Toast",
            "Determine the feedback state.In this case, the user has successfully saved changes to the record.Feedback state: Success",
            "In this case, the user has successfully saved changes to the record.",
            "Feedback state: Success"
          ]
        },
        {
          "type": "p",
          "text": "Based on this analysis, the application should show asuccess toast."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/notifications/interface-feedback/patterns",
      "title": "Interface Feedback Guideline Patterns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Interface Feedback LandscapeInline TextPopoverToastIllustration With Inline TextDocked ComposerModal Prompt",
            "Inline Text",
            "Popover",
            "Toast",
            "Illustration With Inline Text",
            "Docked Composer",
            "Modal Prompt",
            "Feedback States",
            "Empty StatesEmpty ComponentEmpty Page",
            "Empty Component",
            "Empty Page",
            "Error StatesField Field ErrorIncomplete Action ErrorCard Content ErrorSystem Error (Current Session)System Error (Random)",
            "Field Field Error",
            "Incomplete Action Error",
            "Card Content Error",
            "System Error (Current Session)",
            "System Error (Random)",
            "Informational StatesStatus InformationAdditional Information After a Successful ActionAdmin-Related InformationSystem-Related Information",
            "Status Information",
            "Additional Information After a Successful Action",
            "Admin-Related Information",
            "System-Related Information",
            "Offline",
            "SuccessManual ActionAutomatic Action",
            "Manual Action",
            "Automatic Action",
            "Transient",
            "Warning StatesProactive Warning",
            "Proactive Warning"
          ]
        },
        {
          "type": "p",
          "text": "Each Interface feedback component has design properties that define its pronunciation level. Discreet Inline text communicates messages in a non-obstructive way. As its name suggests, it's displayed inline and doesn't block any other part of the interface. Inline Text Less discreet A popover calls attention to a problem or a potential problem with a field or record. It contains a title and body with optional inline links. Popover Elevated A toast serves as a reactive element of feedback & confirmation mechanism after a user has taken an action. A toast appears in reaction to user action: creating, editing, deleting. Toast Elevated Illustration and inline text work in tandem to communicate a state in a more visually delightful, approachable way. Illustration with Inline Text Urgent The Docked Composer communicates dense, insightful information in-context of a user's workflow. In a help and learning context, this panel may contain instructions, guidance, or learning material that a user can refer to while working. Docked Composer(for persistent UI elements)Also see User Engagement Urgent Modals and prompts display information in a layer above the app. They're centered vertically within the viewport. To dismiss a prompt, the user must confirm its call to action. To dismiss a modal, the user can select the close icon or cancel button, or click anywhere outside the dialog window. ModalPrompt Feedback states are generated in response to direct user action, and as such, the tone and pronunciation of the feedback state should mirror the urgency or consequence of the user's action. There are six key feedback states. An empty state is triggered when a component or page has no content to display. It is used in the following scenarios: When a component has no item to show, displayinline text. When an entire page has no data available or the system is inaccessible, display anillustration with inline text. An error state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "A user submits a form that contains error on one or more fields",
            "A user completes an action (e.g. submitting a form), but system-related issues prevent the action to be completed",
            "A card's content cannot be loaded",
            "A system related error is affecting the user's current session",
            "A system related error occurs at random",
            "A page's content is inaccessible (e.g. it cannot be found, user doesn't have sufficient privilege, etc)"
          ]
        },
        {
          "type": "p",
          "text": "Each scenario encompasses a slightly different error state, as shown below. When a user submits a form that contains error on one or more fields, display a pairing ofinline textand apopover The field level inline text displays an error message relevant to that field (e.g. phone number cannot contain letters), whereas the popover shows a high level summary (e.g. Review the following fields: phone number). Accessibility Note: If there is only one error message, set focus on the field containing an error. If there is more than one error summarize them in an error message at the top of the page, set focus there, and provide a list of the errors with each item having a LINK jump to the relevant field. This summary should be persistent and easily reachable. Alternatively, if a popover is not feasible in your design, then display the icon variant of inline text. In the rare instance a user submits an action and system-related issues prevent the action from executing, displayanerror toast. When data inside a component cannot be loaded, display aninline text error. When a system related error occurs during an active session, display analert. In the rare instance a system related error occurs at random, display a prompt to notify the user. An informational state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "An item has an atypical status, e.g. duplicates",
            "A user completes an action, and there is additional info to be shown",
            "An admin-related status applies to user's active session",
            "The system becomes unavailable, e.g. under maintenance",
            "The system needs to communicate information that's important but not immediately disruptive to a user's workflow"
          ]
        },
        {
          "type": "p",
          "text": "Each scenario encompasses a slightly different informational state, as shown below. When there is a status change to content, display the icon variant of inline texticon variant of inline text. When a user completes an action, and there is additional info to be shown, display aninformational toast. When there is admin-related status change during an active session, display analert. When the system needs to communicate information that's important but not immediately disruptive to a user's workflow, display aprompt. An offline state appears when the system detects that there is a connectivity issue between user and system. This can be a result of a limited connection, for example patchiness or slow speeds, or a complete loss of connection. When the system detects a connectivity issue, then display an offlinealertuntil connection is re-established. A success state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "An action that requires user's manual input (e.g. submitting a form) is successfully completed",
            "An action that is triggered automatically (e.g. auto-saving a note) is successfully completed"
          ]
        },
        {
          "type": "p",
          "text": "Each scenario encompasses a slightly different success state, as shown below. When an action is completed after user's manual input, display asuccess toast.Do notuse toasts to confirm success when a create action brings the user to the newly created item. For example, creating a new record from a list view leads to the new record, so a success toast is unnecessary. When an action is completed automatically, displayinline text. This is significantly less obtrusive and is ideal for high frequency success validation. A transient state appears when the system is processing an action, e.g. saving, loading, sending email, etc. When the system is processing an action, displayinline text, which automatically disappears once processing is complete. When the system is processing file upload(s), display a modal with progress bar that automatically disappears once processing is complete. A warning state can appear in these scenarios:"
        },
        {
          "type": "list",
          "items": [
            "The system detects potential issues with the form a user is working on (e.g. duplicates)",
            "The system nudges the user to engage with a record that hasn't had recent activities",
            "A user cannot complete an action due to external factors (e.g. permission) rather than something they can fix right away (e.g. form error)",
            "A system-related issue is affecting the user's current session",
            "A user is about to commit an action that is destructive, has major impacts, or abandons an incomplete action"
          ]
        },
        {
          "type": "p",
          "text": "Each scenario encompasses a slightly different warning state, as shown below. When the system detects potential issues with a form a user is loading, then display the icon variant of inline text as soon as it loads. When the system needs to nudge a user to reengage with an outdated item, then display a popover next to the item of concern. This typically appears in a list/card view, where many records are displayed on one page; the icon appears inside the affected card. When a user cannot complete an action due to external factors, display awarning toastimmediately after the action fails to execute. When a system related issue is impacting an active session, display an alert. When a user attempts to commit an action that is destructive, that has broad implications or abandons an incomplete work flow, display a modal to confirm the action. Accessibility Note: This confirmation modal ensures that the experience meets WCAG 2.0 accessibility requirements."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/notifications/mobile-notifications",
      "title": "In-App, Out-of-App and Mobile Push Notifications - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Guidelines for Using Out-of-App Notifications",
            "Native Mobile Push Notifications"
          ]
        },
        {
          "type": "p",
          "text": "Out-of-App and Native Mobile Push Notifications In addition to Salesforce in-app notifications, users can receive information via channels such as email and SMS. These out-of-app notifications reinforce connection with users and make pertinent, actionable information more accessible to the user. Some guidelines to keep in mind:"
        },
        {
          "type": "list",
          "items": [
            "Accompany every urgent in-app notification with immediate email and SMS messages (if available).",
            "Standard in-app notifications are typically accompanied by emails, but not SMS messages. To minimize notification fatigue, these emails may be consolidated into daily or weekly bulletins.",
            "Discreet in-app notifications are not accompanied by any out-of-app communication.",
            "Notifications may also be delivered exclusively via email and/or SMS message, where appropriate."
          ]
        },
        {
          "type": "p",
          "text": "On mobile devices, push notification behavior and delivery are governed by a device's operating system. For example, push notifications on iOS devices are sent through Apple's Push Notification Service. If an app is open, related push notifications appear in app; if the app is not open, iOS delivers related notifications to the iOS Notification Center. Push notifications on Android devices are governed in a similar fashion through Google Cloud Messaging."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/notifications/overview",
      "title": "Notifications Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Notifications vs. Interface Feedback",
            "Notification PriorityPriority Levels of Common Notification Components",
            "Priority Levels of Common Notification Components",
            "Urgent NotificationsDocked ComposerModals and PromptsWelcome MatNotification Tiles",
            "Docked Composer",
            "Modals and Prompts",
            "Welcome Mat",
            "Notification Tiles",
            "Standard NotificationsAlertsScoped Notifications",
            "Alerts",
            "Scoped Notifications",
            "Discreet NotificationsEnumerated BadgeNotification Tray",
            "Enumerated Badge",
            "Notification Tray",
            "Notification Distribution"
          ]
        },
        {
          "type": "p",
          "text": "Notifications are messages that deliver information and insights to users, helping drive engagement and productivity. A notification delivers information that is:"
        },
        {
          "type": "list",
          "items": [
            "Timely:Delivered at the right time, offering the user an opportunity to act quickly.",
            "Relevant:Delivered in the best context and through the best channel, optimizing workflow and minimizing disruption.",
            "Pursuable:Offers a clear path to action."
          ]
        },
        {
          "type": "p",
          "text": "Each notification should include:"
        },
        {
          "type": "list",
          "items": [
            "Origin:The identity of the user(s) and/or entity(s) that initiated the notification.",
            "Content:Communication that encourages engagement and productivity.",
            "Action:One or more action that the user can take.",
            "Timing:Either the time that information is delivered or the time since delivery."
          ]
        },
        {
          "type": "p",
          "text": "While notifications and interface feedback communicate using similar patterns, they have two key differences."
        },
        {
          "type": "list",
          "items": [
            "Notifications are traceable, meaning a user can view or dismiss a notification, and revisit its content later. Dismissed interface feedback however, is not retrievable.",
            "Interface feedback is the system's response to direct user inputâfor example, a confirmation toast confirming a record change. Notifications, on the other hand, are not always reactive and not necessarily system-driven."
          ]
        },
        {
          "type": "p",
          "text": "In order to make notifications helpful and not annoying, you should identify what information will be most important for users at each specific point of their workflow. Understanding the urgency level of the notification will help you determine itspronunciation, or level of priority. There are three levels ofpronunciation, depending on when the user needs to act:Urgent, Standard,andDiscreet."
        },
        {
          "type": "list",
          "items": [
            "User Should Act Now:AnUrgent notificationinterrupts the user's workflow, presenting information that the user or system prioritizes as most critical. It either enables direct action or offers a clear path to action.",
            "User Should Act Soon:AStandard notificationpushes relevant, timely information that improves productivity. It nudges the user when necessary, but doesn't demand immediate action.",
            "User Can Act Later:ADiscreet notificationprovides awareness with minimal disruption to workflow. In contrast to push notifications, which demand user attention, these pull notifications allow users to review information at any time."
          ]
        },
        {
          "type": "p",
          "text": "An urgent notification interrupts the user's workflow, presenting information that the user or system prioritizes as most critical. It either enables direct action or offers a clear path to action. Use these components for urgent notifications:Docked Composers,Modals and Prompts,Welcome Mats, andNotification Tiles. In live discussions and collaborations, the docked composer appears at the bottom right corner of the screen, expanded to display the full content of a notification. Once a docked composer is minimized or dragged to a new window, it is marked as read. Accessibility Note:Ensure that there is a secondary, keyboard-friendly mode for dragging the minimized composer. Give it a clear header and some sort of landmark role. Since its role on the page may of variable importance we want to make it a \"region\" labelled by the aforementioned header. When a new message occurs an aria-live polite message should fire and reference the name of the region so that a user can easily discover this region. Docked composers are also used inonboarding, to highlight features that can boost productivity. Once dismissed, they may be viewed at a later time. Modals and prompts present servicing information that requires halting the workflow. Welcome mats are specialized modals with a unique look and feel. They offerdeeper learningdesigned to boost a user's productivity, such as information on new features. Notification tiles present time-sensitive information such as work reminders, upcoming calendar events, and due tasks. Once dismissed, they may be viewed in the notifications tray. Accessibility Note:When notification tiles timeout, we must follow the principlesoutlined in WCAG Guideline 2.2. If there are one or more visible at a time they should be contained in a named region and be delivered as an HTML list wrapped in an element witharia-role=\"log\". When they open or launch their headline should be read as an aria-live polite. A standard notification pushes relevant, timely information that improves productivity. It nudges the user when necessary, but doesn't demand immediate action. It should offer either a way for the user to learn more or a clear path to action. Use these components for standard notifications:AlertsandScoped Notifications. An alert presents status information for either the entire app or a specific tab or record. It persists unless dismissed by the user or replaced by a more current alert. App-wide alerts include system maintenance alerts, browser alerts, and online/offline status alerts. In contrast, a record status alerts the user (and any collaborators) to changes to a specific record. An alert can show one of the following states: Error:Tell the user that they cannot proceed with their Salesforce experience.Accessibility Note:This alert type should usearia-role=\"alert\"andaria-live=\"assertive\". Informational:Show an admin-related status.Accessibility Note:This alert type should usearia-role=\"status\"andaria-live=\"polite\". Offline:Inform the user that they are in offline mode.Accessibility Note:This alert type should use aria-role=\"status\" and aria-live=\"polite\". Warning:Warn the user of potential issues with their Salesforce experience.Accessibility Note:This alert type should use aria-role=\"status\" and aria-live=\"polite\". A scoped notification presents information specific to a component or page section. It is tethered to its specific component and cannot be dismissed or viewed elsewhere. Discreet notifications behave as a pull notification, so they don't alert users or disrupt their workflow. However, they are still recorded by the system and can be reviewed at any time in the notifications tray. Use these components for discreet notifications:Enumerated BadgeandNotification Tray. This bell badge shows the number of new notifications available for review in the notifications tray. Clicking the bell icon opens the tray and resets the counter to zero. It does not, however, mark notifications as read. Accessibility Note:Badge notifications are meant to be non-interruptive, but the visual treatment will likely draw the eye to the notification count icon. Consider an aria-live polite announcement on page load to simulate this for low or non visual users. The notifications tray displays all urgent, standard, and discreet notifications for a specified time. Here users can review previous urgent and standard notifications, and discover discreet notifications that didnât trigger alerts. Notifications are an inevitable part of the user experience, but it's important not to over or under communicate. Treating all information as urgent would overwhelm users and potentially lead them to ignore notifications as a whole, while delivering all information discreetly would result in crucial information being overlooked and negatively affecting productivity. To maintain higher levels of engagement and productivity, aim for this approximate balance of notification types: 30% urgent, 45% standard, and 25% discreet notifications."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/notifications/patterns",
      "title": "Patterns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Notification Landscape",
            "Bell and Accompanying Notification Tray",
            "Notification Tile",
            "Docked Assistant",
            "Modal Prompt",
            "Welcome Mat",
            "Alert-Banner",
            "Scoped Notification"
          ]
        },
        {
          "type": "p",
          "text": "Deliver productive and engaging notifications with one or more of these patterns. Urgent, standard, and discreet delivery Clicking the bell expands and collapses the notification tray. When a new notification is delivered, an enumerated badge appears, and the count of new notifications is updated. Each notification in the tray allows the user to navigate directly to the respective item. Stateful Button Icon(Bell)Popover(dialog with list of notifications) Standard delivery Clicking in the body of a notification tile dismisses the tile and prompts a new browser tab with its URL loaded. The tile can also be dismissed by clicking the X icon. Stateful Button Icon(Bell)Popover(dialog with list of notifications) Urgent delivery The Docked Composer can be expanded into a docked assistant notification, enabling the user to complete tasks or gather information via chat, dialer, or email. The notification can be minimized and docked at the bottom of console by clicking the minimize icon. Docked Composer(for persistent UI elements) Urgent delivery Modals and prompts display information in a layer above the app. They're centered vertically within the viewport. To dismiss a prompt, the user must confirm its call to action. To dismiss a modal, the user can select the close icon or cancel button, or click anywhere outside the dialog window. ModalPrompt Urgent delivery Like a modal, a welcome mat displays information in a layer above the app. Used mostly for educational content, it usually includes an informational left-hand pane and an actionable right-hand pane. Welcome mats may trigger walkthroughs, other modals, or videos, or direct users to URLs. Welcome Mat Standard delivery Alert banners appear without user initiation, communicating system- or page-wide states, and persisting throughout a session. Alert Discreet delivery Scoped notifications present information not important enough to justify alerts. They can be scoped to most containers and are not dismissible. Scoped Notification"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/overview",
      "title": "Design Guidelines - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "The Lightning Design System reflects the patterns and components that underpin the Salesforce product. These patterns and components provide a unified language and consistent look and feel when designing apps and products within the Salesforce ecosystem. We constantly keep these core principles in mind when making design decisions at Salesforce, and we encourage you to adopt them as well."
        },
        {
          "type": "list",
          "items": [
            "ClarityEliminate ambiguity. Enable people to see, understand, and act with confidence.",
            "EfficiencyStreamline and optimize workflows. Intelligently anticipate needs to help people work better, smarter, and faster.",
            "ConsistencyCreate familiarity and strengthen intuition by applying the same solution to the same problem.",
            "BeautyDemonstrate respect for peopleâs time and attention through thoughtful and elegant craftsmanship."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/rules-filters-logic",
      "title": "Rules, Filters, and Logic Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "IntroductionInvisible, Intuitive, PowerfulFiltering Data, Taking Action",
            "Invisible, Intuitive, Powerful",
            "Filtering Data, Taking Action",
            "Usage",
            "Rules, Filters, and Logic Elements"
          ]
        },
        {
          "type": "p",
          "text": "Build interactions that let users find the information they need, when they need it, and confidently take action (no matter how complex). Salesforce enables users to store, sort, and take action on large, complex datasets. Whether creating rules to control when an action is executed or querying for a filtered set of records, logical expressions should be easy to read and manipulate. Giving users confidence while working with their data enables them to use the full capabilities of Salesforce to run their business. Create intuitive interfaces for working with rules, filters, and logicâno matter how complexâusing a thoughtful combination of Lightning Design System components. At its best, the interface elements for these logical expressions are virtually invisible. By making the logic visual and intuitive, users can think fluidly about the shape and content of their data. A user might think, âI want to findÂ sales leads in the Southwest United States, in industry X, with an onsite user base of at least 50 people, that we have approached but not closed a deal with.â She might then want to sort the results geographically, by date of most recent contact, or in one of a dozen other ways. And if she doesn't find what she needs, she should be able to understand how to change her search so she can. Often, logical expressions define a condition that triggers an action.Â For example, the results of a search might trigger one of a set of X customized emails, but only if a customer has added product Y to his online shopping cart, and left it there for more than Z hours. Automation like this is powerful! Users need a high level of confidence that systems will work as intended. The proper combination and use of components not only gives users the tools they need, it keeps the configurationÂreadable. And that lets her be faster, more creative, and more successful in her job. If users will be doing any of these tasks, use the Rules, Filters, and Logic guidelines to create an understandable and approachable interface:"
        },
        {
          "type": "list",
          "items": [
            "Setting conditions that will determine a value or execute an actionÂ",
            "Creating complex if/else logic without codeÂ",
            "Selecting rules to show results from a datasetÂ",
            "Filtering down results based on user-determined criteriaÂ"
          ]
        },
        {
          "type": "p",
          "text": "Don'tÂ use these guidelines to build workflows or business processes with multiple conditions. Consider the Builder framework instead. A key part of constructing interfaces for logical expressions is only presenting the necessary elements. To decide which components and tools are right for a particular situation, consider what the end user will be able to do. When usersÂare notÂadding their own rules andÂcannotÂ change the logic mode, use components such as combobox, dueling picklist, select, and text input. These simple and familiar elements will give users fast access to their desired results. When usersÂareÂ creating more advanced logical expressionsâlike adding their own rules or changing the logic modeâuse the expression component to enable users to construct their logic in an intuitive fashion. The power of this component is in being able to scale the interface to meet the complexity of the task. Optional variations exist to help users understand the functionality available to them."
        },
        {
          "type": "list",
          "items": [
            "When only 2-3 logic modes are needed, and one moreÂincludes a formula,Â the modes can be surfaced as a radio button group instead of a picklist.Â",
            "WhenÂverticalÂ space is a concernâlike when many instances of these logical groups might exist in the same areaâyou can nest the expression component inside of a collapsible wrapper.Â"
          ]
        },
        {
          "type": "p",
          "text": "In any of these cases, you can use a panel and narrow variant of the expression component to contain these elements whenÂhorizontalÂ space is limited, or when you can immediately preview the results on a larger part of the layout. Find the right combination of components to give your users the functionality they need for the task at hand without overcomplicating the interface and causing confusion."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/search/global",
      "title": "Global Search - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Default State",
            "Focus",
            "Instant Results",
            "Pre-Scoping",
            "Pre-Filtering",
            "Results"
          ]
        },
        {
          "type": "p",
          "text": "Search is the most used feature in Salesforce, and users expect it to be fast, intelligent, and simple. With global search, users can get right to records and apps by entering simple keywords or using powerful advanced search features. Global search lives in the header of your app, where itâs highly discoverable and always available for your users. The placeholder text intelligently adapts to the page a user is on in the org, and lets them know what types of results to expect. For example, the placeholder text may read \"Search Setup\" when the user has navigated to the Setup page, or \"Search Groups and more...\" when the user has navigated to the Groups tab. When a user first clicks into the search input, the user's five most recently used records and apps appear in a dropdown list. Each item shows the object icon, the record name, such as \"Vandelay Industries\", and the object name, such as \"Account\". As the user types, the top five results are shown instantly, allowing users to find what they need without pressing Enter to run a full search. The secondary field, also called the disambiguation field, provides more context and makes it easier to find the right record in a limited interface. For example, the secondary field for an opportunity may read \"Opportunity - Prospecting\", allowing the user to learn the stage of the opportunity without having to click on the item. After the user has typed a character into the input, a \"clear\" icon appears in the input, making reformulation easy. Instant results is flexible and can support various user needs. From within the instant results dropdown, users can:"
        },
        {
          "type": "list",
          "items": [
            "Use search shortcuts. Shortcuts provide search options for users. The first option is the default action taken when the user presses Enter. Secondary shortcuts include options that allow users to search within the object they're on, pre-scope searches (that is, limit a search to a specific object before entering their keywords), and search other objects. Limit the number of shortcut options to three to avoid pushing the search results too far down.",
            "Find records and apps without being exact. Instant results supports stemming (returning different forms of a word), synonyms (when synonyms are enabled in an org), and spell-correction."
          ]
        },
        {
          "type": "p",
          "text": "Several visual cues help users quickly find the right record:"
        },
        {
          "type": "list",
          "items": [
            "Icons help users instantly identify frequently used objects and apps.",
            "The record name shows highlighted matched characters.",
            "The object type clearly identifies a record when the user isnât familiar with the object icon.",
            "A secondary field, also called the disambiguation field, helps users differentiate similarly named or duplicate records. Characters matching the user's search term are also highlighted here."
          ]
        },
        {
          "type": "p",
          "text": "Users on slow or mobile connections may experience some performance degradation when results are being returned as they type. Showing a spinner in the input lets the user know that search is still working in the background. When users know exactly what they need, they can narrow their search to only the record type they need at that moment by selecting an object from the combobox in front of the search input. When focused, the combobox expands and the user can type the name of the entity they want to search against. Selecting an entity from the combobox narrows the scope of the user's search to that record type. Pre-filtering gives users even more control over whatâs searched. Once the user chooses a record type, a secondary link, titled \"Advanced Search\", can be displayed to give users advanced search options. Clicking the \"Advanced Search\" link in a Knowledge example produces a popover with options like Language, Publishing Status, Record Type, Validation Status, and Region, as well as an option to Show More Filters. Clicking save in this popover adds another pill to the input with the number of filters applied, like \"2 Filters\". When your users execute a search, we query objects based on personalized usage and intelligent prediction. Those results are returned on a \"Top Results\" page that groups results together, making it easy to scan relevant results of different record types. Even when there are no results, users should have an idea of what they can do next. Should they look for more results, create a new record, or check out Trailhead?"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/search/in-context",
      "title": "In-Context Search - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Default State", "Focus", "Instant Results"]
        },
        {
          "type": "p",
          "text": "With in-context search, users can refine content on a page to find the correct information without having to context-shift and navigate away when using global search. Core examples of in-context search are in list views and feeds. Place the in-context search directly above the content the user is refining. To help increase discoverability, the input should be exposed, not hidden behind an icon the user must click. The input should have a smaller UI footprint than global search to reinforce a visual hierarchy. For example, when viewing a list, the in-context search input should be placed above the list and exposed by default to highlight the ability to search the following list specifically. Placeholder text tells the user what to expect, and in-context search is a place where specificity matters a lot. When searching a feed, your placeholder should be \"Search this feed...\", instead of \"Search...\". When searching a list of accounts, use \"Search this list...\" instead of \"Search Accounts...\". Specificity matters because:"
        },
        {
          "type": "list",
          "items": [
            "Users expect in-context search to only search the content they're browsing now.",
            "\"Search Accounts...\" tells the user that their Accounts will be searched, but will all Accounts be searched? Some of them? Which ones? Paying attention to placeholder specificity increases clarity for everyone.",
            "Feeds have different views and the same guidance applies here. Let the user know thatthisfeed will be searched.",
            "Keeping the placeholder text & behavior consistent in different contexts transforms into intuitive behavior."
          ]
        },
        {
          "type": "p",
          "text": "For lists and feeds, the placeholder text should always read \"Search this feed...\" and \"Search this list...\" The search input takes on the active styling, and since we're refining a list of information already on the screen, an autocomplete menu isn't necessary to display. When there isn't an autocomplete menu giving the user instant results, this efficiency should be extended to the context of environment they're searching in. As the user types, results should start to be returned without having to press the ENTER key. When results are being returned, give the user feedback to tell the them that we're working on their request. The content in the feed is replaced with stencils as one layer of feedback, but customers have said that with a slow connection, stencils alone aren't enough to tell them that there's something happening in the background... some think their computer could be frozen, others think they might need to refresh their app. Showing a spinner in the input is an additional form of feedback that tells the user we're still working. Feedback on a list search already displays a spinner on top of their stencils so a second spinner in the input is avoided in this context. Results should guide the user to the most relevant information in their results. To do this, use background color highlighting for the matched terms. Avoid using snippets, which truncate long bodies of text to only show your matched character and its surrounding words. This is a valuable feature for finding Articles, but it hides important context from a feed post. customers have said that they need the full context so their comments aren't inaccurate. Highlight anywhere there's a match, including the name of the poster or commenters, the body of the post, the comments, and attachments. When a user clicks on the publisher, expand all comments to give a full context of the conversation."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/deeper-learning",
      "title": "Deeper Learning - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Introduction", "Usage"]
        },
        {
          "type": "p",
          "text": "Learning is an ongoing journey. Users who are new to a product or feature and expert users alike can benefit from ongoing learning opportunities. Great content turns customers into Trailblazers. Great learning experiences contain more than content alone. To take advantage of all a product has to offer, many users seek out deeper learning experiences, encompassing a wide range of resources:"
        },
        {
          "type": "list",
          "items": [
            "Explanations of products and features, and how they work together",
            "Examples showing the best ways to use the product",
            "Tips and shortcuts to help users be more efficient and productive",
            "Videos showing highlights of the product or good ways to optimize the user experience",
            "Practice using the features in a safe environment before making changes in production",
            "In-app achievementmarkers, such asTrailheadbadges or custom rewards, help gamify the learning experience and keep users engaged"
          ]
        },
        {
          "type": "p",
          "text": "A strong learning strategy uses effective patterns informed by a thoughtful content strategy and compelling contentâwhether you're engaging with users in the first 30 seconds or after months of experienced use. Users wanting, or required, to learn more can seek out learning via resources such asTrailhead. Make your learning content searchable in these channels, taking search engine optimization into account. Opportunities for deeper learning should also be interwoven throughout your productâin the UI itself as well as within other user engagement patters, wherever more advanced users might benefit from a deeper understanding. Use links to more information in these user engagement components.Â"
        },
        {
          "type": "list",
          "items": [
            "Welcome Mat:Link towalkthroughs,videos, orTrailheadto guide users through more complex concepts or tasks.",
            "Setup Assistant:Link towalkthroughsor concepthelp topicsto explain why something is configured in a certain way.",
            "Feature PopoverandDocked Assistant:Link tohelp topicsto provide more detailed explanation about the purpose and benefits of the feature you're calling users' attention to.",
            "Error MessageandEmpty State: Link tohelp topicscontaining more information about the issue the user's running into and what can be done to resolve or work around it."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/feature-discovery-and-adoption",
      "title": "Feature Discovery and Adoption - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "UsageA New Feature is Enabled or AvailableUser Isn't Taking Advantage of a Valuable Feature",
            "A New Feature is Enabled or Available",
            "User Isn't Taking Advantage of a Valuable Feature"
          ]
        },
        {
          "type": "p",
          "text": "Simple prompts go a long way in raising awareness of your new feature. When introducing a new feature to users who are already familiar with the product, a positive user engagement experience is crucial. These users:"
        },
        {
          "type": "list",
          "items": [
            "Know the basics, and don't want their workflow interrupted without good reason",
            "Want actionable, relevant information about new possibilities and updates to features they use often",
            "Don't want to be sold to, unless an offering is clearly tailored to their needs"
          ]
        },
        {
          "type": "p",
          "text": "Experienced users don't want unnecessary interruptions. They appreciate enhancements to features they use often, and like to be the first to know about new features, as long as the information is helpful and relevant."
        },
        {
          "type": "list",
          "items": [
            "Use afeature popovertohighlight a new feature that the user isn't already taking advantage of but would benefit from.",
            "If the feature requires more than one step, use awalkthroughordocked assistantto guide users through the new feature and how it can help them."
          ]
        },
        {
          "type": "p",
          "text": "Sometimes your users aren't using your application to its full potential. To let them know when they're not following best practices or taking advantage of beneficial features, offer tips and guidance focused on saving time and increasing productivity."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/help-and-trouble-shooting",
      "title": "Help and Troubleshooting - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "UsageUser Is Off CourseUser Has a Question or Problem",
            "User Is Off Course",
            "User Has a Question or Problem"
          ]
        },
        {
          "type": "p",
          "text": "Anticipate users' requests for assistance with contextual tools and mechanisms. Help and troubleshooting content should be accessible, clear, and empathetic. A good help experience acknowledges that a user may feel lost or frustrated, but always offers options for solutions, maintaining a confident and optimistic tone. Provide enough friction to allow users to learn as they go, but not so much that they feel alienated and ignored. If a user is off course but unaware of the problem, offer course correction with these components:"
        },
        {
          "type": "list",
          "items": [
            "Show amessageâvia inline text or a prompt â with guidance and next steps.",
            "Use anempty stateto show users what they might be missing."
          ]
        },
        {
          "type": "p",
          "text": "Users with specific questions or issues are often motivated to seek out help, but reluctant to leave their workflows. Provide clear entry points to relevant content within the workflow with these components:"
        },
        {
          "type": "list",
          "items": [
            "Field-level help,such as aninfobubblewithtooltip, can clarify an item's purpose and function.",
            "Ahelp menulinks tohelp topicsorvideosthat contain relevant how-to content and concept definitions contextual to the page the user is on."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/onboarding",
      "title": "Onboarding - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "UsageFirst Time in a Trial, New Product, or Feature AreaSetting Up a New Product or FeatureFirst Time Logging In Since New Release",
            "First Time in a Trial, New Product, or Feature Area",
            "Setting Up a New Product or Feature",
            "First Time Logging In Since New Release"
          ]
        },
        {
          "type": "p",
          "text": "Onboarding is your first opportunity to introduce a product or service to your customersâand to make a positive first impression. Make this an opportunity to say hello, make them feel welcome, and show them around. Give users a friendly, high-level overview of your application, process, or service. Clearly state your value proposition, and make it easy for them to get up and running quickly through a short overview video or guided tour. Onboarding should be simple and brief, and can include setup or getting started guidance and deeper learning opportunities. Onboarding should be persona or goal-basedâtailored to the user's role or goals. Think about the different groups of people coming through your door. What is each one looking for? What can you do to quickly make them feel both welcome and productive? Give them the opportunity to declare their goals during onboarding. Even after a user's first experience with the material, onboarding content should remain available in some form, often via a help menu or other persistent interface. It can also be included in the active work area (via popups, for example) for a set amount of time. The first time a user encounters a new product or feature, provide an overview of key features and benefits. Walkthroughs are most effective when users can interact with sample (pre-populated) data, to get a feel for features and processes. To keep prospects motivated in a trial, lead them quickly to âaha moments.â Show how your app or service can make their lives better. Use progress meters, in-app achievements, and other reward patterns to support your primary flows. Offer one or more of the following to encourage exploration, learning, and adoption:"
        },
        {
          "type": "list",
          "items": [
            "Welcome message",
            "Information about what the product or features help to achieve",
            "Steps for getting started or setting things up",
            "Tips on how to use key features"
          ]
        },
        {
          "type": "p",
          "text": "Salesforce Product Trial Experiences Explore a few Salesforce trials below."
        },
        {
          "type": "list",
          "items": [
            "Start a Sales Cloud Enterprise trial.",
            "Start a Essentials trial for Small Businesses.",
            "Start a Service Cloud trial.",
            "Start a Platform trial.",
            "Start a Einstein Analytics trial.",
            "Start a Quip trial."
          ]
        },
        {
          "type": "p",
          "text": "User engagement can help admins quickly identify and implement the key features that users need to be successful in Salesforce. Use asetup assistantto give users a clear set of steps for more complex configurationsâfor example, getting up and running with a new social platform integration.Â After a new release, user engagement tools and techniques draw users' attention to new features, show them how to enable or use the features, and explain how the features help them. Use a simple one-framewelcome matfor lightweight announcements of new features. Provide a list of short walkthroughs or help topics that guide users through enabling, setting up, or getting started with the top features delivered in the release. Or present one or moreshortvideos that show the new features in action. If a new release requires setup, gamify the experience to encourage adoption and engagement. Providein-app achievementmarkers, such asTrailheadbadges or a custom reward platform."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/overview",
      "title": "User Engagement Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Planning the Scope of Your Project",
            "Best Practices",
            "ScenariosScenario Overviews",
            "Scenario Overviews",
            "Platform SupportDeclarative Prompts and AssistanceProgramatic Prompts and Assistance",
            "Declarative Prompts and Assistance",
            "Programatic Prompts and Assistance"
          ]
        },
        {
          "type": "p",
          "text": "The Lightning User Engagement Framework consists of design guidelines for onboarding, adoption, assistance, and learning patterns across the Salesforce ecosystem. Throughout the Salesforce product ecosystem, we use engagement patterns to onboard, guide, assist, and educate users. These user engagement guidelines will help designers and their teams identify business goals and plan accordingly, put best practices to work, and leverage sample recipes for common scenarios."
        },
        {
          "type": "list",
          "items": [
            "Identity the \"aha moment.\"The \"aha moment\" is when a user first realizes value in your product or solution. It usually happens first during onboarding, but can and should reoccur as the user grows and becomes increasingly proficient.",
            "Address needs at all stages of the user journey.Help maximize users' experience and efficiency. Are you designing for beginners, advanced users, or somewhere in between? New users need an onboarding flow that extends beyond the first five minutes after logging in. Existing users need flows for new features. Inactive users need flows that refamiliarize them with the product.",
            "Fit the experience to the persona.How do you want users to think or feel? What do you want them to do? Consider familiarity with the product and industry, motivation level, and product complexity. Then storyboard your flow before choosing how to deliver it.Explore the Salesforce user research personas and learn how to use them at your business on Trailhead.",
            "Experiment and optimize.Choose a metric (for example, \"trial to paid conversion\" or \"seven friends in ten days\") that drives your users to the aha moment. What can you do to encourage this behavior? Use conversion research: What behaviors did long-lasting users display early on? What trends can you identify? Identity correlations between behavior and retention."
          ]
        },
        {
          "type": "p",
          "text": "To help determine the right engagement experience for each user and situation, consider these factors: M.A.P. (message, audience, purpose)Identify themessage,audience, andpurposeof your content. Write out what you want your target user to learn, understand, or achieve (for example,I want users to get the lay of the land in Lightning Experience, and quickly understand how to do common tasks, so they can be productive.).Are you onboarding admins to a new product that they must configure and roll out? Introducing established customers to a new product feature? Your answers will help you begin to design the user experience. Gauge complexityHow complex is your feature? How steep of a learning curve will new users have? Established users? Novice admins? How long before the user becomes proficient? StoryboardImagine a userâs first experience with your feature. Whatâs the most helpful information you can offer right away? On second or third run? Is your feature something the user can take action on, or is it more informational? Support, donât disruptIs each in-app prompt both helpful and timely? Is it necessary? To avoid âpop-up-alooza,â check with others to make sure you're not creating competing or simultaneous content. Think beyond your channelWork with your product owner and product marketing manager to plan a multichannel rollout. For example, pair an in-app onboarding journey with an email nurture campaign that build on each other. Keep it localAs much as possible, provide help, tips, guidance, and solutions in the UI itself, where users have the most context. Make it relevantPersonalize content to fit the user, organization, and other factors specific to the user experience (as in persona-based flows). Anticipate usersâ needs using data (historical usage data, click paths, search terms, engagement metrics) and user research. Push or pull?Do you need to push content to users that they wouldnât otherwise notice, or will they be motivated to seek it out? Offer a secondary sourceIf appropriate, give users a way to reinvoke content pushed to them. Let users know where they can find tips and guidance in your app. Four scenarios illustrate the most common user engagement experiences:"
        },
        {
          "type": "list",
          "items": [
            "Onboarding",
            "Feature discovery and adoption",
            "Help and troubleshooting",
            "In-app learning and skill growth"
          ]
        },
        {
          "type": "p",
          "text": "These guidelines include example flows for each scenario. Think of them as representative use casesâor base recipes that you can adapt to meet your own needs. Use this table to help you select the right user engagement mechanism for each scenario. Who: User who is new to a trial, product, feature area, or release. What: Getting-started content including setup guidance, feature or product value proposition, help topics, videos, walkthroughs, tips, rewards for learning. Why: Show users where to begin, along with whatâs available, new, or changed. Get them to the \"aha moment\" quickly. Who:User A: User isn't using the product to its full potential; needs tips and tricks for saving time and increasing productivity, plus direction to undiscovered features and efficiencies.User B: Experienced user who just updated to the latest release; needs to know whatâs new, changed, or improved without workflow interruption. What: Tips, feature demos, new-release info, shortcuts, best practices, targeted help, rewards for learning. Why: Help beginners become experts; help experienced users learn new things; raise awareness of new features and releases. Who: User who is off course, and may or may not know it. What: Tips, visual cues, contextual help menu, solution-oriented messaging, and preemptive guidance. Why: Just-in-time prompts that help users learn by doing. Reliable resources and access to support. Who: All Trailblazers. What: Provide a deeper understanding of features and products, along with context around how different features or products work together; provide deeper training and explanations of features, products, and new releases; share efficiencies, shortcuts, and tips. Why: Give users the skills and information they need to get as much as possible out of your product or application. Throughout these User Engagement guidelines we will make reference to a variety of different prompt mechanisms and design patterns. Some of these prompts can be created directly from within Lightning Setup with declarative tools. Others will require programmatic approaches. The below matrix of prompts gives an overview of which have declarative support and which do not. Over time Lightning Prompt Authoring will provide support for more and more prompts declaratively. Docked Assistant and Non-Modal Prompts. Use clicks, not code, to create in-app guidance and engage users directly. Write your own content; in the prompts, you can include action buttons that take users to specified URLs.Â For each prompt, you can choose a target audience, along with where and for how long it appears.Lean more about in-app guidance for training, onboarding, and news here. Contextual Help Menu. The Help icon in the header opens a menu of contextual help topics, Trailhead modules, videos, and more items chosen by Salesforce. You can supplement these recommended resources by adding a section with links to your own content. Your section appears at the top of the help menu on each page.Lean more about customizing the help menu. Field-level Help (Tooltip). Define custom help text for your organizationâs fields, giving users a helpful description of any field on all detail and edit pages where it appears. Users can view the field-level help text by hovering over the Info icon next to the field.Learn more about defining field-level help. Lightning Experience Welcome Mat.Lay out the welcome mat for new users with onboarding resources such as videos and Trailhead modules. Use Salesforce's default content or display your own custom content. If youâre customizing, you can control the welcome mat that appears for first-time Lightning Experience users and for those automatically switched to Lightning Experience on a daily or weekly basis.ÂLearn more about customizing the welcome mat here. Feature promptsandsetup assistantscan be added programmatically to your custom application to boost adoption and onboarding. To get started, see the SLDS blueprints forFeature PromptsandSetup Assistant.Walkthroughscan also be added using custom code and thewalkthrough prompt blueprint, or you can use a Salesforce partner solution such as Pendo, WalkMe, or Improved Apps. Emulate Salesforce's owntrial experiencein your custom applications with thetrial bar blueprint shown here. Mostempty statemessages are automatically provided by the platform; to configure a custom empty statesee these guidelines."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/user-engagement/patterns",
      "title": "Patterns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Introduction",
            "Components and PatternsWelcome MatPopovers and PromptsDocked AssistantTooltipSetup AssistantEmpty StatesTrial Bar",
            "Welcome Mat",
            "Popovers and Prompts",
            "Docked Assistant",
            "Tooltip",
            "Setup Assistant",
            "Empty States",
            "Trial Bar"
          ]
        },
        {
          "type": "p",
          "text": "Support your User Engagement scenario with one or more of these patterns. Here at Salesforce, we use various engagement patterns to onboard, guide, assist, and educate our users. This section gives an overview of common patterns and offers examples of how they can be used. We also highlight pros and cons for each pattern and identify a few anti-patterns. Onboarding is your first opportunity to introduce a product or service to your customersâand to make a positive first impression. So say hello and make them feel welcome. The welcome mat (aka onboarding modal) is a blocking modal component that appears the first time a user logs into an app after certain scenarios, such as new user, new feature available, or major application updates, are activated. It can contain primary and secondary messages, with an optional call to action. Welcome mats introduce users to your app appâthey should feel welcoming and supportive, inspiring to explore the content. Splash Welcome Mat Welcome mats can be designed and configured to support a wide range of use cases. A simple \"splash\" welcome mat can deliver a welcoming message to users, with or without a single call to action button. Information-Only Welcome Mat An information-only welcome mat can be used to communicate important system or feature updates to users. Checklist Welcome Mat A welcome mat with multiple calls to action can be used to onboard users to a collection of topics related to a given scenario such asÂ a new release or new user. See theWelcome Mat blueprintfor implementation information. Use this full blocking modal to make sure that users acknowledge important updates. Use cases:Introduce a product, new user onboarding, seasonal release, major product update, or update where action is required. Popovers and prompts are non-modal dialog panels that give the user contextual information about your application. Prompts grab the userâs attention and alert them to system-related issues or updates. Prompts can come in many shapes, forms, and sizes. SLDS offers a wide variety of prompt patterns to support a range of use cases. Non-modal prompts engage users, nudging them to take action, or communicating system updates and notifications. A non-modal prompt gives the user information relevant to the current page, app, or larger context. Unlike a modal, a non-modal prompt is nonblocking, allowing the user to complete the current task before taking action. Dismissing removes it permanently (unless frequency rules apply). See theNon-Modal Prompt blueprintfor implementation information. Use cases: Communicate to users about system maintenance and downtime. Alert users of new and updated features. Encourage users to engage with another area of your application that they might not otherwise explore. A feature popover highlights a new feature or points out a significant change to an existing feature. Its content may also link to a help topic, video tutorial, or another page in your application. A feature popover may be triggered by a user action, or may simply appear the first time a user arrives on a new or updated page. Unlike a walkthrough, this is a single callout, with no subsequent steps. Once the user closes it, it doesn't appear again. Typically, feature popovers are used to onboard new users to an application, and appear early on in the onboarding process. See theFeature Popover blueprintfor implementation information. Use cases: Introducing a new feature, highlighting significant change to an existing feature, encouraging a user to take action where they might not otherwise. A walkthrough gives users a hands-on interactive tour, guiding them through a series of onboarding steps. It's a good way to introduce new features that appear within a single interactive page, or point out a feature's immediate business value. Walkthroughs can also guide users through a series of procedural steps across multiple pages, if the process is straightforward and unlikely to be customized. See theWalkthrough blueprintfor implementation information. Use cases: Onboarding users to a new workflow, giving a tour of new features, or providing contextual assistance while configuring or setting up your application. The docked assistant is a persistent, nonblocking panel that guides users as they complete tasks or gather information. The docked assistant pattern can be expanded or collapsed as needed, and stays with users as they navigate around your product or application. In a help and learning context, this panel may contain instructions, guidance, or learning material that users can refer to while working. In response to user actions, it can update its content, register achievements, or offer encouragement. The docked assistant is built on the Docked Composer blueprint's base variant. In the context of onboarding and user assistance, the blueprint contains content and tools that support the user engagement scenario. This may be instructional content, setup assistants, or videos. See theDocked Composer blueprintfor implementation information. Use the docked assistant to push important information to users while taking up minimal screen real estate. Use cases:Alerting users to new features or recent enhancements related to the current product or page. A tooltip (aka info bubble) pops up to display a small piece of contextual information about an element on the screen, whenever the user hovers over or focuses on that element. Rather than enabling action, tooltips provide examples, suggestions, and links to more information. They are not focusable and can't contain focusable content. Each tooltip includes a nubbin, a small triangle pointing to the element it references. The nubbin can appear at any of nine locationsâat the top, middle, or bottom of each side of the tooltip.Â Use cases:Field-level help, icon usage, secondary information about a page element that doesn't require persistent presence on page layouts. A setup assistant (aka progression system) is a centralized list of tasks designed to help users onboard organizations, clouds, or features.Â This prescriptive, detailed guide walks users through the complex process of configuring, setting up, and rolling out features, which can take hours or even days. In the process, it can launch LSF (Lightning Setup Flow) and link to configuration pages,Trailhead modules, articles, help and training documentation, and videos. Checkboxes, progress indicators, messages, or other rewards encourage users and motivate them to complete required steps. See theSetup Assistant blueprintfor implementation information. Use cases:Configuring a system that requires multiple, distinct tasks, often over an extended timeâfor example, a new or trial system. Empty states tell users that thereâs no content to displayâand what they can do next. Empty states are messages that appear whenever an element has no content to display to the userâand they're powerful onboarding tools. An empty state message consists of three pieces:"
        },
        {
          "type": "list",
          "items": [
            "Thetitledescribes the situation.",
            "Theheadlinegives you an opportunity to convey more information while adding some fun.",
            "If needed, you can also includebody textto add details or engage users."
          ]
        },
        {
          "type": "p",
          "text": "For readability, keepline lengthfor each of these pieces under 66 characters per line. In general, line length should never exceed the width of your illustration.Â For usage best practices including dos and dont's, see theEmpty State guidelines. An empty state is first a means to communicate with users. It should communicatewhatitâs for,whytheyâre seeing itâandwhat they can do next. It's also an opportunity to engage users, adding energy and motivating them to interact. It can guide users through anonboardingprocess or help them get more value from Salesforce, without overwhelming them with too much information at once. And it's a great way to reinforce our brand while injecting a bit of fun into the user experience. When designing an empty state, be sure to consider how well it will work fordesktopandmobileuse cases. Fo example, will it be used in both environments, or just one? Does the CTA apply for mobile users? How will the image work on a small screen? For more details, see theEmpty Statespattern documentation. Use cases:Empty list, unconfigured filter, empty feed, feature not yet set up or configured. The trial bar is a persistent user interface element that helps users wayfind or interact with priority content and tools, supporting a trial or other immersive onboarding scenarios. The purpose of this persistent experience is to put the applications, value propositions and key features front and center. The trial bar typically contains the application name plus a list of clickable links designed to expose users to key elements of the application, inspiring an \"aha moment.\" It may also include a countdown to the end of the trial phase and a primary call to action. See theTrial Bar blueprintfor implementation information. A trial bar should span the width of the upper viewport (the viewable area in a browser). It's best used in full-screen mode, and can't be dismissed by the user. Use cases:Application trial experiences, temporary states in which users are likely to need onboarding help. Explore a few Salesforce trials below."
        },
        {
          "type": "list",
          "items": [
            "Start a Sales Cloud Enterprise trial.",
            "Start an Essentials trial for Small Businesses.",
            "Start a Service Cloud trial."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/guidelines/voice-and-tone",
      "title": "Voice and Tone - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Your custom applications shouldnât just look and act like the Salesforce app â they should sound like it too. At Salesforce, we have guidelines we follow when we create written content. We apply the guidelines to text that appears in the app, including on-screen instructions and error messages. We use the same guidelines for other types of information, such as online help, developer doc, Walkthroughs, and Trailhead modules. Use the Voice & Tone Guidelines to get a quick introduction to our unique voice and tone, and to understand how to apply it to your work. The doc provides some quick writing guidelines, and includes great examples of the voice and tone from the app and the doc. For more in-depth information about Salesforce style, including details around usage, terminology, and punctuation, use theSalesforce Style Guide for Documentation and User Interface Text. This is especially helpful if youâre writing customized help or training content."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/icons",
      "title": "Icons - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Download the SLDS Icons zip folder with both svg and png file types. Access the SLDS icons in the Figma UI Kit."
        },
        {
          "type": "list",
          "items": ["Utility", "Doctype", "Standard", "Custom", "Action"]
        },
        {
          "type": "p",
          "text": "Read about usage and visual specifications for icons on theIconography design guideline. For implementation instructions, visit theicon component blueprint page. Utility icons are simple, single-color glyphs that identify labels and actions across form factors View UtilityIcons Doctype icons represent document file formats View DoctypeIcons Standard Object and Custom Object icons represent Salesforce entities and objects (e.g., Accounts, Leads, Cases, etc.) View StandardIcons Action icons are for use with quick actions on touch-screen devices View ActionIcons"
        },
        {
          "type": "list",
          "items": [
            "activity",
            "ad_set",
            "add_above",
            "add_below",
            "add_source",
            "add",
            "adduser",
            "adjust_value",
            "advanced_function",
            "advertising",
            "agent_home",
            "agent_session",
            "aggregate",
            "aggregation_policy",
            "alert",
            "all",
            "anchor",
            "angle",
            "animal_and_nature",
            "announcement",
            "answer",
            "answered_twice",
            "anywhere_alert",
            "anywhere_chat",
            "apex_alt",
            "apex_plugin",
            "apex",
            "app_web_messaging",
            "approval",
            "apps",
            "archive",
            "array",
            "arrow_bottom",
            "arrow_left",
            "arrow_right",
            "arrow_top",
            "arrowdown",
            "arrowup",
            "asset_audit",
            "asset_object",
            "asset_repossessed",
            "asset_warranty",
            "assignment",
            "attach",
            "automate",
            "away",
            "back",
            "ban",
            "block_visitor",
            "bold",
            "bookmark_alt",
            "bookmark_stroke",
            "bookmark",
            "bottom_align",
            "bottom_group_alignment",
            "breadcrumbs",
            "broadcast",
            "brush",
            "bucket",
            "budget_category_value",
            "budget_period",
            "bug",
            "builder",
            "bundle_config",
            "bundle_policy",
            "button_choice",
            "buyer_group_qualifier",
            "calculated_insights",
            "call",
            "campaign",
            "cancel_file_request",
            "cancel_transfer",
            "cant_sync",
            "capacity_plan",
            "capslock",
            "captions",
            "card_details",
            "cart",
            "case",
            "cases",
            "center_align_text",
            "center_align",
            "center_group_alignment",
            "change_owner",
            "change_record_type",
            "change_request",
            "chart",
            "chat",
            "check",
            "checkin",
            "checkout",
            "chevrondown",
            "chevronleft",
            "chevronright",
            "chevronup",
            "choice",
            "circle",
            "classic_interface",
            "clear",
            "clock",
            "close",
            "cms",
            "collapse_all",
            "collection_alt",
            "collection_variable",
            "collection",
            "color_swatch",
            "columns",
            "comments",
            "company",
            "component_customization",
            "connected_apps",
            "constant",
            "contact_request",
            "contact",
            "contactless_pay",
            "contract_alt",
            "contract_doc",
            "contract_line_outcome_data",
            "contract_line_outcome",
            "contract_payment",
            "contract",
            "copy_to_clipboard",
            "copy",
            "coupon_codes",
            "crossfilter",
            "currency_input",
            "currency",
            "custom_apps",
            "customer_workspace",
            "customer",
            "cut",
            "dash",
            "data_cloud",
            "data_graph",
            "data_mapping",
            "data_model",
            "data_transforms",
            "database",
            "datadotcom",
            "date_input",
            "date_time",
            "dayview",
            "delete",
            "deprecate",
            "description",
            "desktop_and_phone",
            "desktop_console",
            "desktop",
            "detach",
            "dialing",
            "diamond",
            "discounts",
            "dislike",
            "display_rich_text",
            "display_text",
            "dock_panel",
            "document_preview",
            "down",
            "download",
            "drag_and_drop",
            "drag",
            "duration_downscale",
            "dynamic_record_choice",
            "edit_form",
            "edit_gpt",
            "edit",
            "education",
            "einstein_alt",
            "einstein",
            "email_open",
            "email",
            "emoji",
            "end_call",
            "end_chat",
            "end_messaging_session",
            "engage",
            "enter",
            "entitlement",
            "erect_window",
            "error",
            "event_ext",
            "event",
            "events",
            "expand_all",
            "expand_alt",
            "expand",
            "expired",
            "fallback",
            "favorite_alt",
            "favorite",
            "feed",
            "field_sales",
            "file",
            "filter_criteria_rule",
            "filter_criteria",
            "filter",
            "filterList",
            "flow_alt",
            "flow",
            "food_and_drink",
            "form",
            "format",
            "formula",
            "forward_up",
            "forward",
            "freeze_column",
            "frozen",
            "fulfillment_order",
            "full_width_view",
            "fully_synced",
            "funding_award_adjustment",
            "funding_requirement",
            "global_constant",
            "graph",
            "groups",
            "guidance",
            "hazmat_equipment",
            "heart",
            "height",
            "help_center",
            "help_doc_ext",
            "help",
            "hide_mobile",
            "hide",
            "hierarchy",
            "high_velocity_sales",
            "highlight",
            "holiday_operating_hours",
            "home",
            "hourglass",
            "http",
            "identity",
            "image",
            "in_app_assistant",
            "inbox",
            "incident",
            "incoming_call",
            "indicator_performance_period",
            "info_alt",
            "info",
            "inner_join",
            "insert_tag_field",
            "insert_template",
            "inspector_panel",
            "integration",
            "internal_share",
            "italic",
            "join",
            "jump_to_bottom",
            "jump_to_left",
            "jump_to_right",
            "jump_to_top",
            "justify_text",
            "kanban",
            "key_dates",
            "key",
            "keyboard_dismiss",
            "keypad",
            "knowledge_base",
            "knowledge_smart_link",
            "label",
            "labels",
            "layers",
            "layout_banner",
            "layout_card",
            "layout_overlap",
            "layout_tile",
            "layout",
            "lead",
            "leave_conference",
            "left_align_text",
            "left_align",
            "left_join",
            "left",
            "level_down",
            "level_up",
            "light_bulb",
            "lightning_extension",
            "lightning_inspector",
            "like",
            "line_chart",
            "link",
            "linked",
            "list",
            "listen",
            "live_message",
            "location_permit",
            "location",
            "lock",
            "locked_with_additions",
            "locker_service_api_viewer",
            "locker_service_console",
            "log_a_call",
            "logout",
            "loop",
            "lower_flag",
            "macros",
            "magicwand",
            "maintenance_plan",
            "mark_all_as_read",
            "market",
            "matrix",
            "meet_content_source",
            "meet_focus_content",
            "meet_focus_equal",
            "meet_focus_presenter",
            "meet_present_panel",
            "merge_field",
            "merge",
            "metrics",
            "middle_align",
            "minimize_window",
            "missed_call",
            "mixed_sources_mapping",
            "money",
            "moneybag",
            "monthlyview",
            "more",
            "move",
            "mulesoft",
            "multi_picklist",
            "multi_select_checkbox",
            "muted",
            "new_direct_message",
            "new_window",
            "new",
            "news",
            "no_return",
            "not_in_sync",
            "not_saved",
            "note",
            "notebook",
            "notification_off",
            "notification_snoozed",
            "notification",
            "number_input",
            "office365",
            "offline_briefcase",
            "offline_cached",
            "offline",
            "omni_channel",
            "open_folder",
            "open",
            "opened_folder",
            "opportunity",
            "orchestrator",
            "orders",
            "org_chart",
            "outbound_call",
            "outcome",
            "outer_join",
            "output",
            "overflow",
            "package_org_beta",
            "package_org",
            "package",
            "page_structure",
            "page",
            "palette",
            "password",
            "paste",
            "path_experiment",
            "pause_alt",
            "pause",
            "payment_deferred",
            "payment_gateway",
            "pdf_ext",
            "people",
            "percent",
            "phone_landscape",
            "phone_portrait",
            "photo",
            "picklist_choice",
            "picklist_type",
            "picklist",
            "pin",
            "pinned",
            "plane",
            "planning_poker",
            "play",
            "podcast_webinar",
            "pop_in",
            "power",
            "preview",
            "price_book_entries",
            "price_books",
            "pricing_workspace",
            "print",
            "priority",
            "privately_shared",
            "problem",
            "process",
            "product_consumed_state",
            "product_quantity_rules",
            "product_service_campaign_item",
            "product_service_campaign",
            "product_transfer_state",
            "product_transfer",
            "product_warranty_term",
            "product_workspace",
            "product",
            "products",
            "profile_alt",
            "profile",
            "program_cohort_member",
            "program_cohort",
            "promotion_segments",
            "promotion_tiers",
            "promotions_workspace",
            "promotions",
            "prompt_builder",
            "prompt_edit",
            "prompt",
            "propagation_policy",
            "proposition",
            "push",
            "puzzle",
            "qualifications",
            "question_mark",
            "question",
            "questions_and_answers",
            "queue",
            "quick_text",
            "quip",
            "quotation_marks",
            "quote",
            "radio_button",
            "rating",
            "real_time",
            "reassign",
            "recipe",
            "record_alt",
            "record_collection",
            "record_consent",
            "record_create",
            "record_delete",
            "record_lookup",
            "record_update",
            "record",
            "recurring_exception",
            "recycle_bin_empty",
            "recycle_bin_full",
            "redo",
            "refresh",
            "relate",
            "reminder",
            "remove_formatting",
            "remove_link",
            "replace",
            "replay",
            "reply_all",
            "reply",
            "report_issue",
            "reset_password",
            "resource_absence",
            "resource_capacity",
            "resource_territory",
            "restriction_policy",
            "retail_execution",
            "retweet",
            "ribbon",
            "richtextbulletedlist",
            "richtextindent",
            "richtextnumberedlist",
            "richtextoutdent",
            "right_align_text",
            "right_align",
            "right_join",
            "right",
            "robot",
            "rotate",
            "routing_offline",
            "rows",
            "rules",
            "salesforce_page",
            "salesforce1",
            "save",
            "scan",
            "screen",
            "search",
            "section",
            "segments",
            "send_log",
            "send",
            "sender_email",
            "sentiment_negative",
            "sentiment_neutral",
            "serialized_product_transaction",
            "serialized_product",
            "service_appointment",
            "service_contract",
            "service_report",
            "service_territory_policy",
            "settings",
            "setup_assistant_guide",
            "setup_modal",
            "setup",
            "share_file",
            "share_mobile",
            "share_post",
            "share",
            "shield",
            "shift_pattern_entry",
            "shift_pattern",
            "shift_scheduling_operation",
            "shift_ui",
            "shopping_bag",
            "shortcuts",
            "side_list",
            "signature",
            "signpost",
            "skill",
            "skip_back",
            "skip_forward",
            "skip",
            "slack_conversations",
            "slack",
            "slider",
            "smiley_and_people",
            "sms",
            "snippet",
            "sobject_collection",
            "sobject",
            "socialshare",
            "sort_ascending",
            "sort_policy",
            "sort",
            "spacer",
            "sparkle",
            "sparkles",
            "spinner",
            "stage_collection",
            "stage",
            "standard_objects",
            "steps",
            "stop",
            "store",
            "strategy",
            "strikethrough",
            "success",
            "summary",
            "summarydetail",
            "survey",
            "swarm_request",
            "swarm_session",
            "switch",
            "symbols",
            "sync_in_progress",
            "sync",
            "system_and_global_variable",
            "table_settings",
            "table",
            "tableau",
            "tablet_landscape",
            "tablet_portrait",
            "tabset",
            "talent_development",
            "target_mode",
            "target",
            "task",
            "tax_policy",
            "tax_rate",
            "tax_treatment",
            "text_background_color",
            "text_color",
            "text_template",
            "text",
            "textarea",
            "textbox",
            "threedots_vertical",
            "threedots",
            "thunder",
            "tile_card_list",
            "toggle_off",
            "toggle_on",
            "toggle_panel_bottom",
            "toggle_panel_left",
            "toggle_panel_right",
            "toggle_panel_top",
            "toggle",
            "tollways",
            "top_align",
            "top_group_alignment",
            "topic",
            "topic2",
            "touch_action",
            "tour_check",
            "tour",
            "tracker",
            "trail",
            "trailblazer_ext",
            "trailhead_alt",
            "trailhead_ext",
            "trailhead",
            "transparent",
            "transport_bicycle",
            "transport_heavy_truck",
            "transport_light_truck",
            "transport_walking",
            "travel_and_places",
            "trending",
            "truck",
            "turn_off_notifications",
            "type_tool",
            "type",
            "undelete",
            "undeprecate",
            "underline",
            "undo",
            "unlinked",
            "unlock",
            "unmuted",
            "up",
            "upload",
            "user_role",
            "user",
            "variable",
            "variation_attribute_setup",
            "variation_products",
            "video_off",
            "video",
            "visibility_rule_assigned",
            "voicemail_drop",
            "volume_high",
            "volume_low",
            "volume_off",
            "waits",
            "walkthroughs",
            "warning",
            "warranty_term",
            "watchlist",
            "water",
            "weeklyview",
            "wellness",
            "width",
            "wifi",
            "work_forecast",
            "work_order_type",
            "work_queue",
            "workforce_engagement",
            "world",
            "your_account",
            "yubi_key",
            "zoomin",
            "zoomout"
          ]
        },
        {
          "type": "list",
          "items": [
            "ai",
            "attachment",
            "audio",
            "box_notes",
            "csv",
            "eps",
            "excel",
            "exe",
            "flash",
            "folder",
            "gdoc",
            "gdocs",
            "gform",
            "gpres",
            "gsheet",
            "html",
            "image",
            "keynote",
            "library_folder",
            "link",
            "mp4",
            "overlay",
            "pack",
            "pages",
            "pdf",
            "ppt",
            "psd",
            "quip_doc",
            "quip_sheet",
            "quip_slide",
            "rtf",
            "shared_folder",
            "slide",
            "stypi",
            "txt",
            "unknown",
            "video",
            "visio",
            "webex",
            "word",
            "xml",
            "zip"
          ]
        },
        {
          "type": "list",
          "items": [
            "account_info",
            "account_score",
            "account",
            "action_list_component",
            "actions_and_buttons",
            "activation_target",
            "activations",
            "address",
            "agent_home",
            "agent_session",
            "aggregate",
            "aggregation_policy",
            "ai_accelerator_card",
            "all",
            "announcement",
            "answer_best",
            "answer_private",
            "answer_public",
            "apex_plugin",
            "apex",
            "app_form_participant",
            "app_form_product_participant",
            "app",
            "approval",
            "apps_admin",
            "apps",
            "article",
            "asset_action_source",
            "asset_action",
            "asset_audit",
            "asset_downtime_period",
            "asset_hierarchy",
            "asset_object",
            "asset_relationship",
            "asset_state_period",
            "asset_warranty",
            "assigned_resource",
            "assignment",
            "attach",
            "attribute_based_pricing",
            "avatar_loading",
            "avatar",
            "bill_of_materials",
            "bot_training",
            "bot",
            "branch_merge",
            "brand",
            "budget_allocation",
            "budget_category_value",
            "budget_period",
            "budget",
            "bundle_config",
            "bundle_policy",
            "bundles_pricing",
            "business_hours",
            "buyer_account",
            "buyer_group_qualifier",
            "buyer_group",
            "calculated_insights",
            "calibration",
            "call_coaching",
            "call_history",
            "call",
            "campaign_members",
            "campaign",
            "cancel_checkout",
            "canvas",
            "capacity_plan",
            "care_request_reviewer",
            "carousel",
            "case_change_status",
            "case_comment",
            "case_email",
            "case_log_a_call",
            "case_milestone",
            "case_transcript",
            "case_wrap_up",
            "case",
            "catalog",
            "category",
            "change_request",
            "channel_program_history",
            "channel_program_levels",
            "channel_program_members",
            "channel_programs",
            "chart",
            "checkout",
            "choice",
            "client",
            "cms",
            "coaching",
            "code_playground",
            "code_set_bundle",
            "code_set",
            "collection_variable",
            "collection",
            "connect_wallet",
            "connected_apps",
            "constant",
            "contact_list",
            "contact_request",
            "contact",
            "contract_line_item",
            "contract_line_outcome_data",
            "contract_line_outcome",
            "contract_payment",
            "contract",
            "cost_model",
            "coupon_codes",
            "crypto_category_wallet_group",
            "crypto_product_category_wallet_role",
            "crypto_product",
            "crypto_transaction_envelope_change_snapshot",
            "crypto_transaction_envelope_item",
            "crypto_transaction_envelope",
            "crypto_transaction",
            "crypto_wallet_group_item",
            "crypto_wallet_group",
            "crypto_wallet",
            "currency_input",
            "currency",
            "custody_chain_entry",
            "custody_entry_verification",
            "custody_override",
            "custom_component_task",
            "custom_notification",
            "custom",
            "customer_360",
            "customer_lifecycle_analytics",
            "customer_portal_users",
            "customer_workspace",
            "customer",
            "customers",
            "dashboard_component",
            "dashboard_ea",
            "dashboard",
            "data_cloud",
            "data_governance",
            "data_graph",
            "data_integration_hub",
            "data_lake_objects",
            "data_mapping",
            "data_model",
            "data_streams",
            "data_transforms",
            "datadotcom",
            "dataset",
            "datashare_target",
            "datashares",
            "date_input",
            "date_time",
            "decision",
            "default",
            "delegated_account",
            "device",
            "digital_verification_config_group",
            "digital_verification_config",
            "disclosure_and_compliance",
            "discounts",
            "display_rich_text",
            "display_text",
            "document_preview",
            "document_reference",
            "document",
            "drafts",
            "duration_downscale",
            "dynamic_highlights_panel",
            "dynamic_record_choice",
            "education",
            "einstein_replies",
            "email_chatter",
            "email",
            "employee_asset",
            "employee_contact",
            "employee_job_position",
            "employee_job",
            "employee_organization",
            "employee",
            "empty",
            "endorsement",
            "entitlement_policy",
            "entitlement_process",
            "entitlement_template",
            "entitlement",
            "entity_milestone",
            "entity",
            "environment_hub",
            "event",
            "events",
            "expense_report_entry",
            "expense_report",
            "expense",
            "facility_bed",
            "feed",
            "feedback",
            "field_sales",
            "file",
            "filter_criteria_rule",
            "filter_criteria",
            "filter",
            "first_non_empty",
            "flow",
            "folder",
            "forecasts",
            "form",
            "formula",
            "fulfillment_order",
            "funding_award_adjustment",
            "funding_requirement",
            "generic_loading",
            "global_constant",
            "goals",
            "group_loading",
            "groups",
            "guidance_center",
            "header_discounts",
            "hierarchy",
            "high_velocity_sales",
            "historical_adherence",
            "holiday_operating_hours",
            "home",
            "household",
            "identifier",
            "immunization",
            "impact_outcome",
            "impact_strategy_assignment",
            "impact_strategy",
            "inbox",
            "incident",
            "indicator_assignment",
            "indicator_definition",
            "indicator_performance_period",
            "indicator_result",
            "individual",
            "insights",
            "instore_locations",
            "investment_account",
            "invocable_action",
            "iot_context",
            "iot_orchestrations",
            "javascript_button",
            "job_family",
            "job_position",
            "job_profile",
            "kanban",
            "key_dates",
            "knowledge",
            "labels",
            "lead_insights",
            "lead_list",
            "lead",
            "learner_program",
            "letterhead",
            "lightning_component",
            "lightning_usage",
            "link",
            "linked",
            "list_email",
            "list_fee",
            "list_rate",
            "live_chat_visitor",
            "live_chat",
            "location_permit",
            "location",
            "log_a_call",
            "logging",
            "loop",
            "macros",
            "maintenance_asset",
            "maintenance_plan",
            "maintenance_work_rule",
            "manual_discounts",
            "market",
            "marketing_actions",
            "med_rec_recommendation",
            "med_rec_statement_recommendation",
            "medication_dispense",
            "medication_ingredient",
            "medication_reconciliation",
            "medication_statement",
            "medication",
            "merge",
            "messaging_conversation",
            "messaging_session",
            "messaging_user",
            "metric_definition",
            "metric",
            "metrics",
            "mulesoft",
            "multi_picklist",
            "multi_select_checkbox",
            "network_contract",
            "news",
            "nft_settings",
            "nft_studio",
            "no_code_model",
            "note",
            "number_input",
            "observation_component",
            "omni_channel",
            "omni_supervisor",
            "operating_hours",
            "operation_plan_execution",
            "operation_plan_request",
            "operation_plan_step_execution",
            "operation_plan_step",
            "operation_plan",
            "opportunity_contact_role",
            "opportunity_splits",
            "opportunity",
            "orchestrator",
            "order_item",
            "orders",
            "outcome_activity",
            "outcome",
            "output",
            "panel_detail",
            "partner_fund_allocation",
            "partner_fund_claim",
            "partner_fund_request",
            "partner_marketing_budget",
            "partners",
            "party_profile",
            "password",
            "past_chat",
            "path_experiment",
            "patient_medication_dosage",
            "payment_gateway",
            "people_score",
            "people",
            "performance",
            "person_account",
            "person_language",
            "person_name",
            "photo",
            "picklist_choice",
            "picklist_type",
            "planogram",
            "policy",
            "poll",
            "portal_roles_and_subordinates",
            "portal_roles",
            "portal",
            "post",
            "practitioner_role",
            "prep_flow",
            "price_adjustment_matrix",
            "price_adjustment_schedule",
            "price_adjustment_tier",
            "price_book_entries",
            "price_books",
            "price_sheet",
            "pricebook",
            "pricing_workspace",
            "problem",
            "procedure_detail",
            "procedure",
            "process_exception",
            "process",
            "product_consumed_state",
            "product_consumed",
            "product_item_transaction",
            "product_item",
            "product_quantity_rules",
            "product_request_line_item",
            "product_request",
            "product_required",
            "product_service_campaign_item",
            "product_service_campaign",
            "product_transfer_state",
            "product_transfer",
            "product_warranty_term",
            "product_workspace",
            "product",
            "products",
            "program_cohort_member",
            "program_cohort",
            "promotion_segments",
            "promotion_tiers",
            "promotions_workspace",
            "promotions",
            "prompt_builder",
            "prompt",
            "propagation_policy",
            "proposition",
            "qualifications",
            "query_editor",
            "question_best",
            "question_feed",
            "queue",
            "quick_text",
            "quip_sheet",
            "quip",
            "quotes",
            "radio_button",
            "rate_adjustment",
            "read_receipts",
            "real_time",
            "recent",
            "recipe",
            "record_consent",
            "record_create",
            "record_delete",
            "record_lookup",
            "record_signature_task",
            "record_update",
            "record",
            "recycle_bin",
            "registered_model",
            "related_list",
            "relationship",
            "repeaters",
            "reply_text",
            "report_type",
            "report",
            "resource_absence",
            "resource_capacity",
            "resource_preference",
            "resource_skill",
            "restriction_policy",
            "return_order_line_item",
            "return_order",
            "reward",
            "robot",
            "rtc_presence",
            "sales_cadence_target",
            "sales_cadence",
            "sales_channel",
            "sales_path",
            "sales_value",
            "salesforce_cms",
            "scan_card",
            "schedule_objective",
            "scheduling_constraint",
            "scheduling_policy",
            "scheduling_workspace_territory",
            "scheduling_workspace",
            "screen",
            "search",
            "section",
            "segments",
            "selling_model",
            "serialized_product_transaction",
            "serialized_product",
            "service_appointment_capacity_usage",
            "service_appointment",
            "service_contract",
            "service_crew_member",
            "service_crew",
            "service_report",
            "service_request_detail",
            "service_request",
            "service_resource",
            "service_territory_location",
            "service_territory_member",
            "service_territory_policy",
            "service_territory",
            "settings",
            "setup_modal",
            "shift_pattern_entry",
            "shift_pattern",
            "shift_preference",
            "shift_scheduling_operation",
            "shift_template",
            "shift_type",
            "shift",
            "shipment",
            "skill_entity",
            "skill_requirement",
            "skill",
            "slack_conversations",
            "slack",
            "slider",
            "sms",
            "snippet_alt",
            "snippet",
            "snippets",
            "sobject_collection",
            "sobject",
            "social",
            "solution",
            "sort_policy",
            "sort",
            "sossession",
            "stage_collection",
            "stage",
            "steps",
            "store_group",
            "store",
            "story",
            "strategy",
            "survey",
            "swarm_request",
            "swarm_session",
            "system_and_global_variable",
            "tableau",
            "task",
            "task2",
            "tax_policy",
            "tax_rate",
            "tax_treatment",
            "taxonomy",
            "team_member",
            "template",
            "text_template",
            "text",
            "textarea",
            "textbox",
            "thanks_loading",
            "thanks",
            "time_period",
            "timesheet_entry",
            "timesheet",
            "timeslot",
            "title_party",
            "today",
            "toggle",
            "topic",
            "topic2",
            "tour_check",
            "tour",
            "trailhead_alt",
            "trailhead",
            "travel_mode",
            "unified_health_score",
            "unmatched",
            "uploaded_model",
            "user_role",
            "user",
            "variable",
            "variation_attribute_setup",
            "variation_products",
            "video",
            "visit_templates",
            "visits",
            "visualforce_page",
            "visualization",
            "voice_call",
            "volume_discounts",
            "waits",
            "walkthroughs",
            "warranty_term",
            "water",
            "webcart",
            "whatsapp",
            "work_capacity_limit",
            "work_capacity_usage",
            "work_contract",
            "work_forecast",
            "work_order_item",
            "work_order",
            "work_plan_rule",
            "work_plan_template_entry",
            "work_plan_template",
            "work_plan",
            "work_queue",
            "work_step_template",
            "work_step",
            "work_summary",
            "work_type_group",
            "work_type",
            "workforce_engagement",
            "workspace",
            "your_account"
          ]
        },
        {
          "type": "list",
          "items": [
            "custom1",
            "custom2",
            "custom3",
            "custom4",
            "custom5",
            "custom6",
            "custom7",
            "custom8",
            "custom9",
            "custom10",
            "custom11",
            "custom12",
            "custom13",
            "custom14",
            "custom15",
            "custom16",
            "custom17",
            "custom18",
            "custom19",
            "custom20",
            "custom21",
            "custom22",
            "custom23",
            "custom24",
            "custom25",
            "custom26",
            "custom27",
            "custom28",
            "custom29",
            "custom30",
            "custom31",
            "custom32",
            "custom33",
            "custom34",
            "custom35",
            "custom36",
            "custom37",
            "custom38",
            "custom39",
            "custom40",
            "custom41",
            "custom42",
            "custom43",
            "custom44",
            "custom45",
            "custom46",
            "custom47",
            "custom48",
            "custom49",
            "custom50",
            "custom51",
            "custom52",
            "custom53",
            "custom54",
            "custom55",
            "custom56",
            "custom57",
            "custom58",
            "custom59",
            "custom60",
            "custom61",
            "custom62",
            "custom63",
            "custom64",
            "custom65",
            "custom66",
            "custom67",
            "custom68",
            "custom69",
            "custom70",
            "custom71",
            "custom72",
            "custom73",
            "custom74",
            "custom75",
            "custom76",
            "custom77",
            "custom78",
            "custom79",
            "custom80",
            "custom81",
            "custom82",
            "custom83",
            "custom84",
            "custom85",
            "custom86",
            "custom87",
            "custom88",
            "custom89",
            "custom90",
            "custom91",
            "custom92",
            "custom93",
            "custom94",
            "custom95",
            "custom96",
            "custom97",
            "custom98",
            "custom99",
            "custom100",
            "custom101",
            "custom102",
            "custom103",
            "custom104",
            "custom105",
            "custom106",
            "custom107",
            "custom108",
            "custom109",
            "custom110",
            "custom111",
            "custom112",
            "custom113"
          ]
        },
        {
          "type": "list",
          "items": [
            "add_contact",
            "add_file",
            "add_photo_video",
            "add_relationship",
            "adjust_value",
            "announcement",
            "apex",
            "approval",
            "back",
            "bug",
            "call",
            "canvas",
            "change_owner",
            "change_record_type",
            "check",
            "clone",
            "close",
            "defer",
            "delete",
            "description",
            "dial_in",
            "download",
            "edit_groups",
            "edit_relationship",
            "edit",
            "email",
            "fallback",
            "filter",
            "flow",
            "follow",
            "following",
            "freeze_user",
            "goal",
            "google_news",
            "info",
            "join_group",
            "lead_convert",
            "leave_group",
            "log_a_call",
            "log_event",
            "manage_perm_sets",
            "map",
            "more",
            "new_account",
            "new_campaign",
            "new_case",
            "new_child_case",
            "new_contact",
            "new_event",
            "new_group",
            "new_lead",
            "new_note",
            "new_notebook",
            "new_opportunity",
            "new_person_account",
            "new_task",
            "new",
            "password_unlock",
            "preview",
            "priority",
            "question_post_action",
            "quote",
            "recall",
            "record",
            "refresh",
            "reject",
            "remove_relationship",
            "remove",
            "reset_password",
            "scan_disabled",
            "scan_enabled",
            "script",
            "share_file",
            "share_link",
            "share_poll",
            "share_post",
            "share_thanks",
            "share",
            "sort",
            "submit_for_approval",
            "update_status",
            "update",
            "upload",
            "user_activation",
            "user",
            "view_relationship",
            "web_link"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/accessible-kinetics",
      "title": "Accessible Kinetics - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "How to Use Kinetics for a Range of Visual Abilities",
            "Designing Flashing or Blinking Animation",
            "Playing Animation",
            "Animation format",
            "Using Animation to Inform the User",
            "User Settings for Animation",
            "Moving Things Across the Screen",
            "Parallax Animations",
            "Accessible Kinetics",
            "Cursor",
            "Keyboard",
            "Focus"
          ]
        },
        {
          "type": "p",
          "text": "Kinetics is an inclusive system and perspective that aims to work for a range of abilities. Kinetics can improve the experience for users with cognitive disabilities. It can help orient users within a UI, guide them to call to actions, and create relationships/hierarchy between elements on a page. However, animation is a double edged sword and if designed improperly it can cause headaches, nausea, dizziness, or vertigo for users with vestibular disorders. In fact, in some cases animation can cause seizures for users with Photosensitive Epilepsy (https://www.epilepsy.com/learn/triggers-seizures/photosensitivity-and-seizures). Included in the following Doâs and Donâts are two requirements from WCAG (global accessibility guidelines from W3C) on how to prevent these reactions. Salesforce Kinetics Systemâs #1 principle is functional animation. When this is your primary driver for adding animation to your UI, we can create accessible experiences that drive clarity, productivity, and delight. Motion animationtriggered by interaction can be disabled, unless the animation isessentialto the functionality or the information being conveyed. Do:Design clear, simple, and purposeful animations. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:Design anything that is flashing/blinking or cycling of an animation at a speed faster than 3 times per second because it may cause seizures (WCAG 2.3.2) Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Do:For any moving, blinking, or scrolling information that starts automatically, lasts more than five seconds, and is presented in parallel with other content, there should be a mechanism for the user topause, stop, or hide it. Except when the movement, blinking, or scrolling is part of an activity where it isessential. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Do:For any auto-updating information that starts automatically and is presented in parallel with other content, ensure there is a mechanism for the user to pause, stop, or hide it or to control the frequency of the update. Except when the auto-updating is part of an activity where it is essential. Don't:Play the animation for longer than five seconds (or continuously loop it) without giving the user any way to pause or stop it. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:Add non-essential auto-updating information that may start automatically or be presented in parallel with the main content without designing a static version and an alternate text to support the userâs reduced motion preferences Do:Use video clips that the user can press to start and pause for non interactive animations that exist to provide supplementary information. Use animations created with SVGs that are coded using CSS and Javascript as they are scalable across multiple screen sizes, support prefers-reduced-motion on browser level settings and provide control over playing animated content for developers as well as end users Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:Use gifs that are on a constant loop. Do:Include additional static elements to convey the same information as the animation (ie. text, icons, etc). Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:Rely on using the animation alone because some users have system level preferences to turn off all animation. Do:Respect a userâs system level settings for motion/animation. If a user has prefers-reduce-motion CSS Media Query in their OS/Browser settings, then turn off animations completely. In addition to the default setting, add a Salesforce-specific motion settings in addition to turn off animations. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:Rely solely on animation alone to demonstrate important information. Because animation affects people differently, weâre not able to predict what level of animation is safe for every single user, so itâs best to completely turn it off if the user has requested. Parallax can be used to distinguish primary content from background elements. In essence parallax combines the use of z-depth and layering to elevate important content from a page and create an interesting relationship between the static background pieces of a page. Do:Use parallax scrolling with option to turn off unnecessary motion globally. If decorative elements move in and out of view when the essential page content is scrolled vertically, use a control at the top of each page that allows the user to turn off unnecessary animations. Do:Include the ability to turn off non-essential animations as a site-wide setting. Refer to prefers-reduced-motion media query in the User Settings for Animation section. Do:Design parallax motion to be subtle and as a punctuation to the scrolling movement, at the end of, or at the beginning of a transition. Don't:Rely on parallax motion alone to convey affordance for interactions. Don't:Move screen elements drastically over several distance while designing parallax animations. Kinetics accessibility may be defined based on three categories. Classic:Classic motion is an out-of-the-box experience that displays the full spectrum of motion, a combination of both functional and decorative animations in a component or an experience. For example, when a user interacts with an icon button within an expandable list, its background scales and changes color to blue on a hover. When the user clicks on the icon button, a ripple animation plays in the border and background of the button. And an expandable field opens underneath the first icon in response to the user's click. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Utilitarian:Utilitarian motion offers a more restrained experience, displaying only the most crucial feedback and guidance for users. Utilitarian motion leaves out any movement users may construe as decorative or secondary. For example, when a user interacts with a button icon within an expandable list, its background scales and changes to blue on a hover. With a click, an expandable field opens underneath the related item and its background scales and changes color to blue. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Reduced annimation:Reduced animation offers an experience of no motion if the user chooses to see only a static UI. For example, as a user interacts with a button icon, its background changes instantly to blue on a hover. On a click, a new field appears underneath the related item. Users can choose to turn off animations on the browser level. This is a great option for users who suffer from vestibular disorders or those who are generally affected by seeing animations on screen. The reduced motion can be triggered by the ** prefers-reduce-motion media query in a userâs OS/Browser settings. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Out of the box Kinetics:All default animations run both utilitarian and decorative kinetics for components and experiences. A user should have the capability to toggle betweenClassic or Utilitariananimation settings at the browser level depending on their preference, unless the user settings are set toprefers-reduced-motionwhich would turn off animations all together. The default pointer must change to an open hand click state when it encounters a clickable element on the screen. There are times where the default cursor behavior doesnât cut it. In these cases, we can change the cursor to a more meaningful visual state that reflects the expected user interaction on that element. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Playable animation:Pause the carousel animation when the mouse pointer is hovering over the carousel. This will help users access content and links within the carousel more easily. The Kinetics out of the box experience will be viewable on keyboard interaction just as it is experienced with a mouse interaction. Interactive animation:Users can tab through components and receive Kinetics affordances in addition to the focus animation. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Playable animation:On keyboard interactions, parallel or continuous animated content such ascarouselsmust pause till the user tabs away. Keyboard users will not lose their position when the carousel is paused. The focus state animates with the keyboard and cursor interaction. Kinetics follows standard styling hooks for all focus state animations to maintain consistency between all component interactions. Refer to theStyling Hooks sectionto learn about styling hooks in detail. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/choreography/design-transitions",
      "title": "Design Transitions - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "How to Move from One View to Another",
            "Space",
            "HierarchyNo Hierarchy: Parallel SequencingModerate Hierarchy: Staggered SequencingStrong Hierarchy: Serial Sequencing",
            "No Hierarchy: Parallel Sequencing",
            "Moderate Hierarchy: Staggered Sequencing",
            "Strong Hierarchy: Serial Sequencing",
            "Emphasis",
            "Latency",
            "Fatigue"
          ]
        },
        {
          "type": "p",
          "text": "Transitions are the most common motion youâll deal with. A transition occurs anytime thereâs a change to the state of the view. Transitions can be as simple as a single component entering the view, or as complex as a complete view change. Wherever there are two consecutive artboards in your design, thereâs a transition. Panel Transitions in Lightning Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. When designing a transition, consider these things:Space:The three-dimensional stage on which elements will be choreographed. This tells you where things live on and off screen, and the direction of motion.Hierarchy:The relative importance of each element. This tells you how to sequence the elements.Emphasis:The elements that really need to stand out or create visual appeal. This tells you about the quality of acceleration.Latency:Elements that arenât yet downloaded before the transition begins. This tells you if spinners or stencils will be part of the transition.Fatigue:A transition will feel plodding if itâs too frequent. This tells you to consider a simpler alternate transition for subsequent runs. Before you animate anything, you should understand how your composition is staged: the layers of your app. This is thespatial model. The model tells you where elements live on and off screen, and the direction in which they enter and exit the view. The model helps users orient themselves to state changes, building their spatial intuition for where features live throughout the app. In the lightning design system the spatial model definitions consists of two types:"
        },
        {
          "type": "list",
          "items": [
            "Components float on multiple levels",
            "Components live on page level relative to a parent element on that page."
          ]
        },
        {
          "type": "p",
          "text": "Multi-level components:In Salesforce, lightning design systems components may exist on 4 levels higher than the standard page.Components that live on their individual page levels will gravitate towards the center of the page when triggered, thus guiding users through a more holistically weighted experience and improving visual scan-ability of information Level 1 : Docked Composer and Docked Utility bar Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Level 2: Panels Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Level 3: Toasts & Notifications Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Level 4:Modals Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Relative components:Components that originate from a parent element will float elevated above the same page level as the parent element. These components will move in relation to the parent component when triggered Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. The way you sequence elements tells users about the importance of each element. At one end of the spectrum, you can have everything enter at the same time. while at the other, they can be sequenced one at a time. Use parallel sequencing to show a direct relationship between elements. Synchronizing progress indicator with directional modal Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Use staggered sequencing to show direction or punctuation. Points:"
        },
        {
          "type": "list",
          "items": [
            "Createsfluidity",
            "Direction stagger: like elements evenly sequenced for a directional domino effect.",
            "Punctuation stagger: unlike elements; last element in sequence gets the most attention. This can be achieved by using offsets and delays in duration"
          ]
        },
        {
          "type": "p",
          "text": "Direction Stagger: Subitems in a Vertical Navigation Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Punctuation Stagger: Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Dev tips:"
        },
        {
          "type": "list",
          "items": [
            "You can use direction staggers with looped nth-child delays in SCSS, or promise-based delays in JavaScript. The SCSS approach works well when thereâs a known, fixed number of items to be staggered. The JavaScript approach is better when the staggered items are dynamically loaded, or the items arenât of the same class."
          ]
        },
        {
          "type": "p",
          "text": "Use serial sequencing to draw attention to another part of the experience. Points:"
        },
        {
          "type": "list",
          "items": [
            "For cause-and-effect relationships between elements.",
            "Minimizing change blindness.",
            "Like staggered sequencing, punctuates the last element, but serial sequencing makes this effect more pronounced. Transfers momentum of the flow; changes focus of the experience. This is very important for experiences that may consist of changes that happen out-of-view"
          ]
        },
        {
          "type": "p",
          "text": "Directing users to errors on In-App Guidance Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Use emphasis to bring special focus to parts of the page that needs immediate attentionPoints:"
        },
        {
          "type": "list",
          "items": [
            "Emphasis can create urgency: alerts, toasts, notifications",
            "Emphasis can create visual interest and break monotony: celebrations, brand moments",
            "Analogy: lead actors vs supporting actors vs extras. Most motion is done by the support and extras: subtle, functional. Your lead role is saved for something very special; itâs the one that stands out and is remembered."
          ]
        },
        {
          "type": "p",
          "text": "Examples:Urgency:Toast modes for neutral, warning, error, and success. The extra dip in the movement provides more force to the rhythm, bringing extra focus into the action. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Notification alerts:The vibration emphasis around the red circled alert signifies a call out for attention. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Visual Interest:Success in Progress Ring. The loading animation provides context for completing a task and the burst provides the emphasis necessary to give the success more impact. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Success as depicted in progress ring Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Motion can be used to provide a fluid transition for the user when they are presented with new information. But remember that some elements wonât already be downloaded when the transition begins. In Kinetics, we aim to use experiences that improve the perceived latency of our pages. We can do this by turning what tends to feel like passive waiting to active waiting by offering users something to do in the interim as contents load."
        },
        {
          "type": "list",
          "items": [
            "A branded loading experience provides a great way to keep users engaged while loading full pages. Use branded loading sequences within key user flows where users tend to spend more time",
            "If information will take a while to load, your transition will need spinners or stencils."
          ]
        },
        {
          "type": "p",
          "text": "You canât always sequence elements that load. Consider elegant ways of handling how individual sections on a page loads. Fading in new content, gradually increasing space for new content. Loading in Pop-overs:When there is a lot of information, load content as it becomes available and fade in the new content Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Scrolling through content:"
        },
        {
          "type": "list",
          "items": [
            "Progressively load content as users scroll. Loading information at the top of the page first and gradually loading the rest of the page will reduce wait times and quickly provide content for users to look at",
            "It is important to not use GIFs while showing visuals as they cannot be paused or played and are rarely small in file size, thereby contributing to increased page load times",
            "By default, pause any media that may be playing off screen until the user scrolls to the relevant section. You can pause and play animations by settinganimation-play-stateproperty topausedusing CSS and JavaScript on the element with theanimationstyle.",
            "CSS Example in codeelement{animation:happy-animation2s linear;}element.paused{animation-play-state:paused;}",
            "element{animation:happy-animation2s linear;}element.paused{animation-play-state:paused;}",
            "JavaScript example in code// then if/when element is in the viewportelement.classList.remove('paused');",
            "// then if/when element is in the viewportelement.classList.remove('paused');",
            "Alternatively, in JavaScript, set the property in JS// on element loadelement.style.animationPlayState='paused';// then if/when element is in viewportelement.style.animationPlayState='play';",
            "// on element loadelement.style.animationPlayState='paused';// then if/when element is in viewportelement.style.animationPlayState='play';"
          ]
        },
        {
          "type": "p",
          "text": "Create anticipation with Spinners"
        },
        {
          "type": "list",
          "items": [
            "Pair with text to progressively communicate with the user",
            "Add variations in speed, acceleration or spinner elements to avoid monotonous repetition"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Create anticipation with Stencil:"
        },
        {
          "type": "list",
          "items": [
            "The place holder UI has to be an accurate representation of the final UI to enable a smooth fade transition to content and avoid misleading the user. For instance donât use stencils for empty states as it contradicts user expectations",
            "Load content by revealing information through progressive disclosure. For example, you can fade the stencil first to the predominant color, then to the blurred version of the content, and then to the final UI"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. You can use one or more loading treatments in combination to improve perceived loading times on dense pages:"
        },
        {
          "type": "list",
          "items": [
            "Determinate progress barscan be used to tell the user when a page is fully loaded at the top of the page along with the use of stencils or spinners to depict the loading of individual UI elements. Doing this might mitigate cognitive load for the user in dense UI pages by letting them know how much of the page is fully loaded.",
            "Spinners and stencils can be used in combination for different types of content. A spinner may be better suited for large areas with varying content type, whereas a stencil maybe better suited for standard UI structures"
          ]
        },
        {
          "type": "p",
          "text": "When to use Spinners and Stencils: To learn about Lightning Design System best practices for stencils and spinner, refer to thedesign guidelines. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Consider the context of the transition, and whether it might run several times over within a short time frame. Would this annoy or bore users? If so, consider a simpler alternate transition for subsequent runs, or eliminating subsequent transitions altogether. Examples:"
        },
        {
          "type": "list",
          "items": [
            "SLDS panel transitions. List item staggers in only when the panel opens, not every time you navigate back from a subview"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/choreography/designing-component-motion",
      "title": "Designing Component Motion - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "How to Make Your Custom Components Move",
            "Hover",
            "Focus",
            "Active",
            "Selected"
          ]
        },
        {
          "type": "p",
          "text": "Lightning components will come with Kinetics built right into it in the near future, but sometimes youâll find the need to customize these components or create entirely new ones. Adding motion to a component is like designing a small-scale transition. But there are some specific states to consider when you design your motion. A component can have one or moretargetsthat respond or move to hover, active, focus, and selected states. Pointer positioned over target. Defined by :hover pseudo-selector in CSS. Points:"
        },
        {
          "type": "list",
          "items": ["Two kinds of hovers: feedback and reveal."]
        },
        {
          "type": "p",
          "text": "Do:"
        },
        {
          "type": "list",
          "items": [
            "Feedback hover:Strengthenssignifierfor user.Creates anticipation and Kinetics quality offluidityIgnored via touchscreen. (Motion & Accessibility)Ignored via keyboard. (Motion & Accessibility)",
            "Strengthenssignifierfor user.",
            "Creates anticipation and Kinetics quality offluidity",
            "Ignored via touchscreen. (Motion & Accessibility)",
            "Ignored via keyboard. (Motion & Accessibility)"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Reveal hover:Shows more UI related to the target elementMust be touchscreen accessible, typically via long press.Must be keyboard accessible, typically when focused with Tab key.",
            "Shows more UI related to the target element",
            "Must be touchscreen accessible, typically via long press.",
            "Must be keyboard accessible, typically when focused with Tab key.",
            "Best for small components like buttons, and not larger ones like cards.",
            "For components with multiple hover targets"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Don't:"
        },
        {
          "type": "list",
          "items": [
            "Donât complicate this motion. Should appear noncommittal; a small step toward a bigger action. Use onlyparallel sequencing.",
            "Donât have hover targets that shift under the cursor, i.e., elements that nudge to the side as if theyâre trying to avoid being clicked."
          ]
        },
        {
          "type": "p",
          "text": "Hover Patterns: Scale"
        },
        {
          "type": "list",
          "items": [
            "Best for components with visible containers",
            "Be careful scaling text. Doesnât look good on some browsers."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Spotlight"
        },
        {
          "type": "list",
          "items": [
            "Best for components with 1:1 aspect ratios",
            "Be careful scaling text. Doesnât look good on some browsers.",
            "Be mindful of proximity to other elements: spotlight could get too close."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Mouse-aware underline"
        },
        {
          "type": "list",
          "items": ["Best for interactive components that contain text"]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Target ready for activation. Defined by:focuspseudo-selector in CSS. Points:"
        },
        {
          "type": "list",
          "items": [
            "Tells non-pointer users where they are on the screen.",
            "Focus state immediately follows active state.",
            "Must be keyboard accessible, typically by using tab and arrow keys.",
            "Beware of animating the focus state. Might make the experience feel slow. Test motion inrapid succession."
          ]
        },
        {
          "type": "p",
          "text": "Patterns:"
        },
        {
          "type": "list",
          "items": [
            "A focus state animates on click. Use a quick fade to ensure the focus animation plays fluidly with the rest of the  component animation. This affects the perceived latency of the interaction."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Target activated by pointer or keyboard. Defined by:activepseudo-selector in CSS. Points:"
        },
        {
          "type": "list",
          "items": [
            "Assures user that action will be taken.",
            "Completes Kinetics quality offluidity.",
            "Complements hover. Should appear to complete the motion started by hover.",
            "To enable on touchscreens, create an empty event handler forontouchstart. (Learn more aboutMotion & Mobile Devices&Implementing Motion).",
            "Must be keyboard accessible, typically via spacebar or Enter. (Learn more aboutMotion & Accessinility)"
          ]
        },
        {
          "type": "p",
          "text": "Patterns"
        },
        {
          "type": "list",
          "items": [
            "Bounce (scale)",
            "Mouse-aware fill",
            "Border swirl",
            "Ripple"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Target selected among other like targets. Usually denoted byslds-is-activeclass (not to be confused with:activepseudo-selector). Points:"
        },
        {
          "type": "list",
          "items": [
            "Take spatial cues from the visual design. Understand the âmicro spatial modelsâ implied by bars and fills. Are these meant to be foreground or background elements? Animate accordingly."
          ]
        },
        {
          "type": "p",
          "text": "Patterns"
        },
        {
          "type": "list",
          "items": ["Background scale", "Border swirl"]
        },
        {
          "type": "p",
          "text": "Examples:"
        },
        {
          "type": "list",
          "items": ["Vertical Navigation", "Radio Button Group"]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/choreography/kinetics-and-interaction",
      "title": "Kinetics & Interaction - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "How Interaction Influences Kinetics",
            "Reactive vs proactive motion",
            "Instant vs Continuous Motion",
            "Rapid Succession",
            "Speeding Up with Implied Direction"
          ]
        },
        {
          "type": "p",
          "text": "Interactive motion design is deeply rooted in traditional motion graphics for TV and movies. But whenmotion that's functional, structual, and expressiveis used purposefully within digital products, other considerations for motion design are introduced. Reactive motion is triggered by user interaction. Proactive motion is triggered by system events. While both kinds of motion will have aKinetics Personality, they need to be handled a little differently to create the most effective interaction. Reactive motion tips:"
        },
        {
          "type": "list",
          "items": [
            "Use ease-out acceleration. This makes the interaction feel faster. The click or tap that triggers the motion is forceful enough to act as the ease-in. Explicitly showing the ease-in could make the transition seem slower.",
            "Donât emphasize the movement: avoid ease-over, ease-under. Keep it sensible, unsurprising. Intuitively follow the interaction."
          ]
        },
        {
          "type": "p",
          "text": "Proactive motion tips:"
        },
        {
          "type": "list",
          "items": [
            "Donât overwhelm by using too many of these. Save them for opportune times when you wonât disrupt flow. Try not to show in the middle of a task, and avoid showing too many at a time.",
            "Mind the lifespan of elements that will automatically disappear. There should be enough time to read and understand messages.",
            "Consider emphasis. Since this is system-triggered motion, users are less likely to see it right away. Consider using ease-in-out acceleration to make it more noticeable."
          ]
        },
        {
          "type": "p",
          "text": "Proactive motion as seen in Toasts Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Proactive motion in Notification alert on the global navigation Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Most of the motion we think of is triggered instantly: the user or system does something, and an animation follows. Continuous motion happens in response to a continuous user or system input: the scrolling of a page, the dragging of a finger, the tilt of a device, a stream of data, etc."
        },
        {
          "type": "list",
          "items": ["Instant motion: easing is built into the transition."]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Continuous motion: easing comes from the interaction, like panning, scrolling, dragging, etc. Use linear interpolation (ease-none) for pan-controlled motion assets like Lottie."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Snap states while swiping: youâll need an instant motion when the user releases the pointer. Set duration based on the remaining distance."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. SeeMotion & Mobile Devicesfor more on continuous interactions. Some animations will play in rapid succession when itâs trigger is easy to set off repeatedly. This is especially common with keyboard-based interactions. Test for these scenarios to make sure the effect is not only desirable, but unlikely to harm users with vestibular issues. (Learn more aboutAccessible Kinetics Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A key way that motion serves interaction is to make long tasks appear to go faster. You control this directly through speed and acceleration. But you can also useimplied directionâ pairing the beginning or end of a movement with a fade â to shorten a transition time. Examples: Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/choreography/making-things-move",
      "title": "Making Things Move - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "The Controls That Set Things in Motion",
            "Light",
            "Direction",
            "Speed",
            "Acceleration"
          ]
        },
        {
          "type": "p",
          "text": "Kinetics controls 4 things to make UI move: light, direction, speed, and acceleration. These controls need to be maintained within the requirements ofKinetics Personality,Design Transitions, andDesigning Component Motion, in order to reflect Salesforceâs Kinetics identity throughout the UI interactions. Element lighting is typically animated through opacity, color, and drop shadow. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Model:page light source",
            "CSS:opacity, color, box-shadow, filter: dropshadow()",
            "Tokens:N/A",
            "Accessibility:No blinking effects. This can be harmful to some users.Learn more aboutMotion & Accessibility.",
            "No blinking effects. This can be harmful to some users.",
            "Learn more aboutMotion & Accessibility.",
            "Dev Tip:Use color and drop shadow changes sparingly; decreases performanceDonât use acceleration (easing) for this motion.",
            "Use color and drop shadow changes sparingly; decreases performance",
            "Donât use acceleration (easing) for this motion."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Elements typically move along the X, Y, or Z axis. Elements can also rotate around an axis, or follow a specific path. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Model:spatial model",
            "CSS:transform:translate(), transform:rotate(), transform:scale(), offset",
            "Tokens:N/A",
            "Accessibility:Avoid repeated pulsing motions. These are harmful to some users.Be careful with movements that traverse the entire screen or large perceived distances. They can be harmful to some users.Be sure that the motion direction and interaction direction sync in a way that is intuitive to the viewer. Scrolljacking, parallax, and similar effects are harmful to some users.Learn more aboutMotion & Accessibility.",
            "Avoid repeated pulsing motions. These are harmful to some users.",
            "Be careful with movements that traverse the entire screen or large perceived distances. They can be harmful to some users.",
            "Be sure that the motion direction and interaction direction sync in a way that is intuitive to the viewer. Scrolljacking, parallax, and similar effects are harmful to some users.",
            "Learn more aboutMotion & Accessibility.",
            "Dev tip:use color and drop shadow changes sparingly as they can decrease performance."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Speed is the distance an element covers over a certain amount of time. You control speed by setting the duration of the motion. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Model:size of element relative to viewport.Smaller elements move faster. Speed Styling Hook ofkx-duration-xshort,kx-duration-shortMedium elements move at a moderate or ânormalâ speed. Speed Styling Hook ofkx-duration-normalLarger elements move slower. Speed Styling Hook ofkx-duration-xlong,kx-duration-long*",
            "Smaller elements move faster. Speed Styling Hook ofkx-duration-xshort,kx-duration-short",
            "Medium elements move at a moderate or ânormalâ speed. Speed Styling Hook ofkx-duration-normal",
            "Larger elements move slower. Speed Styling Hook ofkx-duration-xlong,kx-duration-long*",
            "CSS:transition, animation. Seeimplementation guidelines.",
            "Tokens:N/A",
            "Accessibility:Be sure that the motion speed and interaction speed are intuitively matched. Scrolljacking, parallax, and similar effects are harmful to some users.Learn more aboutMotion & Accessibility.",
            "Be sure that the motion speed and interaction speed are intuitively matched. Scrolljacking, parallax, and similar effects are harmful to some users.",
            "Learn more aboutMotion & Accessibility.",
            "Duration Styling HooksNote: Use these values as a reference to build your animations. These values will be available as styling hooks in the future.",
            "Note: Use these values as a reference to build your animations. These values will be available as styling hooks in the future."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A cursor hovers over a small icon of a thumbs up and clicks it.Small sized elements: IconsSpeed Token : kx-duration-short Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A cursor selects different items on a vertical navigation.Medium sized elements: Vertical navigationSpeed Token : kx-duration-normal Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A panel animates in from the right, then expands to become larger before returning to its previous size.Large sized elements: PanelsSpeed Token : kx-duration-long For movement to look natural, elements should gradually come up to speed, then gradually come to rest. This is called âeasingâ in most motion design tools. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Choosing the right kind of easing is about relating the element to a natural object or phenomenon. Moving objects noticeably accelerate, then decelerate. However, changes in color or opacity (similar to a sunrise/sunset or dimmer switch) wonât have a perceptible acceleration, so it usually looks better not to ease them. And if youâre actually trying to make the motion more machine-like, acceleration/deceleration will be irrelevant"
        },
        {
          "type": "list",
          "items": [
            "Model:combination of trigger, transition type, element size, emphasis.",
            "Trigger:ease-out if user-triggered, ease-in-out if system-triggered"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Transition type:ease-out if moving into view, ease-in if moving out of view, ease-none if fading in or out"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Metaphor:position & rotation changes ease-in and ease-out, color & opacity changes ease-none, and computers & robotic things ease-none."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Emphasis:exaggerate anticipation with ease-under, exaggerate end with ease-over"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "CSS:cubic-bezier() in transition, animation.",
            "Accessibility:Be sure that the motion acceleration and interaction acceleration are intuitively matched. Scroll jacking, parallax, and similar effects are harmful to some users.Learn more aboutMotion & Accessibility.",
            "Be sure that the motion acceleration and interaction acceleration are intuitively matched. Scroll jacking, parallax, and similar effects are harmful to some users.",
            "Learn more aboutMotion & Accessibility.",
            "Acceleration Styling HooksNote: Use these values as a reference to build your animations. These values will be available as styling hooks in the future.",
            "Note: Use these values as a reference to build your animations. These values will be available as styling hooks in the future."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/implementing-kinetics",
      "title": "Implementing Kinetics - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "CSS",
            "JavaScriptOther implementation methods",
            "Other implementation methods",
            "Kinetics Styling Hook ValuesDurationAccelerationPattern Styling",
            "Duration",
            "Acceleration",
            "Pattern Styling"
          ]
        },
        {
          "type": "p",
          "text": "A lot of motion can be done using CSS alone. Most motion involves the changing of CSS property values, and thereâs an API in CSS to facilitate motion, so itâs advisable to think with a âCSS-firstâ approach to web animations."
        },
        {
          "type": "list",
          "items": [
            "Pseudo-classes, like `:hover, :focus, :active` enable the possibility of motion in an element in interactive states.",
            "Youâll just need JavaScript to add and remove the classes that trigger the motion.",
            "Declarative, state-based CSS code is generally easier to read than equivalent imperative approaches in JavaScript.",
            "Two CSS approaches: transitions, animations (keyframes):Transitions: best for symmetrical state changes, where the entrance and exit transition mirror each other. Probably the approach youâll use most. Suitable for UI component state-to-state animation (e.g. sliding, fading). Motion is defined with thetransitionproperty.",
            "Transitions: best for symmetrical state changes, where the entrance and exit transition mirror each other. Probably the approach youâll use most. Suitable for UI component state-to-state animation (e.g. sliding, fading). Motion is defined with thetransitionproperty."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "Animations: best for asymmetrical state changes, where the entrance and exit transitions donât mirror each other. Usually for more expressive, choreographed, autonomous, multi-property motion (e.g. _click ripple_, spinner). Motion is defined by the@keyframesdirective and timed with theanimationproperty."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "CSS motion can also be more performant than JavaScript motion:JavaScript libraries increase load time.JavaScript always makes use of the main execution thread, which can drag down other more important tasks. CSS doesnât necessarily have to use this thread.",
            "JavaScript libraries increase load time.",
            "JavaScript always makes use of the main execution thread, which can drag down other more important tasks. CSS doesnât necessarily have to use this thread.",
            "Focus states:Be on the lookout for :focus-visible pseudo-class. Not yet widely supported, but slated to be the preferred :focus state. Itâs supposed to only be triggered by keyboard, not mouse. Could help us get the best of both worlds: clean animation without focus ring; clear focus state for keyboard users.",
            "Be on the lookout for :focus-visible pseudo-class. Not yet widely supported, but slated to be the preferred :focus state. Itâs supposed to only be triggered by keyboard, not mouse. Could help us get the best of both worlds: clean animation without focus ring; clear focus state for keyboard users.",
            "Performance:As much as possible, stick to opacity and transform changes only. These are processed in the compositor thread instead of the main thread, helping maintain performance and smoother motion.When providing supplemental animation use SVGs or movie files in order to pause, play or entirely remove  offscreen animation to improve performance of the pageMinimize motion involving changes to width, height, color, borders, left, right. These are processed in the main thread and reduce performance.When animating size and position of an element, usetransform()rather than editing the property value itself.Pseudo-classes allow us to trigger transitions by hooking into some user interaction events, like:hover,:focus, and:active.In case of performance issues, thewill-changeCSS property can be used.  It is a way to tell the browser which properties are likely to be changed. If using thewill-changeproperty, use it as a âlast resort.â Misuse can actually incur a performance hit. It is also recommended to remove the property after the animation has happened. [More Info]",
            "As much as possible, stick to opacity and transform changes only. These are processed in the compositor thread instead of the main thread, helping maintain performance and smoother motion.",
            "When providing supplemental animation use SVGs or movie files in order to pause, play or entirely remove  offscreen animation to improve performance of the page",
            "Minimize motion involving changes to width, height, color, borders, left, right. These are processed in the main thread and reduce performance.",
            "When animating size and position of an element, usetransform()rather than editing the property value itself.",
            "Pseudo-classes allow us to trigger transitions by hooking into some user interaction events, like:hover,:focus, and:active.",
            "In case of performance issues, thewill-changeCSS property can be used.  It is a way to tell the browser which properties are likely to be changed. If using thewill-changeproperty, use it as a âlast resort.â Misuse can actually incur a performance hit. It is also recommended to remove the property after the animation has happened. [More Info]"
          ]
        },
        {
          "type": "list",
          "items": [
            "JavaScript is necessary for when you need to programmatically control motion playback or listen for motion events.",
            "Define your motion in CSS class, or attribute, selectors, and use JavaScript to add and remove those classes or attributes. With Custom Web Components, theattributeChangedCallbackcan be used with handlers for AnimationEnd or TransitionEnd events to start, stop and sequence events.",
            "Variables can be communicated back and forth with CSS via CSS custom properties (Styling Hooks).",
            "Avoid using JavaScript for directly animating element properties.",
            "Consider using promised-based delays to sequence animations."
          ]
        },
        {
          "type": "code",
          "code": "constdelay=duration=>newPromise(resolve=>{setTimeout(()=>{resolve();},duration);});conststep1=async(duration)=>{element.classList.add(\"step-1\");awaitdelay(duration);};conststep2=async(duration)=>{element.classList.add(\"step-2\");awaitdelay(duration);};consttransition=async()=>{awaitstep1(300);awaitstep2(250);};transition();"
        },
        {
          "type": "list",
          "items": ["emphasized effects like bouncing."]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. There are intuitive APIs and libraries that harness power of JS with less effort. Browser compatibility is usually built-in, but library adoption biases SLDS. It is recommended to integrate the code you with which you animate with the rest of your component code.  Here are some technologies for implementing motion into your web experience. Although they may be limited and/or more rigid in their ability to integrate in a component, they may offer quicker means to a visual result if animation is at the focus of your experience. Note: Use these values as a reference to build your animations. These values will be available as styling hooks in the future."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/know-more",
      "title": "Know More - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Trailhead",
            "Blogposts",
            "Developer Resources",
            "Design Resources"
          ]
        },
        {
          "type": "list",
          "items": [
            "Salesforce Kinetics System Module",
            "Motion Pattern Creation"
          ]
        },
        {
          "type": "list",
          "items": [
            "What You Need to Know About the New Salesforce Kinetics System",
            "Scaling of Kinetic Systems from design system to the Global Navigation of our digital products"
          ]
        },
        {
          "type": "list",
          "items": [
            "https://kinetics-prototype.lightningdesignsystem.com/?path=/story/kinetics-activity-timeline--base",
            "A Comparison of Animation Technologies",
            "Leveraging JavaScript to implement CSS transitions that use display: none",
            "CSS Animation Tricks: State Jumping, Negative Delays, Animating Origin, and More",
            "Why Play and Pause CSS Animations with CSS Custom Properties",
            "Web Animation API",
            "GreenSock",
            "Lottie"
          ]
        },
        {
          "type": "list",
          "items": [
            "The Role of Animation and Motion in UX",
            "Design of Signifiers",
            "Motion Animation WCAG",
            "Essential Motion WCAG",
            "WCAG 2.3.2",
            "Understanding WCAG Pause, Stop, Hide",
            "12 Principles of Animation",
            "Your Loading Spinner Is a UX Killer! | Boldist",
            "Everything you need to know about Loading Animations | by Lisa Dziuba..."
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/micro-patterns",
      "title": "Micro Patterns - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Border Swirl",
            "Spotlight",
            "Ripple",
            "Mouse-Aware Underline"
          ]
        },
        {
          "type": "p",
          "text": "We have identified unique motion patterns that were designed from the core Kinetics Principles and the Kinetics Personality A border swirl draws the border line around a component to provide a decorative feedback for a click event. The origin of the border swirl starts from the bottom left of a component. The border swirl can also be informed by the cursor position as an aesthetic choice. Best Practices"
        },
        {
          "type": "list",
          "items": [
            "Do:Use it for components with a visible container.",
            "Use caution with:Larger components where a border swirl effect may increase latency, and be mindful of transition times in components that enlarge, like input fields."
          ]
        },
        {
          "type": "p",
          "text": "Examples of components that use this pattern:"
        },
        {
          "type": "list",
          "items": ["Checkbox", "Radio buttons", "Menu button"]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A spotlight brings the components within an interaction into quick focus by scaling in the background fill of the component. It is used to provide quick and dramatic feedback for an interaction and hence utilized for elements of smaller real estate Best Practices"
        },
        {
          "type": "list",
          "items": [
            "Do:Use for components without a visible container and with 1:1 aspect ratios",
            "Use caution withHow close you place to other elements to ensure the spotlight doesn't impede their space."
          ]
        },
        {
          "type": "p",
          "text": "Examples of components that use this pattern:"
        },
        {
          "type": "list",
          "items": ["Button icons", "Menu items", "Tabs"]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A ripple is a Kinetics feedback that a user sees when they interact with a component. It provides instant response and reinforcement to the user action. Best Practices"
        },
        {
          "type": "list",
          "items": [
            "Do:Use when you want to provide instant feedback for a click action within smaller components. For example, use ripple animation to emphasize success feedback behind smaller components like icons, badges, or buttons.",
            "Use caution with:Ripples behind larger components may negatively impact the perceived latency"
          ]
        },
        {
          "type": "p",
          "text": "Examples of components that use this pattern:"
        },
        {
          "type": "list",
          "items": [
            "Buttons",
            "Button Icons",
            "Menu",
            "Tabs",
            "Vertical Navigation",
            "Progress Indicator"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. A Mouse-Aware underline pattern implies the direction of origin of a component. While moving from component to component it can be used as a signifier for position and hierarchy. Best Practices"
        },
        {
          "type": "list",
          "items": [
            "Do:Best used for interactive components that contain text",
            "Avoid:text that's not clickable or longer text phrases"
          ]
        },
        {
          "type": "p",
          "text": "Examples of components that use this pattern:"
        },
        {
          "type": "list",
          "items": ["Tabs", "Breadcrumbs", "Progress Indicator"]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/mobile-devices",
      "title": "Kinetics & Mobile Devices  - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "How Touchscreens and Small Viewports Affect Kinetics",
            "Small Viewports",
            "Touchscreens",
            "Sensors",
            "Integrating with Native Systems"
          ]
        },
        {
          "type": "p",
          "text": "Mobile devices have unique properties that affect the way we think about motion. Note that these properties arenât unique to mobile phones, and are worth considering in similarly equipped laptop and desktop computers. A small viewport can be a small device screen, or a small browser window on a desktop. Smaller viewports sometimes change the visual design of a component. For example, the Lightning progress indicator enlarges its dots for easier touchability in a compact space. For minor visual adjustments like these, the component can use the same transitions as its larger-viewport counterpart. But if the component looks entirely different, it needs its owncomponent motion design. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. As viewports get smaller, components become larger in relative size, covering more of the screen. Transitions that cover an entire screen can be harmful to some users. Make sure to use the operating systemâsreduced motion preference Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. These considerations apply to any device with a touchscreen: mobile phones, tablets, touch-enabled laptops, watches, etc."
        },
        {
          "type": "list",
          "items": [
            "Beware of small transitions that occur below touch targets. The userâs hand might cover the transition.",
            "Forcomponent active stagesto work on touchscreens, web developers will need to set an emptyontouchstartevent handler. (Learn more aboutImplementing Kenetics)",
            "Touchscreens afford motion thatâs controlled bothinstantlyandcontinuously: triggered by a discrete gesture like a button tap, or a continuous gesture like a swipe or pan. Continuous gestures should track 1:1 with the motion. When the gesture is complete â for example, the user lifts their finger â a Kinetics motion should complete the transition. The speed and acceleration of this finishing motion should complement the remaining travel distance of the element thatâs in motion. (Learn more aboutImplementing Kenetics)"
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Most touchscreen devices donât support hover states.Feedback hoversare okay to ignore on touchscreens, butreveal hoversneed to be touchscreen-accessible. To present supplemental information in mobile, consider using a tap or long press, or present the information automatically depending on the context of use. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. To ensure accessibility and ease of discoverability of essential information, avoid hiding important information behind long presses. Instead, use long presses to support power user interactions like quick access of an opportunity. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Accelerometers and gyroscopes offer unique opportunities for immersive motion. For select moments, consider how the shake or tilt of a device could drive motion effects like parallax. However, uses this carefully. Studies have repeatedly revealed that long scrolling parallax donât add much of a visual or functional value to its users. Parallax and similar immersive effects can also be harmful to users with vestibular disorders. In general, dependance on the use of parallax effects for visual storytelling is not recommended. Turn these effects off if the operating systemâs reduced motion preference is enabled. (Learn moreKinetics & Accessibility.) These considerations apply to any operating system integration: mobile, desktop, watch, etc."
        },
        {
          "type": "list",
          "items": [
            "Current Lightning mobile apps take a hybrid approach, blending the native operating systemâs navigation model with Lightning components and Kinetics. There are distinctspatial modelsfor each operating system.",
            "In general, when developing a native app, a principal consideration is the spatial model. If youâre using the operating systemâs built-in perspectives on things like modals and navigation, youâll usually want to observe the systemâs model for staging and direction. For example, iOS modals hide below the viewport while off-screen, so they should animate upward into view."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        },
        {
          "type": "list",
          "items": [
            "If the system allows it, you maycustomize native componentsto have Kinetics qualities â especially if youâve customized the visual design to look like a Lightning component. For example, you might consider using Kinetics activation patterns like ripples or border swirls in components like buttons."
          ]
        },
        {
          "type": "p",
          "text": "Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. For native components that you use as-is â for example, date pickers and other virtual keyboards â you donât need to apply Kinetics. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/overview",
      "title": "Kinetics System Guidelines - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "What is Kinetics",
            "What is in this guidelineKinetics PrinciplesKinetics PersonalityChoreographyKinetics PatternsAccessible KineticsKinetics & Moble DevicesImplementing KineticsKnow More Content",
            "Kinetics Principles",
            "Kinetics Personality",
            "Choreography",
            "Kinetics Patterns",
            "Accessible Kinetics",
            "Kinetics & Moble Devices",
            "Implementing Kinetics",
            "Know More Content",
            "What is not in this guideline",
            "Frequently Asked Questions"
          ]
        },
        {
          "type": "p",
          "text": "Kinetics is the design language of a motion system for Salesforce, called the Kinetics System, that provides guidelines, patterns, best practices, and tools for designers and developers. With Kinetics we create a strong and consistent visual identity that is modern, sophisticated, FUNctional, and delightful. This guideline is meant to provide you with first hand information on what kinetics is for Salesforce, and help you learn how you might utilize motion as a beneficial part of your interface design Note: We are currently in the process of integrating Kinetics into the component blueprints. This guideline shows you how todesign transitionsthat use these components, and add Kinetics to your owncustom components. We have documented ourpattern prototypesfor Lightning Design System components that you can refer to when you create custom Kinetics for your UI flows"
        },
        {
          "type": "list",
          "items": [
            "This guideline informs the motion language and rules for Salesforce Lightning Design Systems and beyond",
            "This is meant to help you design transitions for custom components that may not have baked-in kinetics",
            "This will help you design Kinetics interactions for net new experiences within the ecosystem that might consist of a combination of base components as well as custom components",
            "This guideline is a start! To learn more about the process of motion designing using Kinetics Systems, take our learning modules onTrailheadand follow theKinetics in Motion serieson theSalesforce Design Medium pageto quickly find new posts on Kinetics!Kinetics ModulesOurSalesforce Kinetics System Moduleis now available on Trailhead. Learn basics about choreographing motion UI.OurMotion Pattern Creation Moduleprovides a detailed look into how teams might create custom motion UI for their products.Learn more about Kinetics on our blogpostsWhat You Need to Know About the New Salesforce Kinetics SystemScaling of Kinetic Systems from design system to the Global Navigation of our digital productsTheKnow More sectionprovides links to articles and other resources.",
            "Kinetics ModulesOurSalesforce Kinetics System Moduleis now available on Trailhead. Learn basics about choreographing motion UI.OurMotion Pattern Creation Moduleprovides a detailed look into how teams might create custom motion UI for their products.",
            "OurSalesforce Kinetics System Moduleis now available on Trailhead. Learn basics about choreographing motion UI.",
            "OurMotion Pattern Creation Moduleprovides a detailed look into how teams might create custom motion UI for their products.",
            "Learn more about Kinetics on our blogpostsWhat You Need to Know About the New Salesforce Kinetics SystemScaling of Kinetic Systems from design system to the Global Navigation of our digital products",
            "What You Need to Know About the New Salesforce Kinetics System",
            "Scaling of Kinetic Systems from design system to the Global Navigation of our digital products",
            "TheKnow More sectionprovides links to articles and other resources."
          ]
        },
        {
          "type": "p",
          "text": "The following gives an overview of all the topics covered in this guideline. This is an abstract, so to gain a deeper understanding of the information and to view visual examples please click on each of the topic or the sections on the left hand navigation to go to the individual pages"
        },
        {
          "type": "list",
          "items": [
            "The fundamental role of motion in Salesforce products is defined by the Three guiding principles of MotionMotion is functional- integral in providing clarity, preventing change blindness, perceived speed and promoting discoverability.Learn MoreMotion is Structural- Motion helps users know where they are, orienting them with a consistent spatial model, and creating Kinetics continuity across pages and components.Learn MoreMotion is Expressive- Motion delights users with unexpected details that turn mundane moments into something special and memorable. These details remind users that experiences are crafted by people, not machines.Learn More",
            "Motion is functional- integral in providing clarity, preventing change blindness, perceived speed and promoting discoverability.Learn More",
            "Motion is Structural- Motion helps users know where they are, orienting them with a consistent spatial model, and creating Kinetics continuity across pages and components.Learn More",
            "Motion is Expressive- Motion delights users with unexpected details that turn mundane moments into something special and memorable. These details remind users that experiences are crafted by people, not machines.Learn More"
          ]
        },
        {
          "type": "p",
          "text": "Motion can be expressed in a lot of ways. But to design motion that fits Salesforce, it should have these four qualities of Kinetics -Nimble, Sensible, Considerate and Charismatic.Learn More The following set of topics are meant to provide you with deeper knowledge on how you might choreograph nuanced interactions that are well connected to promote discoverability, clarity of feedback, perceived speed and guidance across user flows"
        },
        {
          "type": "list",
          "items": [
            "Making things move - Kinetics controls 4 things to make UI move:light,direction,speed, andacceleration.",
            "Designing transitions- A transition occurs anytime thereâs a change to the state of the view. Transitions can be as simple as a single component entering the view, or as complex as a complete view change. Wherever there are two consecutive artboards in your design, thereâs a transition. This is explained in depth in the following sections.SpaceHierarchyEmphasisLatencyFatigue",
            "Space",
            "Hierarchy",
            "Emphasis",
            "Latency",
            "Fatigue",
            "Designing component motion- Adding motion to a component is like designing a small-scale transition. But there are some specific states to consider when you design your motion. A component can have one or moretargetsthat respond or move to hover, click, focus and selected states. Learn more in the following sections.HoverFocusActiveSelected",
            "Hover",
            "Focus",
            "Active",
            "Selected",
            "Kinetics and Interaction: Different types of interactions influence how motion can be used. So it is important to create the motion based on the context in which the interaction takes place for the it to have beneficial outcomes. Learn more in the following sections.Reactive vs proactive motionInstant vs Continuous MotionRapid successionSpeeding Up with Implied Direction",
            "Reactive vs proactive motion",
            "Instant vs Continuous Motion",
            "Rapid succession",
            "Speeding Up with Implied Direction"
          ]
        },
        {
          "type": "p",
          "text": "We have identified motion patterns that are unique to the Salesforce motion personality. These patterns can be scaled and applied across custom component experiences to signify different interaction feedback with a distinct Salesforce charm. Learn about these scalable patterns here"
        },
        {
          "type": "list",
          "items": [
            "Border Swirl",
            "Spotlight",
            "Ripple",
            "Mouse-Aware Underline"
          ]
        },
        {
          "type": "p",
          "text": "Lightning Kinetics #1 principle is functional animation. When this is your primary driver for adding animation to your UI, we can create accessible experiences that drive clarity, productivity, and delight. Kinetics can improve the experience for users with cognitive disabilities. It can help orient users within a UI, guide them to call to actions, and create relationships/hierarchy between elements on a page. However, animation is a double edged sword and if designed improperly it can cause headaches, nausea, dizziness, or vertigo for users with vestibular disorders. Included in this sectionâsDo's and Don'tsare two requirements from WCAG (global accessibility guidelines from W3C) on how to prevent these reactions.Learn More Mobile devices have unique properties that affect the way we think about motion. Note that these properties arenât unique to mobile phones, and are worth considering in similarly equipped laptop and desktop computers. Learn more in the following sections."
        },
        {
          "type": "list",
          "items": [
            "Small Viewports",
            "Touchscreens",
            "Sensors",
            "Integrating with Native Systems"
          ]
        },
        {
          "type": "list",
          "items": [
            "CSSA lot of motion can be done using CSS alone. Most motion involves the changing of CSS property values, and thereâs an API in CSS to facilitate motion, so itâs advisable to think with a âCSS-firstâ approach to web animations.Learn More",
            "A lot of motion can be done using CSS alone. Most motion involves the changing of CSS property values, and thereâs an API in CSS to facilitate motion, so itâs advisable to think with a âCSS-firstâ approach to web animations.Learn More",
            "JavaScriptWhile CSS classes are primarily recommended to define animations, JavaScript can be used to add and remove classes.Learn More here about GreenSock, Lottie and Web Animations API",
            "While CSS classes are primarily recommended to define animations, JavaScript can be used to add and remove classes.Learn More here about GreenSock, Lottie and Web Animations API",
            "JSON(Lottie)Paired with Bodymovin plugin, allows certain kinds of After Effects animation to be converted to playable motion assets in web, iOS, and Android apps.Learn More",
            "Paired with Bodymovin plugin, allows certain kinds of After Effects animation to be converted to playable motion assets in web, iOS, and Android apps.Learn More",
            "Kinetics Styling HooksKinetics duration, acceleration and pattern values you can use to build custom animations. Note: these values are reference only. They will be available as styling hooks soon.Learn More",
            "Kinetics duration, acceleration and pattern values you can use to build custom animations. Note: these values are reference only. They will be available as styling hooks soon.Learn More"
          ]
        },
        {
          "type": "p",
          "text": "A glossary of additional resources on designing and implementing motion UI in products."
        },
        {
          "type": "list",
          "items": [
            "This guideline will not tell you how to create character animations",
            "This guideline does not provide component level Kinetics documentation. Each component level kinetics will be documented within the Component Blueprint once Kinetics is released in the components",
            "The examples listed in this guideline are specific to Lightning platform and product clouds. For more information regarding Kinetics in other systems, see the specific subsystemâs documentation."
          ]
        },
        {
          "type": "list",
          "items": [
            "What is motion for Salesforce?",
            "This guideline provides a foundation set of rules to help ground expectation and consistency of motion language to Salesforce branding while answering questions like",
            "Why is motion the answer?",
            "When is motion the answer?",
            "Do I create all my animation from scratch?",
            "No our intention is not for you to create motion from scratch or even create motion at all.  We have Kinetics Styling Hooks that will help you build animations when necessary. Most of the motion that is needed will come baked into the primitive components in the near future.",
            "Note: SeeImplementing Kineticsto learn about how to use our patterns and styling hooks.",
            "How do I create motion for the flows in my product?",
            "If there is a strong need for custom motion in your UX flow, then theChoreographysection of the guidelines will provide knowledge on how to conceptualize the custom motion congruous with the Kinetics language and the use of Kinetics Styling Hooks.",
            "In near future, the primitive components and some complex components will come with baked in animation. Kinetics Styling Hooks will also be available in a ready to use format to support the implementation process.",
            "I have a set of delightful animation that I want to use in the product. How do I add those?",
            "See theKinetics Principles,Kinetics Personality, theChoreographyandAccessibilitysections to understand how motion is defined within Salesforce.It can be tricky to identify what might be construed as delightful animation in UI. Be mindful of the Kinetics guidelines while creating motion within product UI.",
            "Do we have rules around animations for our mobile experiences?",
            "SeeMobile sectionon how scaling animations across mobile devices and experiences work",
            "Are there harmful animations? How do I know what the accessibility standards for animations are?",
            "See theaccessibility sectionfor a deep dive. We havedos and donâtsthat will provide information on how you might create a thoughtful motion interaction for users across all abilities",
            "How do I implement some of the custom animations that my team has come up with in collaboration with the Kinetics Systems team?",
            "Seeimplementation sectionfor rules and general guidelines",
            "I want to learn about motion more extensively",
            "Our resources section provides links to articles and other resources.",
            "Kinetics Modules",
            "OurSalesforce Kinetics System Moduleis now available on Trailhead. Learn basics about choreographing motion UI.",
            "OurMotion Pattern Creationmodule provides a detailed look into how teams might create custom motion UI for their products.",
            "Learn more about Kinetics on our blogposts",
            "What You Need to Know About the New Salesforce Kinetics System",
            "Scaling of Kinetic Systems from design system to the Global Navigation of our digital products",
            "Follow theKinetics in Motion serieson theSalesforce Design Medium pageto quickly find more on Kinetics"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/pattern-prototypes/complex-components",
      "title": "Kinetics Pattern Prototypes - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Lookups", "Vertical Navigation", "Activity Timeline"]
        },
        {
          "type": "p",
          "text": "These components are structurally more complex than simple components. They may contain a combination of components or are likely to perform more dynamic functions We have documented our Kinetics Patterns within Lightning Design System components as pattern prototypes. These pattern prototypes provide an interactive reference for the design system components and the Kinetics best practices documented in theChoreographysection of the Kinetics System"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/pattern-prototypes/simple-components",
      "title": "Kinetics Pattern Prototypes - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Button Icons",
            "Buttons",
            "Breadcrumbs",
            "Checkbox Toggle",
            "Checkbox",
            "Header Icons",
            "TabsSubtabs",
            "Subtabs",
            "Spinners"
          ]
        },
        {
          "type": "p",
          "text": "Simple components are singular components that may be smaller in size or simple in the functions that they perform We have documented our Kinetics Patterns within Lightning Design System components as pattern prototypes. These pattern prototypes provide an interactive reference for the design system components and the Kinetics best practices documented in theChoreographysection of the Kinetics System"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/pattern-prototypes/transitional-components",
      "title": "Kinetics Pattern Prototypes - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Menu",
            "Modals",
            "Panels",
            "Popovers",
            "ToastInfoSuccessWarningError",
            "Info",
            "Success",
            "Warning",
            "Error",
            "Tooltips"
          ]
        },
        {
          "type": "p",
          "text": "These components consist of elements that gradually transition into view by system triggers or user action We have documented our Kinetics Patterns within Lightning Design System components as pattern prototypes. These pattern prototypes provide an interactive reference for the design system components and the Kinetics best practices documented in theChoreographysection of the Kinetics System"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/personality",
      "title": "Kinetics Personality - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Qualities of a Genuine Lightning AnimationNimbleSensibleConsiderateCharismatic",
            "Nimble",
            "Sensible",
            "Considerate",
            "Charismatic"
          ]
        },
        {
          "type": "p",
          "text": "Motion can be expressed in a lot of ways. But to design motion that fits Salesforce, it should have these qualities. Motion helps users maintain flow, drawing attention to screen changes both small and large, and increasing the perceived speed of the task. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Kinetics moves modestly and predictably, making users feel confident about their next steps. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Kinetics welcomes people of all visual abilities, pushing for efficiency to enhance the quality of the experience where needed, and humbly bowing out when users would prefer to skip motion altogether. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Kinetics knows when to turn up the charmârelishing in the fun moments, and turning the mundane into something memorable. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/kinetics/principles",
      "title": "Kinetics Principles - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Why Motion is Important",
            "Motion is Functional",
            "Motion is Structural",
            "Motion is ExpressiveEmphasis That Creates Visual AppealEmphasis That Creates Urgency",
            "Emphasis That Creates Visual Appeal",
            "Emphasis That Creates Urgency"
          ]
        },
        {
          "type": "p",
          "text": "Motion when utilized properly can make products more usable and differentiated. The following principles intend to provide the fundamental role of motion in Salesforce products Motion helps users maintain flow, drawing attention to screen changes both small and large, and increasing the perceived speed of the task. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Motion helps users know where they are, orienting them with a consistent spatial model, and creating Kinetics continuity across pages and components. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Motion delights users with unexpected details that turn mundane moments into something special and memorable. These details remind users that experiences are crafted by people, not machines. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead. Sorry, your browser doesn't support HTML5 video. Here is alink to the videoinstead."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/new-design",
      "title": "Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Developers and designers work more efficiently with CSS-based updates and companion tools. Now, itâs easy to find and follow what matters most to you. Visual styling updates bring key actions to a userâs attention. This includes a simplified appearance, smart color highlights, and improved font size. Keep code up to date with the SLDS Validator tool that checks your markup and suggests improvements. Adhere to Web Content Accessibility Guidelines (WCAG 2.1 AA) with adaptable spacing that improves legibility at varying scales. Starting in Summer â24, the new design is available in:"
        },
        {
          "type": "list",
          "items": [
            "New and existing Starter and Pro Suite orgs",
            "New Sales PE and EE orgs"
          ]
        },
        {
          "type": "p",
          "text": "Opt in to the new design when it becomes available in your product and edition.  Keep using SLDS base components, blueprints, and styling hooks to seamlessly receive design system updates. Uplift your user experience with the new design. Grab prebuilt UI components with styling hooks that reflect our refreshed colors and spacing, and map 1:1 to variables used in live code. Check your markup and make quick updates with suggested improvements."
        },
        {
          "type": "list",
          "items": [
            "How can I tell if my org has the new design?Check if the Setup User Interface toggleTurn on an enhanced Lightning user interfaceis enabled.",
            "When can I explore the new design in my org?Beginning in Summer â24, the new design began rolling out to various editions. For current availability, check theEnhanced Lightning User Interface docin Salesforce Help.",
            "As a partner or customer, can I access âa test environment with the new design to test my UI?It isn't currently available in scratch or Developer orgs. It's available in sandbox orgs only if your production environment has the new design available. For current availability, checkEnhanced Lightning User Interfacein Salesforce Help.",
            "How can I ensure my custom UI will work with the new design and future SLDS updates?Following SLDS best practices is the best way to future-proof your code. For details on supported techniques for component customizations, visit theDevelopment Best Practices, theConfirm Your Components Use Supported Design System Customizationsin Salesforce Help, andSLDS Validatordocumentation.",
            "Where can I share feedback on my experience using the new design?We love customer feedback. Send it our way in theDesign Trailblazers Group on Trailhead(login required)."
          ]
        },
        {
          "type": "p",
          "text": "Be the first to get the latest release announcements, design blogs, and perspectives from UX designers."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/android",
      "title": "Android - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Sample App", "Usage"]
        },
        {
          "type": "p",
          "text": "Use our Android integration to style your native Android applications to be consistent with theSalesforce Lightning Design System. TheSalesforce Lightning Design System Android Static Libraryincludes:"
        },
        {
          "type": "list",
          "items": [
            "Compiled Design Tokens",
            "The Salesforce Lightning Design System Icons"
          ]
        },
        {
          "type": "p",
          "text": "The library is offered as a Bintray repository that can be pulled into any project easily via the Gradle build. See the Bintrayhere. Add the following tobuild.gradle (Module)in the Gradle Scripts:"
        },
        {
          "type": "code",
          "code": "repositories{jcenter()}"
        },
        {
          "type": "p",
          "text": "Under depenecies in the same script add:"
        },
        {
          "type": "code",
          "code": "compile'com.salesforce.ux:SalesforceDesignSystem:3.0.0'"
        },
        {
          "type": "p",
          "text": "Replace 3.0.0 with the latest design-system-android build version. Sync the Gradle Scripts, and perform a Gradle build. The Design System is now ready for use in your project. Add the following import statment to any file which requires the use of Design System icons:"
        },
        {
          "type": "code",
          "code": "importcom.salesforce.designsystem.Icons;"
        },
        {
          "type": "p",
          "text": "SeeSample Appfor sample code. Colors"
        },
        {
          "type": "code",
          "code": "android:background=\"@color/slds_color_brand_dark\""
        },
        {
          "type": "p",
          "text": "Fonts and Text Sizes"
        },
        {
          "type": "code",
          "code": "TextView textView=(TextView)findViewById(R.id.textView);Typeface custom_font=Typeface.createFromAsset(getAssets(),\"SalesforceSans-bold.ttf\");textView.setTypeface(custom_font);"
        },
        {
          "type": "p",
          "text": "Icons Action Icons"
        },
        {
          "type": "code",
          "code": "Icons.getDrawable(context,Icons.ActionIcons.ActionNewTask,resources.getDimensionPixelSize(R.dimen.slds_square_icon_medium),resources.getColor(R.color.slds_color_text_link));"
        },
        {
          "type": "p",
          "text": "Custom Icons"
        },
        {
          "type": "code",
          "code": "Icons.getDrawable(context,Icons.CustomIcons.Custom1,resources.getDimensionPixelSize(R.dimen.slds_square_icon_medium),resources.getColor(R.color.slds_color_text_link));"
        },
        {
          "type": "p",
          "text": "Standard Icons"
        },
        {
          "type": "code",
          "code": "Icons.getDrawable(context,Icons.StandardIcons.Account,resources.getDimensionPixelSize(R.dimen.slds_square_icon_medium),resources.getColor(R.color.slds_color_text_link));"
        },
        {
          "type": "p",
          "text": "Utility Icons"
        },
        {
          "type": "code",
          "code": "Icons.getDrawable(context,Icons.Utility.AddContact,resources.getDimensionPixelSize(R.dimen.slds_square_icon_medium),resources.getColor(R.color.slds_color_text_link));"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/heroku",
      "title": "Heroku - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Initialize your project",
            "Install node dependencies",
            "Create index.html",
            "Create server.js",
            "Download Salesforce Lightning Design System",
            "Add components",
            "Deploy to Heroku"
          ]
        },
        {
          "type": "p",
          "text": "The following tutorial will set you up with the tools you need to work with the Salesforce Lightning Design System in your local development environment and deploy to Heroku. If youâre interested in a more in-depth tutorial check outChristophe Coenraetsâ GitHub project. His project is a reference application built with the Salesforce Lightning Design System, React, Node, Postgres, and Heroku. For a static example, please continue with the steps below! In this tutorial, weâll assume that you have some knowledge of the following:"
        },
        {
          "type": "list",
          "items": ["Node.js", "npm", "Git", "Heroku"]
        },
        {
          "type": "p",
          "text": "Once youâve downloaded and installed all the necessaries for your environment, create a folder for your project."
        },
        {
          "type": "code",
          "code": "$mkdirdemo_slds_heroku\n$cddemo_slds_heroku"
        },
        {
          "type": "p",
          "text": "Inside of yourdemo_slds_heroku/folder, create apackage.json."
        },
        {
          "type": "code",
          "code": "$npminit"
        },
        {
          "type": "p",
          "text": "You will get a few prompts. The only prompt that we will update here is theentry point. The new entry point will beserver.jsinstead ofindex.js."
        },
        {
          "type": "code",
          "code": "name:\nversion:\ndescription:\nentry point:(index.js)[server.js]testcommand:gitrepository:\nkeywords:\nauthor:\nlicense:(ISC)"
        },
        {
          "type": "p",
          "text": "Apackage.jsondocument will be created inside yourdemo_slds_heroku/folder and the contents should look similar to the following:"
        },
        {
          "type": "code",
          "code": "{\"name\":\"demo_slds_heroku\",\"version\":\"0.0.0\",\"description\":\"demo_slds_heroku\",\"main\":\"server.js\",\"scripts\":{\"test\":\"echo \\\"Error: no test specified\\\" && exit 1\"},\"author\":\"\",\"license\":\"ISC\"}"
        },
        {
          "type": "p",
          "text": "Use npm to install Express. While in your project folder, install express via npm."
        },
        {
          "type": "code",
          "code": "$npminstallexpress --save"
        },
        {
          "type": "p",
          "text": "You should now have a folder callednode_modules/express/"
        },
        {
          "type": "code",
          "code": "$mkdirpublic\n$touchpublic/index.html"
        },
        {
          "type": "p",
          "text": "Copy the following markup intopublic/index.html:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><htmllang=\"en\"><head><metacharset=\"utf-8\"/><metahttp-equiv=\"x-ua-compatible\"content=\"ie=edge\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><title>Playground</title></head><body>Kaixo!</body></html>"
        },
        {
          "type": "code",
          "code": "$touchserver.js"
        },
        {
          "type": "p",
          "text": "Copy the following code intoserver.js. Make sure you are in the root of your project (not your/publicfolder!):"
        },
        {
          "type": "code",
          "code": "varexpress=require('express');varapp=express();varport=process.env.PORT||8080;// Serve static filesapp.use(express.static(__dirname+'/public'));// Serve your appconsole.log('Served: http://localhost:'+port);app.listen(port);"
        },
        {
          "type": "p",
          "text": "Sanity Checkpoint:Runnode server.jsin your terminal and your project will be served onhttp://localhost:8080/. You may also runnpm run startas it will yield the same results. Download the Salesforce Lightning Design System CSS framework Once you unzip the CSS framework, you need to move a few things into the correct location. Grab theassets/folder and put it in yourdemo_slds_heroku/public/folder. Your project should have a similar file structure to the following:"
        },
        {
          "type": "code",
          "code": "demo_slds_heroku/\n  public/\n    assets/\n      fonts/\n      icons/\n      images/\n      styles/\n    index.html\n  node_modules/\n    express/\n  package.json\n  server.js"
        },
        {
          "type": "p",
          "text": "Add Salesforce Lightning Design System styles to yourpublic/index.htmlpage by adding the following underneath thetitletags:"
        },
        {
          "type": "code",
          "code": "<linkrel=\"stylesheet\"type=\"text/css\"href=\"/assets/styles/salesforce-lightning-design-system.css\"/>"
        },
        {
          "type": "p",
          "text": "Yourpublic/index.htmlfile should look similar to the following:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><htmllang=\"en\"><head><metacharset=\"utf-8\"/><metahttp-equiv=\"x-ua-compatible\"content=\"ie=edge\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><title>Playground</title><linkrel=\"stylesheet\"type=\"text/css\"href=\"/assets/styles/salesforce-lightning-design-system.css\"/></head><body>Kaixo!</body></html>"
        },
        {
          "type": "p",
          "text": "Sanity Checkpoint:You will notice that when you refresh your localhost the font will change! Replace the text inside thebodytags with the following. You can find the markup on theGrid System component page."
        },
        {
          "type": "code",
          "code": "<divclassName=\"slds-grid slds-wrap\"><navclassName=\"slds-col slds-size_1-of-1\">Page Header Component</nav><mainclassName=\"slds-col slds-size_1-of-2\">Image</main><asideclassName=\"slds-col slds-size_1-of-2\">Tab Component</aside><sectionclassName=\"slds-col slds-size_1-of-1\">Card Component</section></div>"
        },
        {
          "type": "p",
          "text": "Yourpublic/index.htmlfile should look like the following:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><htmllang=\"en\"><head><metacharset=\"utf-8\"/><metahttp-equiv=\"x-ua-compatible\"content=\"ie=edge\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><title>Playground</title><linkrel=\"stylesheet\"type=\"text/css\"href=\"/assets/styles/salesforce-lightning-design-system.css\"/></head><body><divclassName=\"slds-grid slds-wrap\"><navclassName=\"slds-col slds-size_1-of-1\">Page Header Component</nav><mainclassName=\"slds-col slds-size_1-of-2\">Image</main><asideclassName=\"slds-col slds-size_1-of-2\">Tab Component</aside><navclassName=\"slds-col slds-size_1-of-1\">Card Component</nav></div></body></html>"
        },
        {
          "type": "p",
          "text": "Swap the textPage Header Componentwith the markup from the example on thePage Header component page. Swap the textImagewith an image."
        },
        {
          "type": "code",
          "code": "<imgsrc=\"https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house08.jpg\"alt=\"Cool house.\"/>"
        },
        {
          "type": "p",
          "text": "Swap the textTab Componentwith the markup from the example on theTabs component page Swap theH2tags and its contentsItem One Contentwith the markup from the example on theActivity Timeline component page. Swap the textCard Componentwith the markup from the example on theCard component page. If you feel kind of cramped, check out theUtilitiespage for padding classes. Lets create a Heroku `Procfile` file. In the root of yourdemo_slds_heroku/project make aProcfilefile."
        },
        {
          "type": "code",
          "code": "$touchProcfile"
        },
        {
          "type": "p",
          "text": "The contents of yourProcfilefile (yes, no filetype!) should be the following:"
        },
        {
          "type": "code",
          "code": "web: node server.js"
        },
        {
          "type": "p",
          "text": "Log into your Heroku account."
        },
        {
          "type": "code",
          "code": "$ heroku login\nEmail:[your@email.com]Password:[typing will be hidden]$gitinit\n$ heroku create[name-of-your-project]"
        },
        {
          "type": "p",
          "text": "You should see the following information in your console."
        },
        {
          "type": "code",
          "code": "Creating[name-of-your-project]... done, stack is cedar-14\nhttps://[name-of-your-project].herokuapp.com/|https://git.heroku.com/[name-of-your-project]git"
        },
        {
          "type": "p",
          "text": "Sanity Checkpoint:Rungit remote -vin your terminal to check that theherokuremote was added. Commit and push to Heroku."
        },
        {
          "type": "code",
          "code": "$gitadd.$gitcommit -m\"Initial commit\"$gitpush heroku master"
        },
        {
          "type": "p",
          "text": "Check out your project!"
        },
        {
          "type": "code",
          "code": "$ herokuopen"
        },
        {
          "type": "p",
          "text": "Now that you have a static project using the Salesforce Lightning Design System and Heroku you can use it with any framework, add a database to it, whatever! The world is your oyster!"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/ios",
      "title": "iOS - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Simple Install",
            "Manual Setup",
            "Sample App",
            "Swift Usage",
            "Objective-C Usage"
          ]
        },
        {
          "type": "p",
          "text": "Use our iOS integration to style your native iOS applications to be consistent with theSalesforce Lightning Design System. TheSalesforce Lightning Design System iOS Static Libraryincludes:"
        },
        {
          "type": "list",
          "items": [
            "Compiled Design Tokens",
            "The Salesforce Lightning Design System Icons",
            "Helper Classes"
          ]
        },
        {
          "type": "p",
          "text": "While we encourage a holistic integration of the entire design system, you are free to include as many or as few of the following modules as you need in your app. Each module will import a small subset of design tokens or icons. Install CocoaPods:"
        },
        {
          "type": "code",
          "code": "$sudogeminstallcocoapods"
        },
        {
          "type": "p",
          "text": "Navigate to your iOS project directory and run:"
        },
        {
          "type": "code",
          "code": "$ pod init"
        },
        {
          "type": "p",
          "text": "A Podfile will be created at the root of your project directory. Add the following to your Podfile underuse_frameworks!:"
        },
        {
          "type": "code",
          "code": "pod'DesignSystem'"
        },
        {
          "type": "p",
          "text": "Run:"
        },
        {
          "type": "code",
          "code": "$ podinstall"
        },
        {
          "type": "p",
          "text": "A workspace for you project will be created (ending in .xcworkspace) Open this workspace file in xcode. Use this workspace for future builds. After opening the workspace go toYourProject -> YourProjectTarget -> Build Settings -> Header Search Paths, and remove everything but $(inherited) non-recursive. Seehere. SeeSample Appfor a library browser and sample code. Import the library in each file:"
        },
        {
          "type": "code",
          "code": "importDesignSystem"
        },
        {
          "type": "p",
          "text": "SLDS extensions and constants are now accessible within your file. Colors"
        },
        {
          "type": "code",
          "code": "letbackgroundColor=UIColor.sldsBackgroundColor(.colorBackground)letborderColor=UIColor.sldsBorderColor(.colorBorderBrand)letfillColor=UIColor.sldsFill(.brand)lettextColor=UIColor.sldsTextColor(.colorTextDefault)"
        },
        {
          "type": "p",
          "text": "Color Overrides Set up an override then use colors as you normally would throughout your application."
        },
        {
          "type": "code",
          "code": "UIColor.sldsOverrideBackgroundColor(.colorBackground, with: UIColor.cyan)letbackgroundColor=UIColor.sldsBackgroundColor(.colorBackground)UIColor.sldsOverrideBorderColor(.colorBorderBrand, with: UIColor.cyan)letborderColor=UIColor.sldsBorderColor(.colorBorderBrand)UIColor.sldsOverrideFill(.brand, with: UIColor.cyan)letfillColor=UIColor.sldsFill(.brand)UIColor.sldsOverrideTextColor(.colorTextBrand, with: UIColor.cyan)lettextColor=UIColor.sldsTextColor(.colorTextDefault)"
        },
        {
          "type": "p",
          "text": "Fonts and Text Sizes"
        },
        {
          "type": "code",
          "code": "label.font=UIFont.sldsFont(.bold, with: .medium)"
        },
        {
          "type": "p",
          "text": "Icons Action Icons"
        },
        {
          "type": "code",
          "code": "leticon=UIImage.sldsActionIcon(.addContact, withSize: SLDSSquareIconLarge)leticonWithColor=UIImage.sldsActionIcon(.addContact, with: UIColor.black, andBGColor: UIColor.white, andSize: SLDSSquareIconLarge)"
        },
        {
          "type": "p",
          "text": "Custom Icons"
        },
        {
          "type": "code",
          "code": "leticon=UIImage.sldsCustomIcon(.custom1, withSize: SLDSSquareIconLarge)leticonWithColor=UIImage.sldCustomIcon(.custom1, with: UIColor.black, andBGColor: UIColor.white, andSize: SLDSSquareIconLarge)"
        },
        {
          "type": "p",
          "text": "Standard Icons"
        },
        {
          "type": "code",
          "code": "leticon=UIImage.sldsStandardIcon(.account, withSize: SLDSSquareIconLarge)leticonWithColor=UIImage.sldsStandardIcon(.account, with: UIColor.black, andBGColor: UIColor.white, andSize: SLDSSquareIconLarge)"
        },
        {
          "type": "p",
          "text": "Utility Icons"
        },
        {
          "type": "code",
          "code": "leticon=UIImage.sldsUtilityIcon(.addContact, withSize: SLDSSquareIconLarge)leticonWithColor=UIImage.sldsUtilityIcon(.addContact, with: UIColor.black, andBGColor: UIColor.white, andSize: SLDSSquareIconLarge)"
        },
        {
          "type": "p",
          "text": "Colors"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIColor* backgroundColor=[UIColor sldsBackgroundColor:SLDSCardColorBackground];UIColor* borderColor=[UIColor sldsBorderColor:SLDSColorBorderBrand];UIColor* fillColor=[UIColor sldsFill:SLDSFillBrand];UIColor* textColor=[UIColor sldsTextColor:SLDSColorTextBrand];"
        },
        {
          "type": "p",
          "text": "Color Overrides Set up an override then use colors as you normally would throughout your application."
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIColor sldsOverrideBackgroundColor:SLDSCardColorBackground with:UIColor.cyanColor];UIColor* backgroundColor=[UIColor sldsBackgroundColor:SLDSCardColorBackground];[UIColor sldsOverrideBorderColor:SLDSColorBorderBrand with:UIColor.cyanColor];UIColor* borderColor=[UIColor sldsBorderColor:SLDSColorBorderBrand];[UIColor sldsOverrideFill:SLDSFillBrand with:UIColor.cyanColor];UIColor* fillColor=[UIColor sldsFill:SLDSFillBrand];[UIColor sldsOverrideTextColor:SLDSColorTextBrand with:UIColor.cyanColor];UIColor* textColor=[UIColor sldsTextColor:SLDSColorTextBrand];"
        },
        {
          "type": "p",
          "text": "Fonts and Text Sizes"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIFont* f=[UIFont sldsFont:SLDSFontRegular withSize:SLDSFontSizeXLarge];"
        },
        {
          "type": "p",
          "text": "Icons Action Icons"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIImage *icon=[UIImage sldsActionIcon:SLDSIconActionNewCustom98 withSize:20.0f];"
        },
        {
          "type": "p",
          "text": "Custom Icons"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIImage *icon=[UIImage sldsCustomIcon:SLDSIconCustom1 withSize:20.0f];"
        },
        {
          "type": "p",
          "text": "Standard Icons"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIImage *icon=[UIImage sldsStandardIcon:SLDSIconStandardAccount withSize:20.0f];"
        },
        {
          "type": "p",
          "text": "Utility Icons"
        },
        {
          "type": "code",
          "code": "#import <DesignSystem/SalesforceDesignSystem.h>...\n\nUIImage *icon=[UIImage sldsUtilityIcon:SLDSIconUtility3dots withSize:20.0f];"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/lightning/new-global-styling-hooks-guidance",
      "title": "New Global Styling Hooks Guidance - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "This document describes the new Salesforce Lightning Design System (SLDS) global styling hooks and calls out best practices for using them. Use this document to help you implement the changes recommended inPrepare Customizations for SLDS Architecture Updates. See theSLDS Architecture Updates FAQsfor more information. Note: The existingStyling Hookssection describes component styling hooks that you use to style at the component level. The new styling hooks have a wider scope which makes them more versatile. Use the global styling hooks to apply Salesforce Lightning Design System values correctly to style your components. The design system determines the values of global styling hooks. Salesforce can change these values at any time and announce the changes in release notes. We donât support overriding the values of global styling hooks in your customizations. Global styling hooks are CSS custom properties that we identify with the '-g-' syntax that comes after the--slds-namespace in the custom property name. They're designed for general use and don't impose specific usage rules. You can apply these properties across standard HTML elements, components, selectors, and more. The versatility of global styling hooks allows designers to implement overarching changes to an application, while complying with the Salesforce Lightning Design System. We created a system to define the values and names of the styling hooks. The styling hooks typically are in sets, where each hook has a common base name and ends with a different numerical identifier. Generally, the set begins with '1', signifying the smallest or starting value, and increments by 'x'. However, each category can have different ranges within its set, reflecting their usage frequency in UI design. For instance, font sizes likely have a wider range than box-shadows. Global styling hooks are organized into several property categories, each addressing a different aspect of design:"
        },
        {
          "type": "list",
          "items": [
            "Colors:These properties define the color palette of your application and include primary key colors, UI surface colors, neutral colors, and explicit colors.",
            "Font:These properties influence the typography in your application, defining aspects like font family, size, weight, line-height, etc.",
            "Border radius:These properties manage the curvature of UI elements' corners, impacting the perceived softness or hardness of components.",
            "Shadows:These properties control the appearance of shadows, affecting the depth perception and layering of UI elements.",
            "Sizing:These properties dictate the dimensions of UI components, directly affecting layout.",
            "Spacing:These properties govern the amount of space between UI elements, guiding the overall layout and ensuring adequate whitespace for readability and aesthetics."
          ]
        },
        {
          "type": "p",
          "text": "In summary, global styling hooks offer a structured, flexible, and wide-ranging framework for designers to effectively craft their application's look and feel. The SLDS color system is part of these properties and plays a crucial role in defining the visual identity of your application. Re-assigning a new value to a global styling hook inside your component is prohibited. You will be subject to test failures and future breaking changes. Global styling hooks are only for consuming a predetermined value defined by the Design System. The values are subject to change by Salesforce. Here are some helpful concepts to hold onto as you read further."
        },
        {
          "type": "list",
          "items": [
            "Semantic UI Colors:A set of semantic styling hooks that derive the design properties that express the visual language of the SLDS brand. These styling hooks are mutable and their values are subject to change.Surface:Used for backgrounds and large areas of the application that express new visual stacking context to create visual depth.Accent:Accent colors, typically brand colors, to emphasize areas that you want to draw attention too.Container:The fill color for elements that contain text or icons.On:Indicates the color of text or icons that is paired with a container color. All surface, accent, and feedback colors have a pairing and should be used together. For example, on-accent should always be paired with an accent-container value.Feedback:A group of colors that indicate CRUD (CREATE, READ, UPDATE and DELETE) actions such as success, error, warning, info, and disabled feedback states.",
            "Surface:Used for backgrounds and large areas of the application that express new visual stacking context to create visual depth.",
            "Accent:Accent colors, typically brand colors, to emphasize areas that you want to draw attention too.",
            "Container:The fill color for elements that contain text or icons.",
            "On:Indicates the color of text or icons that is paired with a container color. All surface, accent, and feedback colors have a pairing and should be used together. For example, on-accent should always be paired with an accent-container value.",
            "Feedback:A group of colors that indicate CRUD (CREATE, READ, UPDATE and DELETE) actions such as success, error, warning, info, and disabled feedback states.",
            "Accessible System Colors:A set of accessible colors that are used throughout the user interface. These styling hooks contain the complete set of values based on their semantics, brand, neutral, and feedback colors. These styling hooks are mutable and their values are subject to change. Only use in edge cases where a semantic UI color does not make sense.",
            "Accessible Color Palettes:A range of accessible color palettes. These colors hold no semantics and can be used within the user interface. These values are immutable and will not change.",
            "Ranges:Every global styling hook set uses names that end in a numerical range, starting at 1 and ending at x. The lowest number is always the lightest color of a color range or lowest value of property range. The highest number x is the darkest color of a color range or largest value of a property range."
          ]
        },
        {
          "type": "p",
          "text": "The SLDS color system provides a flexible framework that makes it easier to implement consistent and aesthetically pleasing designs across your products. It consists of derived color values for primary key colors and UI \"surfaces\", as well as explicit color values. Here we explain how to effectively use this color system. A surface can be defined as the canvas in which UI elements sit. Surface colors express the visual stacking context of our application. Surface colors work in harmony so that making sweeping changes like dark mode can be enabled with ease. Surface colors are reserved for the bottom layer of a surface. These elements are surfaces:"
        },
        {
          "type": "list",
          "items": [
            "application background",
            "panels",
            "modals",
            "docked containers",
            "popovers"
          ]
        },
        {
          "type": "p",
          "text": "Anything that comes into the application's view and has a higher stacking context than a previous surface ultimately establishes a new surface. Surface container colors are reserved for the elements that sit on top of a surface, and contain other UI elements or artifacts, such as text or icons. These elements are surface containers:"
        },
        {
          "type": "list",
          "items": ["cards or containers", "buttons", "button icons", "tabset"]
        },
        {
          "type": "p",
          "text": "One of the clearest signals that something is a surface container is if there is text or icons residing on it. To ensure proper WCAG 2.1 color contrast requirements, pair the text that sits on top of a surface with anonsurface value. It is valid to use any of the accent or feedback colors that are used for text or icons on top of a surface color, for example,--slds-g-color-accent-1 On-surface colors are reserved for text or icons that sit on top of a surface or surface container. Use theon-surfacecolor value as this ensures you pass correct color contrast that meets WCAG 2.1 requirements. For example, if a surface container uses--slds-g-color-surface-container-3, the text on it should use--slds-g-color-on-surface-3. The border colors are reserved for borders or outlines that need to render the neutral color. These are our âgreyâ border colors. Use only on the following properties:"
        },
        {
          "type": "list",
          "items": ["border-color", "outline", "stroke"]
        },
        {
          "type": "p",
          "text": "For compliance with WCAG 2.1 color contrast guidelines, if your component is an interactive element like abuttonorinput, use--slds-g-color-border-2. If your component is a non-interactive, presentational element like a divider line, use--slds-g-color-border-1. Accent colors express a brand's accent color throughout the user interface or to draw attention to an action. Accents can be used when there is no text or icon sitting on top of the accent color. Typically accents are used to draw attention to something, and is used as a text color or to denote that an element is active or selected. These elements can use accent colors:"
        },
        {
          "type": "list",
          "items": ["links", "icons"]
        },
        {
          "type": "p",
          "text": "If elements that use accent colors aren't sitting on top of another accent color, pair them with a surface color. For example, pair a link that's using--slds-g-color-accent-1with a surface that's using--slds-g-color-surface-container-1. Accent containers are similar to surface containers, except that text or icons reside on top of the brand accent. These elements are accent containers:"
        },
        {
          "type": "list",
          "items": ["brand buttons", "selected/active states"]
        },
        {
          "type": "p",
          "text": "The border accent color is reserved for adding borders or outlines that render the brands accent color. You can use this independently or pair it with an accent container color. Feedback colors are a way to express stateful feedback messaging based on a response or interaction type. We have feedback colors for the following message types:"
        },
        {
          "type": "list",
          "items": ["error", "success", "warning", "informational", "disabled"]
        },
        {
          "type": "p",
          "text": "Each feedback type comes with a generic color to use for text and icons, container colors, on color, and border color values. Error colors are reserved for component states that indicate that an error has occurred or could occur if action is taken. Success colors are reserved for component states that indicate that a successful action has occurred or will occur if action is taken. Warning colors are reserved for component states that indicate that something has prevented an action from being taken, such as a dirty state of a form. Informational colors are reserved to provide visual feedback to indicate that some content on the page is purely informational. Disabled colors are reserved for component states to indicate that the component is disabled and you can't interact with it."
        },
        {
          "type": "list",
          "items": [
            "--slds-g-color-surface-2",
            "--slds-g-color-surface-container-1",
            "--slds-g-color-accent-1",
            "--slds-g-color-on-surface-3",
            "--slds-g-color-border-1",
            "--slds-g-color-accent-container-1",
            "--slds-g-color-on-accent-1"
          ]
        },
        {
          "type": "p",
          "text": "â Do Always use anoncolor with acontainercolor to ensure WCAG 2.1 color contrast requirements. â Don't Do not use system colors or colors from another group likesurfacecolors in combination withaccent containers. â Do Feel free to useaccent/feedbackcolors to express your brand's accent or intent on top ofsurfaceandsurface containercolors only. â Don't Do not useaccent/feedback colorsif text or icons sit on top of the accent color. To ensure correct WCAG 2.1 color contrast, useaccent/feedback containercolor for this scenario. â Do Always use the appropriateborder colorfor borders or outlines, if necessary. â Don't Do not use non-border accent colors on borders to achieve a border with an accent color. A set of accessible colors that are used throughout the user interface. These stying hooks contain the complete set of values based on their semantics, brand, neutral, and feedback colors. These are mutable and their values are subject to change. Only use in edge cases where a semantic UI color does not make sense. These styling hooks are also documented in theGlobal Color Style Hooksfor accessibility. These styling hooks are also documented in theGlobal Color Style Hooksfor accessibility. These properties control the appearance of shadows, affecting the depth perception and layering of UI elements. These properties manage the curvature of UI elements' corners, impacting the perceived softness or hardness of components. These properties influence the typography in your application, defining aspects like font family, size, weight, line-height, etc. Font sizes are scaled, based on the--slds-g-font-size-baseproperty which sets the default font-size of the application. Font weights are available in a range where--slds-g-font-weight-4is normal weight. Line height values are set to unitless numbers which are multiplied by the font size used in the element to obtain the desired line height. Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! The spacing values are used to create space between elements. The styling hook values are relative to the root font size and follow a modular scale of 4. Use them to set values for margins and padding, for example. Don't use spacing properties to establish dimensions of an element targeting width and height. Use the sizing properties for this purpose. The sizing values are used to create dimensions of an element, like usingheightandwidthbased properties. Use these styling hooks to specify the pixel width of a border. Use these styling hooks for elements like icons to set their height and width relative to the root element's font-size. The use of SLDS private styling hooks and@layersyntax is prohibited. Some SLDS styling hooks are private and reserved only for internal Salesforce use. They aren't documented for your use. Private SLDS styling hooks have prefixes--_slds-and--slds-s-. If you come across one of these hooks in your rendered content, don't use it as a reference or assign a new value to it. These reserved properties are subject to change and can be removed in future releases. You may also discover some syntax called@layer. This is an internal mechanism Salesforce uses to establish the correct CSS cascade that we expect CSS to render. Don't attempt to use@layerwithin your component CSS or modify the CSS within a layer. For the complete list of global styling hooks, see theGlobal Styling Hooks Reference."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/lightning/overview",
      "title": "Lightning Apps and Components - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Lightning Developer Component Reference"]
        },
        {
          "type": "p",
          "text": "The Salesforce Lightning Design System is ready to use in your Lightning apps and components. It is now automatically included for Lightning Components running in the Lightning Experience and Salesforce S1 mobile application. It is no longer necessary to add a static resource for Lightning Components running within these environments. YourLightning Out,Lightning Components for Visualforce (LC4VF), andLightning Applicationautomatically get the Lightning Design System stylesheets and design tokens by using the linked instructions to each. This is the easiest way to stay up-to-date and consistent with SLDS enhancements. Note:If you still need to use a static resource with the scoped files that were previously included in the download, we haveprovided a tool for you to create your custom-scoped CSS. You will need to scope to your own unique scoping class name instead of.slds. Please note the following when using the Lightning Design System with Lightning components:"
        },
        {
          "type": "list",
          "items": [
            "The Design System uses SVG icons. You can use them in your Lightning components by using one of the new Base Lightning Components calledlightning:icon. You can explore the other Base Components in the Reference section of the Developer Guide.",
            "For details on how to use Design Tokens, read our documentation onStyling with Design Tokens.",
            "You can also find a range of open-sourced sample components in theTrailhead Apps lwc-recipes project on GitHub. Scroll down to find installation instructions in the README section."
          ]
        },
        {
          "type": "p",
          "text": "Finally, weâd love to hear your feedback. Share your thoughts about any aspect of this tutorial or the Salesforce Lightning Design System in general via ourGitHub issues."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/lightning/reference",
      "title": "Global Styling Hooks Reference - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "This section lists the available global styling hooks and their values. Use the global styling hooks to apply Salesforce Lightning Design System values correctly to style your components. The design system determines the values of global styling hooks. Salesforce can change these values at any time and announce the changes in release notes. We don't support overriding the values of global styling hooks in your customizations. All color styling hooks are prefixed with--slds-g-color-and are followed by the color name. For example,--slds-g-color-accent-1is the styling hook for the accent color. These properties control the appearance of shadows, affecting the depth perception and layering of UI elements. These properties manage the curvature of UI elements' corners, impacting the perceived softness or hardness of components. Use these styling hooks to specify the pixel width of a border. Font sizes are scaled, based on the--slds-g-font-size-baseproperty which sets the default font-size of the application. Font weights are available in a range where--slds-g-font-weight-4is normal weight. Line height values are set to unitless numbers which are multiplied by the font size used in the element to obtain the desired line height. Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde harum officiis sit at mollitia, ducimus natus doloremque quos maiores obcaecati consequuntur pariatur quisquam nobis sequi excepturi in dolorem provident iste! The spacing values are used to create space between elements. The styling hook values are relative to the root font size and follow a modular scale of 4. Use them to set values for margins and padding, for example. Don't use spacing properties to establish dimensions of an element targeting width and height. Use the sizing properties for this purpose. Use these styling hooks for elements like icons to set their height and width relative to the root element's font-size."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/lightning/styling-hooks",
      "title": "Styling Hooks - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Before Getting Started",
            "What are Styling Hooks?",
            "What Does the Code Look Like?",
            "How Does It Work?",
            "Naming Conventions",
            "Scoping",
            "Examples",
            "FAQ",
            "Glossary"
          ]
        },
        {
          "type": "p",
          "text": "Styling hooks use CSS custom properties which make it easy to customize component styling and express your brand. This documentation assumes you have an understanding of standards-based web technologies and the Salesforces platform. Additionally, we recommend having a solid grasp of these concepts:"
        },
        {
          "type": "list",
          "items": [
            "CSS cascade, specificity, and inheritance",
            "CSS custom properties",
            "Web components (custom elements, shadow DOM, and HTML templates)"
          ]
        },
        {
          "type": "p",
          "text": "These topics include concepts that are core to styling hooks. Understanding these topics beforehand is extremely beneficial when reading our documentation. As of the 2.17.0 (Spring '22) release, styling hooks is officially designated for General Audience (GA) use! This release adds CSS Custom Property capabilities throughout our supported components, creates a legacy stylesheet for browsers that do not support CSS Custom Properties (e.g., IE11), and updates the namespace of these hooks. Developers can now use all of the existing styling hooks in a fully supported way to customize the look and feel of their Lightning components! As mentioned above, we changed the styling hooks namespace as part of the GA effort. From here on out, the official styling hooks namespace for SLDS will be--slds. The old namespace,--sds, will continue to function in the short term; however, it is best to migrate if you have existing declarations using the old namespace. Migration should be a straightforward process, as no other part of the styling hooks syntax has changed. For all of your existing--sdsdeclarations, migrating them to--sldswill put you on the long-term support path. For the most up-to-date information on available component styling hooks, please visit theBlueprint Overviewpage and select your desired component. At Salesforce, weâre continuously improving our user interface architecture and planning for the future. Because, weâre planning to replace--lwccustom properties with--sldsstyling hooks in a future release (safe harbor). In the Summer â24 release, the--lwccustom properties still work in Lightning pages and Experience Cloud sites. However, in Lightning pages you are strongly encouraged to replace--lwccustom properties during the Summer â24 release with--sldsstyling hooks to avoid regressions when they are removed. Styling hooks use CSS custom properties which make it easy to customize component styling and express your brand, especially when working withweb components and shadow DOM. Below is an example of a custom container with a checkbox using styling hooks."
        },
        {
          "type": "code",
          "code": ".my-css{padding-block:0.5rem;padding-inline:1rem;margin-block:0.5rem;background:white;border:1px solid#014486;border-radius:0.5rem;}.my-checkbox{border-color:#014486;background:#cfe9fe;}.slds-checkbox[type=checkbox]:checked+.slds-checkbox__label.my-checkbox{background:#fff;}"
        },
        {
          "type": "code",
          "code": ".my-css{padding-block:var(--slds-g-spacing-2);padding-inline:var(--slds-g-spacing-3);margin-block:var(--slds-g-spacing-2);background:var(--slds-g-color-surface-container-1);border:var(--slds-g-sizing-border-1)solidvar(--slds-g-color-border-accent-3);border-radius:var(--slds-g-radius-border-3);--slds-c-checkbox-color-border:var(--slds-g-color-border-accent-3);--slds-c-checkbox-color-background:var(--slds-g-color-palette-cloud-blue-90);--slds-c-checkbox-color-background-checked:var(--slds-g-color-neutral-base-100);}"
        },
        {
          "type": "p",
          "text": "If you're working inLightning Web Components (LWC)andSalesforce Lightning Design System (SLDS), styling hooks will enable customization for your Lightning components in an elegant and supported fashion. Currently, we are focusing exclusively oncomponent-level customizations.Themingwill be available in a future version. At its heart, styling hooks are constructed usingCSS custom properties, (also referred to as CSS variables or cascading variables). Hereâs a simple example using ourbadge blueprintwhich contains styling hooks."
        },
        {
          "type": "code",
          "code": ".slds-badge{background-color:var(--slds-c-badge-color-background,#ECEBEA);border-radius:var(--slds-c-badge-radius-border,15rem);color:var(--slds-c-badge-text-color,#080707);/* Styles not pertinent have been omitted */}"
        },
        {
          "type": "p",
          "text": "Lets take the background color property and break down its associated styling hooks implementation, piece by piece. This is a CSS function that enables you to use the stored value of a CSS custom property. It accepts two arguments: a CSS custom property and an optional fallback value. In our example,--slds-c-badge-color-backgroundis our first argument, the CSS custom property, and#ECEBEAis our second argument, the fallback value. Learn more about thevar()function on MDN Declaring a custom property requires that the name begins with double hyphens (--).sldsis a namespace reserved for the Salesforce Lightning Design System. This identifier indicates that the custom property is a component-level customization within SLDS. It is specific to the component it resides in and does not affect unrelated components. Curious about themed customizations? See theTheming FAQ badgerefers to the name of the component that is being targeted by the custom property. In our example, our component is named badge so we include badge in the name of our custom property. To provide predictability, weâve defined several categories that classify our naming conventions. In this instance,-coloridentifies the category that this CSS custom property falls under. For a full list of our categories, seeNaming Convention categories This is the semantic user interface property being customized. This example is referencing thebackgroundproperty. This is the fallback value if the CSS custom property is not valid. In styling hooks, this value is defined by the design system using a token and is not changeable. It is the sensible default of the design system. SeeNaming Conventionsfor more detailed information regarding our naming conventions. In the following section, we assume you have a working knowledge ofLightning Web Components(LWC). If not, you can find excellent information and documentation about Salesforceâs open-source, enterprise-grade web components foundation atdeveloper.salesforce.com. Even if youâre not working in LWC, this section provides helpful guidance for working with styling hooks. To show a basic example of styling hooks in action, weâll create a component that contains thebadge Lightning web component.For more information around CSS custom properties and base Lightning components,visit the official base components documentation. myComponent.html"
        },
        {
          "type": "code",
          "code": "<template><lightning-badgelabel=\"Badge Label\"></lightning-badge></template>"
        },
        {
          "type": "p",
          "text": "myComponent.css"
        },
        {
          "type": "code",
          "code": ":host{/* Your CSS goes here */}"
        },
        {
          "type": "p",
          "text": "myComponent.js"
        },
        {
          "type": "code",
          "code": "import{LightningElement}from'lwc';exportdefaultclassMyComponentextendsLightningElement{}"
        },
        {
          "type": "p",
          "text": "We wonât be touchingmyComponent.jsbut it is required to get your component up and running. We can use thespecial CSS pseudo-class:hostto declare our CSS custom properties within our custom componentmyComponent. The pseudo-class,:hostscopes our styles to the shadow host of the shadow DOM and is one of several useful ways to scope your styles. To dive deeper into the different types of scopes, see theScopingsection. It's best to assign styling hooks using tokens. This makes your CSS simpler and easier to maintain. SLDS Design Tokens provide a convenient set of standardized values. In our CSS, weâll add custom properties to the:hostpseudo-class that correspond to the styling hooks inlightning-badge. In this example, we'll reference standard SLDS Design Tokens that are only available to internal developers.--lwc-paletteOrange80will be used to configure the--slds-c-badge-color-backgroundstyling hook. We'll also configure the text color using--slds-c-badge-text-colorto avoid any unexpected accessibility issues. Before customizing a component using styling hooks, it's best to first utilize standard variants provided by the component. SLDS offers several classes for use withlightning-badgethat result in standard color variations with specific meanings. Change contrasting semantic properties in unison. For example, you should customize both the background and text color styling hooks at the same time. This ensures that the color contrast won't change unexpectedly. This customizes the background color of the badge."
        },
        {
          "type": "code",
          "code": ":host{--slds-c-badge-color-background:var(--lwc-paletteOrange80);// internal only token--slds-c-badge-text-color:var(--lwc-paletteNeutral10);// internal only token}"
        },
        {
          "type": "p",
          "text": "For our next example, let's use custom Aura tokens to achieve a different look for our unique brand. When developing Lightning web components use custom Aura tokens to create and manage your own collection of tokens. Custom Aura tokens, created in your org or installed from an unmanaged package, can be shared across all of your web components. In your web component's CSS file, reference the custom token using the--c-namespace prefix."
        },
        {
          "type": "code",
          "code": ":host{--slds-c-badge-color-background:var(--c-example-purple);--slds-c-badge-text-color:var(--c-example-white);}"
        },
        {
          "type": "p",
          "text": "In our last example, weâll add one more CSS custom property for an even more distinct feel."
        },
        {
          "type": "code",
          "code": ":host{--slds-c-badge-color-background:var(--c-example-purple);--slds-c-badge-text-color:var(--c-example-white);--slds-c-badge-radius-border:var(--c-example-border-radius-small);}"
        },
        {
          "type": "p",
          "text": "By declaring our own CSS custom properties within our custom componentâs:host, we can assign values to the styling hooks and change the look and feel of our badge without ever touching the internal CSS of the component or needing to be intimately familiar with how the badge is built under the hood! This section showcased a basic usage of styling hooks. You may run into instances where you want to customize a specific part of anexperience componentor limit the reach of your custom properties to a certain area of your app. TheScopingsection will provide guidance on these advanced customizations. Styling hooks follows a specific naming convention to promote predictability and consistency. All SLDS styling hooks adhere to the following convention. --[namespace]-[scope]-[component]-[element]-[category]-[property]-[attribute]-[state] Naming conventions are prescribed in the previously listed order but can be used in multiple combinations with one another."
        },
        {
          "type": "code",
          "code": "// Namespace + Scope + Component + Category + Property--slds-c-button-color-background// Namespace + Scope + Component + Element + Category + Property--slds-c-accordion-heading-font-size// Namespace + Scope + Component + Category + Property + Attribute--slds-c-button-sizing-width-small// Namespace + Scope + Component + Category + Property + State--slds-c-button-color-background-hover"
        },
        {
          "type": "p",
          "text": "We aim to align with theflow-relative directional keywordsfound within theCSS logical properties W3C specification."
        },
        {
          "type": "code",
          "code": "// Horizontal/Inline/X-Axis with location--slds-c-[component]-spacing-inline-start\n--slds-c-[component]-spacing-inline-end// Vertical/Block/Y-Axis with location--slds-c-[component]-spacing-block-start\n--slds-c-[component]-spacing-block-end"
        },
        {
          "type": "p",
          "text": "There may be times when a single custom property used multiple times throughout a component makes more sense than declaring several unique custom properties to do the same job. When a custom property is used in the former fashion, we define it as implicit and for the latter, explicit. Each have their use cases and we allow for both implicit and explicit naming conventions with a set of rules delineating the two."
        },
        {
          "type": "list",
          "items": [
            "Custom property has multiple instances in the component that are expected to share the same value",
            "Custom property describes the component as a whole, not an individual piece of the component",
            "Custom property has only a single use case in the component and describes the component (e.g. a container)"
          ]
        },
        {
          "type": "code",
          "code": "--slds-c-[component]-radius-border"
        },
        {
          "type": "list",
          "items": [
            "Custom property is specific to an element and not reusable across other properties, expects a unique value",
            "Custom property may exists across multiple use cases in a component but do not share a relationship",
            "Custom property does not describe the component as a whole, it describes a specific piece of the component in isolation"
          ]
        },
        {
          "type": "code",
          "code": "--slds-c-[component]-[element]-color-background"
        },
        {
          "type": "p",
          "text": "Within the context of CSS custom properties, scoping refers to the region in which custom properties are valid and inheritable by any descendant custom properties. Your scope is determined by the selector you decide to use. Applying custom properties to the global scope causes all applicable custom properties in your document to inherit from your global scope unless you define custom properties lower in the document tree. :rootis the most common global scope when it comes to custom properties.:rootis a pseudo-class that targets the top-level element of a document. If:rootis not accessible, target the highest available element in your document. Learn more about:rooton MDN :rootis not available in Lightning web components. Use:hostas described below."
        },
        {
          "type": "code",
          "code": "/**\n * :root\n *\n * Scoped to the root of the document and all its descendent elements.\n */:root{--slds-c-badge-color-background:var(--c-example-blue);}/**\n * If :root is not accessible, target the top-level element available to you\n */.top-level-element-available{--slds-c-badge-color-background:var(--c-example-blue);}"
        },
        {
          "type": "p",
          "text": "You can scope your custom properties to a standard HTML element and have all its descendants inherit from it. Keep in mindthe cascade, specificity, and inheritancestill applies."
        },
        {
          "type": "code",
          "code": "/**\n * Element\n *\n * Scoped to any HTML element and all its descendent elements\n */h1{--slds-c-badge-color-background:var(--c-example-blue);}"
        },
        {
          "type": "p",
          "text": "You can scope your custom properties to a CSS class and have all its descendants inherit from it. Keep in mindthe cascade, specificity, and inheritancestill applies."
        },
        {
          "type": "code",
          "code": "/**\n * Class\n *\n * Scoped to any element with the class applied and all its descendent elements\n */.my-class{--slds-c-badge-color-background:var(--c-example-blue);}"
        },
        {
          "type": "p",
          "text": ":hostis a pseudo-class that targets the shadow host of the shadow DOM. Adding your custom properties to:hostensures your custom properties are scoped to the custom element that contains the shadow DOM. Keep in mind user styles always win over any styles inside:host."
        },
        {
          "type": "code",
          "code": "/**\n * :host\n *\n * Scoped to the shadow host of a custom element's shadow DOM and all its\n * descendent elements.\n */:host{--slds-c-badge-color-background:var(--c-example-blue);}/**\n * :host -> Custom Element\n *\n * Scoped to the custom element that is owned by :host, affects all descendants\n * of the owned custom element.\n */:hostmy-custom-element{--slds-c-badge-color-background:var(--c-example-blue);}/**\n * â Attempting to reach into a component you don't own will not work,\n */:hostmy-custom-element another-custom-element{--slds-c-badge-color-background:var(--c-example-blue);}"
        },
        {
          "type": "p",
          "text": "There are multiple ways to use styling hooks; how you use styling hooks depends on your projectâs needs and constraints. The following examples are potential use cases, not official SLDS guidelines or patterns. Weâll use the following use case for our examples. Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done."
        },
        {
          "type": "code",
          "code": "<divclass=\"app slds-grid slds-gutters\"><sectionclassName=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-m-bottom_large section section-astro\"><articleclass=\"slds-card\"><divclass=\"slds-card__header\"><header><h3class=\"slds-card__header-title slds-text-heading_large\">Astro</h3></header></div><divclass=\"slds-card__body slds-card__body_inner\"><p>Astro is your friendly guide to everything at Salesforce and helps\n          you become the best at anything you want to do. Warm and\n          welcoming, they encourage the Salesforce community to achieve\n          their goals through trying new things, asking questions, and\n          having fun. Curious and always wanting to learn.</p><divclass=\"slds-badge special\">Curious</div><divclass=\"slds-badge\">Traveler</div><divclass=\"slds-badge\">Welcoming</div></div></article></section><sectionclassName=\"slds-col slds-size_1-of-1 slds-medium-size_1-of-2 slds-m-bottom_large section section-codey\"><articleclass=\"slds-card\"><divclass=\"slds-card__header\"><header><h3class=\"slds-card__header-title slds-text-heading_large\">Codey</h3></header></div><divclass=\"slds-card__body slds-card__body_inner\"><p>Itâs hard not to notice Codeyâheâs the bear tackling projects and\n          getting his paws dirty, all while having a great time. Codey is a\n          maker and a builder. Whether itâs coding an app on Salesforce, or\n          pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed\n          or dive in to get things done.</p><divclass=\"slds-badge\">Builder</div><divclass=\"slds-badge\">Fearless</div><divclass=\"slds-badge\">Hugger</div></div></article></section></div>"
        },
        {
          "type": "p",
          "text": "Global scoping is a good option if you want to set a custom property once and have it affect your entire document or app. Apply your custom properties to.app. This selector is the container for our application. Your global container may be different. The higher in your DOM tree you place your custom properties, the larger your scope."
        },
        {
          "type": "code",
          "code": ".app{--slds-c-badge-color-background:var(--c-example-blue);--slds-c-badge-text-color:var(--c-example-white);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. If you are working on the Salesforce platform, keep in mind access to:rootis disabled. Alternatively, target the parent container of your app. If you want to bundle your custom properties with a selector, you place your custom properties in a selector that is applied to your markup. This is typically a class although any valid selector will work."
        },
        {
          "type": "code",
          "code": ".section-astro{--slds-c-badge-color-background:var(--c-example-blue);--slds-c-badge-text-color:var(--c-example-white);}.section-codey{--slds-c-badge-color-background:var(--c-example-purple);--slds-c-badge-text-color:var(--c-example-white);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. A selector doesnât have to scope to a region. It can be applied to a selector that lives on a single element to limit its scope."
        },
        {
          "type": "code",
          "code": ".section-astro{--slds-c-badge-color-background:var(--c-example-blue);--slds-c-badge-text-color:var(--c-example-white);}.section-codey{--slds-c-badge-color-background:var(--c-example-purple);--slds-c-badge-text-color:var(--c-example-white);}.special{--slds-c-badge-color-background:var(--c-example-pink);--slds-c-badge-text-color:var(--c-example-black);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. Weâll update our example with a simple web component calledfancy-greeting."
        },
        {
          "type": "code",
          "code": "â¦<divclass=\"slds-card__body slds-card__body_inner\"><!-- Our new web component --><fancy-greeting>Hello!</fancy-greeting><p>Astro is your friendly guide to everything at Salesforce and helps\n      you become the best at anything you want to do. Warm and\n      welcoming, they encourage the Salesforce community to achieve\n      their goals through trying new things, asking questions, and\n      having fun. Curious and always wanting to learn.</p><divclass=\"slds-badge special\">Curious</div><divclass=\"slds-badge\">Traveler</div><divclass=\"slds-badge\">Welcoming</div></div>â¦\nâ¦<divclass=\"slds-card__body slds-card__body_inner\"><!-- Our new web component --><fancy-greeting>Howdy!</fancy-greeting><p>Itâs hard not to notice Codeyâheâs the bear tackling projects and\n      getting his paws dirty, all while having a great time. Codey is a\n      maker and a builder. Whether itâs coding an app on Salesforce, or\n      pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed\n      or dive in to get things done.</p><divclass=\"slds-badge\">Builder</div><divclass=\"slds-badge\">Fearless</div><divclass=\"slds-badge\">Hugger</div></div>â¦"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. A few things to note:"
        },
        {
          "type": "list",
          "items": [
            "fancy-greetingexposes two hooks:--example-c-fancy-greeting-color-backgroundand--example-c-fancy-greeting-text-color",
            "Weâre following ournaming conventionswith example, placeholder names",
            "Shadow DOM is enabled (A warning about the shadow DOM)"
          ]
        },
        {
          "type": "p",
          "text": "Custom properties in web components inherit from their scope just like our previous examples. If we revisit our global example, we'll see our web components pick up on our global custom properties."
        },
        {
          "type": "code",
          "code": ".app{--example-c-fancy-greeting-color-background:var(--c-example-gray);--example-c-fancy-greeting-text-color:var(--c-example-black);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. As before, scoping to a selector allows us to customize the two sections differently."
        },
        {
          "type": "code",
          "code": ".section-astro{--example-c-fancy-greeting-color-background:var(--c-example-teal);--example-c-fancy-greeting-text-color:var(--c-example-black);}.section-codey{--example-c-fancy-greeting-color-background:var(--c-example-purple);--example-c-fancy-greeting-text-color:var(--c-example-white);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. Targeting the custom elements themselves works as well."
        },
        {
          "type": "code",
          "code": "fancy-greeting{--example-c-fancy-greeting-color-background:var(--c-example-teal);--example-c-fancy-greeting-text-color:var(--c-example-black);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. Weâve created a new web component calledfancy-containerand updated our example markup."
        },
        {
          "type": "code",
          "code": "â¦<divclass=\"slds-card__body slds-card__body_inner\"><fancy-greeting>Hello!</fancy-greeting><p>Astro is your friendly guide to everything at Salesforce and helps\n      you become the best at anything you want to do. Warm and\n      welcoming, they encourage the Salesforce community to achieve\n      their goals through trying new things, asking questions, and\n      having fun. Curious and always wanting to learn.</p><!-- Our new web component --><fancy-container><divclass=\"slds-badge special\">Curious</div><divclass=\"slds-badge\">Traveler</div><divclass=\"slds-badge\">Welcoming</div></fancy-container></div>â¦"
        },
        {
          "type": "p",
          "text": "Infancy-containerâs CSS, we add SLDS custom properties for badge to its:host. We then assign values to these styling hooks using our own tokens, referenced using CSS custom properties."
        },
        {
          "type": "code",
          "code": ":host{--slds-c-badge-color-background:var(--c-example-blue, royalblue);--slds-c-badge-text-color:var(--c-example-white, white);}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. The shadow DOM, when enabled, prevents access to the internal DOM of the web component. Attempting to reach into the component from the outside will fail."
        },
        {
          "type": "code",
          "code": "fancy-greeting.fancy-text{text-transform:uppercase;}"
        },
        {
          "type": "p",
          "text": "Astro is your friendly guide to everything at Salesforce and helps you become the best at anything you want to do. Warm and welcoming, they encourage the Salesforce community to achieve their goals through trying new things, asking questions, and having fun. Curious and always wanting to learn. Itâs hard not to notice Codeyâheâs the bear tackling projects and getting his paws dirty, all while having a great time. Codey is a maker and a builder. Whether itâs coding an app on Salesforce, or pouring lattes as a âBearistaâ, Codey isnât afraid to get noticed or dive in to get things done. Our selector fails and the text does not transform to uppercase. Targeting a specific part of a web component that you do not own is not possible. This is by design and promotes component encapsulation. It is up to the owner of the web component to provide you access. Examples of access is adding::partor::slottedwithin the component or turning off the shadow DOM. Unless access is granted, you can only target the parent custom element and have all of its descendants inherit from it. Currently, component-level customizations (e.g.--slds-c-*) are the only custom properties that are available. Global styling capabilities that allow theming are in the works but not within scope. When global styling is introduced, it will be an additive feature that will not break any of your existing styling hooks usage. Styling hooks are being gradually rolled out. You can track which components have styling hooks in thecomponent list page."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/platforms/visualforce",
      "title": "Visualforce - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Lightning Experience Stylesheets for Visualforce",
            "Design System Stylesheets"
          ]
        },
        {
          "type": "p",
          "text": "Get the Lightning Experience in Visualforce. Now in GA for Summer â18! Styling Apex components in your\n              Visualforce page with the look of Lighting Experience just got\n              easier. Simply add the attributelightningStyleSheets=\"true\"to the<apex:page>tag. This method can be used along with the Salesforce Lightning Design System CSS method below. We would really appreciate your feedback from your use of the feature. Post your thoughts in theLightning Now! Success Communityand tag it with#LEX4VFto give us the heads up. If there's some Lightning Experience things you want to add, change, or simply adjust in your page, you can use the Design System CSS in Visualforce. You have two options:"
        },
        {
          "type": "list",
          "items": [
            "Add<apex:slds />to your page and wrap your code in a container:<divclassName=\"slds-scope\">...</div>See this code in context on Trailheadand learn more in ourVisualforce Developer Guide.",
            "Or (not recommendedâ¦): create a CSS file with a custom scoped outer wrapper.A tool to create your custom CSS is available here."
          ]
        },
        {
          "type": "p",
          "text": "If you want to dive straight in, here are a few things to note when working with the Salesforce Lightning Design System in Visualforce:"
        },
        {
          "type": "list",
          "items": [
            "When using the component sample code from this site, be sure to replace all static resource paths with the Visualforce URLFOR syntax, as summarized in theFAQ.",
            "Apex tags such as<apex:pageblock>and<apex:inputField>are not yet supported for use with the Salesforce Lightning Design System. Most likely, enabling Lightning Stylesheets will resolve your legacy code styling requests, but the Trailhead unit onVisualforce development within Lightningexplains other options for styling legacy code to look like the new Lightning UI.",
            "For best results with the Salesforce Lightning Design System, use the markup style as outlined in the component examples, and use JavaScript Remoting, Remote Objects or a similar API for data access.",
            "To use the SVG spritemap icons, add the attributesxmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"to the<html>element as documented in theTrailhead module. Do not add the attributes to individual<svg>elements as can cause a page rendering bug.",
            "To use SVG spritemap image icons with Internet Explorer, use thesvg4everybodyscript.",
            "Currently, if you need to use the Salesforce header or sidebar, you can not specify thexmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"on the<html>element. In this case, the SVG icons are not supported."
          ]
        },
        {
          "type": "p",
          "text": "Details on all the above, as well as introductions to many of the Salesforce Lightning Design System components, are documented in theTrailhead module. Weâd love to hear your feedback. Please share your thoughts about any aspect of the Salesforce Lightning Design System via ourGitHub issues."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/release-notes",
      "title": "Release Notes - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "We're continually improving SLDS. The following changes are listed by the date we completed each change. The changes will be publicly available in the next major Salesforce release following the listed date."
        },
        {
          "type": "list",
          "items": [
            "Add outline for selected date",
            "Add outline for selected range of dates"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed datetime-local input to prevent content cut off in iOS devices."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the modals blueprint to display a white background for the close button (X) to improve visibility for people with low vision. Specifically, we updated the close button (X) color from white to gray by removing theslds-button_icon-inverseclass. To display the modal close button correctly, donât use theslds-button_icon-inverseclass for your close button markup."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated icons tov10.10.0Standard Set:Added data_governanceAdded data_lake_objectsAdded inboxAdded metricAdded metric_definitionAdded omni_channelAdded operation_planAdded operation_plan_executionAdded operation_plan_requestAdded operation_plan_stepAdded operation_plan_step_executionAdded policyAdded prep_flowAdded query_editorAdded robotAdded taxonomyAdded visualizationAdded workspaceUtility Set:Added angleAdded card_detailsAdded circleAdded cmsAdded contactless_payAdded formatAdded heightAdded highlightAdded line_chartAdded outputAdded replayAdded robotAdded sort_ascendingAdded widthAdded work_queueDoctype SetAdded shared_folder",
            "Standard Set:Added data_governanceAdded data_lake_objectsAdded inboxAdded metricAdded metric_definitionAdded omni_channelAdded operation_planAdded operation_plan_executionAdded operation_plan_requestAdded operation_plan_stepAdded operation_plan_step_executionAdded policyAdded prep_flowAdded query_editorAdded robotAdded taxonomyAdded visualizationAdded workspace",
            "Added data_governance",
            "Added data_lake_objects",
            "Added inbox",
            "Added metric",
            "Added metric_definition",
            "Added omni_channel",
            "Added operation_plan",
            "Added operation_plan_execution",
            "Added operation_plan_request",
            "Added operation_plan_step",
            "Added operation_plan_step_execution",
            "Added policy",
            "Added prep_flow",
            "Added query_editor",
            "Added robot",
            "Added taxonomy",
            "Added visualization",
            "Added workspace",
            "Utility Set:Added angleAdded card_detailsAdded circleAdded cmsAdded contactless_payAdded formatAdded heightAdded highlightAdded line_chartAdded outputAdded replayAdded robotAdded sort_ascendingAdded widthAdded work_queue",
            "Added angle",
            "Added card_details",
            "Added circle",
            "Added cms",
            "Added contactless_pay",
            "Added format",
            "Added height",
            "Added highlight",
            "Added line_chart",
            "Added output",
            "Added replay",
            "Added robot",
            "Added sort_ascending",
            "Added width",
            "Added work_queue",
            "Doctype SetAdded shared_folder",
            "Added shared_folder"
          ]
        },
        {
          "type": "list",
          "items": [
            "Refactored Kinetics Button Base underline to beBu more adaptive to overrides in padding, margin, and line-height"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed combobox from repeating selection twice in screen reader"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed the hover color for the icons used in inline edit variant",
            "Changed the dropdown options color when disabled"
          ]
        },
        {
          "type": "list",
          "items": [
            "Add inline date formatdivwith contentmm/dd/yyyyfor all datepickers that are not in error state.",
            "Add inline date formatdivwith contentmm/dd/yyyyfor the date portion of all datetime-pickers that are not in error state.",
            "Add in focus accessibility guideline when closing calendar."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated datepicker component blueprint with the required date input format to improve accessibility and meet Web Content Accessibility Guidelines (WCAG)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated datetime-picker component blueprint with the required date input format to improve accessibility and meet Web Content Accessibility Guidelines (WCAG)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated background color of the Modal's close icon along with its active state styling"
          ]
        },
        {
          "type": "list",
          "items": ["Added aria attributes for required variant"]
        },
        {
          "type": "list",
          "items": ["Updated documentation in Styling Hooks table"]
        },
        {
          "type": "list",
          "items": ["Updated documentation regarding veriable density"]
        },
        {
          "type": "list",
          "items": ["Updated documentation regarding veriable density"]
        },
        {
          "type": "list",
          "items": ["Added shadow for today's date to maintain accessibility"]
        },
        {
          "type": "list",
          "items": ["Added shadow for today's date to maintain accessibility"]
        },
        {
          "type": "list",
          "items": ["Updated focus ring color for links to blue-40."]
        },
        {
          "type": "list",
          "items": [
            "Added new focus style for tabs when.slds-has-focusclass is getting added."
          ]
        },
        {
          "type": "list",
          "items": ["bump icon version"]
        },
        {
          "type": "list",
          "items": ["Remove max-width prop from accordion on focus/hover"]
        },
        {
          "type": "list",
          "items": ["Update Menu Overflow variant margin-left"]
        },
        {
          "type": "list",
          "items": [
            "Updated focus styles for buttons and input elements",
            "Updated account icon bg to blue-30"
          ]
        },
        {
          "type": "list",
          "items": [
            "New focus styles incorporated to all components.",
            "Updated icons tov10.8.3Standard Set:Added account_scoreAdded aggregateAdded app_form_participantAdded app_form_product_participantAdded cost_modelAdded labelsAdded list_feeAdded list_rateAdded party_profileAdded path_experimentAdded people_scoreAdded price_adjustment_scheduleAdded price_adjustment_tierAdded program_cohortAdded program_cohort_memberAdded rate_adjustmentAdded record_consentAdded whatsappUtility Set:Added aggregateAdded arrayAdded bottom_group_alignmentAdded cant_syncAdded center_group_alignmentAdded columnsAdded fully_syncedAdded inner_joinAdded joinAdded left_joinAdded not_in_syncAdded not_savedAdded outer_joinAdded path_experimentAdded program_cohortAdded program_cohort_memberAdded record_consentAdded right_joinAdded skillAdded sync_in_progressAdded top_group_alignment",
            "Standard Set:Added account_scoreAdded aggregateAdded app_form_participantAdded app_form_product_participantAdded cost_modelAdded labelsAdded list_feeAdded list_rateAdded party_profileAdded path_experimentAdded people_scoreAdded price_adjustment_scheduleAdded price_adjustment_tierAdded program_cohortAdded program_cohort_memberAdded rate_adjustmentAdded record_consentAdded whatsapp",
            "Added account_score",
            "Added aggregate",
            "Added app_form_participant",
            "Added app_form_product_participant",
            "Added cost_model",
            "Added labels",
            "Added list_fee",
            "Added list_rate",
            "Added party_profile",
            "Added path_experiment",
            "Added people_score",
            "Added price_adjustment_schedule",
            "Added price_adjustment_tier",
            "Added program_cohort",
            "Added program_cohort_member",
            "Added rate_adjustment",
            "Added record_consent",
            "Added whatsapp",
            "Utility Set:Added aggregateAdded arrayAdded bottom_group_alignmentAdded cant_syncAdded center_group_alignmentAdded columnsAdded fully_syncedAdded inner_joinAdded joinAdded left_joinAdded not_in_syncAdded not_savedAdded outer_joinAdded path_experimentAdded program_cohortAdded program_cohort_memberAdded record_consentAdded right_joinAdded skillAdded sync_in_progressAdded top_group_alignment",
            "Added aggregate",
            "Added array",
            "Added bottom_group_alignment",
            "Added cant_sync",
            "Added center_group_alignment",
            "Added columns",
            "Added fully_synced",
            "Added inner_join",
            "Added join",
            "Added left_join",
            "Added not_in_sync",
            "Added not_saved",
            "Added outer_join",
            "Added path_experiment",
            "Added program_cohort",
            "Added program_cohort_member",
            "Added record_consent",
            "Added right_join",
            "Added skill",
            "Added sync_in_progress",
            "Added top_group_alignment"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Combobox blueprint to userole=\"option\"on div wrapping loading spinner"
          ]
        },
        {
          "type": "list",
          "items": [
            "Introduced a new hidden element which helps screen reader announce its state when a cell content has been updated"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedaria-labelledbyfrom<table />element on the blueprint",
            "Updatearia-livefrom \"assertive\" to \"polite\" andaria-atomicfrom \"true\" to \"false\" for the month title<h2 class=\"site-text-heading_large\">inDatepickerHeaderon the blueprint"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added tabindex to the heading element to make it programmatically focussable."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed modal by removing code explicitly scoped to patching internal, private implementations. Appropriate styles will be displayed again."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Progress Stepbuttontodiv.",
            "Added tabindex=\"0\" to abovedivto make it focusable.",
            "Removedaria-describedbyandtitleattributes.",
            "Updated focus style for Web and Mobile."
          ]
        },
        {
          "type": "list",
          "items": ["Updated Tooltip component description."]
        },
        {
          "type": "list",
          "items": [
            "Moved global styling hooks from slds-wcag class selector to root selector scope."
          ]
        },
        {
          "type": "list",
          "items": ["Fixed token notation in header padding-right property"]
        },
        {
          "type": "list",
          "items": [
            "Added Button element forPillremove feature. Now remove button is focusable and can be clickable.",
            "Removed non applicable ARIA attributes after markup updates."
          ]
        },
        {
          "type": "list",
          "items": [
            "Inbuilt Header introduced for tabs. The header scales as per the size modifiers.",
            "Updated icons tov10.8.2Standard Set:Added custody_chain_entryAdded custody_entry_verificationAdded custody_overrideUpdated data_cloudAdded digital_verification_config_groupAdded digital_verification_configAdded linkedAdded prompt_builderAdded real_timeAdded scheduling_workspace_territoryUpdated storyAdded title_partyAdded work_summaryUtility Set:Added add_aboveAdded add_belowUpdated apex_altAdded asset_repossessedUpdated data_cloudUpdated einstein_altAdded locked_with_additionsAdded payment_deferredAdded planeAdded prompt_builderAdded real_timeAdded record_collectionAdded sparkle",
            "Standard Set:Added custody_chain_entryAdded custody_entry_verificationAdded custody_overrideUpdated data_cloudAdded digital_verification_config_groupAdded digital_verification_configAdded linkedAdded prompt_builderAdded real_timeAdded scheduling_workspace_territoryUpdated storyAdded title_partyAdded work_summary",
            "Added custody_chain_entry",
            "Added custody_entry_verification",
            "Added custody_override",
            "Updated data_cloud",
            "Added digital_verification_config_group",
            "Added digital_verification_config",
            "Added linked",
            "Added prompt_builder",
            "Added real_time",
            "Added scheduling_workspace_territory",
            "Updated story",
            "Added title_party",
            "Added work_summary",
            "Utility Set:Added add_aboveAdded add_belowUpdated apex_altAdded asset_repossessedUpdated data_cloudUpdated einstein_altAdded locked_with_additionsAdded payment_deferredAdded planeAdded prompt_builderAdded real_timeAdded record_collectionAdded sparkle",
            "Added add_above",
            "Added add_below",
            "Updated apex_alt",
            "Added asset_repossessed",
            "Updated data_cloud",
            "Updated einstein_alt",
            "Added locked_with_additions",
            "Added payment_deferred",
            "Added plane",
            "Added prompt_builder",
            "Added real_time",
            "Added record_collection",
            "Added sparkle",
            "Updateddisabledstate colors for all components.",
            "Addedaria-label=\"disabled\"toRichTextEditorcomponent which is similar toRteToolbar.",
            "Added Button element forPillremove feature. Now remove button is focusable and can be clickable.",
            "Updated RTL stylings forsetup-assistantcomponent",
            "Added new shadow styling hook to implement new focus style."
          ]
        },
        {
          "type": "list",
          "items": ["Updated Checkbox Toggle Focus Style."]
        },
        {
          "type": "list",
          "items": ["Updated assistive text content."]
        },
        {
          "type": "list",
          "items": ["Updated Combobox disabled color"]
        },
        {
          "type": "list",
          "items": [
            "Removed wrapping for date input type, which was causing some dates to be cut off."
          ]
        },
        {
          "type": "list",
          "items": ["Updated Dropdown Inverse item disabled color"]
        },
        {
          "type": "list",
          "items": [
            "Inbuilt Header introduced for tabs. The header scales as per the size modifiers."
          ]
        },
        {
          "type": "list",
          "items": [
            "Moved unscoped .slds-media__figure to setup-assistant rtl styles"
          ]
        },
        {
          "type": "list",
          "items": [
            "App Launcher button is visibility when Windows high-contrast mode is enabled."
          ]
        },
        {
          "type": "list",
          "items": ["High contrast when the focus is placed on it."]
        },
        {
          "type": "list",
          "items": [
            "Fixed the app launcher button is invisible When windows high contrast is enabled."
          ]
        },
        {
          "type": "list",
          "items": ["Matching styles for [dir=rtl] added."]
        },
        {
          "type": "list",
          "items": ["Matching styles for [dir=rtl] added."]
        },
        {
          "type": "list",
          "items": ["Matching styles for [dir=rtl] added."]
        },
        {
          "type": "list",
          "items": [
            "Updated icons tov10.7.0Standard Set:Addedattribute_based_pricingAddedbundles_pricingAddeddata_cloudAddeddata_graphAddeddynamic_highlights_panelAddedheader_discountsAddedimpact_outcomeAddedimpact_strategy_assignmentAddedimpact_strategyAddedindicator_assignmentAddedindicator_definitionAddedindicator_performance_periodAddedindicator_resultAddedmanual_discountsAddedno_code_modelAddedoutcome_activityAddedpanel_detailAddedprice_adjustment_matrixAddedregistered_modelAddedrepeatersAddedscheduling_workspaceUpdatedstoryAddedtime_periodAddeduploaded_modelAddedvolume_discountsAddedwalkthroughsUtility Set:Addedapex_altAddeddata_cloudAddeddata_graphAddeddata_transformsAddedguidanceAddedindicator_performance_periodAddedmixed_sources_mappingAddedpage_structureAddedvisibility_rule_assignedAddedwalkthroughs",
            "Standard Set:Addedattribute_based_pricingAddedbundles_pricingAddeddata_cloudAddeddata_graphAddeddynamic_highlights_panelAddedheader_discountsAddedimpact_outcomeAddedimpact_strategy_assignmentAddedimpact_strategyAddedindicator_assignmentAddedindicator_definitionAddedindicator_performance_periodAddedindicator_resultAddedmanual_discountsAddedno_code_modelAddedoutcome_activityAddedpanel_detailAddedprice_adjustment_matrixAddedregistered_modelAddedrepeatersAddedscheduling_workspaceUpdatedstoryAddedtime_periodAddeduploaded_modelAddedvolume_discountsAddedwalkthroughs",
            "Addedattribute_based_pricing",
            "Addedbundles_pricing",
            "Addeddata_cloud",
            "Addeddata_graph",
            "Addeddynamic_highlights_panel",
            "Addedheader_discounts",
            "Addedimpact_outcome",
            "Addedimpact_strategy_assignment",
            "Addedimpact_strategy",
            "Addedindicator_assignment",
            "Addedindicator_definition",
            "Addedindicator_performance_period",
            "Addedindicator_result",
            "Addedmanual_discounts",
            "Addedno_code_model",
            "Addedoutcome_activity",
            "Addedpanel_detail",
            "Addedprice_adjustment_matrix",
            "Addedregistered_model",
            "Addedrepeaters",
            "Addedscheduling_workspace",
            "Updatedstory",
            "Addedtime_period",
            "Addeduploaded_model",
            "Addedvolume_discounts",
            "Addedwalkthroughs",
            "Utility Set:Addedapex_altAddeddata_cloudAddeddata_graphAddeddata_transformsAddedguidanceAddedindicator_performance_periodAddedmixed_sources_mappingAddedpage_structureAddedvisibility_rule_assignedAddedwalkthroughs",
            "Addedapex_alt",
            "Addeddata_cloud",
            "Addeddata_graph",
            "Addeddata_transforms",
            "Addedguidance",
            "Addedindicator_performance_period",
            "Addedmixed_sources_mapping",
            "Addedpage_structure",
            "Addedvisibility_rule_assigned",
            "Addedwalkthroughs"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated background colors for Standard and Actions icons",
            "Standard Icons SetUpdatedeventUpdateddashboardUpdatedcaseUpdatednoteUpdatedcontactUpdatedleadUpdatedcampaignUpdatedproductsUpdateduserUpdatedcontractUpdatedcategoryUpdatedcatalogUpdatedstoreUpdatedbuyer_accountUpdatedbuyer_groupUpdateddelegated_accountUpdatedentitlement_policy",
            "Updatedevent",
            "Updateddashboard",
            "Updatedcase",
            "Updatednote",
            "Updatedcontact",
            "Updatedlead",
            "Updatedcampaign",
            "Updatedproducts",
            "Updateduser",
            "Updatedcontract",
            "Updatedcategory",
            "Updatedcatalog",
            "Updatedstore",
            "Updatedbuyer_account",
            "Updatedbuyer_group",
            "Updateddelegated_account",
            "Updatedentitlement_policy"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": [
            "FixedNVDAcheckbox toggle is announced twice removed aria-live=\"assertive\""
          ]
        },
        {
          "type": "list",
          "items": [
            "Tooltip option provided for Date/DateTime pickers.",
            "Updated from tabindex to tabIndex."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedfont-weightproperty in.slds-is-edited&.slds-has-errorto provide secondary indicator for the text",
            "UpdatedAccessibilitysection indocs.mdxdocumentation file for bold text"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedaria-labelfrom table header to prevent from reading twice headers."
          ]
        },
        {
          "type": "list",
          "items": ["Added datepicker example with field level tooltip"]
        },
        {
          "type": "list",
          "items": [
            "Tooltip option provided for Date/DateTime pickers.",
            "Addedslds-datetimepicker_has-tooltipclass to fix the icon misalignment issue."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": ["Added field level custom message option for tooltip"]
        },
        {
          "type": "list",
          "items": [
            "Optimized full size option and refactored to use CSS grid.",
            "Updated full size variant to trigger at the$mq-smallbreakpoint to prevent larger devices from receiving the variant."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed duplicate IDs by adding helper method"]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced aria-hidden with hidden attribute for components that show/hide content"
          ]
        },
        {
          "type": "list",
          "items": ["Updated disabled checkbox toggle button color."]
        },
        {
          "type": "list",
          "items": [
            "Updated icons tov10.6.1Utility Set:Addededit_gptUpdatedeinsteinAddedsparkles",
            "Utility Set:Addededit_gptUpdatedeinsteinAddedsparkles",
            "Addededit_gpt",
            "Updatedeinstein",
            "Addedsparkles"
          ]
        },
        {
          "type": "list",
          "items": [
            "Correction in icons package version.",
            "Updated placeholder text color for Rich Text Editor",
            "Updated docked utility component's unread notification state icon color",
            "Updated border colors for Feeds component"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed text-selection color issues which was introduced by WCAG 2.1 updates.",
            "Fixed border colors for components."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed grid column size classes where theslds-col-class now applies 'flex: 1 1 auto,' which breaks grid layouts when combined withslds-small|medium|large-size_*classes. This results in incomplete rows and layout issues."
          ]
        },
        {
          "type": "list",
          "items": [
            "Update transparency values (rgba and design tokens) with transparent SLDS global styling hooks",
            "Changed anchor link ouline border black color to blue-50",
            "Updated background colors for Standard and Actions icons",
            "Updated icons tov10.6.0Standard Set:Addedbill_of_materialsAddedbuyer_group_qualifierAddeddatashare_targetAddeddatasharesAddeddisclosure_and_complianceAddeddocument_previewAddedfacility_bedAddedmarketAddedprice_sheetAddedmulesoftUtility Set:Addedadd_sourceAddedapp_web_messagingAddedbookmark_strokeAddedbuyer_group_qualifierAddeddocument_previewAddedexpiredAddedfavorite_altAddedheartAddedhourglassAddedintegrationAddedmarketAddedmoreAddednotification_offAddednotification_snoozedAddedprofile_altAddedpromotion_tiersAddedsender_emailAddedservice_appointmentAddedservice_reportAddedtoggle_offAddedtoggle_onAddedmulesoft",
            "Standard Set:Addedbill_of_materialsAddedbuyer_group_qualifierAddeddatashare_targetAddeddatasharesAddeddisclosure_and_complianceAddeddocument_previewAddedfacility_bedAddedmarketAddedprice_sheetAddedmulesoft",
            "Addedbill_of_materials",
            "Addedbuyer_group_qualifier",
            "Addeddatashare_target",
            "Addeddatashares",
            "Addeddisclosure_and_compliance",
            "Addeddocument_preview",
            "Addedfacility_bed",
            "Addedmarket",
            "Addedprice_sheet",
            "Addedmulesoft",
            "Utility Set:Addedadd_sourceAddedapp_web_messagingAddedbookmark_strokeAddedbuyer_group_qualifierAddeddocument_previewAddedexpiredAddedfavorite_altAddedheartAddedhourglassAddedintegrationAddedmarketAddedmoreAddednotification_offAddednotification_snoozedAddedprofile_altAddedpromotion_tiersAddedsender_emailAddedservice_appointmentAddedservice_reportAddedtoggle_offAddedtoggle_onAddedmulesoft",
            "Addedadd_source",
            "Addedapp_web_messaging",
            "Addedbookmark_stroke",
            "Addedbuyer_group_qualifier",
            "Addeddocument_preview",
            "Addedexpired",
            "Addedfavorite_alt",
            "Addedheart",
            "Addedhourglass",
            "Addedintegration",
            "Addedmarket",
            "Addedmore",
            "Addednotification_off",
            "Addednotification_snoozed",
            "Addedprofile_alt",
            "Addedpromotion_tiers",
            "Addedsender_email",
            "Addedservice_appointment",
            "Addedservice_report",
            "Addedtoggle_off",
            "Addedtoggle_on",
            "Addedmulesoft"
          ]
        },
        {
          "type": "list",
          "items": [
            "Configured--slds-c-button-text-color-hoverStyling hook in Button with dual-stateful to accurately apply the text color on-hover"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed by adding tabindex forscrollable region must have keyboard accesswcag issue",
            "Fixed by adding dynamic Ids for duplicate-id-aria issue",
            "Fixed by adding unique Ids,aria-label foraria-allowed-attrwcag issue"
          ]
        },
        {
          "type": "p",
          "text": "Addedaria-labelto meet accessibility requirements specifically for screen readers."
        },
        {
          "type": "list",
          "items": [
            "Addedrole=\"presentation\"for globlal navigation's overflow tab item"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed invalid aria roles issue in subheadings withrole=presentation"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixedaria-labelledbyto meet accessibility requirements specifically for screen readers."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added full size option for modal. This will allow the modal to reach full screen for mobile screen size and devices. When screen is bigger than mobile screen width (from 768px), full size modal will take on large size modal behaviour.",
            "Changed close button to meet accessibility requirement when in full size and in mobile width."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelledbyto meet accessibility requirements specifically for screen readers."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added aria-label and tabindex to fix aria-allowed-attr and aria-label sa11y issue."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelfor picklist examples to meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added button to the storybody-max-height-smallto fix scrollable-region-focusable wcag issue.",
            "Addedtitleattribute to meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": ["Fixed hardcoded walk through header and alt image paths"]
        },
        {
          "type": "list",
          "items": [
            "Added id to aria-labelledby to meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added id to aria-labelledby to meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added aria-label attribute to the progress ring to meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": ["Added unique id to fix duplicate-id-aria wcag issue"]
        },
        {
          "type": "list",
          "items": ["Addedrole=\"presentation\"for overflow tab item."]
        },
        {
          "type": "list",
          "items": [
            "Configuredslds-nav-vertical__itemto add keyboard visual focus cue indicator"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed by adding tabindex=\"0\" and role=\"region\" for Scrollable region must have keyboard access wcag issue"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed hardcoded base info background image path"]
        },
        {
          "type": "list",
          "items": [
            "Added tabindex to fix Scrollable region must have keyboard access wcag issue"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated colors for various components:Button IconsCarouselCheckbox ButtonCheckbox ToggleCheckboxComboboxData TablesDynamic IconsFile SelectorPillsPopoversProgress IndicatorRadio GroupSelectSpinnersSplit ViewTabsVisual Picker",
            "Button Icons",
            "Carousel",
            "Checkbox Button",
            "Checkbox Toggle",
            "Checkbox",
            "Combobox",
            "Data Tables",
            "Dynamic Icons",
            "File Selector",
            "Pills",
            "Popovers",
            "Progress Indicator",
            "Radio Group",
            "Select",
            "Spinners",
            "Split View",
            "Tabs",
            "Visual Picker"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated constant colors codes with global slds hooks",
            "Added two new dependencies for SLDS global styling hooks generation,@salesforce-ux/sds-styling-aliaseswith version0.2.4@salesforce-ux/sds-styling-hookswith version1.1.0-alpha.2",
            "@salesforce-ux/sds-styling-aliaseswith version0.2.4",
            "@salesforce-ux/sds-styling-hookswith version1.1.0-alpha.2",
            "Updatedgulpfile to include SLDS global hooks generation as part of build and dist jobs",
            "Updated design tokens in every component and utility with SLDS global styling hooks (except Brand-related tokens)",
            "Updated CI workflows migrating from CircleCI to GitHub Actions",
            "Updated icons tov10.5.5Standard Set:Addedasset_hierarchyAddedbudget_category_valueAddedbudget_periodUpdatedcrypto_category_wallet_groupAddedcrypto_transaction_envelope_change_snapshotAddeddata_transformsAddedfunding_award_adjustmentAddedfunding_requirementAddedpromotion_tiersAddedslack_conversationsAddedyour_accountUtility Set:Addedasset_objectAddedbudget_category_valueAddedbudget_periodAddedcontactAddedfunding_award_adjustmentAddedfunding_requirementAddedhttpAddedknowledge_smart_linkAddedleadAddedmaintenance_planAddedno_returnAddedopportunityAddedordersAddedproductAddedpropositionAddedqueueAddedsend_logAddedservice_contractAddedslack_conversationsAddedyour_accountDocType Set:UpdatedrtfUpdatedfolderUpdatedlibrary_folder",
            "Standard Set:Addedasset_hierarchyAddedbudget_category_valueAddedbudget_periodUpdatedcrypto_category_wallet_groupAddedcrypto_transaction_envelope_change_snapshotAddeddata_transformsAddedfunding_award_adjustmentAddedfunding_requirementAddedpromotion_tiersAddedslack_conversationsAddedyour_account",
            "Addedasset_hierarchy",
            "Addedbudget_category_value",
            "Addedbudget_period",
            "Updatedcrypto_category_wallet_group",
            "Addedcrypto_transaction_envelope_change_snapshot",
            "Addeddata_transforms",
            "Addedfunding_award_adjustment",
            "Addedfunding_requirement",
            "Addedpromotion_tiers",
            "Addedslack_conversations",
            "Addedyour_account",
            "Utility Set:Addedasset_objectAddedbudget_category_valueAddedbudget_periodAddedcontactAddedfunding_award_adjustmentAddedfunding_requirementAddedhttpAddedknowledge_smart_linkAddedleadAddedmaintenance_planAddedno_returnAddedopportunityAddedordersAddedproductAddedpropositionAddedqueueAddedsend_logAddedservice_contractAddedslack_conversationsAddedyour_account",
            "Addedasset_object",
            "Addedbudget_category_value",
            "Addedbudget_period",
            "Addedcontact",
            "Addedfunding_award_adjustment",
            "Addedfunding_requirement",
            "Addedhttp",
            "Addedknowledge_smart_link",
            "Addedlead",
            "Addedmaintenance_plan",
            "Addedno_return",
            "Addedopportunity",
            "Addedorders",
            "Addedproduct",
            "Addedproposition",
            "Addedqueue",
            "Addedsend_log",
            "Addedservice_contract",
            "Addedslack_conversations",
            "Addedyour_account",
            "DocType Set:UpdatedrtfUpdatedfolderUpdatedlibrary_folder",
            "Updatedrtf",
            "Updatedfolder",
            "Updatedlibrary_folder",
            "Updated BG color to below Standard Iconsconnect_walletcrypto_product_category_wallet_rolecrypto_productcrypto_transaction_envelope_change_logcrypto_transaction_envelopecrypto_transactioncrypto_wallet_group_itemcrypto_wallet_groupcrypto_walletnft_settingsnft_studio",
            "connect_wallet",
            "crypto_product_category_wallet_role",
            "crypto_product",
            "crypto_transaction_envelope_change_log",
            "crypto_transaction_envelope",
            "crypto_transaction",
            "crypto_wallet_group_item",
            "crypto_wallet_group",
            "crypto_wallet",
            "nft_settings",
            "nft_studio"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated icons tov10.4.0Standard Set:Addedai_accelerator_cardAddedconnect_walletAddedcontract_line_outcomeAddedcontract_line_outcome_dataAddedcrypto_category_wallet_groupAddedcrypto_productAddedcrypto_product_category_wallet_roleAddedcrypto_transactionAddedcrypto_transaction_envelopeAddedcrypto_transaction_envelope_itemAddedcrypto_walletAddedcrypto_wallet_groupAddedcrypto_wallet_group_itemAddedcustomerAddedcustomer_workspaceAddedlearner_programAddednft_settingsAddednft_studioAddedpromptAddedsetup_modalAddedsnippet_altAddedtax_policyAddedtax_rateAddedtax_treatmentAddedwaterAction Set:Addedaction_scan_enabledAddedaction_scan_disabledUtility Set:AddedcaptionsAddedcontract_line_outcomeAddedcontract_line_outcome_dataAddedcustomerAddedcustomer_workspaceAddeddetachAddedhazmat_equipmentAddedlabelAddedlabelsAddedrecord_altAddedsegmentsAddedtax_policyAddedtax_rateAddedtax_treatmentAddedtollwaysAddedtransport_bicycleAddedtransport_heavy_truckAddedtransport_light_truckAddedtransport_walkingAddedutilityAddedwater",
            "Standard Set:Addedai_accelerator_cardAddedconnect_walletAddedcontract_line_outcomeAddedcontract_line_outcome_dataAddedcrypto_category_wallet_groupAddedcrypto_productAddedcrypto_product_category_wallet_roleAddedcrypto_transactionAddedcrypto_transaction_envelopeAddedcrypto_transaction_envelope_itemAddedcrypto_walletAddedcrypto_wallet_groupAddedcrypto_wallet_group_itemAddedcustomerAddedcustomer_workspaceAddedlearner_programAddednft_settingsAddednft_studioAddedpromptAddedsetup_modalAddedsnippet_altAddedtax_policyAddedtax_rateAddedtax_treatmentAddedwater",
            "Addedai_accelerator_card",
            "Addedconnect_wallet",
            "Addedcontract_line_outcome",
            "Addedcontract_line_outcome_data",
            "Addedcrypto_category_wallet_group",
            "Addedcrypto_product",
            "Addedcrypto_product_category_wallet_role",
            "Addedcrypto_transaction",
            "Addedcrypto_transaction_envelope",
            "Addedcrypto_transaction_envelope_item",
            "Addedcrypto_wallet",
            "Addedcrypto_wallet_group",
            "Addedcrypto_wallet_group_item",
            "Addedcustomer",
            "Addedcustomer_workspace",
            "Addedlearner_program",
            "Addednft_settings",
            "Addednft_studio",
            "Addedprompt",
            "Addedsetup_modal",
            "Addedsnippet_alt",
            "Addedtax_policy",
            "Addedtax_rate",
            "Addedtax_treatment",
            "Addedwater",
            "Action Set:Addedaction_scan_enabledAddedaction_scan_disabled",
            "Addedaction_scan_enabled",
            "Addedaction_scan_disabled",
            "Utility Set:AddedcaptionsAddedcontract_line_outcomeAddedcontract_line_outcome_dataAddedcustomerAddedcustomer_workspaceAddeddetachAddedhazmat_equipmentAddedlabelAddedlabelsAddedrecord_altAddedsegmentsAddedtax_policyAddedtax_rateAddedtax_treatmentAddedtollwaysAddedtransport_bicycleAddedtransport_heavy_truckAddedtransport_light_truckAddedtransport_walkingAddedutilityAddedwater",
            "Addedcaptions",
            "Addedcontract_line_outcome",
            "Addedcontract_line_outcome_data",
            "Addedcustomer",
            "Addedcustomer_workspace",
            "Addeddetach",
            "Addedhazmat_equipment",
            "Addedlabel",
            "Addedlabels",
            "Addedrecord_alt",
            "Addedsegments",
            "Addedtax_policy",
            "Addedtax_rate",
            "Addedtax_treatment",
            "Addedtollways",
            "Addedtransport_bicycle",
            "Addedtransport_heavy_truck",
            "Addedtransport_light_truck",
            "Addedtransport_walking",
            "Addedutility",
            "Addedwater",
            "BRAND updates to below colors of the palettePALETTE_GREEN_20:#1C3326PALETTE_GREEN_40:#396547PALETTE_HOT_ORANGE_20:#4A2413PALETTE_INDIGO_20:#321D71PALETTE_PURPLE_80:#D7BFF2PALETTE_VIOLET_20:#481A54",
            "PALETTE_GREEN_20:#1C3326",
            "PALETTE_GREEN_40:#396547",
            "PALETTE_HOT_ORANGE_20:#4A2413",
            "PALETTE_INDIGO_20:#321D71",
            "PALETTE_PURPLE_80:#D7BFF2",
            "PALETTE_VIOLET_20:#481A54"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Global Action Help icon'sroleattribute frompresentationtoimgfor better accessibility compliance"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedrole=\"img\"to unread indicator dot to comply with accessibility usage rules foraria-label"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added tabindex to Footless example for programmatic focus use case."
          ]
        },
        {
          "type": "list",
          "items": ["Added example for Success under States"]
        },
        {
          "type": "list",
          "items": [
            "Addedrole=\"img\"to unread indicator dot to comply with accessibility usage rules foraria-label"
          ]
        },
        {
          "type": "list",
          "items": [
            "Corrected typos in blueprints:components/checkboxcomponents/vertical-navigation",
            "components/checkbox",
            "components/vertical-navigation"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed&_shorthand from numerous selectors in SCSS files",
            "Updated icons to v10.3.0Standard Set:AddedslackAddedtableauAddeddashboard_componentUtility Set:Updatedserialized_product_transactionUpdatedserialized_productAddeddata_modelAddedslackAddedtableauAddedvideo_off",
            "Standard Set:AddedslackAddedtableauAddeddashboard_component",
            "Addedslack",
            "Addedtableau",
            "Addeddashboard_component",
            "Utility Set:Updatedserialized_product_transactionUpdatedserialized_productAddeddata_modelAddedslackAddedtableauAddedvideo_off",
            "Updatedserialized_product_transaction",
            "Updatedserialized_product",
            "Addeddata_model",
            "Addedslack",
            "Addedtableau",
            "Addedvideo_off"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fix for sass undefined operation compile error.",
            "Fix wrong computed css margin rules."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-button_icon-largeto support a Large variant for contained button icons"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedvertical-alignfrom button non-base variants to create vertical alignment consistency among all the buttons."
          ]
        },
        {
          "type": "list",
          "items": [
            "Right to left legend to be right aligned and match the alignment of content.",
            "Checkbox margin to properly support RTL."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed form element label to support RTL layout by removing left aligned spacing and placing it back on the opposite side."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-modal__content_footlessclass to example for clarity.",
            "Added clarifying notes around modal focus and header for accessibility, and modified Footless example to show tabindex."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed@noflipannotation from nubbins to make RTL behavior consistent"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added styling changes to support radio group with help text icon.",
            "Added examples: Required with help text icon and Right to left required with help text icon to documentation",
            "Added required with help text icon and tooltip example"
          ]
        },
        {
          "type": "list",
          "items": [
            "Right to left legend to be right aligned and match the alignment of content."
          ]
        },
        {
          "type": "list",
          "items": ["Added annotations for tile board CSS classes."]
        },
        {
          "type": "list",
          "items": [
            "Updated design tokenCOLOR_BACKGROUND_DESTRUCTIVE_HOVERso that it is a different color fromCOLOR_BACKGROUND_DESTRUCTIVE"
          ]
        },
        {
          "type": "list",
          "items": ["Reverted layout changes originally introduced in 2.17.0"]
        },
        {
          "type": "list",
          "items": ["Reverted label layout changes introduced in 2.17.0"]
        },
        {
          "type": "list",
          "items": ["Reverted changes to checkbox layout introduced in 2.17.4"]
        },
        {
          "type": "list",
          "items": [
            "Checkbox inputs will no longer collapse horizontally when a label with a large amount of text is used.",
            "All elements of an individual required checkbox (asterisk, input, and label) are now properly horizontally aligned."
          ]
        },
        {
          "type": "list",
          "items": ["Centered checkboxes using the new Flexbox layout."]
        },
        {
          "type": "list",
          "items": [
            "Fixed spacing/alignment issue in.slds-input_faux > spanfor select-only combobox without a placeholder."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added--slds-c-icon-color-foregroundStyling Hook to Button with Icon variant to accurately apply icon color updatesDue to how the Lightning Base Component is configured, this is required to allow CSS Custom Property reassignment to function within Button Icons",
            "Due to how the Lightning Base Component is configured, this is required to allow CSS Custom Property reassignment to function within Button Icons"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed annotation for Einstein themed cards (.slds-einstein-header__figure)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed&_shorthand from numerous selectors in SCSS files",
            "Added new standard color palette for neutral colors (black/white/grays)",
            "Updated Styling Hooks table on component pages to displayslds-namespaced Hooks",
            "Updated icons to v10.2.2"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks",
            "Added CSS Custom Property reassignments for variants"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states (e.g., focus, active, hover)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Styling Hooks for Stateful Button and Dual Stateful Button.",
            "Added missingslds-namespaced Styling Hooks (originally added in 2.16.0)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states.",
            "Added clarification about card header icon assistive text.",
            "Added clarification about card heading levels for accessibility."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states"
          ]
        },
        {
          "type": "list",
          "items": [
            "Labels will no longer wrap below the checkbox. When the label text wraps, it will now go directly under the previous line."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed spacing between checkbox toggle label and input on mobile."
          ]
        },
        {
          "type": "list",
          "items": ["Addedaria-labelattribute to listbox"]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-cell_action-modeto blueprints of actionable data tables"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed missing attributerequiredon date input"]
        },
        {
          "type": "list",
          "items": ["Fixed missing attributerequiredon date input"]
        },
        {
          "type": "list",
          "items": [
            "Updated dynamic icon colors to match new Salesforce color palettes."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed outdated documentation about changing background color, as this contradicts current Design System guidelines."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states."
          ]
        },
        {
          "type": "list",
          "items": [
            ".slds-input_bordersnow follows the prescribed usage guidelines and is only allowed onreadonlyInputs."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states.",
            "Added clarifying notes around modal focus for accessibility.",
            "Added.slds-modal__content_headlessandslds-modal__content_footlessclasses for styling modal content."
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedheaderandfooterto genericdivtags for better accessibility semantics.",
            "Changed assistive text for close buttons in modals, and added notes to accessibility documentation.",
            "Changed default header level fromh2 class=\"site-text-heading_large\"toh1 class=\"site-text-heading_xx-large\"for semantics and added more description around using headers in the Accessibility section.",
            "Removed redundanttitleattribute from modal close button.",
            "Updated use ofaria-describedbyattribute for modal content, and clarified in accessibility documentation section.",
            "Added therole=\"presentation\"attribute to the modal backdrop.",
            "Movedslds-modal__closeout of the modal header container and adjusted styles and annotations accordingly.",
            "Headless modal variant no longer requiresslds-modal__headerin the markup."
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecated older styles for previous markup of theslds-modal__closebutton."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a shape to the progress ring to better visually indicate value by more than color alone."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states"
          ]
        },
        {
          "type": "list",
          "items": [
            "Labels will no longer wrap below the radio button. When the label text wraps, it will now go directly under the previous line."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states (e.g., focus, active, hover)."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added reassignment of Styling Hooks for component states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks.",
            "Added CSS Custom Property reassignments for variants and states"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removeddisplay: flexproperty from.slds-combobox__form-elementwhich was added recently for ARIA 1.2 guidance."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedwidthproperty from.slds-input_fauxwhich was added recently for ARIA 1.2 guidance."
          ]
        },
        {
          "type": "list",
          "items": [
            "In accordance with ARIA 1.2 guidance, theinputwas replaced withbuttonwithin these components that contain select-only comboboxes:Datetime PickerDocked ComposerDynamic MenuExpressionGlobal HeaderList builderLookupsPicklistRich Text EditorTimepicker",
            "Datetime Picker",
            "Docked Composer",
            "Dynamic Menu",
            "Expression",
            "Global Header",
            "List builder",
            "Lookups",
            "Picklist",
            "Rich Text Editor",
            "Timepicker",
            "Added SLDS scope customizer tool:npm run slds:customizer",
            "Added new standard color palette for neutral colors (black/white/grays)",
            "Updated @salesforce-ux/icons to 10.1.1"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added link to accessibility keyboard interaction guidelines."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedsldsas the default namespace withsdsfallbacks for Styling Hooks",
            "Added CSS Custom Property reassignments for variants and states (e.g., focus, active, hover)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-combobox__inputelement frominputtobuttonper ARIA 1.2 guidance for select-only comboboxes.",
            "Updated to ARIA 1.2 compliance where these attributes are moved to the input, or button in the case of select-only:role=\"combobox\",aria-expanded,aria-haspopup=\"listbox\".",
            "Changed@restrictannotation of.slds-combobox__inputfrom.slds-combobox inputto.slds-combobox__form-element input, .slds-combobox__form-element button",
            "Changed@restrictannotation of.slds-combobox__input-valuefrom.slds-combobox inputto.slds-combobox__input"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added examples for Required, Required with Error states",
            "Added hover style for dates",
            "Addedaria-labelto provide the fullDD MM YYYYtext of the date"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed missing attributearia-current=\"date\"when today's date falls inside of a selected range"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelto provide the fullDD MM YYYYtext of the date"
          ]
        },
        {
          "type": "list",
          "items": ["Added hover style for dates"]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The Datetime Picker now uses the current combobox."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The Dynamic Menu now uses the current combobox."
          ]
        },
        {
          "type": "list",
          "items": [
            "Correctly position help text under the corresponding input when in horizontal layout."
          ]
        },
        {
          "type": "list",
          "items": [
            "Created new classslds-input_fauxto style read-only \"inputs\" where necessary for accessibility best practices, like combobox."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The List Builder now uses the current combobox.",
            "Updatedcomboboxto ARIA 1.2 compliance."
          ]
        },
        {
          "type": "list",
          "items": ["Updatedcomboboxto ARIA 1.2 compliance."]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The Picklist now uses the current combobox."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelattribute to the div with role ofprogressbarto meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelattribute to the div with role ofprogressbarto meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The Rich Text Editor now uses the current combobox.",
            "Updatedcomboboxto ARIA 1.2 compliance."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated checkbox toggle examples to \"Off/On\" and updated header text in alignment with text standards",
            "Switched the variant of the progress bar used in setup assistant from success to base."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed the usage of the deprecated combobox. The Timepicker now uses the current combobox."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelattribute to the div with role ofprogressbarto meet accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated selected text highlight color tokenCOLOR_BACKGROUND_SELECTIONfor better color contrast"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced checked radio group navigation item background token withBRAND_BACKGROUND_PRIMARYbranding token."
          ]
        },
        {
          "type": "list",
          "items": ["Addedaria-pressedattribute to Panel toggle button"]
        },
        {
          "type": "list",
          "items": [
            "Corrected accessibility information regarding the usage of theroleattribute."
          ]
        },
        {
          "type": "list",
          "items": ["Addedaria-pressedattribute to stateful Button variants"]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-label, and alternatively,aria-labelledbyto allow adding additional table context for screen readers"
          ]
        },
        {
          "type": "list",
          "items": ["Added annotations for Einstein themed cards"]
        },
        {
          "type": "list",
          "items": ["Changed thearia-livevalue fromassertivetopolite"]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-expandedattribute to menu triggers with value dependent on menu's open state"
          ]
        },
        {
          "type": "list",
          "items": [
            "Completed progress rings now usecolor-background-success-darkdesign token."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed Salesforce Sans as the default typeface and replaced it with OS-specific defaults.",
            "Updated many of our design tokens and other colors to utilize the new Salesforce Color System. For more information,read our article on Medium about this system."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Kinetic styles and demo functionality for Breadcrumbs"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updates to top bar:Changed the color of the border separators to$color-background-inverse.On:hoverand:focusfor.slds-builder-header__item-action:Changedbackground-colorto$color-background-inverseChangedcolorto$color-gray-1\"Back\" action moved to the left-hand side and visible text was removed\"Link\" renamed to \"Settings\" and moved to the right-hand side next to \"Help\"",
            "Changed the color of the border separators to$color-background-inverse.",
            "On:hoverand:focusfor.slds-builder-header__item-action:Changedbackground-colorto$color-background-inverseChangedcolorto$color-gray-1",
            "Changedbackground-colorto$color-background-inverse",
            "Changedcolorto$color-gray-1",
            "\"Back\" action moved to the left-hand side and visible text was removed",
            "\"Link\" renamed to \"Settings\" and moved to the right-hand side next to \"Help\""
          ]
        },
        {
          "type": "list",
          "items": [
            "Additions to toolbar:Icons for canvas settings and toggling a panelStatus text and alerts that convey status, warnings, and errorsPopovers for alertsTooltip for the \"Back\" action",
            "Icons for canvas settings and toggling a panel",
            "Status text and alerts that convey status, warnings, and errors",
            "Popovers for alerts",
            "Tooltip for the \"Back\" action",
            "New examples for \"Back\" action tooltip, status text, and alerts.",
            "Addedaria-expandedto dropdown item"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-button_icon-warningclass to properly style Warning state icons"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Kinetic styles and demo functionality for Button Base, Brand, Neutral, Inverse, Outline Brand, Destructive and Success"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedline-heightassignment in touch styles to use Styling Hook assignment of--sds-c-button-line-height."
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedflex-basistoautofor the drop zone label to fix a layout issue in IE11"
          ]
        },
        {
          "type": "list",
          "items": [
            "Responsive variant now grows to use up the available horizontal space."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added missing annotation for.slds-section__title-action-icon"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedproduct_quantity_rulesicon's color from light blue to salem green (#04844B)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed incorrect annotations for.slds-page-header__col-title,.slds-page-header__col-actions,.slds-page-header__col-meta,.slds-page-header__col-controls, and.slds-page-header__col-details."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a new element,.slds-panel__header-actions, within the panel header to hold secondary actions that affect the entire panel. You can find the close button within the new element.",
            "Added an example of the new secondary actions element that contains an overflow menu with actions.",
            "Added additional demo elements to thepanels for filteringexample: top bar with accompanying button icon (filterList) that toggles the panel with filtering content, two-column content layout, and panel toggling behavior.",
            "Addedaria-expandedandaria-controlsto the button that toggles the panel."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the icon in theopen as a drawerexample fromfilterListtotoggle_panel_left. The new icon better represents the action evoked by the button icon.",
            "Updated the icon indrilled-in stateexample that takes you back to the previous panel frombacktochevronleft. This update makes the icon consistent between drilled-in states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Base popoversFooter background is now explicitly set to$color-backgrounddesign tokenMovedslds-popover__headerintoslds-popover__bodyand added aMedia Objectwrapper to match prompt popover variantAdded variant with iconRemovedslds-popover__headerbottom borderAdded variant with badge above header",
            "Footer background is now explicitly set to$color-backgrounddesign token",
            "Movedslds-popover__headerintoslds-popover__bodyand added aMedia Objectwrapper to match prompt popover variant",
            "Added variant with icon",
            "Removedslds-popover__headerbottom border",
            "Added variant with badge above header",
            "Warning feedback stateFooter background color is now explicitly set to transparentBody is now indented to align with header",
            "Footer background color is now explicitly set to transparent",
            "Body is now indented to align with header",
            "Error feedback stateFooter background color is now explicitly set to transparentBody is now indented to align with header",
            "Footer background color is now explicitly set to transparent",
            "Body is now indented to align with header",
            "Prompt variantFooter top border changed to match default popover border color and width",
            "Footer top border changed to match default popover border color and width",
            "Walkthrough variantRemoved header background imageFooter background color is now explicitly set to transparent",
            "Removed header background image",
            "Footer background color is now explicitly set to transparent"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added light and dark Brand variants, including new selectors.slds-popover_brand, .slds-popover_brand-dark, .slds-popover_brand-top, .slds-popover_brand-left, .slds-popover_brand-bottom, .slds-popover_brand-right",
            "Added new Prompt branded variants",
            "Enabled styling hooks for popovers. See popovers' styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for Rich Text Editor. See Rich Text Editor's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "For indicating the selected item in the list,aria-selectedhas been replaced witharia-current=\"page\"."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added additional styling hooks. See tab's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted color of unsaved tab indicator asterisk to comply with accessibility color contrast rules for active tabs and tabs with notification.",
            "Removed whitebackground-colorfrom.slds-tabs_defaultto expose surface color of the tabs parent container.",
            "Thebackicon present in tabs on mobile has been replaced bychevronleft. This is an inherited change from panels and it makes the icon consistent between the drilled-in states."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed typo in CSS Class Overview table for .slds-datepicker__filter_month"
          ]
        },
        {
          "type": "list",
          "items": [
            "Corrected the syntax for various stylesheet annotations so that they will properly appear in the Overview of CSS Classes section for their respective blueprint.",
            "Updated to Icons v9.39.0 and added new icon design token colors"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Styling Hook for the background color of Accordion headings.",
            "Added Styling Hooks for default text color, as well as hover/focus states, of Accordion headings."
          ]
        },
        {
          "type": "list",
          "items": [
            "The Accordion heading button will now take up all available space, allowing for a larger hit target to toggle the Accordion functionality."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fix incorrect Styling Hook name for--sds-c-alert-text-color-warning."
          ]
        },
        {
          "type": "list",
          "items": ["Removed component level styling hooks for status states."]
        },
        {
          "type": "p",
          "text": "Refactored the component markup to function with or without theme utility classes."
        },
        {
          "type": "list",
          "items": [
            "Fixed issue with non-link text color in Builder Header menu dropdowns by adding default text colorAdded an example with an open menu to demonstrate this pattern",
            "Added an example with an open menu to demonstrate this pattern"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Styling Hook for box-shadow",
            "Added Styling Hook for block level padding"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed component-level styling hooks for disabled states. These will be handled at the global level.",
            "Removed--sds-c-button-inverse-color-border-focus."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for Cards. See Card's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for checkbox. See checkbox's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for checkbox toggle. See checkbox toggle's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-cell_action-modeclass for styling cells in Action mode"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted space between the form label and the information button icon for Mobile."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed hooks for modifying the status states of icons at the component level."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for Inputs. See Input's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added default text color to dropdown menus to fix issue with dropdowns inheriting font color from parent blueprints"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added styling hooks for text color that let you set thecolorfor the whole modal or a specific section.",
            "Added styling hooks for background color that let you set thebackground-colorfor the whole modal or a specific section."
          ]
        },
        {
          "type": "list",
          "items": ["Fixed incorrect styling hooks on heading"]
        },
        {
          "type": "list",
          "items": [
            "Fixed incorrect styling hooks on focus state, suffix is now using-focusvs-active."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled Styling Hooks for Radio Group. See Radio Group's Styling Hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased nesting styles for Rich Text Editor output from 3 levels to 5 levels deep."
          ]
        },
        {
          "type": "list",
          "items": ["Removed variant specific styling hooks for scoped tabs."]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for select. See select's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for slider. See slider's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added demobackground-colorto with-container and fixed-container examples"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for textarea. See textarea's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added--sds-c-toast-text-colorwhich allows you to customize the text color."
          ]
        },
        {
          "type": "list",
          "items": ["Changed checkmark vertical positioning"]
        },
        {
          "type": "list",
          "items": [
            "Revert compound form to its existing behavior of not wrapping to prevent unwanted side-effects in existing layouts."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed the issue with metatext not appearing disabled if the tree item was disabled."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-alert-color-text=>--sds-c-alert-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-avatar-initials-color-text=>--sds-c-avatar-initials-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-badge-color-text=>--sds-c-badge-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-button-color-text=>--sds-c-button-text-color."
          ]
        },
        {
          "type": "list",
          "items": ["Fixed incorrect styling hooks on footer."]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-pill-color-text=>--sds-c-pill-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-tabs-scoped-color-text=>--sds-c-tabs-scoped-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-tabs-item-color-text=>--sds-c-tabs-item-text-color."
          ]
        },
        {
          "type": "list",
          "items": [
            "Treat Styling Hooks targeting text color as an element, previously referred to as a property. e.g.--sds-c-tooltip-color-text=>--sds-c-tooltip-text-color."
          ]
        },
        {
          "type": "list",
          "items": ["Added icons synonym metadata to SLDS dist"]
        },
        {
          "type": "list",
          "items": [
            "In Summer â21, all BEM notation with double dashes will no longer be available in SLDS 2.13.0 and later versions. For your styles to continue working with SLDS 2.13.0 and later versions, replace--with_in your CSS. For more information see theSalesforce Winter `21 release notes.",
            "Updated @salesforce-ux/icons to 9.38.0",
            "Added proper font-size change to mobile demos on the site"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedbackgroundshorthand and set toinitialto recreate existing behavior that relied on the shorthand to apply initial values to unspecified values.",
            "Fixed issue where mobile text size wasn't accurately sized."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where mobile text size wasn't accurately sized."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed erroneous camelcasing ofautocompleteattribute.",
            "Small improvements to the UI text."
          ]
        },
        {
          "type": "list",
          "items": [
            "Keyboard interaction examples were only showing Mac-specific instructions (Cmd), changed to be more general (Cmd/Ctrl)"
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": [
            "Removed Mobile example under Stacked Alignment and Horizontal Alignment examples, as they did not conform to the specification."
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": ["slds-current-colorto restricted classes."]
        },
        {
          "type": "list",
          "items": [
            "RemovedXlinknamespace. It was deprecated in the SVG 2 specification."
          ]
        },
        {
          "type": "list",
          "items": [
            "For inline help example:Removed unnecessaryaria-labelledbyfrominput. Alabelwas already associated with theinput.Moved.slds-form-element__helpout of.slds-form-element__control, it is supposed to be a sibling in the markup structure.Addedaria-describedbytoinputwhich uses theidof the help message.",
            "Removed unnecessaryaria-labelledbyfrominput. Alabelwas already associated with theinput.",
            "Moved.slds-form-element__helpout of.slds-form-element__control, it is supposed to be a sibling in the markup structure.",
            "Addedaria-describedbytoinputwhich uses theidof the help message.",
            "Small improvements to the UI text."
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": [
            "Removed Mobile examples as they did not conform to the specification."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where mobile text size wasn't accurately sized.",
            "Small improvements to the UI text."
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": [
            "Removed Mobile examples as they did not conform to the specification."
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where mobile text size wasn't accurately sized."
          ]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": ["Small improvements to the UI text."]
        },
        {
          "type": "list",
          "items": [
            "Added opacity override for placeholder text in inputs for Firefox browser"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for accordion. See accordion's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated heading elements from h3 class=\"site-text-heading_medium slds-m-top_none\" to h2 class=\"site-text-heading_large\"."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for alert. See alert's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for avatar. See avatar's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for badge. See badge's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed inconsistent heights between variants when border isn't present."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for breadcrumb. See breadcrumb's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for button. See button's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "The assistive text for the listbox of pills has been moved out of the individual pills to remove repetition for users with screen readers."
          ]
        },
        {
          "type": "list",
          "items": [
            "Datetime Picker blueprints no longer use the deprecated variant.slds-form_compoundon its parent.slds-form. Instead, it now uses.slds-form-element_compoundon its parent.slds-form-element."
          ]
        },
        {
          "type": "list",
          "items": [
            "The compound form now wraps when the width of its parent container is smaller than the combined width of the form elements. This prevents the issue of input values becoming cutoff and unreadable due to shrinking compound form elements in a container with a small width.",
            "When.slds-form-elementis a child of.slds-form-element_compound, it now uses margins instead of padding for its horizontal spacing. This fixes the issue of dropdowns being incorrectly offset because the dropdown uses the extra space created by padding as its positioning reference."
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted color of unsaved tab indicator asterisk to comply with accessibility color contrast rules"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for icon. See icon's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "The assistive text for the listbox of pills has been moved out of the individual pills to remove repetition for users with screenreaders."
          ]
        },
        {
          "type": "list",
          "items": [
            "The assistive text for the listbox of pills has been moved out of the individual pills to remove repetition for users with screenreaders."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for modal. See modal's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": ["Removedrole=\"application\"fromslds-path__scroller."]
        },
        {
          "type": "list",
          "items": [
            "The assistive text for the listbox of pills has been moved out of the individual pills to remove repetition for users with screenreaders.",
            "Addressed layout inconsistencies for touch styles",
            "Clarified documentation around when linked pills can be used"
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for pill. See pill's styling hooks overview table for a full listing of the currently available hooks.",
            "Added example for Listbox of Pills in Group"
          ]
        },
        {
          "type": "list",
          "items": ["Removed redundantborder-radiuson.slds-pill:focus"]
        },
        {
          "type": "list",
          "items": [
            "Addressed issue where button icons in progress items were misaligned for mobile/touch"
          ]
        },
        {
          "type": "list",
          "items": ["Added sizing instructions to ensure a correct ratio."]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-describedby=\"error_01\"to the inputs to improve accessibility in the error state."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for scoped tab. See scoped tab's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for tab. See tab's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for toast. See toast's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Enabled styling hooks for tooltip. See tooltip's styling hooks overview table for a full listing of the currently available hooks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated blueprint examples from anchor links to more semantically correct buttons"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-disabledtotreeitemthat are disabled and updated text color to represent disabled state."
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecated the usage of.slds-is-disabledin favor of.slds-is-hiddento hide chevron icon, usearia-disabledinstead if you need to represent a disabled state."
          ]
        },
        {
          "type": "list",
          "items": [
            "Corrected various documentation typos and formatting in:components/app-launchercomponents/button-iconscomponents/global-headercomponents/global-navigationcomponents/lookupscomponents/menuscomponents/panelscomponents/picklistcomponents/popoverscomponents/progress-indicatorcomponents/promptcomponents/publisherscomponents/setup-assistantcomponents/spinnerscomponents/tabscomponents/tilescomponents/toastcomponents/treescomponents/vertical-tabs",
            "components/app-launcher",
            "components/button-icons",
            "components/global-header",
            "components/global-navigation",
            "components/lookups",
            "components/menus",
            "components/panels",
            "components/picklist",
            "components/popovers",
            "components/progress-indicator",
            "components/prompt",
            "components/publishers",
            "components/setup-assistant",
            "components/spinners",
            "components/tabs",
            "components/tiles",
            "components/toast",
            "components/trees",
            "components/vertical-tabs",
            "Fixed broken links in earlier release notes",
            "Updated Icons to 9.37.1"
          ]
        },
        {
          "type": "list",
          "items": ["Added assistive text for the logo."]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where radio buttons would not retain their shape and appeared squished."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed<span class=\"slds-assistive-text\">Current Selection:</span>from Listbox options",
            "Updated guidance documentation regarding the usage ofaria-selectedandaria-checked"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-checked=\"true\"to Listbox options when selected"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, fixed an issue with button icons being the incorrect height if using custom elements."
          ]
        },
        {
          "type": "list",
          "items": ["Updated Icons to 9.36.1"]
        },
        {
          "type": "list",
          "items": [
            "Updated styles for resize handle if final column is resizable."
          ]
        },
        {
          "type": "list",
          "items": ["Updated Icons to 9.35.0"]
        },
        {
          "type": "list",
          "items": [
            "Set the inverse button text color to 50% opacity when the button is disabled."
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedwhite-spaceproperty topre-lineinslds-cell-wrapfor cell content that has pre-formatted line breaks.",
            "Adjusted positioning for resize handle for better usability on touch devices, and made the handle visible in all cases"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added documentation and examples for wrapping, line clamping and truncating table cell content."
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where Chrome on Android was rendering misaligned text for date-related input types."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed the text color in form inputs for the Walkthrough variation."
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved an IE11 issue with positioning of the.slds-progress-ring__progresselement by setting more explicit position settings."
          ]
        },
        {
          "type": "list",
          "items": [
            "Set the blueprint recommendation to use a<circle>element instead of a<path>element when the completion of the progress circle is 100%. This change resolves an IE11 rendering issue with completed rings."
          ]
        },
        {
          "type": "list",
          "items": ["Added a Small variant to the visual picker"]
        },
        {
          "type": "list",
          "items": [
            "Changedwhite-spaceproperty topre-lineinslds-line-clampin consideration of content that has pre-formatted line breaks."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an X-Small modifier that truncates text after two lines."
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted positioning forslds-th__action-buttonfor better vertical alignment and made additional\nchanges to support appearance in the touch implementation"
          ]
        },
        {
          "type": "list",
          "items": [
            "Moved font-size declaration on touch devices to the touch CSS file"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adapted line height on accordion buttons to function better with multi-line instances."
          ]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": [
            "Updated height and width dimensions on touch version ofslds-th__action-button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved incorrect spacing when nested in a data table by increasing specificity of certainslds-datepickerspecific CSS selectors"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replacedslds-disabled-textwith specific selectorslds-day_adjacent-monthfor dates outside of current month, so that they will be selectable but with a different text color that meets accessibility requirements."
          ]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Sizing classes are now respected in mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": [
            "Replacedslds-truncatewith specific selectorslds-accordion__summary-contentin Accordion title so content will only truncate for larger screens."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added examples for communicating Success, Warning and Error states."
          ]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": ["Added documentation and examples for mobile/touch context"]
        },
        {
          "type": "list",
          "items": [
            "Added examples for Informational, Success, Warning and Error states"
          ]
        },
        {
          "type": "list",
          "items": [
            "Moved thewill-change: transformrule from the dots (pseudo-elements) to their parents (.slds-spinner, .slds-spinner__dot-â¦) to fix visual cropping of dots"
          ]
        },
        {
          "type": "list",
          "items": [
            "Corrected class name in Progress Bar Circular example",
            "Corrected various documentation typos and formatting in:components/activity-timelinecomponents/alertcomponents/app-launchercomponents/avatar-groupcomponents/breadcrumbscomponents/builder-headercomponents/button-groupscomponents/button-iconscomponents/buttonscomponents/cardscomponents/carouselcomponents/chatcomponents/color-pickercomponents/comboboxcomponents/data-tablescomponents/datepickerscomponents/datetime-pickercomponents/drop-zonecomponents/dueling-picklistcomponents/dynamic-menucomponents/expandable-sectioncomponents/expressioncomponents/file-selectorcomponents/form-elementcomponents/global-headercomponents/global-navigationcomponents/iconscomponents/illustrationcomponents/inputcomponents/menuscomponents/page-headerscomponents/panelscomponents/pathcomponents/picklistcomponents/pillscomponents/progress-indicatorcomponents/progress-ringcomponents/promptcomponents/publisherscomponents/scoped-notificationscomponents/setup-assistantcomponents/tabscomponents/treesutilities/bordersutilities/description-listutilities/line-clamp/docs.mdx",
            "components/activity-timeline",
            "components/alert",
            "components/app-launcher",
            "components/avatar-group",
            "components/breadcrumbs",
            "components/builder-header",
            "components/button-groups",
            "components/button-icons",
            "components/buttons",
            "components/cards",
            "components/carousel",
            "components/chat",
            "components/color-picker",
            "components/combobox",
            "components/data-tables",
            "components/datepickers",
            "components/datetime-picker",
            "components/drop-zone",
            "components/dueling-picklist",
            "components/dynamic-menu",
            "components/expandable-section",
            "components/expression",
            "components/file-selector",
            "components/form-element",
            "components/global-header",
            "components/global-navigation",
            "components/icons",
            "components/illustration",
            "components/input",
            "components/menus",
            "components/page-headers",
            "components/panels",
            "components/path",
            "components/picklist",
            "components/pills",
            "components/progress-indicator",
            "components/progress-ring",
            "components/prompt",
            "components/publishers",
            "components/scoped-notifications",
            "components/setup-assistant",
            "components/tabs",
            "components/trees",
            "utilities/borders",
            "utilities/description-list",
            "utilities/line-clamp/docs.mdx"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedslds-is-mobilescoping class. Touch related styles will now be applied automatically via a feature detection media query.",
            "Blueprints now use specific_touch.scssfiles for touch context styling."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated node dependencies to remove vulnerabilities.",
            "Updated project readme to recommend use of the Storybook development environment."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added-mozand-webkitprefixes toappearance : nonerules",
            "Generate a sanitized version of SLDS in.distthat does not contain--BEM notation for modifiers, removes deprecated code, and only imports support Lightning Web Components."
          ]
        },
        {
          "type": "list",
          "items": [
            "Setaccess:globalto the following tokens:brandPrimarybrandPrimaryActivebrandPrimaryTransparentbrandLightbrandLightActivebrandDarkbrandDarkActivebrandAccessiblebrandAccessibleActivebrandDisabledbrandContrastbrandContrastActivebrandBackgroundPrimarybrandBackgroundDarkbrandTextLinkbrandTextLinkActive",
            "brandPrimary",
            "brandPrimaryActive",
            "brandPrimaryTransparent",
            "brandLight",
            "brandLightActive",
            "brandDark",
            "brandDarkActive",
            "brandAccessible",
            "brandAccessibleActive",
            "brandDisabled",
            "brandContrast",
            "brandContrastActive",
            "brandBackgroundPrimary",
            "brandBackgroundDark",
            "brandTextLink",
            "brandTextLinkActive",
            "Primitive tokens now default to our warm gray color palettePALETTE_GRAY_1:#ffffffPALETTE_GRAY_2:#fafaf9PALETTE_GRAY_3:#f3f2f2PALETTE_GRAY_4:#ecebeaPALETTE_GRAY_5:#dddbdaPALETTE_GRAY_6:#c9c7c5PALETTE_GRAY_7:#b0adabPALETTE_GRAY_8:#969492PALETTE_GRAY_9:#706e6bPALETTE_GRAY_10:#514f4dPALETTE_GRAY_11:#3e3e3cPALETTE_GRAY_12:#2B2826PALETTE_GRAY_13:#080707",
            "PALETTE_GRAY_1:#ffffff",
            "PALETTE_GRAY_2:#fafaf9",
            "PALETTE_GRAY_3:#f3f2f2",
            "PALETTE_GRAY_4:#ecebea",
            "PALETTE_GRAY_5:#dddbda",
            "PALETTE_GRAY_6:#c9c7c5",
            "PALETTE_GRAY_7:#b0adab",
            "PALETTE_GRAY_8:#969492",
            "PALETTE_GRAY_9:#706e6b",
            "PALETTE_GRAY_10:#514f4d",
            "PALETTE_GRAY_11:#3e3e3c",
            "PALETTE_GRAY_12:#2B2826",
            "PALETTE_GRAY_13:#080707"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addeddisplay: inline-flexandalign-items: centerto badge to center content vertically"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, update the line-height token of.slds-buttonto use the touch-specific token$height-tappable(2.75rem) which is a system-wide touch token instead of using a component-specific token."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addeddisplay: flexto.slds-card__header-titleto enable truncation on contained link that already hasslds-truncate"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed an issue where some message text containers would have a width equal to the message meta even though the container contained less text and should have had a smaller width."
          ]
        },
        {
          "type": "list",
          "items": [
            "Introduced new base blueprint for the checkbox button called.slds-checkbox-buttonwhich improves icon customization, state handling, and blueprint composition."
          ]
        },
        {
          "type": "list",
          "items": [
            ".slds-checkbox_add-buttonhas been deprecated in favor of.slds-checkbox-button(see 'Added' above)",
            "Documentation has been updated to reflect the new.slds-checkbox-buttonblueprint",
            "Updated the background color of the checkbox button's selected state from$color-background-successto$color-brand-darkersince a checkbox button is meant to communicate a selected state, not success."
          ]
        },
        {
          "type": "list",
          "items": [
            "For mobile devices, checkbox button groups stack vertically to account for the limited horizontal space of mobile screens."
          ]
        },
        {
          "type": "list",
          "items": [
            "The popout indicator icon now positions itself correctly in the right-to-left context."
          ]
        },
        {
          "type": "list",
          "items": [
            "List Builder now uses the new.slds-checkbox-buttoninstead of the deprecated.slds-checkbox_add-button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Grouped Lookup wrapping<div>attributes:role=\"combobox\"aria-haspopup=\"listbox\"aria-expanded=\"true\"",
            "role=\"combobox\"",
            "aria-haspopup=\"listbox\"",
            "aria-expanded=\"true\"",
            "Grouped Lookup<input>attributearia-controlsset to id of adjacent table"
          ]
        },
        {
          "type": "list",
          "items": ["Grouped Lookup<input>rolefromcomboboxtotextbox"]
        },
        {
          "type": "list",
          "items": [
            "For mobile devices, radio button groups stack vertically to account for the limited horizontal space of mobile screens."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated progress examples to useslds-mediaaroundslds-media__figureandslds-media__bodyto fix icon alignment."
          ]
        },
        {
          "type": "list",
          "items": [
            "For mobile devices:Increased the tap target size of the slider thumb to$height-tappble (2rem)for increased usability.Minor layout and spacing adjustments to account for the larger slider thumb",
            "Increased the tap target size of the slider thumb to$height-tappble (2rem)for increased usability.",
            "Minor layout and spacing adjustments to account for the larger slider thumb"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Removed the focus styling from the button nested within.slds-tabs-mobile__itemso the text color does not change on press for mobile (background color still changes on press)",
            "Removed the focus styling from the button nested within.slds-tabs-mobile__itemso the text color does not change on press for mobile (background color still changes on press)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added the Line Clamp utility with four modifier options:.slds-line-clamp- clamps at 3 lines, value provided byline-clamptoken..slds-line-clamp_small- clamps at 3 lines.slds-line-clamp_medium- clamps at 5 lines.slds-line-clamp_large- clamps at 7 lines",
            ".slds-line-clamp- clamps at 3 lines, value provided byline-clamptoken.",
            ".slds-line-clamp_small- clamps at 3 lines",
            ".slds-line-clamp_medium- clamps at 5 lines",
            ".slds-line-clamp_large- clamps at 7 lines"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where Webkit-based browsers lost their platform-native styling",
            "Resolved issue with certain cases where an input's height would change after a value was defined"
          ]
        },
        {
          "type": "list",
          "items": [
            "All mobile/touch enhancements are now scopedslds-is-mobile. The scoping class should be applied to thehtml/bodyelement."
          ]
        },
        {
          "type": "list",
          "items": [
            "Update color swatch to latest token values",
            "Removed support for ASE color swatch format"
          ]
        },
        {
          "type": "list",
          "items": [
            "Global tokens have been removed from this repository and are installed as a dependency from https://www.npmjs.com/package/@salesforce-ux/design-system-primitive-tokens"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added right-to-left specific selector toslds-accordion__summary-action-iconto allow the icon to rotate in the proper direction in right-to-left languages."
          ]
        },
        {
          "type": "list",
          "items": [
            "App Launcher did not use brand tokens for:hoverand:activestates",
            ".slds-app-launcher__tilenow uses$brand-accessiblefor its:hoverstate and$brand-accessible-activefor its:activestate"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, the visual height of the button group is increased for an improved tap target size. This change comes fromslds-buttonwhich is a child component of button-group."
          ]
        },
        {
          "type": "list",
          "items": [
            "Center contents ofslds-button_iconwith change ofdisplay: inline-flextoslds-button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed poor color contrast of inverse buttons on hover and focus"
          ]
        },
        {
          "type": "list",
          "items": [
            "Modify display ofslds-buttontoinline-flex",
            "Center contents of contained Buttons with change ofdisplay: inline-flextoslds-button",
            "justify-content: centeris now applied to the stretch variant.slds-button_stretchto ensure centered text afterinline-flexwas added toslds-button",
            "For touch devices:Increase the line-height (which affects the overall visual height) to$button-line-height-touch(2.65rem)Set the size of.slds-button__iconto$square-icon-medium-content(1rem)Boldened Button labels",
            "Increase the line-height (which affects the overall visual height) to$button-line-height-touch(2.65rem)",
            "Set the size of.slds-button__iconto$square-icon-medium-content(1rem)",
            "Boldened Button labels"
          ]
        },
        {
          "type": "list",
          "items": [
            "Visually remove border and set border-radius to zero for touch devices",
            "For touch devices:Set font size of.slds-card__header-titleto$var-font-size-6(1.125rem)Make.slds-card__header-titlealways bold whether it contains a link or not",
            "Set font size of.slds-card__header-titleto$var-font-size-6(1.125rem)",
            "Make.slds-card__header-titlealways bold whether it contains a link or not"
          ]
        },
        {
          "type": "list",
          "items": [
            "Horizontal rules have been removed from event messages for an improved chat experience,.slds-chat-event__ruleis no longer used and marked as deprecated",
            "Bookends now span full width which allows the bookend borders to be visually flush with their container.slds-chat-list",
            "Horizontal padding added to.slds-chat-bookendto compensate for the negative margins used to make the bookend span full width"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Increase size of faux checkbox to$square-tappable-x-small(1.5rem)Increase tap target size of.slds-checkbox__labelto$height-tappable(2.75rem) and center with flex propertiesIncreasefont-sizeof inline label to$font-size-5(1rem)Increase size of.slds-checkbox_standaloneto$height-tappable(2.75rem) for consistency with tap target size increasesWithin.slds-checkbox_standalone, increase the tap target size of the checkbox input",
            "Increase size of faux checkbox to$square-tappable-x-small(1.5rem)",
            "Increase tap target size of.slds-checkbox__labelto$height-tappable(2.75rem) and center with flex properties",
            "Increasefont-sizeof inline label to$font-size-5(1rem)",
            "Increase size of.slds-checkbox_standaloneto$height-tappable(2.75rem) for consistency with tap target size increases",
            "Within.slds-checkbox_standalone, increase the tap target size of the checkbox input",
            "Ensure the checkbox input is hidden withopacity: 0"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, increase size of checkbox-button to$square-tappable(2.75rem) and center children with flex properties"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, increase tap target size of.slds-checkbox_buttonto$height-tappable(2.75rem)"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Changefont-sizeof label text to$font-size-5(1rem)Increasefont-sizeof.slds-checkbox_faux_containerto$font-size-2(0.75rem)",
            "Changefont-sizeof label text to$font-size-5(1rem)",
            "Increasefont-sizeof.slds-checkbox_faux_containerto$font-size-2(0.75rem)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedtext-transform: uppercasefrom default and custom tabs"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Increase font-size and height of combobox heightIncrease height of a listbox option",
            "Increase font-size and height of combobox height",
            "Increase height of a listbox option",
            "Changed the size of icon in a plain listbox to inherit the size of thebody",
            "Modified the spacing between pills when inside the context of a selection group"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolve issue with deprecated inline listbox not displaying correctly when multiple pills forces the container to grow",
            "Resolve issue where deprecated inline listbox was not the same height as other inputs"
          ]
        },
        {
          "type": "list",
          "items": ["Created new page for the Counter version of Input."]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-th__action-buttonalignment to usemargin-topinstead oftransform: translateY"
          ]
        },
        {
          "type": "list",
          "items": [
            "Locked items now havearia-disabled=\"true\"to improve accessibility and help indicate the locked item's immutable behavior within the listbox.",
            "Styling of locked items now inherits from.slds-listbox__option[aria-disabled=\"true\"]and properly displays a disabled styling",
            "Removed.slds-icon-text-defaultfrom.slds-iconand replaced it with.slds-current-coloron the icon's container.slds-icon_containerso the icon's color matches the locked item's disabled color",
            "Removeddraggableattribute from locked items as they are not draggable in the locked state"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, the line-height is increased for a larger tap target size. This change comes fromslds-buttonwhich is used as a child component in file-selector."
          ]
        },
        {
          "type": "list",
          "items": [
            "Scoped the eyeball hover effect to the figure link only.",
            "Addeddisplayandoverflowcss rules to allow for text truncation on.slds-file__text."
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Set the amount of space created for the edit icon to$square-tappable(2.75rem) which aligns with touch specific sizingIncrease the tap target size of.slds-form-element__labelto$height-tappable-small(2rem), center with flex, and increasefont-sizeto$font-size-4(0.875rem)Set the tap target height of button-icons to$height-tappable-small(2rem) when inline with label textIncrease the font size of.slds-form-element__staticto$font-size-5(1rem)Within.slds-form-element_readonly, increase the size of.slds-iconto$square-tappable-x-small(1.5rem) and increase the height of.slds-form-element__controlto$height-tappable(2.75rem) which aligns.slds-form-element_readonly's touch height to other form elementsRemove themin-heightfrom.slds-form-element_readonly .slds-form-element__controlfor denser read-only forms",
            "Set the amount of space created for the edit icon to$square-tappable(2.75rem) which aligns with touch specific sizing",
            "Increase the tap target size of.slds-form-element__labelto$height-tappable-small(2rem), center with flex, and increasefont-sizeto$font-size-4(0.875rem)",
            "Set the tap target height of button-icons to$height-tappable-small(2rem) when inline with label text",
            "Increase the font size of.slds-form-element__staticto$font-size-5(1rem)",
            "Within.slds-form-element_readonly, increase the size of.slds-iconto$square-tappable-x-small(1.5rem) and increase the height of.slds-form-element__controlto$height-tappable(2.75rem) which aligns.slds-form-element_readonly's touch height to other form elements",
            "Remove themin-heightfrom.slds-form-element_readonly .slds-form-element__controlfor denser read-only forms"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated documentation to state that iconLeft and fixed text labels are incompatible.",
            "When aninputhas an error,aria-invalid=\"true\"has been added to theinputelement"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed defaultbox-shadowoninputsfor Webkit",
            "Added ltr declarations onurl,tel, andemailtype inputs to prevent rtl adjustments from being inherited (these input types should always render ltr)",
            "For touch devices:Increase the line-height to$height-tappable(2.75rem) for an improved tap targetFor read-only inputs, increase the font size to$font-size-5(1rem) for consistency with the font sizes of other inputsPositioning of icons inside of inputs have been tweaked",
            "Increase the line-height to$height-tappable(2.75rem) for an improved tap target",
            "For read-only inputs, increase the font size to$font-size-5(1rem) for consistency with the font sizes of other inputs",
            "Positioning of icons inside of inputs have been tweaked"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Adjusted padding around mapRemoved height restriction on.slds-has-coordinatesto prevent internal scrolling of long listsIncreased font size of.slds-coordinates__title",
            "Adjusted padding around map",
            "Removed height restriction on.slds-has-coordinatesto prevent internal scrolling of long lists",
            "Increased font size of.slds-coordinates__title"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Set tap target size of menu row item to$height-tappable(2.75rem)Remove padding from.slds-dropdownafter increased tap target size of menu row itemsSetfont-sizeof menu to$font-size-5(1rem)",
            "Set tap target size of menu row item to$height-tappable(2.75rem)",
            "Remove padding from.slds-dropdownafter increased tap target size of menu row items",
            "Setfont-sizeof menu to$font-size-5(1rem)",
            "Removefont-sizedeclaration fromslds-dropdown__headerto inheritfont-sizefrombodyelement",
            "Update.slds-dropdown_fluidto have amin-widthset to$size-x-small(12rem) to prevent menus from being unreadable when associated with inputs that have a small width"
          ]
        },
        {
          "type": "list",
          "items": ["Added explicitright: autotoslds-dropdown_left"]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-modal_smallwidth to percentage-based to address the disparity of size relationship betweenslds-modal_smalland other sized modalsslds-modal_mediumandslds-modal_large)",
            "Deprecated use ofslds-text-heading_mediumutility class on Modal title, added classslds-modal__titleto declare styles for the Modal title.",
            "For touch devices:Set font weight of Modal title to$font-weight-boldSet tap target size of the Modal close button to$height-tappable(2.75rem)",
            "Set font weight of Modal title to$font-weight-bold",
            "Set tap target size of the Modal close button to$height-tappable(2.75rem)"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices, increased the height and tap target size of the path component to$height-tappable(2.75rem)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed text disappearing when peaking between stage in Safari"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added.slds-picklist input[readonly]selector to fix styling of deprecated markup"
          ]
        },
        {
          "type": "list",
          "items": ["Migrated picklist HTML to use non-deprecated combobox"]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Increase tap target height of.slds-pillto$height-tappable-small(2rem) and change horizontal padding to$spacing-small(0.75rem)Update spacing between pills to$spacing-xx-small(0.25rem)Set padding of pill container to$spacing-xx-small(0.25rem)Setfont-sizeof.slds-pill__labelto$font-size-4(0.875rem)Update the padding of.slds-pill__actionAdjust the positioning of the icon inside a pill after padding updates",
            "Increase tap target height of.slds-pillto$height-tappable-small(2rem) and change horizontal padding to$spacing-small(0.75rem)",
            "Update spacing between pills to$spacing-xx-small(0.25rem)",
            "Set padding of pill container to$spacing-xx-small(0.25rem)",
            "Setfont-sizeof.slds-pill__labelto$font-size-4(0.875rem)",
            "Update the padding of.slds-pill__action",
            "Adjust the positioning of the icon inside a pill after padding updates"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a new 'prompt' variant of popover useful for showing non-blocking messages needing interaction.",
            "Added@noflipannotation to left and right nubbin selectors."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated how the vertical variant handles the layout of its indicators so pixel nudging becomes deprecated (e.x.margin-left: 1pxon.slds-progress__item.slds-is-completed .slds-progress__marker_icon)",
            "For touch devices:Increased tap target size of contained.slds-buttonto a height equal to$height-tappable(2.75rem) using:beforepseudo elementIncreased icon and marker size to$square-tappable-xx-small(1.25rem)For vertical variant, increased font size to$font-size-4(0.875rem)",
            "Increased tap target size of contained.slds-buttonto a height equal to$height-tappable(2.75rem) using:beforepseudo element",
            "Increased icon and marker size to$square-tappable-xx-small(1.25rem)",
            "For vertical variant, increased font size to$font-size-4(0.875rem)"
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Increase tap size of.slds-radio__labelto$height-tappable(2.75rem)Increase the size of the faux radio element to$square-tappable-x-small(1.5rem)Let the label text inherit itsfont-sizefrom the body",
            "Increase tap size of.slds-radio__labelto$height-tappable(2.75rem)",
            "Increase the size of the faux radio element to$square-tappable-x-small(1.5rem)",
            "Let the label text inherit itsfont-sizefrom the body"
          ]
        },
        {
          "type": "list",
          "items": [
            "Created Toolbar Only variant for use without attached textarea for touch devices"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed size utility classes on combobox/selects in toolbar for component-specific classes (slds-rich-text-editor__select_x-smallandslds-rich-text-editor__select_xx-small)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Revised keyframes and transform rules to fix spinner CPU / rendering performance issues."
          ]
        },
        {
          "type": "list",
          "items": [
            "For touch devices:Changed the text color of.slds-tabs-mobile__itemto Gray Color 12Removed the active color from the button nested within.slds-tabs-mobile__itemso the text color does not change on press (background color still changes on press)",
            "Changed the text color of.slds-tabs-mobile__itemto Gray Color 12",
            "Removed the active color from the button nested within.slds-tabs-mobile__itemso the text color does not change on press (background color still changes on press)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added right-to-left specific selector toslds-tree__itemto place thebox-shadowin the correct location in right-to-left languages.",
            "Added right-to-left specific selector toslds-tree__item slds-button__iconto allow the icon to rotate in the proper direction in right-to-left languages."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added right-to-left specific selector toslds-nav-vertical__action_overflow slds-button__iconto allow the icon to rotate in the proper direction in right-to-left languages.",
            "Added right-to-left specific selector toslds-nav-vertical__actionto place thebox-shadowin the correct location in right-to-left languages."
          ]
        },
        {
          "type": "list",
          "items": ["Added text treatments for<ins>and<del>"]
        },
        {
          "type": "list",
          "items": [
            "Moved the FormElement from inside the summary-input div to wrapped around the entire summary component",
            "Moving the FormElement component gives the label the classslds-form-element__label",
            "Moving the FormElement component wraps the button as well as the input in theslds-form-element__controldiv",
            "Relaxed the restrictions to allow for nesting the label and inputs an additional level"
          ]
        },
        {
          "type": "list",
          "items": [
            "Revertfont-sizeof text utilities back to their original state for touch devices"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixfont-sizeofbodyto adjust when on a touch-enabled device"
          ]
        },
        {
          "type": "list",
          "items": ["Moved all components to mdx documentation"]
        },
        {
          "type": "list",
          "items": ["Fix import statement for VisualForce specific styles"]
        },
        {
          "type": "list",
          "items": [
            "Standard SetACTIONS_AND_BUTTONSLETTERHEADINVOCABLE_ACTIONSHIFT_TYPESHIFTCATEGORYCATALOGVISIT_TEMPLATESINSTORE_LOCATIONSSTORE_GROUPVISUALFORCE_PAGEJAVASCRIPT_BUTTONSSALES_CADENCE_TARGET",
            "ACTIONS_AND_BUTTONS",
            "LETTERHEAD",
            "INVOCABLE_ACTION",
            "SHIFT_TYPE",
            "SHIFT",
            "CATEGORY",
            "CATALOG",
            "VISIT_TEMPLATES",
            "INSTORE_LOCATIONS",
            "STORE_GROUP",
            "VISUALFORCE_PAGE",
            "JAVASCRIPT_BUTTONS",
            "SALES_CADENCE_TARGET"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replacedaria-hiddenwith the HTML5hiddenattribute on closedslds-accordion__sections to hide content from both screen readers and browsers."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where page type content was not being truncatedAddedslds-has-flexi-truncatetoslds-builder-header__itemelementAdded<span class=\"slds-truncate\" title=\"...\">inside of<h1 class=\"site-text-heading_xx-large\" class=\"slds-builder-header__item-label\">",
            "Addedslds-has-flexi-truncatetoslds-builder-header__itemelement",
            "Added<span class=\"slds-truncate\" title=\"...\">inside of<h1 class=\"site-text-heading_xx-large\" class=\"slds-builder-header__item-label\">"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added @noflip annotation for correct alignment in RTL languages"
          ]
        },
        {
          "type": "list",
          "items": ["Added styling for disabled listbox options"]
        },
        {
          "type": "list",
          "items": [
            "Scrollbar not visible in narrow width containersslds-dueling-list__optionsis no longer set to a fixedmax-widthand instead is limited to 100%",
            "slds-dueling-list__optionsis no longer set to a fixedmax-widthand instead is limited to 100%"
          ]
        },
        {
          "type": "list",
          "items": [
            "Icon modifier classslds-icon_flipto horizontally flip icons."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-path__trigger-coaching-contentto create a full width coaching toggle in small regions."
          ]
        },
        {
          "type": "list",
          "items": [
            "Padding has been removed fromslds-path__trackto fix display issues when the Path is nested inside of a Card; of which is it's default state.",
            "Modified to be mobile first and responsive.",
            "Changed border radius to make circle and pill shaped buttons to square and rectangular shape.",
            "Removed horizontal rule under coaching title areas"
          ]
        },
        {
          "type": "list",
          "items": ["Flipped chevrons for RTL languages"]
        },
        {
          "type": "list",
          "items": [
            "Replaced active navigation item background token withBRAND_PRIMARY_TRANSPARENT_10branding token."
          ]
        },
        {
          "type": "list",
          "items": ["Adjusted typographic styling for breadcrumb items."]
        },
        {
          "type": "list",
          "items": [
            "Adjusted pseudo elements to allow click events to pass through"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where a navigation item would lose its background color when active and/or hovered."
          ]
        },
        {
          "type": "list",
          "items": ["Removed animation when invoking an active tab"]
        },
        {
          "type": "list",
          "items": [
            "Adjustedz-indexfor hover and focus state to not overlap modal overlays and the global header."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed collapsing issue whenslds-assistive-textwould be applied toslds-card__header"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where left-aligned checkbox labels would become squished"
          ]
        },
        {
          "type": "list",
          "items": ["IE11: Layout issues when in a modal"]
        },
        {
          "type": "list",
          "items": [
            "Fixed vertical alignment ofslds-welcome-mat__info-contentin IE11."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Accordion title to respond to user's densification settings."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-button_icon-smallto the close button on alerts to fix the sizing of the click target.",
            "Improved the contrast for focus and hover states on links and buttons in alerts"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a new blueprint and docs for Avatar Group component that is used for communicating to users that more than one person is associated with an item."
          ]
        },
        {
          "type": "list",
          "items": [
            "Examples for all color variants with left and right aligned placement.",
            "Wrappingslds-badge__iconelement to position and color icons."
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased font size to 12px, applied bold font weight, and removed uppercase styling in.slds-badge."
          ]
        },
        {
          "type": "list",
          "items": ["Added bold font weight to '.slds-breadcrumb__item`."]
        },
        {
          "type": "list",
          "items": ["Removed.slds-text-title_capsfrom breadcrumb list item."]
        },
        {
          "type": "list",
          "items": [
            "Added the classesslds-button_first,slds-button_middle, andslds-button_lastthat targets the position of each button inside of a button group"
          ]
        },
        {
          "type": "list",
          "items": ["Added support for disabled stateful button icons"]
        },
        {
          "type": "list",
          "items": [
            "New Dual Stateful variation, which acts similar to aToggle Button, by using theslds-button_dual-statefulclass.This variation toggles between the styling of a neutral button and a brand button.",
            "This variation toggles between the styling of a neutral button and a brand button.",
            "Addedslds-button_stretchmodifier for adjusting any style button to take 100% width of its container",
            "Added examples of links that look like buttons (to be used sparingly)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the disabled styling for the success, destructive, and outline brand buttons to be consistent across variants"
          ]
        },
        {
          "type": "list",
          "items": ["Prevented hover styling on success buttons when disabled"]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-hidden=\"true\"to the Avatar for inbound chat messages to avoid duplication of the user's name for screen reader users"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added unchecked image based checkbox exampleview mode checkbox - unchecked",
            "Added checked image based checkbox exampleview mode checkbox - checked"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-listbox__option-headerto increase font size to 14px, and apply bold font weight, on listbox option headers.",
            "Added a new variant for combobox that uses a dialog for the dropdown for situations like multi-selection"
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom listbox option headers"]
        },
        {
          "type": "list",
          "items": ["Added bold font weight tothelements within table headers."]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom table headers."]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-dynamic-menu__headerto increase font size to 14px and apply bold font weight."
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom dynamic menu headers."]
        },
        {
          "type": "list",
          "items": [
            "Alignedhoverandfocusstates to have matching stylesAdded \"Preview:\" as accessible text via theslds-assistive-textutility.",
            "Added \"Preview:\" as accessible text via theslds-assistive-textutility."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added form classes for rows and columns,slds-form__rowandslds-form__item",
            "Addedslds-form-element_stackedto manage stacked form elements",
            "Addedslds-form-element_horizontalto manage horizontal form elements",
            "Addedslds-is-editedclass to indicate if a form element has been edited but not saved",
            "Addedslds-form-element_undoto wrap the undo button icon when a form element has been edited but not saved",
            "Added support for single column horizontal form elements withslds-form-element_1-col, used to re-distribute the ratio of label to control",
            "Addedslds-form-element_compoundto manage compound form elements",
            "Addedslds-form-element_addressfor address specific compound form elements",
            "Added image based checkbox to record form"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added spacing aroundslds-form-elementdepending on densification settings",
            "Form labels will now hyphenate when a word with no spaces exceeds the available space of the label container"
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecatedslds-form_stackedforslds-form-element_stacked",
            "Deprecatedslds-form_horizontalforslds-form-element_horizontal",
            "Deprecatedslds-form_compoundforslds-form-element_compound"
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom menu headers."]
        },
        {
          "type": "list",
          "items": [
            "Tabbed Navigation Bar can now show 3 different statuses to alert users - error, success, and warning"
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom menu headers."]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue whereslds-input__icon_leftand.slds-input__iconelements were positioned over labels when in horizontal form elements"
          ]
        },
        {
          "type": "list",
          "items": [
            "3 levels of status for menu items to alert the user - error, success, and warning"
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased font size to 14px applied bold font weight inslds-dropdown__header."
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom menu sub headers."]
        },
        {
          "type": "list",
          "items": [
            "Update padding forslds-page-headerto use directionally aware variable spacing tokens.",
            "Update Record Home margins onslds-page-header__detail-rowto correctly use directionally aware variable spacing tokens."
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased font size to 14px, applied bold font weight, and removed uppercase styling inslds-path__coach-title."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-listbox__option-headerto increase font size to 14px, and apply bold font weight, on listbox option headers."
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom listbox option headers."]
        },
        {
          "type": "list",
          "items": [
            "Improved the contrast for focus and hover states on the close button."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-popover_panel__labelto increase panel label font size to 14px and apply bold font weight.",
            "Addedslds-popover__footer_formto center align content and add a background for footers of form popovers."
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom panel labels."]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom wizard labels."]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-container_fluidto the div containing a step's title and content in order to display the Setup Assistant properly in IE11"
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased font size to 14px, applied bold font weight, and updated line-height inslds-split-view__list-header."
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capssplit view list headers."]
        },
        {
          "type": "list",
          "items": [
            "Added examples of icon use in default tabs",
            "Subtabs can now show 3 different statuses to alert users - error, success, and warning"
          ]
        },
        {
          "type": "list",
          "items": ["Removedslds-text-title_capsfrom scrolling tab items."]
        },
        {
          "type": "list",
          "items": [
            "Improved the contrast for focus and hover states on links and buttons in toasts"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added examples for tooltip triggered by links, buttons, and inputs"
          ]
        },
        {
          "type": "list",
          "items": [
            "Two new examples of trees; filterable and filtered trees, with a search input. These show how you can use an input to filter the contents of a large tree and highlight the search term in matching items"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted the alignment of the tree item text and chevron to be less reliant on button line height"
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased font size to 16px and applied bold font weight toslds-nav-vertical__title.",
            "Increased left padding inslds-nav-vertical__action.",
            "Changed background color of the selectedslds-nav-vertical__itemelement in the shaded background example to be white.",
            "Moved thearia-describedbyattribute from the individual navigation<a />links to the list<ul>."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedslds-text-title_capsfrom vertical navigation titles."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added examples of icons in vertical tabs",
            "Added examples of badges in vertical tabs",
            "Added new classes to support icons and badges,slds-vertical-tabs__left-iconandslds-vertical-tabs__right-icon"
          ]
        },
        {
          "type": "list",
          "items": [
            "Splash variant for one-time interstitial purposes",
            "Info-only variant for informational purposes",
            "slds-modal-smallto size Welcome Mat modal",
            "slds-welcome-mat_info-onlycan now set theslds-welcome-mat__tilessection to \"info only\" mode.",
            "Markup structure so thatslds-welcome-matandslds-welcome-mat__contentare now withinslds-modal__content"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedslds-welcome-matfromslds-modal",
            "Removedslds-welcome-mat__contentfromslds-modal__content",
            "Movedslds-gridfromslds-modal__contenttoslds-welcome-mat__content"
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecated.slds-welcome-mat .slds-modal-containerselector for.slds-modal-smallto be applied toslds-modal. To upgrade existing welcome mat, inslds-modal, replaceslds-welcome-matwithslds-modal_small, and also removeslds-welcome-mat__contentfromslds-modal-container. Markup structure changes need to be made existing code. First, wrap the existing content of<div class='slds-modal-container'>with<div class='slds-welcome-mat__content slds-grid'>. Then, wrap<div class='slds-welcome-mat__content slds-grid'>with<div class='slds-welcome-mat'>."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed vertical alignment ofslds-welcome-mat__info-contentin IE11."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added documentation detailing the values of the variable density classes in Comfy and Compact modes"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added documentation detailing the values of the variable density classes in Comfy and Compact modes"
          ]
        },
        {
          "type": "list",
          "items": [
            "Form labels will now hyphenate when a word with no spaces exceeds the available space of the label container"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where table elements within a rich text editor output would improperly wrap"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-form-element_addressfor address specific compound form elements"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where empty form elements would collapse in view mode"
          ]
        },
        {
          "type": "list",
          "items": [
            "Resolved issue where Rich Text content would overflow the container of a form element in IE11"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where missing cssProperties would cause compilation issues"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removefont-weight: 300from app title to increase legibility"
          ]
        },
        {
          "type": "list",
          "items": ["Reduce font-size ofslds-page-header__titleto 18px"]
        },
        {
          "type": "list",
          "items": [
            "Redesigned ourDesign Tokens pageto include GA vs Internal designations and \"New\" badges",
            "Added Release Notes to individual component pages",
            "Improved the accessibility of links on our site",
            "Added new design guidelines forBuildersandEmpty States",
            "MovedTree Gridto its own item, instead of being included in Trees",
            "Addedvariable spacing tokensto support new Densification settings"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed hard coded text sizing utility class,slds-text-heading_small, from theslds-accordion__summary-headingelement."
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed HTML so the button icon can be slotted into theslds-notify__closeelement"
          ]
        },
        {
          "type": "list",
          "items": [
            "Buttons with the new BEM syntax used within an inverse themed component no longer have their text color overridden"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the tile markup for improved accessibility and added featuresChanged the outer element from an<a/>to a<div/>and removedaria-describedbyReplaced the grab handle icon with a stateful icon button, which will now be the keyboard accessilbe drag and drop control. Pleaseread the new sectionin the documentation about specific implementation detialsMoved the tile link to the card title since the whole tile is no longer a linkMade the \"more\" overflow a tooltip trigger",
            "Changed the outer element from an<a/>to a<div/>and removedaria-describedby",
            "Replaced the grab handle icon with a stateful icon button, which will now be the keyboard accessilbe drag and drop control. Pleaseread the new sectionin the documentation about specific implementation detials",
            "Moved the tile link to the card title since the whole tile is no longer a link",
            "Made the \"more\" overflow a tooltip trigger"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed HTML so the Avatar component can be slotted inside of anhrefvs being thehrefelement"
          ]
        },
        {
          "type": "list",
          "items": [
            "Nestedinlineandinline-blockelements now receive the proper vertical alignment."
          ]
        },
        {
          "type": "list",
          "items": ["Updated design guidelines and design notes."]
        },
        {
          "type": "list",
          "items": [
            "A1pxseparator now appears when a brand button and a brand button icon are used within a button group.",
            "AddedButton Group Row componentthat provides spacing in between each item that contains a button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a title and assistive text to most button icon examples"
          ]
        },
        {
          "type": "list",
          "items": [
            "slds-button_text-destructivemodifier option, which is styled as an invertedslds-button_descructivebutton.",
            "Added selector for:disabledpseudo-class."
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecated the classslds-button__icon_stateful, which was located on the svg inside of the button. Use the Button Icon component with a small size modifier instead,slds-button__icon slds-button__icon_small."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting"
          ]
        },
        {
          "type": "list",
          "items": [
            "Swapped values foraria-hiddenon Carousel panels.In previous versions, thetrueandfalsevalues foraria-hiddenwere inadvertently reversedâaria-hidden: truewas placed on open panels, and vice versa. This has now been updated to use the proper values for open and closed panels.",
            "In previous versions, thetrueandfalsevalues foraria-hiddenwere inadvertently reversedâaria-hidden: truewas placed on open panels, and vice versa. This has now been updated to use the proper values for open and closed panels.",
            "Fixed bug that caused Carousel panels to be improperly sized in IE11."
          ]
        },
        {
          "type": "list",
          "items": [
            "File component (image and file content types) is now natively supported within an inbound and outbound message."
          ]
        },
        {
          "type": "list",
          "items": [
            "Outbound messages that contain a string of text shorter than themax-widthno longer has unnecessary white space.",
            "Removed unnecessary whitespace when sending messages with a small amount of text (.e.g, \"Hi there.\")."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added variant for a checkbox inside of a standardform element component"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixedissue #556by increasing the font size on checkbox labels to match radio button labels"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an example of a checked-and-disabled checkbox button."
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased the contrast between the plus symbol and background color for the disabled checkbox button."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-listbox__option-iconto be used as a container that maintains the dimensions of an icon when it is removed from the HTML"
          ]
        },
        {
          "type": "list",
          "items": [
            "Increased z-index of entity icon when a selection is made to ensure icon is always on top of input field",
            "Fixed alignment of dropdown icon in object switcher",
            "Click events are no longer prevented on the grouped combobox in Firefox"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a hidden header variation of the data tableThis involves adding theslds-table_header-hiddenclass to the<table>and using theslds-assistive-textclass on the<thead>to ensure the table remains accessible",
            "This involves adding theslds-table_header-hiddenclass to the<table>and using theslds-assistive-textclass on the<thead>to ensure the table remains accessible",
            "Multi select data tables now requirearia-multiselectable=\"true\"applied to thetableelement for both Advanced and Inline Edit variants.",
            "Multi select data tables now requirearia-selectedto be set tofalseon every row that is not selected"
          ]
        },
        {
          "type": "list",
          "items": [
            "Data tables underwent some minor markup changes to help align all the different variants to use common markup patterns. No visual styling or functionality has changed, but you will notice more examples."
          ]
        },
        {
          "type": "list",
          "items": [
            "Improved the color contrast of links inside of selected rows"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added new Drop Zone component to help construct a drag and drop screen building experience"
          ]
        },
        {
          "type": "list",
          "items": [
            "Wrappedslds-dueling-listelement withslds-form-element__control.",
            "Removedslds-text-title_capsfrom label."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added new Expression component to help users declaratively construct logical expressions"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting",
            "Reduced height to minimize whitespace"
          ]
        },
        {
          "type": "list",
          "items": [
            "New classsld-file_loadingfor loading state.In effort to prevent the hover styles from applying to the loading state,slds-file_loadingis now added toslds-file.",
            "In effort to prevent the hover styles from applying to the loading state,slds-file_loadingis now added toslds-file.",
            "Classslds-has-titlefor when Files have a title applied.slds-has-titleis now added toslds-fileto ensure the Preview icon (displayed in hover state) is properly centered.This class should not be added whenslds-file_overlayis used.",
            "slds-has-titleis now added toslds-fileto ensure the Preview icon (displayed in hover state) is properly centered.",
            "This class should not be added whenslds-file_overlayis used.",
            "z-indexto titles and actions for non-loading states.This is an effort to keep the new hover overlay styles from not covering the title and actions to keep them clickable.",
            "This is an effort to keep the new hover overlay styles from not covering the title and actions to keep them clickable."
          ]
        },
        {
          "type": "list",
          "items": [
            "New design treatment for hover state.box-shadowandtransitionhave been replaced with an overlay and absolutely-centered Preview icon.This hover state does not appear on devices that do not supporthover(e.g., mobile). Note that this does effect devices that supports both hover (e.g., touch) and no-hover (e.g., mouse) input devices, such as the Microsoft Surface.",
            "box-shadowandtransitionhave been replaced with an overlay and absolutely-centered Preview icon.",
            "This hover state does not appear on devices that do not supporthover(e.g., mobile). Note that this does effect devices that supports both hover (e.g., touch) and no-hover (e.g., mouse) input devices, such as the Microsoft Surface.",
            "New option for loading state.Added a loading spinner option for Files with and without a title.",
            "Added a loading spinner option for Files with and without a title."
          ]
        },
        {
          "type": "list",
          "items": [
            "Improved the color contrast of the text placed on top of a file overlay"
          ]
        },
        {
          "type": "list",
          "items": [
            "Left aligned label support for components with help text icon and required asterisk",
            "Left aligned label support forfieldsetandlegendform elements",
            "Addedslds-form-element__readonlyto apply appropiate styling when a form element is in view mode"
          ]
        },
        {
          "type": "list",
          "items": [
            "Reduced overall height of all view mode form elements",
            "Changed labels to be left-aligned when usingslds-form_horizontal",
            "Changed HTML so a compound form'sslds-form-element__groupis wrapped inside ofslds-form-element__control",
            "Changed HTML that moved the required asterisk inside oflegendelement",
            "Changed HTML that moved the help text icon to be adjacent to thelegendelement",
            "Changed HTML soslds-form-element__legendis now required on alllegendelements",
            "Changed HTML soslds-form-element__controlis now required to wrap all form controls"
          ]
        },
        {
          "type": "list",
          "items": ["Changed Salesforce logo image path."]
        },
        {
          "type": "list",
          "items": [
            "Overflow menu on navigation item no longer opens on hover.",
            "Added theslds-indicator-containerclass to be used whenever tabs and menu items have unread or unsaved indicators.Theslds-indicator_unsavedabbreviation and/or theslds-indicator_unsavedspan should always be containedwithina<span>with classslds-indicator-container.This class preserves spacing between the indicators and the tab/menu text when no icon is present by adding a margin-right.If the indicator container is empty, no margin-right is added.",
            "Theslds-indicator_unsavedabbreviation and/or theslds-indicator_unsavedspan should always be containedwithina<span>with classslds-indicator-container.",
            "This class preserves spacing between the indicators and the tab/menu text when no icon is present by adding a margin-right.",
            "If the indicator container is empty, no margin-right is added."
          ]
        },
        {
          "type": "list",
          "items": [
            "HTML validation error on tabbed navigation indicators, swapped adivfor aspan"
          ]
        },
        {
          "type": "list",
          "items": [
            "Icons can now be filled with the success text color by addingslds-icon-text-success."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixedissue #228, which was causing x-small and xx-small circular icons to appear as ovals. Contribution made by@geebru."
          ]
        },
        {
          "type": "list",
          "items": ["Added example for large illustrations"]
        },
        {
          "type": "list",
          "items": [
            "Added examples for list builders with disabled items and items selected by default.",
            "Added an example of a list builder with a headless table"
          ]
        },
        {
          "type": "list",
          "items": [
            "List Builder now requiresaria-multiselectable=\"true\"applied to thetableelement.",
            "Each row now requiresaria-selectedto be set tofalseon every row that is not selected"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a standalone map example that lives outside of a modal"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced inline styles fromiframeand placed them within the component styling",
            "Improved the color contrast of links inside of selected items in the locations list"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-page-header_record-homeclass to be used within a record home page. This class utilizes variable font tokens to respond to a user's densification setting.",
            "Made Related Lists Page Header visible, so you can see it. Yay! ð",
            "Added the following classes:For layout:slds-page-header__row,slds-page-header__row_gutters,slds-page-header__col-title,slds-page-header__col-actions,slds-page-header__col-meta,slds-page-header__col-controls,slds-page-header__col-detailsFor the page name:slds-page-header__name,slds-page-header__name-title,slds-page-header__name-switcher,slds-page-header__name-meta,slds-page-header__meta-textFor header controlsslds-page-header__controls,slds-page-header__control,For record homeslds-page-header_record-homeFor record home detailsslds-page-header__detail-row,slds-page-header__detail-blockFor vertical record home listslds-page-header__detail-list,slds-page-header__detail-item",
            "For layout:slds-page-header__row,slds-page-header__row_gutters,slds-page-header__col-title,slds-page-header__col-actions,slds-page-header__col-meta,slds-page-header__col-controls,slds-page-header__col-details",
            "slds-page-header__row,slds-page-header__row_gutters,slds-page-header__col-title,slds-page-header__col-actions,slds-page-header__col-meta,slds-page-header__col-controls,slds-page-header__col-details",
            "For the page name:slds-page-header__name,slds-page-header__name-title,slds-page-header__name-switcher,slds-page-header__name-meta,slds-page-header__meta-text",
            "slds-page-header__name,slds-page-header__name-title,slds-page-header__name-switcher,slds-page-header__name-meta,slds-page-header__meta-text",
            "For header controlsslds-page-header__controls,slds-page-header__control,",
            "slds-page-header__controls,slds-page-header__control,",
            "For record homeslds-page-header_record-home",
            "slds-page-header_record-home",
            "For record home detailsslds-page-header__detail-row,slds-page-header__detail-block",
            "slds-page-header__detail-row,slds-page-header__detail-block",
            "For vertical record home listslds-page-header__detail-list,slds-page-header__detail-item",
            "slds-page-header__detail-list,slds-page-header__detail-item"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting",
            "Changed dimension ofslds-page-header__iconto be 36x36",
            "Pretty much all of it in a sizable refactor of the markupMade it easier to componentize the page headers and share code between the different variantsMade page headers less reliant on utility classesPlease see above for added class names",
            "Made it easier to componentize the page headers and share code between the different variants",
            "Made page headers less reliant on utility classes",
            "Please see above for added class names"
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecated page header specific spacing tokensPAGE_HEADER_SPACING_MARGINPAGE_HEADER_SPACING_PADDINGPAGE_HEADER_SPACING_ROW",
            "PAGE_HEADER_SPACING_MARGIN",
            "PAGE_HEADER_SPACING_PADDING",
            "PAGE_HEADER_SPACING_ROW"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated panel headers to have left aligned text by default. To center the header title, use the classslds-panel__header_align-center.",
            "Updatedslds-panel_bodypadding to be 0.75rem around instead of 1rem.",
            "Updated our documentation to reflect that panels always have a close button, but may also have a back button if panel was invoked by drilling in."
          ]
        },
        {
          "type": "list",
          "items": [
            "Forced panel buttons to keep their square shape by preventingflex-shrink."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-path_has-coachinghook on theslds-pathcontainer element, to add support for spacing differences between coaching and non-coaching."
          ]
        },
        {
          "type": "list",
          "items": [
            "Modified the appearance of the Path container.",
            "Revised the colors used on the active and curent Path steps, introducing support for borders.",
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting.",
            "Changed the direction of the coaching arrow to point to the right / down, instead of up / down. To take advantage of this change, remove theslds-flip_verticalclass on the open state forslds-path__trigger, and instead use our new classslds-path__trigger_opento set the direction of the open state on the button arrow."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed text centering issue with first and last Path steps",
            "Fixed rotation transition on Path coaching toggle button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-nubbin_*-cornermodifier classes to place nubbin elements at the corner of a Popover."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed a bug where long strings of text would overflow the popover boundary. Popover body, header, and footer now includeword-wrap: break-word.",
            "Increased the contrast for focused links and buttons in our inversed popovers, Walkthrough and Feature.",
            "Fixed a bug that allowedslds-popover_smallto grow larger than its expected width.",
            "Buttons with the new BEM syntax used within an inverse themed component no longer have their text color overridden."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the documentation for vertical progress bars. Now you can actually see it, yay!"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an example of a progress ring that fills rather than drains, meaning the colored portion of the ring increases clockwise."
          ]
        },
        {
          "type": "list",
          "items": [
            "Made the publisher label visible to screen readers in the collapsed state of a publisher, by removing the use ofdisplay: none"
          ]
        },
        {
          "type": "list",
          "items": ["Added an example of a checked-and-disabled radio button."]
        },
        {
          "type": "list",
          "items": [
            "Fixed incorrectborder-radiusin text area.",
            "Fixed a bug where child input elements were unintentionally affected when the Rich Text Editor was in an error state."
          ]
        },
        {
          "type": "list",
          "items": [
            "New markupthat moves the error message outside of Rich Text Editor, and adds aslds-form-element__controlelement to enable left align labels."
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-tabs_mediumandslds-tabs_largeto modify thefont-sizeand spacing of the tab items",
            "Addedslds-tabs_scoped__overflow-buttonto tabs with overflow so the Button Menu component can be slotted inside the tab item"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting",
            "Changed the color of a tab item when a tab is active",
            "Changed HTML onTabs with Overflowexample so a Button Menu component is the trigger for the overflow menu"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the setup assistant steps to use the newfilling progress ring."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed a bug that prevented Slider background from appearing in IE11."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-tabs_mediumandslds-tabs_largeto modify thefont-sizeand spacing of the tab items",
            "Added animation when activating a tab item",
            "Addedslds-tabs_default__overflow-buttonto tabs with overflow so the Button Menu component can be slotted inside the tab item",
            "Extended the documentation for mobile tabs to include panelsWhen drilling into a mobile tab, a panel slides in displaying that tab's contentCheck out theTabs On Mobilesection for more details",
            "When drilling into a mobile tab, a panel slides in displaying that tab's content",
            "Check out theTabs On Mobilesection for more details",
            "Animations and transitions for:hoverandslds-is-activestates."
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced spacing tokens with variable spacing tokens to respond to a user's densification setting",
            "Removed title caps from tab items",
            "Removed letter spacing from tab items",
            "Increased height of bar when a tab is active",
            "Changed HTML onTabs with Overflowexample so a Button Menu component is the trigger for the overflow menu"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updatedslds-tabs-mobileto have a white background by default, instead of a transparent background.",
            "Improved the color contrast of the text of a subtab when it is in focus",
            "HTML validation error on subtab indicators, swapped adivfor aspan"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedbox-shadowadded by Firefox for all required fields.By default, Firefox was adding abox-shadowto all fields markedrequired. This has now been normalized to match the styling in all other browsers.",
            "By default, Firefox was adding abox-shadowto all fields markedrequired. This has now been normalized to match the styling in all other browsers."
          ]
        },
        {
          "type": "list",
          "items": ["Swapped therolevalue of toasts fromalerttostatus"]
        },
        {
          "type": "list",
          "items": [
            "Increased contrast between the icons and the yellow background in warning toasts.",
            "Buttons with the new BEM syntax used within an inverse themed component no longer have their text color overridden"
          ]
        },
        {
          "type": "list",
          "items": [
            "Checkboxes in the left most column were added to multi select tree grids",
            "Multi select tree grids now requirearia-multiselectable=\"true\"applied to thetableelement.",
            "Multi select tree grids now requirearia-selectedto be set tofalseon every row that is not selected",
            "Single select tree grids were added as examples",
            "Headless tree grids were added",
            "Borderless tree grids were added"
          ]
        },
        {
          "type": "list",
          "items": [
            "Tree grid now aligns better with the lightning component, which is an extension ofAdvanced Data Table."
          ]
        },
        {
          "type": "list",
          "items": [
            "Removedaria-selectedfrom the examples since this is only necessary if the tree supports multi-select",
            "Removedrole=\"application\"from the top level tree"
          ]
        },
        {
          "type": "list",
          "items": [
            "Replaced theslds-size_1-of-1surrounding the tree label withslds-has-flexi-truncateto prevent the label from overflowing the tree's boundary"
          ]
        },
        {
          "type": "list",
          "items": [
            "Buttons with the new BEM syntax used within an inverse themed component no longer have their text color overridden"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the disabled visual picker UI to be more apparent and a better match to the established conventions for disabled UI"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the semantics of steps in a welcome mat to be list items within an unordered list. Check out the component documentation for theupdated DOM structure"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed behavior of media query whenslds-dl_horizontalandslds-dl_inlineare located inside ofslds-region_narrow"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-gutters_directfor adding gutters to direct child columns of a grid.See theDirect Columns Onlysection for more info.",
            "See theDirect Columns Onlysection for more info."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updatedslds-col_bump-bottomto accurately set margin-bottom, instead of margin-right, to auto."
          ]
        },
        {
          "type": "list",
          "items": [
            "Added text color utility class,slds-text-color_destructive, for destructive actions"
          ]
        },
        {
          "type": "list",
          "items": ["Updated broken links within the Cards docs (7b48637)"]
        },
        {
          "type": "list",
          "items": [
            "Fix path to gulp.js to resolve build error in Windows (2a78a47)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the Error with Icon example to use the new Error icon (35d90ba)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added examples of using \"none\" on margin utilities (a3e9eb9)",
            "Updated broken links within the Margin docs (26a5eed)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed margin if compound field is found inside of a stacked form (0d3e752)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted docs to avoid confusion on columns and vertical alignment (1b17639)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed incorrect link to Vertical Tabs component in Tabs documentation (#548)"
          ]
        },
        {
          "type": "p",
          "text": "May the 4th be with you!"
        },
        {
          "type": "list",
          "items": [
            "Renamed our 'Components' to 'Component Blueprints' to create distinction between our SLDS Components and (Lightning Components). We define our 'Component Blueprints' as 'Framework agnostic, accessible HTML and CSS used to create components in conjunction with our implementation guidelines'. For more details, check out the glossary we added to ourFAQ page."
          ]
        },
        {
          "type": "list",
          "items": ["Merged Form Layout into Form Element (f3c5b48)"]
        },
        {
          "type": "list",
          "items": [
            "Addressed 2 issues with the usage ofWarningandErroricons. (cd98ab6)Research showed that the ban icon best represented an error for our users, so we switched the error and ban icons. The new error icon is the circle with a diagonal slash through itWe also realized that we used the same icon for both error and warning states in many components, so we updated components that were using the warning icon in red as an error state to use the new error icon.",
            "Research showed that the ban icon best represented an error for our users, so we switched the error and ban icons. The new error icon is the circle with a diagonal slash through it",
            "We also realized that we used the same icon for both error and warning states in many components, so we updated components that were using the warning icon in red as an error state to use the new error icon."
          ]
        },
        {
          "type": "list",
          "items": [
            "Deprecatedslds-lookupand replaced withslds-comboboxandslds-combobox-group(2dbe619)"
          ]
        },
        {
          "type": "list",
          "items": ["Renamed our Walkthrough component to Trial Bar (fe8cfc1)"]
        },
        {
          "type": "list",
          "items": ["Created new Builder Header component (3b6f741)"]
        },
        {
          "type": "list",
          "items": [
            "Created new component for Empty States and other Illustrations (a1824e0)"
          ]
        },
        {
          "type": "list",
          "items": ["Created new Setup Assistant component (26be78c)"]
        },
        {
          "type": "list",
          "items": ["Created new Summary Detail component (245492e)"]
        },
        {
          "type": "list",
          "items": ["Created new Welcome Mat component (5d2d818)"]
        },
        {
          "type": "list",
          "items": [
            "Updated examples to show disabled states of all variants (013b16d)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated examples and documentation for Base, Autocomplete, Entity Autocomplete, and Grouped comboboxes (6c79edd)",
            "Added an example to showlistbox styling options(3d4af71)",
            "Updated mouse and keyboard interaction documentation (04bde0c)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an example detailing how to add a group label to a dueling picklist (b5e0083)"
          ]
        },
        {
          "type": "list",
          "items": ["Added an example to show Record Detail (73989b0)"]
        },
        {
          "type": "list",
          "items": ["Updated documentation to show animated examples (399da9c)"]
        },
        {
          "type": "list",
          "items": [
            "Added examples and documentation forslds-col-bump_*classes (a095cba)"
          ]
        },
        {
          "type": "list",
          "items": ["Added an example that usesslds-current-color(2ef3489)"]
        },
        {
          "type": "list",
          "items": [
            "Updated examples to properly wrap the Rich Text Editor inslds-form-element(b6df0b0)"
          ]
        },
        {
          "type": "list",
          "items": ["Addedslds-button_outline-brandmodifier (0dec41e)"]
        },
        {
          "type": "list",
          "items": [
            "Added support for delivery failure and unsupported type messages (14aa268)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Introduced grouped comboboxes with text and icon variants (6c79edd)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated docs to add non-reorderable and view mode variants of dueling picklist to be used for multiple selection (c336057)",
            "Addedslds-is-grabbedclass",
            "Addedslds-dueling-picklist__column_responsiveto addresponsiveness(4000150)"
          ]
        },
        {
          "type": "list",
          "items": ["Added support for branded skip links (789aa99)"]
        },
        {
          "type": "list",
          "items": ["Added counter variant (0b20b85)"]
        },
        {
          "type": "list",
          "items": ["Added docked panel variant (e88713e)"]
        },
        {
          "type": "list",
          "items": ["Added warning and error variants (60a628d)"]
        },
        {
          "type": "list",
          "items": [
            "Added an example of descriptive progress bar with label and progress percentage above bar (dbd0db1)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added new vertical variant (118b520)",
            "Addedslds-progress__marker_icon-successto indicate completed stage"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-progress-ring_largemodifier to make a 32x32px ring (26be78c)",
            "Addedslds-progress-ring_active-stepmodifier to change color of progress ring"
          ]
        },
        {
          "type": "list",
          "items": ["Added new inline spinner variant (c05738f)"]
        },
        {
          "type": "list",
          "items": ["Added new mobile stacked variant (9d7b861)"]
        },
        {
          "type": "list",
          "items": ["Added new monospace font-family (7a41fd6)"]
        },
        {
          "type": "list",
          "items": [
            "Added text shadow toslds-avatar__initialsfor better contrast (3f43dfa)",
            "Addedslds-avatar__initials_inversefor dark text initials on a light background"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-dropdown_actionsto button group overflow dropdown (8ab08fe)"
          ]
        },
        {
          "type": "list",
          "items": ["Added selected stying to border inverse variant (2624d4f)"]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-card__footer-actionto have footer link take up full width of card (89c6a28)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-chat-message__text-sneak-peaktoslds-chat-message__text-sneak-peek(cdaabbf)"
          ]
        },
        {
          "type": "list",
          "items": ["Updated examples to have uniquevalueattributes (cdf72cd)"]
        },
        {
          "type": "list",
          "items": ["Fixed layout overflow bug (#530)"]
        },
        {
          "type": "list",
          "items": [
            "Adjusted styling for edited and error cells when row is selected (9ed087a)",
            "Updated checkboxes and radio groups in Data Tables to be grouped with a common label by usingaria-labelledbyand hidden group label in the column header (f8f8801)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Prevented error border from applying to nested select component (0fa0165)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated all examples to include a group label and form-element wrapper (8d1a1b4)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-form-element__legend_has-tooltipmodifier to allow for tooltip icon next to legend (f3c5b48)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated colors of globalactions(58d68e1)",
            "Updated search to usenew combobox group(9bddfde)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed red box shadow from required inputs in firefox (069a3c8)",
            "Usedaria-labelledbyinstead ofaria-describedbyfor associating the prepended and appended fixed text to the input (25d51d7)",
            "Reorderedslds-input:requiredstyles to prevent overrides (ba3ac5b)",
            "Removed pointer event when icon is located on top of an input (84b650b)",
            "Addedslds-input-has-icon_group-rightto fix spacing issues formultiple icons on the right(9bddfde)"
          ]
        },
        {
          "type": "list",
          "items": ["Changed width of medium modal to 70% (b2d9e1b)"]
        },
        {
          "type": "list",
          "items": [
            "Added focus styling for completed stages (f197b4a)",
            "Reorderedslds-is-activeandslds-is-completeto prevent overrides",
            "Added min-width to action button (1b8e6b8)"
          ]
        },
        {
          "type": "list",
          "items": ["Updated examples to have uniquevalueattributes (cdf72cd)"]
        },
        {
          "type": "list",
          "items": [
            "Added white background to error message withslds-form-element__helpmodifier (8033c22)",
            "Removed margin-bottom fromslds-rich-text-editor__spacing-wrapperand added it toslds-rich-text-editor__select(bf907ed)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added missing assistive text span for tree branch with metatext (a407e58)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added!importanttovisibility utilitiesslds-hideandslds-hidden(16bf902)",
            "Fixed error in Grid documentation aroundwidth and ordering class prefixes(f6a66d9)"
          ]
        },
        {
          "type": "list",
          "items": ["Removed outline when link has focus (72fcd6f)"]
        },
        {
          "type": "list",
          "items": ["Added focus styling (cbd07e9)"]
        },
        {
          "type": "list",
          "items": [
            "Changed value of$color-text-success(97d13bb)",
            "Changed value of$color-text-link(9bc8b0d)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Reordered Quill styles to apply indentation styles to the Rich Text Editor output class (0bbf51c)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Remove Quill styles from the Rich Text Editor output class to fix properly nested lists (296afb3)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Add warm/cool header contrast tokens (d6515ee)",
            "Set background image on Brand Band to not repeat (d843c97)",
            "Update bundle script to fix windows npm error (#523)"
          ]
        },
        {
          "type": "list",
          "items": ["Backport tokens for Path (1932e76)"]
        },
        {
          "type": "list",
          "items": [
            "Updated Color guidelines to include Gray palette and Brand Colors",
            "Introduced a new documentation style for Badges, Brand Band, Carousel, Chat, Menus, and the Grid utility."
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated behavior and styling of activity timeline by adding expandable sections (10cf834)"
          ]
        },
        {
          "type": "list",
          "items": ["Added Brand Band component"]
        },
        {
          "type": "list",
          "items": [
            "Added overflow menu button option for breadcrumbs (a69621c)"
          ]
        },
        {
          "type": "list",
          "items": ["Added new branding variant"]
        },
        {
          "type": "list",
          "items": ["Added variant with Einstein branded header"]
        },
        {
          "type": "list",
          "items": ["Added Carousel component"]
        },
        {
          "type": "list",
          "items": ["Added Chat component"]
        },
        {
          "type": "list",
          "items": ["Added a stacked variant"]
        },
        {
          "type": "list",
          "items": [
            "Added icons to data table headers and cells (59c44b2)",
            "Added header menu buttons to table headers (33bd050)",
            "Added Product Listing example to advanced data tables",
            "Added Radio Group example to advanced data tables"
          ]
        },
        {
          "type": "list",
          "items": ["Updated styling to allow for rectangular logos (ea43705)"]
        },
        {
          "type": "list",
          "items": [
            "Added top level gutter classes:slds-guttersandslds-gutters_*for sizes (b6d7fd5)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added utility classslds-current-colorto set an icon to use current color (c9974d1)"
          ]
        },
        {
          "type": "list",
          "items": ["Added Map component"]
        },
        {
          "type": "list",
          "items": ["Added a variant for Menus with Submenus"]
        },
        {
          "type": "list",
          "items": [
            "Updated multiple styling attributes for reminder notifications, including background color, border color, and spacing (9cbb18a)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added variant with Einstein branded header",
            "Added variant for Feature callout"
          ]
        },
        {
          "type": "list",
          "items": ["Moved Quill styles to rich text editor (402845b)"]
        },
        {
          "type": "list",
          "items": [
            "Added classslds-spinner_delayedto apply a 300ms delay to the animation (fbaa8d4)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added new ability to include metatext on tree items (754c9fe)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added utility classslds-size-xxx-smallfor sizing (69d0eb2)",
            "Added utility classslds-text-color-successfor text (e744eb2)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added a variant of vertical nav that uses radio groups as underlying markup"
          ]
        },
        {
          "type": "p",
          "text": "The following fixes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Adjusted styling to only target first accordion child (9f8f601)",
            "Changed accordion focus styling from overall highlight to underline of header text (0658e13)",
            "Updated to hide content overflow when closed (7fb7cb0)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added grab styling to match current use in product",
            "Changed to Dev Ready from prototype"
          ]
        },
        {
          "type": "list",
          "items": ["Updated z-index for button group focus (259a6db)"]
        },
        {
          "type": "list",
          "items": [
            "Stopped events from happening on disabled buttons (e661ee8)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added spacing utility class to dropdown button icon between color and arrow (69839b2)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added classslds-combobox__input-valuethat must be applied, in order to propagate styling, when a selection is made in a single selection inline listbox (1d4e30f)",
            "Added spacing utility class to dropdown button icon between icon and arrow (69839b2)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-table_column-*-wrapto add column wrap support (b841961)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed background color used when today's date is selected (75f0f6a)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed accessibility of disabled list boxes (4ea5889)",
            "Renamed Required to Locked, switched to lock icon instead of red asterisk (3556b26)",
            "Updated background and border colors of disabled picklist (4ea5889)"
          ]
        },
        {
          "type": "list",
          "items": ["Updated to hide content overflow when closed (7fb7cb0)"]
        },
        {
          "type": "list",
          "items": [
            "Changed global nav styling when subtabs are present withslds-has-sub-tabs(d99332b)",
            "Prevented icons from shrinking when long text is present (881da86)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated size of search icon to be 14x14px from 16x16px (add0ba0)",
            "Fixed vertical alignment issues when usingslds-input__icon(cb3fe60)"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed icon alignment (9b3de3c)"]
        },
        {
          "type": "list",
          "items": [
            "Fixed disabled menu items to turn disabled icons gray",
            "Updatedslds-dropdown_xx-smallto use correct token (0569d6d)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed modal background color (2f0ad5a)",
            "Removed hyphenation from modal body (9f70ae7)"
          ]
        },
        {
          "type": "list",
          "items": ["Update icons and improve consistency among pill usage"]
        },
        {
          "type": "list",
          "items": [
            "Updated background color of Walkthrough popovers (08b2aac)",
            "Added clouds to the header (08b2aac)",
            "Removed hyphenation from body text (9f70ae7)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue where selection dropdowns overlapped content on smaller screens (f1a7e8d)",
            "Updated to prevent hyperlinks from breaking mid word (4827702)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adjusted position of unsaved indicator on a tab when used with notifications (5916f2f)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added missing ARIA rolerole=gridcellto tree grid TD elements (f94d3dd)",
            "Removed extra indentation spacing for base variant (e64cfc1)"
          ]
        },
        {
          "type": "list",
          "items": ["Added missing BEM syntax toslds-text-link_faux(#505)"]
        },
        {
          "type": "list",
          "items": ["Changed active and hover background colors (ae7997c)"]
        },
        {
          "type": "list",
          "items": [
            "Added$size-xxx-smallsizing token for UI components (69d0eb2)"
          ]
        },
        {
          "type": "list",
          "items": ["Modified tokens using gray-2 to use gray-3"]
        },
        {
          "type": "list",
          "items": ["Remove pointer-events from icons found within buttons"]
        },
        {
          "type": "list",
          "items": [
            "Fixed padding-left and padding-right on nestedslds-card__headerandslds-card__footerwithslds-card_boundary"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed known IE11 bug when you have nested flex containers with flex-basis on children"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed dark border on focus, fixing bug when buttons are found inside of a button group"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue when a selection is made then that selection is put into a disabled state"
          ]
        },
        {
          "type": "list",
          "items": ["Update background color token to transparent value"]
        },
        {
          "type": "list",
          "items": [
            "Use transform to properly align checkmark inside of path element"
          ]
        },
        {
          "type": "p",
          "text": "We've made several enhancements in the Winter â18 release which might affect your components and pages."
        },
        {
          "type": "list",
          "items": [
            "Weâve enhanced font hierarchy to draw attention to what's most important in the moment and improve legibility.",
            "Weâve condensed the spacing of content (from 16px to 12px) to allow more information on the page. Youâll especially notice this in the tightening of data tables.",
            "We've added layering and a colorful graphics to the layout to create contrast between foreground and background cards. The cards have white backgrounds and drop shadows, while the page background introduces color.",
            "The components weâve updated are cards, avatar, data tables, and page headers.",
            "For more detailed information, please visit this Salesforce UX blog post:Evolving the Lightning User Experience"
          ]
        },
        {
          "type": "list",
          "items": [
            "With the changes to the page background color, you may notice some of your custom components are transparent, rendering the text on the dark background. You can fix that easily by adding the class.slds-cardto the outer wrapper of your component.",
            "If you need default tabs to appear to be in a card, you can place the.slds-tabs_cardclass on the.slds-tabs_defaultDOM node. This will give the tabset padding and drop-shadows like a card.",
            "When the.slds-cardclass is used inside.slds-tabs_default,.slds-modal, or another.slds-card, they no longer have the drop-shadow card look. Instead they are simply white. In some situations, you may need to differentiate your card from content around it. You can add the.slds-card_boundaryclass to the.slds-cardfor a rounded border.",
            "On some pages, youâll notice the header is attached to a list view. If you have a custom page where youâd like to attach the header to a component below, add the.slds-has-bottom-magnetclass to theslds-page-header. Then add.slds-has-top-magnetto the component below. This will visually attach the components to each other.",
            "If you have been using SLDS in Visualforce via the<apex:slds />tag, your Visualforce pages will also inherit the new styling in Winter â18",
            "For more detailed information, please visit this developer blog post:Get your Lightning components ready for Winter â18"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-card_boundaryclass to provide card-like look when component is inside a tabset"
          ]
        },
        {
          "type": "list",
          "items": [
            "Force magnet layout by making their properties immutable when usingslds-has-top-magnetandslds-has-bottom-magnet"
          ]
        },
        {
          "type": "p",
          "text": "The following are now available:"
        },
        {
          "type": "list",
          "items": [
            "Added dark blue badge",
            "Added white badge with icon and normalized text"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed dynamic lists from combobox component and created new dynamic menu component"
          ]
        },
        {
          "type": "list",
          "items": ["Added green variant"]
        },
        {
          "type": "list",
          "items": ["Added new Progress Ring component"]
        },
        {
          "type": "list",
          "items": ["Added scoped inline notifications component"]
        },
        {
          "type": "list",
          "items": [
            "Added twospansinsidelabelto give the ability to visually hide one or both"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Fixed grammatical errors in alerts documentation (aa8099a)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Button menu uses filled button icon modifier by default (f9c2168)"
          ]
        },
        {
          "type": "list",
          "items": ["Addedpointer-events:noneto svg in button (cc9cd5f)"]
        },
        {
          "type": "list",
          "items": [
            "Removed card look when inside of a modal (f58c355)",
            "Removed card look when inside of a tabset"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added more descriptive assistive text and fixedtabindexon swatches (fc989c1)",
            "Addedinputerror state ui and examples (b982bf7)",
            "Added focus state to color picker slider thumb (c29d368)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedrole=nonetodivthat wrapsinput(e695ae7)",
            "Removed title and assistive text from search icon"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added styles when adjacent month is selected within a week range (bab8e26)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added documentation on focus management",
            "Fixed syntax and grammatical errors in dueling picklist accessibility docs",
            "Removed double focus on ul (c231132)"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed file selector input labelling"]
        },
        {
          "type": "list",
          "items": [
            "Added animation on active and when hovering on a global navigation list item (074771a)"
          ]
        },
        {
          "type": "list",
          "items": ["Fix IE sizing issue by adding max-width (00a0e35)"]
        },
        {
          "type": "list",
          "items": [
            "Removed extra.slds-modal__headerclass from headless modal example"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed[hidden] { display: none; }to fix Visual Force charts disappearance when SLDS is added"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated assistive text for dismiss notification button and added event type to header and live region (d96535d)",
            "Updated styling to add bordercolor and darker drop shadow (f977ee6)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Simplified and fix active tab focus styling across all stage states (3f9fbd4)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Examples for using responsive tables can now be found on the site again (d427148)"
          ]
        },
        {
          "type": "list",
          "items": ["Reduced and updated gray palettes to 12 total (ff582b0)"]
        },
        {
          "type": "list",
          "items": [
            "Background color changed to white",
            "Added drop shadow for improved depth and heirarchy",
            "Cards found inside of a tabset have their drop shadow removed"
          ]
        },
        {
          "type": "list",
          "items": ["Decreased row height for improved content density"]
        },
        {
          "type": "list",
          "items": ["Changed color of background"]
        },
        {
          "type": "list",
          "items": ["Updated font size, weight, and color (ce7b275)"]
        },
        {
          "type": "list",
          "items": ["Tabs take on the look and feel of a card"]
        },
        {
          "type": "p",
          "text": "Initially we used the double dash style for BEM notation (--). Due to the fact that double dashes are problematic in an XML environment (which doesn't allow double dashes within comments), we have upgraded our syntax to use the single underscore style (_). This change is backward compatible for 18 months. But all components going forward are built with the single underscore BEM style. The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Removed dotted underline forabbrthat Chrome introduced in version 58",
            "Fix issue on Spinner component where Firefox and IE11 wouldn't respect its z-index token",
            "Fix line-height issue onslds-form-element__staticwhen the output was multi-line",
            "Fix BEM naming convention on visibility classes -#452"
          ]
        },
        {
          "type": "p",
          "text": "The following are now available:"
        },
        {
          "type": "list",
          "items": ["Added Accordion component âAccordion"]
        },
        {
          "type": "list",
          "items": [
            "Added classslds-is-selected-clickedto handle click event on stateful button -Stateful Button"
          ]
        },
        {
          "type": "list",
          "items": ["Added Combobox component âCombobox"]
        },
        {
          "type": "list",
          "items": ["Added two line support for docked utility bar items"]
        },
        {
          "type": "list",
          "items": ["Re-named from Multi-select âDueling Picklist"]
        },
        {
          "type": "list",
          "items": [
            "Added Ellie animated icon",
            "Added Equalizer animated icon",
            "Added Score animated icon",
            "Added Waffle animated icon",
            "Added Strength animated icon",
            "Added Trend animated icon"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Expandable section component âExpandable Section",
            "Added non-collapsable example"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an example for Search input with loading spinner -Input with spinner",
            "Addedslds-has-input-focusutility class to provide focus styles on an element"
          ]
        },
        {
          "type": "list",
          "items": ["Uses new combobox HTML"]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-dropdownâfluidto adjust the width of a dropdown so it can be fluid to its container",
            "Added updated styles for base HTML elements in the Rich Text Editor",
            "Added the same updated styles in the output of the Rich Text Editor using the.slds-rich-text-editor__outputclass",
            "Addedslds-pill_linkto modify pill for when we want the hyperlink to take up 100% of the available pill",
            "Addedslds-pill__actionto the actionable link element inside ofslds-pillâlink"
          ]
        },
        {
          "type": "list",
          "items": ["Re-named from Process"]
        },
        {
          "type": "list",
          "items": ["Uses new combobox HTML"]
        },
        {
          "type": "list",
          "items": [
            "Added listbox of pill option variant âListbox of Pill Options"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedslds-popover_walkthrough-altto modify the background of a walkthrough popover -Walkthrough Popover"
          ]
        },
        {
          "type": "list",
          "items": ["Added Progress Bar component âProgress Bar"]
        },
        {
          "type": "list",
          "items": [
            "Added bottom toolbar support -Bottom toolbar example",
            "Added long-form formatting support"
          ]
        },
        {
          "type": "list",
          "items": ["Xx-small Spinner variant âSpinner"]
        },
        {
          "type": "list",
          "items": ["Added Split View component âSplit View"]
        },
        {
          "type": "list",
          "items": ["Added Visual Picker component âVisual Picker"]
        },
        {
          "type": "list",
          "items": [
            "Added Vertical Navigation component âVertical Navigation",
            "Deprecated Navigation component for this improved version"
          ]
        },
        {
          "type": "list",
          "items": [
            "Improved visibility classes for responsive design â#429- Thanks@3den!"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Fix for::-ms-clearto remove native clear button in IE",
            "Wheneverslds-truncateis used, it is required to be used in conjunction with a [title] attribute",
            "The Alert component icon is now contained withinslds-icon_container",
            "The Button icon component is required to haveslds-buttonâiconapplied to the<button />element. Before,slds-buttonâicon-inverse,slds-buttonâicon-container,slds-buttonâicon-border,slds-buttonâicon-border-filled,slds-buttonâicon-border-inverse,slds-buttonâicon-more, andslds-buttonâicon-errorwere used in conjunction with theslds-buttonclassname but we now requireslds-buttonâiconto be a part of this grouping of classnames",
            "The Stateful button component is required to haveslds-buttonâstatefulapplied to the<button />element",
            "The Toast component icon is now contained withinslds-icon_container",
            "The Page header component \"entity\" icon is now contained withinslds-icon_container",
            "The Feeds component \"Post\" examples have been updated to be contained within theslds-feedlist",
            "The Compound Form Layout example was updated so eachfieldsetis correctly using theslds-form-elementclass and the whole form is now contained inslds-formâcompound",
            "Unless the HTML output is represented as a list âul,ol, ordlâ all examples were updated to useslds-bottomâ[position]instead ofslds-has-dividerâ[position]",
            "Wheneverslds-dropdownis used, it is required to be contained inside an element that has the classnameslds-dropdown-trigger",
            "Wheneverslds-formâstacked,slds-formâhorizontal, andslds-formâcompoundis used, it is required to be used in conjunction withslds-form",
            "Wheneverslds-icon-text-default,slds-icon-text-warning, orslds-icon-text-erroris used, it is required to be used in conjunction withslds-icon",
            "Fixed a bug where the task2 icon corresponding class name was incorrectly named \"task-2\"",
            "Scoped :focus style for data-tables toslds-table",
            "Fixed an issue where assistive text in an parent withtext-transform: uppercasewould get read as full-caps (e.g. \"Sorted ascending\" in data table headers getting read as",
            "Rounded corners have been removed from utility icons so that they no longer clip incorrectly",
            "Breadcrumbs now wrap properly",
            "Focus state for pills has been moved to the containing element, rather than just the text inside of the pill",
            "Updated z-index of Docked Utility Bar to 4 to play nicely with others",
            "Prevent docked composer content from collapsing in Safari",
            "Updated cursor style for disabled state on radio button groups"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being marked as deprecated in this release and will be removed in three releases:"
        },
        {
          "type": "list",
          "items": [
            "Navigation was removed from site navigation and replaced with improved Vertical Navigation âVertical Navigation"
          ]
        },
        {
          "type": "p",
          "text": "The following updates have been made to component designs:"
        },
        {
          "type": "list",
          "items": ["Touch components have been removed from the site"]
        },
        {
          "type": "list",
          "items": [
            "Sub-headings inside of dropdown menus should now be truncated"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added focus state around entire composer panel",
            "Title inside of composer panel header should truncate instead of wrap to two lines"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed the like count in the bottom right of the Feed post",
            "Changed spacing between feed posts from 1.5rem to .75rem",
            "Add top border to feed footer on mobile"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added example for no title",
            "Added example for loading state",
            "Updated location of the files action menu"
          ]
        },
        {
          "type": "list",
          "items": ["Always have a close button icon"]
        },
        {
          "type": "p",
          "text": "The following changes have been made to tokens:"
        },
        {
          "type": "list",
          "items": [
            "TASK_2was renamed intoTASK2",
            "Standard icon set: AddedENTITLEMENT",
            "Standard icon set: AddedLIVE_CHAT"
          ]
        },
        {
          "type": "list",
          "items": [
            "RemovedMAX_HEIGHT_ACTION_OVERFLOW_MENU",
            "RemovedMAX_WIDTH_ACTION_BAR",
            "RemovedMAX_WIDTH_ACTION_BAR_ITEM",
            "AddedUTILITY_BAR_COLOR_BACKGROUND_NOTIFICATION_FOCUS",
            "AddedVERTICAL_NAVIGATION_COLOR_BACKGROUND_SHADE_ROW_HOVER",
            "AddedVERTICAL_NAVIGATION_COLOR_BACKGROUND_SHADE_ROW_ACTIVE"
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made to make our product more accessible:"
        },
        {
          "type": "list",
          "items": [
            "Addedtitleattribute to item icons",
            "Changed the checkbox markup to match the new, \"Explicit Label\" markup pattern"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-modalto be a<section />element",
            "Changedslds-modal__headerto be a<header />element",
            "Changed the App Tiles icons to match the newAvatar Fallback Entity Initialspattern, adding an<abbr />tag",
            "Removed Assistive Text from Drag Handle image as it's irrelevant to screen reader users",
            "Implemented the new Expandable Section pattern to the expanding sectionsPlaced a button element inside the section heading elementsAddedaria-expanded=\"true|false\"to reflect stateAddedaria-controls=\"id_of_expanding_section\"to associate the button to the content it controls and gave the content wrapper the same id",
            "Placed a button element inside the section heading elements",
            "Addedaria-expanded=\"true|false\"to reflect state",
            "Addedaria-controls=\"id_of_expanding_section\"to associate the button to the content it controls and gave the content wrapper the same id",
            "Added three new states for Accessible Drag and DropAdded in the three missing states, necessary to demonstrate the Assistive Technology implementation for the full Drag and Drop lifecycle. \"Grabbed\", \"Moved in list\" and \"Dropped\"Added a live region to be used to update the user of Assistive Technology, to the current state of the operationAdd an additional hidden piece of instructional text, that instructs the user how to perform the operation: \"Press space bar to move this app within the list.\" This is present in the default state.Each focusable tile element, should bearia-describedby=\"id-of-span-containing-instructional-text\"In the grabbed stateRemove the instructional text as the user has performed the action, but keep the containerChange the content of the live region, to be \"{App Name}: current position {x} of 6. Use the up and down arrows to move this app\"In the \"Moved in List\" state, implement the same changes applied to Grabbed but:Update the live region text to be: \"{App Name}: new position {x} of 4.\"In the dropped stateUpdate the live region text to be: \"{App Name}: final position {x} of 4.\"Replace the hidden instructional text to be what it was in the base state",
            "Added in the three missing states, necessary to demonstrate the Assistive Technology implementation for the full Drag and Drop lifecycle. \"Grabbed\", \"Moved in list\" and \"Dropped\"",
            "Added a live region to be used to update the user of Assistive Technology, to the current state of the operation",
            "Add an additional hidden piece of instructional text, that instructs the user how to perform the operation: \"Press space bar to move this app within the list.\" This is present in the default state.",
            "Each focusable tile element, should bearia-describedby=\"id-of-span-containing-instructional-text\"",
            "In the grabbed stateRemove the instructional text as the user has performed the action, but keep the containerChange the content of the live region, to be \"{App Name}: current position {x} of 6. Use the up and down arrows to move this app\"",
            "Remove the instructional text as the user has performed the action, but keep the container",
            "Change the content of the live region, to be \"{App Name}: current position {x} of 6. Use the up and down arrows to move this app\"",
            "In the \"Moved in List\" state, implement the same changes applied to Grabbed but:Update the live region text to be: \"{App Name}: new position {x} of 4.\"",
            "Update the live region text to be: \"{App Name}: new position {x} of 4.\"",
            "In the dropped stateUpdate the live region text to be: \"{App Name}: final position {x} of 4.\"Replace the hidden instructional text to be what it was in the base state",
            "Update the live region text to be: \"{App Name}: final position {x} of 4.\"",
            "Replace the hidden instructional text to be what it was in the base state"
          ]
        },
        {
          "type": "list",
          "items": ["Added missing title attributes"]
        },
        {
          "type": "list",
          "items": ["Fixed the color contrast issues on the Success Button"]
        },
        {
          "type": "list",
          "items": [
            "Changedslds-card__footerto a<footer />element",
            "Changed Tiles to be a list ofslds-tile's"
          ]
        },
        {
          "type": "list",
          "items": ["Removedforattributes on wrappingspanelements"]
        },
        {
          "type": "list",
          "items": [
            "Addedrole=\"dialog\"to theslds-datepicker",
            "Addedaria-labelto thedialogto describe its purpose",
            "Made the first day cell focusable as it is a ARIAgridwidget",
            "Addedaria-multiselectable=\"true\"to thegridto indicate you can selected multiple dates",
            "Removedheadersattribute from eachgridcell",
            "Added assistive text for when we mark today's date in the grid. We do this to provide additional meaning since the grey background color is not enough of an indicator to non-sighted users",
            "Changed the \"Today\" option to be a selectable cell, just like any other day in the grid, by removing its<a />tag"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed the container element to be a<section role=\"dialog\" />",
            "Addedaria-describedby=\"id_of_body_element\"to the element that holds thedialogrole. Gave the Composer body the same ID",
            "Changed the header to be to a<header />element",
            "Removed redundant word \"icon\" in assistive text for icons in the Overflow Menu items",
            "Removed a duplicaterole=\"dialog\"attribute from the Popout variant as it created nested dialogs",
            "Added a means to tell a Docked Composer is \"Minimized\" by adding Assistive Text to the header",
            "Changed the Composer body and footer to be truly hidden when minimized"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added assistive text to the icons used in the Lookup examples",
            "Upgraded the Lookups to ARIA 1.1 SpecificationSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Upgradedlistboxmarkup to include option group headings being accessible, to match PicklistSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Fixed Listboxoption's markup to not wrapdivelements inspanelements"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-live=\"assertive\"to the header for alerting a user of a change in status of a call",
            "Changed the Mute button to be an ARIA Toggle Button witharia-pressed=\"true|false\"",
            "Made \"Recent Activity\" on Incoming call example an<h3 class=\"site-text-heading_medium slds-m-top_none\" />",
            "Updated icon assistive text for icons in the Incoming Call example",
            "Added assistive text to the icons used in the Lookup examples on Log a Call",
            "Upgraded the Lookups to ARIA 1.1 SpecificationSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Upgradedlistboxmarkup to include option group headings being accessible, to match PicklistSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Fixed Listboxoption's markup to not wrapdivelements inspanelements"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed button text on \"with errors\" state from \"Settings\" to \"Review the Following Errors\""
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed invalid role offooterfrom the<footer />element",
            "Implemented the ARIA Toggle Button pattern usingaria-pressed=\"true|false\"on buttons. Provides indication of an active or open utility panel"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed the container element to be a<section role=\"dialog\" />",
            "Changed the header to be to a<header />element",
            "Made sure the content of a minimized Panel is not focusable by removing it from the DOM completely"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-controlsto the<button />element that performs the action",
            "Addedaria-expanded=\"true|false\"to the<button />element that performs the action",
            "Addedaria-hidden=\"true|false\"to theslds-section__contentwrapper",
            "Added an ID toslds-section__contentwhich the<button />uses as itsaria-controlsvalue"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed \"Like\" buttons to be<button />elements",
            "Changed \"Like\" buttons to be ARIA Toggle Buttons witharia-pressed=\"true|false\"",
            "Changed \"More Comments\" button to be a<button />element",
            "Changed \"Share\" buttons to be<button />elements"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Checkbox and Radio Buttons to match newer \"Explicit Label\" pattern"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-labelto the Notifications dialog",
            "Addedaria-describedbyto the Notifications dialog",
            "Upgrade the ARIA Combobox markup to ARIA 1.1 SpecificationSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Upgradedlistboxmarkup to include option group headings being accessible, to match PicklistSee Lookup Notes for details",
            "See Lookup Notes for details",
            "Fixed Listboxoption's markup to not wrapdivelements inspanelements",
            "Fixed Favorites Button to communicate pressed state by Implementing the ARIA Toggle Button pattern usingaria-pressed"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed the App Launcher link to be a<button />as it launches a Modal",
            "Fixed a malformedtitleattribute of the App Name",
            "Fixed thetitleattribute of the Object Switcher link to match visual text",
            "Fixed thetitleattribute of the Object Switcher Menu Button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed Menu item title attributes",
            "Removedaria-haspopup=truefrom dropdownli.",
            "Removedtabindex=\"0\"fromslds-context-bar__icon-action.",
            "Removedtabindex=\"-1\"fromslds-context-bar__icon-action's button.",
            "Addedaria-haspopup=\"true\"toslds-context-bar__icon-action's button.",
            "Added assistive text to active item for Current page."
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixedtitleattribute on the Split View Toggle Button",
            "Removedaria-haspopupfrom Split View Toggle Button",
            "Implemented a simple Expanding Section ARIA pattern on the Split View Toggle buttonAdded `aria-expanded=\"true|false\" to reflect stateAddedaria-controls=\"id_of_expanding_section\"to associate the button to the content it controls",
            "Added `aria-expanded=\"true|false\" to reflect state",
            "Addedaria-controls=\"id_of_expanding_section\"to associate the button to the content it controls",
            "Addedaria-controlsto eachrole=\"tab\"",
            "Created atabpanelfor eachtabAdded a unique ID to each which matches correspondingaria-controlsattributeAddedaria-labelledbyto each which matches correspondingtabID",
            "Added a unique ID to each which matches correspondingaria-controlsattribute",
            "Addedaria-labelledbyto each which matches correspondingtabID",
            "Updated the \"New Tab\" button text to match its function",
            "Updated the \"New Tab\" button title attribute",
            "Removedaria-haspopupattribute from \"New Tab\" button",
            "Addedaria-labelto the New Tabdialog",
            "Removed focusable hidden remove buttons in Pinned Tabs"
          ]
        },
        {
          "type": "list",
          "items": [
            "Movedaria-describedbyfrom theinputto the Tooltip Trigger<button />",
            "Removedaria-livefrom the Tooltip"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed therole=\"dialog\"element to be a<section />",
            "Changedslds-modal__headerto be a<header />element",
            "Changedslds-modal__footerto be a<footer />element",
            "Replaced selected Pills to be the new Listbox of Pills component",
            "Updated Lookup mark-up to match new structure. See Lookup notes"
          ]
        },
        {
          "type": "list",
          "items": [
            "Upgrade the ARIA Combobox markup to ARIA 1.1 SpecificationMovedrole=\"combobox\"attribute from theinputelement toslds-lookuproot elementMovedaria-expanded=\"true|false\"attribute from theinputelement toslds-lookuproot elementAddedaria-haspopup=\"listbox\"attribute toslds-lookuproot elementAddedautocomplete=\"off\"to theinputelementAddedaria-controls=\"\"to theinputelement which points to the ID of thelistboxAddedrole=\"textbox\"to theinputelementRemovedaria-ownsattribute from theinputelement as thelistboxis not a child of thecomboboxroleChangedtypeattribute on theinputelement to betext",
            "Movedrole=\"combobox\"attribute from theinputelement toslds-lookuproot element",
            "Movedaria-expanded=\"true|false\"attribute from theinputelement toslds-lookuproot element",
            "Addedaria-haspopup=\"listbox\"attribute toslds-lookuproot element",
            "Addedautocomplete=\"off\"to theinputelement",
            "Addedaria-controls=\"\"to theinputelement which points to the ID of thelistbox",
            "Addedrole=\"textbox\"to theinputelement",
            "Removedaria-ownsattribute from theinputelement as thelistboxis not a child of thecomboboxrole",
            "Changedtypeattribute on theinputelement to betext",
            "Upgradedlistboxmarkup to include option group headings being accessible, to match PicklistMovedrole=\"listbox\"attribute from theulelement to theslds-lookup__menuroot elementWhen alistboxhas option groups (aslds-lookup__item_label)ulelement hasrole=\"group\"with anaria-labelof the same text as theslds-lookup__item_labeltextslds-lookup__item_label, becomes a presentational list item by placing it inside anli[role=\"presentation\"]and being a child of theul, as thearia-labelon thegroupreplaces its functionWhen alistboxhas no option groups (noslds-lookup__item_label)ulelement hasrole=\"presentation\"and noaria-label",
            "Movedrole=\"listbox\"attribute from theulelement to theslds-lookup__menuroot element",
            "When alistboxhas option groups (aslds-lookup__item_label)ulelement hasrole=\"group\"with anaria-labelof the same text as theslds-lookup__item_labeltextslds-lookup__item_label, becomes a presentational list item by placing it inside anli[role=\"presentation\"]and being a child of theul, as thearia-labelon thegroupreplaces its function",
            "ulelement hasrole=\"group\"with anaria-labelof the same text as theslds-lookup__item_labeltext",
            "slds-lookup__item_label, becomes a presentational list item by placing it inside anli[role=\"presentation\"]and being a child of theul, as thearia-labelon thegroupreplaces its function",
            "When alistboxhas no option groups (noslds-lookup__item_label)ulelement hasrole=\"presentation\"and noaria-label",
            "ulelement hasrole=\"presentation\"and noaria-label",
            "Fixed Listboxoption's markup to not wrapdivelements inspanelements"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-checkedto Menu items withrole=\"menuitemcheckbox\"in all cases. Shouldn't just be added whentrue, settingfalseis important to communicate"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedaria-describedbyto theslds-modalelement. This points to ID ofslds-modal__content",
            "Addedaria-labelto Header Empty example, in the absence of a header with a heading tag"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated the checkbox mark-up to be the new \"explicit label\" version",
            "Addedaria-haspopup=\"true\"to \"More Actions\" button in the Panel header",
            "Changed \"Follow up on '15 contact\" to be an<h2 class=\"site-text-heading_large\" />element",
            "Changed the list of fields to be a list<ul />",
            "Switched the DOM order of the field and edit pencil, so the edit action comes after the field"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed the footer actions to be<button />elements instead of links",
            "Changed \"Matching all these filters\" to a heading for better hierarchy",
            "Changed the filters to be<button />elements instead of links.",
            "Locked filters are nowdisabled, which is possible with the change in element used, to be a<button />",
            "Each filter button now includes additional assistive text to better describe the action: \"Edit filter: \"",
            "Improved repetitive button text for the remove filter buttons. Now follows the format of\"Remove Filter: ${name_of_filter}\"instead of just \"Remove\"",
            "Panel error message converted fromaria-liveto berole=\"alert\", which is implicitly \"live\"",
            "Inline error messages are now associated to the invalid filter button witharia-describedbybeing placed on the offending button"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed focus so that only one stage is focusable at a time",
            "Fixed focus styling on stages",
            "Removedaria-livefrom stages",
            "Added non-visual indicator of \"Current Stage\" by adding \"Current Stage:\" assistive text",
            "Updated semantics when no coaching availableSwappedtabsettolistboxSwappedtabtooptionAddedaria-orientation=\"horizontal\"",
            "Swappedtabsettolistbox",
            "Swappedtabtooption",
            "Addedaria-orientation=\"horizontal\"",
            "Updatearia-controlson eachtabto match a unique ID",
            "Updates to expandable coaching tab panelsUpdate button text on coaching expand/collapse toggle button so it's clearAdd aria-expanded=\"false\" by default to theslds-tabs_path__linkwhich haverole=\"tab\"When thetabpanelis expanded,aria-expanded=\"true\"is set on the currently selectedtab",
            "Update button text on coaching expand/collapse toggle button so it's clear",
            "Add aria-expanded=\"false\" by default to theslds-tabs_path__linkwhich haverole=\"tab\"",
            "When thetabpanelis expanded,aria-expanded=\"true\"is set on the currently selectedtab",
            "Change the \"edit\" link to be a<button />in the coaching panels"
          ]
        },
        {
          "type": "list",
          "items": [
            "Upgrade the ARIA Combobox markup to ARIA 1.1 SpecificationMovedrole=\"combobox\"attribute from theinputelement toslds-picklistroot elementMovedaria-expanded=\"true|false\"attribute from theinputelement toslds-picklistroot elementAddedaria-haspopup=\"listbox\"attribute toslds-picklistroot elementAddedautocomplete=\"off\"to theinputelementAddedaria-controls=\"\"to theinputelement which points to the ID of thelistboxAddedrole=\"textbox\"to theinputelementRemovedaria-ownsattribute from theinputelement as thelistboxis not a child of thecomboboxroleChangedtypeattribute on theinputelement to betext",
            "Movedrole=\"combobox\"attribute from theinputelement toslds-picklistroot element",
            "Movedaria-expanded=\"true|false\"attribute from theinputelement toslds-picklistroot element",
            "Addedaria-haspopup=\"listbox\"attribute toslds-picklistroot element",
            "Addedautocomplete=\"off\"to theinputelement",
            "Addedaria-controls=\"\"to theinputelement which points to the ID of thelistbox",
            "Addedrole=\"textbox\"to theinputelement",
            "Removedaria-ownsattribute from theinputelement as thelistboxis not a child of thecomboboxrole",
            "Changedtypeattribute on theinputelement to betext",
            "Changed the expand trigger buttontitleattribute to match button text",
            "Moved the ID fromslds-dropdown__listtoslds-dropdownwithrole=\"listbox\"",
            "Implemented Listbox of Pills component on Multi Select states"
          ]
        },
        {
          "type": "list",
          "items": ["Add title attributes to all icons or avatars in a Pill"]
        },
        {
          "type": "list",
          "items": [
            "Popovers without headers getaria-labelapplied to thedialog",
            "\"Tesla Motors\" Panel heading changed toh2 class=\"site-text-heading_large\"",
            "Add a close button to all Popovers that don't have any",
            "Updated implementation guidelines"
          ]
        },
        {
          "type": "list",
          "items": [
            "Only applyaria-describedbyto markers when a tooltip is shown",
            "In the Modal example, DOM order is fixed to follow visual order",
            "Updates toslds-progress-barAddedrole=\"progressbar\"Addedaria-valuemin=\"0\"Addedaria-valuemax=\"100\"to essentially make the progress bar a percentageAddedaria-valuenowto track current progress",
            "Addedrole=\"progressbar\"",
            "Addedaria-valuemin=\"0\"",
            "Addedaria-valuemax=\"100\"to essentially make the progress bar a percentage",
            "Addedaria-valuenowto track current progress"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added an ID toslds-modal__contentforaria-describedbyto work on thealertdialog"
          ]
        },
        {
          "type": "list",
          "items": [
            "Made the \"To: My Followers\" definition list be part of the comment boxlabelas a string, to create a better label",
            "Made the Publisher Actions not focusable when hidden"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added missingrequiredattribute to Required and Error states"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed Sub TabstabpanelsID typos"]
        },
        {
          "type": "list",
          "items": [
            "Now uses a<nav />element as its parent",
            "Addedaria-labelto thenavelement so it's easily identifiable from other navigation regions on the same page",
            "Addedaria-current=\"page\"to the \"active\" link"
          ]
        },
        {
          "type": "list",
          "items": ["Name Value Pairs changed to definition lists"]
        },
        {
          "type": "p",
          "text": "The following classes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Addedslds-table_resizable-colsas a modifier toslds-table. Should be used if your table supports resizable columns."
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "slds-table_fixed-layoutcan now be used with the basic table -#396"
          ]
        },
        {
          "type": "list",
          "items": ["UpdatediOS implementation documentation"]
        },
        {
          "type": "list",
          "items": [
            "Substantial script rewrite to handle future token changes",
            "You can now use design tokens in Swift",
            "Updated tokens to Spring â17",
            "See detailedrelease notesfor design-system-ios"
          ]
        },
        {
          "type": "list",
          "items": ["New and improvedMessaging Guidelines"]
        },
        {
          "type": "p",
          "text": "The following components are now available:"
        },
        {
          "type": "list",
          "items": ["Added a toast for small columns -Small Column Toast"]
        },
        {
          "type": "p",
          "text": "The following site enhancements are now available: The following components are now available:"
        },
        {
          "type": "list",
          "items": [
            "Added Global Navigation Tab bar (Workspace Tabs) -Global Navigation Tab bar",
            "Added Checkbox Add Button -Checkbox Add Button",
            "Added Button Group List -Button Group List- the new recommended way to mark up button groups.",
            "Added Rich Text Editor -Rich Text Editor",
            "Added Global Header Notifications -Global Header Notifications",
            "Added Popover Header -Popover Header",
            "Added Popover Footer -Popover Footer",
            "Added Progress Indicator -Progress Indicator",
            "Added Walkthrough Popovers -Walkthrough Popovers",
            "Added Walkthrough Header -Walkthrough Header",
            "Added Success Button -Success Button",
            "Added Sub Tabs -Sub Tabs",
            "Added Dynamic Lists Dropdown -Dynamic Lists"
          ]
        },
        {
          "type": "p",
          "text": "The following classes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Addedslds-float_noneutility -Utilities âº Floats âº Float None",
            "Addedslds-button_icon-container-moremodifier -Button Icons âº Button Icon with Dropdown",
            "Addedslds-button_icon-more-filledfor more buttons that require a background.",
            "Addedslds-text-color_inverseutility -Utilities âº Text âº Color",
            "Addedslds-text-color_inverse-weakutility -Utilities âº Text âº Color",
            "Addedslds-is-absoluteutility for overriding a components default positioning -Utilities âº Position âº Absolute",
            "Added additional spacing support for normalizing padding on a grid region",
            "Addedslds-border_bottomutilityUtilities âº Borders âº Border Bottom",
            "Addedslds-border_leftutilityUtilities âº Borders âº Border Left",
            "Addedslds-border_rightutilityUtilities âº Borders âº Border Right",
            "Addedslds-border_toputilityUtilities âº Borders âº Border Top",
            "Addedslds-box_xx-smallutilityUtilities âº Themes âº Box",
            "Added support for dark backgrounds onslds-dropdownby adding modifierslds-dropdown_inverse",
            "Added support for narrow region on feeds."
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Global actions icon on global header updated to have a background color",
            "Changed global header icon's color and size",
            "Changed background color of docked panelsDocked Utility Panel -Docked Utility PanelDocked Composer Panel -Docked Composer Panel",
            "Docked Utility Panel -Docked Utility Panel",
            "Docked Composer Panel -Docked Composer Panel",
            "Cards are now responsive -Cards",
            "Improvements made toslds-type-focusutility -Utilities âº Interactions",
            "Avatars now support initials.",
            "Stateful icon buttons are now compatible withslds-button_icon-container",
            "Spacing adjustments made to lookup items",
            "Spacing adjustments made to feeds"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Accessibility improvement - Picklists changed to a read-only combobox with a listbox.",
            "Add collapsable margin toslds-card__bodyto account for white space when the footer is empty",
            "Data Table âº Inline edit now has full support",
            "Icon inside of an input field now uses the correct token",
            "Modal content properly wraps and hyphenates longform text",
            "Fixed flex issue on docked composer that made popout example stretch the height of the viewport"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being marked as deprecated in this release and will be removed in three releases:"
        },
        {
          "type": "list",
          "items": [
            "Process âº Wizard - Please use the new Progress Indicator insteadProgress Indicator"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being removed in this release:"
        },
        {
          "type": "list",
          "items": [
            "$css-prefixis no longer available to change the prefix ofslds-class names to something of your choice. As an alternative, please use this PostCSS plugin to customize class name prefixes:postcss-slds-prefix.",
            "Removed custom styled scrollbar mixin fromslds--scrollable-helpers",
            "Deleted legacy font-files for older, unsupported browsers (*.eot, *.svg)"
          ]
        },
        {
          "type": "p",
          "text": "Tokens are now part of the Lightning Design System. Token files previously available from the@salesforce-ux/design-tokensnpm package are now available indesign-tokens/distin the@salesforce-ux/design-systempackage (the same applies for the zip download). The following tokens have been add/removed/deprecated in this release:"
        },
        {
          "type": "list",
          "items": [
            "Addedforce-base/fill.jsonAdded token:FILL_HEADER_BUTTONAdded token:FILL_HEADER_BUTTON_HOVER",
            "Added token:FILL_HEADER_BUTTON",
            "Added token:FILL_HEADER_BUTTON_HOVER",
            "Addedforce-base/text-transform.jsonAdded token:TEXT_TRANSFORM",
            "Added token:TEXT_TRANSFORM",
            "Added token:FONT_FAMILY_TEXT",
            "Added token:FONT_FAMILY_HEADING",
            "Added token:Z_INDEX_STICKY",
            "Added token:FONT_FAMILY_TEXT",
            "Added token:FONT_FAMILY_HEADING",
            "Added token:PROGRESS_COLOR_BACKGROUND",
            "Added token:PROGRESS_COLOR_BACKGROUND_SHADE",
            "Added token:PROGRESS_COLOR_BORDER",
            "Added token:PROGRESS_COLOR_BORDER_SHADE",
            "Added token:PROGRESS_COLOR_BORDER_HOVER",
            "Added token:PROGRESS_COLOR_BORDER_ACTIVE",
            "Added token:PROGRESS_BAR_HEIGHT",
            "Added token:PROGRESS_BAR_COLOR_BACKGROUND",
            "Added token:PROGRESS_BAR_COLOR_BACKGROUND_FILL",
            "Added token:COLOR_STROKE_BRAND",
            "Added token:COLOR_STROKE_BRAND_HOVER",
            "Added token:COLOR_STROKE_BRAND_ACTIVE",
            "Added token:COLOR_STROKE_DISABLED",
            "Added token:COLOR_STROKE_HEADER_BUTTON",
            "Added token:FILL_BRAND",
            "Added token:FILL_BRAND_HOVER",
            "Added token:FILL_BRAND_ACTIVE",
            "Added token:BORDER_STROKE_WIDTH_THIN",
            "Added token:BORDER_STROKE_WIDTH_THICK",
            "Added token:COLOR_BACKGROUND_BUTTON_SUCCESS",
            "Added token:COLOR_BACKGROUND_BUTTON_SUCCESS_HOVER",
            "Added token:COLOR_BACKGROUND_BUTTON_SUCCESS_ACTIVE",
            "Added token:COLOR_TEXT_SUCCESS_INVERSE",
            "Added token:CUSTOM_101",
            "Added token:CUSTOM_102",
            "Added token:CUSTOM_103",
            "Added token:CUSTOM_104",
            "Added token:CUSTOM_105",
            "Added token:CUSTOM_106",
            "Added token:CUSTOM_107",
            "Added token:CUSTOM_108",
            "Added token:CUSTOM_109",
            "Added token:CUSTOM_110",
            "Added token:CUSTOM_111",
            "Added token:CUSTOM_112",
            "Added token:CUSTOM_113",
            "Added token:CUSTOM_NOTIFICATION",
            "Added token:DATADOTCOM",
            "Added token:RTC_PRESENCE",
            "Added token:PRODUCT_CONSUMED",
            "Added token:PRODUCT_TRANSFER",
            "Added token:PRODUCT_ITEM",
            "Added token:PRODUCT_ITEM_TRANSACTION",
            "Added token:LOCATION",
            "Added token:ADDRESS",
            "Added token:CAROUSEL",
            "Added token:ASSIGNED_RESOURCE",
            "Added token:OPERATING_HOURS",
            "Added token:PRODUCT_REQUIRED",
            "Added token:RESOURCE_ABSENCE",
            "Added token:RESOURCE_CAPACITY",
            "Added token:RESOURCE_PREFERENCE",
            "Added token:RESOURCE_SKILL",
            "Added token:SERVICE_TERRITORY_MEMBER",
            "Added token:SERVICE_APPOINTMENT",
            "Added token:SERVICE_REPORT",
            "Added token:SERVICE_RESOURCE",
            "Added token:SERVICE_TERRITORY",
            "Added token:SKILL",
            "Added token:SKILL_REQUIREMENT",
            "Added token:TIMESLOT",
            "Added token:WORK_TYPE",
            "Added alias:SANS_SERIF",
            "Added alias:MALIBU",
            "Added alias:SANS_SERIF",
            "Added alias:EBONY_CLAY",
            "Added alias:OXFORD_BLUE",
            "Added alias:RIVER_BED",
            "DeprecatedFONT_FAMILY"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Title attributes were added to all button icons and truncated text for accessibility",
            "Added line-height fix for.slds-buttonâicon-border-inverse",
            "Amended.slds-button_icondocumentation",
            "Removed unnecessary.slds-not-selectedclass from stateful.slds-button_iconmarkup and adjusted documentation"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Included the logo SVG asset used in the Global header",
            "Use@supportfor progressive enhancement ofmix-blend-modefor active/hover states in Global Navigation",
            "Removed the demo style.slds-text-align_centerfrom.slds-card__body"
          ]
        },
        {
          "type": "p",
          "text": "Customizing the CSS class names by customizing$css-prefixis deprecated and will be removed in version 2.2.\nAs an alternative, please use this PostCSS plugin to customize class name prefixes:postcss-slds-prefix. The following site enhancements are now available:"
        },
        {
          "type": "list",
          "items": [
            "Moved Archives section up on Downloads page, and added a link to the section on the homepage, for better visibility.",
            "New Checkbox Toggle guidelines underData Entry section.",
            "New \"Touch\" section under \"Components\", where youâll find patterns especially optimized for touch",
            "Link to Styling with Design Tokens on the platform added onDesign Tokens,Lightning Components, andDownloadspages.",
            "Button Icon component has been moved out of Buttons and into its own categoryButton Icon",
            "Picklist component has been moved out of Menus and into its own categoryPicklist"
          ]
        },
        {
          "type": "p",
          "text": "The following components are now available:"
        },
        {
          "type": "list",
          "items": [
            "App Launcher -App Launcher Component",
            "Global Navigation - Standard context bar -Global Navigation Component",
            "Global Header -Global Header Component",
            "Docked Utility Bar -Docked Utility Bar Component",
            "Filtering panel -Filtering Panel Component",
            "Files -File Components",
            "File selector -File Selector",
            "Feed v2 -Feeds Component",
            "Indeterminate checkbox -Indeterminate checkbox component",
            "Button Icon Inverse - Bordered -Button Icon Inverse with Border",
            "Button Icon Inverse - Hint Hover -Button Icon with Hint Hover",
            "Button Icon Error -Button Icon Error",
            "Image Cards -Figure Card Component",
            "Image Ratios -Figure Ratio Component",
            "Vertical Navigation color variation -Vertical Navigation"
          ]
        },
        {
          "type": "p",
          "text": "The following classes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Text color helpers -Utilities âº Text âº Color",
            "Text title utility -.slds-text-title-Utilities âº Text âº Text Title",
            "Text link utility - Made text inside of.slds-text-link_resetappear as a link -Utilities âº Interactions âº Text Link",
            "Truncation containersUtilities âº Truncation",
            "Absolute sizes utility classes:.slds-size_xx-small,.slds-size_x-small,.slds-size_medium,.slds-size_large,.slds-size_x-large,.slds-size_xx-largeand their responsive equivalents - inUtilities âº Sizing",
            "Hyphenation utility for non-truncated headings in narrow containers -Utilities âº Hyphenation",
            "Position utilities -Utilities âº Position",
            "Table column borders - Added vertical column borders on a table by applying.slds-table_col-bordered",
            "Name/Value pair lists - 3 variations - horizontal, inline and stacked -Utilities âº Lists âº Name Value Pair",
            "Generated grid column spans 1, 2, 3, 4, 5, 6, 7, 8, and 12 for all breakpoints",
            "Added archives for previous versions of the site for customers that can't upgrade yet. These site archives are currently available at the bottom of theDownloads page"
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Docked Form Footerpopover tooltip naming changed to popover.",
            "CSS Scoping Toolis now only necessary when building components to be included in Visualforce",
            "Using SLDS in Lightninghas been updated to include information about Lightning Out, Lightning Components for Visualforce, and Lightning Applications.",
            "Nubbins onPopovershave been moved .5rem/8px closer to the respective edge of the popover to match the spec",
            "Pillshave been updated with a more accessible DOM. They are no longer made from an anchor, but instead contain the anchor. Documentation is updated. (Old pills will not break)",
            "Checkbox Togglehas an updated design with the ability to add custom words below the toggle",
            "CheckboxandRadioshave been updated with a new, more accessible than ever DOM structure. (Your old DOM will not break.)",
            "Brightened yellow background onmarkelement.",
            "Text selected with your mouse is light blue.",
            "Renamed \"slide-out\" panel to \"details\" -Detail Panel Component",
            "Renamed \"Base\" data table to \"Basic\" data table -Data Table Component",
            "Abstracted complex data table features into a variant named \"Advanced\" data table -Data Table Component",
            "Improvements made to.slds-text-link_reset-Utilities âº Interactions âº Text Link Reset",
            "Removed light font-weight from the text utility.slds-text-heading_small-Utilities âº Text âº Text Heading Small",
            "Removedposition: relativefrom.slds-grid",
            "Feeds are now responsive",
            "Added close button to error popover so a screen reader can access popover",
            "Added animated waffle icon to Global NavigationGlobal Navigation",
            "Feeds:Changed post's comment metric labels to lowercaseAdded hint-hover to post's comment action overflow iconChanged post's comment \"link\" text to use.slds-color-link_weakRemoved dotted line separator from post's attachment payloadMoved URL of post's attachment to the bottom of the content orderingRemoved truncation from preambleReduced white space between feed items",
            "Changed post's comment metric labels to lowercase",
            "Added hint-hover to post's comment action overflow icon",
            "Changed post's comment \"link\" text to use.slds-color-link_weak",
            "Removed dotted line separator from post's attachment payload",
            "Moved URL of post's attachment to the bottom of the content ordering",
            "Removed truncation from preamble",
            "Reduced white space between feed items",
            "UpdatedActivity Timeline Email exampleto show the to and from with truncation"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Recorded home vertical accessibility fixesAddedaria-haspopup=\"true\"to action overflow buttonsAdded assistive text for iconRemoved unnecessary aria roles from action overflow buttonsImproved assistive text verbiageMade multiple value field entirely clickable to invoke dropdown",
            "Addedaria-haspopup=\"true\"to action overflow buttons",
            "Added assistive text for icon",
            "Removed unnecessary aria roles from action overflow buttons",
            "Improved assistive text verbiage",
            "Made multiple value field entirely clickable to invoke dropdown",
            "Global header accessibility fixesModified tab order of global header actionsAddedtitleattribute to global header actionsChanged avatar wrapper from anchor to a buttonAllowed.slds-assistive-textto become visible on focus if.slds-assistive-text_focusis usedAdded aria roles to global search inputChanged global search listbox options to be non-actionableMoved \"click enter to search\" and \"go to\" options back into<ul>so they can be discovered by screen readersAdded.slds-has-focusto apply focus state on listbox options when keyboard interactions are usedMoved clear button to the right of the input to visually match tab order",
            "Modified tab order of global header actions",
            "Addedtitleattribute to global header actions",
            "Changed avatar wrapper from anchor to a button",
            "Allowed.slds-assistive-textto become visible on focus if.slds-assistive-text_focusis used",
            "Added aria roles to global search input",
            "Changed global search listbox options to be non-actionable",
            "Moved \"click enter to search\" and \"go to\" options back into<ul>so they can be discovered by screen readers",
            "Added.slds-has-focusto apply focus state on listbox options when keyboard interactions are used",
            "Moved clear button to the right of the input to visually match tab order",
            "Lookup/Global Header Search accessibility fixesImproved semantics of dropdown menusAppliedrole=separatorto dropdown menu list items that do not have an actionable elementAppliedrole=presentationto dropdown menu list itemsChanged<p>wrapping dropdown menu items text to<span>Dropdown menu items have a defaulttabindex=\"-1\", tab focused items changed to atabindex=\"0\"",
            "Improved semantics of dropdown menus",
            "Appliedrole=separatorto dropdown menu list items that do not have an actionable element",
            "Appliedrole=presentationto dropdown menu list items",
            "Changed<p>wrapping dropdown menu items text to<span>",
            "Dropdown menu items have a defaulttabindex=\"-1\", tab focused items changed to atabindex=\"0\"",
            "Utility bar accessibility fixesAdded landmarkrole=\"footer\"to utility barAddedaria-label=\"Utility Bar\"description to utility barAdded hidden heading to utility barAdded ariarole=dialogandaria-labelledbyto utility bar panelChanged panel header text to be wrapped in a heading with a id to reference thearia-labelledbyPlaced utility bar buttons inside<ul>",
            "Added landmarkrole=\"footer\"to utility bar",
            "Addedaria-label=\"Utility Bar\"description to utility bar",
            "Added hidden heading to utility bar",
            "Added ariarole=dialogandaria-labelledbyto utility bar panel",
            "Changed panel header text to be wrapped in a heading with a id to reference thearia-labelledby",
            "Placed utility bar buttons inside<ul>",
            "Files accessibility fixesFixed invalid markup by moving button group outside of anchorImage overlay is now enabled by adding an extra html element before the image and adding the class.slds-image_overlay",
            "Fixed invalid markup by moving button group outside of anchor",
            "Image overlay is now enabled by adding an extra html element before the image and adding the class.slds-image_overlay",
            "Card accessibility fixesMoved<header>element to only contain the card header text, rather than the text and overflow menuChanged<p>tags with truncation in related list markup to<span>tags",
            "Moved<header>element to only contain the card header text, rather than the text and overflow menu",
            "Changed<p>tags with truncation in related list markup to<span>tags",
            "Made primary labels of compound fields capital",
            "Dropdowns appear on icon focus within Global Navigation",
            "Labeled the dialog with the heading of the modal usingaria-labelledby=\"id_of_heading\"in the app launcher component",
            "Tables accessibility fixes: all tables now use the same truncation method when text is too long in a cell and show the full text when truncated text is hovered",
            "Accessibility fixes for list builder",
            "Fixed an issue where examples contained the same ID multiple times",
            "Feeds accessibility fixesComments are now list items in an unordered list structureThe browser shows a focus ring when avatars are focused",
            "Comments are now list items in an unordered list structure",
            "The browser shows a focus ring when avatars are focused",
            "Accessibility fixes to Menus and Picklist, including Menus used in composite SLDS componentsRemoved ofaria-expandedon containersrole=\"presentation\"added on list items to remove them from the accessibility treeCorrected use ofmenuitemcheckboxfor selectable menu items, with the use ofaria-checkedinstead ofaria-selectedCorrected sub heading menus which was split across multiple un-ordered listsIncluded line separators and sub-heading separators into the accessibility tree withrole=\"separator\"",
            "Removed ofaria-expandedon containers",
            "role=\"presentation\"added on list items to remove them from the accessibility tree",
            "Corrected use ofmenuitemcheckboxfor selectable menu items, with the use ofaria-checkedinstead ofaria-selected",
            "Corrected sub heading menus which was split across multiple un-ordered lists",
            "Included line separators and sub-heading separators into the accessibility tree withrole=\"separator\"",
            "Addedaria-describedbyon textarea element to show error message ID",
            "Addedaria-liveattribute to the stateful icon button",
            "Addedaria-describedbyon select element to show error message ID",
            "Addedaria-haspopupon Activity Timeline menu buttons, and updated each list item to use an<h3 class=\"site-text-heading_medium slds-m-top_none\">tag",
            "Added hyphenation code to popovers so that long words will break and wrap"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being marked as deprecated in this release and will be removed in three releases:"
        },
        {
          "type": "list",
          "items": [
            "Feeds v1 - Design has changed to v2 -Feeds v2 Component",
            "Text heading label utility - Use Text title utilities instead -Utilities âº Text âº Text Title"
          ]
        },
        {
          "type": "p",
          "text": "The following features or demos are being removed in this release:"
        },
        {
          "type": "list",
          "items": [
            "Removed inverse and state themes from examples to provide clarity of usage."
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Card a11y fixesCard semantically changed to anarticleCard header semantically changed to aheaderAddedaria-haspopup=\"true\"to action overflow button since it invokes a dropdown menuWrapped card header text in an<h2 class=\"site-text-heading_large\">",
            "Card semantically changed to anarticle",
            "Card header semantically changed to aheader",
            "Addedaria-haspopup=\"true\"to action overflow button since it invokes a dropdown menu",
            "Wrapped card header text in an<h2 class=\"site-text-heading_large\">",
            "Fixed label for / textarea id mismatch in form textarea example",
            "Fixed modal close button styling so the focus halo no longer overlaps with the modal body",
            "Labeled the dialog with the heading of the modal usingaria-labelledby=\"id_of_heading\"and removedaria-hidden=\"false\"from modal",
            "Added an example usage ofslds-table_stripedin the basic data table example",
            "Reverted modal components for the touch devices to prototype status while a fix for using them in Salesforce1 is found",
            "Added a title attribute to the truncation example",
            "Changed status of single-line truncation to dev-ready",
            "Fixed an issue where<legend>were bold in visual force - Fixes#216",
            "Addedaria-describedbyattribute on Tooltip component trigger"
          ]
        },
        {
          "type": "list",
          "items": [
            "The Sass file architecture was reorganized for better maintainability -see commit de2dc7ffor a full breakdown of changes"
          ]
        },
        {
          "type": "list",
          "items": [
            "Revamped \"Getting Started\" section.",
            "Renamed \"Design\" section to \"Guidelines\"",
            "Moved \"Accessibility\" and \"Voice & Tone\" sections to Guidelines"
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Pills now reference a token that allow for consistent heights in all context"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Text inputs are referencing the correct 32px tall token - fixes https://github.com/salesforce-ux/design-system/issues/150",
            "Resolve issue where<th>stayed white on striped row whenslds-table_stripedis applied - fixes https://github.com/salesforce-ux/design-system/issues/232",
            "Toggle checkboxes are now aligned vertically with their label (slds-form-element__label m-bottom--âºslds-form-element__label slds-m-bottom_none) âCheckbox Toggle variant"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being removed in this release:"
        },
        {
          "type": "list",
          "items": [
            "Removed incorrect spec for lookups with active selection(s)"
          ]
        },
        {
          "type": "p",
          "text": "The following site enhancements are now available:"
        },
        {
          "type": "list",
          "items": [
            "Grid system moved to utilities and renamed to \"Grid\"",
            "Media object moved to utilities",
            "New states added for button-groups showing overflow dropdown",
            "Cards variant navigation has been improved",
            "Data table variant navigation has been improved",
            "Lookup variant navigation has been improved",
            "List variant navigation has been improved"
          ]
        },
        {
          "type": "p",
          "text": "The following components are now available:"
        },
        {
          "type": "list",
          "items": [
            "Checkbox Toggle -Checkbox toggle component",
            "Checkbox Alternate -Checkbox alternate component",
            "Card - Related list with tiles -Related list card with tiles component",
            "Data Table - Basic and Advanced -Data table component",
            "Detail Panel with Inline Edit Form -Detail panel component",
            "Docked Composer - Voice Integration -Voice docked composer component",
            "Modal with no header and/or no footer -Modal component",
            "Lookups spec updated - Single and Polymorphic -Lookup component",
            "Page headers spec updated -Page Header component",
            "Vertical Navigation for in-page navigation -Vertical navigation component",
            "Radio Group Alternate -Radio group alternate component",
            "Tree Grid -Tree grid component"
          ]
        },
        {
          "type": "p",
          "text": "The following classes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Alignment utility - Absolute Center -Alignment - Absolute center utility",
            "Interaction utilities - Link reset -Interaction Utilities",
            "Text Utility - Heading label normal -Heading label normal",
            "Theme Utility - Light version theme texture -Theme texture",
            "Position input icons on both sides of the input container -Input",
            "Position utilities - Relative and Static -Position Utilities"
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Overall, things will appear visually tighter",
            "Added additional space between buttons in the modal footer",
            "Font sizes have been reduced",
            "Page Headers are visually smaller",
            "Page Header details are now on white and align to the left",
            "Modals are visually tighter",
            "All buttons are visually smaller",
            "Form Elements are visually smaller",
            "Activity timeline sizing & spacing is reduced",
            "Visual density changes in cards",
            "Visual density changes in popovers",
            "\"View all\" links in cards and popover panels are now aligned to the right",
            "slds-modal_contentshould use the additive class ofslds-p-vertical_largeandslds-p-horizontal_x-large, instead ofslds-p-around_medium.",
            "Removed first and last cell padding from Data Tables to allow nesting. New\nclass.slds-table_cell-buffercan be added to the table or.slds-cell-buffer_leftand.slds-cell-buffer_rightfor individual cell application.",
            "Field level help icon moved to the right of the input label",
            "Removed over-reaching a:focus styles due to a recent FFOX visual change",
            "Data table sortable headings now have actionable area so they can be focusable",
            "Improved interactions for resize element on data tables",
            "Docked Composer has improved markup, focusing on semantic structure and identifying the component correctly to Assistive Technology as a labelleddialog.",
            "Datepicker has improved markup, focusing on semantic structure and identifying proper aria roles for dates.",
            "Resolved semantic bug by making Pill container a<span>.<a>moved inside and adjacent to the close button.",
            "Notification Prompt has improved accessibility in better identifying the component to screen readers usingaria-role=\"alertdialog\",aria-labelledbyandaria-describedby. The redundantslds-modal__closebutton has also been removed."
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Truncation class is added to headings in the Edit Form for Touch",
            "Removed max-height and animation on.slds-section__contentto prevent collision with JavaScript implementations",
            "Fixed IE11 page header truncation bug"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being marked as deprecated in this release and will be removed in three releases:"
        },
        {
          "type": "list",
          "items": [
            "Lookups have been updated. Version 1.0.0 has been deprecated. Will continue to work but please update to new markup -Lookup component",
            "Page headers have been updated. Version 1.0.0 has been deprecated. Will continue to work but please update to new markup -Page Header component",
            ".slds-toggle-visibilityis no longer needed in button-groups. The final button will no longer disappear if it is a button-icon, but instead will gray down like a normal disabled button.",
            ".slds-button-space-leftis no longer supported. Please use spacing utilities instead.",
            ".slds-button_icon-bareis no longer needed. Please use.slds-button_iconinstead.",
            ".slds-card_emptyis no longer needed. Please use.slds-text-align_centerutility class instead.",
            ".slds-buttoninside of.slds-is-sortableis no longer needed. The entire cell is hyperlinked now, no need for the button.",
            ".slds-form-element__helperis no longer supported.",
            ".slds-input__iconno longer supports a color by default. Please use.slds-icon-text-defaulton the SVG icon instead.",
            ".slds-icon__containeris no longer supported. Please use.slds-icon_containerinstead.",
            ".slds-icon-custom-XXis no longer supported. Please use.slds-icon-custom-customXXinstead.",
            ".slds-dropdown_nubbin-topis no longer supported. Please use.slds-nubbin_topinstead.",
            ".slds-has-icon_left,.slds-has-icon_right, and.slds-has-icon_left-rightwithin dropdowns are no longer needed. Icons can be placed within the flow of a.slds-dropdown__item.",
            ".slds-modal-backdropis no longer supported. Please use.slds-backdropinstead.",
            ".slds-notify-containeris no longer supported. Please use.slds-notify_containerinstead.",
            ".slds-pill-containerand.slds-pill__containerare no longer supported. Please use.slds-pill_containerinstead.",
            ".slds-pill__container_bareis no longer supported. Please use.slds-pill_container_bareinstead.",
            ".slds-tabs__itemis no longer supported. Please use specific element selectors instead, such as.slds-tabs_default__itemor.slds-tabs_scoped__item.",
            ".slds-tooltipand.slds-tooltip__bodyare no longer supported. Please use.slds-popoverand.slds-popover__bodyinstead.",
            ".slds-tree-containeris no longer supported, please use.slds-tree_containerinstead.",
            ".slds-col-rule_left,.slds-col-rule_right,.slds-col-rule_top, and.slds-col-rule_bottomare no longer supported. Please use.slds-col_rule-left,.slds-col_rule-right,.slds-col_rule-top, and.slds-col_rule-bottominstead.",
            ".slds-nowrap_small,.slds-nowrap_medium, and.slds-nowrap_largeare no longer supported. Please use.slds-small-nowrap,.slds-medium-nowrap, and.slds-large-nowrapinstead.",
            ".slds-align-content-centeris no longer supported. Please use.slds-align_absolute-centerinstead.",
            ".slds-has-dividersis no longer supported. Please use.slds-has-dividers_{position}instead.",
            ".slds-has-divideris no longer supported. Please use.slds-has-divider_{position}instead.",
            ".slds-has-cardsis no longer supported. Please use.slds-has-divider_aroundinstead.",
            ".slds-has-cards_spaceis no longer supported. Please use.slds-has-divider_around-spaceinstead.",
            ".slds-section-titleis no longer supported. Please use.slds-section__titleinstead.",
            ".slds-collapsedis no longer supported. Please use.slds-is-collapsedinstead.",
            ".slds-expandedis no longer supported. Please use.slds-is-expandedinstead.",
            "The rule that hides the close button in Notification Prompt.slds-modal_prompt .slds-modal__closeis no longer needed as the HTML should be removed. Please remove the button from the dialog header."
          ]
        },
        {
          "type": "p",
          "text": "The following features are being removed in this release:"
        },
        {
          "type": "list",
          "items": [
            "Removed the$static-icon-pathconfiguration variable, since it wasnât used anywhere in the codebase",
            "Removedslds-button_small, since itâs the same as the new default button size",
            "Removedslds-input_small, since itâs the same as the new default input size",
            "Removedslds-tile__title, since it didn't apply any styles"
          ]
        },
        {
          "type": "p",
          "text": "The Lightning Design System CSS is now automatically included for Lightning Components running in the Lightning Experience and Salesforce S1 mobile application (viaapp.css). It is no longer necessary to add a static resource for Lightning Components running within these environments. Starting in 2.0.x, the Lightning Design System is no longer available as an unmanaged package. Also, the scoped CSS files (salesforce-lightning-design-system-vf.cssandsalesforce-lightning-design-system-ltng.css) are no longer distributed as part of the Design System zip file (available in theDownloadspage). As an alternative, you may now generate your own scoped Design System zip file using the newCSS Scoping Tooland upload it as a static resource as documented on the toolâs page. However, we strongly recommend that you do not install SLDS as a static resource when building for Lightning. Resources:"
        },
        {
          "type": "list",
          "items": [
            "CSS Scoping Tool",
            "Using SLDS in Lightning",
            "Using SLDS in Visualforce"
          ]
        },
        {
          "type": "list",
          "items": [
            "Adding a background color to icons from thecustom setis now done using theslds-icon-custom-customXXclass (e.g.slds-icon-custom-custom25), instead ofslds-icon-custom-XX(deprecated). This change addresses#203",
            "Improved accessibility of thebreadcrumbs component",
            "The Design System now allows developers to load Salesforce webfonts using their preferred method instead of the default@font-facerules. To disable the default font loading method, set$slds-load-webfonts: false;before importing the Design System Sass file.",
            "The project is now compatible with Node.js 6",
            "Search! You can now get faster to components and the deepest parts of the documentation using the search field at the top of the navigation"
          ]
        },
        {
          "type": "list",
          "items": [
            "Addedtitleattributes to icon containers, noticeably improving accessibility for users of pointing devices such as mice and trackpads",
            "Improved the structure of theicon componentsection, making it easier for you to discover how to decorate your Lightning apps with our beautiful icons",
            "Fixed the standard call icon, which gets its fancy yellow background back, instead of a purple one that had been assigned to it for obscure reasons (weâve put our best designers on the case!)",
            "Fixedan issuewherenpm installwould fail on Windows - which is only fair to our developer friends who are on PCs"
          ]
        },
        {
          "type": "list",
          "items": ["Fixed Sass build issue for npm module"]
        },
        {
          "type": "list",
          "items": [
            "Added a link to anarchive of v1.0.0, so you can access the documentation and downloads for that previous version",
            "Generated the unmanaged package for the 1.0.2 patch release",
            "Fixed the application's version number in the Sass configuration"
          ]
        },
        {
          "type": "p",
          "text": "Happy birthday! The Lightning Design System turns 1... The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Improved accessibility in the record home variant of the page header component (remove multiple<dl>elements, and use a single<ul>instead) -Page Headers"
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Use relative paths to point to assets, fixes a bug where running SLDS in certain environments would fail to load assets - Fixesdesign-system/issues/83",
            "Form element breakpoints now fire at small breakpoint rather than large breakpoint - Fixesdesign-system/162",
            "Fixed a bug in the Tree component that occurred in the scoped version of SLDS and prevented nested branches from being properly indented  - Fixesdesign-system/issues/91anddesign-system/issues/164",
            "Fixed the file naming structure so that standard Sass implementations can watch the entire project and compile the framework correct files on the fly.",
            "Fixed a bug where compilation would fail when using Ruby Sass - Fixesdesign-system/issues/173"
          ]
        },
        {
          "type": "p",
          "text": "The following site enhancements are now available:"
        },
        {
          "type": "list",
          "items": [
            "Components and their variants can now be built with states and will show up in the component variant & states navigation on the right, when available",
            "Improved Component Overview tables for more narrow readability",
            "Improved status labels. Now associated with colors and contain more information",
            "Markup and Style guidelines with BEM information -Markup and Style Guidelines",
            "Resources Information -Resource Links",
            "Updated documentation and accessibility information for tabs -Tabs",
            "Improved Grid System documentation -Grid System",
            "Copy updates on components to represent Voice & Tone Guidelines"
          ]
        },
        {
          "type": "p",
          "text": "The following components are now available:"
        },
        {
          "type": "list",
          "items": [
            "Docked Composer -Docked Composer component",
            "Picklist Multi Select menu -Picklist Multi Select component",
            "Fixed text with inputsInput component state",
            "Inline Level Help -Inline Level Help component",
            "Sales Path -Sales Path component",
            "Setup Wizard -Wizard component",
            "Added an elegant way to add spacing between specific grid items â auto functionality in flexbox.Alignment Item Bump Variant",
            "Popover color themes added -Popover Theme Variant",
            "TreeTree Base Component- Tree was completely rebuilt and is now a new component"
          ]
        },
        {
          "type": "p",
          "text": "Mobile:"
        },
        {
          "type": "list",
          "items": [
            "Dialog Menus for small form factorPrompts for Touch",
            "Action overflow for touch -Action Overflow component",
            "Added Edit dialog form for touch devices -Edit Dialog for Touch component",
            "Page Header -Page Header component"
          ]
        },
        {
          "type": "p",
          "text": "The following classes are now available:"
        },
        {
          "type": "list",
          "items": [
            "Added max-width sizing utilities -Max Width sizing",
            "Added zero spacing utility classes -Spacing utilities",
            "Additional Grid System classes:Added.slds-grid_align-endfor horizontal alignment on main grid axisAdded.slds-grid_vertical-align-endand.slds-grid_vertical-align-centerfor vertical alignment on grid cross axisAdded.slds-grid_stretchfor multi-row vertical stretch supportAdded.slds-grid_reverseand.slds-grid_vertical-reverseto reverse the direction of the grid",
            "Added.slds-grid_align-endfor horizontal alignment on main grid axis",
            "Added.slds-grid_vertical-align-endand.slds-grid_vertical-align-centerfor vertical alignment on grid cross axis",
            "Added.slds-grid_stretchfor multi-row vertical stretch support",
            "Added.slds-grid_reverseand.slds-grid_vertical-reverseto reverse the direction of the grid",
            "Added.slds-text-errorfor use on icons for validation errors",
            "Added color to user selection to force good contrast on dark backgrounds"
          ]
        },
        {
          "type": "p",
          "text": "The following changes have been made in this release:"
        },
        {
          "type": "list",
          "items": [
            "Removed Spinner gifs and refactored as CSS -Spinner component",
            "Source order of both Reversed and Double Media Objects changed. They are no longer reordered using flexbox' order property.Media Objects component",
            "Activity Timeline reflects Media Object changes. Also removeddlwith singledt&ddpairs and replaced withspans.",
            "Field-level help popover background color token update -Popover colors",
            "Switched media queries to useeminstead ofpx",
            "Removed icon color from.slds-input__iconso an icon color class is now additionally required",
            "Reordered tokens so large form factor has priority",
            "Moved Page Header theme from Utilities to its top-level component categoryPage Header component",
            "Removed.slds-m-top_x-smallin the page header and replaced with a new class.slds-page-header__info",
            "Vertical spacing adjusted onsmallviewport for.slds-form_stacked,.slds-form_horizontaland.slds-form_inline",
            "Widths of the Grid container change to480pxfor small,768pxfor medium,1024pxfor large and1280pxfor x-large.",
            "The last element inside.slds-text-longformnow retains the bottom margin."
          ]
        },
        {
          "type": "p",
          "text": "The following issues have now been resolved:"
        },
        {
          "type": "list",
          "items": [
            "Fixed#106Fix for scoping issue with tabs and active state - bug. Increased active tab state specificity",
            "Fixed#61Fixed#51Updated lists > description horizontal to use flexbox. No class change required.dtandddcan now accept sizing utilities. Change margin to padding",
            "Fixed accessibility bug with required form elements",
            "Some tokens that were unable to be overridden by not having a!defaultflag have been resolved",
            "Compound fields markup has been updated that was causing display issuesCompound Fields",
            "Fixed inverse button-group icon bug"
          ]
        },
        {
          "type": "p",
          "text": "The following features are being marked as deprecated in this release and will be removed in three releases:"
        },
        {
          "type": "list",
          "items": [
            "Deprecated.slds-card_empty. Use.slds-text-align_centerinstead. -Card component",
            "Deprecated.slds-section-title. Use.slds-section__titleinstead -Section Titlefor full details",
            "Deprecated.slds-button_icon-bare. Use.slds-button_iconinstead -Button Icon",
            "Deprecated tabs descendant selectorsTabs component:.slds-tabs_default > slds-tabs__itemuse.slds-tabs_default__iteminstead..slds-tabs_default > slds-tabs__contentuse.slds-tabs_default__contentinstead..slds-tabs_default > ause.slds-tabs_default__linkinstead..slds-tabs_scoped > slds-tabs__itemuse.slds-tabs_scoped__iteminstead..slds-tabs_scoped > slds-tabs__contentuse.slds-tabs_scoped__contentinstead..slds-tabs_scoped > ause.slds-tabs_scoped__linkinstead.",
            ".slds-tabs_default > slds-tabs__itemuse.slds-tabs_default__iteminstead.",
            ".slds-tabs_default > slds-tabs__contentuse.slds-tabs_default__contentinstead.",
            ".slds-tabs_default > ause.slds-tabs_default__linkinstead.",
            ".slds-tabs_scoped > slds-tabs__itemuse.slds-tabs_scoped__iteminstead.",
            ".slds-tabs_scoped > slds-tabs__contentuse.slds-tabs_scoped__contentinstead.",
            ".slds-tabs_scoped > ause.slds-tabs_scoped__linkinstead.",
            "Deprecated.slds--tooltip. Use.slds-popover_tooltipinstead.",
            "Deprecated responsive.slds-nowrap_{size}classes due to inconsistent naming. Use.slds-{size}_nowrapinstead.",
            "Deprecated.slds-modal-backdropand.slds-modal-backdrop_openin favor of.slds-backdropand.slds-backdrop_opento reuse in other components.",
            "Deprecated.slds-col-rule_{position}classes due to inconsistent naming. Use.slds-col_rule-{position}instead."
          ]
        },
        {
          "type": "list",
          "items": [
            "Add Getting Started > Markup and Style guidelines with BEM information"
          ]
        },
        {
          "type": "list",
          "items": [
            "Copy updates on components to represent Voice & Tone Guidelines",
            "Some tokens that were unable to be overridden by not having a !default flag has been resolved",
            "Reordered tokens so large form factor has priority",
            "Fix for scoping issue with tabs and active state - bug#106",
            "Increased active tab state specificity"
          ]
        },
        {
          "type": "list",
          "items": [
            "Improve status labels. Now associated with colors and contain more information",
            "Improve Component Overview tables for more narrow readability"
          ]
        },
        {
          "type": "list",
          "items": [
            "Apply proper accessibility requirements (aria-labelledby) to tabs (fixes https://github.com/salesforce-ux/design-system/issues/107). Updated documentation to reflect previous refactoring.",
            "Fix for inverse button-group icon bug",
            "Make.slds-text-body_smallinherit theme color (fixes https://github.com/salesforce-ux/design-system/issues/123)",
            "Mark all list utilities \"dev-ready\" -/components/utilities/lists",
            "Field-level help popover background color token update",
            "Fix truncation on Sales Path (fixes https://github.com/salesforce-ux/design-system/issues/135)",
            "Fix chevron alignment on Sales Path -/components/tabs#sales-path",
            "Updated demo on buttons > neutral icon to demonstrate \"mutton\" -/components/buttons#neutral-icon",
            "Updated lists > description horizontal to use flexbox. No class change required.dtandddcan now accept sizing utilities. Change margin to padding."
          ]
        },
        {
          "type": "list",
          "items": [
            "Custom Select container added, normalizes the<select>appearance in various browsers (fixes https://github.com/salesforce-ux/design-system/issues/122)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added Resources > Links",
            "Changed tabs to use new refactored tab classes (deprecated)"
          ]
        },
        {
          "type": "list",
          "items": [
            "Removed default horizontal spacing from buttons in favor of new spacing utilities (deprecated, see New Components below).",
            "Tabs have been refactored, changing descendent selectors to BEM syntax (deprecated)",
            "Changed source order of Media Objects > Reversed and Media Objects > Double (No longer reordering using flexbox order property)",
            "Adjusted Activity Timline > Base to reflect Media Object changes. Removeddlwith singledt&ddpairs. Replaced withspans.",
            "slds-modal-backdropandslds-modal-backdrop_openis deprecated in favor ofslds-backdropandslds-backdrop_opensince it is used in other components.",
            "Removed icon color from.slds-input__iconso that an icon color class is required in addition"
          ]
        },
        {
          "type": "list",
          "items": [
            "Switched sizing utility media queries to useeminstead ofpx",
            "Updated demo for icons > color and addedslds-text-errorfor validation errors"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added initial state of tabs > sales path/components/tabs#sales-path",
            "Added max-width sizing utilities/components/utilities/sizing",
            "Added button spacing utilities for stacked and horizontal sets of buttons (both a single class and a wrapper class)/components/buttons#overview",
            "Added stretched button utilities for full-width buttons on small form factors/components/buttons#overview",
            "Dialog Menus for small form factorAction overflow for touch/components/menus#action-overflow-for-touch",
            "Action overflow for touch/components/menus#action-overflow-for-touch",
            "Added Edit dialog form for touch devices/components/forms#edit-dialog-for-touch"
          ]
        },
        {
          "type": "list",
          "items": [
            "Buttons no longer have default horizontal spacing and require a class or wrapper to provide space",
            "Name change: Responsive button changed to Horizontal button",
            "slds-modal-backdropandslds-modal-backdrop_opendeprecated in version 0.12.0, useslds-backdropandslds-backdrop_openinstead",
            "Descendant selectors on tabs were changed to BEM syntaxslds-tabs_default > slds-tabs__itemdeprecated in version 0.12.0, useslds-tabs_default__iteminsteadslds-tabs_default > slds-tabs__contentdeprecated in version 0.12.0, useslds-tabs_default__contentinsteadslds-tabs_default > adeprecated in version 0.12.0, useslds-tabs_default__linkinsteadslds-tabs_scoped > slds-tabs__itemdeprecated in version 0.12.0, useslds-tabs_scoped__iteminsteadslds-tabs_scoped > slds-tabs__contentdeprecated in version 0.12.0, useslds-tabs_scoped__contentinsteadslds-tabs_scoped > adeprecated in version 0.12.0, useslds-tabs_scoped__linkinstead",
            "slds-tabs_default > slds-tabs__itemdeprecated in version 0.12.0, useslds-tabs_default__iteminstead",
            "slds-tabs_default > slds-tabs__contentdeprecated in version 0.12.0, useslds-tabs_default__contentinstead",
            "slds-tabs_default > adeprecated in version 0.12.0, useslds-tabs_default__linkinstead",
            "slds-tabs_scoped > slds-tabs__itemdeprecated in version 0.12.0, useslds-tabs_scoped__iteminstead",
            "slds-tabs_scoped > slds-tabs__contentdeprecated in version 0.12.0, useslds-tabs_scoped__contentinstead",
            "slds-tabs_scoped > adeprecated in version 0.12.0, useslds-tabs_scoped__linkinstead",
            "Descendant selector on.slds-input__iconfill color deprecated in version 0.12.0, useslds-icon-text-default(or any icon color class) on the icon in addition to the original class"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed notifications > modal to notifications > modal-toast",
            "Modals > Taglines no longer has aslds-modal__header pselector. Instead,slds-m-top_x-smallis placed on thepitself.",
            "Stateful button has a[disabled]state",
            "If button-groups need their final down icon to hide when [disabled], the.slds-toggle-visibilityshould be added to the icon. (This affects all page headers, and cards > base.)",
            "Nubbins shadows now have proper light source",
            "Removed interactive dropdowns from page header examples",
            "Added Google Analytics"
          ]
        },
        {
          "type": "list",
          "items": [
            "Moved tooltips to popovers, deprecated tooltip section/components/popovers#tooltips",
            "Moved Dropdowns into Menus, deprecated dropdowns sectio/components/menus",
            "Moved Picklist Dropdown Menu into Menus/components/menus#picklist",
            "Moved Multi-Select Picklist into Forms/components/forms#multi-select",
            "Menus component variants are now more explicitDropdownDropdown with IconsDropdown PositioningPicklistAction OverflowSearch Overflow",
            "Dropdown",
            "Dropdown with Icons",
            "Dropdown Positioning",
            "Picklist",
            "Action Overflow",
            "Search Overflow"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed.slds-tooltipto.slds-popover_tooltip,.slds-tooltipwill become deprecated (*).",
            "Deprecated.slds-has-divider(*), now requires a top or bottom direction appened, e.g..slds-has-divider_top,.slds-has-divider_bottom",
            "Deprecated \"Menu with Icons\" dropdown variantNo longer depends on class names that deal with icon positioning.slds-dropdown__itemare set todisplay: flexwithjustify-content: space-betweenby default now. This allows for icon + text to be left aligned and a single icon to be positioned on the same axis to the right hand side. The icon + text that is positioned to the left requires an HTML element, like a<p>with the class.slds-truncateapplied..slds-has-icon,.slds-has-icon_left,.slds-has-icon_rightand children classes.slds-icon_left,.slds-icon_righthave been deprecated but will persist in code base (*)If user invokes selection on a dropdown item and wants feedback such a a checkmark, that SVG now requires a class of.slds-icon_selected",
            "No longer depends on class names that deal with icon positioning",
            ".slds-dropdown__itemare set todisplay: flexwithjustify-content: space-betweenby default now. This allows for icon + text to be left aligned and a single icon to be positioned on the same axis to the right hand side. The icon + text that is positioned to the left requires an HTML element, like a<p>with the class.slds-truncateapplied.",
            ".slds-has-icon,.slds-has-icon_left,.slds-has-icon_rightand children classes.slds-icon_left,.slds-icon_righthave been deprecated but will persist in code base (*)",
            "If user invokes selection on a dropdown item and wants feedback such a a checkmark, that SVG now requires a class of.slds-icon_selected",
            "<em> (*) Code is still in codebase but will be deprecated, TBD but preliminary removal of release 0.20.0</em>"
          ]
        },
        {
          "type": "list",
          "items": [
            "Added notifications > prompt (modal-style alert)/components/notifications#prompt",
            "Added Preview Panel Popovers/components/popovers#panels",
            "More directional support for popover nubbins/components/popovers#nubbins"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated Icons to version 3.2.0",
            "Dropdown menus now have bottom positioning support, with accommodating nubbin support/components/menus#dropdown-positioning",
            "Added Google Analytics"
          ]
        },
        {
          "type": "list",
          "items": [
            "Hot fix for picklist width on datepicker",
            ".slds-is-requiredand.slds-has-erroron form elements are now properly scoped within the-vf,-ltngand-scopedcompiled css files",
            "Font size on datepicker properly displays within scoped compiled css files"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed.slds-button__iconfill colors to use currentColor value to match text color changes",
            "Updated.slds-button_icon-*demo and fixed class name typo",
            "Added new button variant:.slds-button_destructive",
            "Removed max-width (960px) from Modals > Large",
            "Added new notification state in modals Notifications > Modal",
            "Added.slds-no-flexto SVG in Notifications > Toast (needed for modal application)",
            "Changed picklist label and selection list to fixed width. Applied a 5 option max-height with overflow on list.",
            "Upgraded@salesforce-ux/design-tokensto 1.3.1",
            "@salesforce-ux/design-systempackage now includes/assets/iconsand/assets/images"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed.slds-button_icon-border-smallto.slds-button_icon-x-small. This aligns with our other icon names which separate sizing from style",
            "Brought inverse close icons into alignment with the other icon buttons. Class on.slds-buttonhas an added.slds-button_icon-inverse. The class.slds-button__icon_inversewas removed from the SVG within."
          ]
        },
        {
          "type": "list",
          "items": [
            ".slds-button_icon-*can be placed on anaand aligns to the center",
            ":hover, :focus state added for.slds-button_icon-bare",
            "fixed line-height in.slds-button_icon-border-smalland.slds-button_icon-bare",
            "Addedoverflow: auto;to the options container for a Multi Select picklist"
          ]
        },
        {
          "type": "list",
          "items": [
            "Full-width button variantfor small form factors",
            "Feed and Comment componentshave been added",
            "Publisher componenthas been added"
          ]
        },
        {
          "type": "list",
          "items": [
            "Abstracted form states into own mixins",
            "Abstracted feed vertical rule into own mixin"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issues when installing with npm 3",
            "Updated Voice and Tone guidelines"
          ]
        },
        {
          "type": "list",
          "items": [
            "Clicking anchor links will position the anchor on the page a bit lower than the top of the window now",
            "Added typography documentation to design section",
            "Added examples for a checkbox fieldset and radio fieldset within the horizontal form modifier"
          ]
        },
        {
          "type": "list",
          "items": [
            "Updated package.json to point to README for licensing information",
            "Upgrade icons to v3.1.0",
            "Updated small input styles",
            "Applied styles to fix the height of a select element when used [size] attribute is applied",
            "Forced stacking of checkbox and radio elements when inside a horizontal form modifier",
            "Updated picklist, font weight on item select, fixed time select dropdown"
          ]
        },
        {
          "type": "list",
          "items": [
            "Doc changes",
            "Internal SVG icon helper can use<use xlink:href=\"...\"></use>now",
            "Miscellaneous typo fixes"
          ]
        },
        {
          "type": "list",
          "items": [
            "Fixed issue with npm module dependencies",
            "Fixes issue that caused deprecated design tokens to display"
          ]
        },
        {
          "type": "list",
          "items": [
            "Open Sourced: github.com/salesforce-ux/design-systemCSS files scoped in.sldshave been added/updated for the following:Visualforce (-vf)Lightning Platform (-ltng)General Use (Most likely in conjunction with other frameworks) (-scoped)",
            "CSS files scoped in.sldshave been added/updated for the following:",
            "Visualforce (-vf)",
            "Lightning Platform (-ltng)",
            "General Use (Most likely in conjunction with other frameworks) (-scoped)"
          ]
        },
        {
          "type": "list",
          "items": [
            "ContentGetting StartedHeroku AddedDesignOverview AddedColour AddedData Entry AddedDisplaying Data AddedMessaging AddedVoice & Tone AddedNative -> iOS - Use our iOS integration to style your native iOS applications",
            "Getting StartedHeroku Added",
            "Heroku Added",
            "DesignOverview AddedColour AddedData Entry AddedDisplaying Data AddedMessaging Added",
            "Overview Added",
            "Colour Added",
            "Data Entry Added",
            "Displaying Data Added",
            "Messaging Added",
            "Voice & Tone Added",
            "Native -> iOS - Use our iOS integration to style your native iOS applications"
          ]
        },
        {
          "type": "list",
          "items": [
            "Changed components to dev-ready: Button Groups, Cards, Tiles, Icons",
            "Lookups:Accessibility Requirements addedMulti-Select Design and Markup updatedMulti-Scope Design and Markup updated.slds-lookup__controlhas been deprecated, now uses.slds-form-element__control",
            "Accessibility Requirements added",
            "Multi-Select Design and Markup updated",
            "Multi-Scope Design and Markup updated",
            ".slds-lookup__controlhas been deprecated, now uses.slds-form-element__control",
            "Pill Container Added.slds-pill-containerCan contain one or many pills, used on.slds-lookup",
            "Can contain one or many pills, used on.slds-lookup",
            "Data-TablesRow Selection (.slds-is-selected) and row selection hovers have been fixed",
            "Row Selection (.slds-is-selected) and row selection hovers have been fixed",
            "TabsUpdated tabs to havearia-controlswith the same ID in the tab content container",
            "Updated tabs to havearia-controlswith the same ID in the tab content container",
            "Tiles > Author and with-icon have empty alt added",
            "Datepickers > multi-select and Forms > compound-form havesmallelement changed tospan",
            "Card > All variants have DOM changed (header, section, footer changed to div)",
            "Data-tables > All variants have accessibility upgrades forth role=\"row\"",
            "Forms > validation state now has additional errors surfaced for radio and checkbox",
            "Datepickers > All variantsRemovedrole=\"button\" aria-labelledby=\"bn_prev-label\"Changeddiv#monthtoh2 class=\"site-text-heading_large\"and removedrole=\"heading\"Removed all tabindexRemovedspan#bn_prev-labelandspan#bn_next-label",
            "Removedrole=\"button\" aria-labelledby=\"bn_prev-label\"",
            "Changeddiv#monthtoh2 class=\"site-text-heading_large\"and removedrole=\"heading\"",
            "Removed all tabindex",
            "Removedspan#bn_prev-labelandspan#bn_next-label",
            "Dropdowns > All variants havearia-haspopup=\"true\"moved to thebutton(actionable element)",
            "Page headers > All variants haverole=\"banner\"added",
            "Picklists > Quickfind temporarily removed until DOM is updated"
          ]
        },
        {
          "type": "list",
          "items": ["Text > Faux Links has added cursor:pointer"]
        },
        {
          "type": "p",
          "text": "Lots of bug fixes and TLC."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/resources/articles",
      "title": "Articles - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "Interested in learning more about the Design System, how we built it, and how you can use it? Check out the links below, and check back often - we're always writing articles and gathering community-generatedÂ content:"
        },
        {
          "type": "list",
          "items": [
            "Darshil Vora:ÂBridging code & design to build prototypes,Oct 31, 2019",
            "Cliff Seal:ÂCreating Confident Users Through Clicks not Code,Jan 16, 2019",
            "Alvin Wong:ÂDesigning at Enterprise Scale,Sep 24, 2018",
            "Liz Khoo:ÂEvolving a Design System at Scale,Jul 31, 2018",
            "Alan Weibel:ÂBeyond Components: A Design System to Support Multiple Frameworks,May 16, 2018",
            "Jesse Hausler:ÂFour Major Patterns for Accessible Drag and Drop,Nov 1, 2017",
            "Guy Jenkins:ÂEvolving the Lightning User Experience,Aug 10, 2017",
            "Alyssa Vincent-Hill:ÂData Driven Personas at Salesforce,Jan 18, 2017",
            "JD Vogt:ÂDefining Principles to Drive Design Decisions,Feb 4, 2016",
            "Katey Basye:ÂHow the Salesforce Design System Helped Me Onboard as a New Product Designer,Jan 28, 2016",
            "Raymon Sutedjo-The:ÂDesigning More Efficient Forms,Oct 27, 2015",
            "Christophe Coenraets:ÂReact University: Sample Application with React, Node.js 4, and the Lightning Design System,Oct 14, 2015",
            "Jina Anne:ÂThe Salesforce Team Model for Scaling a Design System,Oct 13, 2015",
            "Ken Skistimas:ÂPeople-Powered Design,Oct 6, 2015",
            "Stephanie Rewis:ÂBuilding an Enterprise CSS Framework,Sep 15, 2015",
            "Christophe Coenraets:ÂThe New Salesforce Lightning Design System: Lightning Experience Everywhere,Sep 8, 2015",
            "Amy Lee:ÂThe Lightning Design System â the Next Generation of Living Style Guides,Aug 26, 2015",
            "Craig Villamor:ÂHow We Designed the New Salesforce at Scale,Aug 25, 2015",
            "SÃ¶nke Rohde:ÂLiving Design System,Sep 11, 2014"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/resources/downloads",
      "title": "Downloads - Lightning Design System",
      "content": [
        {
          "type": "p",
          "text": "We provide multiple options for downloading the Lightning Design System, as well as specific downloads for icons, design tokens and swatches. Instead of downloading the Design System you can alsofork or clone it on GitHub. If you usenpmin your local development environment, it can be installed with the following command:"
        },
        {
          "type": "code",
          "code": "npminstall@salesforce-ux/design-system --save"
        },
        {
          "type": "p",
          "text": "If you would look like to preview your application with the new accessible colors, please installour alternate npm package from our color migration guide. Download the pre-builtCSSframework and icons to include in your project. See therelease notesfor details on the latest updates. Note:If you need to use the scoped files that were previously included in the download, we haveprovided a tool for you to create your custom-scoped CSS. You will need to scope to your own unique scoping class name instead of.slds. All source code is licensed underBSD License Clause 2. All icons and images are licensed underCreative Commons Attribution-NoDerivatives 4.0. It is no longer necessary to add a static resource for Lightning Components running within Lightning. See theFAQ for more information. If you still need to upload the Lightning Design System as a static resource, use the following zip that will meet the static resource requirements."
        },
        {
          "type": "list",
          "items": [
            "Version 2.24.6(Summer â24)",
            "Version 2.23.2(Spring â24)",
            "Version 2.22.2(Winter â24)",
            "Version 2.21.5(Summer â23)",
            "Version 2.20.1(Spring â23)",
            "Version 2.19.1(Winter â23)",
            "Version 2.18.1(Summer â22)",
            "Version 2.17.5(Spring â22)",
            "Version 2.16.9(Winter â22)",
            "Version 2.15.9(Summer â21)"
          ]
        },
        {
          "type": "p",
          "text": "The unmanaged package has been deprecated. The Lightning Design System CSS is now automatically included for Lightning Components running in the Lightning Experience and Salesforce S1 mobile application, as well as when extending the SLDS template when building a standalone Lightning Application (my.app), in LC4VF, or in a component that will be used via Lightning Out. It is no longer necessary to add a static resource for Lightning Components running within these environments. Please seethe Lightning pagefor more information on extending the template. Therearestill cases where you will need to use a static resource â specifically, within Visualforce. In this case, we haveprovided a tool for you to create your custom-scoped CSS. Make sure and read thedesign guidelineand thecomponent blueprintfor more information about design and implementation of icons. Download allicon sets. Each icon is available asSVGand in two different PNG sizes. All icons are licensed underCreative Commons Attribution-NoDerivatives 4.0. Design Tokensare available in multiple formats depending on which technology your application uses. For web-based applications, you can use our tokens asvariablesthrough CSS preprocessorsSass,Less, andStylus. We recommend Sass as we use it internally, it is well-documented, and is the industry standard. For native applications, our tokens are available in XML and JSON formats for the Android and iOS platforms, respectively. Using Lightning Components? Read the Developer Guide onStyling with Design Tokens. You can import color swatches for use in design applications like Photoshop and Figma."
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/resources/faq",
      "title": "FAQ - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "What is the Salesforce Lightning Design System?",
            "The word component is used a lot, what does it mean?",
            "Is any JavaScript included as part of the framework?",
            "What browsers are supported?",
            "Is Bower still supported?",
            "How can I design responsively using the Salesforce Lightning Design System?",
            "Can I use the Salesforce Lightning Design System together with Bootstrap or any other CSS framework?",
            "What happened to the Salesforce Sans font?",
            "What CSS syntax does the Salesforce Lightning Design System use? Where did the double hyphenations go? Why are their underscores in your CSS classes?",
            "How do I display SVG icons with Lightning Components?",
            "How do I link to icons in Visualforce?",
            "How do I link to Lightning static resources like stylesheets and icons?",
            "I am seeing Visualforce errors like: The prefix xlink for attribute xlink:href associated with an element ... is not bound",
            "What does the âRequires ui:scrollerWrapperâ badge mean?"
          ]
        },
        {
          "type": "p",
          "text": "Brand and product design guidelines, Design Patterns and Component Blueprints for creating unified UI in the Salesforce ecosystem."
        },
        {
          "type": "list",
          "items": [
            "ADesign Patternis:Principle-driven guidelines of a repeatable experience.",
            "AComponent Blueprintis:Framework agnostic, accessible HTML and CSS used to create components. This includes:Pre-production markup: this is the markup on the SLDS websiteProduction CSS: in general, the SLDS CSS.Interaction Guidelines: including desired component lifecycle, mouse and keyboard interaction, accessibility guidelines and JS guidelines",
            "Pre-production markup: this is the markup on the SLDS website",
            "Production CSS: in general, the SLDS CSS.",
            "Interaction Guidelines: including desired component lifecycle, mouse and keyboard interaction, accessibility guidelines and JS guidelines"
          ]
        },
        {
          "type": "p",
          "text": "We have updated the terminology to help alleviate confusion around this term by splitting it into two pieces: the SLDS Component Blueprint and theLightning Component."
        },
        {
          "type": "list",
          "items": [
            "Component Blueprintsare:Framework agnostic, accessible HTML and CSS used to create components. This includes:Pre-production markup: this is the markup on the SLDS websiteProduction CSS: in general, the SLDS CSS.Interaction Guidelines: including desired component lifecycle, mouse and keyboard interaction, accessibility guidelines and JS guidelines",
            "Pre-production markup: this is the markup on the SLDS website",
            "Production CSS: in general, the SLDS CSS.",
            "Interaction Guidelines: including desired component lifecycle, mouse and keyboard interaction, accessibility guidelines and JS guidelines",
            "Lightning Componentsare:A functional, reusable component built on the Lightning platform. This includes:Base Lightning Components:A programmatic component, built according to the SLDS Component Blueprint, without logic or functionality.Experience Lightning Components:A functional, declarative or programmatic component, built from Base Lightning Components.Custom Lightning Components:A functional, reusable component built on the Lightning platform, with or without Base or Experience components.",
            "Base Lightning Components:A programmatic component, built according to the SLDS Component Blueprint, without logic or functionality.",
            "Experience Lightning Components:A functional, declarative or programmatic component, built from Base Lightning Components.",
            "Custom Lightning Components:A functional, reusable component built on the Lightning platform, with or without Base or Experience components."
          ]
        },
        {
          "type": "p",
          "text": "No. The Salesforce Lightning Design System is a pure CSS framework that you can use with any front-end development framework youâd like, including Salesforce-specific technologies such as Visualforce and Lightning, as well as third-party frameworks like React or Angular. Since v2.3.1, we no longer supportBowersince it is not actively supported. To install the Lightning Design System as a managed package, please usenpm. We recommend that you make good use of our flexible and powerfulGrid System, which will help you construct responsive layouts that scale elegantly across screen sizes. Yes. All CSS selectors are prefixed with.slds-to prevent any collisions. The Salesforce Sans font was removed from the Design System in 2.15.0. Lightning Experience now uses the native sans-serif font on your system or device. This change improves readability and performance and provides a better experience for users of non-Latin languages. Please see theÂSummer '21 release notesfor more information. The Salesforce Lightning Design System CSS uses a standard class naming convention called âBEMâ (Block-Element-Modifier):"
        },
        {
          "type": "list",
          "items": [
            "Block represents a high-level component (e.g..slds-button)",
            "Element represents a descendent of a component (e.g..slds-button__icon)",
            "Modifier represents a different state of a block or element (e.g..slds-button_neutral)"
          ]
        },
        {
          "type": "p",
          "text": "Initially we used the double hyphen style for BEM notation. Due to the fact that double hyphens are problematic in an XML environment (which doesn't allow double hyphens within comments), we have upgraded our syntax to use the single underscore style. The old syntax is now deprecated and will work for the next 18 months. We'll give an update on the exact release in which we will remove the backwards compatibility soon. Please stay tuned. For more information, refer to ourMarkup and Style pageandthis article on guidelines for BEM namingwhich has more detail on why BEM is a useful convention. Please reviewGetting Started with Lightning. Use the<apex:slds />element to incorporate the Lightning Design System in your Visualforce pages and align them with the styling of Lightning Experience. This component is a streamlined alternative to uploading the Lightning Design System as a static resource and using it in your Visualforce pages. To reference assets in the Lightning Design System, such as SVG icons and images, use theURLFOR()formula function and the$Assetglobal variable. Use the following markup, for example, to reference the SVG user icon."
        },
        {
          "type": "code",
          "code": "<svgaria-hidden=\"true\"className=\"slds-icon slds-icon--large slds-icon-standard-user\"><usexlink:href=\"{!URLFOR($Asset.SLDS,'assets/icons/standard-sprite/svg/symbols.svg#user')}\"></use></svg>"
        },
        {
          "type": "p",
          "text": "Note: XML namespaces are required to be added to thehtmlelement:"
        },
        {
          "type": "code",
          "code": "<htmlxmlns=\"http://www.w3.org/2000/svg\"xmlns:xlink=\"http://www.w3.org/1999/xlink\">"
        },
        {
          "type": "p",
          "text": "Please refer to ourTrailhead Moduleand the documentation page\"Using the Lightning Design System\"in our Visualforce Developer Guide for more detailed instructions and examples. Lightning Components also use a special syntax to reference your static resources. Since Salesforce Lightning Design System is either included in platform or can be extended in other use cases, it's rare that you need to add it as a static resource. In the rare case that you do, you need to edit the code you cut and paste from the Salesforce Lightning Design System. If you are adding a custom scoped file as a static resource namedslds2251then you should include the style sheet in this format:"
        },
        {
          "type": "code",
          "code": "<ltng:require styles=\"/resource/slds2251/assets/styles/salesforce-lightning-design-system-ltng.min.css\"/>"
        },
        {
          "type": "p",
          "text": "The tool to create your custom CSS is available here. This is likely because the namespace needs to be added to the HTML element:"
        },
        {
          "type": "code",
          "code": "<html xmlns=\"http://www.w3.org/2000/svg\"xmlns:xlink=\"http://www.w3.org/1999/xlink\">"
        },
        {
          "type": "p",
          "text": "Please refer to ourTrailhead Modulefor more detailed instructions and examples. If youâre developing for Lightning Experience, this badge indicates a component that can be supported on mobile through the use of theui:scrollerWrappercomponent. More information aboutui:scrollerWrappercan be found in theLightning Developer Guide. The Lightning Design System scrollable class does not bypass the âPull to Refreshâ scrolling behavior on mobile devices, so usingui:scrollerWrapperallows you to set up scrollable content areas on mobile devices that donât interfere with other behavior. Hereâs an example of how you might useui:scrollerWrapperto make a tabâs content scrollable using the lightning namespace:"
        },
        {
          "type": "code",
          "code": "<aura:component><lightning:tabset><lightning:tablabel=\"Item One\"><ui:scrollerWrapper><div>Tab Content Goes Here</div></ui:scrollerWrapper></lightning:tab><lightning:tablabel=\"Item Two\">Sample Content Two</lightning:tab></lightning:tabset></aura:component>"
        },
        {
          "type": "p",
          "text": "Hereâs an example of how you might useui:scrollerWrapperto make a tabâs content scrollable using plain SLDS HTML:"
        },
        {
          "type": "code",
          "code": "<aura:component><divclassName=\"slds-tabs_default\"><ulclassName=\"slds-tabs_default__nav\"role=\"tablist\"><liclassName=\"slds-tabs_default__item slds-is-active\"title=\"Item One\"role=\"presentation\"><aclassName=\"slds-tabs_default__link\"href=\"javascript:void(0);\"role=\"tab\"tabindex=\"0\"aria-selected=\"true\"aria-controls=\"tab-default-1\"id=\"tab-default-1__item\">Plain HTML</a></li></ul><divid=\"tab-default-1\"className=\"slds-tabs_default__content slds-show\"role=\"tabpanel\"aria-labelledby=\"tab-default-1__item\"><ui:scrollerWrapper><divclassName=\"slds-form slds-form_stacked slds-form_short-stack\"><fieldsetclassName=\"slds-form-element\"><legendclassName=\"slds-form-element__legend slds-form-element__label\">Checkbox Group label</legend><divclassName=\"slds-form-element__control\"><spanclassName=\"slds-checkbox\"><inputtype=\"checkbox\"name=\"default\"id=\"checkbox-1\"value=\"on\"/><labelclassName=\"slds-checkbox__label\"for=\"checkbox-1\"><spanclassName=\"slds-checkbox_faux\"></span><spanclassName=\"slds-form-element__label\">All opportunities owned by you</span></label></span></div></fieldset></div></ui:scrollerWrapper></div></aura:component>"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/tools/overview",
      "title": "Tools Overview - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": [
            "Design ToolsUI KitsAdditional Design Resources",
            "UI Kits",
            "Additional Design Resources",
            "Development Tools"
          ]
        },
        {
          "type": "p",
          "text": "All the tools you need to work with and learn about Salesforce Lightning Design System. Unleash the power of the SLDS UI Kit in Figma. Import color swatches for use in Figma. Download Use icons to communicate clearly in limited space. DownloadÂ  â¢ ÂIcons Page SLDS Validator is a VS Code extension that helps developers write SLDS compliant code. Run prototypes of all sizes in the browser using SLDS. Install from GitHub View web component JavaScript, HTML, and CSS code, then preview the output. Go to LWC Website Customize CSS scope in an SLDS static resource. Go to SLDS Scope Customizer"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/tools/scope-customizer",
      "title": "SLDS Scope Customizer - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Overview", "Get Started", "Walkthrough"]
        },
        {
          "type": "p",
          "text": "SLDS Scope Customizer is a simple command you can run to build a scoped version of SLDS CSS. You can generate it on demand from the command line as often as you'd like. You can even include it in your CI process to auto-generate it if that suits your needs. To use the SLDS Scope Customizer, make sure you follow these steps:"
        },
        {
          "type": "list",
          "items": [
            "Clone or download theSalesforce Lightning Design System repo",
            "Runnpm install && npm run buildwithin the root of the project directory",
            "Runnpm run slds:customizerand follow the prompts"
          ]
        },
        {
          "type": "p",
          "text": "We'd love to hear from you! If you have any comments/questions/feedback, pleasefile an issue."
        },
        {
          "type": "list",
          "items": [
            "Initial prompt after runningnpm run slds:customizer",
            "Completed command after responding to the prompts",
            "Snippet of resulting CSS"
          ]
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/tools/validator",
      "title": "SLDS Validator for VS Code - Lightning Design System",
      "content": [
        {
          "type": "list",
          "items": ["Overview", "Features", "Get Started", "Blog"]
        },
        {
          "type": "p",
          "text": "SLDS Validator for VS Code scans your markup, validates it against a database of guidelines/tips/gotchas/etc. extracted from the SLDS documentation, and offers suggestions on how to improve your code. This extension simplifies working with Salesforce Lightning Design System (SLDS) in Aura and Lightning: Validation with recommended token and utility classes Syntax highlighting and code completion Knows the right suggestions to make whether in CSS or HTML Before you set up SLDS Validator, make sure you have these essentials:"
        },
        {
          "type": "list",
          "items": [
            "Java; seethese instructionsfor details",
            "Visual Studio Codev1.26 or later"
          ]
        },
        {
          "type": "p",
          "text": "We'd love to hear from you! If you have any comments/questions/feedback, pleasefile an issueor post in ourwiki. January 21, 2020Kirupa Chinnathambi Ever had one of those days where you spent hours getting your Salesforce UI just right? You followed all of the Lightning Design System (SLDS) best practices and... Read on Medium"
        }
      ]
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/alignment",
      "title": "Alignment - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/borders",
      "title": "Borders - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/box",
      "title": "Box - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/description-list",
      "title": "Description List - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/floats",
      "title": "Floats - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/grid",
      "title": "Grid - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/horizontal-list",
      "title": "Horizontal List - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/hyphenation",
      "title": "Hyphenation - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/interactions",
      "title": "Interactions - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/layout",
      "title": "Layout - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/line-clamp",
      "title": "Line Clamp - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/margin",
      "title": "Margin - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/media-objects",
      "title": "Media Objects - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/name-value-list",
      "title": "Name Value List - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/padding",
      "title": "Padding - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/position",
      "title": "Position - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/print",
      "title": "Print - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/scrollable",
      "title": "Scrollable - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/sizing",
      "title": "Sizing - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/text",
      "title": "Text - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/themes",
      "title": "Themes - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/truncation",
      "title": "Truncation - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/vertical-list",
      "title": "Vertical List - Lightning Design System",
      "content": []
    },
    {
      "url": "https://www.lightningdesignsystem.com/utilities/visibility",
      "title": "Visibility - Lightning Design System",
      "content": []
    }
  ]
}
