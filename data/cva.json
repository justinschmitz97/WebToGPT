[{"source": "https://cva.style/docs", "title": "cva", "text": "Class Variance Authority\nCSS-in-TS libraries such as Stitches (opens in a new tab) and Vanilla Extract (opens in a new tab) are fantastic options for building type-safe UI components; taking away all the worries of class names and StyleSheet composition.\n\u2026but CSS-in-TS (or CSS-in-JS) isn't for everyone.\nYou may need full control over your StyleSheet output. Your job might require you to use a framework such as Tailwind CSS. You might just prefer writing your own CSS.\nCreating variants with the \"traditional\" CSS approach can become an arduous task; manually matching classes to props and manually adding types.\ncva\naims to take those pain points away, allowing you to focus on the more fun aspects of UI development.\nSponsors\nWant to support this project?\ncva\nis a privately-maintained free open-source project.\nBecome a sponsor (opens in a new tab) to contribute towards development efforts financially.\nAcknowledgements\n- Stitches (opens in a new tab) (WorkOS (opens in a new tab))\nHuge thanks to the WorkOS team for pioneering thevariants\nAPI movement \u2013 your open-source contributions are immensely appreciated - clb (opens in a new tab) (Bill Criswell (opens in a new tab))\nThis project originally started out with the intention of merging into the wonderfulclb\n(opens in a new tab) library, but after some discussion with Bill, we felt it was best to go down the route of a separate project.\nI'm so grateful to Bill for sharing his work publicly and for getting me excited about building a type-safe variants API for classes. If you have a moment, please go and star the project on GitHub (opens in a new tab). Thank you Bill! - clsx (opens in a new tab) (Luke Edwards (opens in a new tab))\nPreviously, this project surfaced a customcx\nutility for flattening classes, but it lacked the ability to handle variadic arguments or objects. clsx (opens in a new tab) provided those extra features with quite literally zero increase to the bundle size \u2013 a no-brainer to switch! - Vanilla Extract (opens in a new tab) (Seek (opens in a new tab))\nDownloads\nLicense\nApache-2.0 License (opens in a new tab) \u00a9 Joe Bell (opens in a new tab)"},
{"source": "https://cva.style/docs", "title": "cva", "text": "Class Variance Authority\nCSS-in-TS libraries such as Stitches (opens in a new tab) and Vanilla Extract (opens in a new tab) are fantastic options for building type-safe UI components; taking away all the worries of class names and StyleSheet composition.\n\u2026but CSS-in-TS (or CSS-in-JS) isn't for everyone.\nYou may need full control over your StyleSheet output. Your job might require you to use a framework such as Tailwind CSS. You might just prefer writing your own CSS.\nCreating variants with the \"traditional\" CSS approach can become an arduous task; manually matching classes to props and manually adding types.\ncva\naims to take those pain points away, allowing you to focus on the more fun aspects of UI development.\nSponsors\nWant to support this project?\ncva\nis a privately-maintained free open-source project.\nBecome a sponsor (opens in a new tab) to contribute towards development efforts financially.\nAcknowledgements\n- Stitches (opens in a new tab) (WorkOS (opens in a new tab))\nHuge thanks to the WorkOS team for pioneering thevariants\nAPI movement \u2013 your open-source contributions are immensely appreciated - clb (opens in a new tab) (Bill Criswell (opens in a new tab))\nThis project originally started out with the intention of merging into the wonderfulclb\n(opens in a new tab) library, but after some discussion with Bill, we felt it was best to go down the route of a separate project.\nI'm so grateful to Bill for sharing his work publicly and for getting me excited about building a type-safe variants API for classes. If you have a moment, please go and star the project on GitHub (opens in a new tab). Thank you Bill! - clsx (opens in a new tab) (Luke Edwards (opens in a new tab))\nPreviously, this project surfaced a customcx\nutility for flattening classes, but it lacked the ability to handle variadic arguments or objects. clsx (opens in a new tab) provided those extra features with quite literally zero increase to the bundle size \u2013 a no-brainer to switch! - Vanilla Extract (opens in a new tab) (Seek (opens in a new tab))\nDownloads\nLicense\nApache-2.0 License (opens in a new tab) \u00a9 Joe Bell (opens in a new tab)"},
{"source": "https://cva.style/docs/api-reference", "title": "API Reference | cva", "text": "API Reference\ncva\nBuilds a cva\ncomponent\nconst component = cva(\"base\", options);\nParameters\nbase\n: the base class name (string\n,string[]\nor otherclsx\nvalue (opens in a new tab))options\n(optional)variants\n: your variants schemacompoundVariants\n: variants based on a combination of previously defined variantsdefaultVariants\n: set default values for previously defined variants\nnote: these default values can be removed completely by setting the variant asnull\nReturns\nA cva\ncomponent function\ncx\nConcatenates class names (an alias of clsx\n(opens in a new tab))\nconst className = cx(classes);\nParameters\nclasses\n: array of classes to be concatenated (seeclsx\nusage (opens in a new tab))\nReturns\nstring"},
{"source": "https://cva.style/docs/examples/other-use-cases", "title": "Other Use Cases | cva", "text": "Other Use Cases\nAlthough primarily designed for handling class names, at its core, cva\nis really just a fancy way of managing a string\u2026\nDynamic Text Content\nconst greeter = cva(\"Good morning!\", {\nvariants: {\nisLoggedIn: {\ntrue: \"Here's a secret only logged in users can see\",\nfalse: \"Log in to find out more\u2026\",\n},\n},\ndefaultVariants: {\nisLoggedIn: \"false\",\n},\n});\ngreeter();\n// => \"Good morning! Log in to find out more\u2026\"\ngreeter({ isLoggedIn: \"true\" });\n// => \"Good morning! Here's a secret only logged in users can see\""},
{"source": "https://cva.style/docs/examples/react/css-modules", "title": "React with CSS Modules | cva", "text": "\ud83c\udf89 cva@1.0 is now in beta. See the updated docs \u2192\nCVA (Class Variance Authority)\nDocumentation\nDocumentation\nSponsors\nSponsors\n(opens in a new tab)\nGitHub\nGitHub\n(opens in a new tab)\n(opens in a new tab)\nQuestion? Give us feedback \u2192\n(opens in a new tab)\nEdit this page\nDocumentation\nExamples\nReact\nCSS Modules\nReact with CSS Modules\nView on GitHub\n\u2197\nBEM\nTailwind CSS"},
{"source": "https://cva.style/docs/examples/react/tailwind-css", "title": "React with Tailwind CSS | cva", "text": "\ud83c\udf89 cva@1.0 is now in beta. See the updated docs \u2192\nCVA (Class Variance Authority)\nDocumentation\nDocumentation\nSponsors\nSponsors\n(opens in a new tab)\nGitHub\nGitHub\n(opens in a new tab)\n(opens in a new tab)\nQuestion? Give us feedback \u2192\n(opens in a new tab)\nEdit this page\nDocumentation\nExamples\nReact\nTailwind CSS\nReact with Tailwind CSS\nView on GitHub\n\u2197\nCSS Modules\nSvelte"},
{"source": "https://cva.style/docs/faqs", "title": "FAQs | cva", "text": "FAQs\nWhy Don't You Provide a styled\nAPI?\nLong story short: it's unnecessary.\ncva\nencourages you to think of components as traditional CSS classes:\n- Less JavaScript is better\n- They're framework agnostic; truly reusable\n- Polymorphism is free; just apply the class to your preferred HTML element\n- Less opinionated; you're free to build components with\ncva\nhowever you'd like\nSee the \"Polymorphism\" documentation for further recommendations.\nHow Can I Create Responsive Variants like Stitches.js (opens in a new tab)?\nYou can't.\ncva\ndoesn't know about how you choose to apply CSS classes, and it doesn't want to.\nWe recommend either:\n- Showing/hiding elements with different variants, based on your preferred breakpoint.\nExample: With Tailwind\nexport const Example = () => (\n<>\n<div className=\"hidden sm:inline-flex\">\n<button className={button({ intent: \"primary\" })}>Hidden until sm</button>\n</div>\n<div className=\"inline-flex sm:hidden\">\n<button className={button({ intent: \"secondary\" })}>\nHidden after sm\n</button>\n</div>\n</>\n);\n-\nCreate a bespoke variant that changes based on the breakpoint.\ne.g.\nbutton({ intent: \"primaryUntilMd\" })\nThis is something I've been thinking about since the project's inception, and I've gone back and forth many times on the idea of building it. It's a large undertaking and brings all the complexity of supporting many different build tools and frameworks.\nIn my experience, \"responsive variants\" are typically rare, and hiding/showing different elements is usually good enough to get by.\nTo be frank, I'm probably not going to build/maintain a solution unless someone periodically gives me a thick wad of cash to do so, and even then I'd probably rather spend my free time living my life."}]