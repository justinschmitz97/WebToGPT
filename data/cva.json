[{"source": "https://cva.style/docs", "title": "cva", "text": "Class Variance Authority CSS-in-TS libraries Stitches (opens new tab) Vanilla Extract (opens new tab) fantastic options building type-safe UI components; taking away worries class names StyleSheet composition. \u2026but CSS-in-TS (or CSS-in-JS) everyone. may need full control StyleSheet output. job might require use framework Tailwind CSS. might prefer writing CSS. Creating variants \"traditional\" CSS approach become arduous task; manually matching classes props manually adding types. cva aims take pain points away, allowing focus fun aspects UI development. Sponsors Want support project? cva privately-maintained free open-source project. Become sponsor (opens new tab) contribute towards development efforts financially. Acknowledgements - Stitches (opens new tab) (WorkOS (opens new tab)) Huge thanks WorkOS team pioneering thevariants API movement \u2013 open-source contributions immensely appreciated - clb (opens new tab) (Bill Criswell (opens new tab)) project originally started intention merging wonderfulclb (opens new tab) library, discussion Bill, felt best go route separate project. I'm grateful Bill sharing work publicly getting excited building type-safe variants API classes. moment, please go star project GitHub (opens new tab). Thank Bill! - clsx (opens new tab) (Luke Edwards (opens new tab)) Previously, project surfaced customcx utility flattening classes, lacked ability handle variadic arguments objects. clsx (opens new tab) provided extra features quite literally zero increase bundle size \u2013 no-brainer switch! - Vanilla Extract (opens new tab) (Seek (opens new tab)) Downloads License Apache-2.0 License (opens new tab) \u00a9 Joe Bell (opens new tab)"},
{"source": "https://cva.style/docs", "title": "cva", "text": "Class Variance Authority CSS-in-TS libraries Stitches (opens new tab) Vanilla Extract (opens new tab) fantastic options building type-safe UI components; taking away worries class names StyleSheet composition. \u2026but CSS-in-TS (or CSS-in-JS) everyone. may need full control StyleSheet output. job might require use framework Tailwind CSS. might prefer writing CSS. Creating variants \"traditional\" CSS approach become arduous task; manually matching classes props manually adding types. cva aims take pain points away, allowing focus fun aspects UI development. Sponsors Want support project? cva privately-maintained free open-source project. Become sponsor (opens new tab) contribute towards development efforts financially. Acknowledgements - Stitches (opens new tab) (WorkOS (opens new tab)) Huge thanks WorkOS team pioneering thevariants API movement \u2013 open-source contributions immensely appreciated - clb (opens new tab) (Bill Criswell (opens new tab)) project originally started intention merging wonderfulclb (opens new tab) library, discussion Bill, felt best go route separate project. I'm grateful Bill sharing work publicly getting excited building type-safe variants API classes. moment, please go star project GitHub (opens new tab). Thank Bill! - clsx (opens new tab) (Luke Edwards (opens new tab)) Previously, project surfaced customcx utility flattening classes, lacked ability handle variadic arguments objects. clsx (opens new tab) provided extra features quite literally zero increase bundle size \u2013 no-brainer switch! - Vanilla Extract (opens new tab) (Seek (opens new tab)) Downloads License Apache-2.0 License (opens new tab) \u00a9 Joe Bell (opens new tab)"},
{"source": "https://cva.style/docs/api-reference", "title": "API Reference | cva", "text": "API Reference cva Builds cva component const component = cva(\"base\", options); Parameters base : base class name (string ,string[] otherclsx value (opens new tab))options (optional)variants : variants schemacompoundVariants : variants based combination previously defined variantsdefaultVariants : set default values previously defined variants note: default values removed completely setting variant asnull Returns cva component function cx Concatenates class names (an alias clsx (opens new tab)) const className = cx(classes); Parameters classes : array classes concatenated (seeclsx usage (opens new tab)) Returns string"},
{"source": "https://cva.style/docs/examples/other-use-cases", "title": "Other Use Cases | cva", "text": "Use Cases Although primarily designed handling class names, core, cva really fancy way managing string\u2026 Dynamic Text Content const greeter = cva(\"Good morning!\", { variants: { isLoggedIn: { true: \"Here's secret logged users see\", false: \"Log find more\u2026\", }, }, defaultVariants: { isLoggedIn: \"false\", }, }); greeter(); // => \"Good morning! Log find more\u2026\" greeter({ isLoggedIn: \"true\" }); // => \"Good morning! Here's secret logged users see\""},
{"source": "https://cva.style/docs/examples/react/css-modules", "title": "React with CSS Modules | cva", "text": "\ud83c\udf89 cva@1.0 beta. See updated docs \u2192 CVA (Class Variance Authority) Documentation Documentation Sponsors Sponsors (opens new tab) GitHub GitHub (opens new tab) (opens new tab) Question? Give us feedback \u2192 (opens new tab) Edit page Documentation Examples React CSS Modules React CSS Modules View GitHub \u2197 BEM Tailwind CSS"},
{"source": "https://cva.style/docs/examples/react/tailwind-css", "title": "React with Tailwind CSS | cva", "text": "\ud83c\udf89 cva@1.0 beta. See updated docs \u2192 CVA (Class Variance Authority) Documentation Documentation Sponsors Sponsors (opens new tab) GitHub GitHub (opens new tab) (opens new tab) Question? Give us feedback \u2192 (opens new tab) Edit page Documentation Examples React Tailwind CSS React Tailwind CSS View GitHub \u2197 CSS Modules Svelte"},
{"source": "https://cva.style/docs/faqs", "title": "FAQs | cva", "text": "FAQs Provide styled API? Long story short: unnecessary. cva encourages think components traditional CSS classes: - Less JavaScript better - They're framework agnostic; truly reusable - Polymorphism free; apply class preferred HTML element - Less opinionated; free build components cva however like See \"Polymorphism\" documentation recommendations. Create Responsive Variants like Stitches.js (opens new tab)? can't. cva know choose apply CSS classes, want to. recommend either: - Showing/hiding elements different variants, based preferred breakpoint. Example: Tailwind export const Example = () => ( <> <div className=\"hidden sm:inline-flex\"> <button className={button({ intent: \"primary\" })}>Hidden sm</button> </div> <div className=\"inline-flex sm:hidden\"> <button className={button({ intent: \"secondary\" })}> Hidden sm </button> </div> </> ); - Create bespoke variant changes based breakpoint. e.g. button({ intent: \"primaryUntilMd\" }) something I've thinking since project's inception, I've gone back forth many times idea building it. large undertaking brings complexity supporting many different build tools frameworks. experience, \"responsive variants\" typically rare, hiding/showing different elements usually good enough get by. frank, I'm probably going build/maintain solution unless someone periodically gives thick wad cash so, even I'd probably rather spend free time living life."}]