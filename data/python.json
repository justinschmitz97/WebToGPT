[{"source": "https://docs.python.org/3/whatsnew/3.10.html", "title": "What\u2019s New In Python 3.10", "text": "What\u2019s New In Python 3.10\u00b6\n- Editor:\nPablo Galindo Salgado\nThis article explains the new features in Python 3.10, compared to 3.9. Python 3.10 was released on October 4, 2021. For full details, see the changelog.\nSummary \u2013 Release highlights\u00b6\nNew syntax features:\nPEP 634, Structural Pattern Matching: Specification\nPEP 635, Structural Pattern Matching: Motivation and Rationale\nPEP 636, Structural Pattern Matching: Tutorial\nbpo-12782, Parenthesized context managers are now officially allowed.\nNew features in the standard library:\nPEP 618, Add Optional Length-Checking To zip.\nInterpreter improvements:\nPEP 626, Precise line numbers for debugging and other tools.\nNew typing features:\nPEP 604, Allow writing union types as X | Y\nPEP 612, Parameter Specification Variables\nPEP 613, Explicit Type Aliases\nPEP 647, User-Defined Type Guards\nImportant deprecations, removals or restrictions:\nNew Features\u00b6\nParenthesized context managers\u00b6\nUsing enclosing parentheses for continuation across multiple lines in context managers is now supported. This allows formatting a long collection of context managers in multiple lines in a similar way as it was previously possible with import statements. For instance, all these examples are now valid:\nwith (CtxManager() as example):\n...\nwith (\nCtxManager1(),\nCtxManager2()\n):\n...\nwith (CtxManager1() as example,\nCtxManager2()):\n...\nwith (CtxManager1(),\nCtxManager2() as example):\n...\nwith (\nCtxManager1() as example1,\nCtxManager2() as example2\n):\n...\nit is also possible to use a trailing comma at the end of the enclosed group:\nwith (\nCtxManager1() as example1,\nCtxManager2() as example2,\nCtxManager3() as example3,\n):\n...\nThis new syntax uses the non LL(1) capacities of the new parser. Check PEP 617 for more details.\n(Contributed by Guido van Rossum, Pablo Galindo and Lysandros Nikolaou in bpo-12782 and bpo-40334.)\nBetter error messages\u00b6\nSyntaxErrors\u00b6\nWhen parsing code that contains unclosed parentheses or brackets the interpreter now includes the location of the unclosed bracket of parentheses instead of displaying SyntaxError: unexpected EOF while parsing or pointing to some incorrect location. For instance, consider the following code (notice the unclosed \u2018{\u2018):\nexpected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6,\nsome_other_code = foo()\nPrevious versions of the interpreter reported confusing places as the location of the syntax error:\nFile \"example.py\", line 3\nsome_other_code = foo()\n^\nSyntaxError: invalid syntax\nbut in Python 3.10 a more informative error is emitted:\nFile \"example.py\", line 1\nexpected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4,\n^\nSyntaxError: '{' was never closed\nIn a similar way, errors involving unclosed string literals (single and triple quoted) now point to the start of the string instead of reporting EOF/EOL.\nThese improvements are inspired by previous work in the PyPy interpreter.\n(Contributed by Pablo Galindo in bpo-42864 and Batuhan Taskaya in bpo-40176.)\nSyntaxError\nexceptions raised by the interpreter will now highlight the\nfull error range of the expression that constitutes the syntax error itself,\ninstead of just where the problem is detected. In this way, instead of displaying\n(before Python 3.10):\n>>> foo(x, z for z in range(10), t, w)\nFile \"<stdin>\", line 1\nfoo(x, z for z in range(10), t, w)\n^\nSyntaxError: Generator expression must be parenthesized\nnow Python 3.10 will display the exception as:\n>>> foo(x, z for z in range(10), t, w)\nFile \"<stdin>\", line 1\nfoo(x, z for z in range(10), t, w)\n^^^^^^^^^^^^^^^^^^^^\nSyntaxError: Generator expression must be parenthesized\nThis improvement was contributed by Pablo Galindo in bpo-43914.\nA considerable amount of new specialized messages for SyntaxError\nexceptions\nhave been incorporated. Some of the most notable ones are as follows:\nMissing\n:\nbefore blocks:>>> if rocket.position > event_horizon File \"<stdin>\", line 1 if rocket.position > event_horizon ^ SyntaxError: expected ':'\n(Contributed by Pablo Galindo in bpo-42997.)\nUnparenthesised tuples in comprehensions targets:\n>>> {x,y for x,y in zip('abcd', '1234')} File \"<stdin>\", line 1 {x,y for x,y in zip('abcd', '1234')} ^ SyntaxError: did you forget parentheses around the comprehension target?\n(Contributed by Pablo Galindo in bpo-43017.)\nMissing commas in collection literals and between expressions:\n>>> items = { ... x: 1, ... y: 2 ... z: 3, File \"<stdin>\", line 3 y: 2 ^ SyntaxError: invalid syntax. Perhaps you forgot a comma?\n(Contributed by Pablo Galindo in bpo-43822.)\nMultiple Exception types without parentheses:\n>>> try: ... build_dyson_sphere() ... except NotEnoughScienceError, NotEnoughResourcesError: File \"<stdin>\", line 3 except NotEnoughScienceError, NotEnoughResourcesError: ^ SyntaxError: multiple exception types must be parenthesized\n(Contributed by Pablo Galindo in bpo-43149.)\nMissing\n:\nand values in dictionary literals:>>> values = { ... x: 1, ... y: 2, ... z: ... } File \"<stdin>\", line 4 z: ^ SyntaxError: expression expected after dictionary key and ':' >>> values = {x:1, y:2, z w:3} File \"<stdin>\", line 1 values = {x:1, y:2, z w:3} ^ SyntaxError: ':' expected after dictionary key\n(Contributed by Pablo Galindo in bpo-43823.)\ntry\nblocks withoutexcept\norfinally\nblocks:>>> try: ... x = 2 ... something = 3 File \"<stdin>\", line 3 something = 3 ^^^^^^^^^ SyntaxError: expected 'except' or 'finally' block\n(Contributed by Pablo Galindo in bpo-44305.)\nUsage of\n=\ninstead of==\nin comparisons:>>> if rocket.position = event_horizon: File \"<stdin>\", line 1 if rocket.position = event_horizon: ^ SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead of '='?\n(Contributed by Pablo Galindo in bpo-43797.)\nUsage of\n*\nin f-strings:>>> f\"Black holes {*all_black_holes} and revelations\" File \"<stdin>\", line 1 (*all_black_holes) ^ SyntaxError: f-string: cannot use starred expression here\n(Contributed by Pablo Galindo in bpo-41064.)\nIndentationErrors\u00b6\nMany IndentationError\nexceptions now have more context regarding what kind of block\nwas expecting an indentation, including the location of the statement:\n>>> def foo():\n... if lel:\n... x = 2\nFile \"<stdin>\", line 3\nx = 2\n^\nIndentationError: expected an indented block after 'if' statement in line 2\nAttributeErrors\u00b6\nWhen printing AttributeError\n, PyErr_Display()\nwill offer\nsuggestions of similar attribute names in the object that the exception was\nraised from:\n>>> collections.namedtoplo\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nAttributeError: module 'collections' has no attribute 'namedtoplo'. Did you mean: namedtuple?\n(Contributed by Pablo Galindo in bpo-38530.)\nWarning\nNotice this won\u2019t work if PyErr_Display()\nis not called to display the error\nwhich can happen if some other custom error display function is used. This is a common\nscenario in some REPLs like IPython.\nNameErrors\u00b6\nWhen printing NameError\nraised by the interpreter, PyErr_Display()\nwill offer suggestions of similar variable names in the function that the exception\nwas raised from:\n>>> schwarzschild_black_hole = None\n>>> schwarschild_black_hole\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nNameError: name 'schwarschild_black_hole' is not defined. Did you mean: schwarzschild_black_hole?\n(Contributed by Pablo Galindo in bpo-38530.)\nWarning\nNotice this won\u2019t work if PyErr_Display()\nis not called to display the error,\nwhich can happen if some other custom error display function is used. This is a common\nscenario in some REPLs like IPython.\nPEP 626: Precise line numbers for debugging and other tools\u00b6\nPEP 626 brings more precise and reliable line numbers for debugging, profiling and coverage tools. Tracing events, with the correct line number, are generated for all lines of code executed and only for lines of code that are executed.\nThe f_lineno\nattribute of frame objects will always contain the\nexpected line number.\nThe co_lnotab\nattribute of\ncode objects is deprecated and\nwill be removed in 3.12.\nCode that needs to convert from offset to line number should use the new\nco_lines()\nmethod instead.\nPEP 634: Structural Pattern Matching\u00b6\nStructural pattern matching has been added in the form of a match statement and case statements of patterns with associated actions. Patterns consist of sequences, mappings, primitive data types as well as class instances. Pattern matching enables programs to extract information from complex data types, branch on the structure of data, and apply specific actions based on different forms of data.\nSyntax and operations\u00b6\nThe generic syntax of pattern matching is:\nmatch subject:\ncase <pattern_1>:\n<action_1>\ncase <pattern_2>:\n<action_2>\ncase <pattern_3>:\n<action_3>\ncase _:\n<action_wildcard>\nA match statement takes an expression and compares its value to successive patterns given as one or more case blocks. Specifically, pattern matching operates by:\nusing data with type and shape (the\nsubject\n)evaluating the\nsubject\nin thematch\nstatementcomparing the subject with each pattern in a\ncase\nstatement from top to bottom until a match is confirmed.executing the action associated with the pattern of the confirmed match\nIf an exact match is not confirmed, the last case, a wildcard\n_\n, if provided, will be used as the matching case. If an exact match is not confirmed and a wildcard case does not exist, the entire match block is a no-op.\nDeclarative approach\u00b6\nReaders may be aware of pattern matching through the simple example of matching a subject (data object) to a literal (pattern) with the switch statement found in C, Java or JavaScript (and many other languages). Often the switch statement is used for comparison of an object/expression with case statements containing literals.\nMore powerful examples of pattern matching can be found in languages such as Scala and Elixir. With structural pattern matching, the approach is \u201cdeclarative\u201d and explicitly states the conditions (the patterns) for data to match.\nWhile an \u201cimperative\u201d series of instructions using nested \u201cif\u201d statements could be used to accomplish something similar to structural pattern matching, it is less clear than the \u201cdeclarative\u201d approach. Instead the \u201cdeclarative\u201d approach states the conditions to meet for a match and is more readable through its explicit patterns. While structural pattern matching can be used in its simplest form comparing a variable to a literal in a case statement, its true value for Python lies in its handling of the subject\u2019s type and shape.\nSimple pattern: match to a literal\u00b6\nLet\u2019s look at this example as pattern matching in its simplest form: a value,\nthe subject, being matched to several literals, the patterns. In the example\nbelow, status\nis the subject of the match statement. The patterns are\neach of the case statements, where literals represent request status codes.\nThe associated action to the case is executed after a match:\ndef http_error(status):\nmatch status:\ncase 400:\nreturn \"Bad request\"\ncase 404:\nreturn \"Not found\"\ncase 418:\nreturn \"I'm a teapot\"\ncase _:\nreturn \"Something's wrong with the internet\"\nIf the above function is passed a status\nof 418, \u201cI\u2019m a teapot\u201d is returned.\nIf the above function is passed a status\nof 500, the case statement with\n_\nwill match as a wildcard, and \u201cSomething\u2019s wrong with the internet\u201d is\nreturned.\nNote the last block: the variable name, _\n, acts as a wildcard and insures\nthe subject will always match. The use of _\nis optional.\nYou can combine several literals in a single pattern using |\n(\u201cor\u201d):\ncase 401 | 403 | 404:\nreturn \"Not allowed\"\nBehavior without the wildcard\u00b6\nIf we modify the above example by removing the last case block, the example becomes:\ndef http_error(status):\nmatch status:\ncase 400:\nreturn \"Bad request\"\ncase 404:\nreturn \"Not found\"\ncase 418:\nreturn \"I'm a teapot\"\nWithout the use of _\nin a case statement, a match may not exist. If no\nmatch exists, the behavior is a no-op. For example, if status\nof 500 is\npassed, a no-op occurs.\nPatterns with a literal and variable\u00b6\nPatterns can look like unpacking assignments, and a pattern may be used to bind variables. In this example, a data point can be unpacked to its x-coordinate and y-coordinate:\n# point is an (x, y) tuple\nmatch point:\ncase (0, 0):\nprint(\"Origin\")\ncase (0, y):\nprint(f\"Y={y}\")\ncase (x, 0):\nprint(f\"X={x}\")\ncase (x, y):\nprint(f\"X={x}, Y={y}\")\ncase _:\nraise ValueError(\"Not a point\")\nThe first pattern has two literals, (0, 0)\n, and may be thought of as an\nextension of the literal pattern shown above. The next two patterns combine a\nliteral and a variable, and the variable binds a value from the subject\n(point\n). The fourth pattern captures two values, which makes it\nconceptually similar to the unpacking assignment (x, y) = point\n.\nPatterns and classes\u00b6\nIf you are using classes to structure your data, you can use as a pattern the class name followed by an argument list resembling a constructor. This pattern has the ability to capture class attributes into variables:\nclass Point:\nx: int\ny: int\ndef location(point):\nmatch point:\ncase Point(x=0, y=0):\nprint(\"Origin is the point's location.\")\ncase Point(x=0, y=y):\nprint(f\"Y={y} and the point is on the y-axis.\")\ncase Point(x=x, y=0):\nprint(f\"X={x} and the point is on the x-axis.\")\ncase Point():\nprint(\"The point is located somewhere else on the plane.\")\ncase _:\nprint(\"Not a point\")\nPatterns with positional parameters\u00b6\nYou can use positional parameters with some builtin classes that provide an\nordering for their attributes (e.g. dataclasses). You can also define a specific\nposition for attributes in patterns by setting the __match_args__\nspecial\nattribute in your classes. If it\u2019s set to (\u201cx\u201d, \u201cy\u201d), the following patterns\nare all equivalent (and all bind the y\nattribute to the var\nvariable):\nPoint(1, var)\nPoint(1, y=var)\nPoint(x=1, y=var)\nPoint(y=var, x=1)\nNested patterns\u00b6\nPatterns can be arbitrarily nested. For example, if our data is a short list of points, it could be matched like this:\nmatch points:\ncase []:\nprint(\"No points in the list.\")\ncase [Point(0, 0)]:\nprint(\"The origin is the only point in the list.\")\ncase [Point(x, y)]:\nprint(f\"A single point {x}, {y} is in the list.\")\ncase [Point(0, y1), Point(0, y2)]:\nprint(f\"Two points on the Y axis at {y1}, {y2} are in the list.\")\ncase _:\nprint(\"Something else is found in the list.\")\nComplex patterns and the wildcard\u00b6\nTo this point, the examples have used _\nalone in the last case statement.\nA wildcard can be used in more complex patterns, such as ('error', code, _)\n.\nFor example:\nmatch test_variable:\ncase ('warning', code, 40):\nprint(\"A warning has been received.\")\ncase ('error', code, _):\nprint(f\"An error {code} occurred.\")\nIn the above case, test_variable\nwill match for (\u2018error\u2019, code, 100) and\n(\u2018error\u2019, code, 800).\nGuard\u00b6\nWe can add an if\nclause to a pattern, known as a \u201cguard\u201d. If the\nguard is false, match\ngoes on to try the next case block. Note\nthat value capture happens before the guard is evaluated:\nmatch point:\ncase Point(x, y) if x == y:\nprint(f\"The point is located on the diagonal Y=X at {x}.\")\ncase Point(x, y):\nprint(f\"Point is not on the diagonal.\")\nOther Key Features\u00b6\nSeveral other key features:\nLike unpacking assignments, tuple and list patterns have exactly the same meaning and actually match arbitrary sequences. Technically, the subject must be a sequence. Therefore, an important exception is that patterns don\u2019t match iterators. Also, to prevent a common mistake, sequence patterns don\u2019t match strings.\nSequence patterns support wildcards:\n[x, y, *rest]\nand(x, y, *rest)\nwork similar to wildcards in unpacking assignments. The name after*\nmay also be_\n, so(x, y, *_)\nmatches a sequence of at least two items without binding the remaining items.Mapping patterns:\n{\"bandwidth\": b, \"latency\": l}\ncaptures the\"bandwidth\"\nand\"latency\"\nvalues from a dict. Unlike sequence patterns, extra keys are ignored. A wildcard**rest\nis also supported. (But**_\nwould be redundant, so is not allowed.)Subpatterns may be captured using the\nas\nkeyword:case (Point(x1, y1), Point(x2, y2) as p2): ...\nThis binds x1, y1, x2, y2 like you would expect without the\nas\nclause, and p2 to the entire second item of the subject.Most literals are compared by equality. However, the singletons\nTrue\n,False\nandNone\nare compared by identity.Named constants may be used in patterns. These named constants must be dotted names to prevent the constant from being interpreted as a capture variable:\nfrom enum import Enum class Color(Enum): RED = 0 GREEN = 1 BLUE = 2 color = Color.GREEN match color: case Color.RED: print(\"I see red!\") case Color.GREEN: print(\"Grass is green\") case Color.BLUE: print(\"I'm feeling the blues :(\")\nFor the full specification see PEP 634. Motivation and rationale are in PEP 635, and a longer tutorial is in PEP 636.\nOptional EncodingWarning\nand encoding=\"locale\"\noption\u00b6\nThe default encoding of TextIOWrapper\nand open()\nis\nplatform and locale dependent. Since UTF-8 is used on most Unix\nplatforms, omitting encoding\noption when opening UTF-8 files\n(e.g. JSON, YAML, TOML, Markdown) is a very common bug. For example:\n# BUG: \"rb\" mode or encoding=\"utf-8\" should be used.\nwith open(\"data.json\") as f:\ndata = json.load(f)\nTo find this type of bug, an optional EncodingWarning\nis added.\nIt is emitted when sys.flags.warn_default_encoding\nis true and locale-specific default encoding is used.\n-X warn_default_encoding\noption and PYTHONWARNDEFAULTENCODING\nare added to enable the warning.\nSee Text Encoding for more information.\nOther Language Changes\u00b6\nThe\nint\ntype has a new methodint.bit_count()\n, returning the number of ones in the binary expansion of a given integer, also known as the population count. (Contributed by Niklas Fiekas in bpo-29882.)The views returned by\ndict.keys()\n,dict.values()\nanddict.items()\nnow all have amapping\nattribute that gives atypes.MappingProxyType\nobject wrapping the original dictionary. (Contributed by Dennis Sweeney in bpo-40890.)PEP 618: The\nzip()\nfunction now has an optionalstrict\nflag, used to require that all the iterables have an equal length.Builtin and extension functions that take integer arguments no longer accept\nDecimal\ns,Fraction\ns and other objects that can be converted to integers only with a loss (e.g. that have the__int__()\nmethod but do not have the__index__()\nmethod). (Contributed by Serhiy Storchaka in bpo-37999.)If\nobject.__ipow__()\nreturnsNotImplemented\n, the operator will correctly fall back toobject.__pow__()\nandobject.__rpow__()\nas expected. (Contributed by Alex Shkop in bpo-38302.)Assignment expressions can now be used unparenthesized within set literals and set comprehensions, as well as in sequence indexes (but not slices).\nFunctions have a new\n__builtins__\nattribute which is used to look for builtin symbols when a function is executed, instead of looking into__globals__['__builtins__']\n. The attribute is initialized from__globals__[\"__builtins__\"]\nif it exists, else from the current builtins. (Contributed by Mark Shannon in bpo-42990.)Two new builtin functions \u2013\naiter()\nandanext()\nhave been added to provide asynchronous counterparts toiter()\nandnext()\n, respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang in bpo-31861.)Static methods (\n@staticmethod\n) and class methods (@classmethod\n) now inherit the method attributes (__module__\n,__name__\n,__qualname__\n,__doc__\n,__annotations__\n) and have a new__wrapped__\nattribute. Moreover, static methods are now callable as regular functions. (Contributed by Victor Stinner in bpo-43682.)Annotations for complex targets (everything beside\nsimple name\ntargets defined by PEP 526) no longer cause any runtime effects withfrom __future__ import annotations\n. (Contributed by Batuhan Taskaya in bpo-42737.)Class and module objects now lazy-create empty annotations dicts on demand. The annotations dicts are stored in the object\u2019s\n__dict__\nfor backwards compatibility. This improves the best practices for working with__annotations__\n; for more information, please see Annotations Best Practices. (Contributed by Larry Hastings in bpo-43901.)Annotations consist of\nyield\n,yield from\n,await\nor named expressions are now forbidden underfrom __future__ import annotations\ndue to their side effects. (Contributed by Batuhan Taskaya in bpo-42725.)Usage of unbound variables,\nsuper()\nand other expressions that might alter the processing of symbol table as annotations are now rendered effectless underfrom __future__ import annotations\n. (Contributed by Batuhan Taskaya in bpo-42725.)Hashes of NaN values of both\nfloat\ntype anddecimal.Decimal\ntype now depend on object identity. Formerly, they always hashed to0\neven though NaN values are not equal to one another. This caused potentially quadratic runtime behavior due to excessive hash collisions when creating dictionaries and sets containing multiple NaNs. (Contributed by Raymond Hettinger in bpo-43475.)A\nSyntaxError\n(instead of aNameError\n) will be raised when deleting the__debug__\nconstant. (Contributed by Donghee Na in bpo-45000.)SyntaxError\nexceptions now haveend_lineno\nandend_offset\nattributes. They will beNone\nif not determined. (Contributed by Pablo Galindo in bpo-43914.)\nNew Modules\u00b6\nNone.\nImproved Modules\u00b6\nasyncio\u00b6\nAdd missing connect_accepted_socket()\nmethod.\n(Contributed by Alex Gr\u00f6nholm in bpo-41332.)\nargparse\u00b6\nMisleading phrase \u201coptional arguments\u201d was replaced with \u201coptions\u201d in argparse help. Some tests might require adaptation if they rely on exact output match. (Contributed by Raymond Hettinger in bpo-9694.)\narray\u00b6\nThe index()\nmethod of array.array\nnow has\noptional start and stop parameters.\n(Contributed by Anders Lorentsen and Zackery Spytz in bpo-31956.)\nasynchat, asyncore, smtpd\u00b6\nThese modules have been marked as deprecated in their module documentation\nsince Python 3.6. An import-time DeprecationWarning\nhas now been\nadded to all three of these modules.\nbase64\u00b6\nAdd base64.b32hexencode()\nand base64.b32hexdecode()\nto support the\nBase32 Encoding with Extended Hex Alphabet.\nbdb\u00b6\nAdd clearBreakpoints()\nto reset all set breakpoints.\n(Contributed by Irit Katriel in bpo-24160.)\nbisect\u00b6\nAdded the possibility of providing a key function to the APIs in the bisect\nmodule. (Contributed by Raymond Hettinger in bpo-4356.)\ncodecs\u00b6\nAdd a codecs.unregister()\nfunction to unregister a codec search function.\n(Contributed by Hai Shi in bpo-41842.)\ncollections.abc\u00b6\nThe __args__\nof the parameterized generic for\ncollections.abc.Callable\nare now consistent with typing.Callable\n.\ncollections.abc.Callable\ngeneric now flattens type parameters, similar\nto what typing.Callable\ncurrently does. This means that\ncollections.abc.Callable[[int, str], str]\nwill have __args__\nof\n(int, str, str)\n; previously this was ([int, str], str)\n. To allow this\nchange, types.GenericAlias\ncan now be subclassed, and a subclass will\nbe returned when subscripting the collections.abc.Callable\ntype. Note\nthat a TypeError\nmay be raised for invalid forms of parameterizing\ncollections.abc.Callable\nwhich may have passed silently in Python 3.9.\n(Contributed by Ken Jin in bpo-42195.)\ncontextlib\u00b6\nAdd a contextlib.aclosing()\ncontext manager to safely close async generators\nand objects representing asynchronously released resources.\n(Contributed by Joongi Kim and John Belmonte in bpo-41229.)\nAdd asynchronous context manager support to contextlib.nullcontext()\n.\n(Contributed by Tom Gringauz in bpo-41543.)\nAdd AsyncContextDecorator\n, for supporting usage of async\ncontext managers as decorators.\ncurses\u00b6\nThe extended color functions added in ncurses 6.1 will be used transparently\nby curses.color_content()\n, curses.init_color()\n,\ncurses.init_pair()\n, and curses.pair_content()\n. A new function,\ncurses.has_extended_color_support()\n, indicates whether extended color\nsupport is provided by the underlying ncurses library.\n(Contributed by Jeffrey Kintscher and Hans Petter Jansson in bpo-36982.)\nThe BUTTON5_*\nconstants are now exposed in the curses\nmodule if\nthey are provided by the underlying curses library.\n(Contributed by Zackery Spytz in bpo-39273.)\ndataclasses\u00b6\n__slots__\u00b6\nAdded slots\nparameter in dataclasses.dataclass()\ndecorator.\n(Contributed by Yurii Karabas in bpo-42269)\nKeyword-only fields\u00b6\ndataclasses now supports fields that are keyword-only in the generated __init__ method. There are a number of ways of specifying keyword-only fields.\nYou can say that every field is keyword-only:\nfrom dataclasses import dataclass\n@dataclass(kw_only=True)\nclass Birthday:\nname: str\nbirthday: datetime.date\nBoth name\nand birthday\nare keyword-only parameters to the\ngenerated __init__ method.\nYou can specify keyword-only on a per-field basis:\nfrom dataclasses import dataclass, field\n@dataclass\nclass Birthday:\nname: str\nbirthday: datetime.date = field(kw_only=True)\nHere only birthday\nis keyword-only. If you set kw_only\non\nindividual fields, be aware that there are rules about re-ordering\nfields due to keyword-only fields needing to follow non-keyword-only\nfields. See the full dataclasses documentation for details.\nYou can also specify that all fields following a KW_ONLY marker are keyword-only. This will probably be the most common usage:\nfrom dataclasses import dataclass, KW_ONLY\n@dataclass\nclass Point:\nx: float\ny: float\n_: KW_ONLY\nz: float = 0.0\nt: float = 0.0\nHere, z\nand t\nare keyword-only parameters, while x\nand\ny\nare not.\n(Contributed by Eric V. Smith in bpo-43532.)\ndistutils\u00b6\nThe entire distutils\npackage is deprecated, to be removed in Python\n3.12. Its functionality for specifying package builds has already been\ncompletely replaced by third-party packages setuptools\nand\npackaging\n, and most other commonly used APIs are available elsewhere\nin the standard library (such as platform\n, shutil\n,\nsubprocess\nor sysconfig\n). There are no plans to migrate\nany other functionality from distutils\n, and applications that are\nusing other functions should plan to make private copies of the code.\nRefer to PEP 632 for discussion.\nThe bdist_wininst\ncommand deprecated in Python 3.8 has been removed.\nThe bdist_wheel\ncommand is now recommended to distribute binary packages\non Windows.\n(Contributed by Victor Stinner in bpo-42802.)\ndoctest\u00b6\nWhen a module does not define __loader__\n, fall back to __spec__.loader\n.\n(Contributed by Brett Cannon in bpo-42133.)\nencodings\u00b6\nencodings.normalize_encoding()\nnow ignores non-ASCII characters.\n(Contributed by Hai Shi in bpo-39337.)\nenum\u00b6\nEnum\n__repr__()\nnow returns enum_name.member_name\nand\n__str__()\nnow returns member_name\n. Stdlib enums available as\nmodule constants have a repr()\nof module_name.member_name\n.\n(Contributed by Ethan Furman in bpo-40066.)\nAdd enum.StrEnum\nfor enums where all members are strings.\n(Contributed by Ethan Furman in bpo-41816.)\nfileinput\u00b6\nAdd encoding and errors parameters in fileinput.input()\nand\nfileinput.FileInput\n.\n(Contributed by Inada Naoki in bpo-43712.)\nfileinput.hook_compressed()\nnow returns TextIOWrapper\nobject\nwhen mode is \u201cr\u201d and file is compressed, like uncompressed files.\n(Contributed by Inada Naoki in bpo-5758.)\nfaulthandler\u00b6\nThe faulthandler\nmodule now detects if a fatal error occurs during a\ngarbage collector collection.\n(Contributed by Victor Stinner in bpo-44466.)\ngc\u00b6\nAdd audit hooks for gc.get_objects()\n, gc.get_referrers()\nand\ngc.get_referents()\n. (Contributed by Pablo Galindo in bpo-43439.)\nglob\u00b6\nAdd the root_dir and dir_fd parameters in glob()\nand\niglob()\nwhich allow to specify the root directory for searching.\n(Contributed by Serhiy Storchaka in bpo-38144.)\nhashlib\u00b6\nThe hashlib module requires OpenSSL 1.1.1 or newer. (Contributed by Christian Heimes in PEP 644 and bpo-43669.)\nThe hashlib module has preliminary support for OpenSSL 3.0.0. (Contributed by Christian Heimes in bpo-38820 and other issues.)\nThe pure-Python fallback of pbkdf2_hmac()\nis deprecated. In\nthe future PBKDF2-HMAC will only be available when Python has been built with\nOpenSSL support.\n(Contributed by Christian Heimes in bpo-43880.)\nhmac\u00b6\nThe hmac module now uses OpenSSL\u2019s HMAC implementation internally. (Contributed by Christian Heimes in bpo-40645.)\nIDLE and idlelib\u00b6\nMake IDLE invoke sys.excepthook()\n(when started without \u2018-n\u2019).\nUser hooks were previously ignored. (Contributed by Ken Hilton in\nbpo-43008.)\nRearrange the settings dialog. Split the General tab into Windows and Shell/Ed tabs. Move help sources, which extend the Help menu, to the Extensions tab. Make space for new options and shorten the dialog. The latter makes the dialog better fit small screens. (Contributed by Terry Jan Reedy in bpo-40468.) Move the indent space setting from the Font tab to the new Windows tab. (Contributed by Mark Roseman and Terry Jan Reedy in bpo-33962.)\nThe changes above were backported to a 3.9 maintenance release.\nAdd a Shell sidebar. Move the primary prompt (\u2018>>>\u2019) to the sidebar. Add secondary prompts (\u2019\u2026\u2019) to the sidebar. Left click and optional drag selects one or more lines of text, as with the editor line number sidebar. Right click after selecting text lines displays a context menu with \u2018copy with prompts\u2019. This zips together prompts from the sidebar with lines from the selected text. This option also appears on the context menu for the text. (Contributed by Tal Einat in bpo-37903.)\nUse spaces instead of tabs to indent interactive code. This makes interactive code entries \u2018look right\u2019. Making this feasible was a major motivation for adding the shell sidebar. (Contributed by Terry Jan Reedy in bpo-37892.)\nHighlight the new soft keywords match\n,\ncase\n, and _\nin\npattern-matching statements. However, this highlighting is not perfect\nand will be incorrect in some rare cases, including some _\n-s in\ncase\npatterns. (Contributed by Tal Einat in bpo-44010.)\nNew in 3.10 maintenance releases.\nApply syntax highlighting to .pyi\nfiles. (Contributed by Alex\nWaygood and Terry Jan Reedy in bpo-45447.)\nInclude prompts when saving Shell with inputs and outputs. (Contributed by Terry Jan Reedy in gh-95191.)\nimportlib.metadata\u00b6\nFeature parity with importlib_metadata\n4.6\n(history).\nimportlib.metadata entry points now provide a nicer experience for selecting entry points by group and name through a new importlib.metadata.EntryPoints class. See the Compatibility Note in the docs for more info on the deprecation and usage.\nAdded importlib.metadata.packages_distributions() for resolving top-level Python modules and packages to their importlib.metadata.Distribution.\ninspect\u00b6\nWhen a module does not define __loader__\n, fall back to __spec__.loader\n.\n(Contributed by Brett Cannon in bpo-42133.)\nAdd inspect.get_annotations()\n, which safely computes the annotations\ndefined on an object. It works around the quirks of accessing the annotations\non various types of objects, and makes very few assumptions about the object\nit examines. inspect.get_annotations()\ncan also correctly un-stringize\nstringized annotations. inspect.get_annotations()\nis now considered\nbest practice for accessing the annotations dict defined on any Python object;\nfor more information on best practices for working with annotations, please see\nAnnotations Best Practices.\nRelatedly, inspect.signature()\n,\ninspect.Signature.from_callable()\n, and inspect.Signature.from_function()\nnow call inspect.get_annotations()\nto retrieve annotations. This means\ninspect.signature()\nand inspect.Signature.from_callable()\ncan\nalso now un-stringize stringized annotations.\n(Contributed by Larry Hastings in bpo-43817.)\nitertools\u00b6\nAdd itertools.pairwise()\n.\n(Contributed by Raymond Hettinger in bpo-38200.)\nlinecache\u00b6\nWhen a module does not define __loader__\n, fall back to __spec__.loader\n.\n(Contributed by Brett Cannon in bpo-42133.)\nos\u00b6\nAdd os.cpu_count()\nsupport for VxWorks RTOS.\n(Contributed by Peixing Xin in bpo-41440.)\nAdd a new function os.eventfd()\nand related helpers to wrap the\neventfd2\nsyscall on Linux.\n(Contributed by Christian Heimes in bpo-41001.)\nAdd os.splice()\nthat allows to move data between two file\ndescriptors without copying between kernel address space and user\naddress space, where one of the file descriptors must refer to a\npipe. (Contributed by Pablo Galindo in bpo-41625.)\nAdd O_EVTONLY\n, O_FSYNC\n, O_SYMLINK\nand O_NOFOLLOW_ANY\nfor macOS.\n(Contributed by Donghee Na in bpo-43106.)\nos.path\u00b6\nos.path.realpath()\nnow accepts a strict keyword-only argument. When set\nto True\n, OSError\nis raised if a path doesn\u2019t exist or a symlink loop\nis encountered.\n(Contributed by Barney Gale in bpo-43757.)\npathlib\u00b6\nAdd slice support to PurePath.parents\n.\n(Contributed by Joshua Cannon in bpo-35498.)\nAdd negative indexing support to PurePath.parents\n.\n(Contributed by Yaroslav Pankovych in bpo-21041.)\nAdd Path.hardlink_to\nmethod that\nsupersedes link_to()\n. The new method has the same argument\norder as symlink_to()\n.\n(Contributed by Barney Gale in bpo-39950.)\npathlib.Path.stat()\nand chmod()\nnow accept a\nfollow_symlinks keyword-only argument for consistency with corresponding\nfunctions in the os\nmodule.\n(Contributed by Barney Gale in bpo-39906.)\nplatform\u00b6\nAdd platform.freedesktop_os_release()\nto retrieve operation system\nidentification from freedesktop.org os-release standard file.\n(Contributed by Christian Heimes in bpo-28468.)\npprint\u00b6\npprint.pprint()\nnow accepts a new underscore_numbers\nkeyword argument.\n(Contributed by sblondon in bpo-42914.)\npprint\ncan now pretty-print dataclasses.dataclass\ninstances.\n(Contributed by Lewis Gaul in bpo-43080.)\npy_compile\u00b6\nAdd --quiet\noption to command-line interface of py_compile\n.\n(Contributed by Gregory Schevchenko in bpo-38731.)\npyclbr\u00b6\nAdd an end_lineno\nattribute to the Function\nand Class\nobjects in the tree returned by pyclbr.readmodule()\nand\npyclbr.readmodule_ex()\n. It matches the existing (start) lineno\n.\n(Contributed by Aviral Srivastava in bpo-38307.)\nshelve\u00b6\nThe shelve\nmodule now uses pickle.DEFAULT_PROTOCOL\nby default\ninstead of pickle\nprotocol 3\nwhen creating shelves.\n(Contributed by Zackery Spytz in bpo-34204.)\nstatistics\u00b6\nAdd covariance()\n, Pearson\u2019s\ncorrelation()\n, and simple\nlinear_regression()\nfunctions.\n(Contributed by Tymoteusz Wo\u0142od\u017ako in bpo-38490.)\nsite\u00b6\nWhen a module does not define __loader__\n, fall back to __spec__.loader\n.\n(Contributed by Brett Cannon in bpo-42133.)\nsocket\u00b6\nThe exception socket.timeout\nis now an alias of TimeoutError\n.\n(Contributed by Christian Heimes in bpo-42413.)\nAdd option to create MPTCP sockets with IPPROTO_MPTCP\n(Contributed by Rui Cunha in bpo-43571.)\nAdd IP_RECVTOS\noption to receive the type of service (ToS) or DSCP/ECN fields\n(Contributed by Georg Sauthoff in bpo-44077.)\nssl\u00b6\nThe ssl module requires OpenSSL 1.1.1 or newer. (Contributed by Christian Heimes in PEP 644 and bpo-43669.)\nThe ssl module has preliminary support for OpenSSL 3.0.0 and new option\nOP_IGNORE_UNEXPECTED_EOF\n.\n(Contributed by Christian Heimes in bpo-38820, bpo-43794,\nbpo-43788, bpo-43791, bpo-43799, bpo-43920,\nbpo-43789, and bpo-43811.)\nDeprecated function and use of deprecated constants now result in\na DeprecationWarning\n. ssl.SSLContext.options\nhas\nOP_NO_SSLv2\nand OP_NO_SSLv3\nset by default and\ntherefore cannot warn about setting the flag again. The\ndeprecation section has a list of deprecated\nfeatures.\n(Contributed by Christian Heimes in bpo-43880.)\nThe ssl module now has more secure default settings. Ciphers without forward\nsecrecy or SHA-1 MAC are disabled by default. Security level 2 prohibits\nweak RSA, DH, and ECC keys with less than 112 bits of security.\nSSLContext\ndefaults to minimum protocol version TLS 1.2.\nSettings are based on Hynek Schlawack\u2019s research.\n(Contributed by Christian Heimes in bpo-43998.)\nThe deprecated protocols SSL 3.0, TLS 1.0, and TLS 1.1 are no longer officially supported. Python does not block them actively. However OpenSSL build options, distro configurations, vendor patches, and cipher suites may prevent a successful handshake.\nAdd a timeout parameter to the ssl.get_server_certificate()\nfunction.\n(Contributed by Zackery Spytz in bpo-31870.)\nThe ssl module uses heap-types and multi-phase initialization. (Contributed by Christian Heimes in bpo-42333.)\nA new verify flag VERIFY_X509_PARTIAL_CHAIN\nhas been added.\n(Contributed by l0x in bpo-40849.)\nsqlite3\u00b6\nAdd audit events for connect/handle()\n,\nenable_load_extension()\n, and\nload_extension()\n.\n(Contributed by Erlend E. Aasland in bpo-43762.)\nsys\u00b6\nAdd sys.orig_argv\nattribute: the list of the original command line\narguments passed to the Python executable.\n(Contributed by Victor Stinner in bpo-23427.)\nAdd sys.stdlib_module_names\n, containing the list of the standard library\nmodule names.\n(Contributed by Victor Stinner in bpo-42955.)\n_thread\u00b6\n_thread.interrupt_main()\nnow takes an optional signal number to\nsimulate (the default is still signal.SIGINT\n).\n(Contributed by Antoine Pitrou in bpo-43356.)\nthreading\u00b6\nAdd threading.gettrace()\nand threading.getprofile()\nto\nretrieve the functions set by threading.settrace()\nand\nthreading.setprofile()\nrespectively.\n(Contributed by Mario Corchero in bpo-42251.)\nAdd threading.__excepthook__\nto allow retrieving the original value\nof threading.excepthook()\nin case it is set to a broken or a different\nvalue.\n(Contributed by Mario Corchero in bpo-42308.)\ntraceback\u00b6\nThe format_exception()\n,\nformat_exception_only()\n, and\nprint_exception()\nfunctions can now take an exception object\nas a positional-only argument.\n(Contributed by Zackery Spytz and Matthias Bussonnier in bpo-26389.)\ntypes\u00b6\nReintroduce the types.EllipsisType\n, types.NoneType\nand types.NotImplementedType\nclasses, providing a new set\nof types readily interpretable by type checkers.\n(Contributed by Bas van Beek in bpo-41810.)\ntyping\u00b6\nFor major changes, see New Features Related to Type Hints.\nThe behavior of typing.Literal\nwas changed to conform with PEP 586\nand to match the behavior of static type checkers specified in the PEP.\nLiteral\nnow de-duplicates parameters.Equality comparisons between\nLiteral\nobjects are now order independent.Literal\ncomparisons now respect types. For example,Literal[0] == Literal[False]\npreviously evaluated toTrue\n. It is nowFalse\n. To support this change, the internally used type cache now supports differentiating types.Literal\nobjects will now raise aTypeError\nexception during equality comparisons if any of their parameters are not hashable. Note that declaringLiteral\nwith unhashable parameters will not throw an error:>>> from typing import Literal >>> Literal[{0}] >>> Literal[{0}] == Literal[{False}] Traceback (most recent call last): File \"<stdin>\", line 1, in <module> TypeError: unhashable type: 'set'\n(Contributed by Yurii Karabas in bpo-42345.)\nAdd new function typing.is_typeddict()\nto introspect if an annotation\nis a typing.TypedDict\n.\n(Contributed by Patrick Reader in bpo-41792.)\nSubclasses of typing.Protocol\nwhich only have data variables declared\nwill now raise a TypeError\nwhen checked with isinstance\nunless they\nare decorated with runtime_checkable()\n. Previously, these checks\npassed silently. Users should decorate their\nsubclasses with the runtime_checkable()\ndecorator\nif they want runtime protocols.\n(Contributed by Yurii Karabas in bpo-38908.)\nImporting from the typing.io\nand typing.re\nsubmodules will now emit\nDeprecationWarning\n. These submodules have been deprecated since\nPython 3.8 and will be removed in a future version of Python. Anything\nbelonging to those submodules should be imported directly from\ntyping\ninstead.\n(Contributed by Sebastian Rittau in bpo-38291.)\nunittest\u00b6\nAdd new method assertNoLogs()\nto complement the\nexisting assertLogs()\n. (Contributed by Kit Yan Choi\nin bpo-39385.)\nurllib.parse\u00b6\nPython versions earlier than Python 3.10 allowed using both ;\nand &\nas\nquery parameter separators in urllib.parse.parse_qs()\nand\nurllib.parse.parse_qsl()\n. Due to security concerns, and to conform with\nnewer W3C recommendations, this has been changed to allow only a single\nseparator key, with &\nas the default. This change also affects\ncgi.parse()\nand cgi.parse_multipart()\nas they use the affected\nfunctions internally. For more details, please see their respective\ndocumentation.\n(Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in bpo-42967.)\nThe presence of newline or tab characters in parts of a URL allows for some\nforms of attacks. Following the WHATWG specification that updates RFC 3986,\nASCII newline \\n\n, \\r\nand tab \\t\ncharacters are stripped from the\nURL by the parser in urllib.parse\npreventing such attacks. The removal\ncharacters are controlled by a new module level variable\nurllib.parse._UNSAFE_URL_BYTES_TO_REMOVE\n. (See gh-88048)\nxml\u00b6\nAdd a LexicalHandler\nclass to the\nxml.sax.handler\nmodule.\n(Contributed by Jonathan Gossage and Zackery Spytz in bpo-35018.)\nzipimport\u00b6\nAdd methods related to PEP 451: find_spec()\n,\nzipimport.zipimporter.create_module()\n, and\nzipimport.zipimporter.exec_module()\n.\n(Contributed by Brett Cannon in bpo-42131.)\nAdd invalidate_caches()\nmethod.\n(Contributed by Desmond Cheong in bpo-14678.)\nOptimizations\u00b6\nConstructors\nstr()\n,bytes()\nandbytearray()\nare now faster (around 30\u201340% for small objects). (Contributed by Serhiy Storchaka in bpo-41334.)The\nrunpy\nmodule now imports fewer modules. Thepython3 -m module-name\ncommand startup time is 1.4x faster in average. On Linux,python3 -I -m module-name\nimports 69 modules on Python 3.9, whereas it only imports 51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in bpo-41006 and bpo-41718.)The\nLOAD_ATTR\ninstruction now uses new \u201cper opcode cache\u201d mechanism. It is about 36% faster now for regular attributes and 44% faster for slots. (Contributed by Pablo Galindo and Yury Selivanov in bpo-42093 and Guido van Rossum in bpo-42927, based on ideas implemented originally in PyPy and MicroPython.)When building Python with\n--enable-optimizations\nnow-fno-semantic-interposition\nis added to both the compile and link line. This speeds builds of the Python interpreter created with--enable-shared\nwithgcc\nby up to 30%. See this article for more details. (Contributed by Victor Stinner and Pablo Galindo in bpo-38980.)Use a new output buffer management code for\nbz2\n/lzma\n/zlib\nmodules, and add.readall()\nfunction to_compression.DecompressReader\nclass. bz2 decompression is now 1.09x ~ 1.17x faster, lzma decompression 1.20x ~ 1.32x faster,GzipFile.read(-1)\n1.11x ~ 1.18x faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in bpo-41486)When using stringized annotations, annotations dicts for functions are no longer created when the function is created. Instead, they are stored as a tuple of strings, and the function object lazily converts this into the annotations dict on demand. This optimization cuts the CPU time needed to define an annotated function by half. (Contributed by Yurii Karabas and Inada Naoki in bpo-42202.)\nSubstring search functions such as\nstr1 in str2\nandstr2.find(str1)\nnow sometimes use Crochemore & Perrin\u2019s \u201cTwo-Way\u201d string searching algorithm to avoid quadratic behavior on long strings. (Contributed by Dennis Sweeney in bpo-41972)Add micro-optimizations to\n_PyType_Lookup()\nto improve type attribute cache lookup performance in the common case of cache hits. This makes the interpreter 1.04 times faster on average. (Contributed by Dino Viehland in bpo-43452.)The following built-in functions now support the faster PEP 590 vectorcall calling convention:\nmap()\n,filter()\n,reversed()\n,bool()\nandfloat()\n. (Contributed by Donghee Na and Jeroen Demeyer in bpo-43575, bpo-43287, bpo-41922, bpo-41873 and bpo-41870.)BZ2File\nperformance is improved by removing internalRLock\n. This makesBZ2File\nthread unsafe in the face of multiple simultaneous readers or writers, just like its equivalent classes ingzip\nandlzma\nhave always been. (Contributed by Inada Naoki in bpo-43785.)\nDeprecated\u00b6\nCurrently Python accepts numeric literals immediately followed by keywords, for example\n0in x\n,1or x\n,0if 1else 2\n. It allows confusing and ambiguous expressions like[0x1for x in y]\n(which can be interpreted as[0x1 for x in y]\nor[0x1f or x in y]\n). Starting in this release, a deprecation warning is raised if the numeric literal is immediately followed by one of keywordsand\n,else\n,for\n,if\n,in\n,is\nandor\n. In future releases it will be changed to syntax warning, and finally to syntax error. (Contributed by Serhiy Storchaka in bpo-43833.)Starting in this release, there will be a concerted effort to begin cleaning up old import semantics that were kept for Python 2.7 compatibility. Specifically,\nfind_loader()\n/find_module()\n(superseded byfind_spec()\n),load_module()\n(superseded byexec_module()\n),module_repr()\n(which the import system takes care of for you), the__package__\nattribute (superseded by__spec__.parent\n), the__loader__\nattribute (superseded by__spec__.loader\n), and the__cached__\nattribute (superseded by__spec__.cached\n) will slowly be removed (as well as other classes and methods inimportlib\n).ImportWarning\nand/orDeprecationWarning\nwill be raised as appropriate to help identify code which needs updating during this transition.The entire\ndistutils\nnamespace is deprecated, to be removed in Python 3.12. Refer to the module changes section for more information.Non-integer arguments to\nrandom.randrange()\nare deprecated. TheValueError\nis deprecated in favor of aTypeError\n. (Contributed by Serhiy Storchaka and Raymond Hettinger in bpo-37319.)The various\nload_module()\nmethods ofimportlib\nhave been documented as deprecated since Python 3.6, but will now also trigger aDeprecationWarning\n. Useexec_module()\ninstead. (Contributed by Brett Cannon in bpo-26131.)zimport.zipimporter.load_module()\nhas been deprecated in preference forexec_module()\n. (Contributed by Brett Cannon in bpo-26131.)The use of\nload_module()\nby the import system now triggers anImportWarning\nasexec_module()\nis preferred. (Contributed by Brett Cannon in bpo-26131.)The use of\nimportlib.abc.MetaPathFinder.find_module()\nandimportlib.abc.PathEntryFinder.find_module()\nby the import system now trigger anImportWarning\nasimportlib.abc.MetaPathFinder.find_spec()\nandimportlib.abc.PathEntryFinder.find_spec()\nare preferred, respectively. You can useimportlib.util.spec_from_loader()\nto help in porting. (Contributed by Brett Cannon in bpo-42134.)The use of\nimportlib.abc.PathEntryFinder.find_loader()\nby the import system now triggers anImportWarning\nasimportlib.abc.PathEntryFinder.find_spec()\nis preferred. You can useimportlib.util.spec_from_loader()\nto help in porting. (Contributed by Brett Cannon in bpo-43672.)The various implementations of\nimportlib.abc.MetaPathFinder.find_module()\n(importlib.machinery.BuiltinImporter.find_module()\n,importlib.machinery.FrozenImporter.find_module()\n,importlib.machinery.WindowsRegistryFinder.find_module()\n,importlib.machinery.PathFinder.find_module()\n,importlib.abc.MetaPathFinder.find_module()\n),importlib.abc.PathEntryFinder.find_module()\n(importlib.machinery.FileFinder.find_module()\n), andimportlib.abc.PathEntryFinder.find_loader()\n(importlib.machinery.FileFinder.find_loader()\n) now raiseDeprecationWarning\nand are slated for removal in Python 3.12 (previously they were documented as deprecated in Python 3.4). (Contributed by Brett Cannon in bpo-42135.)importlib.abc.Finder\nis deprecated (including its sole method,find_module()\n). Bothimportlib.abc.MetaPathFinder\nandimportlib.abc.PathEntryFinder\nno longer inherit from the class. Users should inherit from one of these two classes as appropriate instead. (Contributed by Brett Cannon in bpo-42135.)The deprecations of\nimp\n,importlib.find_loader()\n,importlib.util.set_package_wrapper()\n,importlib.util.set_loader_wrapper()\n,importlib.util.module_for_loader()\n,pkgutil.ImpImporter\n, andpkgutil.ImpLoader\nhave all been updated to list Python 3.12 as the slated version of removal (they began raisingDeprecationWarning\nin previous versions of Python). (Contributed by Brett Cannon in bpo-43720.)The import system now uses the\n__spec__\nattribute on modules before falling back onmodule_repr()\nfor a module\u2019s__repr__()\nmethod. Removal of the use ofmodule_repr()\nis scheduled for Python 3.12. (Contributed by Brett Cannon in bpo-42137.)importlib.abc.Loader.module_repr()\n,importlib.machinery.FrozenLoader.module_repr()\n, andimportlib.machinery.BuiltinLoader.module_repr()\nare deprecated and slated for removal in Python 3.12. (Contributed by Brett Cannon in bpo-42136.)sqlite3.OptimizedUnicode\nhas been undocumented and obsolete since Python 3.3, when it was made an alias tostr\n. It is now deprecated, scheduled for removal in Python 3.12. (Contributed by Erlend E. Aasland in bpo-42264.)The undocumented built-in function\nsqlite3.enable_shared_cache\nis now deprecated, scheduled for removal in Python 3.12. Its use is strongly discouraged by the SQLite3 documentation. See the SQLite3 docs for more details. If a shared cache must be used, open the database in URI mode using thecache=shared\nquery parameter. (Contributed by Erlend E. Aasland in bpo-24464.)The following\nthreading\nmethods are now deprecated:threading.currentThread\n=>threading.current_thread()\nthreading.activeCount\n=>threading.active_count()\nthreading.Condition.notifyAll\n=>threading.Condition.notify_all()\nthreading.Event.isSet\n=>threading.Event.is_set()\nthreading.Thread.setName\n=>threading.Thread.name\nthreading.thread.getName\n=>threading.Thread.name\nthreading.Thread.isDaemon\n=>threading.Thread.daemon\nthreading.Thread.setDaemon\n=>threading.Thread.daemon\n(Contributed by Jelle Zijlstra in gh-87889.)\npathlib.Path.link_to()\nis deprecated and slated for removal in Python 3.12. Usepathlib.Path.hardlink_to()\ninstead. (Contributed by Barney Gale in bpo-39950.)cgi.log()\nis deprecated and slated for removal in Python 3.12. (Contributed by Inada Naoki in bpo-41139.)The following\nssl\nfeatures have been deprecated since Python 3.6, Python 3.7, or OpenSSL 1.1.0 and will be removed in 3.11:OP_NO_SSLv2\n,OP_NO_SSLv3\n,OP_NO_TLSv1\n,OP_NO_TLSv1_1\n,OP_NO_TLSv1_2\n, andOP_NO_TLSv1_3\nare replaced byminimum_version\nandmaximum_version\n.PROTOCOL_SSLv2\n,PROTOCOL_SSLv3\n,PROTOCOL_SSLv23\n,PROTOCOL_TLSv1\n,PROTOCOL_TLSv1_1\n,PROTOCOL_TLSv1_2\n, andPROTOCOL_TLS\nare deprecated in favor ofPROTOCOL_TLS_CLIENT\nandPROTOCOL_TLS_SERVER\nwrap_socket()\nis replaced byssl.SSLContext.wrap_socket()\nmatch_hostname()\nRAND_pseudo_bytes()\n,RAND_egd()\nNPN features like\nssl.SSLSocket.selected_npn_protocol()\nandssl.SSLContext.set_npn_protocols()\nare replaced by ALPN.\nThe threading debug (\nPYTHONTHREADDEBUG\nenvironment variable) is deprecated in Python 3.10 and will be removed in Python 3.12. This feature requires a debug build of Python. (Contributed by Victor Stinner in bpo-44584.)Importing from the\ntyping.io\nandtyping.re\nsubmodules will now emitDeprecationWarning\n. These submodules will be removed in a future version of Python. Anything belonging to these submodules should be imported directly fromtyping\ninstead. (Contributed by Sebastian Rittau in bpo-38291.)\nRemoved\u00b6\nRemoved special methods\n__int__\n,__float__\n,__floordiv__\n,__mod__\n,__divmod__\n,__rfloordiv__\n,__rmod__\nand__rdivmod__\nof thecomplex\nclass. They always raised aTypeError\n. (Contributed by Serhiy Storchaka in bpo-41974.)The\nParserBase.error()\nmethod from the private and undocumented_markupbase\nmodule has been removed.html.parser.HTMLParser\nis the only subclass ofParserBase\nand itserror()\nimplementation was already removed in Python 3.5. (Contributed by Berker Peksag in bpo-31844.)Removed the\nunicodedata.ucnhash_CAPI\nattribute which was an internal PyCapsule object. The related private_PyUnicode_Name_CAPI\nstructure was moved to the internal C API. (Contributed by Victor Stinner in bpo-42157.)Removed the\nparser\nmodule, which was deprecated in 3.9 due to the switch to the new PEG parser, as well as all the C source and header files that were only being used by the old parser, includingnode.h\n,parser.h\n,graminit.h\nandgrammar.h\n.Removed the Public C API functions\nPyParser_SimpleParseStringFlags\n,PyParser_SimpleParseStringFlagsFilename\n,PyParser_SimpleParseFileFlags\nandPyNode_Compile\nthat were deprecated in 3.9 due to the switch to the new PEG parser.Removed the\nformatter\nmodule, which was deprecated in Python 3.4. It is somewhat obsolete, little used, and not tested. It was originally scheduled to be removed in Python 3.6, but such removals were delayed until after Python 2.7 EOL. Existing users should copy whatever classes they use into their code. (Contributed by Donghee Na and Terry J. Reedy in bpo-42299.)Removed the\nPyModule_GetWarningsModule()\nfunction that was useless now due to the_warnings\nmodule was converted to a builtin module in 2.6. (Contributed by Hai Shi in bpo-42599.)Remove deprecated aliases to Collections Abstract Base Classes from the\ncollections\nmodule. (Contributed by Victor Stinner in bpo-37324.)The\nloop\nparameter has been removed from most ofasyncio\n\u2018s high-level API following deprecation in Python 3.8. The motivation behind this change is multifold:This simplifies the high-level API.\nThe functions in the high-level API have been implicitly getting the current thread\u2019s running event loop since Python 3.7. There isn\u2019t a need to pass the event loop to the API in most normal use cases.\nEvent loop passing is error-prone especially when dealing with loops running in different threads.\nNote that the low-level API will still accept\nloop\n. See Changes in the Python API for examples of how to replace existing code.(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle Stanley in bpo-42392.)\nPorting to Python 3.10\u00b6\nThis section lists previously described changes and other bugfixes that may require changes to your code.\nChanges in the Python syntax\u00b6\nDeprecation warning is now emitted when compiling previously valid syntax if the numeric literal is immediately followed by a keyword (like in\n0in x\n). In future releases it will be changed to syntax warning, and finally to a syntax error. To get rid of the warning and make the code compatible with future releases just add a space between the numeric literal and the following keyword. (Contributed by Serhiy Storchaka in bpo-43833.)\nChanges in the Python API\u00b6\nThe etype parameters of the\nformat_exception()\n,format_exception_only()\n, andprint_exception()\nfunctions in thetraceback\nmodule have been renamed to exc. (Contributed by Zackery Spytz and Matthias Bussonnier in bpo-26389.)atexit\n: At Python exit, if a callback registered withatexit.register()\nfails, its exception is now logged. Previously, only some exceptions were logged, and the last exception was always silently ignored. (Contributed by Victor Stinner in bpo-42639.)collections.abc.Callable\ngeneric now flattens type parameters, similar to whattyping.Callable\ncurrently does. This means thatcollections.abc.Callable[[int, str], str]\nwill have__args__\nof(int, str, str)\n; previously this was([int, str], str)\n. Code which accesses the arguments viatyping.get_args()\nor__args__\nneed to account for this change. Furthermore,TypeError\nmay be raised for invalid forms of parameterizingcollections.abc.Callable\nwhich may have passed silently in Python 3.9. (Contributed by Ken Jin in bpo-42195.)socket.htons()\nandsocket.ntohs()\nnow raiseOverflowError\ninstead ofDeprecationWarning\nif the given parameter will not fit in a 16-bit unsigned integer. (Contributed by Erlend E. Aasland in bpo-42393.)The\nloop\nparameter has been removed from most ofasyncio\n\u2018s high-level API following deprecation in Python 3.8.A coroutine that currently looks like this:\nasync def foo(loop): await asyncio.sleep(1, loop=loop)\nShould be replaced with this:\nasync def foo(): await asyncio.sleep(1)\nIf\nfoo()\nwas specifically designed not to run in the current thread\u2019s running event loop (e.g. running in another thread\u2019s event loop), consider usingasyncio.run_coroutine_threadsafe()\ninstead.(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle Stanley in bpo-42392.)\nThe\ntypes.FunctionType\nconstructor now inherits the current builtins if the globals dictionary has no\"__builtins__\"\nkey, rather than using{\"None\": None}\nas builtins: same behavior aseval()\nandexec()\nfunctions. Defining a function withdef function(...): ...\nin Python is not affected, globals cannot be overridden with this syntax: it also inherits the current builtins. (Contributed by Victor Stinner in bpo-42990.)\nChanges in the C API\u00b6\nThe C API functions\nPyParser_SimpleParseStringFlags\n,PyParser_SimpleParseStringFlagsFilename\n,PyParser_SimpleParseFileFlags\n,PyNode_Compile\nand the type used by these functions,struct _node\n, were removed due to the switch to the new PEG parser.Source should be now be compiled directly to a code object using, for example,\nPy_CompileString()\n. The resulting code object can then be evaluated using, for example,PyEval_EvalCode()\n.Specifically:\nA call to\nPyParser_SimpleParseStringFlags\nfollowed byPyNode_Compile\ncan be replaced by callingPy_CompileString()\n.There is no direct replacement for\nPyParser_SimpleParseFileFlags\n. To compile code from aFILE *\nargument, you will need to read the file in C and pass the resulting buffer toPy_CompileString()\n.To compile a file given a\nchar *\nfilename, explicitly open the file, read it and compile the result. One way to do this is using theio\nmodule withPyImport_ImportModule()\n,PyObject_CallMethod()\n,PyBytes_AsString()\nandPy_CompileString()\n, as sketched below. (Declarations and error handling are omitted.)io_module = Import_ImportModule(\"io\"); fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, \"rb\"); source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\"); result = PyObject_CallMethod(fileobject, \"close\", \"\"); source_buf = PyBytes_AsString(source_bytes_object); code = Py_CompileString(source_buf, filename, Py_file_input);\nFor\nFrameObject\nobjects, thef_lasti\nmember now represents a wordcode offset instead of a simple offset into the bytecode string. This means that this number needs to be multiplied by 2 to be used with APIs that expect a byte offset instead (likePyCode_Addr2Line()\nfor example). Notice as well that thef_lasti\nmember ofFrameObject\nobjects is not considered stable: please usePyFrame_GetLineNumber()\ninstead.\nCPython bytecode changes\u00b6\nThe\nMAKE_FUNCTION\ninstruction now accepts either a dict or a tuple of strings as the function\u2019s annotations. (Contributed by Yurii Karabas and Inada Naoki in bpo-42202.)\nBuild Changes\u00b6\nPEP 644: Python now requires OpenSSL 1.1.1 or newer. OpenSSL 1.0.2 is no longer supported. (Contributed by Christian Heimes in bpo-43669.)\nThe C99 functions\nsnprintf()\nandvsnprintf()\nare now required to build Python. (Contributed by Victor Stinner in bpo-36020.)sqlite3\nrequires SQLite 3.7.15 or higher. (Contributed by Sergey Fedoseev and Erlend E. Aasland in bpo-40744 and bpo-40810.)The\natexit\nmodule must now always be built as a built-in module. (Contributed by Victor Stinner in bpo-42639.)Add\n--disable-test-modules\noption to theconfigure\nscript: don\u2019t build nor install test modules. (Contributed by Xavier de Gaye, Thomas Petazzoni and Peixing Xin in bpo-27640.)Add\n--with-wheel-pkg-dir=PATH option\nto the./configure\nscript. If specified, theensurepip\nmodule looks forsetuptools\nandpip\nwheel packages in this directory: if both are present, these wheel packages are used instead of ensurepip bundled wheel packages.Some Linux distribution packaging policies recommend against bundling dependencies. For example, Fedora installs wheel packages in the\n/usr/share/python-wheels/\ndirectory and don\u2019t install theensurepip._bundled\npackage.(Contributed by Victor Stinner in bpo-42856.)\nAdd a new\nconfigure --without-static-libpython option\nto not build thelibpythonMAJOR.MINOR.a\nstatic library and not install thepython.o\nobject file.(Contributed by Victor Stinner in bpo-43103.)\nThe\nconfigure\nscript now uses thepkg-config\nutility, if available, to detect the location of Tcl/Tk headers and libraries. As before, those locations can be explicitly specified with the--with-tcltk-includes\nand--with-tcltk-libs\nconfiguration options. (Contributed by Manolis Stamatogiannakis in bpo-42603.)Add\n--with-openssl-rpath\noption toconfigure\nscript. The option simplifies building Python with a custom OpenSSL installation, e.g../configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto\n. (Contributed by Christian Heimes in bpo-43466.)\nC API Changes\u00b6\nPEP 652: Maintaining the Stable ABI\u00b6\nThe Stable ABI (Application Binary Interface) for extension modules or embedding Python is now explicitly defined. C API Stability describes C API and ABI stability guarantees along with best practices for using the Stable ABI.\nNew Features\u00b6\nThe result of\nPyNumber_Index()\nnow always has exact typeint\n. Previously, the result could have been an instance of a subclass ofint\n. (Contributed by Serhiy Storchaka in bpo-40792.)Add a new\norig_argv\nmember to thePyConfig\nstructure: the list of the original command line arguments passed to the Python executable. (Contributed by Victor Stinner in bpo-23427.)The\nPyDateTime_DATE_GET_TZINFO()\nandPyDateTime_TIME_GET_TZINFO()\nmacros have been added for accessing thetzinfo\nattributes ofdatetime.datetime\nanddatetime.time\nobjects. (Contributed by Zackery Spytz in bpo-30155.)Add a\nPyCodec_Unregister()\nfunction to unregister a codec search function. (Contributed by Hai Shi in bpo-41842.)The\nPyIter_Send()\nfunction was added to allow sending value into iterator without raisingStopIteration\nexception. (Contributed by Vladimir Matveev in bpo-41756.)Add\nPyUnicode_AsUTF8AndSize()\nto the limited C API. (Contributed by Alex Gaynor in bpo-41784.)Add\nPyModule_AddObjectRef()\nfunction: similar toPyModule_AddObject()\nbut don\u2019t steal a reference to the value on success. (Contributed by Victor Stinner in bpo-1635741.)Add\nPy_NewRef()\nandPy_XNewRef()\nfunctions to increment the reference count of an object and return the object. (Contributed by Victor Stinner in bpo-42262.)The\nPyType_FromSpecWithBases()\nandPyType_FromModuleAndSpec()\nfunctions now accept a single class as the bases argument. (Contributed by Serhiy Storchaka in bpo-42423.)The\nPyType_FromModuleAndSpec()\nfunction now accepts NULLtp_doc\nslot. (Contributed by Hai Shi in bpo-41832.)The\nPyType_GetSlot()\nfunction can accept static types. (Contributed by Hai Shi and Petr Viktorin in bpo-41073.)Add a new\nPySet_CheckExact()\nfunction to the C-API to check if an object is an instance ofset\nbut not an instance of a subtype. (Contributed by Pablo Galindo in bpo-43277.)Add\nPyErr_SetInterruptEx()\nwhich allows passing a signal number to simulate. (Contributed by Antoine Pitrou in bpo-43356.)The limited C API is now supported if Python is built in debug mode (if the\nPy_DEBUG\nmacro is defined). In the limited C API, thePy_INCREF()\nandPy_DECREF()\nfunctions are now implemented as opaque function calls, rather than accessing directly thePyObject.ob_refcnt\nmember, if Python is built in debug mode and thePy_LIMITED_API\nmacro targets Python 3.10 or newer. It became possible to support the limited C API in debug mode because thePyObject\nstructure is the same in release and debug mode since Python 3.8 (see bpo-36465).The limited C API is still not supported in the\n--with-trace-refs\nspecial build (Py_TRACE_REFS\nmacro). (Contributed by Victor Stinner in bpo-43688.)Add the\nPy_Is(x, y)\nfunction to test if the x object is the y object, the same asx is y\nin Python. Add also thePy_IsNone()\n,Py_IsTrue()\n,Py_IsFalse()\nfunctions to test if an object is, respectively, theNone\nsingleton, theTrue\nsingleton or theFalse\nsingleton. (Contributed by Victor Stinner in bpo-43753.)Add new functions to control the garbage collector from C code:\nPyGC_Enable()\n,PyGC_Disable()\n,PyGC_IsEnabled()\n. These functions allow to activate, deactivate and query the state of the garbage collector from C code without having to import thegc\nmodule.Add a new\nPy_TPFLAGS_DISALLOW_INSTANTIATION\ntype flag to disallow creating type instances. (Contributed by Victor Stinner in bpo-43916.)Add a new\nPy_TPFLAGS_IMMUTABLETYPE\ntype flag for creating immutable type objects: type attributes cannot be set nor deleted. (Contributed by Victor Stinner and Erlend E. Aasland in bpo-43908.)\nPorting to Python 3.10\u00b6\nThe\nPY_SSIZE_T_CLEAN\nmacro must now be defined to usePyArg_ParseTuple()\nandPy_BuildValue()\nformats which use#\n:es#\n,et#\n,s#\n,u#\n,y#\n,z#\n,U#\nandZ#\n. See Parsing arguments and building values and PEP 353. (Contributed by Victor Stinner in bpo-40943.)Since\nPy_REFCNT()\nis changed to the inline static function,Py_REFCNT(obj) = new_refcnt\nmust be replaced withPy_SET_REFCNT(obj, new_refcnt)\n: seePy_SET_REFCNT()\n(available since Python 3.9). For backward compatibility, this macro can be used:#if PY_VERSION_HEX < 0x030900A4 # define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0) #endif\n(Contributed by Victor Stinner in bpo-39573.)\nCalling\nPyDict_GetItem()\nwithout GIL held had been allowed for historical reason. It is no longer allowed. (Contributed by Victor Stinner in bpo-40839.)PyUnicode_FromUnicode(NULL, size)\nandPyUnicode_FromStringAndSize(NULL, size)\nraiseDeprecationWarning\nnow. UsePyUnicode_New()\nto allocate Unicode object without initial data. (Contributed by Inada Naoki in bpo-36346.)The private\n_PyUnicode_Name_CAPI\nstructure of the PyCapsule APIunicodedata.ucnhash_CAPI\nhas been moved to the internal C API. (Contributed by Victor Stinner in bpo-42157.)Py_GetPath()\n,Py_GetPrefix()\n,Py_GetExecPrefix()\n,Py_GetProgramFullPath()\n,Py_GetPythonHome()\nandPy_GetProgramName()\nfunctions now returnNULL\nif called beforePy_Initialize()\n(before Python is initialized). Use the new Python Initialization Configuration API to get the Python Path Configuration. (Contributed by Victor Stinner in bpo-42260.)PyList_SET_ITEM()\n,PyTuple_SET_ITEM()\nandPyCell_SET()\nmacros can no longer be used as l-value or r-value. For example,x = PyList_SET_ITEM(a, b, c)\nandPyList_SET_ITEM(a, b, c) = x\nnow fail with a compiler error. It prevents bugs likeif (PyList_SET_ITEM (a, b, c) < 0) ...\ntest. (Contributed by Zackery Spytz and Victor Stinner in bpo-30459.)The non-limited API files\nodictobject.h\n,parser_interface.h\n,picklebufobject.h\n,pyarena.h\n,pyctype.h\n,pydebug.h\n,pyfpe.h\n, andpytime.h\nhave been moved to theInclude/cpython\ndirectory. These files must not be included directly, as they are already included inPython.h\n; see Include Files. If they have been included directly, consider includingPython.h\ninstead. (Contributed by Nicholas Sim in bpo-35134.)Use the\nPy_TPFLAGS_IMMUTABLETYPE\ntype flag to create immutable type objects. Do not rely onPy_TPFLAGS_HEAPTYPE\nto decide if a type object is mutable or not; check ifPy_TPFLAGS_IMMUTABLETYPE\nis set instead. (Contributed by Victor Stinner and Erlend E. Aasland in bpo-43908.)The undocumented function\nPy_FrozenMain\nhas been removed from the limited API. The function is mainly useful for custom builds of Python. (Contributed by Petr Viktorin in bpo-26241.)\nDeprecated\u00b6\nThe\nPyUnicode_InternImmortal()\nfunction is now deprecated and will be removed in Python 3.12: usePyUnicode_InternInPlace()\ninstead. (Contributed by Victor Stinner in bpo-41692.)\nRemoved\u00b6\nRemoved\nPy_UNICODE_str*\nfunctions manipulatingPy_UNICODE*\nstrings. (Contributed by Inada Naoki in bpo-41123.)Py_UNICODE_strlen\n: usePyUnicode_GetLength()\norPyUnicode_GET_LENGTH\nPy_UNICODE_strcat\n: usePyUnicode_CopyCharacters()\norPyUnicode_FromFormat()\nPy_UNICODE_strcpy\n,Py_UNICODE_strncpy\n: usePyUnicode_CopyCharacters()\norPyUnicode_Substring()\nPy_UNICODE_strcmp\n: usePyUnicode_Compare()\nPy_UNICODE_strncmp\n: usePyUnicode_Tailmatch()\nPy_UNICODE_strchr\n,Py_UNICODE_strrchr\n: usePyUnicode_FindChar()\nRemoved\nPyUnicode_GetMax()\n. Please migrate to new (PEP 393) APIs. (Contributed by Inada Naoki in bpo-41103.)Removed\nPyLong_FromUnicode()\n. Please migrate toPyLong_FromUnicodeObject()\n. (Contributed by Inada Naoki in bpo-41103.)Removed\nPyUnicode_AsUnicodeCopy()\n. Please usePyUnicode_AsUCS4Copy()\norPyUnicode_AsWideCharString()\n(Contributed by Inada Naoki in bpo-41103.)Removed\n_Py_CheckRecursionLimit\nvariable: it has been replaced byceval.recursion_limit\nof thePyInterpreterState\nstructure. (Contributed by Victor Stinner in bpo-41834.)Removed undocumented macros\nPy_ALLOW_RECURSION\nandPy_END_ALLOW_RECURSION\nand therecursion_critical\nfield of thePyInterpreterState\nstructure. (Contributed by Serhiy Storchaka in bpo-41936.)Removed the undocumented\nPyOS_InitInterrupts()\nfunction. Initializing Python already implicitly installs signal handlers: seePyConfig.install_signal_handlers\n. (Contributed by Victor Stinner in bpo-41713.)Remove the\nPyAST_Validate()\nfunction. It is no longer possible to build a AST object (mod_ty\ntype) with the public C API. The function was already excluded from the limited C API (PEP 384). (Contributed by Victor Stinner in bpo-43244.)Remove the\nsymtable.h\nheader file and the undocumented functions:PyST_GetScope()\nPySymtable_Build()\nPySymtable_BuildObject()\nPySymtable_Free()\nPy_SymtableString()\nPy_SymtableStringObject()\nThe\nPy_SymtableString()\nfunction was part the stable ABI by mistake but it could not be used, because thesymtable.h\nheader file was excluded from the limited C API.Use Python\nsymtable\nmodule instead. (Contributed by Victor Stinner in bpo-43244.)Remove\nPyOS_ReadlineFunctionPointer()\nfrom the limited C API headers and frompython3.dll\n, the library that provides the stable ABI on Windows. Since the function takes aFILE*\nargument, its ABI stability cannot be guaranteed. (Contributed by Petr Viktorin in bpo-43868.)Remove\nast.h\n,asdl.h\n, andPython-ast.h\nheader files. These functions were undocumented and excluded from the limited C API. Most names defined by these header files were not prefixed byPy\nand so could create names conflicts. For example,Python-ast.h\ndefined aYield\nmacro which was conflict with theYield\nname used by the Windows<winbase.h>\nheader. Use the Pythonast\nmodule instead. (Contributed by Victor Stinner in bpo-43244.)Remove the compiler and parser functions using\nstruct _mod\ntype, because the public AST C API was removed:PyAST_Compile()\nPyAST_CompileEx()\nPyAST_CompileObject()\nPyFuture_FromAST()\nPyFuture_FromASTObject()\nPyParser_ASTFromFile()\nPyParser_ASTFromFileObject()\nPyParser_ASTFromFilename()\nPyParser_ASTFromString()\nPyParser_ASTFromStringObject()\nThese functions were undocumented and excluded from the limited C API. (Contributed by Victor Stinner in bpo-43244.)\nRemove the\npyarena.h\nheader file with functions:PyArena_New()\nPyArena_Free()\nPyArena_Malloc()\nPyArena_AddPyObject()\nThese functions were undocumented, excluded from the limited C API, and were only used internally by the compiler. (Contributed by Victor Stinner in bpo-43244.)\nThe\nPyThreadState.use_tracing\nmember has been removed to optimize Python. (Contributed by Mark Shannon in bpo-43760.)\nNotable security feature in 3.10.7\u00b6\nConverting between int\nand str\nin bases other than 2\n(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal)\nnow raises a ValueError\nif the number of digits in string form is\nabove a limit to avoid potential denial of service attacks due to the\nalgorithmic complexity. This is a mitigation for CVE 2020-10735.\nThis limit can be configured or disabled by environment variable, command\nline flag, or sys\nAPIs. See the integer string conversion\nlength limitation documentation. The default limit\nis 4300 digits in string form.\nNotable security feature in 3.10.8\u00b6\nThe deprecated mailcap\nmodule now refuses to inject unsafe text\n(filenames, MIME types, parameters) into shell commands. Instead of using such\ntext, it will warn and act as if a match was not found (or for test commands,\nas if the test failed).\n(Contributed by Petr Viktorin in gh-98966.)\nNotable changes in 3.10.12\u00b6\ntarfile\u00b6\nThe extraction methods in\ntarfile\n, andshutil.unpack_archive()\n, have a new a filter argument that allows limiting tar features than may be surprising or dangerous, such as creating files outside the destination directory. See Extraction filters for details. In Python 3.12, use without the filter argument will show aDeprecationWarning\n. In Python 3.14, the default will switch to'data'\n. (Contributed by Petr Viktorin in PEP 706.)"},
{"source": "https://docs.python.org/3/whatsnew/3.11.html", "title": "What\u2019s New In Python 3.11", "text": "What\u2019s New In Python 3.11\u00b6\n- Editor:\nPablo Galindo Salgado\nThis article explains the new features in Python 3.11, compared to 3.10. Python 3.11 was released on October 24, 2022. For full details, see the changelog.\nSummary \u2013 Release highlights\u00b6\nPython 3.11 is between 10-60% faster than Python 3.10. On average, we measured a 1.25x speedup on the standard benchmark suite. See Faster CPython for details.\nNew syntax features:\nNew built-in features:\nNew standard library modules:\nInterpreter improvements:\nNew\n-P\ncommand line option andPYTHONSAFEPATH\nenvironment variable to disable automatically prepending potentially unsafe paths tosys.path\nNew typing features:\nImportant deprecations, removals and restrictions:\nPEP 594: Many legacy standard library modules have been deprecated and will be removed in Python 3.13\nNew Features\u00b6\nPEP 657: Fine-grained error locations in tracebacks\u00b6\nWhen printing tracebacks, the interpreter will now point to the exact expression that caused the error, instead of just the line. For example:\nTraceback (most recent call last):\nFile \"distance.py\", line 11, in <module>\nprint(manhattan_distance(p1, p2))\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nFile \"distance.py\", line 6, in manhattan_distance\nreturn abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'x'\nPrevious versions of the interpreter would point to just the line, making it\nambiguous which object was None\n. These enhanced errors can also be helpful\nwhen dealing with deeply nested dict\nobjects and multiple function calls:\nTraceback (most recent call last):\nFile \"query.py\", line 37, in <module>\nmagic_arithmetic('foo')\nFile \"query.py\", line 18, in magic_arithmetic\nreturn add_counts(x) / 25\n^^^^^^^^^^^^^\nFile \"query.py\", line 24, in add_counts\nreturn 25 + query_user(user1) + query_user(user2)\n^^^^^^^^^^^^^^^^^\nFile \"query.py\", line 32, in query_user\nreturn 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n~~~~~~~~~~~~~~~~~~^^^^^\nTypeError: 'NoneType' object is not subscriptable\nAs well as complex arithmetic expressions:\nTraceback (most recent call last):\nFile \"calculation.py\", line 54, in <module>\nresult = (x / y / z) * (a / b / c)\n~~~~~~^~~\nZeroDivisionError: division by zero\nAdditionally, the information used by the enhanced traceback feature is made available via a general API, that can be used to correlate bytecode instructions with source code location. This information can be retrieved using:\nThe\ncodeobject.co_positions()\nmethod in Python.The\nPyCode_Addr2Location()\nfunction in the C API.\nSee PEP 657 for more details. (Contributed by Pablo Galindo, Batuhan Taskaya and Ammar Askar in bpo-43950.)\nNote\nThis feature requires storing column positions in Code Objects,\nwhich may result in a small increase in interpreter memory usage\nand disk usage for compiled Python files.\nTo avoid storing the extra information\nand deactivate printing the extra traceback information,\nuse the -X no_debug_ranges\ncommand line option\nor the PYTHONNODEBUGRANGES\nenvironment variable.\nPEP 654: Exception Groups and except*\n\u00b6\nPEP 654 introduces language features that enable a program\nto raise and handle multiple unrelated exceptions simultaneously.\nThe builtin types ExceptionGroup\nand BaseExceptionGroup\nmake it possible to group exceptions and raise them together,\nand the new except*\nsyntax generalizes\nexcept\nto match subgroups of exception groups.\nSee PEP 654 for more details.\n(Contributed by Irit Katriel in bpo-45292. PEP written by Irit Katriel, Yury Selivanov and Guido van Rossum.)\nPEP 678: Exceptions can be enriched with notes\u00b6\nThe add_note()\nmethod is added to BaseException\n.\nIt can be used to enrich exceptions with context information\nthat is not available at the time when the exception is raised.\nThe added notes appear in the default traceback.\nSee PEP 678 for more details.\n(Contributed by Irit Katriel in bpo-45607. PEP written by Zac Hatfield-Dodds.)\nWindows py.exe\nlauncher improvements\u00b6\nThe copy of the Python Launcher for Windows included with Python 3.11 has been significantly\nupdated. It now supports company/tag syntax as defined in PEP 514 using the\n-V:<company>/<tag>\nargument instead of the limited -<major>.<minor>\n.\nThis allows launching distributions other than PythonCore\n,\nthe one hosted on python.org.\nWhen using -V:\nselectors, either company or tag can be omitted, but all\ninstalls will be searched. For example, -V:OtherPython/\nwill select the\n\u201cbest\u201d tag registered for OtherPython\n, while -V:3.11\nor -V:/3.11\nwill select the \u201cbest\u201d distribution with tag 3.11\n.\nWhen using the legacy -<major>\n, -<major>.<minor>\n,\n-<major>-<bitness>\nor -<major>.<minor>-<bitness>\narguments,\nall existing behaviour should be preserved from past versions,\nand only releases from PythonCore\nwill be selected.\nHowever, the -64\nsuffix now implies \u201cnot 32-bit\u201d (not necessarily x86-64),\nas there are multiple supported 64-bit platforms.\n32-bit runtimes are detected by checking the runtime\u2019s tag for a -32\nsuffix.\nAll releases of Python since 3.5 have included this in their 32-bit builds.\nOther Language Changes\u00b6\nStarred unpacking expressions can now be used in\nfor\nstatements. (See bpo-46725 for more details.)Asynchronous comprehensions are now allowed inside comprehensions in asynchronous functions. Outer comprehensions implicitly become asynchronous in this case. (Contributed by Serhiy Storchaka in bpo-33346.)\nA\nTypeError\nis now raised instead of anAttributeError\ninwith\nstatements andcontextlib.ExitStack.enter_context()\nfor objects that do not support the context manager protocol, and inasync with\nstatements andcontextlib.AsyncExitStack.enter_async_context()\nfor objects not supporting the asynchronous context manager protocol. (Contributed by Serhiy Storchaka in bpo-12022 and bpo-44471.)Added\nobject.__getstate__()\n, which provides the default implementation of the__getstate__()\nmethod.copy\ning andpickle\ning instances of subclasses of builtin typesbytearray\n,set\n,frozenset\n,collections.OrderedDict\n,collections.deque\n,weakref.WeakSet\n, anddatetime.tzinfo\nnow copies and pickles instance attributes implemented as slots. This change has an unintended side effect: It trips up a small minority of existing Python projects not expectingobject.__getstate__()\nto exist. See the later comments on gh-70766 for discussions of what workarounds such code may need. (Contributed by Serhiy Storchaka in bpo-26579.)\nAdded a\n-P\ncommand line option and aPYTHONSAFEPATH\nenvironment variable, which disable the automatic prepending tosys.path\nof the script\u2019s directory when running a script, or the current directory when using-c\nand-m\n. This ensures only stdlib and installed modules are picked up byimport\n, and avoids unintentionally or maliciously shadowing modules with those in a local (and typically user-writable) directory. (Contributed by Victor Stinner in gh-57684.)A\n\"z\"\noption was added to the Format Specification Mini-Language that coerces negative to positive zero after rounding to the format precision. See PEP 682 for more details. (Contributed by John Belmonte in gh-90153.)Bytes are no longer accepted on\nsys.path\n. Support broke sometime between Python 3.2 and 3.6, with no one noticing until after Python 3.10.0 was released. In addition, bringing back support would be problematic due to interactions between-b\nandsys.path_importer_cache\nwhen there is a mixture ofstr\nandbytes\nkeys. (Contributed by Thomas Grainger in gh-91181.)\nOther CPython Implementation Changes\u00b6\nThe special methods\n__complex__()\nforcomplex\nand__bytes__()\nforbytes\nare implemented to support thetyping.SupportsComplex\nandtyping.SupportsBytes\nprotocols. (Contributed by Mark Dickinson and Donghee Na in bpo-24234.)siphash13\nis added as a new internal hashing algorithm. It has similar security properties assiphash24\n, but it is slightly faster for long inputs.str\n,bytes\n, and some other types now use it as the default algorithm forhash()\n. PEP 552 hash-based .pyc files now usesiphash13\ntoo. (Contributed by Inada Naoki in bpo-29410.)When an active exception is re-raised by a\nraise\nstatement with no parameters, the traceback attached to this exception is now alwayssys.exc_info()[1].__traceback__\n. This means that changes made to the traceback in the currentexcept\nclause are reflected in the re-raised exception. (Contributed by Irit Katriel in bpo-45711.)The interpreter state\u2019s representation of handled exceptions (aka\nexc_info\nor_PyErr_StackItem\n) now only has theexc_value\nfield;exc_type\nandexc_traceback\nhave been removed, as they can be derived fromexc_value\n. (Contributed by Irit Katriel in bpo-45711.)A new command line option,\nAppendPath\n, has been added for the Windows installer. It behaves similarly toPrependPath\n, but appends the install and scripts directories instead of prepending them. (Contributed by Bastian Neuburger in bpo-44934.)The\nPyConfig.module_search_paths_set\nfield must now be set to1\nfor initialization to usePyConfig.module_search_paths\nto initializesys.path\n. Otherwise, initialization will recalculate the path and replace any values added tomodule_search_paths\n.The output of the\n--help\noption now fits in 50 lines/80 columns. Information about Python environment variables and-X\noptions is now available using the respective--help-env\nand--help-xoptions\nflags, and with the new--help-all\n. (Contributed by \u00c9ric Araujo in bpo-46142.)Converting between\nint\nandstr\nin bases other than 2 (binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) now raises aValueError\nif the number of digits in string form is above a limit to avoid potential denial of service attacks due to the algorithmic complexity. This is a mitigation for CVE 2020-10735. This limit can be configured or disabled by environment variable, command line flag, orsys\nAPIs. See the integer string conversion length limitation documentation. The default limit is 4300 digits in string form.\nNew Modules\u00b6\nImproved Modules\u00b6\nasyncio\u00b6\nAdded the\nTaskGroup\nclass, an asynchronous context manager holding a group of tasks that will wait for all of them upon exit. For new code this is recommended over usingcreate_task()\nandgather()\ndirectly. (Contributed by Yury Selivanov and others in gh-90908.)Added\ntimeout()\n, an asynchronous context manager for setting a timeout on asynchronous operations. For new code this is recommended over usingwait_for()\ndirectly. (Contributed by Andrew Svetlov in gh-90927.)Added the\nRunner\nclass, which exposes the machinery used byrun()\n. (Contributed by Andrew Svetlov in gh-91218.)Added the\nBarrier\nclass to the synchronization primitives in the asyncio library, and the relatedBrokenBarrierError\nexception. (Contributed by Yves Duprat and Andrew Svetlov in gh-87518.)Added keyword argument all_errors to\nasyncio.loop.create_connection()\nso that multiple connection errors can be raised as anExceptionGroup\n.Added the\nasyncio.StreamWriter.start_tls()\nmethod for upgrading existing stream-based connections to TLS. (Contributed by Ian Good in bpo-34975.)Added raw datagram socket functions to the event loop:\nsock_sendto()\n,sock_recvfrom()\nandsock_recvfrom_into()\n. These have implementations inSelectorEventLoop\nandProactorEventLoop\n. (Contributed by Alex Gr\u00f6nholm in bpo-46805.)Added\ncancelling()\nanduncancel()\nmethods toTask\n. These are primarily intended for internal use, notably byTaskGroup\n.\ncontextlib\u00b6\ndataclasses\u00b6\ndatetime\u00b6\nAdd\ndatetime.UTC\n, a convenience alias fordatetime.timezone.utc\n. (Contributed by Kabir Kwatra in gh-91973.)datetime.date.fromisoformat()\n,datetime.time.fromisoformat()\nanddatetime.datetime.fromisoformat()\ncan now be used to parse most ISO 8601 formats (barring only those that support fractional hours and minutes). (Contributed by Paul Ganssle in gh-80010.)\nenum\u00b6\nRenamed\nEnumMeta\ntoEnumType\n(EnumMeta\nkept as an alias).Added\nStrEnum\n, with members that can be used as (and must be) strings.Added\nReprEnum\n, which only modifies the__repr__()\nof members while returning their literal values (rather than names) for__str__()\nand__format__()\n(used bystr()\n,format()\nand f-strings).Changed\nEnum.__format__()\n(the default forformat()\n,str.format()\nand f-strings) to always produce the same result asEnum.__str__()\n: for enums inheriting fromReprEnum\nit will be the member\u2019s value; for all other enums it will be the enum and member name (e.g.Color.RED\n).Added a new boundary class parameter to\nFlag\nenums and theFlagBoundary\nenum with its options, to control how to handle out-of-range flag values.Added the\nverify()\nenum decorator and theEnumCheck\nenum with its options, to check enum classes against several specific constraints.Added the\nmember()\nandnonmember()\ndecorators, to ensure the decorated object is/is not converted to an enum member.Added the\nproperty()\ndecorator, which works likeproperty()\nexcept for enums. Use this instead oftypes.DynamicClassAttribute()\n.Added the\nglobal_enum()\nenum decorator, which adjusts__repr__()\nand__str__()\nto show values as members of their module rather than the enum class. For example,'re.ASCII'\nfor theASCII\nmember ofre.RegexFlag\nrather than'RegexFlag.ASCII'\n.Enhanced\nFlag\nto supportlen()\n, iteration andin\n/not in\non its members. For example, the following now works:len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)\nChanged\nEnum\nandFlag\nso that members are now defined before__init_subclass__()\nis called;dir()\nnow includes methods, etc., from mixed-in data types.Changed\nFlag\nto only consider primary values (power of two) canonical while composite values (3\n,6\n,10\n, etc.) are considered aliases; inverted flags are coerced to their positive equivalent.\nfcntl\u00b6\nOn FreeBSD, the\nF_DUP2FD\nandF_DUP2FD_CLOEXEC\nflags respectively are supported, the former equals todup2\nusage while the latter set theFD_CLOEXEC\nflag in addition.\nfractions\u00b6\nfunctools\u00b6\nfunctools.singledispatch()\nnow supportstypes.UnionType\nandtyping.Union\nas annotations to the dispatch argument.:>>> from functools import singledispatch >>> @singledispatch ... def fun(arg, verbose=False): ... if verbose: ... print(\"Let me just say,\", end=\" \") ... print(arg) ... >>> @fun.register ... def _(arg: int | float, verbose=False): ... if verbose: ... print(\"Strength in numbers, eh?\", end=\" \") ... print(arg) ... >>> from typing import Union >>> @fun.register ... def _(arg: Union[list, set], verbose=False): ... if verbose: ... print(\"Enumerate this:\") ... for i, elem in enumerate(arg): ... print(i, elem) ...\n(Contributed by Yurii Karabas in bpo-46014.)\ngzip\u00b6\nThe\ngzip.compress()\nfunction is now faster when used with the mtime=0 argument as it delegates the compression entirely to a singlezlib.compress()\noperation. There is one side effect of this change: The gzip file header contains an \u201cOS\u201d byte in its header. That was traditionally always set to a value of 255 representing \u201cunknown\u201d by thegzip\nmodule. Now, when usingcompress()\nwith mtime=0, it may be set to a different value by the underlying zlib C library Python was linked against. (See gh-112346 for details on the side effect.)\nhashlib\u00b6\nhashlib.blake2b()\nandhashlib.blake2s()\nnow prefer libb2 over Python\u2019s vendored copy. (Contributed by Christian Heimes in bpo-47095.)The internal\n_sha3\nmodule with SHA3 and SHAKE algorithms now uses tiny_sha3 instead of the Keccak Code Package to reduce code and binary size. Thehashlib\nmodule prefers optimized SHA3 and SHAKE implementations from OpenSSL. The change affects only installations without OpenSSL support. (Contributed by Christian Heimes in bpo-47098.)Add\nhashlib.file_digest()\n, a helper function for efficient hashing of files or file-like objects. (Contributed by Christian Heimes in gh-89313.)\nIDLE and idlelib\u00b6\ninspect\u00b6\nAdd\ngetmembers_static()\nto return all members without triggering dynamic lookup via the descriptor protocol. (Contributed by Weipeng Hong in bpo-30533.)Add\nismethodwrapper()\nfor checking if the type of an object is aMethodWrapperType\n. (Contributed by Hakan \u00c7elik in bpo-29418.)Change the frame-related functions in the\ninspect\nmodule to return newFrameInfo\nandTraceback\nclass instances (backwards compatible with the previous named tuple-like interfaces) that includes the extended PEP 657 position information (end line number, column and end column). The affected functions are:(Contributed by Pablo Galindo in gh-88116.)\nlocale\u00b6\nAdd\nlocale.getencoding()\nto get the current locale encoding. It is similar tolocale.getpreferredencoding(False)\nbut ignores the Python UTF-8 Mode.\nlogging\u00b6\nAdded\ngetLevelNamesMapping()\nto return a mapping from logging level names (e.g.'CRITICAL'\n) to the values of their corresponding Logging Levels (e.g.50\n, by default). (Contributed by Andrei Kulakovin in gh-88024.)Added a\ncreateSocket()\nmethod toSysLogHandler\n, to matchSocketHandler.createSocket()\n. It is called automatically during handler initialization and when emitting an event, if there is no active socket. (Contributed by Kirill Pinchuk in gh-88457.)\nmath\u00b6\nAdd\nmath.exp2()\n: return 2 raised to the power of x. (Contributed by Gideon Mitchell in bpo-45917.)Add\nmath.cbrt()\n: return the cube root of x. (Contributed by Ajith Ramachandran in bpo-44357.)The behaviour of two\nmath.pow()\ncorner cases was changed, for consistency with the IEEE 754 specification. The operationsmath.pow(0.0, -math.inf)\nandmath.pow(-0.0, -math.inf)\nnow returninf\n. Previously they raisedValueError\n. (Contributed by Mark Dickinson in bpo-44339.)The\nmath.nan\nvalue is now always available. (Contributed by Victor Stinner in bpo-46917.)\noperator\u00b6\nA new function\noperator.call\nhas been added, such thatoperator.call(obj, *args, **kwargs) == obj(*args, **kwargs)\n. (Contributed by Antony Lee in bpo-44019.)\nos\u00b6\nOn Windows,\nos.urandom()\nnow usesBCryptGenRandom()\n, instead ofCryptGenRandom()\nwhich is deprecated. (Contributed by Donghee Na in bpo-44611.)\npathlib\u00b6\nre\u00b6\nAtomic grouping (\n(?>...)\n) and possessive quantifiers (*+\n,++\n,?+\n,{m,n}+\n) are now supported in regular expressions. (Contributed by Jeffrey C. Jacobs and Serhiy Storchaka in bpo-433030.)\nshutil\u00b6\nAdd optional parameter dir_fd in\nshutil.rmtree()\n. (Contributed by Serhiy Storchaka in bpo-46245.)\nsocket\u00b6\nAdd CAN Socket support for NetBSD. (Contributed by Thomas Klausner in bpo-30512.)\ncreate_connection()\nhas an option to raise, in case of failure to connect, anExceptionGroup\ncontaining all errors instead of only raising the last error. (Contributed by Irit Katriel in bpo-29980.)\nsqlite3\u00b6\nYou can now disable the authorizer by passing\nNone\ntoset_authorizer()\n. (Contributed by Erlend E. Aasland in bpo-44491.)Collation name\ncreate_collation()\ncan now contain any Unicode character. Collation names with invalid characters now raiseUnicodeEncodeError\ninstead ofsqlite3.ProgrammingError\n. (Contributed by Erlend E. Aasland in bpo-44688.)sqlite3\nexceptions now include the SQLite extended error code assqlite_errorcode\nand the SQLite error name assqlite_errorname\n. (Contributed by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland in bpo-16379 and bpo-24139.)Add\nsetlimit()\nandgetlimit()\ntosqlite3.Connection\nfor setting and getting SQLite limits by connection basis. (Contributed by Erlend E. Aasland in bpo-45243.)sqlite3\nnow setssqlite3.threadsafety\nbased on the default threading mode the underlying SQLite library has been compiled with. (Contributed by Erlend E. Aasland in bpo-45613.)sqlite3\nC callbacks now use unraisable exceptions if callback tracebacks are enabled. Users can now register anunraisable hook handler\nto improve their debug experience. (Contributed by Erlend E. Aasland in bpo-45828.)Fetch across rollback no longer raises\nInterfaceError\n. Instead we leave it to the SQLite library to handle these cases. (Contributed by Erlend E. Aasland in bpo-44092.)Add\nserialize()\nanddeserialize()\ntosqlite3.Connection\nfor serializing and deserializing databases. (Contributed by Erlend E. Aasland in bpo-41930.)Add\ncreate_window_function()\ntosqlite3.Connection\nfor creating aggregate window functions. (Contributed by Erlend E. Aasland in bpo-34916.)Add\nblobopen()\ntosqlite3.Connection\n.sqlite3.Blob\nallows incremental I/O operations on blobs. (Contributed by Aviv Palivoda and Erlend E. Aasland in bpo-24905.)\nstring\u00b6\nAdd\nget_identifiers()\nandis_valid()\ntostring.Template\n, which respectively return all valid placeholders, and whether any invalid placeholders are present. (Contributed by Ben Kehoe in gh-90465.)\nsys\u00b6\nsys.exc_info()\nnow derives thetype\nandtraceback\nfields from thevalue\n(the exception instance), so when an exception is modified while it is being handled, the changes are reflected in the results of subsequent calls toexc_info()\n. (Contributed by Irit Katriel in bpo-45711.)Add\nsys.exception()\nwhich returns the active exception instance (equivalent tosys.exc_info()[1]\n). (Contributed by Irit Katriel in bpo-46328.)Add the\nsys.flags.safe_path\nflag. (Contributed by Victor Stinner in gh-57684.)\nsysconfig\u00b6\nThree new installation schemes (posix_venv, nt_venv and venv) were added and are used when Python creates new virtual environments or when it is running from a virtual environment. The first two schemes (posix_venv and nt_venv) are OS-specific for non-Windows and Windows, the venv is essentially an alias to one of them according to the OS Python runs on. This is useful for downstream distributors who modify\nsysconfig.get_preferred_scheme()\n. Third party code that creates new virtual environments should use the new venv installation scheme to determine the paths, as doesvenv\n. (Contributed by Miro Hron\u010dok in bpo-45413.)\ntempfile\u00b6\nSpooledTemporaryFile\nobjects now fully implement the methods ofio.BufferedIOBase\norio.TextIOBase\n(depending on file mode). This lets them work correctly with APIs that expect file-like objects, such as compression modules. (Contributed by Carey Metcalfe in gh-70363.)\nthreading\u00b6\nOn Unix, if the\nsem_clockwait()\nfunction is available in the C library (glibc 2.30 and newer), thethreading.Lock.acquire()\nmethod now uses the monotonic clock (time.CLOCK_MONOTONIC\n) for the timeout, rather than using the system clock (time.CLOCK_REALTIME\n), to not be affected by system clock changes. (Contributed by Victor Stinner in bpo-41710.)\ntime\u00b6\nOn Unix,\ntime.sleep()\nnow uses theclock_nanosleep()\nornanosleep()\nfunction, if available, which has a resolution of 1 nanosecond (10-9 seconds), rather than usingselect()\nwhich has a resolution of 1 microsecond (10-6 seconds). (Contributed by Benjamin Sz\u0151ke and Victor Stinner in bpo-21302.)On Windows 8.1 and newer,\ntime.sleep()\nnow uses a waitable timer based on high-resolution timers which has a resolution of 100 nanoseconds (10-7 seconds). Previously, it had a resolution of 1 millisecond (10-3 seconds). (Contributed by Benjamin Sz\u0151ke, Donghee Na, Eryk Sun and Victor Stinner in bpo-21302 and bpo-45429.)\ntkinter\u00b6\nAdded method\ninfo_patchlevel()\nwhich returns the exact version of the Tcl library as a named tuple similar tosys.version_info\n. (Contributed by Serhiy Storchaka in gh-91827.)\ntraceback\u00b6\nAdd\ntraceback.StackSummary.format_frame_summary()\nto allow users to override which frames appear in the traceback, and how they are formatted. (Contributed by Ammar Askar in bpo-44569.)Add\ntraceback.TracebackException.print()\n, which prints the formattedTracebackException\ninstance to a file. (Contributed by Irit Katriel in bpo-33809.)\ntyping\u00b6\nFor major changes, see New Features Related to Type Hints.\nAdd\ntyping.assert_never()\nandtyping.Never\n.typing.assert_never()\nis useful for asking a type checker to confirm that a line of code is not reachable. At runtime, it raises anAssertionError\n. (Contributed by Jelle Zijlstra in gh-90633.)Add\ntyping.reveal_type()\n. This is useful for asking a type checker what type it has inferred for a given expression. At runtime it prints the type of the received value. (Contributed by Jelle Zijlstra in gh-90572.)Add\ntyping.assert_type()\n. This is useful for asking a type checker to confirm that the type it has inferred for a given expression matches the given type. At runtime it simply returns the received value. (Contributed by Jelle Zijlstra in gh-90638.)typing.TypedDict\ntypes can now be generic. (Contributed by Samodya Abeysiriwardane in gh-89026.)NamedTuple\ntypes can now be generic. (Contributed by Serhiy Storchaka in bpo-43923.)Allow subclassing of\ntyping.Any\n. This is useful for avoiding type checker errors related to highly dynamic class, such as mocks. (Contributed by Shantanu Jain in gh-91154.)The\ntyping.final()\ndecorator now sets the__final__\nattributed on the decorated object. (Contributed by Jelle Zijlstra in gh-90500.)The\ntyping.get_overloads()\nfunction can be used for introspecting the overloads of a function.typing.clear_overloads()\ncan be used to clear all registered overloads of a function. (Contributed by Jelle Zijlstra in gh-89263.)The\n__init__()\nmethod ofProtocol\nsubclasses is now preserved. (Contributed by Adrian Garcia Badarasco in gh-88970.)The representation of empty tuple types (\nTuple[()]\n) is simplified. This affects introspection, e.g.get_args(Tuple[()])\nnow evaluates to()\ninstead of((),)\n. (Contributed by Serhiy Storchaka in gh-91137.)Loosen runtime requirements for type annotations by removing the callable check in the private\ntyping._type_check\nfunction. (Contributed by Gregory Beauregard in gh-90802.)typing.get_type_hints()\nnow supports evaluating strings as forward references in PEP 585 generic aliases. (Contributed by Niklas Rosenstein in gh-85542.)typing.get_type_hints()\nno longer addsOptional\nto parameters withNone\nas a default. (Contributed by Nikita Sobolev in gh-90353.)typing.get_type_hints()\nnow supports evaluating bare stringifiedClassVar\nannotations. (Contributed by Gregory Beauregard in gh-90711.)typing.no_type_check()\nno longer modifies external classes and functions. It also now correctly marks classmethods as not to be type checked. (Contributed by Nikita Sobolev in gh-90729.)\nunicodedata\u00b6\nThe Unicode database has been updated to version 14.0.0. (Contributed by Benjamin Peterson in bpo-45190).\nunittest\u00b6\nAdded methods\nenterContext()\nandenterClassContext()\nof classTestCase\n, methodenterAsyncContext()\nof classIsolatedAsyncioTestCase\nand functionunittest.enterModuleContext()\n. (Contributed by Serhiy Storchaka in bpo-45046.)\nvenv\u00b6\nWhen new Python virtual environments are created, the venv sysconfig installation scheme is used to determine the paths inside the environment. When Python runs in a virtual environment, the same installation scheme is the default. That means that downstream distributors can change the default sysconfig install scheme without changing behavior of virtual environments. Third party code that also creates new virtual environments should do the same. (Contributed by Miro Hron\u010dok in bpo-45413.)\nwarnings\u00b6\nwarnings.catch_warnings()\nnow accepts arguments forwarnings.simplefilter()\n, providing a more concise way to locally ignore warnings or convert them to errors. (Contributed by Zac Hatfield-Dodds in bpo-47074.)\nzipfile\u00b6\nAdded support for specifying member name encoding for reading metadata in a\nZipFile\n\u2019s directory and file headers. (Contributed by Stephen J. Turnbull and Serhiy Storchaka in bpo-28080.)Added\nZipFile.mkdir()\nfor creating new directories inside ZIP archives. (Contributed by Sam Ezeh in gh-49083.)Added\nstem\n,suffix\nandsuffixes\ntozipfile.Path\n. (Contributed by Miguel Brito in gh-88261.)\nOptimizations\u00b6\nThis section covers specific optimizations independent of the Faster CPython project, which is covered in its own section.\nThe compiler now optimizes simple printf-style % formatting on string literals containing only the format codes\n%s\n,%r\nand%a\nand makes it as fast as a corresponding f-string expression. (Contributed by Serhiy Storchaka in bpo-28307.)Integer division (\n//\n) is better tuned for optimization by compilers. It is now around 20% faster on x86-64 when dividing anint\nby a value smaller than2**30\n. (Contributed by Gregory P. Smith and Tim Peters in gh-90564.)sum()\nis now nearly 30% faster for integers smaller than2**30\n. (Contributed by Stefan Behnel in gh-68264.)Resizing lists is streamlined for the common case, speeding up\nlist.append()\nby \u224815% and simple list comprehensions by up to 20-30% (Contributed by Dennis Sweeney in gh-91165.)Dictionaries don\u2019t store hash values when all keys are Unicode objects, decreasing\ndict\nsize. For example,sys.getsizeof(dict.fromkeys(\"abcdefg\"))\nis reduced from 352 bytes to 272 bytes (23% smaller) on 64-bit platforms. (Contributed by Inada Naoki in bpo-46845.)Using\nasyncio.DatagramProtocol\nis now orders of magnitude faster when transferring large files over UDP, with speeds over 100 times higher for a \u224860 MiB file. (Contributed by msoxzw in gh-91487.)math\nfunctionscomb()\nandperm()\nare now \u224810 times faster for large arguments (with a larger speedup for larger k). (Contributed by Serhiy Storchaka in bpo-37295.)The\nstatistics\nfunctionsmean()\n,variance()\nandstdev()\nnow consume iterators in one pass rather than converting them to alist\nfirst. This is twice as fast and can save substantial memory. (Contributed by Raymond Hettinger in gh-90415.)unicodedata.normalize()\nnow normalizes pure-ASCII strings in constant time. (Contributed by Donghee Na in bpo-44987.)\nFaster CPython\u00b6\nCPython 3.11 is an average of 25% faster than CPython 3.10 as measured with the pyperformance benchmark suite, when compiled with GCC on Ubuntu Linux. Depending on your workload, the overall speedup could be 10-60%.\nThis project focuses on two major areas in Python: Faster Startup and Faster Runtime. Optimizations not covered by this project are listed separately under Optimizations.\nFaster Startup\u00b6\nFrozen imports / Static code objects\u00b6\nPython caches bytecode in the __pycache__ directory to speed up module loading.\nPreviously in 3.10, Python module execution looked like this:\nRead __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate\nIn Python 3.11, the core modules essential for Python startup are \u201cfrozen\u201d. This means that their Code Objects (and bytecode) are statically allocated by the interpreter. This reduces the steps in module execution process to:\nStatically allocated code object -> Evaluate\nInterpreter startup is now 10-15% faster in Python 3.11. This has a big impact for short-running programs using Python.\n(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in many issues.)\nFaster Runtime\u00b6\nCheaper, lazy Python frames\u00b6\nPython frames, holding execution information, are created whenever Python calls a Python function. The following are new frame optimizations:\nStreamlined the frame creation process.\nAvoided memory allocation by generously re-using frame space on the C stack.\nStreamlined the internal frame struct to contain only essential information. Frames previously held extra debugging and memory management information.\nOld-style frame objects\nare now created only when requested by debuggers\nor by Python introspection functions such as sys._getframe()\nand\ninspect.currentframe()\n. For most user code, no frame objects are\ncreated at all. As a result, nearly all Python functions calls have sped\nup significantly. We measured a 3-7% speedup in pyperformance.\n(Contributed by Mark Shannon in bpo-44590.)\nInlined Python function calls\u00b6\nDuring a Python function call, Python will call an evaluating C function to interpret that function\u2019s code. This effectively limits pure Python recursion to what\u2019s safe for the C stack.\nIn 3.11, when CPython detects Python code calling another Python function, it sets up a new frame, and \u201cjumps\u201d to the new code inside the new frame. This avoids calling the C interpreting function altogether.\nMost Python function calls now consume no C stack space, speeding them up.\nIn simple recursive functions like fibonacci or\nfactorial, we observed a 1.7x speedup. This also means recursive functions\ncan recurse significantly deeper\n(if the user increases the recursion limit with sys.setrecursionlimit()\n).\nWe measured a 1-3% improvement in pyperformance.\n(Contributed by Pablo Galindo and Mark Shannon in bpo-45256.)\nPEP 659: Specializing Adaptive Interpreter\u00b6\nPEP 659 is one of the key parts of the Faster CPython project. The general idea is that while Python is a dynamic language, most code has regions where objects and types rarely change. This concept is known as type stability.\nAt runtime, Python will try to look for common patterns and type stability in the executing code. Python will then replace the current operation with a more specialized one. This specialized operation uses fast paths available only to those use cases/types, which generally outperform their generic counterparts. This also brings in another concept called inline caching, where Python caches the results of expensive operations directly in the bytecode.\nThe specializer will also combine certain common instruction pairs into one superinstruction, reducing the overhead during execution.\nPython will only specialize when it sees code that is \u201chot\u201d (executed multiple times). This prevents Python from wasting time on run-once code. Python can also de-specialize when code is too dynamic or when the use changes. Specialization is attempted periodically, and specialization attempts are not too expensive, allowing specialization to adapt to new circumstances.\n(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler. See PEP 659 for more information. Implementation by Mark Shannon and Brandt Bucher, with additional help from Irit Katriel and Dennis Sweeney.)\nOperation |\nForm |\nSpecialization |\nOperation speedup (up to) |\nContributor(s) |\n|---|---|---|---|---|\nBinary operations |\n|\nBinary add, multiply and subtract for common types\nsuch as |\n10% |\nMark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney |\nSubscript |\n|\nSubscripting container types such as Subscripting custom |\n10-25% |\nIrit Katriel, Mark Shannon |\nStore subscript |\n|\nSimilar to subscripting specialization above. |\n10-25% |\nDennis Sweeney |\nCalls |\n|\nCalls to common builtin (C) functions and types such\nas |\n20% |\nMark Shannon, Ken Jin |\nLoad global variable |\n|\nThe object\u2019s index in the globals/builtins namespace is cached. Loading globals and builtins require zero namespace lookups. |\nMark Shannon |\n|\nLoad attribute |\n|\nSimilar to loading global variables. The attribute\u2019s index inside the class/object\u2019s namespace is cached. In most cases, attribute loading will require zero namespace lookups. |\nMark Shannon |\n|\nLoad methods for call |\n|\nThe actual address of the method is cached. Method loading now has no namespace lookups \u2013 even for classes with long inheritance chains. |\n10-20% |\nKen Jin, Mark Shannon |\nStore attribute |\n|\nSimilar to load attribute optimization. |\n2% in pyperformance |\nMark Shannon |\nUnpack Sequence |\n|\nSpecialized for common containers such as\n|\n8% |\nBrandt Bucher |\nMisc\u00b6\nObjects now require less memory due to lazily created object namespaces. Their namespace dictionaries now also share keys more freely. (Contributed Mark Shannon in bpo-45340 and bpo-40116.)\n\u201cZero-cost\u201d exceptions are implemented, eliminating the cost of\ntry\nstatements when no exception is raised. (Contributed by Mark Shannon in bpo-40222.)A more concise representation of exceptions in the interpreter reduced the time required for catching an exception by about 10%. (Contributed by Irit Katriel in bpo-45711.)\nre\n\u2019s regular expression matching engine has been partially refactored, and now uses computed gotos (or \u201cthreaded code\u201d) on supported platforms. As a result, Python 3.11 executes the pyperformance regular expression benchmarks up to 10% faster than Python 3.10. (Contributed by Brandt Bucher in gh-91404.)\nFAQ\u00b6\nHow should I write my code to utilize these speedups?\u00b6\nWrite Pythonic code that follows common best practices; you don\u2019t have to change your code. The Faster CPython project optimizes for common code patterns we observe.\nWill CPython 3.11 use more memory?\u00b6\nMaybe not; we don\u2019t expect memory use to exceed 20% higher than 3.10. This is offset by memory optimizations for frame objects and object dictionaries as mentioned above.\nI don\u2019t see any speedups in my workload. Why?\u00b6\nCertain code won\u2019t have noticeable benefits. If your code spends most of its time on I/O operations, or already does most of its computation in a C extension library like NumPy, there won\u2019t be significant speedups. This project currently benefits pure-Python workloads the most.\nFurthermore, the pyperformance figures are a geometric mean. Even within the pyperformance benchmarks, certain benchmarks have slowed down slightly, while others have sped up by nearly 2x!\nIs there a JIT compiler?\u00b6\nNo. We\u2019re still exploring other optimizations.\nAbout\u00b6\nFaster CPython explores optimizations for CPython. The main team is funded by Microsoft to work on this full-time. Pablo Galindo Salgado is also funded by Bloomberg LP to work on the project part-time. Finally, many contributors are volunteers from the community.\nCPython bytecode changes\u00b6\nThe bytecode now contains inline cache entries,\nwhich take the form of the newly-added CACHE\ninstructions.\nMany opcodes expect to be followed by an exact number of caches,\nand instruct the interpreter to skip over them at runtime.\nPopulated caches can look like arbitrary instructions,\nso great care should be taken when reading or modifying\nraw, adaptive bytecode containing quickened data.\nNew opcodes\u00b6\nASYNC_GEN_WRAP\n,RETURN_GENERATOR\nandSEND\n, used in generators and co-routines.COPY_FREE_VARS\n, which avoids needing special caller-side code for closures.JUMP_BACKWARD_NO_INTERRUPT\n, for use in certain loops where handling interrupts is undesirable.MAKE_CELL\n, to create Cell Objects.CHECK_EG_MATCH\nandPREP_RERAISE_STAR\n, to handle the new exception groups and except* added in PEP 654.PUSH_EXC_INFO\n, for use in exception handlers.RESUME\n, a no-op, for internal tracing, debugging and optimization checks.\nReplaced opcodes\u00b6\nReplaced Opcode(s) |\nNew Opcode(s) |\nNotes |\n|---|---|---|\nBINARY_* INPLACE_* |\nReplaced all numeric binary/in-place opcodes with a single opcode |\n|\nCALL_FUNCTION CALL_FUNCTION_KW CALL_METHOD |\nDecouples argument shifting for methods from handling of keyword arguments; allows better specialization of calls |\n|\nDUP_TOP DUP_TOP_TWO ROT_TWO ROT_THREE ROT_FOUR ROT_N |\nStack manipulation instructions |\n|\nJUMP_IF_NOT_EXC_MATCH |\nNow performs check but doesn\u2019t jump |\n|\nJUMP_ABSOLUTE POP_JUMP_IF_FALSE POP_JUMP_IF_TRUE |\nSee [3];\n|\n|\nSETUP_WITH SETUP_ASYNC_WITH |\n|\nAll jump opcodes are now relative, including the\nexisting JUMP_IF_TRUE_OR_POP\nand JUMP_IF_FALSE_OR_POP\n.\nThe argument is now an offset from the current instruction\nrather than an absolute location.\nChanged/removed opcodes\u00b6\nChanged\nMATCH_CLASS\nandMATCH_KEYS\nto no longer push an additional boolean value to indicate success/failure. Instead,None\nis pushed on failure in place of the tuple of extracted values.Changed opcodes that work with exceptions to reflect them now being represented as one item on the stack instead of three (see gh-89874).\nRemoved\nCOPY_DICT_WITHOUT_KEYS\n,GEN_START\n,POP_BLOCK\n,SETUP_FINALLY\nandYIELD_FROM\n.\nDeprecated\u00b6\nThis section lists Python APIs that have been deprecated in Python 3.11.\nDeprecated C APIs are listed separately.\nLanguage/Builtins\u00b6\nChaining\nclassmethod\ndescriptors (introduced in bpo-19072) is now deprecated. It can no longer be used to wrap other descriptors such asproperty\n. The core design of this feature was flawed and caused a number of downstream problems. To \u201cpass-through\u201d aclassmethod\n, consider using the__wrapped__\nattribute that was added in Python 3.10. (Contributed by Raymond Hettinger in gh-89519.)Octal escapes in string and bytes literals with values larger than\n0o377\n(255 in decimal) now produce aDeprecationWarning\n. In a future Python version, they will raise aSyntaxWarning\nand eventually aSyntaxError\n. (Contributed by Serhiy Storchaka in gh-81548.)The delegation of\nint()\nto__trunc__()\nis now deprecated. Callingint(a)\nwhentype(a)\nimplements__trunc__()\nbut not__int__()\nor__index__()\nnow raises aDeprecationWarning\n. (Contributed by Zackery Spytz in bpo-44977.)\nModules\u00b6\nPEP 594 led to the deprecations of the following modules slated for removal in Python 3.13:\naifc\nchunk\nmsilib\npipes\ntelnetlib\naudioop\ncrypt\nnis\nsndhdr\nuu\ncgi\nimghdr\nnntplib\nspwd\nxdrlib\ncgitb\nmailcap\nossaudiodev\nsunau\n(Contributed by Brett Cannon in bpo-47061 and Victor Stinner in gh-68966.)\nThe\nasynchat\n,asyncore\nandsmtpd\nmodules have been deprecated since at least Python 3.6. Their documentation and deprecation warnings have now been updated to note they will be removed in Python 3.12. (Contributed by Hugo van Kemenade in bpo-47022.)The\nlib2to3\npackage and2to3\ntool are now deprecated and may not be able to parse Python 3.10 or newer. See PEP 617, introducing the new PEG parser, for details. (Contributed by Victor Stinner in bpo-40360.)Undocumented modules\nsre_compile\n,sre_constants\nandsre_parse\nare now deprecated. (Contributed by Serhiy Storchaka in bpo-47152.)\nStandard Library\u00b6\nThe following have been deprecated in\nconfigparser\nsince Python 3.2. Their deprecation warnings have now been updated to note they will be removed in Python 3.12:the\nconfigparser.SafeConfigParser\nclassthe\nconfigparser.ParsingError.filename\npropertythe\nconfigparser.RawConfigParser.readfp()\nmethod\n(Contributed by Hugo van Kemenade in bpo-45173.)\nconfigparser.LegacyInterpolation\nhas been deprecated in the docstring since Python 3.2, and is not listed in theconfigparser\ndocumentation. It now emits aDeprecationWarning\nand will be removed in Python 3.13. Useconfigparser.BasicInterpolation\norconfigparser.ExtendedInterpolation\ninstead. (Contributed by Hugo van Kemenade in bpo-46607.)The older set of\nimportlib.resources\nfunctions were deprecated in favor of the replacements added in Python 3.9 and will be removed in a future Python version, due to not supporting resources located within package subdirectories:importlib.resources.contents()\nimportlib.resources.is_resource()\nimportlib.resources.open_binary()\nimportlib.resources.open_text()\nimportlib.resources.read_binary()\nimportlib.resources.read_text()\nimportlib.resources.path()\nThe\nlocale.getdefaultlocale()\nfunction is deprecated and will be removed in Python 3.15. Uselocale.setlocale()\n,locale.getpreferredencoding(False)\nandlocale.getlocale()\nfunctions instead. (Contributed by Victor Stinner in gh-90817.)The\nlocale.resetlocale()\nfunction is deprecated and will be removed in Python 3.13. Uselocale.setlocale(locale.LC_ALL, \"\")\ninstead. (Contributed by Victor Stinner in gh-90817.)Stricter rules will now be applied for numerical group references and group names in regular expressions. Only sequences of ASCII digits will now be accepted as a numerical reference, and the group name in\nbytes\npatterns and replacement strings can only contain ASCII letters, digits and underscores. For now, a deprecation warning is raised for syntax violating these rules. (Contributed by Serhiy Storchaka in gh-91760.)In the\nre\nmodule, there.template()\nfunction and the correspondingre.TEMPLATE\nandre.T\nflags are deprecated, as they were undocumented and lacked an obvious purpose. They will be removed in Python 3.13. (Contributed by Serhiy Storchaka and Miro Hron\u010dok in gh-92728.)turtle.settiltangle()\nhas been deprecated since Python 3.1; it now emits a deprecation warning and will be removed in Python 3.13. Useturtle.tiltangle()\ninstead (it was earlier incorrectly marked as deprecated, and its docstring is now corrected). (Contributed by Hugo van Kemenade in bpo-45837.)typing.Text\n, which exists solely to provide compatibility support between Python 2 and Python 3 code, is now deprecated. Its removal is currently unplanned, but users are encouraged to usestr\ninstead wherever possible. (Contributed by Alex Waygood in gh-92332.)The keyword argument syntax for constructing\ntyping.TypedDict\ntypes is now deprecated. Support will be removed in Python 3.13. (Contributed by Jingchen Ye in gh-90224.)webbrowser.MacOSX\nis deprecated and will be removed in Python 3.13. It is untested, undocumented, and not used bywebbrowser\nitself. (Contributed by Donghee Na in bpo-42255.)The behavior of returning a value from a\nTestCase\nandIsolatedAsyncioTestCase\ntest methods (other than the defaultNone\nvalue) is now deprecated.Deprecated the following not-formally-documented\nunittest\nfunctions, scheduled for removal in Python 3.13:unittest.findTestCases()\nunittest.makeSuite()\nunittest.getTestCaseNames()\nUse\nTestLoader\nmethods instead:(Contributed by Erlend E. Aasland in bpo-5846.)\nunittest.TestProgram.usageExit()\nis marked deprecated, to be removed in 3.13. (Contributed by Carlos Dam\u00e1zio in gh-67048.)\nPending Removal in Python 3.12\u00b6\nThe following Python APIs have been deprecated in earlier Python releases, and will be removed in Python 3.12.\nC APIs pending removal are listed separately.\nThe\nasynchat\nmoduleThe\nasyncore\nmoduleThe\nimp\nmoduleThe\ntyping.io\nnamespaceThe\ntyping.re\nnamespacecgi.log()\nimportlib.find_loader()\nimportlib.abc.Loader.module_repr()\nimportlib.abc.MetaPathFinder.find_module()\nimportlib.abc.PathEntryFinder.find_loader()\nimportlib.abc.PathEntryFinder.find_module()\nimportlib.machinery.BuiltinImporter.find_module()\nimportlib.machinery.BuiltinLoader.module_repr()\nimportlib.machinery.FileFinder.find_loader()\nimportlib.machinery.FileFinder.find_module()\nimportlib.machinery.FrozenImporter.find_module()\nimportlib.machinery.FrozenLoader.module_repr()\nimportlib.machinery.PathFinder.find_module()\nimportlib.machinery.WindowsRegistryFinder.find_module()\nimportlib.util.module_for_loader()\nimportlib.util.set_loader_wrapper()\nimportlib.util.set_package_wrapper()\npkgutil.ImpImporter\npkgutil.ImpLoader\npathlib.Path.link_to()\nsqlite3.enable_shared_cache()\nsqlite3.OptimizedUnicode()\nPYTHONTHREADDEBUG\nenvironment variableThe following deprecated aliases in\nunittest\n:Deprecated alias\nMethod Name\nDeprecated in\nfailUnless\n3.1\nfailIf\n3.1\nfailUnlessEqual\n3.1\nfailIfEqual\n3.1\nfailUnlessAlmostEqual\n3.1\nfailIfAlmostEqual\n3.1\nfailUnlessRaises\n3.1\nassert_\n3.2\nassertEquals\n3.2\nassertNotEquals\n3.2\nassertAlmostEquals\n3.2\nassertNotAlmostEquals\n3.2\nassertRegexpMatches\n3.2\nassertRaisesRegexp\n3.2\nassertNotRegexpMatches\n3.5\nRemoved\u00b6\nThis section lists Python APIs that have been removed in Python 3.11.\nRemoved C APIs are listed separately.\nRemoved the\n@asyncio.coroutine()\ndecorator enabling legacy generator-based coroutines to be compatible withasync\n/await\ncode. The function has been deprecated since Python 3.8 and the removal was initially scheduled for Python 3.10. Useasync def\ninstead. (Contributed by Illia Volochii in bpo-43216.)Removed\nasyncio.coroutines.CoroWrapper\nused for wrapping legacy generator-based coroutine objects in the debug mode. (Contributed by Illia Volochii in bpo-43216.)Due to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint()\n, disabled in Python 3.9, is now entirely removed. This is because of the behavior of the socket optionSO_REUSEADDR\nin UDP. (Contributed by Hugo van Kemenade in bpo-45129.)Removed the\nbinhex\nmodule, deprecated in Python 3.9. Also removed the related, similarly-deprecatedbinascii\nfunctions:binascii.a2b_hqx()\nbinascii.b2a_hqx()\nbinascii.rlecode_hqx()\nbinascii.rldecode_hqx()\nThe\nbinascii.crc_hqx()\nfunction remains available.(Contributed by Victor Stinner in bpo-45085.)\nRemoved the\ndistutils\nbdist_msi\ncommand deprecated in Python 3.9. Usebdist_wheel\n(wheel packages) instead. (Contributed by Hugo van Kemenade in bpo-45124.)Removed the\n__getitem__()\nmethods ofxml.dom.pulldom.DOMEventStream\n,wsgiref.util.FileWrapper\nandfileinput.FileInput\n, deprecated since Python 3.9. (Contributed by Hugo van Kemenade in bpo-45132.)Removed the deprecated\ngettext\nfunctionslgettext()\n,ldgettext()\n,lngettext()\nandldngettext()\n. Also removed thebind_textdomain_codeset()\nfunction, theNullTranslations.output_charset()\nandNullTranslations.set_output_charset()\nmethods, and the codeset parameter oftranslation()\nandinstall()\n, since they are only used for thel*gettext()\nfunctions. (Contributed by Donghee Na and Serhiy Storchaka in bpo-44235.)Removed from the\ninspect\nmodule:The\ngetargspec()\nfunction, deprecated since Python 3.0; useinspect.signature()\norinspect.getfullargspec()\ninstead.The\nformatargspec()\nfunction, deprecated since Python 3.5; use theinspect.signature()\nfunction or theinspect.Signature\nobject directly.The undocumented\nSignature.from_builtin()\nandSignature.from_function()\nmethods, deprecated since Python 3.5; use theSignature.from_callable()\nmethod instead.\n(Contributed by Hugo van Kemenade in bpo-45320.)\nRemoved the\n__class_getitem__()\nmethod frompathlib.PurePath\n, because it was not used and added by mistake in previous versions. (Contributed by Nikita Sobolev in bpo-46483.)Removed the\nMailmanProxy\nclass in thesmtpd\nmodule, as it is unusable without the externalmailman\npackage. (Contributed by Donghee Na in bpo-35800.)Removed the deprecated\nsplit()\nmethod of_tkinter.TkappType\n. (Contributed by Erlend E. Aasland in bpo-38371.)Removed namespace package support from\nunittest\ndiscovery. It was introduced in Python 3.4 but has been broken since Python 3.7. (Contributed by Inada Naoki in bpo-23882.)Removed the undocumented private\nfloat.__set_format__()\nmethod, previously known asfloat.__setformat__()\nin Python 3.7. Its docstring said: \u201cYou probably don\u2019t want to use this function. It exists mainly to be used in Python\u2019s test suite.\u201d (Contributed by Victor Stinner in bpo-46852.)The\n--experimental-isolated-subinterpreters\nconfigure flag (and correspondingEXPERIMENTAL_ISOLATED_SUBINTERPRETERS\nmacro) have been removed.Pynche \u2014 The Pythonically Natural Color and Hue Editor \u2014 has been moved out of\nTools/scripts\nand is being developed independently from the Python source tree.\nPorting to Python 3.11\u00b6\nThis section lists previously described changes and other bugfixes in the Python API that may require changes to your Python code.\nPorting notes for the C API are listed separately.\nopen()\n,io.open()\n,codecs.open()\nandfileinput.FileInput\nno longer accept'U'\n(\u201cuniversal newline\u201d) in the file mode. In Python 3, \u201cuniversal newline\u201d mode is used by default whenever a file is opened in text mode, and the'U'\nflag has been deprecated since Python 3.3. The newline parameter to these functions controls how universal newlines work. (Contributed by Victor Stinner in bpo-37330.)ast.AST\nnode positions are now validated when provided tocompile()\nand other related functions. If invalid positions are detected, aValueError\nwill be raised. (Contributed by Pablo Galindo in gh-93351)Prohibited passing non-\nconcurrent.futures.ThreadPoolExecutor\nexecutors toasyncio.loop.set_default_executor()\nfollowing a deprecation in Python 3.8. (Contributed by Illia Volochii in bpo-43234.)calendar\n: Thecalendar.LocaleTextCalendar\nandcalendar.LocaleHTMLCalendar\nclasses now uselocale.getlocale()\n, instead of usinglocale.getdefaultlocale()\n, if no locale is specified. (Contributed by Victor Stinner in bpo-46659.)The\npdb\nmodule now reads the.pdbrc\nconfiguration file with the'UTF-8'\nencoding. (Contributed by Srinivas Reddy Thatiparthy (\u0c36\u0c4d\u0c30\u0c40\u0c28\u0c3f\u0c35\u0c3e\u0c38\u0c4d \u0c30\u0c46\u0c21\u0c4d\u0c21\u0c3f \u0c24\u0c3e\u0c1f\u0c3f\u0c2a\u0c30\u0c4d\u0c24\u0c3f) in bpo-41137.)The population parameter of\nrandom.sample()\nmust be a sequence, and automatic conversion ofset\ns tolist\ns is no longer supported. Also, if the sample size is larger than the population size, aValueError\nis raised. (Contributed by Raymond Hettinger in bpo-40465.)The random optional parameter of\nrandom.shuffle()\nwas removed. It was previously an arbitrary random function to use for the shuffle; now,random.random()\n(its previous default) will always be used.In\nre\nRegular Expression Syntax, global inline flags (e.g.(?i)\n) can now only be used at the start of regular expressions. Using them elsewhere has been deprecated since Python 3.6. (Contributed by Serhiy Storchaka in bpo-47066.)In the\nre\nmodule, several long-standing bugs where fixed that, in rare cases, could cause capture groups to get the wrong result. Therefore, this could change the captured output in these cases. (Contributed by Ma Lin in bpo-35859.)\nBuild Changes\u00b6\nCPython now has PEP 11 Tier 3 support for cross compiling to the WebAssembly platforms Emscripten (\nwasm32-unknown-emscripten\n, i.e. Python in the browser) and WebAssembly System Interface (WASI) (wasm32-unknown-wasi\n). The effort is inspired by previous work like Pyodide. These platforms provide a limited subset of POSIX APIs; Python standard libraries features and modules related to networking, processes, threading, signals, mmap, and users/groups are not available or don\u2019t work. (Emscripten contributed by Christian Heimes and Ethan Smith in gh-84461 and WASI contributed by Christian Heimes in gh-90473; platforms promoted in gh-95085)Building CPython now requires:\nThe\nPy_NO_NAN\nmacro has been removed. Since CPython now requires IEEE 754 floats, NaN values are always available. (Contributed by Victor Stinner in bpo-46656.)The\ntkinter\npackage now requires Tcl/Tk version 8.5.12 or newer. (Contributed by Serhiy Storchaka in bpo-46996.)Build dependencies, compiler flags, and linker flags for most stdlib extension modules are now detected by configure. libffi, libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags are detected by pkg-config (when available).\ntkinter\nnow requires a pkg-config command to detect development settings for Tcl/Tk headers and libraries. (Contributed by Christian Heimes and Erlend Egeberg Aasland in bpo-45847, bpo-45747, and bpo-45763.)libpython is no longer linked against libcrypt. (Contributed by Mike Gilbert in bpo-45433.)\nCPython can now be built with the ThinLTO option via passing\nthin\nto--with-lto\n, i.e.--with-lto=thin\n. (Contributed by Donghee Na and Brett Holman in bpo-44340.)Freelists for object structs can now be disabled. A new configure option\n--without-freelists\ncan be used to disable all freelists except empty tuple singleton. (Contributed by Christian Heimes in bpo-45522.)Modules/Setup\nandModules/makesetup\nhave been improved and tied up. Extension modules can now be built throughmakesetup\n. All except some test modules can be linked statically into a main binary or library. (Contributed by Brett Cannon and Christian Heimes in bpo-45548, bpo-45570, bpo-45571, and bpo-43974.)Note\nUse the environment variables\nTCLTK_CFLAGS\nandTCLTK_LIBS\nto manually specify the location of Tcl/Tk headers and libraries. The configure options--with-tcltk-includes\nand--with-tcltk-libs\nhave been removed.On RHEL 7 and CentOS 7 the development packages do not provide\ntcl.pc\nandtk.pc\n; useTCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\"\n. The directoryMisc/rhel7\ncontains.pc\nfiles and instructions on how to build Python with RHEL 7\u2019s and CentOS 7\u2019s Tcl/Tk and OpenSSL.CPython will now use 30-bit digits by default for the Python\nint\nimplementation. Previously, the default was to use 30-bit digits on platforms withSIZEOF_VOID_P >= 8\n, and 15-bit digits otherwise. It\u2019s still possible to explicitly request use of 15-bit digits via either the--enable-big-digits\noption to the configure script or (for Windows) thePYLONG_BITS_IN_DIGIT\nvariable inPC/pyconfig.h\n, but this option may be removed at some point in the future. (Contributed by Mark Dickinson in bpo-45569.)\nC API Changes\u00b6\nNew Features\u00b6\nAdd a new\nPyType_GetName()\nfunction to get type\u2019s short name. (Contributed by Hai Shi in bpo-42035.)Add a new\nPyType_GetQualName()\nfunction to get type\u2019s qualified name. (Contributed by Hai Shi in bpo-42035.)Add new\nPyThreadState_EnterTracing()\nandPyThreadState_LeaveTracing()\nfunctions to the limited C API to suspend and resume tracing and profiling. (Contributed by Victor Stinner in bpo-43760.)Added the\nPy_Version\nconstant which bears the same value asPY_VERSION_HEX\n. (Contributed by Gabriele N. Tornetta in bpo-43931.)Py_buffer\nand APIs are now part of the limited API and the stable ABI:bf_getbuffer\nandbf_releasebuffer\ntype slots\n(Contributed by Christian Heimes in bpo-45459.)\nAdded the\nPyType_GetModuleByDef()\nfunction, used to get the module in which a method was defined, in cases where this information is not available directly (viaPyCMethod\n). (Contributed by Petr Viktorin in bpo-46613.)Add new functions to pack and unpack C double (serialize and deserialize):\nPyFloat_Pack2()\n,PyFloat_Pack4()\n,PyFloat_Pack8()\n,PyFloat_Unpack2()\n,PyFloat_Unpack4()\nandPyFloat_Unpack8()\n. (Contributed by Victor Stinner in bpo-46906.)Add new functions to get frame object attributes:\nPyFrame_GetBuiltins()\n,PyFrame_GetGenerator()\n,PyFrame_GetGlobals()\n,PyFrame_GetLasti()\n.Added two new functions to get and set the active exception instance:\nPyErr_GetHandledException()\nandPyErr_SetHandledException()\n. These are alternatives toPyErr_SetExcInfo()\nandPyErr_GetExcInfo()\nwhich work with the legacy 3-tuple representation of exceptions. (Contributed by Irit Katriel in bpo-46343.)Added the\nPyConfig.safe_path\nmember. (Contributed by Victor Stinner in gh-57684.)\nPorting to Python 3.11\u00b6\nSome macros have been converted to static inline functions to avoid macro pitfalls. The change should be mostly transparent to users, as the replacement functions will cast their arguments to the expected types to avoid compiler warnings due to static type checks. However, when the limited C API is set to >=3.11, these casts are not done, and callers will need to cast arguments to their expected types. See PEP 670 for more details. (Contributed by Victor Stinner and Erlend E. Aasland in gh-89653.)\nPyErr_SetExcInfo()\nno longer uses thetype\nandtraceback\narguments, the interpreter now derives those values from the exception instance (thevalue\nargument). The function still steals references of all three arguments. (Contributed by Irit Katriel in bpo-45711.)PyErr_GetExcInfo()\nnow derives thetype\nandtraceback\nfields of the result from the exception instance (thevalue\nfield). (Contributed by Irit Katriel in bpo-45711.)_frozen\nhas a newis_package\nfield to indicate whether or not the frozen module is a package. Previously, a negative value in thesize\nfield was the indicator. Now only non-negative values be used forsize\n. (Contributed by Kumar Aditya in bpo-46608.)_PyFrameEvalFunction()\nnow takes_PyInterpreterFrame*\nas its second parameter, instead ofPyFrameObject*\n. See PEP 523 for more details of how to use this function pointer type.PyCode_New()\nandPyCode_NewWithPosOnlyArgs()\nnow take an additionalexception_table\nargument. Using these functions should be avoided, if at all possible. To get a custom code object: create a code object using the compiler, then get a modified version with thereplace\nmethod.PyCodeObject\nno longer has theco_code\n,co_varnames\n,co_cellvars\nandco_freevars\nfields. Instead, usePyCode_GetCode()\n,PyCode_GetVarnames()\n,PyCode_GetCellvars()\nandPyCode_GetFreevars()\nrespectively to access them via the C API. (Contributed by Brandt Bucher in bpo-46841 and Ken Jin in gh-92154 and gh-94936.)The old trashcan macros (\nPy_TRASHCAN_SAFE_BEGIN\n/Py_TRASHCAN_SAFE_END\n) are now deprecated. They should be replaced by the new macrosPy_TRASHCAN_BEGIN\nandPy_TRASHCAN_END\n.A tp_dealloc function that has the old macros, such as:\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END }\nshould migrate to the new macros as follows:\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END }\nNote that\nPy_TRASHCAN_BEGIN\nhas a second argument which should be the deallocation function it is in.To support older Python versions in the same codebase, you can define the following macros and use them throughout the code (credit: these were copied from the\nmypy\ncodebase):#if PY_VERSION_HEX >= 0x03080000 # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_END #else # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op) #endif\nThe\nPyType_Ready()\nfunction now raises an error if a type is defined with thePy_TPFLAGS_HAVE_GC\nflag set but has no traverse function (PyTypeObject.tp_traverse\n). (Contributed by Victor Stinner in bpo-44263.)Heap types with the\nPy_TPFLAGS_IMMUTABLETYPE\nflag can now inherit the PEP 590 vectorcall protocol. Previously, this was only possible for static types. (Contributed by Erlend E. Aasland in bpo-43908)Since\nPy_TYPE()\nis changed to a inline static function,Py_TYPE(obj) = new_type\nmust be replaced withPy_SET_TYPE(obj, new_type)\n: see thePy_SET_TYPE()\nfunction (available since Python 3.9). For backward compatibility, this macro can be used:#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE) static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type) { ob->ob_type = type; } #define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type) #endif\n(Contributed by Victor Stinner in bpo-39573.)\nSince\nPy_SIZE()\nis changed to a inline static function,Py_SIZE(obj) = new_size\nmust be replaced withPy_SET_SIZE(obj, new_size)\n: see thePy_SET_SIZE()\nfunction (available since Python 3.9). For backward compatibility, this macro can be used:#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE) static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) { ob->ob_size = size; } #define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size) #endif\n(Contributed by Victor Stinner in bpo-39573.)\n<Python.h>\nno longer includes the header files<stdlib.h>\n,<stdio.h>\n,<errno.h>\nand<string.h>\nwhen thePy_LIMITED_API\nmacro is set to0x030b0000\n(Python 3.11) or higher. C extensions should explicitly include the header files after#include <Python.h>\n. (Contributed by Victor Stinner in bpo-45434.)The non-limited API files\ncellobject.h\n,classobject.h\n,code.h\n,context.h\n,funcobject.h\n,genobject.h\nandlongintrepr.h\nhave been moved to theInclude/cpython\ndirectory. Moreover, theeval.h\nheader file was removed. These files must not be included directly, as they are already included inPython.h\n: Include Files. If they have been included directly, consider includingPython.h\ninstead. (Contributed by Victor Stinner in bpo-35134.)The\nPyUnicode_CHECK_INTERNED()\nmacro has been excluded from the limited C API. It was never usable there, because it used internal structures which are not available in the limited C API. (Contributed by Victor Stinner in bpo-46007.)The following frame functions and type are now directly available with\n#include <Python.h>\n, it\u2019s no longer needed to add#include <frameobject.h>\n:(Contributed by Victor Stinner in gh-93937.)\nThe\nPyFrameObject\nstructure members have been removed from the public C API.While the documentation notes that the\nPyFrameObject\nfields are subject to change at any time, they have been stable for a long time and were used in several popular extensions.In Python 3.11, the frame struct was reorganized to allow performance optimizations. Some fields were removed entirely, as they were details of the old implementation.\nPyFrameObject\nfields:f_back\n: usePyFrame_GetBack()\n.f_blockstack\n: removed.f_builtins\n: usePyFrame_GetBuiltins()\n.f_code\n: usePyFrame_GetCode()\n.f_gen\n: usePyFrame_GetGenerator()\n.f_globals\n: usePyFrame_GetGlobals()\n.f_iblock\n: removed.f_lasti\n: usePyFrame_GetLasti()\n. Code usingf_lasti\nwithPyCode_Addr2Line()\nshould usePyFrame_GetLineNumber()\ninstead; it may be faster.f_lineno\n: usePyFrame_GetLineNumber()\nf_locals\n: usePyFrame_GetLocals()\n.f_stackdepth\n: removed.f_state\n: no public API (renamed tof_frame.f_state\n).f_trace\n: no public API.f_trace_lines\n: usePyObject_GetAttrString((PyObject*)frame, \"f_trace_lines\")\n.f_trace_opcodes\n: usePyObject_GetAttrString((PyObject*)frame, \"f_trace_opcodes\")\n.f_localsplus\n: no public API (renamed tof_frame.localsplus\n).f_valuestack\n: removed.\nThe Python frame object is now created lazily. A side effect is that the\nf_back\nmember must not be accessed directly, since its value is now also computed lazily. ThePyFrame_GetBack()\nfunction must be called instead.Debuggers that accessed the\nf_locals\ndirectly must callPyFrame_GetLocals()\ninstead. They no longer need to callPyFrame_FastToLocalsWithError()\norPyFrame_LocalsToFast()\n, in fact they should not call those functions. The necessary updating of the frame is now managed by the virtual machine.Code defining\nPyFrame_GetCode()\non Python 3.8 and older:#if PY_VERSION_HEX < 0x030900B1 static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame) { Py_INCREF(frame->f_code); return frame->f_code; } #endif\nCode defining\nPyFrame_GetBack()\non Python 3.8 and older:#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame) { Py_XINCREF(frame->f_back); return frame->f_back; } #endif\nOr use the pythoncapi_compat project to get these two functions on older Python versions.\nChanges of the\nPyThreadState\nstructure members:frame\n: removed, usePyThreadState_GetFrame()\n(function added to Python 3.9 by bpo-40429). Warning: the function returns a strong reference, need to callPy_XDECREF()\n.tracing\n: changed, usePyThreadState_EnterTracing()\nandPyThreadState_LeaveTracing()\n(functions added to Python 3.11 by bpo-43760).recursion_depth\n: removed, use(tstate->recursion_limit - tstate->recursion_remaining)\ninstead.stackcheck_counter\n: removed.\nCode defining\nPyThreadState_GetFrame()\non Python 3.8 and older:#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate) { Py_XINCREF(tstate->frame); return tstate->frame; } #endif\nCode defining\nPyThreadState_EnterTracing()\nandPyThreadState_LeaveTracing()\non Python 3.10 and older:#if PY_VERSION_HEX < 0x030B00A2 static inline void PyThreadState_EnterTracing(PyThreadState *tstate) { tstate->tracing++; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = 0; #else tstate->use_tracing = 0; #endif } static inline void PyThreadState_LeaveTracing(PyThreadState *tstate) { int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL); tstate->tracing--; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = use_tracing; #else tstate->use_tracing = use_tracing; #endif } #endif\nOr use the pythoncapi-compat project to get these functions on old Python functions.\nDistributors are encouraged to build Python with the optimized Blake2 library libb2.\nThe\nPyConfig.module_search_paths_set\nfield must now be set to 1 for initialization to usePyConfig.module_search_paths\nto initializesys.path\n. Otherwise, initialization will recalculate the path and replace any values added tomodule_search_paths\n.PyConfig_Read()\nno longer calculates the initial search path, and will not fill any values intoPyConfig.module_search_paths\n. To calculate default paths and then modify them, finish initialization and usePySys_GetObject()\nto retrievesys.path\nas a Python list object and modify it directly.\nDeprecated\u00b6\nDeprecate the following functions to configure the Python initialization:\nPySys_AddWarnOptionUnicode()\nPySys_AddWarnOption()\nPySys_AddXOption()\nPySys_HasWarnOptions()\nPySys_SetArgvEx()\nPySys_SetArgv()\nPySys_SetPath()\nPy_SetPath()\nPy_SetProgramName()\nPy_SetPythonHome()\nPy_SetStandardStreamEncoding()\n_Py_SetProgramFullPath()\nUse the new\nPyConfig\nAPI of the Python Initialization Configuration instead (PEP 587). (Contributed by Victor Stinner in gh-88279.)Deprecate the\nob_shash\nmember of thePyBytesObject\n. UsePyObject_Hash()\ninstead. (Contributed by Inada Naoki in bpo-46864.)\nPending Removal in Python 3.12\u00b6\nThe following C APIs have been deprecated in earlier Python releases, and will be removed in Python 3.12.\nPyUnicode_AS_DATA()\nPyUnicode_AS_UNICODE()\nPyUnicode_AsUnicodeAndSize()\nPyUnicode_AsUnicode()\nPyUnicode_FromUnicode()\nPyUnicode_GET_DATA_SIZE()\nPyUnicode_GET_SIZE()\nPyUnicode_GetSize()\nPyUnicode_IS_COMPACT()\nPyUnicode_IS_READY()\nPyUnicode_WSTR_LENGTH()\n_PyUnicode_AsUnicode()\nPyUnicode_WCHAR_KIND\nPyUnicode_InternImmortal()\nRemoved\u00b6\nPyFrame_BlockSetup()\nandPyFrame_BlockPop()\nhave been removed. (Contributed by Mark Shannon in bpo-40222.)Remove the following math macros using the\nerrno\nvariable:Py_ADJUST_ERANGE1()\nPy_ADJUST_ERANGE2()\nPy_OVERFLOWED()\nPy_SET_ERANGE_IF_OVERFLOW()\nPy_SET_ERRNO_ON_MATH_ERROR()\n(Contributed by Victor Stinner in bpo-45412.)\nRemove\nPy_UNICODE_COPY()\nandPy_UNICODE_FILL()\nmacros, deprecated since Python 3.3. UsePyUnicode_CopyCharacters()\normemcpy()\n(wchar_t*\nstring), andPyUnicode_Fill()\nfunctions instead. (Contributed by Victor Stinner in bpo-41123.)Remove the\npystrhex.h\nheader file. It only contains private functions. C extensions should only include the main<Python.h>\nheader file. (Contributed by Victor Stinner in bpo-45434.)Remove the\nPy_FORCE_DOUBLE()\nmacro. It was used by thePy_IS_INFINITY()\nmacro. (Contributed by Victor Stinner in bpo-45440.)The following items are no longer available when\nPy_LIMITED_API\nis defined:the\nPy_MARSHAL_VERSION\nmacro\nThese are not part of the limited API.\n(Contributed by Victor Stinner in bpo-45474.)\nExclude\nPyWeakref_GET_OBJECT()\nfrom the limited C API. It never worked since thePyWeakReference\nstructure is opaque in the limited C API. (Contributed by Victor Stinner in bpo-35134.)Remove the\nPyHeapType_GET_MEMBERS()\nmacro. It was exposed in the public C API by mistake, it must only be used by Python internally. Use thePyTypeObject.tp_members\nmember instead. (Contributed by Victor Stinner in bpo-40170.)Remove the\nHAVE_PY_SET_53BIT_PRECISION\nmacro (moved to the internal C API). (Contributed by Victor Stinner in bpo-45412.)\nRemove the\nPy_UNICODE\nencoder APIs, as they have been deprecated since Python 3.3, are little used and are inefficient relative to the recommended alternatives.The removed functions are:\nPyUnicode_Encode()\nPyUnicode_EncodeASCII()\nPyUnicode_EncodeLatin1()\nPyUnicode_EncodeUTF7()\nPyUnicode_EncodeUTF8()\nPyUnicode_EncodeUTF16()\nPyUnicode_EncodeUTF32()\nPyUnicode_EncodeUnicodeEscape()\nPyUnicode_EncodeRawUnicodeEscape()\nPyUnicode_EncodeCharmap()\nPyUnicode_TranslateCharmap()\nPyUnicode_EncodeDecimal()\nPyUnicode_TransformDecimalToASCII()\nSee PEP 624 for details and migration guidance. (Contributed by Inada Naoki in bpo-44029.)\nNotable changes in 3.11.4\u00b6\ntarfile\u00b6\nThe extraction methods in\ntarfile\n, andshutil.unpack_archive()\n, have a new a filter argument that allows limiting tar features than may be surprising or dangerous, such as creating files outside the destination directory. See Extraction filters for details. In Python 3.12, use without the filter argument will show aDeprecationWarning\n. In Python 3.14, the default will switch to'data'\n. (Contributed by Petr Viktorin in PEP 706.)\nNotable changes in 3.11.5\u00b6\nOpenSSL\u00b6\nWindows builds and macOS installers from python.org now use OpenSSL 3.0."},
{"source": "https://docs.python.org/3/whatsnew/3.12.html", "title": "What\u2019s New In Python 3.12", "text": "What\u2019s New In Python 3.12\u00b6\n- Editor:\nAdam Turner\nThis article explains the new features in Python 3.12, compared to 3.11. Python 3.12 was released on October 2, 2023. For full details, see the changelog.\nSee also\nPEP 693 \u2013 Python 3.12 Release Schedule\nSummary \u2013 Release highlights\u00b6\nPython 3.12 is a stable release of the Python programming language,\nwith a mix of changes to the language and the standard library.\nThe library changes focus on cleaning up deprecated APIs, usability, and correctness.\nOf note, the distutils\npackage has been removed from the standard library.\nFilesystem support in os\nand pathlib\nhas seen a number of improvements,\nand several modules have better performance.\nThe language changes focus on usability,\nas f-strings have had many limitations removed\nand \u2018Did you mean \u2026\u2019 suggestions continue to improve.\nThe new type parameter syntax\nand type\nstatement improve ergonomics for using generic types and type aliases with static type checkers.\nThis article doesn\u2019t attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details, you should refer to the documentation, such as the Library Reference and Language Reference. If you want to understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented.\nNew syntax features:\nNew grammar features:\nInterpreter improvements:\nPEP 669, low impact monitoring\nImproved \u2018Did you mean \u2026\u2019 suggestions for\nNameError\n,ImportError\n, andSyntaxError\nexceptions\nPython data model improvements:\nPEP 688, using the buffer protocol from Python\nSignificant improvements in the standard library:\nThe\npathlib.Path\nclass now supports subclassingThe\nos\nmodule received several improvements for Windows supportA command-line interface has been added to the\nsqlite3\nmoduleisinstance()\nchecks againstruntime-checkable protocols\nenjoy a speed up of between two and 20 timesThe\nasyncio\npackage has had a number of performance improvements, with some benchmarks showing a 75% speed up.A command-line interface has been added to the\nuuid\nmoduleDue to the changes in PEP 701, producing tokens via the\ntokenize\nmodule is up to 64% faster.\nSecurity improvements:\nReplace the builtin\nhashlib\nimplementations of SHA1, SHA3, SHA2-384, SHA2-512, and MD5 with formally verified code from the HACL* project. These builtin implementations remain as fallbacks that are only used when OpenSSL does not provide them.\nC API improvements:\nCPython implementation improvements:\nPEP 709, comprehension inlining\nCPython support for the Linux\nperf\nprofilerImplement stack overflow protection on supported platforms\nNew typing features:\nPEP 698,\ntyping.override()\ndecorator\nImportant deprecations, removals or restrictions:\nPEP 623: Remove\nwstr\nfrom Unicode objects in Python\u2019s C API, reducing the size of everystr\nobject by at least 8 bytes.PEP 632: Remove the\ndistutils\npackage. See the migration guide for advice replacing the APIs it provided. The third-party Setuptools package continues to providedistutils\n, if you still require it in Python 3.12 and beyond.gh-95299: Do not pre-install\nsetuptools\nin virtual environments created withvenv\n. This means thatdistutils\n,setuptools\n,pkg_resources\n, andeasy_install\nwill no longer available by default; to access these runpip install setuptools\nin the activated virtual environment.The\nasynchat\n,asyncore\n, andimp\nmodules have been removed, along with severalunittest.TestCase\nmethod aliases.\nNew Features\u00b6\nPEP 695: Type Parameter Syntax\u00b6\nGeneric classes and functions under PEP 484 were declared using a verbose syntax that left the scope of type parameters unclear and required explicit declarations of variance.\nPEP 695 introduces a new, more compact and explicit way to create generic classes and functions:\ndef max[T](args: Iterable[T]) -> T:\n...\nclass list[T]:\ndef __getitem__(self, index: int, /) -> T:\n...\ndef append(self, element: T) -> None:\n...\nIn addition, the PEP introduces a new way to declare type aliases\nusing the type\nstatement, which creates an instance of\nTypeAliasType\n:\ntype Point = tuple[float, float]\nType aliases can also be generic:\ntype Point[T] = tuple[T, T]\nThe new syntax allows declaring TypeVarTuple\nand ParamSpec\nparameters, as well as TypeVar\nparameters with bounds or constraints:\ntype IntFunc[**P] = Callable[P, int] # ParamSpec\ntype LabeledTuple[*Ts] = tuple[str, *Ts] # TypeVarTuple\ntype HashableSequence[T: Hashable] = Sequence[T] # TypeVar with bound\ntype IntOrStrSequence[T: (int, str)] = Sequence[T] # TypeVar with constraints\nThe value of type aliases and the bound and constraints of type variables created through this syntax are evaluated only on demand (see lazy evaluation). This means type aliases are able to refer to other types defined later in the file.\nType parameters declared through a type parameter list are visible within the scope of the declaration and any nested scopes, but not in the outer scope. For example, they can be used in the type annotations for the methods of a generic class or in the class body. However, they cannot be used in the module scope after the class is defined. See Type parameter lists for a detailed description of the runtime semantics of type parameters.\nIn order to support these scoping semantics, a new kind of scope is introduced, the annotation scope. Annotation scopes behave for the most part like function scopes, but interact differently with enclosing class scopes. In Python 3.13, annotations will also be evaluated in annotation scopes.\nSee PEP 695 for more details.\n(PEP written by Eric Traut. Implementation by Jelle Zijlstra, Eric Traut, and others in gh-103764.)\nPEP 701: Syntactic formalization of f-strings\u00b6\nPEP 701 lifts some restrictions on the usage of f-strings. Expression components inside f-strings can now be any valid Python expression, including strings reusing the same quote as the containing f-string, multi-line expressions, comments, backslashes, and unicode escape sequences. Let\u2019s cover these in detail:\nQuote reuse: in Python 3.11, reusing the same quotes as the enclosing f-string raises a\nSyntaxError\n, forcing the user to either use other available quotes (like using double quotes or triple quotes if the f-string uses single quotes). In Python 3.12, you can now do things like this:>>> songs = ['Take me back to Eden', 'Alkaline', 'Ascensionism'] >>> f\"This is the playlist: {\", \".join(songs)}\" 'This is the playlist: Take me back to Eden, Alkaline, Ascensionism'\nNote that before this change there was no explicit limit in how f-strings can be nested, but the fact that string quotes cannot be reused inside the expression component of f-strings made it impossible to nest f-strings arbitrarily. In fact, this is the most nested f-string that could be written:\n>>> f\"\"\"{f'''{f'{f\"{1+1}\"}'}'''}\"\"\" '2'\nAs now f-strings can contain any valid Python expression inside expression components, it is now possible to nest f-strings arbitrarily:\n>>> f\"{f\"{f\"{f\"{f\"{f\"{1+1}\"}\"}\"}\"}\"}\" '2'\nMulti-line expressions and comments: In Python 3.11, f-string expressions must be defined in a single line, even if the expression within the f-string could normally span multiple lines (like literal lists being defined over multiple lines), making them harder to read. In Python 3.12 you can now define f-strings spanning multiple lines, and add inline comments:\n>>> f\"This is the playlist: {\", \".join([ ... 'Take me back to Eden', # My, my, those eyes like fire ... 'Alkaline', # Not acid nor alkaline ... 'Ascensionism' # Take to the broken skies at last ... ])}\" 'This is the playlist: Take me back to Eden, Alkaline, Ascensionism'\nBackslashes and unicode characters: before Python 3.12 f-string expressions couldn\u2019t contain any\n\\\ncharacter. This also affected unicode escape sequences (such as\\N{snowman}\n) as these contain the\\N\npart that previously could not be part of expression components of f-strings. Now, you can define expressions like this:>>> print(f\"This is the playlist: {\"\\n\".join(songs)}\") This is the playlist: Take me back to Eden Alkaline Ascensionism >>> print(f\"This is the playlist: {\"\\N{BLACK HEART SUIT}\".join(songs)}\") This is the playlist: Take me back to Eden\u2665Alkaline\u2665Ascensionism\nSee PEP 701 for more details.\nAs a positive side-effect of how this feature has been implemented (by parsing f-strings\nwith the PEG parser), now error messages for f-strings are more precise\nand include the exact location of the error. For example, in Python 3.11, the following\nf-string raises a SyntaxError\n:\n>>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\nFile \"<stdin>\", line 1\n(x z y)\n^^^\nSyntaxError: f-string: invalid syntax. Perhaps you forgot a comma?\nbut the error message doesn\u2019t include the exact location of the error within the line and also has the expression artificially surrounded by parentheses. In Python 3.12, as f-strings are parsed with the PEG parser, error messages can be more precise and show the entire line:\n>>> my_string = f\"{x z y}\" + f\"{1 + 1}\"\nFile \"<stdin>\", line 1\nmy_string = f\"{x z y}\" + f\"{1 + 1}\"\n^^^\nSyntaxError: invalid syntax. Perhaps you forgot a comma?\n(Contributed by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristi\u00e1n Maureira-Fredes and Marta G\u00f3mez in gh-102856. PEP written by Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou and Marta G\u00f3mez).\nPEP 684: A Per-Interpreter GIL\u00b6\nPEP 684 introduces a per-interpreter GIL, so that sub-interpreters may now be created with a unique GIL per interpreter. This allows Python programs to take full advantage of multiple CPU cores. This is currently only available through the C-API, though a Python API is anticipated for 3.13.\nUse the new Py_NewInterpreterFromConfig()\nfunction to\ncreate an interpreter with its own GIL:\nPyInterpreterConfig config = {\n.check_multi_interp_extensions = 1,\n.gil = PyInterpreterConfig_OWN_GIL,\n};\nPyThreadState *tstate = NULL;\nPyStatus status = Py_NewInterpreterFromConfig(&tstate, &config);\nif (PyStatus_Exception(status)) {\nreturn -1;\n}\n/* The new interpreter is now active in the current thread. */\nFor further examples how to use the C-API for sub-interpreters with a\nper-interpreter GIL, see Modules/_xxsubinterpretersmodule.c\n.\n(Contributed by Eric Snow in gh-104210, etc.)\nPEP 669: Low impact monitoring for CPython\u00b6\nPEP 669 defines a new API\nfor profilers,\ndebuggers, and other tools to monitor events in CPython.\nIt covers a wide range of events, including calls,\nreturns, lines, exceptions, jumps, and more.\nThis means that you only pay for what you use, providing support\nfor near-zero overhead debuggers and coverage tools.\nSee sys.monitoring\nfor details.\n(Contributed by Mark Shannon in gh-103082.)\nPEP 688: Making the buffer protocol accessible in Python\u00b6\nPEP 688 introduces a way to use the buffer protocol\nfrom Python code. Classes that implement the __buffer__()\nmethod\nare now usable as buffer types.\nThe new collections.abc.Buffer\nABC provides a standard\nway to represent buffer objects, for example in type annotations.\nThe new inspect.BufferFlags\nenum represents the flags that\ncan be used to customize buffer creation.\n(Contributed by Jelle Zijlstra in gh-102500.)\nPEP 709: Comprehension inlining\u00b6\nDictionary, list, and set comprehensions are now inlined, rather than creating a new single-use function object for each execution of the comprehension. This speeds up execution of a comprehension by up to two times. See PEP 709 for further details.\nComprehension iteration variables remain isolated and don\u2019t overwrite a variable of the same name in the outer scope, nor are they visible after the comprehension. Inlining does result in a few visible behavior changes:\nThere is no longer a separate frame for the comprehension in tracebacks, and tracing/profiling no longer shows the comprehension as a function call.\nThe\nsymtable\nmodule will no longer produce child symbol tables for each comprehension; instead, the comprehension\u2019s locals will be included in the parent function\u2019s symbol table.Calling\nlocals()\ninside a comprehension now includes variables from outside the comprehension, and no longer includes the synthetic.0\nvariable for the comprehension \u201cargument\u201d.A comprehension iterating directly over\nlocals()\n(e.g.[k for k in locals()]\n) may see \u201cRuntimeError: dictionary changed size during iteration\u201d when run under tracing (e.g. code coverage measurement). This is the same behavior already seen in e.g.for k in locals():\n. To avoid the error, first create a list of keys to iterate over:keys = list(locals()); [k for k in keys]\n.\n(Contributed by Carl Meyer and Vladimir Matveev in PEP 709.)\nImproved Error Messages\u00b6\nModules from the standard library are now potentially suggested as part of the error messages displayed by the interpreter when a\nNameError\nis raised to the top level. (Contributed by Pablo Galindo in gh-98254.)>>> sys.version_info Traceback (most recent call last): File \"<stdin>\", line 1, in <module> NameError: name 'sys' is not defined. Did you forget to import 'sys'?\nImprove the error suggestion for\nNameError\nexceptions for instances. Now if aNameError\nis raised in a method and the instance has an attribute that\u2019s exactly equal to the name in the exception, the suggestion will includeself.<NAME>\ninstead of the closest match in the method scope. (Contributed by Pablo Galindo in gh-99139.)>>> class A: ... def __init__(self): ... self.blech = 1 ... ... def foo(self): ... somethin = blech ... >>> A().foo() Traceback (most recent call last): File \"<stdin>\", line 1 somethin = blech ^^^^^ NameError: name 'blech' is not defined. Did you mean: 'self.blech'?\nImprove the\nSyntaxError\nerror message when the user typesimport x from y\ninstead offrom y import x\n. (Contributed by Pablo Galindo in gh-98931.)>>> import a.y.z from b.y.z Traceback (most recent call last): File \"<stdin>\", line 1 import a.y.z from b.y.z ^^^^^^^^^^^^^^^^^^^^^^^ SyntaxError: Did you mean to use 'from ... import ...' instead?\nImportError\nexceptions raised from failedfrom <module> import <name>\nstatements now include suggestions for the value of<name>\nbased on the available names in<module>\n. (Contributed by Pablo Galindo in gh-91058.)>>> from collections import chainmap Traceback (most recent call last): File \"<stdin>\", line 1, in <module> ImportError: cannot import name 'chainmap' from 'collections'. Did you mean: 'ChainMap'?\nOther Language Changes\u00b6\nThe parser now raises\nSyntaxError\nwhen parsing source code containing null bytes. (Contributed by Pablo Galindo in gh-96670.)A backslash-character pair that is not a valid escape sequence now generates a\nSyntaxWarning\n, instead ofDeprecationWarning\n. For example,re.compile(\"\\d+\\.\\d+\")\nnow emits aSyntaxWarning\n(\"\\d\"\nis an invalid escape sequence, use raw strings for regular expression:re.compile(r\"\\d+\\.\\d+\")\n). In a future Python version,SyntaxError\nwill eventually be raised, instead ofSyntaxWarning\n. (Contributed by Victor Stinner in gh-98401.)Octal escapes with value larger than\n0o377\n(ex:\"\\477\"\n), deprecated in Python 3.11, now produce aSyntaxWarning\n, instead ofDeprecationWarning\n. In a future Python version they will be eventually aSyntaxError\n. (Contributed by Victor Stinner in gh-98401.)Variables used in the target part of comprehensions that are not stored to can now be used in assignment expressions (\n:=\n). For example, in[(b := 1) for a, b.prop in some_iter]\n, the assignment tob\nis now allowed. Note that assigning to variables stored to in the target part of comprehensions (likea\n) is still disallowed, as per PEP 572. (Contributed by Nikita Sobolev in gh-100581.)Exceptions raised in a class or type\u2019s\n__set_name__\nmethod are no longer wrapped by aRuntimeError\n. Context information is added to the exception as a PEP 678 note. (Contributed by Irit Katriel in gh-77757.)When a\ntry-except*\nconstruct handles the entireExceptionGroup\nand raises one other exception, that exception is no longer wrapped in anExceptionGroup\n. Also changed in version 3.11.4. (Contributed by Irit Katriel in gh-103590.)The Garbage Collector now runs only on the eval breaker mechanism of the Python bytecode evaluation loop instead of object allocations. The GC can also run when\nPyErr_CheckSignals()\nis called so C extensions that need to run for a long time without executing any Python code also have a chance to execute the GC periodically. (Contributed by Pablo Galindo in gh-97922.)All builtin and extension callables expecting boolean parameters now accept arguments of any type instead of just\nbool\nandint\n. (Contributed by Serhiy Storchaka in gh-60203.)memoryview\nnow supports the half-float type (the \u201ce\u201d format code). (Contributed by Donghee Na and Antoine Pitrou in gh-90751.)slice\nobjects are now hashable, allowing them to be used as dict keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond Hettinger in gh-101264.)sum()\nnow uses Neumaier summation to improve accuracy and commutativity when summing floats or mixed ints and floats. (Contributed by Raymond Hettinger in gh-100425.)ast.parse()\nnow raisesSyntaxError\ninstead ofValueError\nwhen parsing source code containing null bytes. (Contributed by Pablo Galindo in gh-96670.)The extraction methods in\ntarfile\n, andshutil.unpack_archive()\n, have a new a filter argument that allows limiting tar features than may be surprising or dangerous, such as creating files outside the destination directory. See tarfile extraction filters for details. In Python 3.14, the default will switch to'data'\n. (Contributed by Petr Viktorin in PEP 706.)types.MappingProxyType\ninstances are now hashable if the underlying mapping is hashable. (Contributed by Serhiy Storchaka in gh-87995.)Add support for the perf profiler through the new environment variable\nPYTHONPERFSUPPORT\nand command-line option-X perf\n, as well as the newsys.activate_stack_trampoline()\n,sys.deactivate_stack_trampoline()\n, andsys.is_stack_trampoline_active()\nfunctions. (Design by Pablo Galindo. Contributed by Pablo Galindo and Christian Heimes with contributions from Gregory P. Smith [Google] and Mark Shannon in gh-96123.)\nNew Modules\u00b6\nNone.\nImproved Modules\u00b6\narray\u00b6\nThe\narray.array\nclass now supports subscripting, making it a generic type. (Contributed by Jelle Zijlstra in gh-98658.)\nasyncio\u00b6\nThe performance of writing to sockets in\nasyncio\nhas been significantly improved.asyncio\nnow avoids unnecessary copying when writing to sockets and usessendmsg()\nif the platform supports it. (Contributed by Kumar Aditya in gh-91166.)Add\nasyncio.eager_task_factory()\nandasyncio.create_eager_task_factory()\nfunctions to allow opting an event loop in to eager task execution, making some use-cases 2x to 5x faster. (Contributed by Jacob Bower & Itamar Oren in gh-102853, gh-104140, and gh-104138)On Linux,\nasyncio\nusesasyncio.PidfdChildWatcher\nby default ifos.pidfd_open()\nis available and functional instead ofasyncio.ThreadedChildWatcher\n. (Contributed by Kumar Aditya in gh-98024.)The event loop now uses the best available child watcher for each platform (\nasyncio.PidfdChildWatcher\nif supported andasyncio.ThreadedChildWatcher\notherwise), so manually configuring a child watcher is not recommended. (Contributed by Kumar Aditya in gh-94597.)Add loop_factory parameter to\nasyncio.run()\nto allow specifying a custom event loop factory. (Contributed by Kumar Aditya in gh-99388.)Add C implementation of\nasyncio.current_task()\nfor 4x-6x speedup. (Contributed by Itamar Oren and Pranav Thulasiram Bhat in gh-100344.)asyncio.iscoroutine()\nnow returnsFalse\nfor generators asasyncio\ndoes not support legacy generator-based coroutines. (Contributed by Kumar Aditya in gh-102748.)asyncio.wait()\nandasyncio.as_completed()\nnow accepts generators yielding tasks. (Contributed by Kumar Aditya in gh-78530.)\ncalendar\u00b6\nAdd enums\ncalendar.Month\nandcalendar.Day\ndefining months of the year and days of the week. (Contributed by Prince Roshan in gh-103636.)\ncsv\u00b6\nAdd\ncsv.QUOTE_NOTNULL\nandcsv.QUOTE_STRINGS\nflags to provide finer grained control ofNone\nand empty strings byreader\nandwriter\nobjects.\ndis\u00b6\nPseudo instruction opcodes (which are used by the compiler but do not appear in executable bytecode) are now exposed in the\ndis\nmodule.HAVE_ARGUMENT\nis still relevant to real opcodes, but it is not useful for pseudo instructions. Use the newdis.hasarg\ncollection instead. (Contributed by Irit Katriel in gh-94216.)Add the\ndis.hasexc\ncollection to signify instructions that set an exception handler. (Contributed by Irit Katriel in gh-94216.)\nfractions\u00b6\nObjects of type\nfractions.Fraction\nnow support float-style formatting. (Contributed by Mark Dickinson in gh-100161.)\nimportlib.resources\u00b6\nimportlib.resources.as_file()\nnow supports resource directories. (Contributed by Jason R. Coombs in gh-97930.)Rename first parameter of\nimportlib.resources.files()\nto anchor. (Contributed by Jason R. Coombs in gh-100598.)\ninspect\u00b6\nAdd\ninspect.markcoroutinefunction()\nto mark sync functions that return a coroutine for use withinspect.iscoroutinefunction()\n. (Contributed by Carlton Gibson in gh-99247.)Add\ninspect.getasyncgenstate()\nandinspect.getasyncgenlocals()\nfor determining the current state of asynchronous generators. (Contributed by Thomas Krennwallner in gh-79940.)The performance of\ninspect.getattr_static()\nhas been considerably improved. Most calls to the function should be at least 2x faster than they were in Python 3.11. (Contributed by Alex Waygood in gh-103193.)\nitertools\u00b6\nAdd\nitertools.batched()\nfor collecting into even-sized tuples where the last batch may be shorter than the rest. (Contributed by Raymond Hettinger in gh-98363.)\nmath\u00b6\nAdd\nmath.sumprod()\nfor computing a sum of products. (Contributed by Raymond Hettinger in gh-100485.)Extend\nmath.nextafter()\nto include a steps argument for moving up or down multiple steps at a time. (Contributed by Matthias Goergens, Mark Dickinson, and Raymond Hettinger in gh-94906.)\nos\u00b6\nAdd\nos.PIDFD_NONBLOCK\nto open a file descriptor for a process withos.pidfd_open()\nin non-blocking mode. (Contributed by Kumar Aditya in gh-93312.)os.DirEntry\nnow includes anos.DirEntry.is_junction()\nmethod to check if the entry is a junction. (Contributed by Charles Machalow in gh-99547.)Add\nos.listdrives()\n,os.listvolumes()\nandos.listmounts()\nfunctions on Windows for enumerating drives, volumes and mount points. (Contributed by Steve Dower in gh-102519.)os.stat()\nandos.lstat()\nare now more accurate on Windows. Thest_birthtime\nfield will now be filled with the creation time of the file, andst_ctime\nis deprecated but still contains the creation time (but in the future will return the last metadata change, for consistency with other platforms).st_dev\nmay be up to 64 bits andst_ino\nup to 128 bits depending on your file system, andst_rdev\nis always set to zero rather than incorrect values. Both functions may be significantly faster on newer releases of Windows. (Contributed by Steve Dower in gh-99726.)\nos.path\u00b6\nAdd\nos.path.isjunction()\nto check if a given path is a junction. (Contributed by Charles Machalow in gh-99547.)Add\nos.path.splitroot()\nto split a path into a triad(drive, root, tail)\n. (Contributed by Barney Gale in gh-101000.)\npathlib\u00b6\nAdd support for subclassing\npathlib.PurePath\nandpathlib.Path\n, plus their Posix- and Windows-specific variants. Subclasses may override thepathlib.PurePath.with_segments()\nmethod to pass information between path instances.Add\npathlib.Path.walk()\nfor walking the directory trees and generating all file or directory names within them, similar toos.walk()\n. (Contributed by Stanislav Zmiev in gh-90385.)Add walk_up optional parameter to\npathlib.PurePath.relative_to()\nto allow the insertion of..\nentries in the result; this behavior is more consistent withos.path.relpath()\n. (Contributed by Domenico Ragusa in gh-84538.)Add\npathlib.Path.is_junction()\nas a proxy toos.path.isjunction()\n. (Contributed by Charles Machalow in gh-99547.)Add case_sensitive optional parameter to\npathlib.Path.glob()\n,pathlib.Path.rglob()\nandpathlib.PurePath.match()\nfor matching the path\u2019s case sensitivity, allowing for more precise control over the matching process.\npdb\u00b6\nAdd convenience variables to hold values temporarily for debug session and provide quick access to values like the current frame or the return value. (Contributed by Tian Gao in gh-103693.)\nrandom\u00b6\nAdd\nrandom.binomialvariate()\n. (Contributed by Raymond Hettinger in gh-81620.)Add a default of\nlambd=1.0\ntorandom.expovariate()\n. (Contributed by Raymond Hettinger in gh-100234.)\nshutil\u00b6\nshutil.make_archive()\nnow passes the root_dir argument to custom archivers which support it. In this case it no longer temporarily changes the current working directory of the process to root_dir to perform archiving. (Contributed by Serhiy Storchaka in gh-74696.)shutil.rmtree()\nnow accepts a new argument onexc which is an error handler like onerror but which expects an exception instance rather than a (typ, val, tb) triplet. onerror is deprecated. (Contributed by Irit Katriel in gh-102828.)shutil.which()\nnow consults the PATHEXT environment variable to find matches within PATH on Windows even when the given cmd includes a directory component. (Contributed by Charles Machalow in gh-103179.)shutil.which()\nwill callNeedCurrentDirectoryForExePathW\nwhen querying for executables on Windows to determine if the current working directory should be prepended to the search path. (Contributed by Charles Machalow in gh-103179.)shutil.which()\nwill return a path matching the cmd with a component fromPATHEXT\nprior to a direct match elsewhere in the search path on Windows. (Contributed by Charles Machalow in gh-103179.)\nsqlite3\u00b6\nAdd a command-line interface. (Contributed by Erlend E. Aasland in gh-77617.)\nAdd the\nsqlite3.Connection.autocommit\nattribute tosqlite3.Connection\nand the autocommit parameter tosqlite3.connect()\nto control PEP 249-compliant transaction handling. (Contributed by Erlend E. Aasland in gh-83638.)Add entrypoint keyword-only parameter to\nsqlite3.Connection.load_extension()\n, for overriding the SQLite extension entry point. (Contributed by Erlend E. Aasland in gh-103015.)Add\nsqlite3.Connection.getconfig()\nandsqlite3.Connection.setconfig()\ntosqlite3.Connection\nto make configuration changes to a database connection. (Contributed by Erlend E. Aasland in gh-103489.)\nstatistics\u00b6\nExtend\nstatistics.correlation()\nto include as aranked\nmethod for computing the Spearman correlation of ranked data. (Contributed by Raymond Hettinger in gh-95861.)\nsys\u00b6\nAdd the\nsys.monitoring\nnamespace to expose the new PEP 669 monitoring API. (Contributed by Mark Shannon in gh-103082.)Add\nsys.activate_stack_trampoline()\nandsys.deactivate_stack_trampoline()\nfor activating and deactivating stack profiler trampolines, andsys.is_stack_trampoline_active()\nfor querying if stack profiler trampolines are active. (Contributed by Pablo Galindo and Christian Heimes with contributions from Gregory P. Smith [Google] and Mark Shannon in gh-96123.)Add\nsys.last_exc\nwhich holds the last unhandled exception that was raised (for post-mortem debugging use cases). Deprecate the three fields that have the same information in its legacy form:sys.last_type\n,sys.last_value\nandsys.last_traceback\n. (Contributed by Irit Katriel in gh-102778.)sys._current_exceptions()\nnow returns a mapping from thread-id to an exception instance, rather than to a(typ, exc, tb)\ntuple. (Contributed by Irit Katriel in gh-103176.)sys.setrecursionlimit()\nandsys.getrecursionlimit()\n. The recursion limit now applies only to Python code. Builtin functions do not use the recursion limit, but are protected by a different mechanism that prevents recursion from causing a virtual machine crash.\ntempfile\u00b6\nThe\ntempfile.NamedTemporaryFile\nfunction has a new optional parameter delete_on_close (Contributed by Evgeny Zorin in gh-58451.)tempfile.mkdtemp()\nnow always returns an absolute path, even if the argument provided to the dir parameter is a relative path.\nthreading\u00b6\nAdd\nthreading.settrace_all_threads()\nandthreading.setprofile_all_threads()\nthat allow to set tracing and profiling functions in all running threads in addition to the calling one. (Contributed by Pablo Galindo in gh-93503.)\ntkinter\u00b6\ntkinter.Canvas.coords()\nnow flattens its arguments. It now accepts not only coordinates as separate arguments (x1, y1, x2, y2, ...\n) and a sequence of coordinates ([x1, y1, x2, y2, ...]\n), but also coordinates grouped in pairs ((x1, y1), (x2, y2), ...\nand[(x1, y1), (x2, y2), ...]\n), likecreate_*()\nmethods. (Contributed by Serhiy Storchaka in gh-94473.)\ntokenize\u00b6\nThe\ntokenize\nmodule includes the changes introduced in PEP 701. (Contributed by Marta G\u00f3mez Mac\u00edas and Pablo Galindo in gh-102856.) See Porting to Python 3.12 for more information on the changes to thetokenize\nmodule.\ntypes\u00b6\nAdd\ntypes.get_original_bases()\nto allow for further introspection of User-defined generic types when subclassed. (Contributed by James Hilton-Balfe and Alex Waygood in gh-101827.)\ntyping\u00b6\nisinstance()\nchecks againstruntime-checkable protocols\nnow useinspect.getattr_static()\nrather thanhasattr()\nto lookup whether attributes exist. This means that descriptors and__getattr__()\nmethods are no longer unexpectedly evaluated duringisinstance()\nchecks against runtime-checkable protocols. However, it may also mean that some objects which used to be considered instances of a runtime-checkable protocol may no longer be considered instances of that protocol on Python 3.12+, and vice versa. Most users are unlikely to be affected by this change. (Contributed by Alex Waygood in gh-102433.)The members of a runtime-checkable protocol are now considered \u201cfrozen\u201d at runtime as soon as the class has been created. Monkey-patching attributes onto a runtime-checkable protocol will still work, but will have no impact on\nisinstance()\nchecks comparing objects to the protocol. For example:>>> from typing import Protocol, runtime_checkable >>> @runtime_checkable ... class HasX(Protocol): ... x = 1 ... >>> class Foo: ... ... >>> f = Foo() >>> isinstance(f, HasX) False >>> f.x = 1 >>> isinstance(f, HasX) True >>> HasX.y = 2 >>> isinstance(f, HasX) # unchanged, even though HasX now also has a \"y\" attribute True\nThis change was made in order to speed up\nisinstance()\nchecks against runtime-checkable protocols.The performance profile of\nisinstance()\nchecks againstruntime-checkable protocols\nhas changed significantly. Mostisinstance()\nchecks against protocols with only a few members should be at least 2x faster than in 3.11, and some may be 20x faster or more. However,isinstance()\nchecks against protocols with many members may be slower than in Python 3.11. (Contributed by Alex Waygood in gh-74690 and gh-103193.)All\ntyping.TypedDict\nandtyping.NamedTuple\nclasses now have the__orig_bases__\nattribute. (Contributed by Adrian Garcia Badaracco in gh-103699.)Add\nfrozen_default\nparameter totyping.dataclass_transform()\n. (Contributed by Erik De Bonte in gh-99957.)\nunicodedata\u00b6\nThe Unicode database has been updated to version 15.0.0. (Contributed by Benjamin Peterson in gh-96734).\nunittest\u00b6\nAdd a --durations\ncommand line option, showing the N slowest test cases:\npython3 -m unittest --durations=3 lib.tests.test_threading\n.....\nSlowest test durations\n----------------------------------------------------------------------\n1.210s test_timeout (Lib.test.test_threading.BarrierTests)\n1.003s test_default_timeout (Lib.test.test_threading.BarrierTests)\n0.518s test_timeout (Lib.test.test_threading.EventTests)\n(0.000 durations hidden. Use -v to show these durations.)\n----------------------------------------------------------------------\nRan 158 tests in 9.869s\nOK (skipped=3)\n(Contributed by Giampaolo Rodola in gh-48330)\nuuid\u00b6\nAdd a command-line interface. (Contributed by Adam Chhina in gh-88597.)\nOptimizations\u00b6\nRemove\nwstr\nandwstr_length\nmembers from Unicode objects. It reduces object size by 8 or 16 bytes on 64bit platform. (PEP 623) (Contributed by Inada Naoki in gh-92536.)Add experimental support for using the BOLT binary optimizer in the build process, which improves performance by 1-5%. (Contributed by Kevin Modzelewski in gh-90536 and tuned by Donghee Na in gh-101525)\nSpeed up the regular expression substitution (functions\nre.sub()\nandre.subn()\nand correspondingre.Pattern\nmethods) for replacement strings containing group references by 2\u20133 times. (Contributed by Serhiy Storchaka in gh-91524.)Speed up\nasyncio.Task\ncreation by deferring expensive string formatting. (Contributed by Itamar Oren in gh-103793.)The\ntokenize.tokenize()\nandtokenize.generate_tokens()\nfunctions are up to 64% faster as a side effect of the changes required to cover PEP 701 in thetokenize\nmodule. (Contributed by Marta G\u00f3mez Mac\u00edas and Pablo Galindo in gh-102856.)Speed up\nsuper()\nmethod calls and attribute loads via the newLOAD_SUPER_ATTR\ninstruction. (Contributed by Carl Meyer and Vladimir Matveev in gh-103497.)\nCPython bytecode changes\u00b6\nRemove the\nLOAD_METHOD\ninstruction. It has been merged intoLOAD_ATTR\n.LOAD_ATTR\nwill now behave like the oldLOAD_METHOD\ninstruction if the low bit of its oparg is set. (Contributed by Ken Jin in gh-93429.)Remove the\nJUMP_IF_FALSE_OR_POP\nandJUMP_IF_TRUE_OR_POP\ninstructions. (Contributed by Irit Katriel in gh-102859.)Remove the\nPRECALL\ninstruction. (Contributed by Mark Shannon in gh-92925.)Add the\nBINARY_SLICE\nandSTORE_SLICE\ninstructions. (Contributed by Mark Shannon in gh-94163.)Add the\nCALL_INTRINSIC_1\ninstructions. (Contributed by Mark Shannon in gh-99005.)Add the\nCALL_INTRINSIC_2\ninstruction. (Contributed by Irit Katriel in gh-101799.)Add the\nCLEANUP_THROW\ninstruction. (Contributed by Brandt Bucher in gh-90997.)Add the\nEND_SEND\ninstruction. (Contributed by Mark Shannon in gh-103082.)Add the\nLOAD_FAST_AND_CLEAR\ninstruction as part of the implementation of PEP 709. (Contributed by Carl Meyer in gh-101441.)Add the\nLOAD_FAST_CHECK\ninstruction. (Contributed by Dennis Sweeney in gh-93143.)Add the\nLOAD_FROM_DICT_OR_DEREF\n,LOAD_FROM_DICT_OR_GLOBALS\n, andLOAD_LOCALS\nopcodes as part of the implementation of PEP 695. Remove theLOAD_CLASSDEREF\nopcode, which can be replaced withLOAD_LOCALS\nplusLOAD_FROM_DICT_OR_DEREF\n. (Contributed by Jelle Zijlstra in gh-103764.)Add the\nLOAD_SUPER_ATTR\ninstruction. (Contributed by Carl Meyer and Vladimir Matveev in gh-103497.)Add the\nRETURN_CONST\ninstruction. (Contributed by Wenyang Wang in gh-101632.)\nDemos and Tools\u00b6\nRemove the\nTools/demo/\ndirectory which contained old demo scripts. A copy can be found in the old-demos project. (Contributed by Victor Stinner in gh-97681.)Remove outdated example scripts of the\nTools/scripts/\ndirectory. A copy can be found in the old-demos project. (Contributed by Victor Stinner in gh-97669.)\nDeprecated\u00b6\nargparse\n: The type, choices, and metavar parameters ofargparse.BooleanOptionalAction\nare deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)ast\n: The followingast\nfeatures have been deprecated in documentation since Python 3.8, now cause aDeprecationWarning\nto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:ast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead. (Contributed by Serhiy Storchaka in gh-90953.)-\nThe child watcher classes\nasyncio.MultiLoopChildWatcher\n,asyncio.FastChildWatcher\n,asyncio.AbstractChildWatcher\nandasyncio.SafeChildWatcher\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)asyncio.set_child_watcher()\n,asyncio.get_child_watcher()\n,asyncio.AbstractEventLoopPolicy.set_child_watcher()\nandasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)The\nget_event_loop()\nmethod of the default event loop policy now emits aDeprecationWarning\nif there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in gh-100160.)\ncalendar\n:calendar.January\nandcalendar.February\nconstants are deprecated and replaced bycalendar.JANUARY\nandcalendar.FEBRUARY\n. (Contributed by Prince Roshan in gh-103636.)collections.abc\n: Deprecatedcollections.abc.ByteString\n. PreferSequence\norcollections.abc.Buffer\n. For use in typing, prefer a union, likebytes | bytearray\n, orcollections.abc.Buffer\n. (Contributed by Shantanu Jain in gh-91896.)datetime\n:datetime.datetime\n\u2019sutcnow()\nandutcfromtimestamp()\nare deprecated and will be removed in a future version. Instead, use timezone-aware objects to represent datetimes in UTC: respectively, callnow()\nandfromtimestamp()\nwith the tz parameter set todatetime.UTC\n. (Contributed by Paul Ganssle in gh-103857.)email\n: Deprecate the isdst parameter inemail.utils.localtime()\n. (Contributed by Alan Williams in gh-72346.)importlib.abc\n: Deprecated the following classes, scheduled for removal in Python 3.14:importlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)\nitertools\n: Deprecate the support for copy, deepcopy, and pickle operations, which is undocumented, inefficient, historically buggy, and inconsistent. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)multiprocessing\n: In Python 3.14, the defaultmultiprocessing\nstart method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where'fork'\nis currently the default (gh-84559). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use theget_context()\norset_start_method()\nAPIs to explicitly specify when your code requires'fork'\n. See contexts and start methods.pkgutil\n:pkgutil.find_loader()\nandpkgutil.get_loader()\nare deprecated and will be removed in Python 3.14; useimportlib.util.find_spec()\ninstead. (Contributed by Nikita Sobolev in gh-97850.)pty\n: The module has two undocumentedmaster_open()\nandslave_open()\nfunctions that have been deprecated since Python 2 but only gained a properDeprecationWarning\nin 3.12. Remove them in 3.14. (Contributed by Soumendra Ganguly and Gregory P. Smith in gh-85984.)os\n:The\nst_ctime\nfields return byos.stat()\nandos.lstat()\non Windows are deprecated. In a future release, they will contain the last metadata change time, consistent with other platforms. For now, they still contain the creation time, which is also available in the newst_birthtime\nfield. (Contributed by Steve Dower in gh-99726.)On POSIX platforms,\nos.fork()\ncan now raise aDeprecationWarning\nwhen it can detect being called from a multithreaded process. There has always been a fundamental incompatibility with the POSIX platform when doing so. Even if such code appeared to work. We added the warning to raise awareness as issues encountered by code doing this are becoming more frequent. See theos.fork()\ndocumentation for more details along with this discussion on fork being incompatible with threads for why we\u2019re now surfacing this longstanding platform compatibility problem to developers.\nWhen this warning appears due to usage of\nmultiprocessing\norconcurrent.futures\nthe fix is to use a differentmultiprocessing\nstart method such as\"spawn\"\nor\"forkserver\"\n.shutil\n: The onerror argument ofshutil.rmtree()\nis deprecated; use onexc instead. (Contributed by Irit Katriel in gh-102828.)-\ndefault adapters and converters are now deprecated. Instead, use the Adapter and converter recipes and tailor them to your needs. (Contributed by Erlend E. Aasland in gh-90016.)\nIn\nexecute()\n,DeprecationWarning\nis now emitted when named placeholders are used together with parameters supplied as a sequence instead of as adict\n. Starting from Python 3.14, using named placeholders with parameters supplied as a sequence will raise aProgrammingError\n. (Contributed by Erlend E. Aasland in gh-101698.)\nsys\n: Thesys.last_type\n,sys.last_value\nandsys.last_traceback\nfields are deprecated. Usesys.last_exc\ninstead. (Contributed by Irit Katriel in gh-102778.)tarfile\n: Extracting tar archives without specifying filter is deprecated until Python 3.14, when'data'\nfilter will become the default. See Extraction filters for details.-\ntyping.Hashable\nandtyping.Sized\n, aliases forcollections.abc.Hashable\nandcollections.abc.Sized\nrespectively, are deprecated. (gh-94309.)typing.ByteString\n, deprecated since Python 3.9, now causes aDeprecationWarning\nto be emitted when it is used. (Contributed by Alex Waygood in gh-91896.)\nxml.etree.ElementTree\n: The module now emitsDeprecationWarning\nwhen testing the truth value of anxml.etree.ElementTree.Element\n. Before, the Python implementation emittedFutureWarning\n, and the C implementation emitted nothing. (Contributed by Jacob Walls in gh-83122.)The 3-arg signatures (type, value, traceback) of\ncoroutine throw()\n,generator throw()\nandasync generator throw()\nare deprecated and may be removed in a future version of Python. Use the single-arg versions of these functions instead. (Contributed by Ofey Chan in gh-89874.)DeprecationWarning\nis now raised when__package__\non a module differs from__spec__.parent\n(previously it wasImportWarning\n). (Contributed by Brett Cannon in gh-65961.)Setting\n__package__\nor__cached__\non a module is deprecated, and will cease to be set or taken into consideration by the import system in Python 3.14. (Contributed by Brett Cannon in gh-65961.)The bitwise inversion operator (\n~\n) on bool is deprecated. It will throw an error in Python 3.16. Usenot\nfor logical negation of bools instead. In the rare case that you really need the bitwise inversion of the underlyingint\n, convert to int explicitly:~int(x)\n. (Contributed by Tim Hoffmann in gh-103487.)Accessing\nco_lnotab\non code objects was deprecated in Python 3.10 via PEP 626, but it only got a properDeprecationWarning\nin 3.12. May be removed in 3.15. (Contributed by Nikita Sobolev in gh-101866.)\nPending Removal in Python 3.13\u00b6\nModules (see PEP 594):\naifc\naudioop\ncgi\ncgitb\nchunk\ncrypt\nimghdr\nmailcap\nmsilib\nnis\nnntplib\nossaudiodev\npipes\nsndhdr\nspwd\nsunau\ntelnetlib\nuu\nxdrlib\nOther modules:\nlib2to3\n, and the 2to3 program (gh-84540)\nAPIs:\nconfigparser.LegacyInterpolation\n(gh-90765)locale.resetlocale()\n(gh-90817)turtle.RawTurtle.settiltangle()\n(gh-50096)unittest.findTestCases()\n(gh-50096)unittest.getTestCaseNames()\n(gh-50096)unittest.makeSuite()\n(gh-50096)unittest.TestProgram.usageExit()\n(gh-67048)webbrowser.MacOSX\n(gh-86421)classmethod\ndescriptor chaining (gh-89519)importlib.resources\ndeprecated methods:contents()\nis_resource()\nopen_binary()\nopen_text()\npath()\nread_binary()\nread_text()\nUse\nimportlib.resources.files()\ninstead. Refer to importlib-resources: Migrating from Legacy (gh-106531)\nPending Removal in Python 3.14\u00b6\nargparse\n: The type, choices, and metavar parameters ofargparse.BooleanOptionalAction\nare deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)ast\n: The following features have been deprecated in documentation since Python 3.8, now cause aDeprecationWarning\nto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:ast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead. (Contributed by Serhiy Storchaka in gh-90953.)-\nThe child watcher classes\nMultiLoopChildWatcher\n,FastChildWatcher\n,AbstractChildWatcher\nandSafeChildWatcher\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)asyncio.set_child_watcher()\n,asyncio.get_child_watcher()\n,asyncio.AbstractEventLoopPolicy.set_child_watcher()\nandasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)The\nget_event_loop()\nmethod of the default event loop policy now emits aDeprecationWarning\nif there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in gh-100160.)\ncollections.abc\n: DeprecatedByteString\n. PreferSequence\norBuffer\n. For use in typing, prefer a union, likebytes | bytearray\n, orcollections.abc.Buffer\n. (Contributed by Shantanu Jain in gh-91896.)email\n: Deprecated the isdst parameter inemail.utils.localtime()\n. (Contributed by Alan Williams in gh-72346.)importlib.abc\ndeprecated classes:importlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)\nitertools\nhad undocumented, inefficient, historically buggy, and inconsistent support for copy, deepcopy, and pickle operations. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)multiprocessing\n: The default start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where'fork'\nis currently the default (gh-84559). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use theget_context()\norset_start_method()\nAPIs to explicitly specify when your code requires'fork'\n. See Contexts and start methods.pathlib\n:is_relative_to()\nandrelative_to()\n: passing additional arguments is deprecated.pkgutil\n:find_loader()\nandget_loader()\nnow raiseDeprecationWarning\n; useimportlib.util.find_spec()\ninstead. (Contributed by Nikita Sobolev in gh-97850.)pty\n:master_open()\n: usepty.openpty()\n.slave_open()\n: usepty.openpty()\n.\n-\nversion\nandversion_info\n.execute()\nandexecutemany()\nif named placeholders are used and parameters is a sequence instead of adict\n.\ntyping\n:ByteString\n, deprecated since Python 3.9, now causes aDeprecationWarning\nto be emitted when it is used.urllib\n:urllib.parse.Quoter\nis deprecated: it was not intended to be a public API. (Contributed by Gregory P. Smith in gh-88168.)\nPending Removal in Python 3.15\u00b6\nThe import system:\nSetting\n__cached__\non a module while failing to set__spec__.cached\nis deprecated. In Python 3.15,__cached__\nwill cease to be set or take into consideration by the import system or standard library. (gh-97879)Setting\n__package__\non a module while failing to set__spec__.parent\nis deprecated. In Python 3.15,__package__\nwill cease to be set or take into consideration by the import system or standard library. (gh-97879)\n-\nThe undocumented\nctypes.SetPointerType()\nfunction has been deprecated since Python 3.13.\n-\nThe obsolete and rarely used\nCGIHTTPRequestHandler\nhas been deprecated since Python 3.13. No direct replacement exists. Anything is better than CGI to interface a web server with a request handler.The\n--cgi\nflag to the python -m http.server command-line interface has been deprecated since Python 3.13.\n-\nThe\ngetdefaultlocale()\nfunction has been deprecated since Python 3.11. Its removal was originally planned for Python 3.13 (gh-90817), but has been postponed to Python 3.15. Usegetlocale()\n,setlocale()\n, andgetencoding()\ninstead. (Contributed by Hugo van Kemenade in gh-111187.)\n-\nPurePath.is_reserved()\nhas been deprecated since Python 3.13. Useos.path.isreserved()\nto detect reserved paths on Windows.\n-\njava_ver()\nhas been deprecated since Python 3.13. This function is only useful for Jython support, has a confusing API, and is largely untested.\n-\nRLock()\nwill take no arguments in Python 3.15. Passing any arguments has been deprecated since Python 3.14, as the Python version does not permit any arguments, but the C version allows any number of positional or keyword arguments, ignoring every argument.\n-\ntypes.CodeType\n: Accessingco_lnotab\nwas deprecated in PEP 626 since 3.10 and was planned to be removed in 3.12, but it only got a properDeprecationWarning\nin 3.12. May be removed in 3.15. (Contributed by Nikita Sobolev in gh-101866.)\n-\nThe undocumented keyword argument syntax for creating\nNamedTuple\nclasses (e.g.Point = NamedTuple(\"Point\", x=int, y=int)\n) has been deprecated since Python 3.13. Use the class-based syntax or the functional syntax instead.The\ntyping.no_type_check_decorator()\ndecorator function has been deprecated since Python 3.13. After eight years in thetyping\nmodule, it has yet to be supported by any major type checker.\nwave\n:The\ngetmark()\n,setmark()\n, andgetmarkers()\nmethods of theWave_read\nandWave_write\nclasses have been deprecated since Python 3.13.\nPending removal in Python 3.16\u00b6\nThe import system:\nSetting\n__loader__\non a module while failing to set__spec__.loader\nis deprecated. In Python 3.16,__loader__\nwill cease to be set or taken into consideration by the import system or the standard library.\n-\nThe\n'u'\nformat code (wchar_t\n) has been deprecated in documentation since Python 3.3 and at runtime since Python 3.13. Use the'w'\nformat code (Py_UCS4\n) for Unicode characters instead.\n-\nasyncio.iscoroutinefunction()\nis deprecated and will be removed in Python 3.16, useinspect.iscoroutinefunction()\ninstead. (Contributed by Jiahao Li and Kumar Aditya in gh-122875.)\n-\nBitwise inversion on boolean types,\n~True\nor~False\nhas been deprecated since Python 3.12, as it produces surprising and unintuitive results (-2\nand-1\n). Usenot x\ninstead for the logical negation of a Boolean. In the rare case that you need the bitwise inversion of the underlying integer, convert toint\nexplicitly (~int(x)\n).\n-\nThe\nExecError\nexception has been deprecated since Python 3.14. It has not been used by any function inshutil\nsince Python 3.4, and is now an alias ofRuntimeError\n.\n-\nThe\nClass.get_methods\nmethod has been deprecated since Python 3.14.\nsys\n:The\n_enablelegacywindowsfsencoding()\nfunction has been deprecated since Python 3.13. Use thePYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead.\n-\nThe undocumented and unused\nTarFile.tarfile\nattribute has been deprecated since Python 3.13.\nPending Removal in Future Versions\u00b6\nThe following APIs will be removed in the future, although there is currently no date scheduled for their removal.\nargparse\n: Nesting argument groups and nesting mutually exclusive groups are deprecated.-\nbool(NotImplemented)\n.Generators:\nthrow(type, exc, tb)\nandathrow(type, exc, tb)\nsignature is deprecated: usethrow(exc)\nandathrow(exc)\ninstead, the single argument signature.Currently Python accepts numeric literals immediately followed by keywords, for example\n0in x\n,1or x\n,0if 1else 2\n. It allows confusing and ambiguous expressions like[0x1for x in y]\n(which can be interpreted as[0x1 for x in y]\nor[0x1f or x in y]\n). A syntax warning is raised if the numeric literal is immediately followed by one of keywordsand\n,else\n,for\n,if\n,in\n,is\nandor\n. In a future release it will be changed to a syntax error. (gh-87999)Support for\n__index__()\nand__int__()\nmethod returning non-int type: these methods will be required to return an instance of a strict subclass ofint\n.Support for\n__float__()\nmethod returning a strict subclass offloat\n: these methods will be required to return an instance offloat\n.Support for\n__complex__()\nmethod returning a strict subclass ofcomplex\n: these methods will be required to return an instance ofcomplex\n.Delegation of\nint()\nto__trunc__()\nmethod.Passing a complex number as the real or imag argument in the\ncomplex()\nconstructor is now deprecated; it should only be passed as a single positional argument. (Contributed by Serhiy Storchaka in gh-109218.)\ncalendar\n:calendar.January\nandcalendar.February\nconstants are deprecated and replaced bycalendar.JANUARY\nandcalendar.FEBRUARY\n. (Contributed by Prince Roshan in gh-103636.)codeobject.co_lnotab\n: use thecodeobject.co_lines()\nmethod instead.-\nutcnow()\n: usedatetime.datetime.now(tz=datetime.UTC)\n.utcfromtimestamp()\n: usedatetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)\n.\ngettext\n: Plural value must be an integer.-\nload_module()\nmethod: useexec_module()\ninstead.cache_from_source()\ndebug_override parameter is deprecated: use the optimization parameter instead.\n-\nEntryPoints\ntuple interface.Implicit\nNone\non return values.\nlogging\n: thewarn()\nmethod has been deprecated since Python 3.3, usewarning()\ninstead.mailbox\n: Use of StringIO input and text mode is deprecated, use BytesIO and binary mode instead.os\n: Callingos.register_at_fork()\nin multi-threaded process.pydoc.ErrorDuringImport\n: A tuple value for exc_info parameter is deprecated, use an exception instance.re\n: More strict rules are now applied for numerical group references and group names in regular expressions. Only sequence of ASCII digits is now accepted as a numerical reference. The group name in bytes patterns and replacement strings can now only contain ASCII letters and digits and underscore. (Contributed by Serhiy Storchaka in gh-91760.)sre_compile\n,sre_constants\nandsre_parse\nmodules.shutil\n:rmtree()\n\u2019s onerror parameter is deprecated in Python 3.12; use the onexc parameter instead.ssl\noptions and protocols:ssl.SSLContext\nwithout protocol argument is deprecated.ssl.SSLContext\n:set_npn_protocols()\nandselected_npn_protocol()\nare deprecated: use ALPN instead.ssl.OP_NO_SSL*\noptionsssl.OP_NO_TLS*\noptionsssl.PROTOCOL_SSLv3\nssl.PROTOCOL_TLS\nssl.PROTOCOL_TLSv1\nssl.PROTOCOL_TLSv1_1\nssl.PROTOCOL_TLSv1_2\nssl.TLSVersion.SSLv3\nssl.TLSVersion.TLSv1\nssl.TLSVersion.TLSv1_1\nsysconfig.is_python_build()\ncheck_home parameter is deprecated and ignored.threading\nmethods:threading.Condition.notifyAll()\n: usenotify_all()\n.threading.Event.isSet()\n: useis_set()\n.threading.Thread.isDaemon()\n,threading.Thread.setDaemon()\n: usethreading.Thread.daemon\nattribute.threading.Thread.getName()\n,threading.Thread.setName()\n: usethreading.Thread.name\nattribute.threading.currentThread()\n: usethreading.current_thread()\n.threading.activeCount()\n: usethreading.active_count()\n.\nunittest.IsolatedAsyncioTestCase\n: it is deprecated to return a value that is notNone\nfrom a test case.urllib.parse\ndeprecated functions:urlparse()\ninsteadsplitattr()\nsplithost()\nsplitnport()\nsplitpasswd()\nsplitport()\nsplitquery()\nsplittag()\nsplittype()\nsplituser()\nsplitvalue()\nto_bytes()\nurllib.request\n:URLopener\nandFancyURLopener\nstyle of invoking requests is deprecated. Use newerurlopen()\nfunctions and methods.wsgiref\n:SimpleHandler.stdout.write()\nshould not do partial writes.xml.etree.ElementTree\n: Testing the truth value of anElement\nis deprecated. In a future release it will always returnTrue\n. Prefer explicitlen(elem)\norelem is not None\ntests instead.zipimport.zipimporter.load_module()\nis deprecated: useexec_module()\ninstead.\nRemoved\u00b6\nasynchat and asyncore\u00b6\nconfigparser\u00b6\nSeveral names deprecated in the\nconfigparser\nway back in 3.2 have been removed per gh-89336:configparser.ParsingError\nno longer has afilename\nattribute or argument. Use thesource\nattribute and argument instead.configparser\nno longer has aSafeConfigParser\nclass. Use the shorterConfigParser\nname instead.configparser.ConfigParser\nno longer has areadfp\nmethod. Useread_file()\ninstead.\ndistutils\u00b6\nensurepip\u00b6\nRemove the bundled setuptools wheel from\nensurepip\n, and stop installing setuptools in environments created byvenv\n.pip (>= 22.1)\ndoes not require setuptools to be installed in the environment.setuptools\n-based (anddistutils\n-based) packages can still be used withpip install\n, since pip will providesetuptools\nin the build environment it uses for building a package.easy_install\n,pkg_resources\n,setuptools\nanddistutils\nare no longer provided by default in environments created withvenv\nor bootstrapped withensurepip\n, since they are part of thesetuptools\npackage. For projects relying on these at runtime, thesetuptools\nproject should be declared as a dependency and installed separately (typically, using pip).(Contributed by Pradyun Gedam in gh-95299.)\nenum\u00b6\nftplib\u00b6\ngzip\u00b6\nRemove the\nfilename\nattribute ofgzip\n\u2019sgzip.GzipFile\n, deprecated since Python 2.6, use thename\nattribute instead. In write mode, thefilename\nattribute added'.gz'\nfile extension if it was not present. (Contributed by Victor Stinner in gh-94196.)\nhashlib\u00b6\nRemove the pure Python implementation of\nhashlib\n\u2019shashlib.pbkdf2_hmac()\n, deprecated in Python 3.10. Python 3.10 and newer requires OpenSSL 1.1.1 (PEP 644): this OpenSSL version provides a C implementation ofpbkdf2_hmac()\nwhich is faster. (Contributed by Victor Stinner in gh-94199.)\nimportlib\u00b6\nMany previously deprecated cleanups in\nimportlib\nhave now been completed:References to, and support for\nmodule_repr()\nhas been removed. (Contributed by Barry Warsaw in gh-97850.)importlib.util.set_package\n,importlib.util.set_loader\nandimportlib.util.module_for_loader\nhave all been removed. (Contributed by Brett Cannon and Nikita Sobolev in gh-65961 and gh-97850.)Support for\nfind_loader()\nandfind_module()\nAPIs have been removed. (Contributed by Barry Warsaw in gh-98040.)importlib.abc.Finder\n,pkgutil.ImpImporter\n, andpkgutil.ImpLoader\nhave been removed. (Contributed by Barry Warsaw in gh-98040.)\nimp\u00b6\nThe\nimp\nmodule has been removed. (Contributed by Barry Warsaw in gh-98040.)To migrate, consult the following correspondence table:\nimp\nimportlib\nimp.NullImporter\nInsert\nNone\nintosys.path_importer_cache\nimp.cache_from_source()\nimp.find_module()\nimp.get_magic()\nimp.get_suffixes()\nimportlib.machinery.SOURCE_SUFFIXES\n,importlib.machinery.EXTENSION_SUFFIXES\n, andimportlib.machinery.BYTECODE_SUFFIXES\nimp.get_tag()\nimp.load_module()\nimp.new_module(name)\ntypes.ModuleType(name)\nimp.reload()\nimp.source_from_cache()\nimp.load_source()\nSee below\nReplace\nimp.load_source()\nwith:import importlib.util import importlib.machinery def load_source(modname, filename): loader = importlib.machinery.SourceFileLoader(modname, filename) spec = importlib.util.spec_from_file_location(modname, filename, loader=loader) module = importlib.util.module_from_spec(spec) # The module is always executed and not cached in sys.modules. # Uncomment the following line to cache the module. # sys.modules[module.__name__] = module loader.exec_module(module) return module\nRemove\nimp\nfunctions and attributes with no replacements:Undocumented functions:\nimp.init_builtin()\nimp.load_compiled()\nimp.load_dynamic()\nimp.load_package()\nimp.lock_held()\n,imp.acquire_lock()\n,imp.release_lock()\n: the locking scheme has changed in Python 3.3 to per-module locks.imp.find_module()\nconstants:SEARCH_ERROR\n,PY_SOURCE\n,PY_COMPILED\n,C_EXTENSION\n,PY_RESOURCE\n,PKG_DIRECTORY\n,C_BUILTIN\n,PY_FROZEN\n,PY_CODERESOURCE\n,IMP_HOOK\n.\nio\u00b6\nlocale\u00b6\nRemove\nlocale\n\u2019slocale.format()\nfunction, deprecated in Python 3.7: uselocale.format_string()\ninstead. (Contributed by Victor Stinner in gh-94226.)\nsmtpd\u00b6\nsqlite3\u00b6\nThe following undocumented\nsqlite3\nfeatures, deprecated in Python 3.10, are now removed:sqlite3.enable_shared_cache()\nsqlite3.OptimizedUnicode\nIf a shared cache must be used, open the database in URI mode using the\ncache=shared\nquery parameter.The\nsqlite3.OptimizedUnicode\ntext factory has been an alias forstr\nsince Python 3.3. Code that previously set the text factory toOptimizedUnicode\ncan either usestr\nexplicitly, or rely on the default value which is alsostr\n.(Contributed by Erlend E. Aasland in gh-92548.)\nssl\u00b6\nRemove\nssl\n\u2019sssl.RAND_pseudo_bytes()\nfunction, deprecated in Python 3.6: useos.urandom()\norssl.RAND_bytes()\ninstead. (Contributed by Victor Stinner in gh-94199.)Remove the\nssl.match_hostname()\nfunction. It was deprecated in Python 3.7. OpenSSL performs hostname matching since Python 3.7, Python no longer uses thessl.match_hostname()\nfunction. (Contributed by Victor Stinner in gh-94199.)Remove the\nssl.wrap_socket()\nfunction, deprecated in Python 3.7: instead, create assl.SSLContext\nobject and call itsssl.SSLContext.wrap_socket\nmethod. Any package that still usesssl.wrap_socket()\nis broken and insecure. The function neither sends a SNI TLS extension nor validates the server hostname. Code is subject to CWE 295 (Improper Certificate Validation). (Contributed by Victor Stinner in gh-94199.)\nunittest\u00b6\nRemove many long-deprecated\nunittest\nfeatures:A number of\nTestCase\nmethod aliases:Deprecated alias\nMethod Name\nDeprecated in\nfailUnless\n3.1\nfailIf\n3.1\nfailUnlessEqual\n3.1\nfailIfEqual\n3.1\nfailUnlessAlmostEqual\n3.1\nfailIfAlmostEqual\n3.1\nfailUnlessRaises\n3.1\nassert_\n3.2\nassertEquals\n3.2\nassertNotEquals\n3.2\nassertAlmostEquals\n3.2\nassertNotAlmostEquals\n3.2\nassertRegexpMatches\n3.2\nassertRaisesRegexp\n3.2\nassertNotRegexpMatches\n3.5\nYou can use https://github.com/isidentical/teyit to automatically modernise your unit tests.\nUndocumented and broken\nTestCase\nmethodassertDictContainsSubset\n(deprecated in Python 3.2).Undocumented\nTestLoader.loadTestsFromModule\nparameter use_load_tests (deprecated and ignored since Python 3.5).An alias of the\nTextTestResult\nclass:_TextTestResult\n(deprecated in Python 3.2).\n(Contributed by Serhiy Storchaka in gh-89325.)\nwebbrowser\u00b6\nRemove support for obsolete browsers from\nwebbrowser\n. The removed browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, Firebird, and Firefox versions 35 and below (gh-102871).\nxml.etree.ElementTree\u00b6\nRemove the\nElementTree.Element.copy()\nmethod of the pure Python implementation, deprecated in Python 3.10, use thecopy.copy()\nfunction instead. The C implementation ofxml.etree.ElementTree\nhas nocopy()\nmethod, only a__copy__()\nmethod. (Contributed by Victor Stinner in gh-94383.)\nzipimport\u00b6\nOthers\u00b6\nRemove the\nsuspicious\nrule from the documentationMakefile\nandDoc/tools/rstlint.py\n, both in favor of sphinx-lint. (Contributed by Julien Palard in gh-98179.)Remove the keyfile and certfile parameters from the\nftplib\n,imaplib\n,poplib\nandsmtplib\nmodules, and the key_file, cert_file and check_hostname parameters from thehttp.client\nmodule, all deprecated since Python 3.6. Use the context parameter (ssl_context inimaplib\n) instead. (Contributed by Victor Stinner in gh-94172.)Remove\nJython\ncompatibility hacks from several stdlib modules and tests. (Contributed by Nikita Sobolev in gh-99482.)Remove\n_use_broken_old_ctypes_structure_semantics_\nflag fromctypes\nmodule. (Contributed by Nikita Sobolev in gh-99285.)\nPorting to Python 3.12\u00b6\nThis section lists previously described changes and other bugfixes that may require changes to your code.\nChanges in the Python API\u00b6\nMore strict rules are now applied for numerical group references and group names in regular expressions. Only sequence of ASCII digits is now accepted as a numerical reference. The group name in bytes patterns and replacement strings can now only contain ASCII letters and digits and underscore. (Contributed by Serhiy Storchaka in gh-91760.)\nRemove\nrandrange()\nfunctionality deprecated since Python 3.10. Formerly,randrange(10.0)\nlosslessly converted torandrange(10)\n. Now, it raises aTypeError\n. Also, the exception raised for non-integer values such asrandrange(10.5)\norrandrange('10')\nhas been changed fromValueError\ntoTypeError\n. This also prevents bugs whererandrange(1e25)\nwould silently select from a larger range thanrandrange(10**25)\n. (Originally suggested by Serhiy Storchaka gh-86388.)argparse.ArgumentParser\nchanged encoding and error handler for reading arguments from file (e.g.fromfile_prefix_chars\noption) from default text encoding (e.g.locale.getpreferredencoding(False)\n) to filesystem encoding and error handler. Argument files should be encoded in UTF-8 instead of ANSI Codepage on Windows.Remove the\nasyncore\n-basedsmtpd\nmodule deprecated in Python 3.4.7 and 3.5.4. A recommended replacement is theasyncio\n-based aiosmtpd PyPI module.shlex.split()\n: PassingNone\nfor s argument now raises an exception, rather than readingsys.stdin\n. The feature was deprecated in Python 3.9. (Contributed by Victor Stinner in gh-94352.)The\nos\nmodule no longer accepts bytes-like paths, likebytearray\nandmemoryview\ntypes: only the exactbytes\ntype is accepted for bytes strings. (Contributed by Victor Stinner in gh-98393.)syslog.openlog()\nandsyslog.closelog()\nnow fail if used in subinterpreters.syslog.syslog()\nmay still be used in subinterpreters, but now only ifsyslog.openlog()\nhas already been called in the main interpreter. These new restrictions do not apply to the main interpreter, so only a very small set of users might be affected. This change helps with interpreter isolation. Furthermore,syslog\nis a wrapper around process-global resources, which are best managed from the main interpreter. (Contributed by Donghee Na in gh-99127.)The undocumented locking behavior of\ncached_property()\nis removed, because it locked across all instances of the class, leading to high lock contention. This means that a cached property getter function could now run more than once for a single instance, if two threads race. For most simple cached properties (e.g. those that are idempotent and simply calculate a value based on other attributes of the instance) this will be fine. If synchronization is needed, implement locking within the cached property getter function or around multi-threaded access points.sys._current_exceptions()\nnow returns a mapping from thread-id to an exception instance, rather than to a(typ, exc, tb)\ntuple. (Contributed by Irit Katriel in gh-103176.)When extracting tar files using\ntarfile\norshutil.unpack_archive()\n, pass the filter argument to limit features that may be surprising or dangerous. See Extraction filters for details.The output of the\ntokenize.tokenize()\nandtokenize.generate_tokens()\nfunctions is now changed due to the changes introduced in PEP 701. This means thatSTRING\ntokens are not emitted any more for f-strings and the tokens described in PEP 701 are now produced instead:FSTRING_START\n,FSTRING_MIDDLE\nandFSTRING_END\nare now emitted for f-string \u201cstring\u201d parts in addition to the appropriate tokens for the tokenization in the expression components. For example for the f-stringf\"start {1+1} end\"\nthe old version of the tokenizer emitted:1,0-1,18: STRING 'f\"start {1+1} end\"'\nwhile the new version emits:\n1,0-1,2: FSTRING_START 'f\"' 1,2-1,8: FSTRING_MIDDLE 'start ' 1,8-1,9: OP '{' 1,9-1,10: NUMBER '1' 1,10-1,11: OP '+' 1,11-1,12: NUMBER '1' 1,12-1,13: OP '}' 1,13-1,17: FSTRING_MIDDLE ' end' 1,17-1,18: FSTRING_END '\"'\nAdditionally, there may be some minor behavioral changes as a consequence of the changes required to support PEP 701. Some of these changes include:\nThe\ntype\nattribute of the tokens emitted when tokenizing some invalid Python characters such as!\nhas changed fromERRORTOKEN\ntoOP\n.Incomplete single-line strings now also raise\ntokenize.TokenError\nas incomplete multiline strings do.Some incomplete or invalid Python code now raises\ntokenize.TokenError\ninstead of returning arbitraryERRORTOKEN\ntokens when tokenizing it.Mixing tabs and spaces as indentation in the same file is not supported anymore and will raise a\nTabError\n.\nThe\nthreading\nmodule now expects the_thread\nmodule to have an_is_main_interpreter\nattribute. It is a function with no arguments that returnsTrue\nif the current interpreter is the main interpreter.Any library or application that provides a custom\n_thread\nmodule should provide_is_main_interpreter()\n. (See gh-112826.)\nBuild Changes\u00b6\nPython no longer uses\nsetup.py\nto build shared C extension modules. Build parameters like headers and libraries are detected inconfigure\nscript. Extensions are built byMakefile\n. Most extensions usepkg-config\nand fall back to manual detection. (Contributed by Christian Heimes in gh-93939.)va_start()\nwith two parameters, likeva_start(args, format),\nis now required to build Python.va_start()\nis no longer called with a single parameter. (Contributed by Kumar Aditya in gh-93207.)CPython now uses the ThinLTO option as the default link time optimization policy if the Clang compiler accepts the flag. (Contributed by Donghee Na in gh-89536.)\nAdd\nCOMPILEALL_OPTS\nvariable inMakefile\nto overridecompileall\noptions (default:-j0\n) inmake install\n. Also merged the 3compileall\ncommands into a single command to build .pyc files for all optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in gh-99289.)Add platform triplets for 64-bit LoongArch:\nloongarch64-linux-gnusf\nloongarch64-linux-gnuf32\nloongarch64-linux-gnu\n(Contributed by Zhang Na in gh-90656.)\nPYTHON_FOR_REGEN\nnow require Python 3.10 or newer.Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate\n!configure\n. (Contributed by Christian Heimes in gh-89886.)Windows builds and macOS installers from python.org now use OpenSSL 3.0.\nC API Changes\u00b6\nNew Features\u00b6\nPEP 697: Introduce the Unstable C API tier, intended for low-level tools like debuggers and JIT compilers. This API may change in each minor release of CPython without deprecation warnings. Its contents are marked by the\nPyUnstable_\nprefix in names.Code object constructors:\nPyUnstable_Code_New()\n(renamed fromPyCode_New\n)PyUnstable_Code_NewWithPosOnlyArgs()\n(renamed fromPyCode_NewWithPosOnlyArgs\n)\nExtra storage for code objects (PEP 523):\nPyUnstable_Eval_RequestCodeExtraIndex()\n(renamed from_PyEval_RequestCodeExtraIndex\n)PyUnstable_Code_GetExtra()\n(renamed from_PyCode_GetExtra\n)PyUnstable_Code_SetExtra()\n(renamed from_PyCode_SetExtra\n)\nThe original names will continue to be available until the respective API changes.\n(Contributed by Petr Viktorin in gh-101101.)\nPEP 697: Add an API for extending types whose instance memory layout is opaque:\nPyType_Spec.basicsize\ncan be zero or negative to specify inheriting or extending the base class size.PyObject_GetTypeData()\nandPyType_GetTypeDataSize()\nadded to allow access to subclass-specific instance data.Py_TPFLAGS_ITEMS_AT_END\nandPyObject_GetItemData()\nadded to allow safely extending certain variable-sized types, includingPyType_Type\n.Py_RELATIVE_OFFSET\nadded to allow definingmembers\nin terms of a subclass-specific struct.\n(Contributed by Petr Viktorin in gh-103509.)\nAdd the new limited C API function\nPyType_FromMetaclass()\n, which generalizes the existingPyType_FromModuleAndSpec()\nusing an additional metaclass argument. (Contributed by Wenzel Jakob in gh-93012.)API for creating objects that can be called using the vectorcall protocol was added to the Limited API:\nThe\nPy_TPFLAGS_HAVE_VECTORCALL\nflag is now removed from a class when the class\u2019s__call__()\nmethod is reassigned. This makes vectorcall safe to use with mutable types (i.e. heap types without the immutable flag,Py_TPFLAGS_IMMUTABLETYPE\n). Mutable types that do not overridetp_call\nnow inherit thePy_TPFLAGS_HAVE_VECTORCALL\nflag. (Contributed by Petr Viktorin in gh-93274.)The\nPy_TPFLAGS_MANAGED_DICT\nandPy_TPFLAGS_MANAGED_WEAKREF\nflags have been added. This allows extensions classes to support object__dict__\nand weakrefs with less bookkeeping, using less memory and with faster access.API for performing calls using the vectorcall protocol was added to the Limited API:\nThis means that both the incoming and outgoing ends of the vector call protocol are now available in the Limited API. (Contributed by Wenzel Jakob in gh-98586.)\nAdd two new public functions,\nPyEval_SetProfileAllThreads()\nandPyEval_SetTraceAllThreads()\n, that allow to set tracing and profiling functions in all running threads in addition to the calling one. (Contributed by Pablo Galindo in gh-93503.)Add new function\nPyFunction_SetVectorcall()\nto the C API which sets the vectorcall field of a givenPyFunctionObject\n. (Contributed by Andrew Frost in gh-92257.)The C API now permits registering callbacks via\nPyDict_AddWatcher()\n,PyDict_Watch()\nand related APIs to be called whenever a dictionary is modified. This is intended for use by optimizing interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in gh-91052.)Add\nPyType_AddWatcher()\nandPyType_Watch()\nAPI to register callbacks to receive notification on changes to a type. (Contributed by Carl Meyer in gh-91051.)Add\nPyCode_AddWatcher()\nandPyCode_ClearWatcher()\nAPIs to register callbacks to receive notification on creation and destruction of code objects. (Contributed by Itamar Oren in gh-91054.)Add\nPyFrame_GetVar()\nandPyFrame_GetVarString()\nfunctions to get a frame variable by its name. (Contributed by Victor Stinner in gh-91248.)Add\nPyErr_GetRaisedException()\nandPyErr_SetRaisedException()\nfor saving and restoring the current exception. These functions return and accept a single exception object, rather than the triple arguments of the now-deprecatedPyErr_Fetch()\nandPyErr_Restore()\n. This is less error prone and a bit more efficient. (Contributed by Mark Shannon in gh-101578.)Add\n_PyErr_ChainExceptions1\n, which takes an exception instance, to replace the legacy-API_PyErr_ChainExceptions\n, which is now deprecated. (Contributed by Mark Shannon in gh-101578.)Add\nPyException_GetArgs()\nandPyException_SetArgs()\nas convenience functions for retrieving and modifying theargs\npassed to the exception\u2019s constructor. (Contributed by Mark Shannon in gh-101578.)Add\nPyErr_DisplayException()\n, which takes an exception instance, to replace the legacy-apiPyErr_Display()\n. (Contributed by Irit Katriel in gh-102755).\nPEP 683: Introduce Immortal Objects, which allows objects to bypass reference counts, and related changes to the C-API:\n_Py_IMMORTAL_REFCNT\n: The reference count that defines an objectas immortal.\n_Py_IsImmortal\nChecks if an object has the immortal reference count.PyObject_HEAD_INIT\nThis will now initialize reference count to_Py_IMMORTAL_REFCNT\nwhen used withPy_BUILD_CORE\n.\nSSTATE_INTERNED_IMMORTAL\nAn identifier for interned unicode objectsthat are immortal.\nSSTATE_INTERNED_IMMORTAL_STATIC\nAn identifier for interned unicodeobjects that are immortal and static\nsys.getunicodeinternedsize\nThis returns the total number of unicodeobjects that have been interned. This is now needed for\nrefleak.py\nto correctly track reference counts and allocated blocks\n(Contributed by Eddie Elizondo in gh-84436.)\nPEP 684: Add the new\nPy_NewInterpreterFromConfig()\nfunction andPyInterpreterConfig\n, which may be used to create sub-interpreters with their own GILs. (See PEP 684: A Per-Interpreter GIL for more info.) (Contributed by Eric Snow in gh-104110.)In the limited C API version 3.12,\nPy_INCREF()\nandPy_DECREF()\nfunctions are now implemented as opaque function calls to hide implementation details. (Contributed by Victor Stinner in gh-105387.)\nPorting to Python 3.12\u00b6\nLegacy Unicode APIs based on\nPy_UNICODE*\nrepresentation has been removed. Please migrate to APIs based on UTF-8 orwchar_t*\n.Argument parsing functions like\nPyArg_ParseTuple()\ndoesn\u2019t supportPy_UNICODE*\nbased format (e.g.u\n,Z\n) anymore. Please migrate to other formats for Unicode likes\n,z\n,es\n, andU\n.tp_weaklist\nfor all static builtin types is alwaysNULL\n. This is an internal-only field onPyTypeObject\nbut we\u2019re pointing out the change in case someone happens to be accessing the field directly anyway. To avoid breakage, consider using the existing public C-API instead, or, if necessary, the (internal-only)_PyObject_GET_WEAKREFS_LISTPTR()\nmacro.This internal-only\nPyTypeObject.tp_subclasses\nmay now not be a valid object pointer. Its type was changed to void* to reflect this. We mention this in case someone happens to be accessing the internal-only field directly.To get a list of subclasses, call the Python method\n__subclasses__()\n(usingPyObject_CallMethod()\n, for example).Add support of more formatting options (left aligning, octals, uppercase hexadecimals,\nintmax_t\n,ptrdiff_t\n,wchar_t\nC strings, variable width and precision) inPyUnicode_FromFormat()\nandPyUnicode_FromFormatV()\n. (Contributed by Serhiy Storchaka in gh-98836.)An unrecognized format character in\nPyUnicode_FromFormat()\nandPyUnicode_FromFormatV()\nnow sets aSystemError\n. In previous versions it caused all the rest of the format string to be copied as-is to the result string, and any extra arguments discarded. (Contributed by Serhiy Storchaka in gh-95781.)Fix wrong sign placement in\nPyUnicode_FromFormat()\nandPyUnicode_FromFormatV()\n. (Contributed by Philip Georgi in gh-95504.)Extension classes wanting to add a\n__dict__\nor weak reference slot should usePy_TPFLAGS_MANAGED_DICT\nandPy_TPFLAGS_MANAGED_WEAKREF\ninstead oftp_dictoffset\nandtp_weaklistoffset\n, respectively. The use oftp_dictoffset\nandtp_weaklistoffset\nis still supported, but does not fully support multiple inheritance (gh-95589), and performance may be worse. Classes declaringPy_TPFLAGS_MANAGED_DICT\nmust call_PyObject_VisitManagedDict()\nand_PyObject_ClearManagedDict()\nto traverse and clear their instance\u2019s dictionaries. To clear weakrefs, callPyObject_ClearWeakRefs()\n, as before.The\nPyUnicode_FSDecoder()\nfunction no longer accepts bytes-like paths, likebytearray\nandmemoryview\ntypes: only the exactbytes\ntype is accepted for bytes strings. (Contributed by Victor Stinner in gh-98393.)The\nPy_CLEAR\n,Py_SETREF\nandPy_XSETREF\nmacros now only evaluate their arguments once. If an argument has side effects, these side effects are no longer duplicated. (Contributed by Victor Stinner in gh-98724.)The interpreter\u2019s error indicator is now always normalized. This means that\nPyErr_SetObject()\n,PyErr_SetString()\nand the other functions that set the error indicator now normalize the exception before storing it. (Contributed by Mark Shannon in gh-101578.)_Py_RefTotal\nis no longer authoritative and only kept around for ABI compatibility. Note that it is an internal global and only available on debug builds. If you happen to be using it then you\u2019ll need to start using_Py_GetGlobalRefTotal()\n.The following functions now select an appropriate metaclass for the newly created type:\nCreating classes whose metaclass overrides\ntp_new\nis deprecated, and in Python 3.14+ it will be disallowed. Note that these functions ignoretp_new\nof the metaclass, possibly allowing incomplete initialization.Note that\nPyType_FromMetaclass()\n(added in Python 3.12) already disallows creating classes whose metaclass overridestp_new\n(__new__()\nin Python).Since\ntp_new\noverrides almost everythingPyType_From*\nfunctions do, the two are incompatible with each other. The existing behavior \u2013 ignoring the metaclass for several steps of type creation \u2013 is unsafe in general, since (meta)classes assume thattp_new\nwas called. There is no simple general workaround. One of the following may work for you:If you control the metaclass, avoid using\ntp_new\nin it:If initialization can be skipped, it can be done in\ntp_init\ninstead.If the metaclass doesn\u2019t need to be instantiated from Python, set its\ntp_new\ntoNULL\nusing thePy_TPFLAGS_DISALLOW_INSTANTIATION\nflag. This makes it acceptable forPyType_From*\nfunctions.\nAvoid\nPyType_From*\nfunctions: if you don\u2019t need C-specific features (slots or setting the instance size), create types by calling the metaclass.If you know the\ntp_new\ncan be skipped safely, filter the deprecation warning out usingwarnings.catch_warnings()\nfrom Python.\nPyOS_InputHook\nandPyOS_ReadlineFunctionPointer\nare no longer called in subinterpreters. This is because clients generally rely on process-wide global state (since these callbacks have no way of recovering extension module state).This also avoids situations where extensions may find themselves running in a subinterpreter that they don\u2019t support (or haven\u2019t yet been loaded in). See gh-104668 for more info.\nPyLongObject\nhas had its internals changed for better performance. Although the internals ofPyLongObject\nare private, they are used by some extension modules. The internal fields should no longer be accessed directly, instead the API functions beginningPyLong_...\nshould be used instead. Two new unstable API functions are provided for efficient access to the value ofPyLongObject\ns which fit into a single machine word:Custom allocators, set via\nPyMem_SetAllocator()\n, are now required to be thread-safe, regardless of memory domain. Allocators that don\u2019t have their own state, including \u201chooks\u201d, are not affected. If your custom allocator is not already thread-safe and you need guidance then please create a new GitHub issue and CC@ericsnowcurrently\n.\nDeprecated\u00b6\nIn accordance with PEP 699, the\nma_version_tag\nfield inPyDictObject\nis deprecated for extension modules. Accessing this field will generate a compiler warning at compile time. This field will be removed in Python 3.14. (Contributed by Ramvikrams and Kumar Aditya in gh-101193. PEP by Ken Jin.)Deprecate global configuration variable:\nPy_HashRandomizationFlag\n: usePyConfig.use_hash_seed\nandPyConfig.hash_seed\nPy_LegacyWindowsFSEncodingFlag\n: usePyPreConfig.legacy_windows_fs_encoding\nPy_LegacyWindowsStdioFlag\n: usePyConfig.legacy_windows_stdio\nPy_FileSystemDefaultEncoding\n: usePyConfig.filesystem_encoding\nPy_HasFileSystemDefaultEncoding\n: usePyConfig.filesystem_encoding\nPy_FileSystemDefaultEncodeErrors\n: usePyConfig.filesystem_errors\nPy_UTF8Mode\n: usePyPreConfig.utf8_mode\n(seePy_PreInitialize()\n)\nThe\nPy_InitializeFromConfig()\nAPI should be used withPyConfig\ninstead. (Contributed by Victor Stinner in gh-77782.)Creating\nimmutable types\nwith mutable bases is deprecated and will be disabled in Python 3.14. (gh-95388)The\nstructmember.h\nheader is deprecated, though it continues to be available and there are no plans to remove it.Its contents are now available just by including\nPython.h\n, with aPy\nprefix added if it was missing:Type macros like\nPy_T_INT\n,Py_T_DOUBLE\n, etc. (previouslyT_INT\n,T_DOUBLE\n, etc.)The flags\nPy_READONLY\n(previouslyREADONLY\n) andPy_AUDIT_READ\n(previously all uppercase)\nSeveral items are not exposed from\nPython.h\n:T_OBJECT\n(usePy_T_OBJECT_EX\n)T_NONE\n(previously undocumented, and pretty quirky)The macro\nWRITE_RESTRICTED\nwhich does nothing.The macros\nRESTRICTED\nandREAD_RESTRICTED\n, equivalents ofPy_AUDIT_READ\n.In some configurations,\n<stddef.h>\nis not included fromPython.h\n. It should be included manually when usingoffsetof()\n.\nThe deprecated header continues to provide its original contents under the original names. Your old code can stay unchanged, unless the extra include and non-namespaced macros bother you greatly.\n(Contributed in gh-47146 by Petr Viktorin, based on earlier work by Alexander Belopolsky and Matthias Braun.)\nPyErr_Fetch()\nandPyErr_Restore()\nare deprecated. UsePyErr_GetRaisedException()\nandPyErr_SetRaisedException()\ninstead. (Contributed by Mark Shannon in gh-101578.)PyErr_Display()\nis deprecated. UsePyErr_DisplayException()\ninstead. (Contributed by Irit Katriel in gh-102755)._PyErr_ChainExceptions\nis deprecated. Use_PyErr_ChainExceptions1\ninstead. (Contributed by Irit Katriel in gh-102192.)Using\nPyType_FromSpec()\n,PyType_FromSpecWithBases()\norPyType_FromModuleAndSpec()\nto create a class whose metaclass overridestp_new\nis deprecated. Call the metaclass instead.\nPending Removal in Python 3.14\u00b6\nThe\nma_version_tag\nfield inPyDictObject\nfor extension modules (PEP 699; gh-101193).Creating\nimmutable types\nwith mutable bases (gh-95388).Functions to configure Python\u2019s initialization, deprecated in Python 3.11:\nPySys_SetArgvEx()\n: SetPyConfig.argv\ninstead.PySys_SetArgv()\n: SetPyConfig.argv\ninstead.Py_SetProgramName()\n: SetPyConfig.program_name\ninstead.Py_SetPythonHome()\n: SetPyConfig.home\ninstead.\nThe\nPy_InitializeFromConfig()\nAPI should be used withPyConfig\ninstead.Global configuration variables:\nPy_DebugFlag\n: UsePyConfig.parser_debug\ninstead.Py_VerboseFlag\n: UsePyConfig.verbose\ninstead.Py_QuietFlag\n: UsePyConfig.quiet\ninstead.Py_InteractiveFlag\n: UsePyConfig.interactive\ninstead.Py_InspectFlag\n: UsePyConfig.inspect\ninstead.Py_OptimizeFlag\n: UsePyConfig.optimization_level\ninstead.Py_NoSiteFlag\n: UsePyConfig.site_import\ninstead.Py_BytesWarningFlag\n: UsePyConfig.bytes_warning\ninstead.Py_FrozenFlag\n: UsePyConfig.pathconfig_warnings\ninstead.Py_IgnoreEnvironmentFlag\n: UsePyConfig.use_environment\ninstead.Py_DontWriteBytecodeFlag\n: UsePyConfig.write_bytecode\ninstead.Py_NoUserSiteDirectory\n: UsePyConfig.user_site_directory\ninstead.Py_UnbufferedStdioFlag\n: UsePyConfig.buffered_stdio\ninstead.Py_HashRandomizationFlag\n: UsePyConfig.use_hash_seed\nandPyConfig.hash_seed\ninstead.Py_IsolatedFlag\n: UsePyConfig.isolated\ninstead.Py_LegacyWindowsFSEncodingFlag\n: UsePyPreConfig.legacy_windows_fs_encoding\ninstead.Py_LegacyWindowsStdioFlag\n: UsePyConfig.legacy_windows_stdio\ninstead.Py_FileSystemDefaultEncoding\n: UsePyConfig.filesystem_encoding\ninstead.Py_HasFileSystemDefaultEncoding\n: UsePyConfig.filesystem_encoding\ninstead.Py_FileSystemDefaultEncodeErrors\n: UsePyConfig.filesystem_errors\ninstead.Py_UTF8Mode\n: UsePyPreConfig.utf8_mode\ninstead. (seePy_PreInitialize()\n)\nThe\nPy_InitializeFromConfig()\nAPI should be used withPyConfig\ninstead.\nPending Removal in Python 3.15\u00b6\nThe bundled copy of\nlibmpdecimal\n.The\nPyImport_ImportModuleNoBlock()\n: UsePyImport_ImportModule()\ninstead.PyWeakref_GetObject()\nandPyWeakref_GET_OBJECT()\n: UsePyWeakref_GetRef()\ninstead.Py_UNICODE\ntype and thePy_UNICODE_WIDE\nmacro: Usewchar_t\ninstead.Python initialization functions:\nPySys_ResetWarnOptions()\n: Clearsys.warnoptions\nandwarnings.filters\ninstead.Py_GetExecPrefix()\n: Getsys.base_exec_prefix\nandsys.exec_prefix\ninstead.Py_GetPath()\n: Getsys.path\ninstead.Py_GetPrefix()\n: Getsys.base_prefix\nandsys.prefix\ninstead.Py_GetProgramFullPath()\n: Getsys.executable\ninstead.Py_GetProgramName()\n: Getsys.executable\ninstead.Py_GetPythonHome()\n: GetPyConfig.home\nor thePYTHONHOME\nenvironment variable instead.\nPending Removal in Future Versions\u00b6\nThe following APIs are deprecated and will be removed, although there is currently no date scheduled for their removal.\nPy_TPFLAGS_HAVE_FINALIZE\n: Unneeded since Python 3.8.PyErr_Fetch()\n: UsePyErr_GetRaisedException()\ninstead.PyErr_NormalizeException()\n: UsePyErr_GetRaisedException()\ninstead.PyErr_Restore()\n: UsePyErr_SetRaisedException()\ninstead.PyModule_GetFilename()\n: UsePyModule_GetFilenameObject()\ninstead.PyOS_AfterFork()\n: UsePyOS_AfterFork_Child()\ninstead.PySlice_GetIndicesEx()\n: UsePySlice_Unpack()\nandPySlice_AdjustIndices()\ninstead.PyUnicode_AsDecodedObject()\n: UsePyCodec_Decode()\ninstead.PyUnicode_AsDecodedUnicode()\n: UsePyCodec_Decode()\ninstead.PyUnicode_AsEncodedObject()\n: UsePyCodec_Encode()\ninstead.PyUnicode_AsEncodedUnicode()\n: UsePyCodec_Encode()\ninstead.PyUnicode_READY()\n: Unneeded since Python 3.12PyErr_Display()\n: UsePyErr_DisplayException()\ninstead._PyErr_ChainExceptions()\n: Use_PyErr_ChainExceptions1()\ninstead.PyBytesObject.ob_shash\nmember: callPyObject_Hash()\ninstead.PyDictObject.ma_version_tag\nmember.Thread Local Storage (TLS) API:\nPyThread_create_key()\n: UsePyThread_tss_alloc()\ninstead.PyThread_delete_key()\n: UsePyThread_tss_free()\ninstead.PyThread_set_key_value()\n: UsePyThread_tss_set()\ninstead.PyThread_get_key_value()\n: UsePyThread_tss_get()\ninstead.PyThread_delete_key_value()\n: UsePyThread_tss_delete()\ninstead.PyThread_ReInitTLS()\n: Unneeded since Python 3.7.\nRemoved\u00b6\nRemove the\ntoken.h\nheader file. There was never any public tokenizer C API. Thetoken.h\nheader file was only designed to be used by Python internals. (Contributed by Victor Stinner in gh-92651.)Legacy Unicode APIs have been removed. See PEP 623 for detail.\nPyUnicode_WCHAR_KIND\nPyUnicode_AS_UNICODE()\nPyUnicode_AsUnicode()\nPyUnicode_AsUnicodeAndSize()\nPyUnicode_AS_DATA()\nPyUnicode_FromUnicode()\nPyUnicode_GET_SIZE()\nPyUnicode_GetSize()\nPyUnicode_GET_DATA_SIZE()\nRemove the\nPyUnicode_InternImmortal()\nfunction macro. (Contributed by Victor Stinner in gh-85858.)"},
{"source": "https://docs.python.org/3/whatsnew/3.13.html", "title": "What\u2019s New In Python 3.13", "text": "What\u2019s New In Python 3.13\u00b6\n- Editors:\nAdam Turner and Thomas Wouters\nThis article explains the new features in Python 3.13, compared to 3.12. Python 3.13 was released on October 7, 2024. For full details, see the changelog.\nSee also\nPEP 719 \u2013 Python 3.13 Release Schedule\nSummary \u2013 Release Highlights\u00b6\nPython 3.13 is the latest stable release of the Python programming language, with a mix of changes to the language, the implementation and the standard library. The biggest changes include a new interactive interpreter, experimental support for running in a free-threaded mode (PEP 703), and a Just-In-Time compiler (PEP 744).\nError messages continue to improve, with tracebacks now highlighted in color\nby default. The locals()\nbuiltin now has defined semantics for changing the returned mapping,\nand type parameters now support default values.\nThe library changes contain removal of deprecated APIs and modules, as well as the usual improvements in user-friendliness and correctness. Several legacy standard library modules have now been removed following their deprecation in Python 3.11 (PEP 594).\nThis article doesn\u2019t attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details refer to the documentation, such as the Library Reference and Language Reference. To understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented. See Porting to Python 3.13 for guidance on upgrading from earlier versions of Python.\nInterpreter improvements:\nA greatly improved interactive interpreter and improved error messages.\nPEP 667: The\nlocals()\nbuiltin now has defined semantics when mutating the returned mapping. Python debuggers and similar tools may now more reliably update local variables in optimized scopes even during concurrent code execution.PEP 703: CPython 3.13 has experimental support for running with the global interpreter lock disabled. See Free-threaded CPython for more details.\nPEP 744: A basic JIT compiler was added. It is currently disabled by default (though we may turn it on later). Performance improvements are modest \u2013 we expect to improve this over the next few releases.\nColor support in the new interactive interpreter, as well as in tracebacks and doctest output. This can be disabled through the\nPYTHON_COLORS\nandNO_COLOR\nenvironment variables.\nPython data model improvements:\n__static_attributes__\nstores the names of attributes accessed throughself.X\nin any function in a class body.__firstlineno__\nrecords the first line number of a class definition.\nSignificant improvements in the standard library:\nAdd a new\nPythonFinalizationError\nexception, raised when an operation is blocked during finalization.The\nargparse\nmodule now supports deprecating command-line options, positional arguments, and subcommands.The new functions\nbase64.z85encode()\nandbase64.z85decode()\nsupport encoding and decoding Z85 data.The\ncopy\nmodule now has acopy.replace()\nfunction, with support for many builtin types and any class defining the__replace__()\nmethod.The new\ndbm.sqlite3\nmodule is now the defaultdbm\nbackend.The\nos\nmodule has a suite of new functions for working with Linux\u2019s timer notification file descriptors.The\nrandom\nmodule now has a command-line interface.\nSecurity improvements:\nssl.create_default_context()\nsetsssl.VERIFY_X509_PARTIAL_CHAIN\nandssl.VERIFY_X509_STRICT\nas default flags.\nC API improvements:\nThe\nPy_mod_gil\nslot is now used to indicate that an extension module supports running with the GIL disabled.The PyTime C API has been added, providing access to system clocks.\nPyMutex\nis a new lightweight mutex that occupies a single byte.There is a new suite of functions for generating PEP 669 monitoring events in the C API.\nNew typing features:\nPEP 696: Type parameters (\ntyping.TypeVar\n,typing.ParamSpec\n, andtyping.TypeVarTuple\n) now support defaults.PEP 702: The new\nwarnings.deprecated()\ndecorator adds support for marking deprecations in the type system and at runtime.PEP 705:\ntyping.ReadOnly\ncan be used to mark an item of atyping.TypedDict\nas read-only for type checkers.PEP 742:\ntyping.TypeIs\nprovides more intuitive type narrowing behavior, as an alternative totyping.TypeGuard\n.\nPlatform support:\nPEP 730: Apple\u2019s iOS is now an officially supported platform, at tier 3.\nPEP 738: Android is now an officially supported platform, at tier 3.\nwasm32-wasi\nis now supported as a tier 2 platform.wasm32-emscripten\nis no longer an officially supported platform.\nImportant removals:\nPEP 594: The remaining 19 \u201cdead batteries\u201d (legacy stdlib modules) have been removed from the standard library:\naifc\n,audioop\n,cgi\n,cgitb\n,chunk\n,crypt\n,imghdr\n,mailcap\n,msilib\n,nis\n,nntplib\n,ossaudiodev\n,pipes\n,sndhdr\n,spwd\n,sunau\n,telnetlib\n,uu\nandxdrlib\n.Remove the 2to3 tool and\nlib2to3\nmodule (deprecated in Python 3.11).Remove the\ntkinter.tix\nmodule (deprecated in Python 3.6).Remove the\nlocale.resetlocale()\nfunction.Remove the\ntyping.io\nandtyping.re\nnamespaces.Remove chained\nclassmethod\ndescriptors.\nRelease schedule changes:\nPEP 602 (\u201cAnnual Release Cycle for Python\u201d) has been updated to extend the full support (\u2018bugfix\u2019) period for new releases to two years. This updated policy means that:\nPython 3.9\u20133.12 have one and a half years of full support, followed by three and a half years of security fixes.\nPython 3.13 and later have two years of full support, followed by three years of security fixes.\nNew Features\u00b6\nA better interactive interpreter\u00b6\nPython now uses a new interactive shell by default, based on code from the PyPy project. When the user starts the REPL from an interactive terminal, the following new features are now supported:\nMultiline editing with history preservation.\nDirect support for REPL-specific commands like help, exit, and quit, without the need to call them as functions.\nPrompts and tracebacks with color enabled by default.\nInteractive help browsing using F1 with a separate command history.\nHistory browsing using F2 that skips output as well as the >>> and \u2026 prompts.\n\u201cPaste mode\u201d with F3 that makes pasting larger blocks of code easier (press F3 again to return to the regular prompt).\nTo disable the new interactive shell,\nset the PYTHON_BASIC_REPL\nenvironment variable.\nFor more on interactive mode, see Interactive Mode.\n(Contributed by Pablo Galindo Salgado, \u0141ukasz Langa, and Lysandros Nikolaou in gh-111201 based on code from the PyPy project. Windows support contributed by Dino Viehland and Anthony Shaw.)\nImproved error messages\u00b6\nThe interpreter now uses color by default when displaying tracebacks in the terminal. This feature can be controlled via the new\nPYTHON_COLORS\nenvironment variable as well as the canonicalNO_COLOR\nandFORCE_COLOR\nenvironment variables. (Contributed by Pablo Galindo Salgado in gh-112730.)\nA common mistake is to write a script with the same name as a standard library module. When this results in errors, we now display a more helpful error message:\n$ python random.py Traceback (most recent call last): File \"/home/me/random.py\", line 1, in <module> import random File \"/home/me/random.py\", line 3, in <module> print(random.randint(5)) ^^^^^^^^^^^^^^ AttributeError: module 'random' has no attribute 'randint' (consider renaming '/home/me/random.py' since it has the same name as the standard library module named 'random' and prevents importing that standard library module)\nSimilarly, if a script has the same name as a third-party module that it attempts to import and this results in errors, we also display a more helpful error message:\n$ python numpy.py Traceback (most recent call last): File \"/home/me/numpy.py\", line 1, in <module> import numpy as np File \"/home/me/numpy.py\", line 3, in <module> np.array([1, 2, 3]) ^^^^^^^^ AttributeError: module 'numpy' has no attribute 'array' (consider renaming '/home/me/numpy.py' if it has the same name as a library you intended to import)\n(Contributed by Shantanu Jain in gh-95754.)\nThe error message now tries to suggest the correct keyword argument when an incorrect keyword argument is passed to a function.\n>>> \"Better error messages!\".split(max_split=1) Traceback (most recent call last): File \"<python-input-0>\", line 1, in <module> \"Better error messages!\".split(max_split=1) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^ TypeError: split() got an unexpected keyword argument 'max_split'. Did you mean 'maxsplit'?\n(Contributed by Pablo Galindo Salgado and Shantanu Jain in gh-107944.)\nFree-threaded CPython\u00b6\nCPython now has experimental support for running in a free-threaded mode,\nwith the global interpreter lock (GIL) disabled.\nThis is an experimental feature and therefore is not enabled by default.\nThe free-threaded mode requires a different executable,\nusually called python3.13t\nor python3.13t.exe\n.\nPre-built binaries marked as free-threaded can be installed as part of\nthe official Windows\nand macOS installers,\nor CPython can be built from source with the --disable-gil\noption.\nFree-threaded execution allows for full utilization of the available\nprocessing power by running threads in parallel on available CPU cores.\nWhile not all software will benefit from this automatically, programs\ndesigned with threading in mind will run faster on multi-core hardware.\nThe free-threaded mode is experimental and work is ongoing to improve it:\nexpect some bugs and a substantial single-threaded performance hit.\nFree-threaded builds of CPython support optionally running with the GIL\nenabled at runtime using the environment variable PYTHON_GIL\nor\nthe command-line option -X gil=1\n.\nTo check if the current interpreter supports free-threading, python -VV\nand sys.version\ncontain \u201cexperimental free-threading build\u201d.\nThe new sys._is_gil_enabled()\nfunction can be used to check whether\nthe GIL is actually disabled in the running process.\nC-API extension modules need to be built specifically for the free-threaded\nbuild. Extensions that support running with the GIL disabled should\nuse the Py_mod_gil\nslot. Extensions using single-phase init should\nuse PyUnstable_Module_SetGIL()\nto indicate whether they support\nrunning with the GIL disabled. Importing C extensions that don\u2019t use these\nmechanisms will cause the GIL to be enabled, unless the GIL was explicitly\ndisabled with the PYTHON_GIL\nenvironment variable or the\n-X gil=0\noption.\npip 24.1 or newer is required to install packages with C extensions in the\nfree-threaded build.\nThis work was made possible thanks to many individuals and organizations, including the large community of contributors to Python and third-party projects to test and enable free-threading support. Notable contributors include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, and many others. Many of these contributors are employed by Meta, which has provided significant engineering resources to support this project.\nSee also\nPEP 703 \u201cMaking the Global Interpreter Lock Optional in CPython\u201d contains rationale and information surrounding this work.\nPorting Extension Modules to Support Free-Threading: A community-maintained porting guide for extension authors.\nAn experimental just-in-time (JIT) compiler\u00b6\nWhen CPython is configured and built using\nthe --enable-experimental-jit\noption,\na just-in-time (JIT) compiler is added which may speed up some Python programs.\nOn Windows, use PCbuild/build.bat --experimental-jit\nto enable the JIT\nor --experimental-jit-interpreter\nto enable the Tier 2 interpreter.\nBuild requirements and further supporting information are contained at\nTools/jit/README.md\n.\nThe --enable-experimental-jit\noption takes these (optional) values,\ndefaulting to yes\nif --enable-experimental-jit\nis present\nwithout the optional value.\nno\n: Disable the entire Tier 2 and JIT pipeline.yes\n: Enable the JIT. To disable the JIT at runtime, pass the environment variablePYTHON_JIT=0\n.yes-off\n: Build the JIT but disable it by default. To enable the JIT at runtime, pass the environment variablePYTHON_JIT=1\n.interpreter\n: Enable the Tier 2 interpreter but disable the JIT. The interpreter can be disabled by running withPYTHON_JIT=0\n.\nThe internal architecture is roughly as follows:\nWe start with specialized Tier 1 bytecode. See What\u2019s new in 3.11 for details.\nWhen the Tier 1 bytecode gets hot enough, it gets translated to a new purely internal intermediate representation (IR), called the Tier 2 IR, and sometimes referred to as micro-ops (\u201cuops\u201d).\nThe Tier 2 IR uses the same stack-based virtual machine as Tier 1, but the instruction format is better suited to translation to machine code.\nWe have several optimization passes for Tier 2 IR, which are applied before it is interpreted or translated to machine code.\nThere is a Tier 2 interpreter, but it is mostly intended for debugging the earlier stages of the optimization pipeline. The Tier 2 interpreter can be enabled by configuring Python with\n--enable-experimental-jit=interpreter\n.When the JIT is enabled, the optimized Tier 2 IR is translated to machine code, which is then executed.\nThe machine code translation process uses a technique called copy-and-patch. It has no runtime dependencies, but there is a new build-time dependency on LLVM.\nSee also\n(JIT by Brandt Bucher, inspired by a paper by Haoran Xu and Fredrik Kjolstad. Tier 2 IR by Mark Shannon and Guido van Rossum. Tier 2 optimizer by Ken Jin.)\nDefined mutation semantics for locals()\n\u00b6\nHistorically, the expected result of mutating the return value of\nlocals()\nhas been left to individual Python implementations to define.\nStarting from Python 3.13, PEP 667 standardises\nthe historical behavior of CPython for most code execution scopes,\nbut changes optimized scopes\n(functions, generators, coroutines, comprehensions, and generator expressions)\nto explicitly return independent snapshots of the currently assigned local\nvariables, including locally referenced nonlocal variables captured in closures.\nThis change to the semantics of locals()\nin optimized scopes also\naffects the default behavior of code execution functions that implicitly\ntarget locals()\nif no explicit namespace is provided\n(such as exec()\nand eval()\n).\nIn previous versions, whether or not changes could be accessed by calling\nlocals()\nafter calling the code execution function was\nimplementation-dependent. In CPython specifically, such code would typically\nappear to work as desired, but could sometimes fail in optimized scopes based\non other code (including debuggers and code execution tracing tools)\npotentially resetting the shared snapshot in that scope.\nNow, the code will always run against an independent snapshot of\nthe local variables in optimized scopes, and hence the changes will never\nbe visible in subsequent calls to locals()\n.\nTo access the changes made in these cases, an explicit namespace reference\nmust now be passed to the relevant function.\nAlternatively, it may make sense to update affected code to use a higher level\ncode execution API that returns the resulting code execution namespace\n(e.g. runpy.run_path()\nwhen executing Python files from disk).\nTo ensure debuggers and similar tools can reliably update local variables in\nscopes affected by this change, FrameType.f_locals\nnow\nreturns a write-through proxy to the frame\u2019s local and locally referenced\nnonlocal variables in these scopes, rather than returning an inconsistently\nupdated shared dict\ninstance with undefined runtime semantics.\nSee PEP 667 for more details, including related C API changes and deprecations. Porting notes are also provided below for the affected Python APIs and C APIs.\n(PEP and implementation contributed by Mark Shannon and Tian Gao in gh-74929. Documentation updates provided by Guido van Rossum and Alyssa Coghlan.)\nSupport for mobile platforms\u00b6\nPEP 730: iOS is now a PEP 11 supported platform, with the\narm64-apple-ios\nand arm64-apple-ios-simulator\ntargets at tier 3\n(iPhone and iPad devices released after 2013 and the Xcode iOS simulator\nrunning on Apple silicon hardware, respectively).\nx86_64-apple-ios-simulator\n(the Xcode iOS simulator running on older x86_64\nhardware)\nis not a tier 3 supported platform, but will have best-effort support.\n(PEP written and implementation contributed by Russell Keith-Magee in\ngh-114099.)\nPEP 738: Android is now a PEP 11 supported platform, with the\naarch64-linux-android\nand x86_64-linux-android\ntargets at tier 3.\nThe 32-bit targets arm-linux-androideabi\nand i686-linux-android\nare not tier 3 supported platforms, but will have best-effort support.\n(PEP written and implementation contributed by Malcolm Smith in\ngh-116622.)\nOther Language Changes\u00b6\nThe compiler now strips common leading whitespace from every line in a docstring. This reduces the size of the bytecode cache (such as\n.pyc\nfiles), with reductions in file size of around 5%, for example insqlalchemy.orm.session\nfrom SQLAlchemy 2.0. This change affects tools that use docstrings, such asdoctest\n.>>> def spam(): ... \"\"\" ... This is a docstring with ... leading whitespace. ... ... It even has multiple paragraphs! ... \"\"\" ... >>> spam.__doc__ '\\nThis is a docstring with\\n leading whitespace.\\n\\nIt even has multiple paragraphs!\\n'\n(Contributed by Inada Naoki in gh-81283.)\nAnnotation scopes within class scopes can now contain lambdas and comprehensions. Comprehensions that are located within class scopes are not inlined into their parent scope.\nclass C[T]: type Alias = lambda: T\nFuture statements are no longer triggered by relative imports of the\n__future__\nmodule, meaning that statements of the formfrom .__future__ import ...\nare now simply standard relative imports, with no special features activated. (Contributed by Jeremiah Gabriel Pascual in gh-118216.)global\ndeclarations are now permitted inexcept\nblocks when that global is used in theelse\nblock. Previously this raised an erroneousSyntaxError\n. (Contributed by Irit Katriel in gh-111123.)Add\nPYTHON_FROZEN_MODULES\n, a new environment variable that determines whether frozen modules are ignored by the import machinery, equivalent to the-X frozen_modules\ncommand-line option. (Contributed by Yilei Yang in gh-111374.)Add support for the perf profiler working without frame pointers through the new environment variable\nPYTHON_PERF_JIT_SUPPORT\nand command-line option-X perf_jit\n. (Contributed by Pablo Galindo in gh-118518.)The location of a\n.python_history\nfile can be changed via the newPYTHON_HISTORY\nenvironment variable. (Contributed by Levi Sabah, Zackery Spytz and Hugo van Kemenade in gh-73965.)Classes have a new\n__static_attributes__\nattribute. This is populated by the compiler with a tuple of the class\u2019s attribute names which are assigned throughself.<name>\nfrom any function in its body. (Contributed by Irit Katriel in gh-115775.)The compiler now creates a\n__firstlineno__\nattribute on classes with the line number of the first line of the class definition. (Contributed by Serhiy Storchaka in gh-118465.)The\nexec()\nandeval()\nbuiltins now accept the globals and locals arguments as keywords. (Contributed by Raphael Gaschignard in gh-105879)The\ncompile()\nbuiltin now accepts a new flag,ast.PyCF_OPTIMIZED_AST\n, which is similar toast.PyCF_ONLY_AST\nexcept that the returned AST is optimized according to the value of the optimize argument. (Contributed by Irit Katriel in gh-108113).Add a\n__name__\nattribute onproperty\nobjects. (Contributed by Eugene Toder in gh-101860.)Add\nPythonFinalizationError\n, a new exception derived fromRuntimeError\nand used to signal when operations are blocked during finalization. The following callables now raisePythonFinalizationError\n, instead ofRuntimeError\n:(Contributed by Victor Stinner in gh-114570.)\nAllow the count argument of\nstr.replace()\nto be a keyword. (Contributed by Hugo van Kemenade in gh-106487.)Many functions now emit a warning if a boolean value is passed as a file descriptor argument. This can help catch some errors earlier. (Contributed by Serhiy Storchaka in gh-82626.)\nAdded\nname\nandmode\nattributes for compressed and archived file-like objects in thebz2\n,lzma\n,tarfile\n, andzipfile\nmodules. (Contributed by Serhiy Storchaka in gh-115961.)\nNew Modules\u00b6\ndbm.sqlite3\n: An SQLite backend fordbm\n. (Contributed by Raymond Hettinger and Erlend E. Aasland in gh-100414.)\nImproved Modules\u00b6\nargparse\u00b6\nAdd the deprecated parameter to the\nadd_argument()\nandadd_parser()\nmethods, to enable deprecating command-line options, positional arguments, and subcommands. (Contributed by Serhiy Storchaka in gh-83648.)\narray\u00b6\nAdd the\n'w'\ntype code (Py_UCS4\n) for Unicode characters. It should be used instead of the deprecated'u'\ntype code. (Contributed by Inada Naoki in gh-80480.)Register\narray.array\nas aMutableSequence\nby implementing theclear()\nmethod. (Contributed by Mike Zimin in gh-114894.)\nast\u00b6\nThe constructors of node types in the\nast\nmodule are now stricter in the arguments they accept, with more intuitive behavior when arguments are omitted.If an optional field on an AST node is not included as an argument when constructing an instance, the field will now be set to\nNone\n. Similarly, if a list field is omitted, that field will now be set to an empty list, and if anexpr_context\nfield is omitted, it defaults toLoad()\n. (Previously, in all cases, the attribute would be missing on the newly constructed AST node instance.)In all other cases, where a required argument is omitted, the node constructor will emit a\nDeprecationWarning\n. This will raise an exception in Python 3.15. Similarly, passing a keyword argument to the constructor that does not map to a field on the AST node is now deprecated, and will raise an exception in Python 3.15.These changes do not apply to user-defined subclasses of\nast.AST\nunless the class opts in to the new behavior by defining theAST._field_types\nmapping.(Contributed by Jelle Zijlstra in gh-105858, gh-117486, and gh-118851.)\nast.parse()\nnow accepts an optional argument optimize which is passed on tocompile()\n. This makes it possible to obtain an optimized AST. (Contributed by Irit Katriel in gh-108113.)\nasyncio\u00b6\nasyncio.as_completed()\nnow returns an object that is both an asynchronous iterator and a plain iterator of awaitables. The awaitables yielded by asynchronous iteration include original task or future objects that were passed in, making it easier to associate results with the tasks being completed. (Contributed by Justin Arthur in gh-77714.)asyncio.loop.create_unix_server()\nwill now automatically remove the Unix socket when the server is closed. (Contributed by Pierre Ossman in gh-111246.)DatagramTransport.sendto()\nwill now send zero-length datagrams if called with an empty bytes object. The transport flow control also now accounts for the datagram header when calculating the buffer size. (Contributed by Jamie Phan in gh-115199.)Add\nQueue.shutdown\nandQueueShutDown\nto manage queue termination. (Contributed by Laurie Opperman and Yves Duprat in gh-104228.)Add the\nServer.close_clients()\nandServer.abort_clients()\nmethods, which more forcefully close an asyncio server. (Contributed by Pierre Ossman in gh-113538.)Accept a tuple of separators in\nStreamReader.readuntil()\n, stopping when any one of them is encountered. (Contributed by Bruce Merry in gh-81322.)Improve the behavior of\nTaskGroup\nwhen an external cancellation collides with an internal cancellation. For example, when two task groups are nested and both experience an exception in a child task simultaneously, it was possible that the outer task group would hang, because its internal cancellation was swallowed by the inner task group.In the case where a task group is cancelled externally and also must raise an\nExceptionGroup\n, it will now call the parent task\u2019scancel()\nmethod. This ensures that aCancelledError\nwill be raised at the nextawait\n, so the cancellation is not lost.An added benefit of these changes is that task groups now preserve the cancellation count (\ncancelling()\n).In order to handle some corner cases,\nuncancel()\nmay now reset the undocumented_must_cancel\nflag when the cancellation count reaches zero.(Inspired by an issue reported by Arthur Tacca in gh-116720.)\nWhen\nTaskGroup.create_task()\nis called on an inactiveTaskGroup\n, the given coroutine will be closed (which prevents aRuntimeWarning\nabout the given coroutine being never awaited). (Contributed by Arthur Tacca and Jason Zhang in gh-115957.)\nbase64\u00b6\nAdd\nz85encode()\nandz85decode()\nfunctions for encodingbytes\nas Z85 data and decoding Z85-encoded data tobytes\n. (Contributed by Matan Perelman in gh-75299.)\ncompileall\u00b6\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead ofos.cpu_count()\n. (Contributed by Victor Stinner in gh-109649.)\nconcurrent.futures\u00b6\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead ofos.cpu_count()\n. (Contributed by Victor Stinner in gh-109649.)\nconfigparser\u00b6\nConfigParser\nnow has support for unnamed sections, which allows for top-level key-value pairs. This can be enabled with the new allow_unnamed_section parameter. (Contributed by Pedro Sousa Lacerda in gh-66449.)\ncopy\u00b6\nThe new\nreplace()\nfunction and thereplace protocol\nmake creating modified copies of objects much simpler. This is especially useful when working with immutable objects. The following types support thereplace()\nfunction and implement the replace protocol:Any user-defined class can also support\ncopy.replace()\nby defining the__replace__()\nmethod. (Contributed by Serhiy Storchaka in gh-108751.)\nctypes\u00b6\nAs a consequence of necessary internal refactoring, initialization of internal metaclasses now happens in\n__init__\nrather than in__new__\n. This affects projects that subclass these internal metaclasses to provide custom initialization. Generally:Custom logic that was done in\n__new__\nafter callingsuper().__new__\nshould be moved to__init__\n.To create a class, call the metaclass, not only the metaclass\u2019s\n__new__\nmethod.\nSee gh-124520 for discussion and links to changes in some affected projects.\nctypes.Structure\nobjects have a new_align_\nattribute which allows the alignment of the structure being packed to/from memory to be specified explicitly. (Contributed by Matt Sanderson in gh-112433)\ndbm\u00b6\nAdd\ndbm.sqlite3\n, a new module which implements an SQLite backend, and make it the defaultdbm\nbackend. (Contributed by Raymond Hettinger and Erlend E. Aasland in gh-100414.)Allow removing all items from the database through the new\ngdbm.clear()\nandndbm.clear()\nmethods. (Contributed by Donghee Na in gh-107122.)\ndis\u00b6\nChange the output of\ndis\nmodule functions to show logical labels for jump targets and exception handlers, rather than offsets. The offsets can be added with the new-O\ncommand-line option or the show_offsets argument. (Contributed by Irit Katriel in gh-112137.)get_instructions()\nno longer represents cache entries as separate instructions. Instead, it returns them as part of theInstruction\n, in the new cache_info field. The show_caches argument toget_instructions()\nis deprecated and no longer has any effect. (Contributed by Irit Katriel in gh-112962.)\ndoctest\u00b6\ndoctest\noutput is now colored by default. This can be controlled via the newPYTHON_COLORS\nenvironment variable as well as the canonicalNO_COLOR\nandFORCE_COLOR\nenvironment variables. See also Controlling color. (Contributed by Hugo van Kemenade in gh-117225.)The\nDocTestRunner.run()\nmethod now counts the number of skipped tests. Add theDocTestRunner.skips\nandTestResults.skipped\nattributes. (Contributed by Victor Stinner in gh-108794.)\nemail\u00b6\nHeaders with embedded newlines are now quoted on output. The\ngenerator\nwill now refuse to serialize (write) headers that are improperly folded or delimited, such that they would be parsed as multiple headers or joined with adjacent data. If you need to turn this safety feature off, setverify_generated_headers\n. (Contributed by Bas Bloemsaat and Petr Viktorin in gh-121650.)getaddresses()\nandparseaddr()\nnow return('', '')\npairs in more situations where invalid email addresses are encountered instead of potentially inaccurate values. The two functions have a new optional strict parameter (defaultTrue\n). To get the old behavior (accepting malformed input), usestrict=False\n.getattr(email.utils, 'supports_strict_parsing', False)\ncan be used to check if the strict parameter is available. (Contributed by Thomas Dwyer and Victor Stinner for gh-102988 to improve the CVE 2023-27043 fix.)\nenum\u00b6\nfractions\u00b6\nFraction\nobjects now support the standard format specification mini-language rules for fill, alignment, sign handling, minimum width, and grouping. (Contributed by Mark Dickinson in gh-111320.)\nglob\u00b6\nAdd\ntranslate()\n, a function to convert a path specification with shell-style wildcards to a regular expression. (Contributed by Barney Gale in gh-72904.)\nimportlib\u00b6\nThe following functions in\nimportlib.resources\nnow allow accessing a directory (or tree) of resources, using multiple positional arguments (the encoding and errors arguments in the text-reading functions are now keyword-only):These functions are no longer deprecated and are not scheduled for removal. (Contributed by Petr Viktorin in gh-116608.)\ncontents()\nremains deprecated in favor of the fully-featuredTraversable\nAPI. However, there is now no plan to remove it. (Contributed by Petr Viktorin in gh-116608.)\nio\u00b6\nThe\nIOBase\nfinalizer now logs any errors raised by theclose()\nmethod withsys.unraisablehook\n. Previously, errors were ignored silently by default, and only logged in Python Development Mode or when using a Python debug build. (Contributed by Victor Stinner in gh-62948.)\nipaddress\u00b6\nAdd the\nIPv4Address.ipv6_mapped\nproperty, which returns the IPv4-mapped IPv6 address. (Contributed by Charles Machalow in gh-109466.)Fix\nis_global\nandis_private\nbehavior inIPv4Address\n,IPv6Address\n,IPv4Network\n, andIPv6Network\n. (Contributed by Jakub Stasiak in gh-113171.)\nitertools\u00b6\nbatched()\nhas a new strict parameter, which raises aValueError\nif the final batch is shorter than the specified batch size. (Contributed by Raymond Hettinger in gh-113202.)\nmarshal\u00b6\nAdd the allow_code parameter in module functions. Passing\nallow_code=False\nprevents serialization and de-serialization of code objects which are incompatible between Python versions. (Contributed by Serhiy Storchaka in gh-113626.)\nmath\u00b6\nThe new function\nfma()\nperforms fused multiply-add operations. This computesx * y + z\nwith only a single round, and so avoids any intermediate loss of precision. It wraps thefma()\nfunction provided by C99, and follows the specification of the IEEE 754 \u201cfusedMultiplyAdd\u201d operation for special cases. (Contributed by Mark Dickinson and Victor Stinner in gh-73468.)\nmimetypes\u00b6\nAdd the\nguess_file_type()\nfunction to guess a MIME type from a filesystem path. Using paths withguess_type()\nis now soft deprecated. (Contributed by Serhiy Storchaka in gh-66543.)\nmmap\u00b6\nmmap\nis now protected from crashing on Windows when the mapped memory is inaccessible due to file system errors or access violations. (Contributed by Jannis Weigend in gh-118209.)mmap\nhas a newseekable()\nmethod that can be used when a seekable file-like object is required. Theseek()\nmethod now returns the new absolute position. (Contributed by Donghee Na and Sylvie Liberman in gh-111835.)The new UNIX-only trackfd parameter for\nmmap\ncontrols file descriptor duplication; if false, the file descriptor specified by fileno will not be duplicated. (Contributed by Zackery Spytz and Petr Viktorin in gh-78502.)\nmultiprocessing\u00b6\nThe default number of worker threads and processes is now selected using\nos.process_cpu_count()\ninstead ofos.cpu_count()\n. (Contributed by Victor Stinner in gh-109649.)\nos\u00b6\nAdd\nprocess_cpu_count()\nfunction to get the number of logical CPU cores usable by the calling thread of the current process. (Contributed by Victor Stinner in gh-109649.)cpu_count()\nandprocess_cpu_count()\ncan be overridden through the new environment variablePYTHON_CPU_COUNT\nor the new command-line option-X cpu_count\n. This option is useful for users who need to limit CPU resources of a container system without having to modify application code or the container itself. (Contributed by Donghee Na in gh-109595.)Add a low level interface to Linux\u2019s timer file descriptors via\ntimerfd_create()\n,timerfd_settime()\n,timerfd_settime_ns()\n,timerfd_gettime()\n,timerfd_gettime_ns()\n,TFD_NONBLOCK\n,TFD_CLOEXEC\n,TFD_TIMER_ABSTIME\n, andTFD_TIMER_CANCEL_ON_SET\n(Contributed by Masaru Tsuchiyama in gh-108277.)lchmod()\nand the follow_symlinks argument ofchmod()\nare both now available on Windows. Note that the default value of follow_symlinks inlchmod()\nisFalse\non Windows. (Contributed by Serhiy Storchaka in gh-59616.)fchmod()\nand support for file descriptors inchmod()\nare both now available on Windows. (Contributed by Serhiy Storchaka in gh-113191.)On Windows,\nmkdir()\nandmakedirs()\nnow support passing a mode value of0o700\nto apply access control to the new directory. This implicitly affectstempfile.mkdtemp()\nand is a mitigation for CVE 2024-4030. Other values for mode continue to be ignored. (Contributed by Steve Dower in gh-118486.)posix_spawn()\nnow acceptsNone\nfor the env argument, which makes the newly spawned process use the current process environment. (Contributed by Jakub Kulik in gh-113119.)posix_spawn()\ncan now use thePOSIX_SPAWN_CLOSEFROM\nattribute in the file_actions parameter on platforms that supportposix_spawn_file_actions_addclosefrom_np()\n. (Contributed by Jakub Kulik in gh-113117.)\nos.path\u00b6\nAdd\nisreserved()\nto check if a path is reserved on the current system. This function is only available on Windows. (Contributed by Barney Gale in gh-88569.)On Windows,\nisabs()\nno longer considers paths starting with exactly one slash (\\\nor/\n) to be absolute. (Contributed by Barney Gale and Jon Foster in gh-44626.)realpath()\nnow resolves MS-DOS style file names even if the file is not accessible. (Contributed by Moonsik Park in gh-82367.)\npathlib\u00b6\nAdd\nUnsupportedOperation\n, which is raised instead ofNotImplementedError\nwhen a path operation isn\u2019t supported. (Contributed by Barney Gale in gh-89812.)Add a new constructor for creating\nPath\nobjects from \u2018file\u2019 URIs (file:///\n),Path.from_uri()\n. (Contributed by Barney Gale in gh-107465.)Add\nPurePath.full_match()\nfor matching paths with shell-style wildcards, including the recursive wildcard \u201c**\n\u201d. (Contributed by Barney Gale in gh-73435.)Add the\nPurePath.parser\nclass attribute to store the implementation ofos.path\nused for low-level path parsing and joining. This will be eitherposixpath\norntpath\n.Add recurse_symlinks keyword-only argument to\nPath.glob()\nandrglob()\n. (Contributed by Barney Gale in gh-77609.)Path.glob()\nandrglob()\nnow return files and directories when given a pattern that ends with \u201c**\n\u201d. Previously, only directories were returned. (Contributed by Barney Gale in gh-70303.)Add the follow_symlinks keyword-only argument to\nPath.is_file\n,Path.is_dir\n,Path.owner()\n, andPath.group()\n. (Contributed by Barney Gale in gh-105793 and Kamil Turek in gh-107962.)\npdb\u00b6\nbreakpoint()\nandset_trace()\nnow enter the debugger immediately rather than on the next line of code to be executed. This change prevents the debugger from breaking outside of the context whenbreakpoint()\nis positioned at the end of the context. (Contributed by Tian Gao in gh-118579.)sys.path[0]\nis no longer replaced by the directory of the script being debugged whensys.flags.safe_path\nis set. (Contributed by Tian Gao and Christian Walther in gh-111762.)zipapp\nis now supported as a debugging target. (Contributed by Tian Gao in gh-118501.)Add ability to move between chained exceptions during post-mortem debugging in\npm()\nusing the newexceptions [exc_number]\ncommand for Pdb. (Contributed by Matthias Bussonnier in gh-106676.)Expressions and statements whose prefix is a pdb command are now correctly identified and executed. (Contributed by Tian Gao in gh-108464.)\nqueue\u00b6\nAdd\nQueue.shutdown\nandShutDown\nto manage queue termination. (Contributed by Laurie Opperman and Yves Duprat in gh-104750.)\nrandom\u00b6\nAdd a command-line interface. (Contributed by Hugo van Kemenade in gh-118131.)\nre\u00b6\nRename\nre.error\ntoPatternError\nfor improved clarity.re.error\nis kept for backward compatibility.\nshutil\u00b6\nsite\u00b6\n.pth\nfiles are now decoded using UTF-8 first, and then with the locale encoding if UTF-8 decoding fails. (Contributed by Inada Naoki in gh-117802.)\nsqlite3\u00b6\nA\nResourceWarning\nis now emitted if aConnection\nobject is notclosed\nexplicitly. (Contributed by Erlend E. Aasland in gh-105539.)Add the filter keyword-only parameter to\nConnection.iterdump()\nfor filtering database objects to dump. (Contributed by Mariusz Felisiak in gh-91602.)\nssl\u00b6\nThe\ncreate_default_context()\nAPI now includesVERIFY_X509_PARTIAL_CHAIN\nandVERIFY_X509_STRICT\nin its default flags.Note\nVERIFY_X509_STRICT\nmay reject pre-RFC 5280 or malformed certificates that the underlying OpenSSL implementation might otherwise accept. Whilst disabling this is not recommended, you can do so using:import ssl ctx = ssl.create_default_context() ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT\n(Contributed by William Woodruff in gh-112389.)\nstatistics\u00b6\nAdd\nkde()\nfor kernel density estimation. This makes it possible to estimate a continuous probability density function from a fixed number of discrete samples. (Contributed by Raymond Hettinger in gh-115863.)Add\nkde_random()\nfor sampling from an estimated probability density function created bykde()\n. (Contributed by Raymond Hettinger in gh-115863.)\nsubprocess\u00b6\nThe\nsubprocess\nmodule now uses theposix_spawn()\nfunction in more situations.Notably, when close_fds is\nTrue\n(the default),posix_spawn()\nwill be used when the C library providesposix_spawn_file_actions_addclosefrom_np()\n, which includes recent versions of Linux, FreeBSD, and Solaris. On Linux, this should perform similarly to the existing Linuxvfork()\nbased code.A private control knob\nsubprocess._USE_POSIX_SPAWN\ncan be set toFalse\nif you need to forcesubprocess\nto never useposix_spawn()\n. Please report your reason and platform details in the issue tracker if you set this so that we can improve our API selection logic for everyone. (Contributed by Jakub Kulik in gh-113117.)\nsys\u00b6\nAdd the\n_is_interned()\nfunction to test if a string was interned. This function is not guaranteed to exist in all implementations of Python. (Contributed by Serhiy Storchaka in gh-78573.)\ntempfile\u00b6\nOn Windows, the default mode\n0o700\nused bytempfile.mkdtemp()\nnow limits access to the new directory due to changes toos.mkdir()\n. This is a mitigation for CVE 2024-4030. (Contributed by Steve Dower in gh-118486.)\ntime\u00b6\nOn Windows,\nmonotonic()\nnow uses theQueryPerformanceCounter()\nclock for a resolution of 1 microsecond, instead of theGetTickCount64()\nclock which has a resolution of 15.6 milliseconds. (Contributed by Victor Stinner in gh-88494.)On Windows,\ntime()\nnow uses theGetSystemTimePreciseAsFileTime()\nclock for a resolution of 1 microsecond, instead of theGetSystemTimeAsFileTime()\nclock which has a resolution of 15.6 milliseconds. (Contributed by Victor Stinner in gh-63207.)\ntkinter\u00b6\nAdd\ntkinter\nwidget methods:tk_busy_hold()\n,tk_busy_configure()\n,tk_busy_cget()\n,tk_busy_forget()\n,tk_busy_current()\n, andtk_busy_status()\n. (Contributed by Miguel, klappnase and Serhiy Storchaka in gh-72684.)The\ntkinter\nwidget methodwm_attributes()\nnow accepts the attribute name without the minus prefix to get window attributes, for examplew.wm_attributes('alpha')\nand allows specifying attributes and values to set as keyword arguments, for examplew.wm_attributes(alpha=0.5)\n. (Contributed by Serhiy Storchaka in gh-43457.)wm_attributes()\ncan now return attributes as adict\n, by using the new optional keyword-only parameter return_python_dict. (Contributed by Serhiy Storchaka in gh-43457.)Text.count()\ncan now return a simpleint\nwhen the new optional keyword-only parameter return_ints is used. Otherwise, the single count is returned as a 1-tuple orNone\n. (Contributed by Serhiy Storchaka in gh-97928.)Support the \u201cvsapi\u201d element type in the\nelement_create()\nmethod oftkinter.ttk.Style\n. (Contributed by Serhiy Storchaka in gh-68166.)Add the\nafter_info()\nmethod for Tkinter widgets. (Contributed by Cheryl Sabella in gh-77020.)Add a new\ncopy_replace()\nmethod toPhotoImage\nto copy a region from one image to another, possibly with pixel zooming, subsampling, or both. (Contributed by Serhiy Storchaka in gh-118225.)Add from_coords parameter to the\nPhotoImage\nmethodscopy()\n,zoom()\nandsubsample()\n. Add zoom and subsample parameters to thePhotoImage\nmethodcopy()\n. (Contributed by Serhiy Storchaka in gh-118225.)Add the\nPhotoImage\nmethodsread()\nto read an image from a file anddata()\nto get the image data. Add background and grayscale parameters to thewrite()\nmethod. (Contributed by Serhiy Storchaka in gh-118271.)\ntraceback\u00b6\nAdd the\nexc_type_str\nattribute toTracebackException\n, which holds a string display of the exc_type. Deprecate theexc_type\nattribute, which holds the type object itself. Add parameter save_exc_type (defaultTrue\n) to indicate whetherexc_type\nshould be saved. (Contributed by Irit Katriel in gh-112332.)Add a new show_group keyword-only parameter to\nTracebackException.format_exception_only()\nto (recursively) format the nested exceptions of aBaseExceptionGroup\ninstance. (Contributed by Irit Katriel in gh-105292.)\ntypes\u00b6\nSimpleNamespace\ncan now take a single positional argument to initialise the namespace\u2019s arguments. This argument must either be a mapping or an iterable of key-value pairs. (Contributed by Serhiy Storchaka in gh-108191.)\ntyping\u00b6\nPEP 705: Add\nReadOnly\n, a special typing construct to mark aTypedDict\nitem as read-only for type checkers.PEP 742: Add\nTypeIs\n, a typing construct that can be used to instruct a type checker how to narrow a type.Add\nNoDefault\n, a sentinel object used to represent the defaults of some parameters in thetyping\nmodule. (Contributed by Jelle Zijlstra in gh-116126.)Add\nget_protocol_members()\nto return the set of members defining atyping.Protocol\n. (Contributed by Jelle Zijlstra in gh-104873.)Add\nis_protocol()\nto check whether a class is aProtocol\n. (Contributed by Jelle Zijlstra in gh-104873.)ClassVar\ncan now be nested inFinal\n, and vice versa. (Contributed by Mehdi Drissi in gh-89547.)\nunicodedata\u00b6\nUpdate the Unicode database to version 15.1.0. (Contributed by James Gerity in gh-109559.)\nvenv\u00b6\nAdd support for creating source control management (SCM) ignore files in a virtual environment\u2019s directory. By default, Git is supported. This is implemented as opt-in via the API, which can be extended to support other SCMs (\nEnvBuilder\nandcreate()\n), and opt-out via the CLI, using--without-scm-ignore-files\n. (Contributed by Brett Cannon in gh-108125.)\nwarnings\u00b6\nPEP 702: The new\nwarnings.deprecated()\ndecorator provides a way to communicate deprecations to a static type checker and to warn on usage of deprecated classes and functions. ADeprecationWarning\nmay also be emitted when a decorated function or class is used at runtime. (Contributed by Jelle Zijlstra in gh-104003.)\nxml\u00b6\nAllow controlling Expat >=2.6.0 reparse deferral (CVE 2023-52425) by adding five new methods:\nxml.sax.expatreader.ExpatParser.flush()\n(Contributed by Sebastian Pipping in gh-115623.)\nAdd the\nclose()\nmethod for the iterator returned byiterparse()\nfor explicit cleanup. (Contributed by Serhiy Storchaka in gh-69893.)\nzipimport\u00b6\nOptimizations\u00b6\nSeveral standard library modules have had their import times significantly improved. For example, the import time of the\ntyping\nmodule has been reduced by around a third by removing dependencies onre\nandcontextlib\n. Other modules to enjoy import-time speedups includeemail.utils\n,enum\n,functools\n,importlib.metadata\n, andthreading\n. (Contributed by Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas, and others in gh-109653.)textwrap.indent()\nis now around 30% faster than before for large input. (Contributed by Inada Naoki in gh-107369.)The\nsubprocess\nmodule now uses theposix_spawn()\nfunction in more situations, including when close_fds isTrue\n(the default) on many modern platforms. This should provide a notable performance increase when launching processes on FreeBSD and Solaris. See the subprocess section above for details. (Contributed by Jakub Kulik in gh-113117.)\nRemoved Modules And APIs\u00b6\nPEP 594: Remove \u201cdead batteries\u201d from the standard library\u00b6\nPEP 594 proposed removing 19 modules from the standard library, colloquially referred to as \u2018dead batteries\u2019 due to their historic, obsolete, or insecure status. All of the following modules were deprecated in Python 3.11, and are now removed:\naifc\naudioop\nchunk\ncgi\nandcgitb\ncgi.FieldStorage\ncan typically be replaced withurllib.parse.parse_qsl()\nforGET\nandHEAD\nrequests, and theemail.message\nmodule or the multipart library forPOST\nandPUT\nrequests.cgi.parse()\ncan be replaced by callingurllib.parse.parse_qs()\ndirectly on the desired query string, unless the input ismultipart/form-data\n, which should be replaced as described below forcgi.parse_multipart()\n.cgi.parse_header()\ncan be replaced with the functionality in theemail\npackage, which implements the same MIME RFCs. For example, withemail.message.EmailMessage\n:from email.message import EmailMessage msg = EmailMessage() msg['content-type'] = 'application/json; charset=\"utf8\"' main, params = msg.get_content_type(), msg['content-type'].params\ncgi.parse_multipart()\ncan be replaced with the functionality in theemail\npackage, which implements the same MIME RFCs, or with the multipart library. For example, theemail.message.EmailMessage\nandemail.message.Message\nclasses.\ncrypt\nand the private_crypt\nextension. Thehashlib\nmodule may be an appropriate replacement when simply hashing a value is required. Otherwise, various third-party libraries on PyPI are available:bcrypt: Modern password hashing for your software and your servers.\npasslib: Comprehensive password hashing framework supporting over 30 schemes.\nargon2-cffi: The secure Argon2 password hashing algorithm.\nlegacycrypt:\nctypes\nwrapper to the POSIX crypt library call and associated functionality.crypt_r: Fork of the\ncrypt\nmodule, wrapper to the crypt_r(3) library call and associated functionality.\nimghdr\n: The filetype, puremagic, or python-magic libraries should be used as replacements. For example, thepuremagic.what()\nfunction can be used to replace theimghdr.what()\nfunction for all file formats that were supported byimghdr\n.mailcap\n: Use themimetypes\nmodule instead.msilib\nnis\nnntplib\n: Use the pynntp library from PyPI instead.ossaudiodev\n: For audio playback, use the pygame library from PyPI instead.pipes\n: Use thesubprocess\nmodule instead. Useshlex.quote()\nto replace the undocumentedpipes.quote\nfunction.sndhdr\n: The filetype, puremagic, or python-magic libraries should be used as replacements.spwd\n: Use the python-pam library from PyPI instead.sunau\ntelnetlib\n, Use the telnetlib3 or Exscript libraries from PyPI instead.uu\n: Use thebase64\nmodule instead, as a modern alternative.xdrlib\n(Contributed by Victor Stinner and Zachary Ware in gh-104773 and gh-104780.)\n2to3\u00b6\nRemove the 2to3 program and the\nlib2to3\nmodule, previously deprecated in Python 3.11. (Contributed by Victor Stinner in gh-104780.)\nbuiltins\u00b6\nRemove support for chained\nclassmethod\ndescriptors (introduced in gh-63272). These can no longer be used to wrap other descriptors, such asproperty\n. The core design of this feature was flawed and led to several problems. To \u201cpass-through\u201d aclassmethod\n, consider using the__wrapped__\nattribute that was added in Python 3.10. (Contributed by Raymond Hettinger in gh-89519.)Raise a\nRuntimeError\nwhen callingframe.clear()\non a suspended frame (as has always been the case for an executing frame). (Contributed by Irit Katriel in gh-79932.)\nconfigparser\u00b6\nRemove the undocumented\nLegacyInterpolation\nclass, deprecated in the docstring since Python 3.2, and at runtime since Python 3.11. (Contributed by Hugo van Kemenade in gh-104886.)\nimportlib.metadata\u00b6\nRemove deprecated subscript (\n__getitem__()\n) access for EntryPoint objects. (Contributed by Jason R. Coombs in gh-113175.)\nlocale\u00b6\nRemove the\nlocale.resetlocale()\nfunction, deprecated in Python 3.11. Uselocale.setlocale(locale.LC_ALL, \"\")\ninstead. (Contributed by Victor Stinner in gh-104783.)\nopcode\u00b6\nMove\nopcode.ENABLE_SPECIALIZATION\nto_opcode.ENABLE_SPECIALIZATION\n. This field was added in 3.12, it was never documented, and is not intended for external use. (Contributed by Irit Katriel in gh-105481.)Remove\nopcode.is_pseudo()\n,opcode.MIN_PSEUDO_OPCODE\n, andopcode.MAX_PSEUDO_OPCODE\n, which were added in Python 3.12, but were neither documented nor exposed throughdis\n, and were not intended to be used externally. (Contributed by Irit Katriel in gh-105481.)\noptparse\u00b6\nThis module is no longer considered soft deprecated. While\nargparse\nremains preferred for new projects that aren\u2019t using a third party command line argument processing library, there are aspects of the wayargparse\nworks that mean the lower leveloptparse\nmodule may provide a better foundation for writing argument processing libraries, and for implementing command line applications which adhere more strictly thanargparse\ndoes to various Unix command line processing conventions that originate in the behaviour of the Cgetopt()\nfunction . (Contributed by Alyssa Coghlan and Serhiy Storchaka in gh-126180.)\npathlib\u00b6\nre\u00b6\nRemove the undocumented, deprecated, and broken\nre.template()\nfunction andre.TEMPLATE\n/re.T\nflag. (Contributed by Serhiy Storchaka and Nikita Sobolev in gh-105687.)\ntkinter.tix\u00b6\nRemove the\ntkinter.tix\nmodule, deprecated in Python 3.6. The third-party Tix library which the module wrapped is unmaintained. (Contributed by Zachary Ware in gh-75552.)\nturtle\u00b6\nRemove the\nRawTurtle.settiltangle()\nmethod, deprecated in the documentation since Python 3.1 and at runtime since Python 3.11. (Contributed by Hugo van Kemenade in gh-104876.)\ntyping\u00b6\nRemove the\ntyping.io\nandtyping.re\nnamespaces, deprecated since Python 3.8. The items in those namespaces can be imported directly from thetyping\nmodule. (Contributed by Sebastian Rittau in gh-92871.)Remove the keyword-argument method of creating\nTypedDict\ntypes, deprecated in Python 3.11. (Contributed by Tomas Roun in gh-104786.)\nunittest\u00b6\nRemove the following\nunittest\nfunctions, deprecated in Python 3.11:unittest.findTestCases()\nunittest.makeSuite()\nunittest.getTestCaseNames()\nUse\nTestLoader\nmethods instead:(Contributed by Hugo van Kemenade in gh-104835.)\nRemove the untested and undocumented\nTestProgram.usageExit()\nmethod, deprecated in Python 3.11. (Contributed by Hugo van Kemenade in gh-104992.)\nurllib\u00b6\nRemove the cafile, capath, and cadefault parameters of the\nurllib.request.urlopen()\nfunction, deprecated in Python 3.6. Use the context parameter instead with anSSLContext\ninstance. Thessl.SSLContext.load_cert_chain()\nfunction can be used to load specific certificates, or letssl.create_default_context()\nselect the operating system\u2019s trusted certificate authority (CA) certificates. (Contributed by Victor Stinner in gh-105382.)\nwebbrowser\u00b6\nRemove the untested and undocumented\nMacOSX\nclass, deprecated in Python 3.11. Use theMacOSXOSAScript\nclass (introduced in Python 3.2) instead. (Contributed by Hugo van Kemenade in gh-104804.)Remove the deprecated\nMacOSXOSAScript._name\nattribute. Use theMacOSXOSAScript.name\nattribute instead. (Contributed by Nikita Sobolev in gh-105546.)\nNew Deprecations\u00b6\n-\nDeprecate the undocumented\nSetPointerType()\nfunction, to be removed in Python 3.15. (Contributed by Victor Stinner in gh-105733.)Soft-deprecate the\nARRAY()\nfunction in favour oftype * length\nmultiplication. (Contributed by Victor Stinner in gh-105733.)\ndis\n:-\nDeprecate non-integer numbers as arguments to functions and methods that consider plural forms in the\ngettext\nmodule, even if no translation was found. (Contributed by Serhiy Storchaka in gh-88434.)\nglob\n:Deprecate the undocumented\nglob0()\nandglob1()\nfunctions. Useglob()\nand pass a path-like object specifying the root directory to the root_dir parameter instead. (Contributed by Barney Gale in gh-117337.)\n-\nDeprecate\nCGIHTTPRequestHandler\n, to be removed in Python 3.15. Process-based CGI HTTP servers have been out of favor for a very long time. This code was outdated, unmaintained, and rarely used. It has a high potential for both security and functionality bugs. (Contributed by Gregory P. Smith in gh-109096.)Deprecate the\n--cgi\nflag to the python -m http.server command-line interface, to be removed in Python 3.15. (Contributed by Gregory P. Smith in gh-109096.)\n-\nSoft-deprecate file path arguments to\nguess_type()\n, useguess_file_type()\ninstead. (Contributed by Serhiy Storchaka in gh-66543.)\nre\n:Deprecate passing the optional maxsplit, count, or flags arguments as positional arguments to the module-level\nsplit()\n,sub()\n, andsubn()\nfunctions. These parameters will become keyword-only in a future version of Python. (Contributed by Serhiy Storchaka in gh-56166.)\n-\nDeprecate\nPurePath.is_reserved()\n, to be removed in Python 3.15. Useos.path.isreserved()\nto detect reserved paths on Windows. (Contributed by Barney Gale in gh-88569.)\n-\nDeprecate\njava_ver()\n, to be removed in Python 3.15. This function is only useful for Jython support, has a confusing API, and is largely untested. (Contributed by Nikita Sobolev in gh-116349.)\n-\nDeprecate the undocumented\nispackage()\nfunction. (Contributed by Zackery Spytz in gh-64020.)\n-\nDeprecate passing more than one positional argument to the\nconnect()\nfunction and theConnection\nconstructor. The remaining parameters will become keyword-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-107948.)Deprecate passing name, number of arguments, and the callable as keyword arguments for\nConnection.create_function()\nandConnection.create_aggregate()\nThese parameters will become positional-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-108278.)Deprecate passing the callback callable by keyword for the\nset_authorizer()\n,set_progress_handler()\n, andset_trace_callback()\nConnection\nmethods. The callback callables will become positional-only in Python 3.15. (Contributed by Erlend E. Aasland in gh-108278.)\nsys\n:Deprecate the\n_enablelegacywindowsfsencoding()\nfunction, to be removed in Python 3.16. Use thePYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead. (Contributed by Inada Naoki in gh-73427.)\n-\nDeprecate the undocumented and unused\nTarFile.tarfile\nattribute, to be removed in Python 3.16. (Contributed in gh-115256.)\n-\nDeprecate the\nTracebackException.exc_type\nattribute. UseTracebackException.exc_type_str\ninstead. (Contributed by Irit Katriel in gh-112332.)\n-\nDeprecate the undocumented keyword argument syntax for creating\nNamedTuple\nclasses (e.g.Point = NamedTuple(\"Point\", x=int, y=int)\n), to be removed in Python 3.15. Use the class-based syntax or the functional syntax instead. (Contributed by Alex Waygood in gh-105566.)Deprecate omitting the fields parameter when creating a\nNamedTuple\nortyping.TypedDict\nclass, and deprecate passingNone\nto the fields parameter of both types. Python 3.15 will require a valid sequence for the fields parameter. To create a NamedTuple class with zero fields, useclass NT(NamedTuple): pass\norNT = NamedTuple(\"NT\", ())\n. To create a TypedDict class with zero fields, useclass TD(TypedDict): pass\norTD = TypedDict(\"TD\", {})\n. (Contributed by Alex Waygood in gh-105566 and gh-105570.)Deprecate the\ntyping.no_type_check_decorator()\ndecorator function, to be removed in in Python 3.15. After eight years in thetyping\nmodule, it has yet to be supported by any major type checker. (Contributed by Alex Waygood in gh-106309.)Deprecate\ntyping.AnyStr\n. In Python 3.16, it will be removed fromtyping.__all__\n, and aDeprecationWarning\nwill be emitted at runtime when it is imported or accessed. It will be removed entirely in Python 3.18. Use the new type parameter syntax instead. (Contributed by Michael The in gh-107116.)\nwave\n:Deprecate the\ngetmark()\n,setmark()\n, andgetmarkers()\nmethods of theWave_read\nandWave_write\nclasses, to be removed in Python 3.15. (Contributed by Victor Stinner in gh-105096.)\nPending Removal in Python 3.14\u00b6\nargparse\n: The type, choices, and metavar parameters ofargparse.BooleanOptionalAction\nare deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)ast\n: The following features have been deprecated in documentation since Python 3.8, now cause aDeprecationWarning\nto be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:ast.Num\nast.Str\nast.Bytes\nast.NameConstant\nast.Ellipsis\nUse\nast.Constant\ninstead. (Contributed by Serhiy Storchaka in gh-90953.)-\nThe child watcher classes\nMultiLoopChildWatcher\n,FastChildWatcher\n,AbstractChildWatcher\nandSafeChildWatcher\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)asyncio.set_child_watcher()\n,asyncio.get_child_watcher()\n,asyncio.AbstractEventLoopPolicy.set_child_watcher()\nandasyncio.AbstractEventLoopPolicy.get_child_watcher()\nare deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)The\nget_event_loop()\nmethod of the default event loop policy now emits aDeprecationWarning\nif there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in gh-100160.)\ncollections.abc\n: DeprecatedByteString\n. PreferSequence\norBuffer\n. For use in typing, prefer a union, likebytes | bytearray\n, orcollections.abc.Buffer\n. (Contributed by Shantanu Jain in gh-91896.)email\n: Deprecated the isdst parameter inemail.utils.localtime()\n. (Contributed by Alan Williams in gh-72346.)importlib.abc\ndeprecated classes:importlib.abc.ResourceReader\nimportlib.abc.Traversable\nimportlib.abc.TraversableResources\nUse\nimportlib.resources.abc\nclasses instead:(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)\nitertools\nhad undocumented, inefficient, historically buggy, and inconsistent support for copy, deepcopy, and pickle operations. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)multiprocessing\n: The default start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where'fork'\nis currently the default (gh-84559). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use theget_context()\norset_start_method()\nAPIs to explicitly specify when your code requires'fork'\n. See Contexts and start methods.pathlib\n:is_relative_to()\nandrelative_to()\n: passing additional arguments is deprecated.pkgutil\n:find_loader()\nandget_loader()\nnow raiseDeprecationWarning\n; useimportlib.util.find_spec()\ninstead. (Contributed by Nikita Sobolev in gh-97850.)pty\n:master_open()\n: usepty.openpty()\n.slave_open()\n: usepty.openpty()\n.\n-\nversion\nandversion_info\n.execute()\nandexecutemany()\nif named placeholders are used and parameters is a sequence instead of adict\n.\ntyping\n:ByteString\n, deprecated since Python 3.9, now causes aDeprecationWarning\nto be emitted when it is used.urllib\n:urllib.parse.Quoter\nis deprecated: it was not intended to be a public API. (Contributed by Gregory P. Smith in gh-88168.)\nPending Removal in Python 3.15\u00b6\nThe import system:\nSetting\n__cached__\non a module while failing to set__spec__.cached\nis deprecated. In Python 3.15,__cached__\nwill cease to be set or take into consideration by the import system or standard library. (gh-97879)Setting\n__package__\non a module while failing to set__spec__.parent\nis deprecated. In Python 3.15,__package__\nwill cease to be set or take into consideration by the import system or standard library. (gh-97879)\n-\nThe undocumented\nctypes.SetPointerType()\nfunction has been deprecated since Python 3.13.\n-\nThe obsolete and rarely used\nCGIHTTPRequestHandler\nhas been deprecated since Python 3.13. No direct replacement exists. Anything is better than CGI to interface a web server with a request handler.The\n--cgi\nflag to the python -m http.server command-line interface has been deprecated since Python 3.13.\n-\nThe\ngetdefaultlocale()\nfunction has been deprecated since Python 3.11. Its removal was originally planned for Python 3.13 (gh-90817), but has been postponed to Python 3.15. Usegetlocale()\n,setlocale()\n, andgetencoding()\ninstead. (Contributed by Hugo van Kemenade in gh-111187.)\n-\nPurePath.is_reserved()\nhas been deprecated since Python 3.13. Useos.path.isreserved()\nto detect reserved paths on Windows.\n-\njava_ver()\nhas been deprecated since Python 3.13. This function is only useful for Jython support, has a confusing API, and is largely untested.\n-\nRLock()\nwill take no arguments in Python 3.15. Passing any arguments has been deprecated since Python 3.14, as the Python version does not permit any arguments, but the C version allows any number of positional or keyword arguments, ignoring every argument.\n-\ntypes.CodeType\n: Accessingco_lnotab\nwas deprecated in PEP 626 since 3.10 and was planned to be removed in 3.12, but it only got a properDeprecationWarning\nin 3.12. May be removed in 3.15. (Contributed by Nikita Sobolev in gh-101866.)\n-\nThe undocumented keyword argument syntax for creating\nNamedTuple\nclasses (e.g.Point = NamedTuple(\"Point\", x=int, y=int)\n) has been deprecated since Python 3.13. Use the class-based syntax or the functional syntax instead.The\ntyping.no_type_check_decorator()\ndecorator function has been deprecated since Python 3.13. After eight years in thetyping\nmodule, it has yet to be supported by any major type checker.\nwave\n:The\ngetmark()\n,setmark()\n, andgetmarkers()\nmethods of theWave_read\nandWave_write\nclasses have been deprecated since Python 3.13.\nPending removal in Python 3.16\u00b6\nThe import system:\nSetting\n__loader__\non a module while failing to set__spec__.loader\nis deprecated. In Python 3.16,__loader__\nwill cease to be set or taken into consideration by the import system or the standard library.\n-\nThe\n'u'\nformat code (wchar_t\n) has been deprecated in documentation since Python 3.3 and at runtime since Python 3.13. Use the'w'\nformat code (Py_UCS4\n) for Unicode characters instead.\n-\nasyncio.iscoroutinefunction()\nis deprecated and will be removed in Python 3.16, useinspect.iscoroutinefunction()\ninstead. (Contributed by Jiahao Li and Kumar Aditya in gh-122875.)\n-\nBitwise inversion on boolean types,\n~True\nor~False\nhas been deprecated since Python 3.12, as it produces surprising and unintuitive results (-2\nand-1\n). Usenot x\ninstead for the logical negation of a Boolean. In the rare case that you need the bitwise inversion of the underlying integer, convert toint\nexplicitly (~int(x)\n).\n-\nThe\nExecError\nexception has been deprecated since Python 3.14. It has not been used by any function inshutil\nsince Python 3.4, and is now an alias ofRuntimeError\n.\n-\nThe\nClass.get_methods\nmethod has been deprecated since Python 3.14.\nsys\n:The\n_enablelegacywindowsfsencoding()\nfunction has been deprecated since Python 3.13. Use thePYTHONLEGACYWINDOWSFSENCODING\nenvironment variable instead.\n-\nThe undocumented and unused\nTarFile.tarfile\nattribute has been deprecated since Python 3.13.\nPending Removal in Future Versions\u00b6\nThe following APIs will be removed in the future, although there is currently no date scheduled for their removal.\nargparse\n: Nesting argument groups and nesting mutually exclusive groups are deprecated.-\nbool(NotImplemented)\n.Generators:\nthrow(type, exc, tb)\nandathrow(type, exc, tb)\nsignature is deprecated: usethrow(exc)\nandathrow(exc)\ninstead, the single argument signature.Currently Python accepts numeric literals immediately followed by keywords, for example\n0in x\n,1or x\n,0if 1else 2\n. It allows confusing and ambiguous expressions like[0x1for x in y]\n(which can be interpreted as[0x1 for x in y]\nor[0x1f or x in y]\n). A syntax warning is raised if the numeric literal is immediately followed by one of keywordsand\n,else\n,for\n,if\n,in\n,is\nandor\n. In a future release it will be changed to a syntax error. (gh-87999)Support for\n__index__()\nand__int__()\nmethod returning non-int type: these methods will be required to return an instance of a strict subclass ofint\n.Support for\n__float__()\nmethod returning a strict subclass offloat\n: these methods will be required to return an instance offloat\n.Support for\n__complex__()\nmethod returning a strict subclass ofcomplex\n: these methods will be required to return an instance ofcomplex\n.Delegation of\nint()\nto__trunc__()\nmethod.Passing a complex number as the real or imag argument in the\ncomplex()\nconstructor is now deprecated; it should only be passed as a single positional argument. (Contributed by Serhiy Storchaka in gh-109218.)\ncalendar\n:calendar.January\nandcalendar.February\nconstants are deprecated and replaced bycalendar.JANUARY\nandcalendar.FEBRUARY\n. (Contributed by Prince Roshan in gh-103636.)codeobject.co_lnotab\n: use thecodeobject.co_lines()\nmethod instead.-\nutcnow()\n: usedatetime.datetime.now(tz=datetime.UTC)\n.utcfromtimestamp()\n: usedatetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)\n.\ngettext\n: Plural value must be an integer.-\nload_module()\nmethod: useexec_module()\ninstead.cache_from_source()\ndebug_override parameter is deprecated: use the optimization parameter instead.\n-\nEntryPoints\ntuple interface.Implicit\nNone\non return values.\nlogging\n: thewarn()\nmethod has been deprecated since Python 3.3, usewarning()\ninstead.mailbox\n: Use of StringIO input and text mode is deprecated, use BytesIO and binary mode instead.os\n: Callingos.register_at_fork()\nin multi-threaded process.pydoc.ErrorDuringImport\n: A tuple value for exc_info parameter is deprecated, use an exception instance.re\n: More strict rules are now applied for numerical group references and group names in regular expressions. Only sequence of ASCII digits is now accepted as a numerical reference. The group name in bytes patterns and replacement strings can now only contain ASCII letters and digits and underscore. (Contributed by Serhiy Storchaka in gh-91760.)sre_compile\n,sre_constants\nandsre_parse\nmodules.shutil\n:rmtree()\n\u2019s onerror parameter is deprecated in Python 3.12; use the onexc parameter instead.ssl\noptions and protocols:ssl.SSLContext\nwithout protocol argument is deprecated.ssl.SSLContext\n:set_npn_protocols()\nandselected_npn_protocol()\nare deprecated: use ALPN instead.ssl.OP_NO_SSL*\noptionsssl.OP_NO_TLS*\noptionsssl.PROTOCOL_SSLv3\nssl.PROTOCOL_TLS\nssl.PROTOCOL_TLSv1\nssl.PROTOCOL_TLSv1_1\nssl.PROTOCOL_TLSv1_2\nssl.TLSVersion.SSLv3\nssl.TLSVersion.TLSv1\nssl.TLSVersion.TLSv1_1\nsysconfig.is_python_build()\ncheck_home parameter is deprecated and ignored.threading\nmethods:threading.Condition.notifyAll()\n: usenotify_all()\n.threading.Event.isSet()\n: useis_set()\n.threading.Thread.isDaemon()\n,threading.Thread.setDaemon()\n: usethreading.Thread.daemon\nattribute.threading.Thread.getName()\n,threading.Thread.setName()\n: usethreading.Thread.name\nattribute.threading.currentThread()\n: usethreading.current_thread()\n.threading.activeCount()\n: usethreading.active_count()\n.\nunittest.IsolatedAsyncioTestCase\n: it is deprecated to return a value that is notNone\nfrom a test case.urllib.parse\ndeprecated functions:urlparse()\ninsteadsplitattr()\nsplithost()\nsplitnport()\nsplitpasswd()\nsplitport()\nsplitquery()\nsplittag()\nsplittype()\nsplituser()\nsplitvalue()\nto_bytes()\nurllib.request\n:URLopener\nandFancyURLopener\nstyle of invoking requests is deprecated. Use newerurlopen()\nfunctions and methods.wsgiref\n:SimpleHandler.stdout.write()\nshould not do partial writes.xml.etree.ElementTree\n: Testing the truth value of anElement\nis deprecated. In a future release it will always returnTrue\n. Prefer explicitlen(elem)\norelem is not None\ntests instead.zipimport.zipimporter.load_module()\nis deprecated: useexec_module()\ninstead.\nCPython Bytecode Changes\u00b6\nThe oparg of\nYIELD_VALUE\nis now1\nif the yield is part of a yield-from or await, and0\notherwise. The oparg ofRESUME\nwas changed to add a bit indicating if the except-depth is 1, which is needed to optimize closing of generators. (Contributed by Irit Katriel in gh-111354.)\nC API Changes\u00b6\nNew Features\u00b6\nAdd the PyMonitoring C API for generating PEP 669 monitoring events:\n(Contributed by Irit Katriel in gh-111997).\nAdd\nPyMutex\n, a lightweight mutex that occupies a single byte, and the newPyMutex_Lock()\nandPyMutex_Unlock()\nfunctions.PyMutex_Lock()\nwill release the GIL (if currently held) if the operation needs to block. (Contributed by Sam Gross in gh-108724.)Add the PyTime C API to provide access to system clocks:\nPyTime_MIN\nandPyTime_MAX\n.\n(Contributed by Victor Stinner and Petr Viktorin in gh-110850.)\nAdd the\nPyDict_ContainsString()\nfunction with the same behavior asPyDict_Contains()\n, but key is specified as a const char* UTF-8 encoded bytes string, rather than a PyObject*. (Contributed by Victor Stinner in gh-108314.)Add the\nPyDict_GetItemRef()\nandPyDict_GetItemStringRef()\nfunctions, which behave similarly toPyDict_GetItemWithError()\n, but return a strong reference instead of a borrowed reference. Moreover, these functions return-1\non error, removing the need to checkPyErr_Occurred()\n. (Contributed by Victor Stinner in gh-106004.)Add the\nPyDict_SetDefaultRef()\nfunction, which behaves similarly toPyDict_SetDefault()\n, but returns a strong reference instead of a borrowed reference. This function returns-1\non error,0\non insertion, and1\nif the key was already present in the dictionary. (Contributed by Sam Gross in gh-112066.)Add the\nPyDict_Pop()\nandPyDict_PopString()\nfunctions to remove a key from a dictionary and optionally return the removed value. This is similar todict.pop()\n, though there is no default value, andKeyError\nis not raised for missing keys. (Contributed by Stefan Behnel and Victor Stinner in gh-111262.)Add the\nPyMapping_GetOptionalItem()\nandPyMapping_GetOptionalItemString()\nfunctions as alternatives toPyObject_GetItem()\nandPyMapping_GetItemString()\nrespectively. The new functions do not raiseKeyError\nif the requested key is missing from the mapping. These variants are more convenient and faster if a missing key should not be treated as a failure. (Contributed by Serhiy Storchaka in gh-106307.)Add the\nPyObject_GetOptionalAttr()\nandPyObject_GetOptionalAttrString()\nfunctions as alternatives toPyObject_GetAttr()\nandPyObject_GetAttrString()\nrespectively. The new functions do not raiseAttributeError\nif the requested attribute is not found on the object. These variants are more convenient and faster if the missing attribute should not be treated as a failure. (Contributed by Serhiy Storchaka in gh-106521.)Add the\nPyErr_FormatUnraisable()\nfunction as an extension toPyErr_WriteUnraisable()\nthat allows customizing the warning message. (Contributed by Serhiy Storchaka in gh-108082.)Add new functions that return a strong reference instead of a borrowed reference for frame locals, globals, and builtins, as part of PEP 667:\n(Contributed by Mark Shannon and Tian Gao in gh-74929.)\nAdd the\nPy_GetConstant()\nandPy_GetConstantBorrowed()\nfunctions to get strong or borrowed references to constants. For example,Py_GetConstant(Py_CONSTANT_ZERO)\nreturns a strong reference to the constant zero. (Contributed by Victor Stinner in gh-115754.)Add the\nPyImport_AddModuleRef()\nfunction as a replacement forPyImport_AddModule()\nthat returns a strong reference instead of a borrowed reference. (Contributed by Victor Stinner in gh-105922.)Add the\nPy_IsFinalizing()\nfunction to check whether the main Python interpreter is shutting down. (Contributed by Victor Stinner in gh-108014.)Add the\nPyList_GetItemRef()\nfunction as a replacement forPyList_GetItem()\nthat returns a strong reference instead of a borrowed reference. (Contributed by Sam Gross in gh-114329.)Add the\nPyList_Extend()\nandPyList_Clear()\nfunctions, mirroring the Pythonlist.extend()\nandlist.clear()\nmethods. (Contributed by Victor Stinner in gh-111138.)Add the\nPyLong_AsInt()\nfunction. It behaves similarly toPyLong_AsLong()\n, but stores the result in a C int instead of a C long. (Contributed by Victor Stinner in gh-108014.)Add the\nPyLong_AsNativeBytes()\n,PyLong_FromNativeBytes()\n, andPyLong_FromUnsignedNativeBytes()\nfunctions to simplify converting between native integer types and Pythonint\nobjects. (Contributed by Steve Dower in gh-111140.)Add\nPyModule_Add()\nfunction, which is similar toPyModule_AddObjectRef()\nandPyModule_AddObject()\n, but always steals a reference to the value. (Contributed by Serhiy Storchaka in gh-86493.)Add the\nPyObject_GenericHash()\nfunction that implements the default hashing function of a Python object. (Contributed by Serhiy Storchaka in gh-113024.)Add the\nPy_HashPointer()\nfunction to hash a raw pointer. (Contributed by Victor Stinner in gh-111545.)Add the\nPyObject_VisitManagedDict()\nandPyObject_ClearManagedDict()\nfunctions. which must be called by the traverse and clear functions of a type using thePy_TPFLAGS_MANAGED_DICT\nflag. The pythoncapi-compat project can be used to use these functions with Python 3.11 and 3.12. (Contributed by Victor Stinner in gh-107073.)Add the\nPyRefTracer_SetTracer()\nandPyRefTracer_GetTracer()\nfunctions, which enable tracking object creation and destruction in the same way that thetracemalloc\nmodule does. (Contributed by Pablo Galindo in gh-93502.)Add the\nPySys_AuditTuple()\nfunction as an alternative toPySys_Audit()\nthat takes event arguments as a Pythontuple\nobject. (Contributed by Victor Stinner in gh-85283.)Add the\nPyThreadState_GetUnchecked()\nfunction as an alternative toPyThreadState_Get()\nthat doesn\u2019t kill the process with a fatal error if it isNULL\n. The caller is responsible for checking if the result isNULL\n. (Contributed by Victor Stinner in gh-108867.)Add the\nPyType_GetFullyQualifiedName()\nfunction to get the type\u2019s fully qualified name. The module name is prepended iftype.__module__\nis a string and is not equal to either'builtins'\nor'__main__'\n. (Contributed by Victor Stinner in gh-111696.)Add the\nPyType_GetModuleName()\nfunction to get the type\u2019s module name. This is equivalent to getting thetype.__module__\nattribute. (Contributed by Eric Snow and Victor Stinner in gh-111696.)Add the\nPyUnicode_EqualToUTF8AndSize()\nandPyUnicode_EqualToUTF8()\nfunctions to compare a Unicode object with a const char* UTF-8 encoded string and1\nif they are equal or0\notherwise. These functions do not raise exceptions. (Contributed by Serhiy Storchaka in gh-110289.)Add the\nPyWeakref_GetRef()\nfunction as an alternative toPyWeakref_GetObject()\nthat returns a strong reference orNULL\nif the referent is no longer live. (Contributed by Victor Stinner in gh-105927.)Add fixed variants of functions which silently ignore errors:\nPyObject_HasAttrStringWithError()\nreplacesPyObject_HasAttrString()\n.PyMapping_HasKeyStringWithError()\nreplacesPyMapping_HasKeyString()\n.\nThe new functions return\n-1\nfor errors and the standard1\nfor true and0\nfor false.(Contributed by Serhiy Storchaka in gh-108511.)\nChanged C APIs\u00b6\nThe keywords parameter of\nPyArg_ParseTupleAndKeywords()\nandPyArg_VaParseTupleAndKeywords()\nnow has type char *const* in C and const char *const* in C++, instead of char**. In C++, this makes these functions compatible with arguments of type const char *const*, const char**, or char *const* without an explicit type cast. In C, the functions only support arguments of type char *const*. This can be overridden with thePY_CXX_CONST\nmacro. (Contributed by Serhiy Storchaka in gh-65210.)PyArg_ParseTupleAndKeywords()\nnow supports non-ASCII keyword parameter names. (Contributed by Serhiy Storchaka in gh-110815.)The\nPyCode_GetFirstFree()\nfunction is now unstable API and is now namedPyUnstable_Code_GetFirstFree()\n. (Contributed by Bogdan Romanyuk in gh-115781.)The\nPyDict_GetItem()\n,PyDict_GetItemString()\n,PyMapping_HasKey()\n,PyMapping_HasKeyString()\n,PyObject_HasAttr()\n,PyObject_HasAttrString()\n, andPySys_GetObject()\nfunctions, each of which clears all errors which occurred when calling them now reports these errors usingsys.unraisablehook()\n. You may replace them with other functions as recommended in the documentation. (Contributed by Serhiy Storchaka in gh-106672.)Add support for the\n%T\n,%#T\n,%N\nand%#N\nformats toPyUnicode_FromFormat()\n:%T\n: Get the fully qualified name of an object type%#T\n: As above, but use a colon as the separator%N\n: Get the fully qualified name of a type%#N\n: As above, but use a colon as the separator\nSee PEP 737 for more information. (Contributed by Victor Stinner in gh-111696.)\nYou no longer have to define the\nPY_SSIZE_T_CLEAN\nmacro before includingPython.h\nwhen using#\nformats in format codes. APIs accepting the format codes always usePy_ssize_t\nfor#\nformats. (Contributed by Inada Naoki in gh-104922.)If Python is built in debug mode or\nwith assertions\n,PyTuple_SET_ITEM()\nandPyList_SET_ITEM()\nnow check the index argument with an assertion. (Contributed by Victor Stinner in gh-106168.)\nLimited C API Changes\u00b6\nThe following functions are now included in the Limited C API:\n(Contributed by Victor Stinner in gh-85283, gh-85283, and gh-116936.)\nPython built with\n--with-trace-refs\n(tracing references) now supports the Limited API. (Contributed by Victor Stinner in gh-108634.)\nRemoved C APIs\u00b6\nRemove several functions, macros, variables, etc with names prefixed by\n_Py\nor_PY\n(which are considered private). If your project is affected by one of these removals and you believe that the removed API should remain available, please open a new issue to request a public C API and addcc: @vstinner\nto the issue to notify Victor Stinner. (Contributed by Victor Stinner in gh-106320.)Remove old buffer protocols deprecated in Python 3.0. Use Buffer Protocol instead.\nPyObject_CheckReadBuffer()\n: UsePyObject_CheckBuffer()\nto test whether the object supports the buffer protocol. Note thatPyObject_CheckBuffer()\ndoesn\u2019t guarantee thatPyObject_GetBuffer()\nwill succeed. To test if the object is actually readable, see the next example ofPyObject_GetBuffer()\n.PyObject_AsCharBuffer()\n,PyObject_AsReadBuffer()\n: UsePyObject_GetBuffer()\nandPyBuffer_Release()\ninstead:Py_buffer view; if (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) { return NULL; } // Use `view.buf` and `view.len` to read from the buffer. // You may need to cast buf as `(const char*)view.buf`. PyBuffer_Release(&view);\nPyObject_AsWriteBuffer()\n: UsePyObject_GetBuffer()\nandPyBuffer_Release()\ninstead:Py_buffer view; if (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) { return NULL; } // Use `view.buf` and `view.len` to write to the buffer. PyBuffer_Release(&view);\n(Contributed by Inada Naoki in gh-85275.)\nRemove various functions deprecated in Python 3.9:\nPyEval_CallObject()\n,PyEval_CallObjectWithKeywords()\n: UsePyObject_CallNoArgs()\norPyObject_Call()\ninstead.Warning\nIn\nPyObject_Call()\n, positional arguments must be atuple\nand must not beNULL\n, and keyword arguments must be adict\norNULL\n, whereas the removed functions checked argument types and acceptedNULL\npositional and keyword arguments. To replacePyEval_CallObjectWithKeywords(func, NULL, kwargs)\nwithPyObject_Call()\n, pass an empty tuple as positional arguments usingPyTuple_New(0)\n.PyEval_CallFunction()\n: UsePyObject_CallFunction()\ninstead.PyEval_CallMethod()\n: UsePyObject_CallMethod()\ninstead.PyCFunction_Call()\n: UsePyObject_Call()\ninstead.\n(Contributed by Victor Stinner in gh-105107.)\nRemove the following old functions to configure the Python initialization, deprecated in Python 3.11:\nPySys_AddWarnOptionUnicode()\n: UsePyConfig.warnoptions\ninstead.PySys_AddWarnOption()\n: UsePyConfig.warnoptions\ninstead.PySys_AddXOption()\n: UsePyConfig.xoptions\ninstead.PySys_HasWarnOptions()\n: UsePyConfig.xoptions\ninstead.PySys_SetPath()\n: SetPyConfig.module_search_paths\ninstead.Py_SetPath()\n: SetPyConfig.module_search_paths\ninstead.Py_SetStandardStreamEncoding()\n: SetPyConfig.stdio_encoding\ninstead, and set also maybePyConfig.legacy_windows_stdio\n(on Windows)._Py_SetProgramFullPath()\n: SetPyConfig.executable\ninstead.\nUse the new\nPyConfig\nAPI of the Python Initialization Configuration instead (PEP 587), added to Python 3.8. (Contributed by Victor Stinner in gh-105145.)Remove\nPyEval_AcquireLock()\nandPyEval_ReleaseLock()\nfunctions, deprecated in Python 3.2. They didn\u2019t update the current thread state. They can be replaced with:low-level\nPyEval_AcquireThread()\nandPyEval_RestoreThread()\n;\n(Contributed by Victor Stinner in gh-105182.)\nRemove the\nPyEval_ThreadsInitialized()\nfunction, deprecated in Python 3.9. Since Python 3.7,Py_Initialize()\nalways creates the GIL: callingPyEval_InitThreads()\ndoes nothing andPyEval_ThreadsInitialized()\nalways returns non-zero. (Contributed by Victor Stinner in gh-105182.)Remove the\n_PyInterpreterState_Get()\nalias toPyInterpreterState_Get()\nwhich was kept for backward compatibility with Python 3.8. The pythoncapi-compat project can be used to getPyInterpreterState_Get()\non Python 3.8 and older. (Contributed by Victor Stinner in gh-106320.)Remove the private\n_PyObject_FastCall()\nfunction: usePyObject_Vectorcall()\nwhich is available since Python 3.8 (PEP 590). (Contributed by Victor Stinner in gh-106023.)Remove the\ncpython/pytime.h\nheader file, which only contained private functions. (Contributed by Victor Stinner in gh-106316.)Remove the undocumented\nPY_TIMEOUT_MAX\nconstant from the limited C API. (Contributed by Victor Stinner in gh-110014.)Remove the old trashcan macros\nPy_TRASHCAN_SAFE_BEGIN\nandPy_TRASHCAN_SAFE_END\n. Replace both with the new macrosPy_TRASHCAN_BEGIN\nandPy_TRASHCAN_END\n. (Contributed by Irit Katriel in gh-105111.)\nDeprecated C APIs\u00b6\nDeprecate old Python initialization functions:\nPySys_ResetWarnOptions()\n: Clearsys.warnoptions\nandwarnings.filters\ninstead.Py_GetExecPrefix()\n: Getsys.exec_prefix\ninstead.Py_GetPath()\n: Getsys.path\ninstead.Py_GetPrefix()\n: Getsys.prefix\ninstead.Py_GetProgramFullPath()\n: Getsys.executable\ninstead.Py_GetProgramName()\n: Getsys.executable\ninstead.Py_GetPythonHome()\n: GetPyConfig.home\nor thePYTHONHOME\nenvironment variable instead.\n(Contributed by Victor Stinner in gh-105145.)\nSoft deprecate the\nPyEval_GetBuiltins()\n,PyEval_GetGlobals()\n, andPyEval_GetLocals()\nfunctions, which return a borrowed reference. (Soft deprecated as part of PEP 667.)Deprecate the\nPyImport_ImportModuleNoBlock()\nfunction, which is just an alias toPyImport_ImportModule()\nsince Python 3.3. (Contributed by Victor Stinner in gh-105396.)Soft deprecate the\nPyModule_AddObject()\nfunction. It should be replaced withPyModule_Add()\norPyModule_AddObjectRef()\n. (Contributed by Serhiy Storchaka in gh-86493.)Deprecate the old\nPy_UNICODE\nandPY_UNICODE_TYPE\ntypes and thePy_UNICODE_WIDE\ndefine. Use thewchar_t\ntype directly instead. Since Python 3.3,Py_UNICODE\nandPY_UNICODE_TYPE\nare just aliases towchar_t\n. (Contributed by Victor Stinner in gh-105156.)Deprecate the\nPyWeakref_GetObject()\nandPyWeakref_GET_OBJECT()\nfunctions, which return a borrowed reference. Replace them with the newPyWeakref_GetRef()\nfunction, which returns a strong reference. The pythoncapi-compat project can be used to getPyWeakref_GetRef()\non Python 3.12 and older. (Contributed by Victor Stinner in gh-105927.)\nPending Removal in Python 3.14\u00b6\nThe\nma_version_tag\nfield inPyDictObject\nfor extension modules (PEP 699; gh-101193).Creating\nimmutable types\nwith mutable bases (gh-95388).Functions to configure Python\u2019s initialization, deprecated in Python 3.11:\nPySys_SetArgvEx()\n: SetPyConfig.argv\ninstead.PySys_SetArgv()\n: SetPyConfig.argv\ninstead.Py_SetProgramName()\n: SetPyConfig.program_name\ninstead.Py_SetPythonHome()\n: SetPyConfig.home\ninstead.\nThe\nPy_InitializeFromConfig()\nAPI should be used withPyConfig\ninstead.Global configuration variables:\nPy_DebugFlag\n: UsePyConfig.parser_debug\ninstead.Py_VerboseFlag\n: UsePyConfig.verbose\ninstead.Py_QuietFlag\n: UsePyConfig.quiet\ninstead.Py_InteractiveFlag\n: UsePyConfig.interactive\ninstead.Py_InspectFlag\n: UsePyConfig.inspect\ninstead.Py_OptimizeFlag\n: UsePyConfig.optimization_level\ninstead.Py_NoSiteFlag\n: UsePyConfig.site_import\ninstead.Py_BytesWarningFlag\n: UsePyConfig.bytes_warning\ninstead.Py_FrozenFlag\n: UsePyConfig.pathconfig_warnings\ninstead.Py_IgnoreEnvironmentFlag\n: UsePyConfig.use_environment\ninstead.Py_DontWriteBytecodeFlag\n: UsePyConfig.write_bytecode\ninstead.Py_NoUserSiteDirectory\n: UsePyConfig.user_site_directory\ninstead.Py_UnbufferedStdioFlag\n: UsePyConfig.buffered_stdio\ninstead.Py_HashRandomizationFlag\n: UsePyConfig.use_hash_seed\nandPyConfig.hash_seed\ninstead.Py_IsolatedFlag\n: UsePyConfig.isolated\ninstead.Py_LegacyWindowsFSEncodingFlag\n: UsePyPreConfig.legacy_windows_fs_encoding\ninstead.Py_LegacyWindowsStdioFlag\n: UsePyConfig.legacy_windows_stdio\ninstead.Py_FileSystemDefaultEncoding\n: UsePyConfig.filesystem_encoding\ninstead.Py_HasFileSystemDefaultEncoding\n: UsePyConfig.filesystem_encoding\ninstead.Py_FileSystemDefaultEncodeErrors\n: UsePyConfig.filesystem_errors\ninstead.Py_UTF8Mode\n: UsePyPreConfig.utf8_mode\ninstead. (seePy_PreInitialize()\n)\nThe\nPy_InitializeFromConfig()\nAPI should be used withPyConfig\ninstead.\nPending Removal in Python 3.15\u00b6\nThe bundled copy of\nlibmpdecimal\n.The\nPyImport_ImportModuleNoBlock()\n: UsePyImport_ImportModule()\ninstead.PyWeakref_GetObject()\nandPyWeakref_GET_OBJECT()\n: UsePyWeakref_GetRef()\ninstead.Py_UNICODE\ntype and thePy_UNICODE_WIDE\nmacro: Usewchar_t\ninstead.Python initialization functions:\nPySys_ResetWarnOptions()\n: Clearsys.warnoptions\nandwarnings.filters\ninstead.Py_GetExecPrefix()\n: Getsys.base_exec_prefix\nandsys.exec_prefix\ninstead.Py_GetPath()\n: Getsys.path\ninstead.Py_GetPrefix()\n: Getsys.base_prefix\nandsys.prefix\ninstead.Py_GetProgramFullPath()\n: Getsys.executable\ninstead.Py_GetProgramName()\n: Getsys.executable\ninstead.Py_GetPythonHome()\n: GetPyConfig.home\nor thePYTHONHOME\nenvironment variable instead.\nPending Removal in Future Versions\u00b6\nThe following APIs are deprecated and will be removed, although there is currently no date scheduled for their removal.\nPy_TPFLAGS_HAVE_FINALIZE\n: Unneeded since Python 3.8.PyErr_Fetch()\n: UsePyErr_GetRaisedException()\ninstead.PyErr_NormalizeException()\n: UsePyErr_GetRaisedException()\ninstead.PyErr_Restore()\n: UsePyErr_SetRaisedException()\ninstead.PyModule_GetFilename()\n: UsePyModule_GetFilenameObject()\ninstead.PyOS_AfterFork()\n: UsePyOS_AfterFork_Child()\ninstead.PySlice_GetIndicesEx()\n: UsePySlice_Unpack()\nandPySlice_AdjustIndices()\ninstead.PyUnicode_AsDecodedObject()\n: UsePyCodec_Decode()\ninstead.PyUnicode_AsDecodedUnicode()\n: UsePyCodec_Decode()\ninstead.PyUnicode_AsEncodedObject()\n: UsePyCodec_Encode()\ninstead.PyUnicode_AsEncodedUnicode()\n: UsePyCodec_Encode()\ninstead.PyUnicode_READY()\n: Unneeded since Python 3.12PyErr_Display()\n: UsePyErr_DisplayException()\ninstead._PyErr_ChainExceptions()\n: Use_PyErr_ChainExceptions1()\ninstead.PyBytesObject.ob_shash\nmember: callPyObject_Hash()\ninstead.PyDictObject.ma_version_tag\nmember.Thread Local Storage (TLS) API:\nPyThread_create_key()\n: UsePyThread_tss_alloc()\ninstead.PyThread_delete_key()\n: UsePyThread_tss_free()\ninstead.PyThread_set_key_value()\n: UsePyThread_tss_set()\ninstead.PyThread_get_key_value()\n: UsePyThread_tss_get()\ninstead.PyThread_delete_key_value()\n: UsePyThread_tss_delete()\ninstead.PyThread_ReInitTLS()\n: Unneeded since Python 3.7.\nBuild Changes\u00b6\narm64-apple-ios\nandarm64-apple-ios-simulator\nare both now PEP 11 tier 3 platforms. (PEP 730 written and implementation contributed by Russell Keith-Magee in gh-114099.)aarch64-linux-android\nandx86_64-linux-android\nare both now PEP 11 tier 3 platforms. (PEP 738 written and implementation contributed by Malcolm Smith in gh-116622.)wasm32-wasi\nis now a PEP 11 tier 2 platform. (Contributed by Brett Cannon in gh-115192.)wasm32-emscripten\nis no longer a PEP 11 supported platform. (Contributed by Brett Cannon in gh-115192.)Building CPython now requires a compiler with support for the C11 atomic library, GCC built-in atomic functions, or MSVC interlocked intrinsics.\nAutoconf 2.71 and aclocal 1.16.5 are now required to regenerate the\nconfigure\nscript. (Contributed by Christian Heimes in gh-89886 and by Victor Stinner in gh-112090.)SQLite 3.15.2 or newer is required to build the\nsqlite3\nextension module. (Contributed by Erlend Aasland in gh-105875.)CPython now bundles the mimalloc library by default. It is licensed under the MIT license; see mimalloc license. The bundled mimalloc has custom changes, see gh-113141 for details. (Contributed by Dino Viehland in gh-109914.)\nThe\nconfigure\noption--with-system-libmpdec\nnow defaults toyes\n. The bundled copy oflibmpdecimal\nwill be removed in Python 3.15.Python built with\nconfigure\n--with-trace-refs\n(tracing references) is now ABI compatible with the Python release build and debug build. (Contributed by Victor Stinner in gh-108634.)On POSIX systems, the pkg-config (\n.pc\n) filenames now include the ABI flags. For example, the free-threaded build generatespython-3.13t.pc\nand the debug build generatespython-3.13d.pc\n.The\nerrno\n,fcntl\n,grp\n,md5\n,pwd\n,resource\n,termios\n,winsound\n,_ctypes_test\n,_multiprocessing.posixshmem\n,_scproxy\n,_stat\n,_statistics\n,_testconsole\n,_testimportmultiple\nand_uuid\nC extensions are now built with the limited C API. (Contributed by Victor Stinner in gh-85283.)\nPorting to Python 3.13\u00b6\nThis section lists previously described changes and other bugfixes that may require changes to your code.\nChanges in the Python API\u00b6\nPEP 667 introduces several changes to the semantics of\nlocals()\nandf_locals\n:Calling\nlocals()\nin an optimized scope now produces an independent snapshot on each call, and hence no longer implicitly updates previously returned references. Obtaining the legacy CPython behavior now requires explicit calls to update the initially returned dictionary with the results of subsequent calls tolocals()\n. Code execution functions that implicitly targetlocals()\n(such asexec\nandeval\n) must be passed an explicit namespace to access their results in an optimized scope. (Changed as part of PEP 667.)Calling\nlocals()\nfrom a comprehension at module or class scope (including viaexec\noreval\n) once more behaves as if the comprehension were running as an independent nested function (i.e. the local variables from the containing scope are not included). In Python 3.12, this had changed to include the local variables from the containing scope when implementing PEP 709. (Changed as part of PEP 667.)Accessing\nFrameType.f_locals\nin an optimized scope now returns a write-through proxy rather than a snapshot that gets updated at ill-specified times. If a snapshot is desired, it must be created explicitly withdict\nor the proxy\u2019s.copy()\nmethod. (Changed as part of PEP 667.)\nfunctools.partial\nnow emits aFutureWarning\nwhen used as a method. The behavior will change in future Python versions. Wrap it instaticmethod()\nif you want to preserve the old behavior. (Contributed by Serhiy Storchaka in gh-121027.)An\nOSError\nis now raised bygetpass.getuser()\nfor any failure to retrieve a username, instead ofImportError\non non-Unix platforms orKeyError\non Unix platforms where the password database is empty.The value of the\nmode\nattribute ofgzip.GzipFile\nis now a string ('rb'\nor'wb'\n) instead of an integer (1\nor2\n). The value of themode\nattribute of the readable file-like object returned byzipfile.ZipFile.open()\nis now'rb'\ninstead of'r'\n. (Contributed by Serhiy Storchaka in gh-115961.)mailbox.Maildir\nnow ignores files with a leading dot (.\n). (Contributed by Zackery Spytz in gh-65559.)pathlib.Path.glob()\nandrglob()\nnow return both files and directories if a pattern that ends with \u201c**\n\u201d is given, rather than directories only. Add a trailing slash to keep the previous behavior and only match directories.The\nthreading\nmodule now expects the_thread\nmodule to have an_is_main_interpreter()\nfunction. This function takes no arguments and returnsTrue\nif the current interpreter is the main interpreter.Any library or application that provides a custom\n_thread\nmodule must provide_is_main_interpreter()\n, just like the module\u2019s other \u201cprivate\u201d attributes. (gh-112826.)\nChanges in the C API\u00b6\nPython.h\nno longer includes the<ieeefp.h>\nstandard header. It was included for thefinite()\nfunction which is now provided by the<math.h>\nheader. It should now be included explicitly if needed. Remove also theHAVE_IEEEFP_H\nmacro. (Contributed by Victor Stinner in gh-108765.)Python.h\nno longer includes these standard header files:<time.h>\n,<sys/select.h>\nand<sys/time.h>\n. If needed, they should now be included explicitly. For example,<time.h>\nprovides theclock()\nandgmtime()\nfunctions,<sys/select.h>\nprovides theselect()\nfunction, and<sys/time.h>\nprovides thefutimes()\n,gettimeofday()\nandsetitimer()\nfunctions. (Contributed by Victor Stinner in gh-108765.)On Windows,\nPython.h\nno longer includes the<stddef.h>\nstandard header file. If needed, it should now be included explicitly. For example, it providesoffsetof()\nfunction, andsize_t\nandptrdiff_t\ntypes. Including<stddef.h>\nexplicitly was already needed by all other platforms, theHAVE_STDDEF_H\nmacro is only defined on Windows. (Contributed by Victor Stinner in gh-108765.)If the\nPy_LIMITED_API\nmacro is defined,Py_BUILD_CORE\n,Py_BUILD_CORE_BUILTIN\nandPy_BUILD_CORE_MODULE\nmacros are now undefined by<Python.h>\n. (Contributed by Victor Stinner in gh-85283.)The old trashcan macros\nPy_TRASHCAN_SAFE_BEGIN\nandPy_TRASHCAN_SAFE_END\nwere removed. They should be replaced by the new macrosPy_TRASHCAN_BEGIN\nandPy_TRASHCAN_END\n.A\ntp_dealloc\nfunction that has the old macros, such as:static void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END }\nshould migrate to the new macros as follows:\nstatic void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END }\nNote that\nPy_TRASHCAN_BEGIN\nhas a second argument which should be the deallocation function it is in. The new macros were added in Python 3.8 and the old macros were deprecated in Python 3.11. (Contributed by Irit Katriel in gh-105111.)\nPEP 667 introduces several changes to frame-related functions:\nThe effects of mutating the dictionary returned from\nPyEval_GetLocals()\nin an optimized scope have changed. New dict entries added this way will now only be visible to subsequentPyEval_GetLocals()\ncalls in that frame, asPyFrame_GetLocals()\n,locals()\n, andFrameType.f_locals\nno longer access the same underlying cached dictionary. Changes made to entries for actual variable names and names added via the write-through proxy interfaces will be overwritten on subsequent calls toPyEval_GetLocals()\nin that frame. The recommended code update depends on how the function was being used, so refer to the deprecation notice on the function for details.Calling\nPyFrame_GetLocals()\nin an optimized scope now returns a write-through proxy rather than a snapshot that gets updated at ill-specified times. If a snapshot is desired, it must be created explicitly (e.g. withPyDict_Copy()\n), or by calling the newPyEval_GetFrameLocals()\nAPI.PyFrame_FastToLocals()\nandPyFrame_FastToLocalsWithError()\nno longer have any effect. Calling these functions has been redundant since Python 3.11, whenPyFrame_GetLocals()\nwas first introduced.PyFrame_LocalsToFast()\nno longer has any effect. Calling this function is redundant now thatPyFrame_GetLocals()\nreturns a write-through proxy for optimized scopes.\nRegression Test Changes\u00b6\nPython built with\nconfigure\n--with-pydebug\nnow supports a-X presite=package.module\ncommand-line option. If used, it specifies a module that should be imported early in the lifecycle of the interpreter, beforesite.py\nis executed. (Contributed by \u0141ukasz Langa in gh-110769.)\nNotable changes in 3.13.1\u00b6\nsys\u00b6\nThe previously undocumented special function\nsys.getobjects()\n, which only exists in specialized builds of Python, may now return objects from other interpreters than the one it\u2019s called in."}]