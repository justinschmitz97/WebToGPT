[{"source": "https://docs.python.org/3/whatsnew/3.10.html", "title": "What\u2019s New In Python 3.10", "text": "What\u2019s New Python 3.10\u00b6 - Editor: Pablo Galindo Salgado article explains new features Python 3.10, compared 3.9. Python 3.10 released October 4, 2021. full details, see changelog. Summary \u2013 Release highlights\u00b6 New syntax features: PEP 634, Structural Pattern Matching: Specification PEP 635, Structural Pattern Matching: Motivation Rationale PEP 636, Structural Pattern Matching: Tutorial bpo-12782, Parenthesized context managers officially allowed. New features standard library: PEP 618, Add Optional Length-Checking zip. Interpreter improvements: PEP 626, Precise line numbers debugging tools. New typing features: PEP 604, Allow writing union types X | PEP 612, Parameter Specification Variables PEP 613, Explicit Type Aliases PEP 647, User-Defined Type Guards Important deprecations, removals restrictions: New Features\u00b6 Parenthesized context managers\u00b6 Using enclosing parentheses continuation across multiple lines context managers supported. allows formatting long collection context managers multiple lines similar way previously possible import statements. instance, examples valid: (CtxManager() example): ... ( CtxManager1(), CtxManager2() ): ... (CtxManager1() example, CtxManager2()): ... (CtxManager1(), CtxManager2() example): ... ( CtxManager1() example1, CtxManager2() example2 ): ... also possible use trailing comma end enclosed group: ( CtxManager1() example1, CtxManager2() example2, CtxManager3() example3, ): ... new syntax uses non LL(1) capacities new parser. Check PEP 617 details. (Contributed Guido van Rossum, Pablo Galindo Lysandros Nikolaou bpo-12782 bpo-40334.) Better error messages\u00b6 SyntaxErrors\u00b6 parsing code contains unclosed parentheses brackets interpreter includes location unclosed bracket parentheses instead displaying SyntaxError: unexpected EOF parsing pointing incorrect location. instance, consider following code (notice unclosed \u2018{\u2018): expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4, 38: 4, 39: 4, 45: 5, 46: 5, 47: 5, 48: 5, 49: 5, 54: 6, some_other_code = foo() Previous versions interpreter reported confusing places location syntax error: File \"example.py\", line 3 some_other_code = foo() ^ SyntaxError: invalid syntax Python 3.10 informative error emitted: File \"example.py\", line 1 expected = {9: 1, 18: 2, 19: 2, 27: 3, 28: 3, 29: 3, 36: 4, 37: 4, ^ SyntaxError: '{' never closed similar way, errors involving unclosed string literals (single triple quoted) point start string instead reporting EOF/EOL. improvements inspired previous work PyPy interpreter. (Contributed Pablo Galindo bpo-42864 Batuhan Taskaya bpo-40176.) SyntaxError exceptions raised interpreter highlight full error range expression constitutes syntax error itself, instead problem detected. way, instead displaying (before Python 3.10): >>> foo(x, z z range(10), t, w) File \"<stdin>\", line 1 foo(x, z z range(10), t, w) ^ SyntaxError: Generator expression must parenthesized Python 3.10 display exception as: >>> foo(x, z z range(10), t, w) File \"<stdin>\", line 1 foo(x, z z range(10), t, w) ^^^^^^^^^^^^^^^^^^^^ SyntaxError: Generator expression must parenthesized improvement contributed Pablo Galindo bpo-43914. considerable amount new specialized messages SyntaxError exceptions incorporated. notable ones follows: Missing : blocks:>>> rocket.position > event_horizon File \"<stdin>\", line 1 rocket.position > event_horizon ^ SyntaxError: expected ':' (Contributed Pablo Galindo bpo-42997.) Unparenthesised tuples comprehensions targets: >>> {x,y x,y zip('abcd', '1234')} File \"<stdin>\", line 1 {x,y x,y zip('abcd', '1234')} ^ SyntaxError: forget parentheses around comprehension target? (Contributed Pablo Galindo bpo-43017.) Missing commas collection literals expressions: >>> items = { ... x: 1, ... y: 2 ... z: 3, File \"<stdin>\", line 3 y: 2 ^ SyntaxError: invalid syntax. Perhaps forgot comma? (Contributed Pablo Galindo bpo-43822.) Multiple Exception types without parentheses: >>> try: ... build_dyson_sphere() ... except NotEnoughScienceError, NotEnoughResourcesError: File \"<stdin>\", line 3 except NotEnoughScienceError, NotEnoughResourcesError: ^ SyntaxError: multiple exception types must parenthesized (Contributed Pablo Galindo bpo-43149.) Missing : values dictionary literals:>>> values = { ... x: 1, ... y: 2, ... z: ... } File \"<stdin>\", line 4 z: ^ SyntaxError: expression expected dictionary key ':' >>> values = {x:1, y:2, z w:3} File \"<stdin>\", line 1 values = {x:1, y:2, z w:3} ^ SyntaxError: ':' expected dictionary key (Contributed Pablo Galindo bpo-43823.) try blocks withoutexcept orfinally blocks:>>> try: ... x = 2 ... something = 3 File \"<stdin>\", line 3 something = 3 ^^^^^^^^^ SyntaxError: expected 'except' 'finally' block (Contributed Pablo Galindo bpo-44305.) Usage = instead of== comparisons:>>> rocket.position = event_horizon: File \"<stdin>\", line 1 rocket.position = event_horizon: ^ SyntaxError: cannot assign attribute here. Maybe meant '==' instead '='? (Contributed Pablo Galindo bpo-43797.) Usage * f-strings:>>> f\"Black holes {*all_black_holes} revelations\" File \"<stdin>\", line 1 (*all_black_holes) ^ SyntaxError: f-string: cannot use starred expression (Contributed Pablo Galindo bpo-41064.) IndentationErrors\u00b6 Many IndentationError exceptions context regarding kind block expecting indentation, including location statement: >>> def foo(): ... lel: ... x = 2 File \"<stdin>\", line 3 x = 2 ^ IndentationError: expected indented block 'if' statement line 2 AttributeErrors\u00b6 printing AttributeError , PyErr_Display() offer suggestions similar attribute names object exception raised from: >>> collections.namedtoplo Traceback (most recent call last): File \"<stdin>\", line 1, <module> AttributeError: module 'collections' attribute 'namedtoplo'. mean: namedtuple? (Contributed Pablo Galindo bpo-38530.) Warning Notice won\u2019t work PyErr_Display() called display error happen custom error display function used. common scenario REPLs like IPython. NameErrors\u00b6 printing NameError raised interpreter, PyErr_Display() offer suggestions similar variable names function exception raised from: >>> schwarzschild_black_hole = None >>> schwarschild_black_hole Traceback (most recent call last): File \"<stdin>\", line 1, <module> NameError: name 'schwarschild_black_hole' defined. mean: schwarzschild_black_hole? (Contributed Pablo Galindo bpo-38530.) Warning Notice won\u2019t work PyErr_Display() called display error, happen custom error display function used. common scenario REPLs like IPython. PEP 626: Precise line numbers debugging tools\u00b6 PEP 626 brings precise reliable line numbers debugging, profiling coverage tools. Tracing events, correct line number, generated lines code executed lines code executed. f_lineno attribute frame objects always contain expected line number. co_lnotab attribute code objects deprecated removed 3.12. Code needs convert offset line number use new co_lines() method instead. PEP 634: Structural Pattern Matching\u00b6 Structural pattern matching added form match statement case statements patterns associated actions. Patterns consist sequences, mappings, primitive data types well class instances. Pattern matching enables programs extract information complex data types, branch structure data, apply specific actions based different forms data. Syntax operations\u00b6 generic syntax pattern matching is: match subject: case <pattern_1>: <action_1> case <pattern_2>: <action_2> case <pattern_3>: <action_3> case _: <action_wildcard> match statement takes expression compares value successive patterns given one case blocks. Specifically, pattern matching operates by: using data type shape (the subject )evaluating subject thematch statementcomparing subject pattern case statement top bottom match confirmed.executing action associated pattern confirmed match exact match confirmed, last case, wildcard _ , provided, used matching case. exact match confirmed wildcard case exist, entire match block no-op. Declarative approach\u00b6 Readers may aware pattern matching simple example matching subject (data object) literal (pattern) switch statement found C, Java JavaScript (and many languages). Often switch statement used comparison object/expression case statements containing literals. powerful examples pattern matching found languages Scala Elixir. structural pattern matching, approach \u201cdeclarative\u201d explicitly states conditions (the patterns) data match. \u201cimperative\u201d series instructions using nested \u201cif\u201d statements could used accomplish something similar structural pattern matching, less clear \u201cdeclarative\u201d approach. Instead \u201cdeclarative\u201d approach states conditions meet match readable explicit patterns. structural pattern matching used simplest form comparing variable literal case statement, true value Python lies handling subject\u2019s type shape. Simple pattern: match literal\u00b6 Let\u2019s look example pattern matching simplest form: value, subject, matched several literals, patterns. example below, status subject match statement. patterns case statements, literals represent request status codes. associated action case executed match: def http_error(status): match status: case 400: return \"Bad request\" case 404: return \"Not found\" case 418: return \"I'm teapot\" case _: return \"Something's wrong internet\" function passed status 418, \u201cI\u2019m teapot\u201d returned. function passed status 500, case statement _ match wildcard, \u201cSomething\u2019s wrong internet\u201d returned. Note last block: variable name, _ , acts wildcard insures subject always match. use _ optional. combine several literals single pattern using | (\u201cor\u201d): case 401 | 403 | 404: return \"Not allowed\" Behavior without wildcard\u00b6 modify example removing last case block, example becomes: def http_error(status): match status: case 400: return \"Bad request\" case 404: return \"Not found\" case 418: return \"I'm teapot\" Without use _ case statement, match may exist. match exists, behavior no-op. example, status 500 passed, no-op occurs. Patterns literal variable\u00b6 Patterns look like unpacking assignments, pattern may used bind variables. example, data point unpacked x-coordinate y-coordinate: # point (x, y) tuple match point: case (0, 0): print(\"Origin\") case (0, y): print(f\"Y={y}\") case (x, 0): print(f\"X={x}\") case (x, y): print(f\"X={x}, Y={y}\") case _: raise ValueError(\"Not point\") first pattern two literals, (0, 0) , may thought extension literal pattern shown above. next two patterns combine literal variable, variable binds value subject (point ). fourth pattern captures two values, makes conceptually similar unpacking assignment (x, y) = point . Patterns classes\u00b6 using classes structure data, use pattern class name followed argument list resembling constructor. pattern ability capture class attributes variables: class Point: x: int y: int def location(point): match point: case Point(x=0, y=0): print(\"Origin point's location.\") case Point(x=0, y=y): print(f\"Y={y} point y-axis.\") case Point(x=x, y=0): print(f\"X={x} point x-axis.\") case Point(): print(\"The point located somewhere else plane.\") case _: print(\"Not point\") Patterns positional parameters\u00b6 use positional parameters builtin classes provide ordering attributes (e.g. dataclasses). also define specific position attributes patterns setting __match_args__ special attribute classes. it\u2019s set (\u201cx\u201d, \u201cy\u201d), following patterns equivalent (and bind attribute var variable): Point(1, var) Point(1, y=var) Point(x=1, y=var) Point(y=var, x=1) Nested patterns\u00b6 Patterns arbitrarily nested. example, data short list points, could matched like this: match points: case []: print(\"No points list.\") case [Point(0, 0)]: print(\"The origin point list.\") case [Point(x, y)]: print(f\"A single point {x}, {y} list.\") case [Point(0, y1), Point(0, y2)]: print(f\"Two points axis {y1}, {y2} list.\") case _: print(\"Something else found list.\") Complex patterns wildcard\u00b6 point, examples used _ alone last case statement. wildcard used complex patterns, ('error', code, _) . example: match test_variable: case ('warning', code, 40): print(\"A warning received.\") case ('error', code, _): print(f\"An error {code} occurred.\") case, test_variable match (\u2018error\u2019, code, 100) (\u2018error\u2019, code, 800). Guard\u00b6 add clause pattern, known \u201cguard\u201d. guard false, match goes try next case block. Note value capture happens guard evaluated: match point: case Point(x, y) x == y: print(f\"The point located diagonal Y=X {x}.\") case Point(x, y): print(f\"Point diagonal.\") Key Features\u00b6 Several key features: Like unpacking assignments, tuple list patterns exactly meaning actually match arbitrary sequences. Technically, subject must sequence. Therefore, important exception patterns don\u2019t match iterators. Also, prevent common mistake, sequence patterns don\u2019t match strings. Sequence patterns support wildcards: [x, y, *rest] and(x, y, *rest) work similar wildcards unpacking assignments. name after* may also be_ , so(x, y, *_) matches sequence least two items without binding remaining items.Mapping patterns: {\"bandwidth\": b, \"latency\": l} captures the\"bandwidth\" and\"latency\" values dict. Unlike sequence patterns, extra keys ignored. wildcard**rest also supported. (But**_ would redundant, allowed.)Subpatterns may captured using keyword:case (Point(x1, y1), Point(x2, y2) p2): ... binds x1, y1, x2, y2 like would expect without clause, p2 entire second item subject.Most literals compared equality. However, singletons True ,False andNone compared identity.Named constants may used patterns. named constants must dotted names prevent constant interpreted capture variable: enum import Enum class Color(Enum): RED = 0 GREEN = 1 BLUE = 2 color = Color.GREEN match color: case Color.RED: print(\"I see red!\") case Color.GREEN: print(\"Grass green\") case Color.BLUE: print(\"I'm feeling blues :(\") full specification see PEP 634. Motivation rationale PEP 635, longer tutorial PEP 636. Optional EncodingWarning encoding=\"locale\" option\u00b6 default encoding TextIOWrapper open() platform locale dependent. Since UTF-8 used Unix platforms, omitting encoding option opening UTF-8 files (e.g. JSON, YAML, TOML, Markdown) common bug. example: # BUG: \"rb\" mode encoding=\"utf-8\" used. open(\"data.json\") f: data = json.load(f) find type bug, optional EncodingWarning added. emitted sys.flags.warn_default_encoding true locale-specific default encoding used. -X warn_default_encoding option PYTHONWARNDEFAULTENCODING added enable warning. See Text Encoding information. Language Changes\u00b6 int type new methodint.bit_count() , returning number ones binary expansion given integer, also known population count. (Contributed Niklas Fiekas bpo-29882.)The views returned dict.keys() ,dict.values() anddict.items() amapping attribute gives atypes.MappingProxyType object wrapping original dictionary. (Contributed Dennis Sweeney bpo-40890.)PEP 618: zip() function optionalstrict flag, used require iterables equal length.Builtin extension functions take integer arguments longer accept Decimal s,Fraction objects converted integers loss (e.g. the__int__() method the__index__() method). (Contributed Serhiy Storchaka bpo-37999.)If object.__ipow__() returnsNotImplemented , operator correctly fall back toobject.__pow__() andobject.__rpow__() expected. (Contributed Alex Shkop bpo-38302.)Assignment expressions used unparenthesized within set literals set comprehensions, well sequence indexes (but slices). Functions new __builtins__ attribute used look builtin symbols function executed, instead looking into__globals__['__builtins__'] . attribute initialized from__globals__[\"__builtins__\"] exists, else current builtins. (Contributed Mark Shannon bpo-42990.)Two new builtin functions \u2013 aiter() andanext() added provide asynchronous counterparts toiter() andnext() , respectively. (Contributed Joshua Bronson, Daniel Pope, Justin Wang bpo-31861.)Static methods ( @staticmethod ) class methods (@classmethod ) inherit method attributes (__module__ ,__name__ ,__qualname__ ,__doc__ ,__annotations__ ) new__wrapped__ attribute. Moreover, static methods callable regular functions. (Contributed Victor Stinner bpo-43682.)Annotations complex targets (everything beside simple name targets defined PEP 526) longer cause runtime effects withfrom __future__ import annotations . (Contributed Batuhan Taskaya bpo-42737.)Class module objects lazy-create empty annotations dicts demand. annotations dicts stored object\u2019s __dict__ backwards compatibility. improves best practices working with__annotations__ ; information, please see Annotations Best Practices. (Contributed Larry Hastings bpo-43901.)Annotations consist yield ,yield ,await named expressions forbidden underfrom __future__ import annotations due side effects. (Contributed Batuhan Taskaya bpo-42725.)Usage unbound variables, super() expressions might alter processing symbol table annotations rendered effectless underfrom __future__ import annotations . (Contributed Batuhan Taskaya bpo-42725.)Hashes NaN values float type anddecimal.Decimal type depend object identity. Formerly, always hashed to0 even though NaN values equal one another. caused potentially quadratic runtime behavior due excessive hash collisions creating dictionaries sets containing multiple NaNs. (Contributed Raymond Hettinger bpo-43475.)A SyntaxError (instead aNameError ) raised deleting the__debug__ constant. (Contributed Donghee Na bpo-45000.)SyntaxError exceptions haveend_lineno andend_offset attributes. beNone determined. (Contributed Pablo Galindo bpo-43914.) New Modules\u00b6 None. Improved Modules\u00b6 asyncio\u00b6 Add missing connect_accepted_socket() method. (Contributed Alex Gr\u00f6nholm bpo-41332.) argparse\u00b6 Misleading phrase \u201coptional arguments\u201d replaced \u201coptions\u201d argparse help. tests might require adaptation rely exact output match. (Contributed Raymond Hettinger bpo-9694.) array\u00b6 index() method array.array optional start stop parameters. (Contributed Anders Lorentsen Zackery Spytz bpo-31956.) asynchat, asyncore, smtpd\u00b6 modules marked deprecated module documentation since Python 3.6. import-time DeprecationWarning added three modules. base64\u00b6 Add base64.b32hexencode() base64.b32hexdecode() support Base32 Encoding Extended Hex Alphabet. bdb\u00b6 Add clearBreakpoints() reset set breakpoints. (Contributed Irit Katriel bpo-24160.) bisect\u00b6 Added possibility providing key function APIs bisect module. (Contributed Raymond Hettinger bpo-4356.) codecs\u00b6 Add codecs.unregister() function unregister codec search function. (Contributed Hai Shi bpo-41842.) collections.abc\u00b6 __args__ parameterized generic collections.abc.Callable consistent typing.Callable . collections.abc.Callable generic flattens type parameters, similar typing.Callable currently does. means collections.abc.Callable[[int, str], str] __args__ (int, str, str) ; previously ([int, str], str) . allow change, types.GenericAlias subclassed, subclass returned subscripting collections.abc.Callable type. Note TypeError may raised invalid forms parameterizing collections.abc.Callable may passed silently Python 3.9. (Contributed Ken Jin bpo-42195.) contextlib\u00b6 Add contextlib.aclosing() context manager safely close async generators objects representing asynchronously released resources. (Contributed Joongi Kim John Belmonte bpo-41229.) Add asynchronous context manager support contextlib.nullcontext() . (Contributed Tom Gringauz bpo-41543.) Add AsyncContextDecorator , supporting usage async context managers decorators. curses\u00b6 extended color functions added ncurses 6.1 used transparently curses.color_content() , curses.init_color() , curses.init_pair() , curses.pair_content() . new function, curses.has_extended_color_support() , indicates whether extended color support provided underlying ncurses library. (Contributed Jeffrey Kintscher Hans Petter Jansson bpo-36982.) BUTTON5_* constants exposed curses module provided underlying curses library. (Contributed Zackery Spytz bpo-39273.) dataclasses\u00b6 __slots__\u00b6 Added slots parameter dataclasses.dataclass() decorator. (Contributed Yurii Karabas bpo-42269) Keyword-only fields\u00b6 dataclasses supports fields keyword-only generated __init__ method. number ways specifying keyword-only fields. say every field keyword-only: dataclasses import dataclass @dataclass(kw_only=True) class Birthday: name: str birthday: datetime.date name birthday keyword-only parameters generated __init__ method. specify keyword-only per-field basis: dataclasses import dataclass, field @dataclass class Birthday: name: str birthday: datetime.date = field(kw_only=True) birthday keyword-only. set kw_only individual fields, aware rules re-ordering fields due keyword-only fields needing follow non-keyword-only fields. See full dataclasses documentation details. also specify fields following KW_ONLY marker keyword-only. probably common usage: dataclasses import dataclass, KW_ONLY @dataclass class Point: x: float y: float _: KW_ONLY z: float = 0.0 t: float = 0.0 Here, z keyword-only parameters, x not. (Contributed Eric V. Smith bpo-43532.) distutils\u00b6 entire distutils package deprecated, removed Python 3.12. functionality specifying package builds already completely replaced third-party packages setuptools packaging , commonly used APIs available elsewhere standard library (such platform , shutil , subprocess sysconfig ). plans migrate functionality distutils , applications using functions plan make private copies code. Refer PEP 632 discussion. bdist_wininst command deprecated Python 3.8 removed. bdist_wheel command recommended distribute binary packages Windows. (Contributed Victor Stinner bpo-42802.) doctest\u00b6 module define __loader__ , fall back __spec__.loader . (Contributed Brett Cannon bpo-42133.) encodings\u00b6 encodings.normalize_encoding() ignores non-ASCII characters. (Contributed Hai Shi bpo-39337.) enum\u00b6 Enum __repr__() returns enum_name.member_name __str__() returns member_name . Stdlib enums available module constants repr() module_name.member_name . (Contributed Ethan Furman bpo-40066.) Add enum.StrEnum enums members strings. (Contributed Ethan Furman bpo-41816.) fileinput\u00b6 Add encoding errors parameters fileinput.input() fileinput.FileInput . (Contributed Inada Naoki bpo-43712.) fileinput.hook_compressed() returns TextIOWrapper object mode \u201cr\u201d file compressed, like uncompressed files. (Contributed Inada Naoki bpo-5758.) faulthandler\u00b6 faulthandler module detects fatal error occurs garbage collector collection. (Contributed Victor Stinner bpo-44466.) gc\u00b6 Add audit hooks gc.get_objects() , gc.get_referrers() gc.get_referents() . (Contributed Pablo Galindo bpo-43439.) glob\u00b6 Add root_dir dir_fd parameters glob() iglob() allow specify root directory searching. (Contributed Serhiy Storchaka bpo-38144.) hashlib\u00b6 hashlib module requires OpenSSL 1.1.1 newer. (Contributed Christian Heimes PEP 644 bpo-43669.) hashlib module preliminary support OpenSSL 3.0.0. (Contributed Christian Heimes bpo-38820 issues.) pure-Python fallback pbkdf2_hmac() deprecated. future PBKDF2-HMAC available Python built OpenSSL support. (Contributed Christian Heimes bpo-43880.) hmac\u00b6 hmac module uses OpenSSL\u2019s HMAC implementation internally. (Contributed Christian Heimes bpo-40645.) IDLE idlelib\u00b6 Make IDLE invoke sys.excepthook() (when started without \u2018-n\u2019). User hooks previously ignored. (Contributed Ken Hilton bpo-43008.) Rearrange settings dialog. Split General tab Windows Shell/Ed tabs. Move help sources, extend Help menu, Extensions tab. Make space new options shorten dialog. latter makes dialog better fit small screens. (Contributed Terry Jan Reedy bpo-40468.) Move indent space setting Font tab new Windows tab. (Contributed Mark Roseman Terry Jan Reedy bpo-33962.) changes backported 3.9 maintenance release. Add Shell sidebar. Move primary prompt (\u2018>>>\u2019) sidebar. Add secondary prompts (\u2019\u2026\u2019) sidebar. Left click optional drag selects one lines text, editor line number sidebar. Right click selecting text lines displays context menu \u2018copy prompts\u2019. zips together prompts sidebar lines selected text. option also appears context menu text. (Contributed Tal Einat bpo-37903.) Use spaces instead tabs indent interactive code. makes interactive code entries \u2018look right\u2019. Making feasible major motivation adding shell sidebar. (Contributed Terry Jan Reedy bpo-37892.) Highlight new soft keywords match , case , _ pattern-matching statements. However, highlighting perfect incorrect rare cases, including _ -s case patterns. (Contributed Tal Einat bpo-44010.) New 3.10 maintenance releases. Apply syntax highlighting .pyi files. (Contributed Alex Waygood Terry Jan Reedy bpo-45447.) Include prompts saving Shell inputs outputs. (Contributed Terry Jan Reedy gh-95191.) importlib.metadata\u00b6 Feature parity importlib_metadata 4.6 (history). importlib.metadata entry points provide nicer experience selecting entry points group name new importlib.metadata.EntryPoints class. See Compatibility Note docs info deprecation usage. Added importlib.metadata.packages_distributions() resolving top-level Python modules packages importlib.metadata.Distribution. inspect\u00b6 module define __loader__ , fall back __spec__.loader . (Contributed Brett Cannon bpo-42133.) Add inspect.get_annotations() , safely computes annotations defined object. works around quirks accessing annotations various types objects, makes assumptions object examines. inspect.get_annotations() also correctly un-stringize stringized annotations. inspect.get_annotations() considered best practice accessing annotations dict defined Python object; information best practices working annotations, please see Annotations Best Practices. Relatedly, inspect.signature() , inspect.Signature.from_callable() , inspect.Signature.from_function() call inspect.get_annotations() retrieve annotations. means inspect.signature() inspect.Signature.from_callable() also un-stringize stringized annotations. (Contributed Larry Hastings bpo-43817.) itertools\u00b6 Add itertools.pairwise() . (Contributed Raymond Hettinger bpo-38200.) linecache\u00b6 module define __loader__ , fall back __spec__.loader . (Contributed Brett Cannon bpo-42133.) os\u00b6 Add os.cpu_count() support VxWorks RTOS. (Contributed Peixing Xin bpo-41440.) Add new function os.eventfd() related helpers wrap eventfd2 syscall Linux. (Contributed Christian Heimes bpo-41001.) Add os.splice() allows move data two file descriptors without copying kernel address space user address space, one file descriptors must refer pipe. (Contributed Pablo Galindo bpo-41625.) Add O_EVTONLY , O_FSYNC , O_SYMLINK O_NOFOLLOW_ANY macOS. (Contributed Donghee Na bpo-43106.) os.path\u00b6 os.path.realpath() accepts strict keyword-only argument. set True , OSError raised path doesn\u2019t exist symlink loop encountered. (Contributed Barney Gale bpo-43757.) pathlib\u00b6 Add slice support PurePath.parents . (Contributed Joshua Cannon bpo-35498.) Add negative indexing support PurePath.parents . (Contributed Yaroslav Pankovych bpo-21041.) Add Path.hardlink_to method supersedes link_to() . new method argument order symlink_to() . (Contributed Barney Gale bpo-39950.) pathlib.Path.stat() chmod() accept follow_symlinks keyword-only argument consistency corresponding functions os module. (Contributed Barney Gale bpo-39906.) platform\u00b6 Add platform.freedesktop_os_release() retrieve operation system identification freedesktop.org os-release standard file. (Contributed Christian Heimes bpo-28468.) pprint\u00b6 pprint.pprint() accepts new underscore_numbers keyword argument. (Contributed sblondon bpo-42914.) pprint pretty-print dataclasses.dataclass instances. (Contributed Lewis Gaul bpo-43080.) py_compile\u00b6 Add --quiet option command-line interface py_compile . (Contributed Gregory Schevchenko bpo-38731.) pyclbr\u00b6 Add end_lineno attribute Function Class objects tree returned pyclbr.readmodule() pyclbr.readmodule_ex() . matches existing (start) lineno . (Contributed Aviral Srivastava bpo-38307.) shelve\u00b6 shelve module uses pickle.DEFAULT_PROTOCOL default instead pickle protocol 3 creating shelves. (Contributed Zackery Spytz bpo-34204.) statistics\u00b6 Add covariance() , Pearson\u2019s correlation() , simple linear_regression() functions. (Contributed Tymoteusz Wo\u0142od\u017ako bpo-38490.) site\u00b6 module define __loader__ , fall back __spec__.loader . (Contributed Brett Cannon bpo-42133.) socket\u00b6 exception socket.timeout alias TimeoutError . (Contributed Christian Heimes bpo-42413.) Add option create MPTCP sockets IPPROTO_MPTCP (Contributed Rui Cunha bpo-43571.) Add IP_RECVTOS option receive type service (ToS) DSCP/ECN fields (Contributed Georg Sauthoff bpo-44077.) ssl\u00b6 ssl module requires OpenSSL 1.1.1 newer. (Contributed Christian Heimes PEP 644 bpo-43669.) ssl module preliminary support OpenSSL 3.0.0 new option OP_IGNORE_UNEXPECTED_EOF . (Contributed Christian Heimes bpo-38820, bpo-43794, bpo-43788, bpo-43791, bpo-43799, bpo-43920, bpo-43789, bpo-43811.) Deprecated function use deprecated constants result DeprecationWarning . ssl.SSLContext.options OP_NO_SSLv2 OP_NO_SSLv3 set default therefore cannot warn setting flag again. deprecation section list deprecated features. (Contributed Christian Heimes bpo-43880.) ssl module secure default settings. Ciphers without forward secrecy SHA-1 MAC disabled default. Security level 2 prohibits weak RSA, DH, ECC keys less 112 bits security. SSLContext defaults minimum protocol version TLS 1.2. Settings based Hynek Schlawack\u2019s research. (Contributed Christian Heimes bpo-43998.) deprecated protocols SSL 3.0, TLS 1.0, TLS 1.1 longer officially supported. Python block actively. However OpenSSL build options, distro configurations, vendor patches, cipher suites may prevent successful handshake. Add timeout parameter ssl.get_server_certificate() function. (Contributed Zackery Spytz bpo-31870.) ssl module uses heap-types multi-phase initialization. (Contributed Christian Heimes bpo-42333.) new verify flag VERIFY_X509_PARTIAL_CHAIN added. (Contributed l0x bpo-40849.) sqlite3\u00b6 Add audit events connect/handle() , enable_load_extension() , load_extension() . (Contributed Erlend E. Aasland bpo-43762.) sys\u00b6 Add sys.orig_argv attribute: list original command line arguments passed Python executable. (Contributed Victor Stinner bpo-23427.) Add sys.stdlib_module_names , containing list standard library module names. (Contributed Victor Stinner bpo-42955.) _thread\u00b6 _thread.interrupt_main() takes optional signal number simulate (the default still signal.SIGINT ). (Contributed Antoine Pitrou bpo-43356.) threading\u00b6 Add threading.gettrace() threading.getprofile() retrieve functions set threading.settrace() threading.setprofile() respectively. (Contributed Mario Corchero bpo-42251.) Add threading.__excepthook__ allow retrieving original value threading.excepthook() case set broken different value. (Contributed Mario Corchero bpo-42308.) traceback\u00b6 format_exception() , format_exception_only() , print_exception() functions take exception object positional-only argument. (Contributed Zackery Spytz Matthias Bussonnier bpo-26389.) types\u00b6 Reintroduce types.EllipsisType , types.NoneType types.NotImplementedType classes, providing new set types readily interpretable type checkers. (Contributed Bas van Beek bpo-41810.) typing\u00b6 major changes, see New Features Related Type Hints. behavior typing.Literal changed conform PEP 586 match behavior static type checkers specified PEP. Literal de-duplicates parameters.Equality comparisons Literal objects order independent.Literal comparisons respect types. example,Literal[0] == Literal[False] previously evaluated toTrue . nowFalse . support change, internally used type cache supports differentiating types.Literal objects raise aTypeError exception equality comparisons parameters hashable. Note declaringLiteral unhashable parameters throw error:>>> typing import Literal >>> Literal[{0}] >>> Literal[{0}] == Literal[{False}] Traceback (most recent call last): File \"<stdin>\", line 1, <module> TypeError: unhashable type: 'set' (Contributed Yurii Karabas bpo-42345.) Add new function typing.is_typeddict() introspect annotation typing.TypedDict . (Contributed Patrick Reader bpo-41792.) Subclasses typing.Protocol data variables declared raise TypeError checked isinstance unless decorated runtime_checkable() . Previously, checks passed silently. Users decorate subclasses runtime_checkable() decorator want runtime protocols. (Contributed Yurii Karabas bpo-38908.) Importing typing.io typing.re submodules emit DeprecationWarning . submodules deprecated since Python 3.8 removed future version Python. Anything belonging submodules imported directly typing instead. (Contributed Sebastian Rittau bpo-38291.) unittest\u00b6 Add new method assertNoLogs() complement existing assertLogs() . (Contributed Kit Yan Choi bpo-39385.) urllib.parse\u00b6 Python versions earlier Python 3.10 allowed using ; & query parameter separators urllib.parse.parse_qs() urllib.parse.parse_qsl() . Due security concerns, conform newer W3C recommendations, changed allow single separator key, & default. change also affects cgi.parse() cgi.parse_multipart() use affected functions internally. details, please see respective documentation. (Contributed Adam Goldschmidt, Senthil Kumaran Ken Jin bpo-42967.) presence newline tab characters parts URL allows forms attacks. Following WHATWG specification updates RFC 3986, ASCII newline \\n , \\r tab \\t characters stripped URL parser urllib.parse preventing attacks. removal characters controlled new module level variable urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE . (See gh-88048) xml\u00b6 Add LexicalHandler class xml.sax.handler module. (Contributed Jonathan Gossage Zackery Spytz bpo-35018.) zipimport\u00b6 Add methods related PEP 451: find_spec() , zipimport.zipimporter.create_module() , zipimport.zipimporter.exec_module() . (Contributed Brett Cannon bpo-42131.) Add invalidate_caches() method. (Contributed Desmond Cheong bpo-14678.) Optimizations\u00b6 Constructors str() ,bytes() andbytearray() faster (around 30\u201340% small objects). (Contributed Serhiy Storchaka bpo-41334.)The runpy module imports fewer modules. Thepython3 -m module-name command startup time 1.4x faster average. Linux,python3 -I -m module-name imports 69 modules Python 3.9, whereas imports 51 modules (-18) Python 3.10. (Contributed Victor Stinner bpo-41006 bpo-41718.)The LOAD_ATTR instruction uses new \u201cper opcode cache\u201d mechanism. 36% faster regular attributes 44% faster slots. (Contributed Pablo Galindo Yury Selivanov bpo-42093 Guido van Rossum bpo-42927, based ideas implemented originally PyPy MicroPython.)When building Python --enable-optimizations now-fno-semantic-interposition added compile link line. speeds builds Python interpreter created with--enable-shared withgcc 30%. See article details. (Contributed Victor Stinner Pablo Galindo bpo-38980.)Use new output buffer management code bz2 /lzma /zlib modules, add.readall() function to_compression.DecompressReader class. bz2 decompression 1.09x ~ 1.17x faster, lzma decompression 1.20x ~ 1.32x faster,GzipFile.read(-1) 1.11x ~ 1.18x faster. (Contributed Lin, reviewed Gregory P. Smith, bpo-41486)When using stringized annotations, annotations dicts functions longer created function created. Instead, stored tuple strings, function object lazily converts annotations dict demand. optimization cuts CPU time needed define annotated function half. (Contributed Yurii Karabas Inada Naoki bpo-42202.) Substring search functions str1 str2 andstr2.find(str1) sometimes use Crochemore & Perrin\u2019s \u201cTwo-Way\u201d string searching algorithm avoid quadratic behavior long strings. (Contributed Dennis Sweeney bpo-41972)Add micro-optimizations _PyType_Lookup() improve type attribute cache lookup performance common case cache hits. makes interpreter 1.04 times faster average. (Contributed Dino Viehland bpo-43452.)The following built-in functions support faster PEP 590 vectorcall calling convention: map() ,filter() ,reversed() ,bool() andfloat() . (Contributed Donghee Na Jeroen Demeyer bpo-43575, bpo-43287, bpo-41922, bpo-41873 bpo-41870.)BZ2File performance improved removing internalRLock . makesBZ2File thread unsafe face multiple simultaneous readers writers, like equivalent classes ingzip andlzma always been. (Contributed Inada Naoki bpo-43785.) Deprecated\u00b6 Currently Python accepts numeric literals immediately followed keywords, example 0in x ,1or x ,0if 1else 2 . allows confusing ambiguous expressions like[0x1for x y] (which interpreted as[0x1 x y] or[0x1f x y] ). Starting release, deprecation warning raised numeric literal immediately followed one keywordsand ,else ,for ,if ,in ,is andor . future releases changed syntax warning, finally syntax error. (Contributed Serhiy Storchaka bpo-43833.)Starting release, concerted effort begin cleaning old import semantics kept Python 2.7 compatibility. Specifically, find_loader() /find_module() (superseded byfind_spec() ),load_module() (superseded byexec_module() ),module_repr() (which import system takes care you), the__package__ attribute (superseded by__spec__.parent ), the__loader__ attribute (superseded by__spec__.loader ), the__cached__ attribute (superseded by__spec__.cached ) slowly removed (as well classes methods inimportlib ).ImportWarning and/orDeprecationWarning raised appropriate help identify code needs updating transition.The entire distutils namespace deprecated, removed Python 3.12. Refer module changes section information.Non-integer arguments random.randrange() deprecated. TheValueError deprecated favor aTypeError . (Contributed Serhiy Storchaka Raymond Hettinger bpo-37319.)The various load_module() methods ofimportlib documented deprecated since Python 3.6, also trigger aDeprecationWarning . Useexec_module() instead. (Contributed Brett Cannon bpo-26131.)zimport.zipimporter.load_module() deprecated preference forexec_module() . (Contributed Brett Cannon bpo-26131.)The use load_module() import system triggers anImportWarning asexec_module() preferred. (Contributed Brett Cannon bpo-26131.)The use importlib.abc.MetaPathFinder.find_module() andimportlib.abc.PathEntryFinder.find_module() import system trigger anImportWarning asimportlib.abc.MetaPathFinder.find_spec() andimportlib.abc.PathEntryFinder.find_spec() preferred, respectively. useimportlib.util.spec_from_loader() help porting. (Contributed Brett Cannon bpo-42134.)The use importlib.abc.PathEntryFinder.find_loader() import system triggers anImportWarning asimportlib.abc.PathEntryFinder.find_spec() preferred. useimportlib.util.spec_from_loader() help porting. (Contributed Brett Cannon bpo-43672.)The various implementations importlib.abc.MetaPathFinder.find_module() (importlib.machinery.BuiltinImporter.find_module() ,importlib.machinery.FrozenImporter.find_module() ,importlib.machinery.WindowsRegistryFinder.find_module() ,importlib.machinery.PathFinder.find_module() ,importlib.abc.MetaPathFinder.find_module() ),importlib.abc.PathEntryFinder.find_module() (importlib.machinery.FileFinder.find_module() ), andimportlib.abc.PathEntryFinder.find_loader() (importlib.machinery.FileFinder.find_loader() ) raiseDeprecationWarning slated removal Python 3.12 (previously documented deprecated Python 3.4). (Contributed Brett Cannon bpo-42135.)importlib.abc.Finder deprecated (including sole method,find_module() ). Bothimportlib.abc.MetaPathFinder andimportlib.abc.PathEntryFinder longer inherit class. Users inherit one two classes appropriate instead. (Contributed Brett Cannon bpo-42135.)The deprecations imp ,importlib.find_loader() ,importlib.util.set_package_wrapper() ,importlib.util.set_loader_wrapper() ,importlib.util.module_for_loader() ,pkgutil.ImpImporter , andpkgutil.ImpLoader updated list Python 3.12 slated version removal (they began raisingDeprecationWarning previous versions Python). (Contributed Brett Cannon bpo-43720.)The import system uses __spec__ attribute modules falling back onmodule_repr() module\u2019s__repr__() method. Removal use ofmodule_repr() scheduled Python 3.12. (Contributed Brett Cannon bpo-42137.)importlib.abc.Loader.module_repr() ,importlib.machinery.FrozenLoader.module_repr() , andimportlib.machinery.BuiltinLoader.module_repr() deprecated slated removal Python 3.12. (Contributed Brett Cannon bpo-42136.)sqlite3.OptimizedUnicode undocumented obsolete since Python 3.3, made alias tostr . deprecated, scheduled removal Python 3.12. (Contributed Erlend E. Aasland bpo-42264.)The undocumented built-in function sqlite3.enable_shared_cache deprecated, scheduled removal Python 3.12. use strongly discouraged SQLite3 documentation. See SQLite3 docs details. shared cache must used, open database URI mode using thecache=shared query parameter. (Contributed Erlend E. Aasland bpo-24464.)The following threading methods deprecated:threading.currentThread =>threading.current_thread() threading.activeCount =>threading.active_count() threading.Condition.notifyAll =>threading.Condition.notify_all() threading.Event.isSet =>threading.Event.is_set() threading.Thread.setName =>threading.Thread.name threading.thread.getName =>threading.Thread.name threading.Thread.isDaemon =>threading.Thread.daemon threading.Thread.setDaemon =>threading.Thread.daemon (Contributed Jelle Zijlstra gh-87889.) pathlib.Path.link_to() deprecated slated removal Python 3.12. Usepathlib.Path.hardlink_to() instead. (Contributed Barney Gale bpo-39950.)cgi.log() deprecated slated removal Python 3.12. (Contributed Inada Naoki bpo-41139.)The following ssl features deprecated since Python 3.6, Python 3.7, OpenSSL 1.1.0 removed 3.11:OP_NO_SSLv2 ,OP_NO_SSLv3 ,OP_NO_TLSv1 ,OP_NO_TLSv1_1 ,OP_NO_TLSv1_2 , andOP_NO_TLSv1_3 replaced byminimum_version andmaximum_version .PROTOCOL_SSLv2 ,PROTOCOL_SSLv3 ,PROTOCOL_SSLv23 ,PROTOCOL_TLSv1 ,PROTOCOL_TLSv1_1 ,PROTOCOL_TLSv1_2 , andPROTOCOL_TLS deprecated favor ofPROTOCOL_TLS_CLIENT andPROTOCOL_TLS_SERVER wrap_socket() replaced byssl.SSLContext.wrap_socket() match_hostname() RAND_pseudo_bytes() ,RAND_egd() NPN features like ssl.SSLSocket.selected_npn_protocol() andssl.SSLContext.set_npn_protocols() replaced ALPN. threading debug ( PYTHONTHREADDEBUG environment variable) deprecated Python 3.10 removed Python 3.12. feature requires debug build Python. (Contributed Victor Stinner bpo-44584.)Importing typing.io andtyping.re submodules emitDeprecationWarning . submodules removed future version Python. Anything belonging submodules imported directly fromtyping instead. (Contributed Sebastian Rittau bpo-38291.) Removed\u00b6 Removed special methods __int__ ,__float__ ,__floordiv__ ,__mod__ ,__divmod__ ,__rfloordiv__ ,__rmod__ and__rdivmod__ thecomplex class. always raised aTypeError . (Contributed Serhiy Storchaka bpo-41974.)The ParserBase.error() method private undocumented_markupbase module removed.html.parser.HTMLParser subclass ofParserBase itserror() implementation already removed Python 3.5. (Contributed Berker Peksag bpo-31844.)Removed unicodedata.ucnhash_CAPI attribute internal PyCapsule object. related private_PyUnicode_Name_CAPI structure moved internal C API. (Contributed Victor Stinner bpo-42157.)Removed parser module, deprecated 3.9 due switch new PEG parser, well C source header files used old parser, includingnode.h ,parser.h ,graminit.h andgrammar.h .Removed Public C API functions PyParser_SimpleParseStringFlags ,PyParser_SimpleParseStringFlagsFilename ,PyParser_SimpleParseFileFlags andPyNode_Compile deprecated 3.9 due switch new PEG parser.Removed formatter module, deprecated Python 3.4. somewhat obsolete, little used, tested. originally scheduled removed Python 3.6, removals delayed Python 2.7 EOL. Existing users copy whatever classes use code. (Contributed Donghee Na Terry J. Reedy bpo-42299.)Removed PyModule_GetWarningsModule() function useless due the_warnings module converted builtin module 2.6. (Contributed Hai Shi bpo-42599.)Remove deprecated aliases Collections Abstract Base Classes collections module. (Contributed Victor Stinner bpo-37324.)The loop parameter removed ofasyncio \u2018s high-level API following deprecation Python 3.8. motivation behind change multifold:This simplifies high-level API. functions high-level API implicitly getting current thread\u2019s running event loop since Python 3.7. isn\u2019t need pass event loop API normal use cases. Event loop passing error-prone especially dealing loops running different threads. Note low-level API still accept loop . See Changes Python API examples replace existing code.(Contributed Yurii Karabas, Andrew Svetlov, Yury Selivanov Kyle Stanley bpo-42392.) Porting Python 3.10\u00b6 section lists previously described changes bugfixes may require changes code. Changes Python syntax\u00b6 Deprecation warning emitted compiling previously valid syntax numeric literal immediately followed keyword (like 0in x ). future releases changed syntax warning, finally syntax error. get rid warning make code compatible future releases add space numeric literal following keyword. (Contributed Serhiy Storchaka bpo-43833.) Changes Python API\u00b6 etype parameters format_exception() ,format_exception_only() , andprint_exception() functions thetraceback module renamed exc. (Contributed Zackery Spytz Matthias Bussonnier bpo-26389.)atexit : Python exit, callback registered withatexit.register() fails, exception logged. Previously, exceptions logged, last exception always silently ignored. (Contributed Victor Stinner bpo-42639.)collections.abc.Callable generic flattens type parameters, similar whattyping.Callable currently does. means thatcollections.abc.Callable[[int, str], str] have__args__ of(int, str, str) ; previously was([int, str], str) . Code accesses arguments viatyping.get_args() or__args__ need account change. Furthermore,TypeError may raised invalid forms parameterizingcollections.abc.Callable may passed silently Python 3.9. (Contributed Ken Jin bpo-42195.)socket.htons() andsocket.ntohs() raiseOverflowError instead ofDeprecationWarning given parameter fit 16-bit unsigned integer. (Contributed Erlend E. Aasland bpo-42393.)The loop parameter removed ofasyncio \u2018s high-level API following deprecation Python 3.8.A coroutine currently looks like this: async def foo(loop): await asyncio.sleep(1, loop=loop) replaced this: async def foo(): await asyncio.sleep(1) foo() specifically designed run current thread\u2019s running event loop (e.g. running another thread\u2019s event loop), consider usingasyncio.run_coroutine_threadsafe() instead.(Contributed Yurii Karabas, Andrew Svetlov, Yury Selivanov Kyle Stanley bpo-42392.) types.FunctionType constructor inherits current builtins globals dictionary no\"__builtins__\" key, rather using{\"None\": None} builtins: behavior aseval() andexec() functions. Defining function withdef function(...): ... Python affected, globals cannot overridden syntax: also inherits current builtins. (Contributed Victor Stinner bpo-42990.) Changes C API\u00b6 C API functions PyParser_SimpleParseStringFlags ,PyParser_SimpleParseStringFlagsFilename ,PyParser_SimpleParseFileFlags ,PyNode_Compile type used functions,struct _node , removed due switch new PEG parser.Source compiled directly code object using, example, Py_CompileString() . resulting code object evaluated using, example,PyEval_EvalCode() .Specifically: call PyParser_SimpleParseStringFlags followed byPyNode_Compile replaced callingPy_CompileString() .There direct replacement PyParser_SimpleParseFileFlags . compile code aFILE * argument, need read file C pass resulting buffer toPy_CompileString() .To compile file given char * filename, explicitly open file, read compile result. One way using theio module withPyImport_ImportModule() ,PyObject_CallMethod() ,PyBytes_AsString() andPy_CompileString() , sketched below. (Declarations error handling omitted.)io_module = Import_ImportModule(\"io\"); fileobject = PyObject_CallMethod(io_module, \"open\", \"ss\", filename, \"rb\"); source_bytes_object = PyObject_CallMethod(fileobject, \"read\", \"\"); result = PyObject_CallMethod(fileobject, \"close\", \"\"); source_buf = PyBytes_AsString(source_bytes_object); code = Py_CompileString(source_buf, filename, Py_file_input); FrameObject objects, thef_lasti member represents wordcode offset instead simple offset bytecode string. means number needs multiplied 2 used APIs expect byte offset instead (likePyCode_Addr2Line() example). Notice well thef_lasti member ofFrameObject objects considered stable: please usePyFrame_GetLineNumber() instead. CPython bytecode changes\u00b6 MAKE_FUNCTION instruction accepts either dict tuple strings function\u2019s annotations. (Contributed Yurii Karabas Inada Naoki bpo-42202.) Build Changes\u00b6 PEP 644: Python requires OpenSSL 1.1.1 newer. OpenSSL 1.0.2 longer supported. (Contributed Christian Heimes bpo-43669.) C99 functions snprintf() andvsnprintf() required build Python. (Contributed Victor Stinner bpo-36020.)sqlite3 requires SQLite 3.7.15 higher. (Contributed Sergey Fedoseev Erlend E. Aasland bpo-40744 bpo-40810.)The atexit module must always built built-in module. (Contributed Victor Stinner bpo-42639.)Add --disable-test-modules option theconfigure script: don\u2019t build install test modules. (Contributed Xavier de Gaye, Thomas Petazzoni Peixing Xin bpo-27640.)Add --with-wheel-pkg-dir=PATH option the./configure script. specified, theensurepip module looks forsetuptools andpip wheel packages directory: present, wheel packages used instead ensurepip bundled wheel packages.Some Linux distribution packaging policies recommend bundling dependencies. example, Fedora installs wheel packages /usr/share/python-wheels/ directory don\u2019t install theensurepip._bundled package.(Contributed Victor Stinner bpo-42856.) Add new configure --without-static-libpython option build thelibpythonMAJOR.MINOR.a static library install thepython.o object file.(Contributed Victor Stinner bpo-43103.) configure script uses thepkg-config utility, available, detect location Tcl/Tk headers libraries. before, locations explicitly specified the--with-tcltk-includes and--with-tcltk-libs configuration options. (Contributed Manolis Stamatogiannakis bpo-42603.)Add --with-openssl-rpath option toconfigure script. option simplifies building Python custom OpenSSL installation, e.g../configure --with-openssl=/path/to/openssl --with-openssl-rpath=auto . (Contributed Christian Heimes bpo-43466.) C API Changes\u00b6 PEP 652: Maintaining Stable ABI\u00b6 Stable ABI (Application Binary Interface) extension modules embedding Python explicitly defined. C API Stability describes C API ABI stability guarantees along best practices using Stable ABI. New Features\u00b6 result PyNumber_Index() always exact typeint . Previously, result could instance subclass ofint . (Contributed Serhiy Storchaka bpo-40792.)Add new orig_argv member thePyConfig structure: list original command line arguments passed Python executable. (Contributed Victor Stinner bpo-23427.)The PyDateTime_DATE_GET_TZINFO() andPyDateTime_TIME_GET_TZINFO() macros added accessing thetzinfo attributes ofdatetime.datetime anddatetime.time objects. (Contributed Zackery Spytz bpo-30155.)Add PyCodec_Unregister() function unregister codec search function. (Contributed Hai Shi bpo-41842.)The PyIter_Send() function added allow sending value iterator without raisingStopIteration exception. (Contributed Vladimir Matveev bpo-41756.)Add PyUnicode_AsUTF8AndSize() limited C API. (Contributed Alex Gaynor bpo-41784.)Add PyModule_AddObjectRef() function: similar toPyModule_AddObject() don\u2019t steal reference value success. (Contributed Victor Stinner bpo-1635741.)Add Py_NewRef() andPy_XNewRef() functions increment reference count object return object. (Contributed Victor Stinner bpo-42262.)The PyType_FromSpecWithBases() andPyType_FromModuleAndSpec() functions accept single class bases argument. (Contributed Serhiy Storchaka bpo-42423.)The PyType_FromModuleAndSpec() function accepts NULLtp_doc slot. (Contributed Hai Shi bpo-41832.)The PyType_GetSlot() function accept static types. (Contributed Hai Shi Petr Viktorin bpo-41073.)Add new PySet_CheckExact() function C-API check object instance ofset instance subtype. (Contributed Pablo Galindo bpo-43277.)Add PyErr_SetInterruptEx() allows passing signal number simulate. (Contributed Antoine Pitrou bpo-43356.)The limited C API supported Python built debug mode (if Py_DEBUG macro defined). limited C API, thePy_INCREF() andPy_DECREF() functions implemented opaque function calls, rather accessing directly thePyObject.ob_refcnt member, Python built debug mode thePy_LIMITED_API macro targets Python 3.10 newer. became possible support limited C API debug mode thePyObject structure release debug mode since Python 3.8 (see bpo-36465).The limited C API still supported --with-trace-refs special build (Py_TRACE_REFS macro). (Contributed Victor Stinner bpo-43688.)Add Py_Is(x, y) function test x object object, asx Python. Add also thePy_IsNone() ,Py_IsTrue() ,Py_IsFalse() functions test object is, respectively, theNone singleton, theTrue singleton theFalse singleton. (Contributed Victor Stinner bpo-43753.)Add new functions control garbage collector C code: PyGC_Enable() ,PyGC_Disable() ,PyGC_IsEnabled() . functions allow activate, deactivate query state garbage collector C code without import thegc module.Add new Py_TPFLAGS_DISALLOW_INSTANTIATION type flag disallow creating type instances. (Contributed Victor Stinner bpo-43916.)Add new Py_TPFLAGS_IMMUTABLETYPE type flag creating immutable type objects: type attributes cannot set deleted. (Contributed Victor Stinner Erlend E. Aasland bpo-43908.) Porting Python 3.10\u00b6 PY_SSIZE_T_CLEAN macro must defined usePyArg_ParseTuple() andPy_BuildValue() formats use# :es# ,et# ,s# ,u# ,y# ,z# ,U# andZ# . See Parsing arguments building values PEP 353. (Contributed Victor Stinner bpo-40943.)Since Py_REFCNT() changed inline static function,Py_REFCNT(obj) = new_refcnt must replaced withPy_SET_REFCNT(obj, new_refcnt) : seePy_SET_REFCNT() (available since Python 3.9). backward compatibility, macro used:#if PY_VERSION_HEX < 0x030900A4 # define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0) #endif (Contributed Victor Stinner bpo-39573.) Calling PyDict_GetItem() without GIL held allowed historical reason. longer allowed. (Contributed Victor Stinner bpo-40839.)PyUnicode_FromUnicode(NULL, size) andPyUnicode_FromStringAndSize(NULL, size) raiseDeprecationWarning now. UsePyUnicode_New() allocate Unicode object without initial data. (Contributed Inada Naoki bpo-36346.)The private _PyUnicode_Name_CAPI structure PyCapsule APIunicodedata.ucnhash_CAPI moved internal C API. (Contributed Victor Stinner bpo-42157.)Py_GetPath() ,Py_GetPrefix() ,Py_GetExecPrefix() ,Py_GetProgramFullPath() ,Py_GetPythonHome() andPy_GetProgramName() functions returnNULL called beforePy_Initialize() (before Python initialized). Use new Python Initialization Configuration API get Python Path Configuration. (Contributed Victor Stinner bpo-42260.)PyList_SET_ITEM() ,PyTuple_SET_ITEM() andPyCell_SET() macros longer used l-value r-value. example,x = PyList_SET_ITEM(a, b, c) andPyList_SET_ITEM(a, b, c) = x fail compiler error. prevents bugs likeif (PyList_SET_ITEM (a, b, c) < 0) ... test. (Contributed Zackery Spytz Victor Stinner bpo-30459.)The non-limited API files odictobject.h ,parser_interface.h ,picklebufobject.h ,pyarena.h ,pyctype.h ,pydebug.h ,pyfpe.h , andpytime.h moved theInclude/cpython directory. files must included directly, already included inPython.h ; see Include Files. included directly, consider includingPython.h instead. (Contributed Nicholas Sim bpo-35134.)Use Py_TPFLAGS_IMMUTABLETYPE type flag create immutable type objects. rely onPy_TPFLAGS_HEAPTYPE decide type object mutable not; check ifPy_TPFLAGS_IMMUTABLETYPE set instead. (Contributed Victor Stinner Erlend E. Aasland bpo-43908.)The undocumented function Py_FrozenMain removed limited API. function mainly useful custom builds Python. (Contributed Petr Viktorin bpo-26241.) Deprecated\u00b6 PyUnicode_InternImmortal() function deprecated removed Python 3.12: usePyUnicode_InternInPlace() instead. (Contributed Victor Stinner bpo-41692.) Removed\u00b6 Removed Py_UNICODE_str* functions manipulatingPy_UNICODE* strings. (Contributed Inada Naoki bpo-41123.)Py_UNICODE_strlen : usePyUnicode_GetLength() orPyUnicode_GET_LENGTH Py_UNICODE_strcat : usePyUnicode_CopyCharacters() orPyUnicode_FromFormat() Py_UNICODE_strcpy ,Py_UNICODE_strncpy : usePyUnicode_CopyCharacters() orPyUnicode_Substring() Py_UNICODE_strcmp : usePyUnicode_Compare() Py_UNICODE_strncmp : usePyUnicode_Tailmatch() Py_UNICODE_strchr ,Py_UNICODE_strrchr : usePyUnicode_FindChar() Removed PyUnicode_GetMax() . Please migrate new (PEP 393) APIs. (Contributed Inada Naoki bpo-41103.)Removed PyLong_FromUnicode() . Please migrate toPyLong_FromUnicodeObject() . (Contributed Inada Naoki bpo-41103.)Removed PyUnicode_AsUnicodeCopy() . Please usePyUnicode_AsUCS4Copy() orPyUnicode_AsWideCharString() (Contributed Inada Naoki bpo-41103.)Removed _Py_CheckRecursionLimit variable: replaced byceval.recursion_limit thePyInterpreterState structure. (Contributed Victor Stinner bpo-41834.)Removed undocumented macros Py_ALLOW_RECURSION andPy_END_ALLOW_RECURSION therecursion_critical field thePyInterpreterState structure. (Contributed Serhiy Storchaka bpo-41936.)Removed undocumented PyOS_InitInterrupts() function. Initializing Python already implicitly installs signal handlers: seePyConfig.install_signal_handlers . (Contributed Victor Stinner bpo-41713.)Remove PyAST_Validate() function. longer possible build AST object (mod_ty type) public C API. function already excluded limited C API (PEP 384). (Contributed Victor Stinner bpo-43244.)Remove symtable.h header file undocumented functions:PyST_GetScope() PySymtable_Build() PySymtable_BuildObject() PySymtable_Free() Py_SymtableString() Py_SymtableStringObject() Py_SymtableString() function part stable ABI mistake could used, thesymtable.h header file excluded limited C API.Use Python symtable module instead. (Contributed Victor Stinner bpo-43244.)Remove PyOS_ReadlineFunctionPointer() limited C API headers frompython3.dll , library provides stable ABI Windows. Since function takes aFILE* argument, ABI stability cannot guaranteed. (Contributed Petr Viktorin bpo-43868.)Remove ast.h ,asdl.h , andPython-ast.h header files. functions undocumented excluded limited C API. names defined header files prefixed byPy could create names conflicts. example,Python-ast.h defined aYield macro conflict theYield name used Windows<winbase.h> header. Use Pythonast module instead. (Contributed Victor Stinner bpo-43244.)Remove compiler parser functions using struct _mod type, public AST C API removed:PyAST_Compile() PyAST_CompileEx() PyAST_CompileObject() PyFuture_FromAST() PyFuture_FromASTObject() PyParser_ASTFromFile() PyParser_ASTFromFileObject() PyParser_ASTFromFilename() PyParser_ASTFromString() PyParser_ASTFromStringObject() functions undocumented excluded limited C API. (Contributed Victor Stinner bpo-43244.) Remove pyarena.h header file functions:PyArena_New() PyArena_Free() PyArena_Malloc() PyArena_AddPyObject() functions undocumented, excluded limited C API, used internally compiler. (Contributed Victor Stinner bpo-43244.) PyThreadState.use_tracing member removed optimize Python. (Contributed Mark Shannon bpo-43760.) Notable security feature 3.10.7\u00b6 Converting int str bases 2 (binary), 4, 8 (octal), 16 (hexadecimal), 32 base 10 (decimal) raises ValueError number digits string form limit avoid potential denial service attacks due algorithmic complexity. mitigation CVE 2020-10735. limit configured disabled environment variable, command line flag, sys APIs. See integer string conversion length limitation documentation. default limit 4300 digits string form. Notable security feature 3.10.8\u00b6 deprecated mailcap module refuses inject unsafe text (filenames, MIME types, parameters) shell commands. Instead using text, warn act match found (or test commands, test failed). (Contributed Petr Viktorin gh-98966.) Notable changes 3.10.12\u00b6 tarfile\u00b6 extraction methods tarfile , andshutil.unpack_archive() , new filter argument allows limiting tar features may surprising dangerous, creating files outside destination directory. See Extraction filters details. Python 3.12, use without filter argument show aDeprecationWarning . Python 3.14, default switch to'data' . (Contributed Petr Viktorin PEP 706.)"},
{"source": "https://docs.python.org/3/whatsnew/3.11.html", "title": "What\u2019s New In Python 3.11", "text": "What\u2019s New Python 3.11\u00b6 - Editor: Pablo Galindo Salgado article explains new features Python 3.11, compared 3.10. Python 3.11 released October 24, 2022. full details, see changelog. Summary \u2013 Release highlights\u00b6 Python 3.11 10-60% faster Python 3.10. average, measured 1.25x speedup standard benchmark suite. See Faster CPython details. New syntax features: New built-in features: New standard library modules: Interpreter improvements: New -P command line option andPYTHONSAFEPATH environment variable disable automatically prepending potentially unsafe paths tosys.path New typing features: Important deprecations, removals restrictions: PEP 594: Many legacy standard library modules deprecated removed Python 3.13 New Features\u00b6 PEP 657: Fine-grained error locations tracebacks\u00b6 printing tracebacks, interpreter point exact expression caused error, instead line. example: Traceback (most recent call last): File \"distance.py\", line 11, <module> print(manhattan_distance(p1, p2)) ^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"distance.py\", line 6, manhattan_distance return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y) ^^^^^^^^^ AttributeError: 'NoneType' object attribute 'x' Previous versions interpreter would point line, making ambiguous object None . enhanced errors also helpful dealing deeply nested dict objects multiple function calls: Traceback (most recent call last): File \"query.py\", line 37, <module> magic_arithmetic('foo') File \"query.py\", line 18, magic_arithmetic return add_counts(x) / 25 ^^^^^^^^^^^^^ File \"query.py\", line 24, add_counts return 25 + query_user(user1) + query_user(user2) ^^^^^^^^^^^^^^^^^ File \"query.py\", line 32, query_user return 1 + query_count(db, response['a']['b']['c']['user'], retry=True) ~~~~~~~~~~~~~~~~~~^^^^^ TypeError: 'NoneType' object subscriptable well complex arithmetic expressions: Traceback (most recent call last): File \"calculation.py\", line 54, <module> result = (x / / z) * (a / b / c) ~~~~~~^~~ ZeroDivisionError: division zero Additionally, information used enhanced traceback feature made available via general API, used correlate bytecode instructions source code location. information retrieved using: codeobject.co_positions() method Python.The PyCode_Addr2Location() function C API. See PEP 657 details. (Contributed Pablo Galindo, Batuhan Taskaya Ammar Askar bpo-43950.) Note feature requires storing column positions Code Objects, may result small increase interpreter memory usage disk usage compiled Python files. avoid storing extra information deactivate printing extra traceback information, use -X no_debug_ranges command line option PYTHONNODEBUGRANGES environment variable. PEP 654: Exception Groups except* \u00b6 PEP 654 introduces language features enable program raise handle multiple unrelated exceptions simultaneously. builtin types ExceptionGroup BaseExceptionGroup make possible group exceptions raise together, new except* syntax generalizes except match subgroups exception groups. See PEP 654 details. (Contributed Irit Katriel bpo-45292. PEP written Irit Katriel, Yury Selivanov Guido van Rossum.) PEP 678: Exceptions enriched notes\u00b6 add_note() method added BaseException . used enrich exceptions context information available time exception raised. added notes appear default traceback. See PEP 678 details. (Contributed Irit Katriel bpo-45607. PEP written Zac Hatfield-Dodds.) Windows py.exe launcher improvements\u00b6 copy Python Launcher Windows included Python 3.11 significantly updated. supports company/tag syntax defined PEP 514 using -V:<company>/<tag> argument instead limited -<major>.<minor> . allows launching distributions PythonCore , one hosted python.org. using -V: selectors, either company tag omitted, installs searched. example, -V:OtherPython/ select \u201cbest\u201d tag registered OtherPython , -V:3.11 -V:/3.11 select \u201cbest\u201d distribution tag 3.11 . using legacy -<major> , -<major>.<minor> , -<major>-<bitness> -<major>.<minor>-<bitness> arguments, existing behaviour preserved past versions, releases PythonCore selected. However, -64 suffix implies \u201cnot 32-bit\u201d (not necessarily x86-64), multiple supported 64-bit platforms. 32-bit runtimes detected checking runtime\u2019s tag -32 suffix. releases Python since 3.5 included 32-bit builds. Language Changes\u00b6 Starred unpacking expressions used statements. (See bpo-46725 details.)Asynchronous comprehensions allowed inside comprehensions asynchronous functions. Outer comprehensions implicitly become asynchronous case. (Contributed Serhiy Storchaka bpo-33346.) TypeError raised instead anAttributeError inwith statements andcontextlib.ExitStack.enter_context() objects support context manager protocol, inasync statements andcontextlib.AsyncExitStack.enter_async_context() objects supporting asynchronous context manager protocol. (Contributed Serhiy Storchaka bpo-12022 bpo-44471.)Added object.__getstate__() , provides default implementation the__getstate__() method.copy ing andpickle ing instances subclasses builtin typesbytearray ,set ,frozenset ,collections.OrderedDict ,collections.deque ,weakref.WeakSet , anddatetime.tzinfo copies pickles instance attributes implemented slots. change unintended side effect: trips small minority existing Python projects expectingobject.__getstate__() exist. See later comments gh-70766 discussions workarounds code may need. (Contributed Serhiy Storchaka bpo-26579.) Added -P command line option aPYTHONSAFEPATH environment variable, disable automatic prepending tosys.path script\u2019s directory running script, current directory using-c and-m . ensures stdlib installed modules picked byimport , avoids unintentionally maliciously shadowing modules local (and typically user-writable) directory. (Contributed Victor Stinner gh-57684.)A \"z\" option added Format Specification Mini-Language coerces negative positive zero rounding format precision. See PEP 682 details. (Contributed John Belmonte gh-90153.)Bytes longer accepted sys.path . Support broke sometime Python 3.2 3.6, one noticing Python 3.10.0 released. addition, bringing back support would problematic due interactions between-b andsys.path_importer_cache mixture ofstr andbytes keys. (Contributed Thomas Grainger gh-91181.) CPython Implementation Changes\u00b6 special methods __complex__() forcomplex and__bytes__() forbytes implemented support thetyping.SupportsComplex andtyping.SupportsBytes protocols. (Contributed Mark Dickinson Donghee Na bpo-24234.)siphash13 added new internal hashing algorithm. similar security properties assiphash24 , slightly faster long inputs.str ,bytes , types use default algorithm forhash() . PEP 552 hash-based .pyc files usesiphash13 too. (Contributed Inada Naoki bpo-29410.)When active exception re-raised raise statement parameters, traceback attached exception alwayssys.exc_info()[1].__traceback__ . means changes made traceback currentexcept clause reflected re-raised exception. (Contributed Irit Katriel bpo-45711.)The interpreter state\u2019s representation handled exceptions (aka exc_info or_PyErr_StackItem ) theexc_value field;exc_type andexc_traceback removed, derived fromexc_value . (Contributed Irit Katriel bpo-45711.)A new command line option, AppendPath , added Windows installer. behaves similarly toPrependPath , appends install scripts directories instead prepending them. (Contributed Bastian Neuburger bpo-44934.)The PyConfig.module_search_paths_set field must set to1 initialization usePyConfig.module_search_paths initializesys.path . Otherwise, initialization recalculate path replace values added tomodule_search_paths .The output --help option fits 50 lines/80 columns. Information Python environment variables and-X options available using respective--help-env and--help-xoptions flags, new--help-all . (Contributed \u00c9ric Araujo bpo-46142.)Converting int andstr bases 2 (binary), 4, 8 (octal), 16 (hexadecimal), 32 base 10 (decimal) raises aValueError number digits string form limit avoid potential denial service attacks due algorithmic complexity. mitigation CVE 2020-10735. limit configured disabled environment variable, command line flag, orsys APIs. See integer string conversion length limitation documentation. default limit 4300 digits string form. New Modules\u00b6 Improved Modules\u00b6 asyncio\u00b6 Added TaskGroup class, asynchronous context manager holding group tasks wait upon exit. new code recommended usingcreate_task() andgather() directly. (Contributed Yury Selivanov others gh-90908.)Added timeout() , asynchronous context manager setting timeout asynchronous operations. new code recommended usingwait_for() directly. (Contributed Andrew Svetlov gh-90927.)Added Runner class, exposes machinery used byrun() . (Contributed Andrew Svetlov gh-91218.)Added Barrier class synchronization primitives asyncio library, relatedBrokenBarrierError exception. (Contributed Yves Duprat Andrew Svetlov gh-87518.)Added keyword argument all_errors asyncio.loop.create_connection() multiple connection errors raised anExceptionGroup .Added asyncio.StreamWriter.start_tls() method upgrading existing stream-based connections TLS. (Contributed Ian Good bpo-34975.)Added raw datagram socket functions event loop: sock_sendto() ,sock_recvfrom() andsock_recvfrom_into() . implementations inSelectorEventLoop andProactorEventLoop . (Contributed Alex Gr\u00f6nholm bpo-46805.)Added cancelling() anduncancel() methods toTask . primarily intended internal use, notably byTaskGroup . contextlib\u00b6 dataclasses\u00b6 datetime\u00b6 Add datetime.UTC , convenience alias fordatetime.timezone.utc . (Contributed Kabir Kwatra gh-91973.)datetime.date.fromisoformat() ,datetime.time.fromisoformat() anddatetime.datetime.fromisoformat() used parse ISO 8601 formats (barring support fractional hours minutes). (Contributed Paul Ganssle gh-80010.) enum\u00b6 Renamed EnumMeta toEnumType (EnumMeta kept alias).Added StrEnum , members used (and must be) strings.Added ReprEnum , modifies the__repr__() members returning literal values (rather names) for__str__() and__format__() (used bystr() ,format() f-strings).Changed Enum.__format__() (the default forformat() ,str.format() f-strings) always produce result asEnum.__str__() : enums inheriting fromReprEnum member\u2019s value; enums enum member name (e.g.Color.RED ).Added new boundary class parameter Flag enums theFlagBoundary enum options, control handle out-of-range flag values.Added verify() enum decorator theEnumCheck enum options, check enum classes several specific constraints.Added member() andnonmember() decorators, ensure decorated object is/is converted enum member.Added property() decorator, works likeproperty() except enums. Use instead oftypes.DynamicClassAttribute() .Added global_enum() enum decorator, adjusts__repr__() and__str__() show values members module rather enum class. example,'re.ASCII' theASCII member ofre.RegexFlag rather than'RegexFlag.ASCII' .Enhanced Flag supportlen() , iteration andin /not members. example, following works:len(AFlag(3)) == 2 list(AFlag(3)) == (AFlag.ONE, AFlag.TWO) Changed Enum andFlag members defined before__init_subclass__() called;dir() includes methods, etc., mixed-in data types.Changed Flag consider primary values (power two) canonical composite values (3 ,6 ,10 , etc.) considered aliases; inverted flags coerced positive equivalent. fcntl\u00b6 FreeBSD, F_DUP2FD andF_DUP2FD_CLOEXEC flags respectively supported, former equals todup2 usage latter set theFD_CLOEXEC flag addition. fractions\u00b6 functools\u00b6 functools.singledispatch() supportstypes.UnionType andtyping.Union annotations dispatch argument.:>>> functools import singledispatch >>> @singledispatch ... def fun(arg, verbose=False): ... verbose: ... print(\"Let say,\", end=\" \") ... print(arg) ... >>> @fun.register ... def _(arg: int | float, verbose=False): ... verbose: ... print(\"Strength numbers, eh?\", end=\" \") ... print(arg) ... >>> typing import Union >>> @fun.register ... def _(arg: Union[list, set], verbose=False): ... verbose: ... print(\"Enumerate this:\") ... i, elem enumerate(arg): ... print(i, elem) ... (Contributed Yurii Karabas bpo-46014.) gzip\u00b6 gzip.compress() function faster used mtime=0 argument delegates compression entirely singlezlib.compress() operation. one side effect change: gzip file header contains \u201cOS\u201d byte header. traditionally always set value 255 representing \u201cunknown\u201d thegzip module. Now, usingcompress() mtime=0, may set different value underlying zlib C library Python linked against. (See gh-112346 details side effect.) hashlib\u00b6 hashlib.blake2b() andhashlib.blake2s() prefer libb2 Python\u2019s vendored copy. (Contributed Christian Heimes bpo-47095.)The internal _sha3 module SHA3 SHAKE algorithms uses tiny_sha3 instead Keccak Code Package reduce code binary size. Thehashlib module prefers optimized SHA3 SHAKE implementations OpenSSL. change affects installations without OpenSSL support. (Contributed Christian Heimes bpo-47098.)Add hashlib.file_digest() , helper function efficient hashing files file-like objects. (Contributed Christian Heimes gh-89313.) IDLE idlelib\u00b6 inspect\u00b6 Add getmembers_static() return members without triggering dynamic lookup via descriptor protocol. (Contributed Weipeng Hong bpo-30533.)Add ismethodwrapper() checking type object aMethodWrapperType . (Contributed Hakan \u00c7elik bpo-29418.)Change frame-related functions inspect module return newFrameInfo andTraceback class instances (backwards compatible previous named tuple-like interfaces) includes extended PEP 657 position information (end line number, column end column). affected functions are:(Contributed Pablo Galindo gh-88116.) locale\u00b6 Add locale.getencoding() get current locale encoding. similar tolocale.getpreferredencoding(False) ignores Python UTF-8 Mode. logging\u00b6 Added getLevelNamesMapping() return mapping logging level names (e.g.'CRITICAL' ) values corresponding Logging Levels (e.g.50 , default). (Contributed Andrei Kulakovin gh-88024.)Added createSocket() method toSysLogHandler , matchSocketHandler.createSocket() . called automatically handler initialization emitting event, active socket. (Contributed Kirill Pinchuk gh-88457.) math\u00b6 Add math.exp2() : return 2 raised power x. (Contributed Gideon Mitchell bpo-45917.)Add math.cbrt() : return cube root x. (Contributed Ajith Ramachandran bpo-44357.)The behaviour two math.pow() corner cases changed, consistency IEEE 754 specification. operationsmath.pow(0.0, -math.inf) andmath.pow(-0.0, -math.inf) returninf . Previously raisedValueError . (Contributed Mark Dickinson bpo-44339.)The math.nan value always available. (Contributed Victor Stinner bpo-46917.) operator\u00b6 new function operator.call added, thatoperator.call(obj, *args, **kwargs) == obj(*args, **kwargs) . (Contributed Antony Lee bpo-44019.) os\u00b6 Windows, os.urandom() usesBCryptGenRandom() , instead ofCryptGenRandom() deprecated. (Contributed Donghee Na bpo-44611.) pathlib\u00b6 re\u00b6 Atomic grouping ( (?>...) ) possessive quantifiers (*+ ,++ ,?+ ,{m,n}+ ) supported regular expressions. (Contributed Jeffrey C. Jacobs Serhiy Storchaka bpo-433030.) shutil\u00b6 Add optional parameter dir_fd shutil.rmtree() . (Contributed Serhiy Storchaka bpo-46245.) socket\u00b6 Add Socket support NetBSD. (Contributed Thomas Klausner bpo-30512.) create_connection() option raise, case failure connect, anExceptionGroup containing errors instead raising last error. (Contributed Irit Katriel bpo-29980.) sqlite3\u00b6 disable authorizer passing None toset_authorizer() . (Contributed Erlend E. Aasland bpo-44491.)Collation name create_collation() contain Unicode character. Collation names invalid characters raiseUnicodeEncodeError instead ofsqlite3.ProgrammingError . (Contributed Erlend E. Aasland bpo-44688.)sqlite3 exceptions include SQLite extended error code assqlite_errorcode SQLite error name assqlite_errorname . (Contributed Aviv Palivoda, Daniel Shahaf, Erlend E. Aasland bpo-16379 bpo-24139.)Add setlimit() andgetlimit() tosqlite3.Connection setting getting SQLite limits connection basis. (Contributed Erlend E. Aasland bpo-45243.)sqlite3 setssqlite3.threadsafety based default threading mode underlying SQLite library compiled with. (Contributed Erlend E. Aasland bpo-45613.)sqlite3 C callbacks use unraisable exceptions callback tracebacks enabled. Users register anunraisable hook handler improve debug experience. (Contributed Erlend E. Aasland bpo-45828.)Fetch across rollback longer raises InterfaceError . Instead leave SQLite library handle cases. (Contributed Erlend E. Aasland bpo-44092.)Add serialize() anddeserialize() tosqlite3.Connection serializing deserializing databases. (Contributed Erlend E. Aasland bpo-41930.)Add create_window_function() tosqlite3.Connection creating aggregate window functions. (Contributed Erlend E. Aasland bpo-34916.)Add blobopen() tosqlite3.Connection .sqlite3.Blob allows incremental I/O operations blobs. (Contributed Aviv Palivoda Erlend E. Aasland bpo-24905.) string\u00b6 Add get_identifiers() andis_valid() tostring.Template , respectively return valid placeholders, whether invalid placeholders present. (Contributed Ben Kehoe gh-90465.) sys\u00b6 sys.exc_info() derives thetype andtraceback fields thevalue (the exception instance), exception modified handled, changes reflected results subsequent calls toexc_info() . (Contributed Irit Katriel bpo-45711.)Add sys.exception() returns active exception instance (equivalent tosys.exc_info()[1] ). (Contributed Irit Katriel bpo-46328.)Add sys.flags.safe_path flag. (Contributed Victor Stinner gh-57684.) sysconfig\u00b6 Three new installation schemes (posix_venv, nt_venv venv) added used Python creates new virtual environments running virtual environment. first two schemes (posix_venv nt_venv) OS-specific non-Windows Windows, venv essentially alias one according OS Python runs on. useful downstream distributors modify sysconfig.get_preferred_scheme() . Third party code creates new virtual environments use new venv installation scheme determine paths, doesvenv . (Contributed Miro Hron\u010dok bpo-45413.) tempfile\u00b6 SpooledTemporaryFile objects fully implement methods ofio.BufferedIOBase orio.TextIOBase (depending file mode). lets work correctly APIs expect file-like objects, compression modules. (Contributed Carey Metcalfe gh-70363.) threading\u00b6 Unix, sem_clockwait() function available C library (glibc 2.30 newer), thethreading.Lock.acquire() method uses monotonic clock (time.CLOCK_MONOTONIC ) timeout, rather using system clock (time.CLOCK_REALTIME ), affected system clock changes. (Contributed Victor Stinner bpo-41710.) time\u00b6 Unix, time.sleep() uses theclock_nanosleep() ornanosleep() function, available, resolution 1 nanosecond (10-9 seconds), rather usingselect() resolution 1 microsecond (10-6 seconds). (Contributed Benjamin Sz\u0151ke Victor Stinner bpo-21302.)On Windows 8.1 newer, time.sleep() uses waitable timer based high-resolution timers resolution 100 nanoseconds (10-7 seconds). Previously, resolution 1 millisecond (10-3 seconds). (Contributed Benjamin Sz\u0151ke, Donghee Na, Eryk Sun Victor Stinner bpo-21302 bpo-45429.) tkinter\u00b6 Added method info_patchlevel() returns exact version Tcl library named tuple similar tosys.version_info . (Contributed Serhiy Storchaka gh-91827.) traceback\u00b6 Add traceback.StackSummary.format_frame_summary() allow users override frames appear traceback, formatted. (Contributed Ammar Askar bpo-44569.)Add traceback.TracebackException.print() , prints formattedTracebackException instance file. (Contributed Irit Katriel bpo-33809.) typing\u00b6 major changes, see New Features Related Type Hints. Add typing.assert_never() andtyping.Never .typing.assert_never() useful asking type checker confirm line code reachable. runtime, raises anAssertionError . (Contributed Jelle Zijlstra gh-90633.)Add typing.reveal_type() . useful asking type checker type inferred given expression. runtime prints type received value. (Contributed Jelle Zijlstra gh-90572.)Add typing.assert_type() . useful asking type checker confirm type inferred given expression matches given type. runtime simply returns received value. (Contributed Jelle Zijlstra gh-90638.)typing.TypedDict types generic. (Contributed Samodya Abeysiriwardane gh-89026.)NamedTuple types generic. (Contributed Serhiy Storchaka bpo-43923.)Allow subclassing typing.Any . useful avoiding type checker errors related highly dynamic class, mocks. (Contributed Shantanu Jain gh-91154.)The typing.final() decorator sets the__final__ attributed decorated object. (Contributed Jelle Zijlstra gh-90500.)The typing.get_overloads() function used introspecting overloads function.typing.clear_overloads() used clear registered overloads function. (Contributed Jelle Zijlstra gh-89263.)The __init__() method ofProtocol subclasses preserved. (Contributed Adrian Garcia Badarasco gh-88970.)The representation empty tuple types ( Tuple[()] ) simplified. affects introspection, e.g.get_args(Tuple[()]) evaluates to() instead of((),) . (Contributed Serhiy Storchaka gh-91137.)Loosen runtime requirements type annotations removing callable check private typing._type_check function. (Contributed Gregory Beauregard gh-90802.)typing.get_type_hints() supports evaluating strings forward references PEP 585 generic aliases. (Contributed Niklas Rosenstein gh-85542.)typing.get_type_hints() longer addsOptional parameters withNone default. (Contributed Nikita Sobolev gh-90353.)typing.get_type_hints() supports evaluating bare stringifiedClassVar annotations. (Contributed Gregory Beauregard gh-90711.)typing.no_type_check() longer modifies external classes functions. also correctly marks classmethods type checked. (Contributed Nikita Sobolev gh-90729.) unicodedata\u00b6 Unicode database updated version 14.0.0. (Contributed Benjamin Peterson bpo-45190). unittest\u00b6 Added methods enterContext() andenterClassContext() classTestCase , methodenterAsyncContext() classIsolatedAsyncioTestCase functionunittest.enterModuleContext() . (Contributed Serhiy Storchaka bpo-45046.) venv\u00b6 new Python virtual environments created, venv sysconfig installation scheme used determine paths inside environment. Python runs virtual environment, installation scheme default. means downstream distributors change default sysconfig install scheme without changing behavior virtual environments. Third party code also creates new virtual environments same. (Contributed Miro Hron\u010dok bpo-45413.) warnings\u00b6 warnings.catch_warnings() accepts arguments forwarnings.simplefilter() , providing concise way locally ignore warnings convert errors. (Contributed Zac Hatfield-Dodds bpo-47074.) zipfile\u00b6 Added support specifying member name encoding reading metadata ZipFile \u2019s directory file headers. (Contributed Stephen J. Turnbull Serhiy Storchaka bpo-28080.)Added ZipFile.mkdir() creating new directories inside ZIP archives. (Contributed Sam Ezeh gh-49083.)Added stem ,suffix andsuffixes tozipfile.Path . (Contributed Miguel Brito gh-88261.) Optimizations\u00b6 section covers specific optimizations independent Faster CPython project, covered section. compiler optimizes simple printf-style % formatting string literals containing format codes %s ,%r and%a makes fast corresponding f-string expression. (Contributed Serhiy Storchaka bpo-28307.)Integer division ( // ) better tuned optimization compilers. around 20% faster x86-64 dividing anint value smaller than2**30 . (Contributed Gregory P. Smith Tim Peters gh-90564.)sum() nearly 30% faster integers smaller than2**30 . (Contributed Stefan Behnel gh-68264.)Resizing lists streamlined common case, speeding list.append() \u224815% simple list comprehensions 20-30% (Contributed Dennis Sweeney gh-91165.)Dictionaries don\u2019t store hash values keys Unicode objects, decreasing dict size. example,sys.getsizeof(dict.fromkeys(\"abcdefg\")) reduced 352 bytes 272 bytes (23% smaller) 64-bit platforms. (Contributed Inada Naoki bpo-46845.)Using asyncio.DatagramProtocol orders magnitude faster transferring large files UDP, speeds 100 times higher \u224860 MiB file. (Contributed msoxzw gh-91487.)math functionscomb() andperm() \u224810 times faster large arguments (with larger speedup larger k). (Contributed Serhiy Storchaka bpo-37295.)The statistics functionsmean() ,variance() andstdev() consume iterators one pass rather converting alist first. twice fast save substantial memory. (Contributed Raymond Hettinger gh-90415.)unicodedata.normalize() normalizes pure-ASCII strings constant time. (Contributed Donghee Na bpo-44987.) Faster CPython\u00b6 CPython 3.11 average 25% faster CPython 3.10 measured pyperformance benchmark suite, compiled GCC Ubuntu Linux. Depending workload, overall speedup could 10-60%. project focuses two major areas Python: Faster Startup Faster Runtime. Optimizations covered project listed separately Optimizations. Faster Startup\u00b6 Frozen imports / Static code objects\u00b6 Python caches bytecode __pycache__ directory speed module loading. Previously 3.10, Python module execution looked like this: Read __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate Python 3.11, core modules essential Python startup \u201cfrozen\u201d. means Code Objects (and bytecode) statically allocated interpreter. reduces steps module execution process to: Statically allocated code object -> Evaluate Interpreter startup 10-15% faster Python 3.11. big impact short-running programs using Python. (Contributed Eric Snow, Guido van Rossum Kumar Aditya many issues.) Faster Runtime\u00b6 Cheaper, lazy Python frames\u00b6 Python frames, holding execution information, created whenever Python calls Python function. following new frame optimizations: Streamlined frame creation process. Avoided memory allocation generously re-using frame space C stack. Streamlined internal frame struct contain essential information. Frames previously held extra debugging memory management information. Old-style frame objects created requested debuggers Python introspection functions sys._getframe() inspect.currentframe() . user code, frame objects created all. result, nearly Python functions calls sped significantly. measured 3-7% speedup pyperformance. (Contributed Mark Shannon bpo-44590.) Inlined Python function calls\u00b6 Python function call, Python call evaluating C function interpret function\u2019s code. effectively limits pure Python recursion what\u2019s safe C stack. 3.11, CPython detects Python code calling another Python function, sets new frame, \u201cjumps\u201d new code inside new frame. avoids calling C interpreting function altogether. Python function calls consume C stack space, speeding up. simple recursive functions like fibonacci factorial, observed 1.7x speedup. also means recursive functions recurse significantly deeper (if user increases recursion limit sys.setrecursionlimit() ). measured 1-3% improvement pyperformance. (Contributed Pablo Galindo Mark Shannon bpo-45256.) PEP 659: Specializing Adaptive Interpreter\u00b6 PEP 659 one key parts Faster CPython project. general idea Python dynamic language, code regions objects types rarely change. concept known type stability. runtime, Python try look common patterns type stability executing code. Python replace current operation specialized one. specialized operation uses fast paths available use cases/types, generally outperform generic counterparts. also brings another concept called inline caching, Python caches results expensive operations directly bytecode. specializer also combine certain common instruction pairs one superinstruction, reducing overhead execution. Python specialize sees code \u201chot\u201d (executed multiple times). prevents Python wasting time run-once code. Python also de-specialize code dynamic use changes. Specialization attempted periodically, specialization attempts expensive, allowing specialization adapt new circumstances. (PEP written Mark Shannon, ideas inspired Stefan Brunthaler. See PEP 659 information. Implementation Mark Shannon Brandt Bucher, additional help Irit Katriel Dennis Sweeney.) Operation | Form | Specialization | Operation speedup (up to) | Contributor(s) | |---|---|---|---|---| Binary operations | | Binary add, multiply subtract common types | 10% | Mark Shannon, Donghee Na, Brandt Bucher, Dennis Sweeney | Subscript | | Subscripting container types Subscripting custom | 10-25% | Irit Katriel, Mark Shannon | Store subscript | | Similar subscripting specialization above. | 10-25% | Dennis Sweeney | Calls | | Calls common builtin (C) functions types | 20% | Mark Shannon, Ken Jin | Load global variable | | object\u2019s index globals/builtins namespace cached. Loading globals builtins require zero namespace lookups. | Mark Shannon | | Load attribute | | Similar loading global variables. attribute\u2019s index inside class/object\u2019s namespace cached. cases, attribute loading require zero namespace lookups. | Mark Shannon | | Load methods call | | actual address method cached. Method loading namespace lookups \u2013 even classes long inheritance chains. | 10-20% | Ken Jin, Mark Shannon | Store attribute | | Similar load attribute optimization. | 2% pyperformance | Mark Shannon | Unpack Sequence | | Specialized common containers | 8% | Brandt Bucher | Misc\u00b6 Objects require less memory due lazily created object namespaces. namespace dictionaries also share keys freely. (Contributed Mark Shannon bpo-45340 bpo-40116.) \u201cZero-cost\u201d exceptions implemented, eliminating cost try statements exception raised. (Contributed Mark Shannon bpo-40222.)A concise representation exceptions interpreter reduced time required catching exception 10%. (Contributed Irit Katriel bpo-45711.) \u2019s regular expression matching engine partially refactored, uses computed gotos (or \u201cthreaded code\u201d) supported platforms. result, Python 3.11 executes pyperformance regular expression benchmarks 10% faster Python 3.10. (Contributed Brandt Bucher gh-91404.) FAQ\u00b6 write code utilize speedups?\u00b6 Write Pythonic code follows common best practices; don\u2019t change code. Faster CPython project optimizes common code patterns observe. CPython 3.11 use memory?\u00b6 Maybe not; don\u2019t expect memory use exceed 20% higher 3.10. offset memory optimizations frame objects object dictionaries mentioned above. don\u2019t see speedups workload. Why?\u00b6 Certain code won\u2019t noticeable benefits. code spends time I/O operations, already computation C extension library like NumPy, won\u2019t significant speedups. project currently benefits pure-Python workloads most. Furthermore, pyperformance figures geometric mean. Even within pyperformance benchmarks, certain benchmarks slowed slightly, others sped nearly 2x! JIT compiler?\u00b6 No. We\u2019re still exploring optimizations. About\u00b6 Faster CPython explores optimizations CPython. main team funded Microsoft work full-time. Pablo Galindo Salgado also funded Bloomberg LP work project part-time. Finally, many contributors volunteers community. CPython bytecode changes\u00b6 bytecode contains inline cache entries, take form newly-added CACHE instructions. Many opcodes expect followed exact number caches, instruct interpreter skip runtime. Populated caches look like arbitrary instructions, great care taken reading modifying raw, adaptive bytecode containing quickened data. New opcodes\u00b6 ASYNC_GEN_WRAP ,RETURN_GENERATOR andSEND , used generators co-routines.COPY_FREE_VARS , avoids needing special caller-side code closures.JUMP_BACKWARD_NO_INTERRUPT , use certain loops handling interrupts undesirable.MAKE_CELL , create Cell Objects.CHECK_EG_MATCH andPREP_RERAISE_STAR , handle new exception groups except* added PEP 654.PUSH_EXC_INFO , use exception handlers.RESUME , no-op, internal tracing, debugging optimization checks. Replaced opcodes\u00b6 Replaced Opcode(s) | New Opcode(s) | Notes | |---|---|---| BINARY_* INPLACE_* | Replaced numeric binary/in-place opcodes single opcode | | CALL_FUNCTION CALL_FUNCTION_KW CALL_METHOD | Decouples argument shifting methods handling keyword arguments; allows better specialization calls | | DUP_TOP DUP_TOP_TWO ROT_TWO ROT_THREE ROT_FOUR ROT_N | Stack manipulation instructions | | JUMP_IF_NOT_EXC_MATCH | performs check doesn\u2019t jump | | JUMP_ABSOLUTE POP_JUMP_IF_FALSE POP_JUMP_IF_TRUE | See [3]; | | SETUP_WITH SETUP_ASYNC_WITH | | jump opcodes relative, including existing JUMP_IF_TRUE_OR_POP JUMP_IF_FALSE_OR_POP . argument offset current instruction rather absolute location. Changed/removed opcodes\u00b6 Changed MATCH_CLASS andMATCH_KEYS longer push additional boolean value indicate success/failure. Instead,None pushed failure place tuple extracted values.Changed opcodes work exceptions reflect represented one item stack instead three (see gh-89874). Removed COPY_DICT_WITHOUT_KEYS ,GEN_START ,POP_BLOCK ,SETUP_FINALLY andYIELD_FROM . Deprecated\u00b6 section lists Python APIs deprecated Python 3.11. Deprecated C APIs listed separately. Language/Builtins\u00b6 Chaining classmethod descriptors (introduced bpo-19072) deprecated. longer used wrap descriptors asproperty . core design feature flawed caused number downstream problems. \u201cpass-through\u201d aclassmethod , consider using the__wrapped__ attribute added Python 3.10. (Contributed Raymond Hettinger gh-89519.)Octal escapes string bytes literals values larger 0o377 (255 decimal) produce aDeprecationWarning . future Python version, raise aSyntaxWarning eventually aSyntaxError . (Contributed Serhiy Storchaka gh-81548.)The delegation int() to__trunc__() deprecated. Callingint(a) whentype(a) implements__trunc__() not__int__() or__index__() raises aDeprecationWarning . (Contributed Zackery Spytz bpo-44977.) Modules\u00b6 PEP 594 led deprecations following modules slated removal Python 3.13: aifc chunk msilib pipes telnetlib audioop crypt nis sndhdr uu cgi imghdr nntplib spwd xdrlib cgitb mailcap ossaudiodev sunau (Contributed Brett Cannon bpo-47061 Victor Stinner gh-68966.) asynchat ,asyncore andsmtpd modules deprecated since least Python 3.6. documentation deprecation warnings updated note removed Python 3.12. (Contributed Hugo van Kemenade bpo-47022.)The lib2to3 package and2to3 tool deprecated may able parse Python 3.10 newer. See PEP 617, introducing new PEG parser, details. (Contributed Victor Stinner bpo-40360.)Undocumented modules sre_compile ,sre_constants andsre_parse deprecated. (Contributed Serhiy Storchaka bpo-47152.) Standard Library\u00b6 following deprecated configparser since Python 3.2. deprecation warnings updated note removed Python 3.12:the configparser.SafeConfigParser classthe configparser.ParsingError.filename propertythe configparser.RawConfigParser.readfp() method (Contributed Hugo van Kemenade bpo-45173.) configparser.LegacyInterpolation deprecated docstring since Python 3.2, listed theconfigparser documentation. emits aDeprecationWarning removed Python 3.13. Useconfigparser.BasicInterpolation orconfigparser.ExtendedInterpolation instead. (Contributed Hugo van Kemenade bpo-46607.)The older set importlib.resources functions deprecated favor replacements added Python 3.9 removed future Python version, due supporting resources located within package subdirectories:importlib.resources.contents() importlib.resources.is_resource() importlib.resources.open_binary() importlib.resources.open_text() importlib.resources.read_binary() importlib.resources.read_text() importlib.resources.path() locale.getdefaultlocale() function deprecated removed Python 3.15. Uselocale.setlocale() ,locale.getpreferredencoding(False) andlocale.getlocale() functions instead. (Contributed Victor Stinner gh-90817.)The locale.resetlocale() function deprecated removed Python 3.13. Uselocale.setlocale(locale.LC_ALL, \"\") instead. (Contributed Victor Stinner gh-90817.)Stricter rules applied numerical group references group names regular expressions. sequences ASCII digits accepted numerical reference, group name bytes patterns replacement strings contain ASCII letters, digits underscores. now, deprecation warning raised syntax violating rules. (Contributed Serhiy Storchaka gh-91760.)In module, there.template() function correspondingre.TEMPLATE andre.T flags deprecated, undocumented lacked obvious purpose. removed Python 3.13. (Contributed Serhiy Storchaka Miro Hron\u010dok gh-92728.)turtle.settiltangle() deprecated since Python 3.1; emits deprecation warning removed Python 3.13. Useturtle.tiltangle() instead (it earlier incorrectly marked deprecated, docstring corrected). (Contributed Hugo van Kemenade bpo-45837.)typing.Text , exists solely provide compatibility support Python 2 Python 3 code, deprecated. removal currently unplanned, users encouraged usestr instead wherever possible. (Contributed Alex Waygood gh-92332.)The keyword argument syntax constructing typing.TypedDict types deprecated. Support removed Python 3.13. (Contributed Jingchen Ye gh-90224.)webbrowser.MacOSX deprecated removed Python 3.13. untested, undocumented, used bywebbrowser itself. (Contributed Donghee Na bpo-42255.)The behavior returning value TestCase andIsolatedAsyncioTestCase test methods (other defaultNone value) deprecated.Deprecated following not-formally-documented unittest functions, scheduled removal Python 3.13:unittest.findTestCases() unittest.makeSuite() unittest.getTestCaseNames() Use TestLoader methods instead:(Contributed Erlend E. Aasland bpo-5846.) unittest.TestProgram.usageExit() marked deprecated, removed 3.13. (Contributed Carlos Dam\u00e1zio gh-67048.) Pending Removal Python 3.12\u00b6 following Python APIs deprecated earlier Python releases, removed Python 3.12. C APIs pending removal listed separately. asynchat moduleThe asyncore moduleThe imp moduleThe typing.io namespaceThe typing.re namespacecgi.log() importlib.find_loader() importlib.abc.Loader.module_repr() importlib.abc.MetaPathFinder.find_module() importlib.abc.PathEntryFinder.find_loader() importlib.abc.PathEntryFinder.find_module() importlib.machinery.BuiltinImporter.find_module() importlib.machinery.BuiltinLoader.module_repr() importlib.machinery.FileFinder.find_loader() importlib.machinery.FileFinder.find_module() importlib.machinery.FrozenImporter.find_module() importlib.machinery.FrozenLoader.module_repr() importlib.machinery.PathFinder.find_module() importlib.machinery.WindowsRegistryFinder.find_module() importlib.util.module_for_loader() importlib.util.set_loader_wrapper() importlib.util.set_package_wrapper() pkgutil.ImpImporter pkgutil.ImpLoader pathlib.Path.link_to() sqlite3.enable_shared_cache() sqlite3.OptimizedUnicode() PYTHONTHREADDEBUG environment variableThe following deprecated aliases unittest :Deprecated alias Method Name Deprecated failUnless 3.1 failIf 3.1 failUnlessEqual 3.1 failIfEqual 3.1 failUnlessAlmostEqual 3.1 failIfAlmostEqual 3.1 failUnlessRaises 3.1 assert_ 3.2 assertEquals 3.2 assertNotEquals 3.2 assertAlmostEquals 3.2 assertNotAlmostEquals 3.2 assertRegexpMatches 3.2 assertRaisesRegexp 3.2 assertNotRegexpMatches 3.5 Removed\u00b6 section lists Python APIs removed Python 3.11. Removed C APIs listed separately. Removed @asyncio.coroutine() decorator enabling legacy generator-based coroutines compatible withasync /await code. function deprecated since Python 3.8 removal initially scheduled Python 3.10. Useasync def instead. (Contributed Illia Volochii bpo-43216.)Removed asyncio.coroutines.CoroWrapper used wrapping legacy generator-based coroutine objects debug mode. (Contributed Illia Volochii bpo-43216.)Due significant security concerns, reuse_address parameter asyncio.loop.create_datagram_endpoint() , disabled Python 3.9, entirely removed. behavior socket optionSO_REUSEADDR UDP. (Contributed Hugo van Kemenade bpo-45129.)Removed binhex module, deprecated Python 3.9. Also removed related, similarly-deprecatedbinascii functions:binascii.a2b_hqx() binascii.b2a_hqx() binascii.rlecode_hqx() binascii.rldecode_hqx() binascii.crc_hqx() function remains available.(Contributed Victor Stinner bpo-45085.) Removed distutils bdist_msi command deprecated Python 3.9. Usebdist_wheel (wheel packages) instead. (Contributed Hugo van Kemenade bpo-45124.)Removed __getitem__() methods ofxml.dom.pulldom.DOMEventStream ,wsgiref.util.FileWrapper andfileinput.FileInput , deprecated since Python 3.9. (Contributed Hugo van Kemenade bpo-45132.)Removed deprecated gettext functionslgettext() ,ldgettext() ,lngettext() andldngettext() . Also removed thebind_textdomain_codeset() function, theNullTranslations.output_charset() andNullTranslations.set_output_charset() methods, codeset parameter oftranslation() andinstall() , since used thel*gettext() functions. (Contributed Donghee Na Serhiy Storchaka bpo-44235.)Removed inspect module:The getargspec() function, deprecated since Python 3.0; useinspect.signature() orinspect.getfullargspec() instead.The formatargspec() function, deprecated since Python 3.5; use theinspect.signature() function theinspect.Signature object directly.The undocumented Signature.from_builtin() andSignature.from_function() methods, deprecated since Python 3.5; use theSignature.from_callable() method instead. (Contributed Hugo van Kemenade bpo-45320.) Removed __class_getitem__() method frompathlib.PurePath , used added mistake previous versions. (Contributed Nikita Sobolev bpo-46483.)Removed MailmanProxy class thesmtpd module, unusable without externalmailman package. (Contributed Donghee Na bpo-35800.)Removed deprecated split() method of_tkinter.TkappType . (Contributed Erlend E. Aasland bpo-38371.)Removed namespace package support unittest discovery. introduced Python 3.4 broken since Python 3.7. (Contributed Inada Naoki bpo-23882.)Removed undocumented private float.__set_format__() method, previously known asfloat.__setformat__() Python 3.7. docstring said: \u201cYou probably don\u2019t want use function. exists mainly used Python\u2019s test suite.\u201d (Contributed Victor Stinner bpo-46852.)The --experimental-isolated-subinterpreters configure flag (and correspondingEXPERIMENTAL_ISOLATED_SUBINTERPRETERS macro) removed.Pynche \u2014 Pythonically Natural Color Hue Editor \u2014 moved Tools/scripts developed independently Python source tree. Porting Python 3.11\u00b6 section lists previously described changes bugfixes Python API may require changes Python code. Porting notes C API listed separately. open() ,io.open() ,codecs.open() andfileinput.FileInput longer accept'U' (\u201cuniversal newline\u201d) file mode. Python 3, \u201cuniversal newline\u201d mode used default whenever file opened text mode, the'U' flag deprecated since Python 3.3. newline parameter functions controls universal newlines work. (Contributed Victor Stinner bpo-37330.)ast.AST node positions validated provided tocompile() related functions. invalid positions detected, aValueError raised. (Contributed Pablo Galindo gh-93351)Prohibited passing non- concurrent.futures.ThreadPoolExecutor executors toasyncio.loop.set_default_executor() following deprecation Python 3.8. (Contributed Illia Volochii bpo-43234.)calendar : Thecalendar.LocaleTextCalendar andcalendar.LocaleHTMLCalendar classes uselocale.getlocale() , instead usinglocale.getdefaultlocale() , locale specified. (Contributed Victor Stinner bpo-46659.)The pdb module reads the.pdbrc configuration file the'UTF-8' encoding. (Contributed Srinivas Reddy Thatiparthy (\u0c36\u0c4d\u0c30\u0c40\u0c28\u0c3f\u0c35\u0c3e\u0c38\u0c4d \u0c30\u0c46\u0c21\u0c4d\u0c21\u0c3f \u0c24\u0c3e\u0c1f\u0c3f\u0c2a\u0c30\u0c4d\u0c24\u0c3f) bpo-41137.)The population parameter random.sample() must sequence, automatic conversion ofset tolist longer supported. Also, sample size larger population size, aValueError raised. (Contributed Raymond Hettinger bpo-40465.)The random optional parameter random.shuffle() removed. previously arbitrary random function use shuffle; now,random.random() (its previous default) always used.In Regular Expression Syntax, global inline flags (e.g.(?i) ) used start regular expressions. Using elsewhere deprecated since Python 3.6. (Contributed Serhiy Storchaka bpo-47066.)In module, several long-standing bugs fixed that, rare cases, could cause capture groups get wrong result. Therefore, could change captured output cases. (Contributed Lin bpo-35859.) Build Changes\u00b6 CPython PEP 11 Tier 3 support cross compiling WebAssembly platforms Emscripten ( wasm32-unknown-emscripten , i.e. Python browser) WebAssembly System Interface (WASI) (wasm32-unknown-wasi ). effort inspired previous work like Pyodide. platforms provide limited subset POSIX APIs; Python standard libraries features modules related networking, processes, threading, signals, mmap, users/groups available don\u2019t work. (Emscripten contributed Christian Heimes Ethan Smith gh-84461 WASI contributed Christian Heimes gh-90473; platforms promoted gh-95085)Building CPython requires: Py_NO_NAN macro removed. Since CPython requires IEEE 754 floats, NaN values always available. (Contributed Victor Stinner bpo-46656.)The tkinter package requires Tcl/Tk version 8.5.12 newer. (Contributed Serhiy Storchaka bpo-46996.)Build dependencies, compiler flags, linker flags stdlib extension modules detected configure. libffi, libnsl, libsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, uuid flags detected pkg-config (when available). tkinter requires pkg-config command detect development settings Tcl/Tk headers libraries. (Contributed Christian Heimes Erlend Egeberg Aasland bpo-45847, bpo-45747, bpo-45763.)libpython longer linked libcrypt. (Contributed Mike Gilbert bpo-45433.) CPython built ThinLTO option via passing thin to--with-lto , i.e.--with-lto=thin . (Contributed Donghee Na Brett Holman bpo-44340.)Freelists object structs disabled. new configure option --without-freelists used disable freelists except empty tuple singleton. (Contributed Christian Heimes bpo-45522.)Modules/Setup andModules/makesetup improved tied up. Extension modules built throughmakesetup . except test modules linked statically main binary library. (Contributed Brett Cannon Christian Heimes bpo-45548, bpo-45570, bpo-45571, bpo-43974.)Note Use environment variables TCLTK_CFLAGS andTCLTK_LIBS manually specify location Tcl/Tk headers libraries. configure options--with-tcltk-includes and--with-tcltk-libs removed.On RHEL 7 CentOS 7 development packages provide tcl.pc andtk.pc ; useTCLTK_LIBS=\"-ltk8.5 -ltkstub8.5 -ltcl8.5\" . directoryMisc/rhel7 contains.pc files instructions build Python RHEL 7\u2019s CentOS 7\u2019s Tcl/Tk OpenSSL.CPython use 30-bit digits default Python int implementation. Previously, default use 30-bit digits platforms withSIZEOF_VOID_P >= 8 , 15-bit digits otherwise. It\u2019s still possible explicitly request use 15-bit digits via either the--enable-big-digits option configure script (for Windows) thePYLONG_BITS_IN_DIGIT variable inPC/pyconfig.h , option may removed point future. (Contributed Mark Dickinson bpo-45569.) C API Changes\u00b6 New Features\u00b6 Add new PyType_GetName() function get type\u2019s short name. (Contributed Hai Shi bpo-42035.)Add new PyType_GetQualName() function get type\u2019s qualified name. (Contributed Hai Shi bpo-42035.)Add new PyThreadState_EnterTracing() andPyThreadState_LeaveTracing() functions limited C API suspend resume tracing profiling. (Contributed Victor Stinner bpo-43760.)Added Py_Version constant bears value asPY_VERSION_HEX . (Contributed Gabriele N. Tornetta bpo-43931.)Py_buffer APIs part limited API stable ABI:bf_getbuffer andbf_releasebuffer type slots (Contributed Christian Heimes bpo-45459.) Added PyType_GetModuleByDef() function, used get module method defined, cases information available directly (viaPyCMethod ). (Contributed Petr Viktorin bpo-46613.)Add new functions pack unpack C double (serialize deserialize): PyFloat_Pack2() ,PyFloat_Pack4() ,PyFloat_Pack8() ,PyFloat_Unpack2() ,PyFloat_Unpack4() andPyFloat_Unpack8() . (Contributed Victor Stinner bpo-46906.)Add new functions get frame object attributes: PyFrame_GetBuiltins() ,PyFrame_GetGenerator() ,PyFrame_GetGlobals() ,PyFrame_GetLasti() .Added two new functions get set active exception instance: PyErr_GetHandledException() andPyErr_SetHandledException() . alternatives toPyErr_SetExcInfo() andPyErr_GetExcInfo() work legacy 3-tuple representation exceptions. (Contributed Irit Katriel bpo-46343.)Added PyConfig.safe_path member. (Contributed Victor Stinner gh-57684.) Porting Python 3.11\u00b6 macros converted static inline functions avoid macro pitfalls. change mostly transparent users, replacement functions cast arguments expected types avoid compiler warnings due static type checks. However, limited C API set >=3.11, casts done, callers need cast arguments expected types. See PEP 670 details. (Contributed Victor Stinner Erlend E. Aasland gh-89653.) PyErr_SetExcInfo() longer uses thetype andtraceback arguments, interpreter derives values exception instance (thevalue argument). function still steals references three arguments. (Contributed Irit Katriel bpo-45711.)PyErr_GetExcInfo() derives thetype andtraceback fields result exception instance (thevalue field). (Contributed Irit Katriel bpo-45711.)_frozen newis_package field indicate whether frozen module package. Previously, negative value thesize field indicator. non-negative values used forsize . (Contributed Kumar Aditya bpo-46608.)_PyFrameEvalFunction() takes_PyInterpreterFrame* second parameter, instead ofPyFrameObject* . See PEP 523 details use function pointer type.PyCode_New() andPyCode_NewWithPosOnlyArgs() take additionalexception_table argument. Using functions avoided, possible. get custom code object: create code object using compiler, get modified version thereplace method.PyCodeObject longer theco_code ,co_varnames ,co_cellvars andco_freevars fields. Instead, usePyCode_GetCode() ,PyCode_GetVarnames() ,PyCode_GetCellvars() andPyCode_GetFreevars() respectively access via C API. (Contributed Brandt Bucher bpo-46841 Ken Jin gh-92154 gh-94936.)The old trashcan macros ( Py_TRASHCAN_SAFE_BEGIN /Py_TRASHCAN_SAFE_END ) deprecated. replaced new macrosPy_TRASHCAN_BEGIN andPy_TRASHCAN_END .A tp_dealloc function old macros, as: static void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END } migrate new macros follows: static void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END } Note Py_TRASHCAN_BEGIN second argument deallocation function in.To support older Python versions codebase, define following macros use throughout code (credit: copied mypy codebase):#if PY_VERSION_HEX >= 0x03080000 # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_END #else # define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op) # define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op) #endif PyType_Ready() function raises error type defined thePy_TPFLAGS_HAVE_GC flag set traverse function (PyTypeObject.tp_traverse ). (Contributed Victor Stinner bpo-44263.)Heap types Py_TPFLAGS_IMMUTABLETYPE flag inherit PEP 590 vectorcall protocol. Previously, possible static types. (Contributed Erlend E. Aasland bpo-43908)Since Py_TYPE() changed inline static function,Py_TYPE(obj) = new_type must replaced withPy_SET_TYPE(obj, new_type) : see thePy_SET_TYPE() function (available since Python 3.9). backward compatibility, macro used:#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE) static inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type) { ob->ob_type = type; } #define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type) #endif (Contributed Victor Stinner bpo-39573.) Since Py_SIZE() changed inline static function,Py_SIZE(obj) = new_size must replaced withPy_SET_SIZE(obj, new_size) : see thePy_SET_SIZE() function (available since Python 3.9). backward compatibility, macro used:#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE) static inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size) { ob->ob_size = size; } #define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size) #endif (Contributed Victor Stinner bpo-39573.) <Python.h> longer includes header files<stdlib.h> ,<stdio.h> ,<errno.h> and<string.h> thePy_LIMITED_API macro set to0x030b0000 (Python 3.11) higher. C extensions explicitly include header files after#include <Python.h> . (Contributed Victor Stinner bpo-45434.)The non-limited API files cellobject.h ,classobject.h ,code.h ,context.h ,funcobject.h ,genobject.h andlongintrepr.h moved theInclude/cpython directory. Moreover, theeval.h header file removed. files must included directly, already included inPython.h : Include Files. included directly, consider includingPython.h instead. (Contributed Victor Stinner bpo-35134.)The PyUnicode_CHECK_INTERNED() macro excluded limited C API. never usable there, used internal structures available limited C API. (Contributed Victor Stinner bpo-46007.)The following frame functions type directly available #include <Python.h> , it\u2019s longer needed add#include <frameobject.h> :(Contributed Victor Stinner gh-93937.) PyFrameObject structure members removed public C API.While documentation notes PyFrameObject fields subject change time, stable long time used several popular extensions.In Python 3.11, frame struct reorganized allow performance optimizations. fields removed entirely, details old implementation. PyFrameObject fields:f_back : usePyFrame_GetBack() .f_blockstack : removed.f_builtins : usePyFrame_GetBuiltins() .f_code : usePyFrame_GetCode() .f_gen : usePyFrame_GetGenerator() .f_globals : usePyFrame_GetGlobals() .f_iblock : removed.f_lasti : usePyFrame_GetLasti() . Code usingf_lasti withPyCode_Addr2Line() usePyFrame_GetLineNumber() instead; may faster.f_lineno : usePyFrame_GetLineNumber() f_locals : usePyFrame_GetLocals() .f_stackdepth : removed.f_state : public API (renamed tof_frame.f_state ).f_trace : public API.f_trace_lines : usePyObject_GetAttrString((PyObject*)frame, \"f_trace_lines\") .f_trace_opcodes : usePyObject_GetAttrString((PyObject*)frame, \"f_trace_opcodes\") .f_localsplus : public API (renamed tof_frame.localsplus ).f_valuestack : removed. Python frame object created lazily. side effect f_back member must accessed directly, since value also computed lazily. ThePyFrame_GetBack() function must called instead.Debuggers accessed f_locals directly must callPyFrame_GetLocals() instead. longer need callPyFrame_FastToLocalsWithError() orPyFrame_LocalsToFast() , fact call functions. necessary updating frame managed virtual machine.Code defining PyFrame_GetCode() Python 3.8 older:#if PY_VERSION_HEX < 0x030900B1 static inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame) { Py_INCREF(frame->f_code); return frame->f_code; } #endif Code defining PyFrame_GetBack() Python 3.8 older:#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame) { Py_XINCREF(frame->f_back); return frame->f_back; } #endif use pythoncapi_compat project get two functions older Python versions. Changes PyThreadState structure members:frame : removed, usePyThreadState_GetFrame() (function added Python 3.9 bpo-40429). Warning: function returns strong reference, need callPy_XDECREF() .tracing : changed, usePyThreadState_EnterTracing() andPyThreadState_LeaveTracing() (functions added Python 3.11 bpo-43760).recursion_depth : removed, use(tstate->recursion_limit - tstate->recursion_remaining) instead.stackcheck_counter : removed. Code defining PyThreadState_GetFrame() Python 3.8 older:#if PY_VERSION_HEX < 0x030900B1 static inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate) { Py_XINCREF(tstate->frame); return tstate->frame; } #endif Code defining PyThreadState_EnterTracing() andPyThreadState_LeaveTracing() Python 3.10 older:#if PY_VERSION_HEX < 0x030B00A2 static inline void PyThreadState_EnterTracing(PyThreadState *tstate) { tstate->tracing++; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = 0; #else tstate->use_tracing = 0; #endif } static inline void PyThreadState_LeaveTracing(PyThreadState *tstate) { int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL); tstate->tracing--; #if PY_VERSION_HEX >= 0x030A00A1 tstate->cframe->use_tracing = use_tracing; #else tstate->use_tracing = use_tracing; #endif } #endif use pythoncapi-compat project get functions old Python functions. Distributors encouraged build Python optimized Blake2 library libb2. PyConfig.module_search_paths_set field must set 1 initialization usePyConfig.module_search_paths initializesys.path . Otherwise, initialization recalculate path replace values added tomodule_search_paths .PyConfig_Read() longer calculates initial search path, fill values intoPyConfig.module_search_paths . calculate default paths modify them, finish initialization usePySys_GetObject() retrievesys.path Python list object modify directly. Deprecated\u00b6 Deprecate following functions configure Python initialization: PySys_AddWarnOptionUnicode() PySys_AddWarnOption() PySys_AddXOption() PySys_HasWarnOptions() PySys_SetArgvEx() PySys_SetArgv() PySys_SetPath() Py_SetPath() Py_SetProgramName() Py_SetPythonHome() Py_SetStandardStreamEncoding() _Py_SetProgramFullPath() Use new PyConfig API Python Initialization Configuration instead (PEP 587). (Contributed Victor Stinner gh-88279.)Deprecate ob_shash member thePyBytesObject . UsePyObject_Hash() instead. (Contributed Inada Naoki bpo-46864.) Pending Removal Python 3.12\u00b6 following C APIs deprecated earlier Python releases, removed Python 3.12. PyUnicode_AS_DATA() PyUnicode_AS_UNICODE() PyUnicode_AsUnicodeAndSize() PyUnicode_AsUnicode() PyUnicode_FromUnicode() PyUnicode_GET_DATA_SIZE() PyUnicode_GET_SIZE() PyUnicode_GetSize() PyUnicode_IS_COMPACT() PyUnicode_IS_READY() PyUnicode_WSTR_LENGTH() _PyUnicode_AsUnicode() PyUnicode_WCHAR_KIND PyUnicode_InternImmortal() Removed\u00b6 PyFrame_BlockSetup() andPyFrame_BlockPop() removed. (Contributed Mark Shannon bpo-40222.)Remove following math macros using errno variable:Py_ADJUST_ERANGE1() Py_ADJUST_ERANGE2() Py_OVERFLOWED() Py_SET_ERANGE_IF_OVERFLOW() Py_SET_ERRNO_ON_MATH_ERROR() (Contributed Victor Stinner bpo-45412.) Remove Py_UNICODE_COPY() andPy_UNICODE_FILL() macros, deprecated since Python 3.3. UsePyUnicode_CopyCharacters() ormemcpy() (wchar_t* string), andPyUnicode_Fill() functions instead. (Contributed Victor Stinner bpo-41123.)Remove pystrhex.h header file. contains private functions. C extensions include main<Python.h> header file. (Contributed Victor Stinner bpo-45434.)Remove Py_FORCE_DOUBLE() macro. used thePy_IS_INFINITY() macro. (Contributed Victor Stinner bpo-45440.)The following items longer available Py_LIMITED_API defined:the Py_MARSHAL_VERSION macro part limited API. (Contributed Victor Stinner bpo-45474.) Exclude PyWeakref_GET_OBJECT() limited C API. never worked since thePyWeakReference structure opaque limited C API. (Contributed Victor Stinner bpo-35134.)Remove PyHeapType_GET_MEMBERS() macro. exposed public C API mistake, must used Python internally. Use thePyTypeObject.tp_members member instead. (Contributed Victor Stinner bpo-40170.)Remove HAVE_PY_SET_53BIT_PRECISION macro (moved internal C API). (Contributed Victor Stinner bpo-45412.) Remove Py_UNICODE encoder APIs, deprecated since Python 3.3, little used inefficient relative recommended alternatives.The removed functions are: PyUnicode_Encode() PyUnicode_EncodeASCII() PyUnicode_EncodeLatin1() PyUnicode_EncodeUTF7() PyUnicode_EncodeUTF8() PyUnicode_EncodeUTF16() PyUnicode_EncodeUTF32() PyUnicode_EncodeUnicodeEscape() PyUnicode_EncodeRawUnicodeEscape() PyUnicode_EncodeCharmap() PyUnicode_TranslateCharmap() PyUnicode_EncodeDecimal() PyUnicode_TransformDecimalToASCII() See PEP 624 details migration guidance. (Contributed Inada Naoki bpo-44029.) Notable changes 3.11.4\u00b6 tarfile\u00b6 extraction methods tarfile , andshutil.unpack_archive() , new filter argument allows limiting tar features may surprising dangerous, creating files outside destination directory. See Extraction filters details. Python 3.12, use without filter argument show aDeprecationWarning . Python 3.14, default switch to'data' . (Contributed Petr Viktorin PEP 706.) Notable changes 3.11.5\u00b6 OpenSSL\u00b6 Windows builds macOS installers python.org use OpenSSL 3.0."},
{"source": "https://docs.python.org/3/whatsnew/3.12.html", "title": "What\u2019s New In Python 3.12", "text": "What\u2019s New Python 3.12\u00b6 - Editor: Adam Turner article explains new features Python 3.12, compared 3.11. Python 3.12 released October 2, 2023. full details, see changelog. See also PEP 693 \u2013 Python 3.12 Release Schedule Summary \u2013 Release highlights\u00b6 Python 3.12 stable release Python programming language, mix changes language standard library. library changes focus cleaning deprecated APIs, usability, correctness. note, distutils package removed standard library. Filesystem support os pathlib seen number improvements, several modules better performance. language changes focus usability, f-strings many limitations removed \u2018Did mean \u2026\u2019 suggestions continue improve. new type parameter syntax type statement improve ergonomics using generic types type aliases static type checkers. article doesn\u2019t attempt provide complete specification new features, instead gives convenient overview. full details, refer documentation, Library Reference Language Reference. want understand complete implementation design rationale change, refer PEP particular new feature; note PEPs usually kept up-to-date feature fully implemented. New syntax features: New grammar features: Interpreter improvements: PEP 669, low impact monitoring Improved \u2018Did mean \u2026\u2019 suggestions NameError ,ImportError , andSyntaxError exceptions Python data model improvements: PEP 688, using buffer protocol Python Significant improvements standard library: pathlib.Path class supports subclassingThe os module received several improvements Windows supportA command-line interface added sqlite3 moduleisinstance() checks againstruntime-checkable protocols enjoy speed two 20 timesThe asyncio package number performance improvements, benchmarks showing 75% speed up.A command-line interface added uuid moduleDue changes PEP 701, producing tokens via tokenize module 64% faster. Security improvements: Replace builtin hashlib implementations SHA1, SHA3, SHA2-384, SHA2-512, MD5 formally verified code HACL* project. builtin implementations remain fallbacks used OpenSSL provide them. C API improvements: CPython implementation improvements: PEP 709, comprehension inlining CPython support Linux perf profilerImplement stack overflow protection supported platforms New typing features: PEP 698, typing.override() decorator Important deprecations, removals restrictions: PEP 623: Remove wstr Unicode objects Python\u2019s C API, reducing size everystr object least 8 bytes.PEP 632: Remove distutils package. See migration guide advice replacing APIs provided. third-party Setuptools package continues providedistutils , still require Python 3.12 beyond.gh-95299: pre-install setuptools virtual environments created withvenv . means thatdistutils ,setuptools ,pkg_resources , andeasy_install longer available default; access runpip install setuptools activated virtual environment.The asynchat ,asyncore , andimp modules removed, along severalunittest.TestCase method aliases. New Features\u00b6 PEP 695: Type Parameter Syntax\u00b6 Generic classes functions PEP 484 declared using verbose syntax left scope type parameters unclear required explicit declarations variance. PEP 695 introduces new, compact explicit way create generic classes functions: def max[T](args: Iterable[T]) -> T: ... class list[T]: def __getitem__(self, index: int, /) -> T: ... def append(self, element: T) -> None: ... addition, PEP introduces new way declare type aliases using type statement, creates instance TypeAliasType : type Point = tuple[float, float] Type aliases also generic: type Point[T] = tuple[T, T] new syntax allows declaring TypeVarTuple ParamSpec parameters, well TypeVar parameters bounds constraints: type IntFunc[**P] = Callable[P, int] # ParamSpec type LabeledTuple[*Ts] = tuple[str, *Ts] # TypeVarTuple type HashableSequence[T: Hashable] = Sequence[T] # TypeVar bound type IntOrStrSequence[T: (int, str)] = Sequence[T] # TypeVar constraints value type aliases bound constraints type variables created syntax evaluated demand (see lazy evaluation). means type aliases able refer types defined later file. Type parameters declared type parameter list visible within scope declaration nested scopes, outer scope. example, used type annotations methods generic class class body. However, cannot used module scope class defined. See Type parameter lists detailed description runtime semantics type parameters. order support scoping semantics, new kind scope introduced, annotation scope. Annotation scopes behave part like function scopes, interact differently enclosing class scopes. Python 3.13, annotations also evaluated annotation scopes. See PEP 695 details. (PEP written Eric Traut. Implementation Jelle Zijlstra, Eric Traut, others gh-103764.) PEP 701: Syntactic formalization f-strings\u00b6 PEP 701 lifts restrictions usage f-strings. Expression components inside f-strings valid Python expression, including strings reusing quote containing f-string, multi-line expressions, comments, backslashes, unicode escape sequences. Let\u2019s cover detail: Quote reuse: Python 3.11, reusing quotes enclosing f-string raises SyntaxError , forcing user either use available quotes (like using double quotes triple quotes f-string uses single quotes). Python 3.12, things like this:>>> songs = ['Take back Eden', 'Alkaline', 'Ascensionism'] >>> f\"This playlist: {\", \".join(songs)}\" 'This playlist: Take back Eden, Alkaline, Ascensionism' Note change explicit limit f-strings nested, fact string quotes cannot reused inside expression component f-strings made impossible nest f-strings arbitrarily. fact, nested f-string could written: >>> f\"\"\"{f'''{f'{f\"{1+1}\"}'}'''}\"\"\" '2' f-strings contain valid Python expression inside expression components, possible nest f-strings arbitrarily: >>> f\"{f\"{f\"{f\"{f\"{f\"{1+1}\"}\"}\"}\"}\"}\" '2' Multi-line expressions comments: Python 3.11, f-string expressions must defined single line, even expression within f-string could normally span multiple lines (like literal lists defined multiple lines), making harder read. Python 3.12 define f-strings spanning multiple lines, add inline comments: >>> f\"This playlist: {\", \".join([ ... 'Take back Eden', # My, my, eyes like fire ... 'Alkaline', # acid alkaline ... 'Ascensionism' # Take broken skies last ... ])}\" 'This playlist: Take back Eden, Alkaline, Ascensionism' Backslashes unicode characters: Python 3.12 f-string expressions couldn\u2019t contain \\ character. also affected unicode escape sequences (such as\\N{snowman} ) contain the\\N part previously could part expression components f-strings. Now, define expressions like this:>>> print(f\"This playlist: {\"\\n\".join(songs)}\") playlist: Take back Eden Alkaline Ascensionism >>> print(f\"This playlist: {\"\\N{BLACK HEART SUIT}\".join(songs)}\") playlist: Take back Eden\u2665Alkaline\u2665Ascensionism See PEP 701 details. positive side-effect feature implemented (by parsing f-strings PEG parser), error messages f-strings precise include exact location error. example, Python 3.11, following f-string raises SyntaxError : >>> my_string = f\"{x z y}\" + f\"{1 + 1}\" File \"<stdin>\", line 1 (x z y) ^^^ SyntaxError: f-string: invalid syntax. Perhaps forgot comma? error message doesn\u2019t include exact location error within line also expression artificially surrounded parentheses. Python 3.12, f-strings parsed PEG parser, error messages precise show entire line: >>> my_string = f\"{x z y}\" + f\"{1 + 1}\" File \"<stdin>\", line 1 my_string = f\"{x z y}\" + f\"{1 + 1}\" ^^^ SyntaxError: invalid syntax. Perhaps forgot comma? (Contributed Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou, Cristi\u00e1n Maureira-Fredes Marta G\u00f3mez gh-102856. PEP written Pablo Galindo, Batuhan Taskaya, Lysandros Nikolaou Marta G\u00f3mez). PEP 684: Per-Interpreter GIL\u00b6 PEP 684 introduces per-interpreter GIL, sub-interpreters may created unique GIL per interpreter. allows Python programs take full advantage multiple CPU cores. currently available C-API, though Python API anticipated 3.13. Use new Py_NewInterpreterFromConfig() function create interpreter GIL: PyInterpreterConfig config = { .check_multi_interp_extensions = 1, .gil = PyInterpreterConfig_OWN_GIL, }; PyThreadState *tstate = NULL; PyStatus status = Py_NewInterpreterFromConfig(&tstate, &config); (PyStatus_Exception(status)) { return -1; } /* new interpreter active current thread. */ examples use C-API sub-interpreters per-interpreter GIL, see Modules/_xxsubinterpretersmodule.c . (Contributed Eric Snow gh-104210, etc.) PEP 669: Low impact monitoring CPython\u00b6 PEP 669 defines new API profilers, debuggers, tools monitor events CPython. covers wide range events, including calls, returns, lines, exceptions, jumps, more. means pay use, providing support near-zero overhead debuggers coverage tools. See sys.monitoring details. (Contributed Mark Shannon gh-103082.) PEP 688: Making buffer protocol accessible Python\u00b6 PEP 688 introduces way use buffer protocol Python code. Classes implement __buffer__() method usable buffer types. new collections.abc.Buffer ABC provides standard way represent buffer objects, example type annotations. new inspect.BufferFlags enum represents flags used customize buffer creation. (Contributed Jelle Zijlstra gh-102500.) PEP 709: Comprehension inlining\u00b6 Dictionary, list, set comprehensions inlined, rather creating new single-use function object execution comprehension. speeds execution comprehension two times. See PEP 709 details. Comprehension iteration variables remain isolated don\u2019t overwrite variable name outer scope, visible comprehension. Inlining result visible behavior changes: longer separate frame comprehension tracebacks, tracing/profiling longer shows comprehension function call. symtable module longer produce child symbol tables comprehension; instead, comprehension\u2019s locals included parent function\u2019s symbol table.Calling locals() inside comprehension includes variables outside comprehension, longer includes synthetic.0 variable comprehension \u201cargument\u201d.A comprehension iterating directly locals() (e.g.[k k locals()] ) may see \u201cRuntimeError: dictionary changed size iteration\u201d run tracing (e.g. code coverage measurement). behavior already seen e.g.for k locals(): . avoid error, first create list keys iterate over:keys = list(locals()); [k k keys] . (Contributed Carl Meyer Vladimir Matveev PEP 709.) Improved Error Messages\u00b6 Modules standard library potentially suggested part error messages displayed interpreter NameError raised top level. (Contributed Pablo Galindo gh-98254.)>>> sys.version_info Traceback (most recent call last): File \"<stdin>\", line 1, <module> NameError: name 'sys' defined. forget import 'sys'? Improve error suggestion NameError exceptions instances. aNameError raised method instance attribute that\u2019s exactly equal name exception, suggestion includeself.<NAME> instead closest match method scope. (Contributed Pablo Galindo gh-99139.)>>> class A: ... def __init__(self): ... self.blech = 1 ... ... def foo(self): ... somethin = blech ... >>> A().foo() Traceback (most recent call last): File \"<stdin>\", line 1 somethin = blech ^^^^^ NameError: name 'blech' defined. mean: 'self.blech'? Improve SyntaxError error message user typesimport x instead offrom import x . (Contributed Pablo Galindo gh-98931.)>>> import a.y.z b.y.z Traceback (most recent call last): File \"<stdin>\", line 1 import a.y.z b.y.z ^^^^^^^^^^^^^^^^^^^^^^^ SyntaxError: mean use 'from ... import ...' instead? ImportError exceptions raised failedfrom <module> import <name> statements include suggestions value of<name> based available names in<module> . (Contributed Pablo Galindo gh-91058.)>>> collections import chainmap Traceback (most recent call last): File \"<stdin>\", line 1, <module> ImportError: cannot import name 'chainmap' 'collections'. mean: 'ChainMap'? Language Changes\u00b6 parser raises SyntaxError parsing source code containing null bytes. (Contributed Pablo Galindo gh-96670.)A backslash-character pair valid escape sequence generates SyntaxWarning , instead ofDeprecationWarning . example,re.compile(\"\\d+\\.\\d+\") emits aSyntaxWarning (\"\\d\" invalid escape sequence, use raw strings regular expression:re.compile(r\"\\d+\\.\\d+\") ). future Python version,SyntaxError eventually raised, instead ofSyntaxWarning . (Contributed Victor Stinner gh-98401.)Octal escapes value larger 0o377 (ex:\"\\477\" ), deprecated Python 3.11, produce aSyntaxWarning , instead ofDeprecationWarning . future Python version eventually aSyntaxError . (Contributed Victor Stinner gh-98401.)Variables used target part comprehensions stored used assignment expressions ( := ). example, in[(b := 1) a, b.prop some_iter] , assignment tob allowed. Note assigning variables stored target part comprehensions (likea ) still disallowed, per PEP 572. (Contributed Nikita Sobolev gh-100581.)Exceptions raised class type\u2019s __set_name__ method longer wrapped aRuntimeError . Context information added exception PEP 678 note. (Contributed Irit Katriel gh-77757.)When try-except* construct handles entireExceptionGroup raises one exception, exception longer wrapped anExceptionGroup . Also changed version 3.11.4. (Contributed Irit Katriel gh-103590.)The Garbage Collector runs eval breaker mechanism Python bytecode evaluation loop instead object allocations. GC also run PyErr_CheckSignals() called C extensions need run long time without executing Python code also chance execute GC periodically. (Contributed Pablo Galindo gh-97922.)All builtin extension callables expecting boolean parameters accept arguments type instead bool andint . (Contributed Serhiy Storchaka gh-60203.)memoryview supports half-float type (the \u201ce\u201d format code). (Contributed Donghee Na Antoine Pitrou gh-90751.)slice objects hashable, allowing used dict keys set items. (Contributed Bradshaw, Furkan Onder, Raymond Hettinger gh-101264.)sum() uses Neumaier summation improve accuracy commutativity summing floats mixed ints floats. (Contributed Raymond Hettinger gh-100425.)ast.parse() raisesSyntaxError instead ofValueError parsing source code containing null bytes. (Contributed Pablo Galindo gh-96670.)The extraction methods tarfile , andshutil.unpack_archive() , new filter argument allows limiting tar features may surprising dangerous, creating files outside destination directory. See tarfile extraction filters details. Python 3.14, default switch to'data' . (Contributed Petr Viktorin PEP 706.)types.MappingProxyType instances hashable underlying mapping hashable. (Contributed Serhiy Storchaka gh-87995.)Add support perf profiler new environment variable PYTHONPERFSUPPORT command-line option-X perf , well newsys.activate_stack_trampoline() ,sys.deactivate_stack_trampoline() , andsys.is_stack_trampoline_active() functions. (Design Pablo Galindo. Contributed Pablo Galindo Christian Heimes contributions Gregory P. Smith [Google] Mark Shannon gh-96123.) New Modules\u00b6 None. Improved Modules\u00b6 array\u00b6 array.array class supports subscripting, making generic type. (Contributed Jelle Zijlstra gh-98658.) asyncio\u00b6 performance writing sockets asyncio significantly improved.asyncio avoids unnecessary copying writing sockets usessendmsg() platform supports it. (Contributed Kumar Aditya gh-91166.)Add asyncio.eager_task_factory() andasyncio.create_eager_task_factory() functions allow opting event loop eager task execution, making use-cases 2x 5x faster. (Contributed Jacob Bower & Itamar Oren gh-102853, gh-104140, gh-104138)On Linux, asyncio usesasyncio.PidfdChildWatcher default ifos.pidfd_open() available functional instead ofasyncio.ThreadedChildWatcher . (Contributed Kumar Aditya gh-98024.)The event loop uses best available child watcher platform ( asyncio.PidfdChildWatcher supported andasyncio.ThreadedChildWatcher otherwise), manually configuring child watcher recommended. (Contributed Kumar Aditya gh-94597.)Add loop_factory parameter asyncio.run() allow specifying custom event loop factory. (Contributed Kumar Aditya gh-99388.)Add C implementation asyncio.current_task() 4x-6x speedup. (Contributed Itamar Oren Pranav Thulasiram Bhat gh-100344.)asyncio.iscoroutine() returnsFalse generators asasyncio support legacy generator-based coroutines. (Contributed Kumar Aditya gh-102748.)asyncio.wait() andasyncio.as_completed() accepts generators yielding tasks. (Contributed Kumar Aditya gh-78530.) calendar\u00b6 Add enums calendar.Month andcalendar.Day defining months year days week. (Contributed Prince Roshan gh-103636.) csv\u00b6 Add csv.QUOTE_NOTNULL andcsv.QUOTE_STRINGS flags provide finer grained control ofNone empty strings byreader andwriter objects. dis\u00b6 Pseudo instruction opcodes (which used compiler appear executable bytecode) exposed dis module.HAVE_ARGUMENT still relevant real opcodes, useful pseudo instructions. Use newdis.hasarg collection instead. (Contributed Irit Katriel gh-94216.)Add dis.hasexc collection signify instructions set exception handler. (Contributed Irit Katriel gh-94216.) fractions\u00b6 Objects type fractions.Fraction support float-style formatting. (Contributed Mark Dickinson gh-100161.) importlib.resources\u00b6 importlib.resources.as_file() supports resource directories. (Contributed Jason R. Coombs gh-97930.)Rename first parameter importlib.resources.files() anchor. (Contributed Jason R. Coombs gh-100598.) inspect\u00b6 Add inspect.markcoroutinefunction() mark sync functions return coroutine use withinspect.iscoroutinefunction() . (Contributed Carlton Gibson gh-99247.)Add inspect.getasyncgenstate() andinspect.getasyncgenlocals() determining current state asynchronous generators. (Contributed Thomas Krennwallner gh-79940.)The performance inspect.getattr_static() considerably improved. calls function least 2x faster Python 3.11. (Contributed Alex Waygood gh-103193.) itertools\u00b6 Add itertools.batched() collecting even-sized tuples last batch may shorter rest. (Contributed Raymond Hettinger gh-98363.) math\u00b6 Add math.sumprod() computing sum products. (Contributed Raymond Hettinger gh-100485.)Extend math.nextafter() include steps argument moving multiple steps time. (Contributed Matthias Goergens, Mark Dickinson, Raymond Hettinger gh-94906.) os\u00b6 Add os.PIDFD_NONBLOCK open file descriptor process withos.pidfd_open() non-blocking mode. (Contributed Kumar Aditya gh-93312.)os.DirEntry includes anos.DirEntry.is_junction() method check entry junction. (Contributed Charles Machalow gh-99547.)Add os.listdrives() ,os.listvolumes() andos.listmounts() functions Windows enumerating drives, volumes mount points. (Contributed Steve Dower gh-102519.)os.stat() andos.lstat() accurate Windows. Thest_birthtime field filled creation time file, andst_ctime deprecated still contains creation time (but future return last metadata change, consistency platforms).st_dev may 64 bits andst_ino 128 bits depending file system, andst_rdev always set zero rather incorrect values. functions may significantly faster newer releases Windows. (Contributed Steve Dower gh-99726.) os.path\u00b6 Add os.path.isjunction() check given path junction. (Contributed Charles Machalow gh-99547.)Add os.path.splitroot() split path triad(drive, root, tail) . (Contributed Barney Gale gh-101000.) pathlib\u00b6 Add support subclassing pathlib.PurePath andpathlib.Path , plus Posix- Windows-specific variants. Subclasses may override thepathlib.PurePath.with_segments() method pass information path instances.Add pathlib.Path.walk() walking directory trees generating file directory names within them, similar toos.walk() . (Contributed Stanislav Zmiev gh-90385.)Add walk_up optional parameter pathlib.PurePath.relative_to() allow insertion of.. entries result; behavior consistent withos.path.relpath() . (Contributed Domenico Ragusa gh-84538.)Add pathlib.Path.is_junction() proxy toos.path.isjunction() . (Contributed Charles Machalow gh-99547.)Add case_sensitive optional parameter pathlib.Path.glob() ,pathlib.Path.rglob() andpathlib.PurePath.match() matching path\u2019s case sensitivity, allowing precise control matching process. pdb\u00b6 Add convenience variables hold values temporarily debug session provide quick access values like current frame return value. (Contributed Tian Gao gh-103693.) random\u00b6 Add random.binomialvariate() . (Contributed Raymond Hettinger gh-81620.)Add default lambd=1.0 torandom.expovariate() . (Contributed Raymond Hettinger gh-100234.) shutil\u00b6 shutil.make_archive() passes root_dir argument custom archivers support it. case longer temporarily changes current working directory process root_dir perform archiving. (Contributed Serhiy Storchaka gh-74696.)shutil.rmtree() accepts new argument onexc error handler like onerror expects exception instance rather (typ, val, tb) triplet. onerror deprecated. (Contributed Irit Katriel gh-102828.)shutil.which() consults PATHEXT environment variable find matches within PATH Windows even given cmd includes directory component. (Contributed Charles Machalow gh-103179.)shutil.which() callNeedCurrentDirectoryForExePathW querying executables Windows determine current working directory prepended search path. (Contributed Charles Machalow gh-103179.)shutil.which() return path matching cmd component fromPATHEXT prior direct match elsewhere search path Windows. (Contributed Charles Machalow gh-103179.) sqlite3\u00b6 Add command-line interface. (Contributed Erlend E. Aasland gh-77617.) Add sqlite3.Connection.autocommit attribute tosqlite3.Connection autocommit parameter tosqlite3.connect() control PEP 249-compliant transaction handling. (Contributed Erlend E. Aasland gh-83638.)Add entrypoint keyword-only parameter sqlite3.Connection.load_extension() , overriding SQLite extension entry point. (Contributed Erlend E. Aasland gh-103015.)Add sqlite3.Connection.getconfig() andsqlite3.Connection.setconfig() tosqlite3.Connection make configuration changes database connection. (Contributed Erlend E. Aasland gh-103489.) statistics\u00b6 Extend statistics.correlation() include aranked method computing Spearman correlation ranked data. (Contributed Raymond Hettinger gh-95861.) sys\u00b6 Add sys.monitoring namespace expose new PEP 669 monitoring API. (Contributed Mark Shannon gh-103082.)Add sys.activate_stack_trampoline() andsys.deactivate_stack_trampoline() activating deactivating stack profiler trampolines, andsys.is_stack_trampoline_active() querying stack profiler trampolines active. (Contributed Pablo Galindo Christian Heimes contributions Gregory P. Smith [Google] Mark Shannon gh-96123.)Add sys.last_exc holds last unhandled exception raised (for post-mortem debugging use cases). Deprecate three fields information legacy form:sys.last_type ,sys.last_value andsys.last_traceback . (Contributed Irit Katriel gh-102778.)sys._current_exceptions() returns mapping thread-id exception instance, rather a(typ, exc, tb) tuple. (Contributed Irit Katriel gh-103176.)sys.setrecursionlimit() andsys.getrecursionlimit() . recursion limit applies Python code. Builtin functions use recursion limit, protected different mechanism prevents recursion causing virtual machine crash. tempfile\u00b6 tempfile.NamedTemporaryFile function new optional parameter delete_on_close (Contributed Evgeny Zorin gh-58451.)tempfile.mkdtemp() always returns absolute path, even argument provided dir parameter relative path. threading\u00b6 Add threading.settrace_all_threads() andthreading.setprofile_all_threads() allow set tracing profiling functions running threads addition calling one. (Contributed Pablo Galindo gh-93503.) tkinter\u00b6 tkinter.Canvas.coords() flattens arguments. accepts coordinates separate arguments (x1, y1, x2, y2, ... ) sequence coordinates ([x1, y1, x2, y2, ...] ), also coordinates grouped pairs ((x1, y1), (x2, y2), ... and[(x1, y1), (x2, y2), ...] ), likecreate_*() methods. (Contributed Serhiy Storchaka gh-94473.) tokenize\u00b6 tokenize module includes changes introduced PEP 701. (Contributed Marta G\u00f3mez Mac\u00edas Pablo Galindo gh-102856.) See Porting Python 3.12 information changes thetokenize module. types\u00b6 Add types.get_original_bases() allow introspection User-defined generic types subclassed. (Contributed James Hilton-Balfe Alex Waygood gh-101827.) typing\u00b6 isinstance() checks againstruntime-checkable protocols useinspect.getattr_static() rather thanhasattr() lookup whether attributes exist. means descriptors and__getattr__() methods longer unexpectedly evaluated duringisinstance() checks runtime-checkable protocols. However, may also mean objects used considered instances runtime-checkable protocol may longer considered instances protocol Python 3.12+, vice versa. users unlikely affected change. (Contributed Alex Waygood gh-102433.)The members runtime-checkable protocol considered \u201cfrozen\u201d runtime soon class created. Monkey-patching attributes onto runtime-checkable protocol still work, impact isinstance() checks comparing objects protocol. example:>>> typing import Protocol, runtime_checkable >>> @runtime_checkable ... class HasX(Protocol): ... x = 1 ... >>> class Foo: ... ... >>> f = Foo() >>> isinstance(f, HasX) False >>> f.x = 1 >>> isinstance(f, HasX) True >>> HasX.y = 2 >>> isinstance(f, HasX) # unchanged, even though HasX also \"y\" attribute True change made order speed isinstance() checks runtime-checkable protocols.The performance profile isinstance() checks againstruntime-checkable protocols changed significantly. Mostisinstance() checks protocols members least 2x faster 3.11, may 20x faster more. However,isinstance() checks protocols many members may slower Python 3.11. (Contributed Alex Waygood gh-74690 gh-103193.)All typing.TypedDict andtyping.NamedTuple classes the__orig_bases__ attribute. (Contributed Adrian Garcia Badaracco gh-103699.)Add frozen_default parameter totyping.dataclass_transform() . (Contributed Erik De Bonte gh-99957.) unicodedata\u00b6 Unicode database updated version 15.0.0. (Contributed Benjamin Peterson gh-96734). unittest\u00b6 Add --durations command line option, showing N slowest test cases: python3 -m unittest --durations=3 lib.tests.test_threading ..... Slowest test durations ---------------------------------------------------------------------- 1.210s test_timeout (Lib.test.test_threading.BarrierTests) 1.003s test_default_timeout (Lib.test.test_threading.BarrierTests) 0.518s test_timeout (Lib.test.test_threading.EventTests) (0.000 durations hidden. Use -v show durations.) ---------------------------------------------------------------------- Ran 158 tests 9.869s OK (skipped=3) (Contributed Giampaolo Rodola gh-48330) uuid\u00b6 Add command-line interface. (Contributed Adam Chhina gh-88597.) Optimizations\u00b6 Remove wstr andwstr_length members Unicode objects. reduces object size 8 16 bytes 64bit platform. (PEP 623) (Contributed Inada Naoki gh-92536.)Add experimental support using BOLT binary optimizer build process, improves performance 1-5%. (Contributed Kevin Modzelewski gh-90536 tuned Donghee Na gh-101525) Speed regular expression substitution (functions re.sub() andre.subn() correspondingre.Pattern methods) replacement strings containing group references 2\u20133 times. (Contributed Serhiy Storchaka gh-91524.)Speed asyncio.Task creation deferring expensive string formatting. (Contributed Itamar Oren gh-103793.)The tokenize.tokenize() andtokenize.generate_tokens() functions 64% faster side effect changes required cover PEP 701 thetokenize module. (Contributed Marta G\u00f3mez Mac\u00edas Pablo Galindo gh-102856.)Speed super() method calls attribute loads via newLOAD_SUPER_ATTR instruction. (Contributed Carl Meyer Vladimir Matveev gh-103497.) CPython bytecode changes\u00b6 Remove LOAD_METHOD instruction. merged intoLOAD_ATTR .LOAD_ATTR behave like oldLOAD_METHOD instruction low bit oparg set. (Contributed Ken Jin gh-93429.)Remove JUMP_IF_FALSE_OR_POP andJUMP_IF_TRUE_OR_POP instructions. (Contributed Irit Katriel gh-102859.)Remove PRECALL instruction. (Contributed Mark Shannon gh-92925.)Add BINARY_SLICE andSTORE_SLICE instructions. (Contributed Mark Shannon gh-94163.)Add CALL_INTRINSIC_1 instructions. (Contributed Mark Shannon gh-99005.)Add CALL_INTRINSIC_2 instruction. (Contributed Irit Katriel gh-101799.)Add CLEANUP_THROW instruction. (Contributed Brandt Bucher gh-90997.)Add END_SEND instruction. (Contributed Mark Shannon gh-103082.)Add LOAD_FAST_AND_CLEAR instruction part implementation PEP 709. (Contributed Carl Meyer gh-101441.)Add LOAD_FAST_CHECK instruction. (Contributed Dennis Sweeney gh-93143.)Add LOAD_FROM_DICT_OR_DEREF ,LOAD_FROM_DICT_OR_GLOBALS , andLOAD_LOCALS opcodes part implementation PEP 695. Remove theLOAD_CLASSDEREF opcode, replaced withLOAD_LOCALS plusLOAD_FROM_DICT_OR_DEREF . (Contributed Jelle Zijlstra gh-103764.)Add LOAD_SUPER_ATTR instruction. (Contributed Carl Meyer Vladimir Matveev gh-103497.)Add RETURN_CONST instruction. (Contributed Wenyang Wang gh-101632.) Demos Tools\u00b6 Remove Tools/demo/ directory contained old demo scripts. copy found old-demos project. (Contributed Victor Stinner gh-97681.)Remove outdated example scripts Tools/scripts/ directory. copy found old-demos project. (Contributed Victor Stinner gh-97669.) Deprecated\u00b6 argparse : type, choices, metavar parameters ofargparse.BooleanOptionalAction deprecated removed 3.14. (Contributed Nikita Sobolev gh-92248.)ast : followingast features deprecated documentation since Python 3.8, cause aDeprecationWarning emitted runtime accessed used, removed Python 3.14:ast.Num ast.Str ast.Bytes ast.NameConstant ast.Ellipsis Use ast.Constant instead. (Contributed Serhiy Storchaka gh-90953.)- child watcher classes asyncio.MultiLoopChildWatcher ,asyncio.FastChildWatcher ,asyncio.AbstractChildWatcher andasyncio.SafeChildWatcher deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)asyncio.set_child_watcher() ,asyncio.get_child_watcher() ,asyncio.AbstractEventLoopPolicy.set_child_watcher() andasyncio.AbstractEventLoopPolicy.get_child_watcher() deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)The get_event_loop() method default event loop policy emits aDeprecationWarning current event loop set decides create one. (Contributed Serhiy Storchaka Guido van Rossum gh-100160.) calendar :calendar.January andcalendar.February constants deprecated replaced bycalendar.JANUARY andcalendar.FEBRUARY . (Contributed Prince Roshan gh-103636.)collections.abc : Deprecatedcollections.abc.ByteString . PreferSequence orcollections.abc.Buffer . use typing, prefer union, likebytes | bytearray , orcollections.abc.Buffer . (Contributed Shantanu Jain gh-91896.)datetime :datetime.datetime \u2019sutcnow() andutcfromtimestamp() deprecated removed future version. Instead, use timezone-aware objects represent datetimes UTC: respectively, callnow() andfromtimestamp() tz parameter set todatetime.UTC . (Contributed Paul Ganssle gh-103857.)email : Deprecate isdst parameter inemail.utils.localtime() . (Contributed Alan Williams gh-72346.)importlib.abc : Deprecated following classes, scheduled removal Python 3.14:importlib.abc.ResourceReader importlib.abc.Traversable importlib.abc.TraversableResources Use importlib.resources.abc classes instead:(Contributed Jason R. Coombs Hugo van Kemenade gh-93963.) itertools : Deprecate support copy, deepcopy, pickle operations, undocumented, inefficient, historically buggy, inconsistent. removed 3.14 significant reduction code volume maintenance burden. (Contributed Raymond Hettinger gh-101588.)multiprocessing : Python 3.14, defaultmultiprocessing start method change safer one Linux, BSDs, non-macOS POSIX platforms where'fork' currently default (gh-84559). Adding runtime warning deemed disruptive majority code expected care. Use theget_context() orset_start_method() APIs explicitly specify code requires'fork' . See contexts start methods.pkgutil :pkgutil.find_loader() andpkgutil.get_loader() deprecated removed Python 3.14; useimportlib.util.find_spec() instead. (Contributed Nikita Sobolev gh-97850.)pty : module two undocumentedmaster_open() andslave_open() functions deprecated since Python 2 gained properDeprecationWarning 3.12. Remove 3.14. (Contributed Soumendra Ganguly Gregory P. Smith gh-85984.)os :The st_ctime fields return byos.stat() andos.lstat() Windows deprecated. future release, contain last metadata change time, consistent platforms. now, still contain creation time, also available newst_birthtime field. (Contributed Steve Dower gh-99726.)On POSIX platforms, os.fork() raise aDeprecationWarning detect called multithreaded process. always fundamental incompatibility POSIX platform so. Even code appeared work. added warning raise awareness issues encountered code becoming frequent. See theos.fork() documentation details along discussion fork incompatible threads we\u2019re surfacing longstanding platform compatibility problem developers. warning appears due usage multiprocessing orconcurrent.futures fix use differentmultiprocessing start method as\"spawn\" or\"forkserver\" .shutil : onerror argument ofshutil.rmtree() deprecated; use onexc instead. (Contributed Irit Katriel gh-102828.)- default adapters converters deprecated. Instead, use Adapter converter recipes tailor needs. (Contributed Erlend E. Aasland gh-90016.) execute() ,DeprecationWarning emitted named placeholders used together parameters supplied sequence instead adict . Starting Python 3.14, using named placeholders parameters supplied sequence raise aProgrammingError . (Contributed Erlend E. Aasland gh-101698.) sys : Thesys.last_type ,sys.last_value andsys.last_traceback fields deprecated. Usesys.last_exc instead. (Contributed Irit Katriel gh-102778.)tarfile : Extracting tar archives without specifying filter deprecated Python 3.14, when'data' filter become default. See Extraction filters details.- typing.Hashable andtyping.Sized , aliases forcollections.abc.Hashable andcollections.abc.Sized respectively, deprecated. (gh-94309.)typing.ByteString , deprecated since Python 3.9, causes aDeprecationWarning emitted used. (Contributed Alex Waygood gh-91896.) xml.etree.ElementTree : module emitsDeprecationWarning testing truth value anxml.etree.ElementTree.Element . Before, Python implementation emittedFutureWarning , C implementation emitted nothing. (Contributed Jacob Walls gh-83122.)The 3-arg signatures (type, value, traceback) coroutine throw() ,generator throw() andasync generator throw() deprecated may removed future version Python. Use single-arg versions functions instead. (Contributed Ofey Chan gh-89874.)DeprecationWarning raised when__package__ module differs from__spec__.parent (previously wasImportWarning ). (Contributed Brett Cannon gh-65961.)Setting __package__ or__cached__ module deprecated, cease set taken consideration import system Python 3.14. (Contributed Brett Cannon gh-65961.)The bitwise inversion operator ( ~ ) bool deprecated. throw error Python 3.16. Usenot logical negation bools instead. rare case really need bitwise inversion underlyingint , convert int explicitly:~int(x) . (Contributed Tim Hoffmann gh-103487.)Accessing co_lnotab code objects deprecated Python 3.10 via PEP 626, got properDeprecationWarning 3.12. May removed 3.15. (Contributed Nikita Sobolev gh-101866.) Pending Removal Python 3.13\u00b6 Modules (see PEP 594): aifc audioop cgi cgitb chunk crypt imghdr mailcap msilib nis nntplib ossaudiodev pipes sndhdr spwd sunau telnetlib uu xdrlib modules: lib2to3 , 2to3 program (gh-84540) APIs: configparser.LegacyInterpolation (gh-90765)locale.resetlocale() (gh-90817)turtle.RawTurtle.settiltangle() (gh-50096)unittest.findTestCases() (gh-50096)unittest.getTestCaseNames() (gh-50096)unittest.makeSuite() (gh-50096)unittest.TestProgram.usageExit() (gh-67048)webbrowser.MacOSX (gh-86421)classmethod descriptor chaining (gh-89519)importlib.resources deprecated methods:contents() is_resource() open_binary() open_text() path() read_binary() read_text() Use importlib.resources.files() instead. Refer importlib-resources: Migrating Legacy (gh-106531) Pending Removal Python 3.14\u00b6 argparse : type, choices, metavar parameters ofargparse.BooleanOptionalAction deprecated removed 3.14. (Contributed Nikita Sobolev gh-92248.)ast : following features deprecated documentation since Python 3.8, cause aDeprecationWarning emitted runtime accessed used, removed Python 3.14:ast.Num ast.Str ast.Bytes ast.NameConstant ast.Ellipsis Use ast.Constant instead. (Contributed Serhiy Storchaka gh-90953.)- child watcher classes MultiLoopChildWatcher ,FastChildWatcher ,AbstractChildWatcher andSafeChildWatcher deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)asyncio.set_child_watcher() ,asyncio.get_child_watcher() ,asyncio.AbstractEventLoopPolicy.set_child_watcher() andasyncio.AbstractEventLoopPolicy.get_child_watcher() deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)The get_event_loop() method default event loop policy emits aDeprecationWarning current event loop set decides create one. (Contributed Serhiy Storchaka Guido van Rossum gh-100160.) collections.abc : DeprecatedByteString . PreferSequence orBuffer . use typing, prefer union, likebytes | bytearray , orcollections.abc.Buffer . (Contributed Shantanu Jain gh-91896.)email : Deprecated isdst parameter inemail.utils.localtime() . (Contributed Alan Williams gh-72346.)importlib.abc deprecated classes:importlib.abc.ResourceReader importlib.abc.Traversable importlib.abc.TraversableResources Use importlib.resources.abc classes instead:(Contributed Jason R. Coombs Hugo van Kemenade gh-93963.) itertools undocumented, inefficient, historically buggy, inconsistent support copy, deepcopy, pickle operations. removed 3.14 significant reduction code volume maintenance burden. (Contributed Raymond Hettinger gh-101588.)multiprocessing : default start method change safer one Linux, BSDs, non-macOS POSIX platforms where'fork' currently default (gh-84559). Adding runtime warning deemed disruptive majority code expected care. Use theget_context() orset_start_method() APIs explicitly specify code requires'fork' . See Contexts start methods.pathlib :is_relative_to() andrelative_to() : passing additional arguments deprecated.pkgutil :find_loader() andget_loader() raiseDeprecationWarning ; useimportlib.util.find_spec() instead. (Contributed Nikita Sobolev gh-97850.)pty :master_open() : usepty.openpty() .slave_open() : usepty.openpty() . - version andversion_info .execute() andexecutemany() named placeholders used parameters sequence instead adict . typing :ByteString , deprecated since Python 3.9, causes aDeprecationWarning emitted used.urllib :urllib.parse.Quoter deprecated: intended public API. (Contributed Gregory P. Smith gh-88168.) Pending Removal Python 3.15\u00b6 import system: Setting __cached__ module failing set__spec__.cached deprecated. Python 3.15,__cached__ cease set take consideration import system standard library. (gh-97879)Setting __package__ module failing set__spec__.parent deprecated. Python 3.15,__package__ cease set take consideration import system standard library. (gh-97879) - undocumented ctypes.SetPointerType() function deprecated since Python 3.13. - obsolete rarely used CGIHTTPRequestHandler deprecated since Python 3.13. direct replacement exists. Anything better CGI interface web server request handler.The --cgi flag python -m http.server command-line interface deprecated since Python 3.13. - getdefaultlocale() function deprecated since Python 3.11. removal originally planned Python 3.13 (gh-90817), postponed Python 3.15. Usegetlocale() ,setlocale() , andgetencoding() instead. (Contributed Hugo van Kemenade gh-111187.) - PurePath.is_reserved() deprecated since Python 3.13. Useos.path.isreserved() detect reserved paths Windows. - java_ver() deprecated since Python 3.13. function useful Jython support, confusing API, largely untested. - RLock() take arguments Python 3.15. Passing arguments deprecated since Python 3.14, Python version permit arguments, C version allows number positional keyword arguments, ignoring every argument. - types.CodeType : Accessingco_lnotab deprecated PEP 626 since 3.10 planned removed 3.12, got properDeprecationWarning 3.12. May removed 3.15. (Contributed Nikita Sobolev gh-101866.) - undocumented keyword argument syntax creating NamedTuple classes (e.g.Point = NamedTuple(\"Point\", x=int, y=int) ) deprecated since Python 3.13. Use class-based syntax functional syntax instead.The typing.no_type_check_decorator() decorator function deprecated since Python 3.13. eight years thetyping module, yet supported major type checker. wave :The getmark() ,setmark() , andgetmarkers() methods theWave_read andWave_write classes deprecated since Python 3.13. Pending removal Python 3.16\u00b6 import system: Setting __loader__ module failing set__spec__.loader deprecated. Python 3.16,__loader__ cease set taken consideration import system standard library. - 'u' format code (wchar_t ) deprecated documentation since Python 3.3 runtime since Python 3.13. Use the'w' format code (Py_UCS4 ) Unicode characters instead. - asyncio.iscoroutinefunction() deprecated removed Python 3.16, useinspect.iscoroutinefunction() instead. (Contributed Jiahao Li Kumar Aditya gh-122875.) - Bitwise inversion boolean types, ~True or~False deprecated since Python 3.12, produces surprising unintuitive results (-2 and-1 ). Usenot x instead logical negation Boolean. rare case need bitwise inversion underlying integer, convert toint explicitly (~int(x) ). - ExecError exception deprecated since Python 3.14. used function inshutil since Python 3.4, alias ofRuntimeError . - Class.get_methods method deprecated since Python 3.14. sys :The _enablelegacywindowsfsencoding() function deprecated since Python 3.13. Use thePYTHONLEGACYWINDOWSFSENCODING environment variable instead. - undocumented unused TarFile.tarfile attribute deprecated since Python 3.13. Pending Removal Future Versions\u00b6 following APIs removed future, although currently date scheduled removal. argparse : Nesting argument groups nesting mutually exclusive groups deprecated.- bool(NotImplemented) .Generators: throw(type, exc, tb) andathrow(type, exc, tb) signature deprecated: usethrow(exc) andathrow(exc) instead, single argument signature.Currently Python accepts numeric literals immediately followed keywords, example 0in x ,1or x ,0if 1else 2 . allows confusing ambiguous expressions like[0x1for x y] (which interpreted as[0x1 x y] or[0x1f x y] ). syntax warning raised numeric literal immediately followed one keywordsand ,else ,for ,if ,in ,is andor . future release changed syntax error. (gh-87999)Support __index__() and__int__() method returning non-int type: methods required return instance strict subclass ofint .Support __float__() method returning strict subclass offloat : methods required return instance offloat .Support __complex__() method returning strict subclass ofcomplex : methods required return instance ofcomplex .Delegation int() to__trunc__() method.Passing complex number real imag argument complex() constructor deprecated; passed single positional argument. (Contributed Serhiy Storchaka gh-109218.) calendar :calendar.January andcalendar.February constants deprecated replaced bycalendar.JANUARY andcalendar.FEBRUARY . (Contributed Prince Roshan gh-103636.)codeobject.co_lnotab : use thecodeobject.co_lines() method instead.- utcnow() : usedatetime.datetime.now(tz=datetime.UTC) .utcfromtimestamp() : usedatetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC) . gettext : Plural value must integer.- load_module() method: useexec_module() instead.cache_from_source() debug_override parameter deprecated: use optimization parameter instead. - EntryPoints tuple interface.Implicit None return values. logging : thewarn() method deprecated since Python 3.3, usewarning() instead.mailbox : Use StringIO input text mode deprecated, use BytesIO binary mode instead.os : Callingos.register_at_fork() multi-threaded process.pydoc.ErrorDuringImport : tuple value exc_info parameter deprecated, use exception instance.re : strict rules applied numerical group references group names regular expressions. sequence ASCII digits accepted numerical reference. group name bytes patterns replacement strings contain ASCII letters digits underscore. (Contributed Serhiy Storchaka gh-91760.)sre_compile ,sre_constants andsre_parse modules.shutil :rmtree() \u2019s onerror parameter deprecated Python 3.12; use onexc parameter instead.ssl options protocols:ssl.SSLContext without protocol argument deprecated.ssl.SSLContext :set_npn_protocols() andselected_npn_protocol() deprecated: use ALPN instead.ssl.OP_NO_SSL* optionsssl.OP_NO_TLS* optionsssl.PROTOCOL_SSLv3 ssl.PROTOCOL_TLS ssl.PROTOCOL_TLSv1 ssl.PROTOCOL_TLSv1_1 ssl.PROTOCOL_TLSv1_2 ssl.TLSVersion.SSLv3 ssl.TLSVersion.TLSv1 ssl.TLSVersion.TLSv1_1 sysconfig.is_python_build() check_home parameter deprecated ignored.threading methods:threading.Condition.notifyAll() : usenotify_all() .threading.Event.isSet() : useis_set() .threading.Thread.isDaemon() ,threading.Thread.setDaemon() : usethreading.Thread.daemon attribute.threading.Thread.getName() ,threading.Thread.setName() : usethreading.Thread.name attribute.threading.currentThread() : usethreading.current_thread() .threading.activeCount() : usethreading.active_count() . unittest.IsolatedAsyncioTestCase : deprecated return value notNone test case.urllib.parse deprecated functions:urlparse() insteadsplitattr() splithost() splitnport() splitpasswd() splitport() splitquery() splittag() splittype() splituser() splitvalue() to_bytes() urllib.request :URLopener andFancyURLopener style invoking requests deprecated. Use newerurlopen() functions methods.wsgiref :SimpleHandler.stdout.write() partial writes.xml.etree.ElementTree : Testing truth value anElement deprecated. future release always returnTrue . Prefer explicitlen(elem) orelem None tests instead.zipimport.zipimporter.load_module() deprecated: useexec_module() instead. Removed\u00b6 asynchat asyncore\u00b6 configparser\u00b6 Several names deprecated configparser way back 3.2 removed per gh-89336:configparser.ParsingError longer afilename attribute argument. Use thesource attribute argument instead.configparser longer aSafeConfigParser class. Use shorterConfigParser name instead.configparser.ConfigParser longer areadfp method. Useread_file() instead. distutils\u00b6 ensurepip\u00b6 Remove bundled setuptools wheel ensurepip , stop installing setuptools environments created byvenv .pip (>= 22.1) require setuptools installed environment.setuptools -based (anddistutils -based) packages still used withpip install , since pip providesetuptools build environment uses building package.easy_install ,pkg_resources ,setuptools anddistutils longer provided default environments created withvenv bootstrapped withensurepip , since part thesetuptools package. projects relying runtime, thesetuptools project declared dependency installed separately (typically, using pip).(Contributed Pradyun Gedam gh-95299.) enum\u00b6 ftplib\u00b6 gzip\u00b6 Remove filename attribute ofgzip \u2019sgzip.GzipFile , deprecated since Python 2.6, use thename attribute instead. write mode, thefilename attribute added'.gz' file extension present. (Contributed Victor Stinner gh-94196.) hashlib\u00b6 Remove pure Python implementation hashlib \u2019shashlib.pbkdf2_hmac() , deprecated Python 3.10. Python 3.10 newer requires OpenSSL 1.1.1 (PEP 644): OpenSSL version provides C implementation ofpbkdf2_hmac() faster. (Contributed Victor Stinner gh-94199.) importlib\u00b6 Many previously deprecated cleanups importlib completed:References to, support module_repr() removed. (Contributed Barry Warsaw gh-97850.)importlib.util.set_package ,importlib.util.set_loader andimportlib.util.module_for_loader removed. (Contributed Brett Cannon Nikita Sobolev gh-65961 gh-97850.)Support find_loader() andfind_module() APIs removed. (Contributed Barry Warsaw gh-98040.)importlib.abc.Finder ,pkgutil.ImpImporter , andpkgutil.ImpLoader removed. (Contributed Barry Warsaw gh-98040.) imp\u00b6 imp module removed. (Contributed Barry Warsaw gh-98040.)To migrate, consult following correspondence table: imp importlib imp.NullImporter Insert None intosys.path_importer_cache imp.cache_from_source() imp.find_module() imp.get_magic() imp.get_suffixes() importlib.machinery.SOURCE_SUFFIXES ,importlib.machinery.EXTENSION_SUFFIXES , andimportlib.machinery.BYTECODE_SUFFIXES imp.get_tag() imp.load_module() imp.new_module(name) types.ModuleType(name) imp.reload() imp.source_from_cache() imp.load_source() See Replace imp.load_source() with:import importlib.util import importlib.machinery def load_source(modname, filename): loader = importlib.machinery.SourceFileLoader(modname, filename) spec = importlib.util.spec_from_file_location(modname, filename, loader=loader) module = importlib.util.module_from_spec(spec) # module always executed cached sys.modules. # Uncomment following line cache module. # sys.modules[module.__name__] = module loader.exec_module(module) return module Remove imp functions attributes replacements:Undocumented functions: imp.init_builtin() imp.load_compiled() imp.load_dynamic() imp.load_package() imp.lock_held() ,imp.acquire_lock() ,imp.release_lock() : locking scheme changed Python 3.3 per-module locks.imp.find_module() constants:SEARCH_ERROR ,PY_SOURCE ,PY_COMPILED ,C_EXTENSION ,PY_RESOURCE ,PKG_DIRECTORY ,C_BUILTIN ,PY_FROZEN ,PY_CODERESOURCE ,IMP_HOOK . io\u00b6 locale\u00b6 Remove locale \u2019slocale.format() function, deprecated Python 3.7: uselocale.format_string() instead. (Contributed Victor Stinner gh-94226.) smtpd\u00b6 sqlite3\u00b6 following undocumented sqlite3 features, deprecated Python 3.10, removed:sqlite3.enable_shared_cache() sqlite3.OptimizedUnicode shared cache must used, open database URI mode using cache=shared query parameter.The sqlite3.OptimizedUnicode text factory alias forstr since Python 3.3. Code previously set text factory toOptimizedUnicode either usestr explicitly, rely default value alsostr .(Contributed Erlend E. Aasland gh-92548.) ssl\u00b6 Remove ssl \u2019sssl.RAND_pseudo_bytes() function, deprecated Python 3.6: useos.urandom() orssl.RAND_bytes() instead. (Contributed Victor Stinner gh-94199.)Remove ssl.match_hostname() function. deprecated Python 3.7. OpenSSL performs hostname matching since Python 3.7, Python longer uses thessl.match_hostname() function. (Contributed Victor Stinner gh-94199.)Remove ssl.wrap_socket() function, deprecated Python 3.7: instead, create assl.SSLContext object call itsssl.SSLContext.wrap_socket method. package still usesssl.wrap_socket() broken insecure. function neither sends SNI TLS extension validates server hostname. Code subject CWE 295 (Improper Certificate Validation). (Contributed Victor Stinner gh-94199.) unittest\u00b6 Remove many long-deprecated unittest features:A number TestCase method aliases:Deprecated alias Method Name Deprecated failUnless 3.1 failIf 3.1 failUnlessEqual 3.1 failIfEqual 3.1 failUnlessAlmostEqual 3.1 failIfAlmostEqual 3.1 failUnlessRaises 3.1 assert_ 3.2 assertEquals 3.2 assertNotEquals 3.2 assertAlmostEquals 3.2 assertNotAlmostEquals 3.2 assertRegexpMatches 3.2 assertRaisesRegexp 3.2 assertNotRegexpMatches 3.5 use https://github.com/isidentical/teyit automatically modernise unit tests. Undocumented broken TestCase methodassertDictContainsSubset (deprecated Python 3.2).Undocumented TestLoader.loadTestsFromModule parameter use_load_tests (deprecated ignored since Python 3.5).An alias TextTestResult class:_TextTestResult (deprecated Python 3.2). (Contributed Serhiy Storchaka gh-89325.) webbrowser\u00b6 Remove support obsolete browsers webbrowser . removed browsers include: Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, Firebird, Firefox versions 35 (gh-102871). xml.etree.ElementTree\u00b6 Remove ElementTree.Element.copy() method pure Python implementation, deprecated Python 3.10, use thecopy.copy() function instead. C implementation ofxml.etree.ElementTree nocopy() method, a__copy__() method. (Contributed Victor Stinner gh-94383.) zipimport\u00b6 Others\u00b6 Remove suspicious rule documentationMakefile andDoc/tools/rstlint.py , favor sphinx-lint. (Contributed Julien Palard gh-98179.)Remove keyfile certfile parameters ftplib ,imaplib ,poplib andsmtplib modules, key_file, cert_file check_hostname parameters thehttp.client module, deprecated since Python 3.6. Use context parameter (ssl_context inimaplib ) instead. (Contributed Victor Stinner gh-94172.)Remove Jython compatibility hacks several stdlib modules tests. (Contributed Nikita Sobolev gh-99482.)Remove _use_broken_old_ctypes_structure_semantics_ flag fromctypes module. (Contributed Nikita Sobolev gh-99285.) Porting Python 3.12\u00b6 section lists previously described changes bugfixes may require changes code. Changes Python API\u00b6 strict rules applied numerical group references group names regular expressions. sequence ASCII digits accepted numerical reference. group name bytes patterns replacement strings contain ASCII letters digits underscore. (Contributed Serhiy Storchaka gh-91760.) Remove randrange() functionality deprecated since Python 3.10. Formerly,randrange(10.0) losslessly converted torandrange(10) . Now, raises aTypeError . Also, exception raised non-integer values asrandrange(10.5) orrandrange('10') changed fromValueError toTypeError . also prevents bugs whererandrange(1e25) would silently select larger range thanrandrange(10**25) . (Originally suggested Serhiy Storchaka gh-86388.)argparse.ArgumentParser changed encoding error handler reading arguments file (e.g.fromfile_prefix_chars option) default text encoding (e.g.locale.getpreferredencoding(False) ) filesystem encoding error handler. Argument files encoded UTF-8 instead ANSI Codepage Windows.Remove asyncore -basedsmtpd module deprecated Python 3.4.7 3.5.4. recommended replacement theasyncio -based aiosmtpd PyPI module.shlex.split() : PassingNone argument raises exception, rather readingsys.stdin . feature deprecated Python 3.9. (Contributed Victor Stinner gh-94352.)The os module longer accepts bytes-like paths, likebytearray andmemoryview types: exactbytes type accepted bytes strings. (Contributed Victor Stinner gh-98393.)syslog.openlog() andsyslog.closelog() fail used subinterpreters.syslog.syslog() may still used subinterpreters, ifsyslog.openlog() already called main interpreter. new restrictions apply main interpreter, small set users might affected. change helps interpreter isolation. Furthermore,syslog wrapper around process-global resources, best managed main interpreter. (Contributed Donghee Na gh-99127.)The undocumented locking behavior cached_property() removed, locked across instances class, leading high lock contention. means cached property getter function could run single instance, two threads race. simple cached properties (e.g. idempotent simply calculate value based attributes instance) fine. synchronization needed, implement locking within cached property getter function around multi-threaded access points.sys._current_exceptions() returns mapping thread-id exception instance, rather a(typ, exc, tb) tuple. (Contributed Irit Katriel gh-103176.)When extracting tar files using tarfile orshutil.unpack_archive() , pass filter argument limit features may surprising dangerous. See Extraction filters details.The output tokenize.tokenize() andtokenize.generate_tokens() functions changed due changes introduced PEP 701. means thatSTRING tokens emitted f-strings tokens described PEP 701 produced instead:FSTRING_START ,FSTRING_MIDDLE andFSTRING_END emitted f-string \u201cstring\u201d parts addition appropriate tokens tokenization expression components. example f-stringf\"start {1+1} end\" old version tokenizer emitted:1,0-1,18: STRING 'f\"start {1+1} end\"' new version emits: 1,0-1,2: FSTRING_START 'f\"' 1,2-1,8: FSTRING_MIDDLE 'start ' 1,8-1,9: OP '{' 1,9-1,10: NUMBER '1' 1,10-1,11: OP '+' 1,11-1,12: NUMBER '1' 1,12-1,13: OP '}' 1,13-1,17: FSTRING_MIDDLE ' end' 1,17-1,18: FSTRING_END '\"' Additionally, may minor behavioral changes consequence changes required support PEP 701. changes include: type attribute tokens emitted tokenizing invalid Python characters as! changed fromERRORTOKEN toOP .Incomplete single-line strings also raise tokenize.TokenError incomplete multiline strings do.Some incomplete invalid Python code raises tokenize.TokenError instead returning arbitraryERRORTOKEN tokens tokenizing it.Mixing tabs spaces indentation file supported anymore raise TabError . threading module expects the_thread module an_is_main_interpreter attribute. function arguments returnsTrue current interpreter main interpreter.Any library application provides custom _thread module provide_is_main_interpreter() . (See gh-112826.) Build Changes\u00b6 Python longer uses setup.py build shared C extension modules. Build parameters like headers libraries detected inconfigure script. Extensions built byMakefile . extensions usepkg-config fall back manual detection. (Contributed Christian Heimes gh-93939.)va_start() two parameters, likeva_start(args, format), required build Python.va_start() longer called single parameter. (Contributed Kumar Aditya gh-93207.)CPython uses ThinLTO option default link time optimization policy Clang compiler accepts flag. (Contributed Donghee Na gh-89536.) Add COMPILEALL_OPTS variable inMakefile overridecompileall options (default:-j0 ) inmake install . Also merged 3compileall commands single command build .pyc files optimization levels (0, 1, 2) once. (Contributed Victor Stinner gh-99289.)Add platform triplets 64-bit LoongArch: loongarch64-linux-gnusf loongarch64-linux-gnuf32 loongarch64-linux-gnu (Contributed Zhang Na gh-90656.) PYTHON_FOR_REGEN require Python 3.10 newer.Autoconf 2.71 aclocal 1.16.4 required regenerate !configure . (Contributed Christian Heimes gh-89886.)Windows builds macOS installers python.org use OpenSSL 3.0. C API Changes\u00b6 New Features\u00b6 PEP 697: Introduce Unstable C API tier, intended low-level tools like debuggers JIT compilers. API may change minor release CPython without deprecation warnings. contents marked PyUnstable_ prefix names.Code object constructors: PyUnstable_Code_New() (renamed fromPyCode_New )PyUnstable_Code_NewWithPosOnlyArgs() (renamed fromPyCode_NewWithPosOnlyArgs ) Extra storage code objects (PEP 523): PyUnstable_Eval_RequestCodeExtraIndex() (renamed from_PyEval_RequestCodeExtraIndex )PyUnstable_Code_GetExtra() (renamed from_PyCode_GetExtra )PyUnstable_Code_SetExtra() (renamed from_PyCode_SetExtra ) original names continue available respective API changes. (Contributed Petr Viktorin gh-101101.) PEP 697: Add API extending types whose instance memory layout opaque: PyType_Spec.basicsize zero negative specify inheriting extending base class size.PyObject_GetTypeData() andPyType_GetTypeDataSize() added allow access subclass-specific instance data.Py_TPFLAGS_ITEMS_AT_END andPyObject_GetItemData() added allow safely extending certain variable-sized types, includingPyType_Type .Py_RELATIVE_OFFSET added allow definingmembers terms subclass-specific struct. (Contributed Petr Viktorin gh-103509.) Add new limited C API function PyType_FromMetaclass() , generalizes existingPyType_FromModuleAndSpec() using additional metaclass argument. (Contributed Wenzel Jakob gh-93012.)API creating objects called using vectorcall protocol added Limited API: Py_TPFLAGS_HAVE_VECTORCALL flag removed class class\u2019s__call__() method reassigned. makes vectorcall safe use mutable types (i.e. heap types without immutable flag,Py_TPFLAGS_IMMUTABLETYPE ). Mutable types overridetp_call inherit thePy_TPFLAGS_HAVE_VECTORCALL flag. (Contributed Petr Viktorin gh-93274.)The Py_TPFLAGS_MANAGED_DICT andPy_TPFLAGS_MANAGED_WEAKREF flags added. allows extensions classes support object__dict__ weakrefs less bookkeeping, using less memory faster access.API performing calls using vectorcall protocol added Limited API: means incoming outgoing ends vector call protocol available Limited API. (Contributed Wenzel Jakob gh-98586.) Add two new public functions, PyEval_SetProfileAllThreads() andPyEval_SetTraceAllThreads() , allow set tracing profiling functions running threads addition calling one. (Contributed Pablo Galindo gh-93503.)Add new function PyFunction_SetVectorcall() C API sets vectorcall field givenPyFunctionObject . (Contributed Andrew Frost gh-92257.)The C API permits registering callbacks via PyDict_AddWatcher() ,PyDict_Watch() related APIs called whenever dictionary modified. intended use optimizing interpreters, JIT compilers, debuggers. (Contributed Carl Meyer gh-91052.)Add PyType_AddWatcher() andPyType_Watch() API register callbacks receive notification changes type. (Contributed Carl Meyer gh-91051.)Add PyCode_AddWatcher() andPyCode_ClearWatcher() APIs register callbacks receive notification creation destruction code objects. (Contributed Itamar Oren gh-91054.)Add PyFrame_GetVar() andPyFrame_GetVarString() functions get frame variable name. (Contributed Victor Stinner gh-91248.)Add PyErr_GetRaisedException() andPyErr_SetRaisedException() saving restoring current exception. functions return accept single exception object, rather triple arguments now-deprecatedPyErr_Fetch() andPyErr_Restore() . less error prone bit efficient. (Contributed Mark Shannon gh-101578.)Add _PyErr_ChainExceptions1 , takes exception instance, replace legacy-API_PyErr_ChainExceptions , deprecated. (Contributed Mark Shannon gh-101578.)Add PyException_GetArgs() andPyException_SetArgs() convenience functions retrieving modifying theargs passed exception\u2019s constructor. (Contributed Mark Shannon gh-101578.)Add PyErr_DisplayException() , takes exception instance, replace legacy-apiPyErr_Display() . (Contributed Irit Katriel gh-102755). PEP 683: Introduce Immortal Objects, allows objects bypass reference counts, related changes C-API: _Py_IMMORTAL_REFCNT : reference count defines objectas immortal. _Py_IsImmortal Checks object immortal reference count.PyObject_HEAD_INIT initialize reference count to_Py_IMMORTAL_REFCNT used withPy_BUILD_CORE . SSTATE_INTERNED_IMMORTAL identifier interned unicode objectsthat immortal. SSTATE_INTERNED_IMMORTAL_STATIC identifier interned unicodeobjects immortal static sys.getunicodeinternedsize returns total number unicodeobjects interned. needed refleak.py correctly track reference counts allocated blocks (Contributed Eddie Elizondo gh-84436.) PEP 684: Add new Py_NewInterpreterFromConfig() function andPyInterpreterConfig , may used create sub-interpreters GILs. (See PEP 684: Per-Interpreter GIL info.) (Contributed Eric Snow gh-104110.)In limited C API version 3.12, Py_INCREF() andPy_DECREF() functions implemented opaque function calls hide implementation details. (Contributed Victor Stinner gh-105387.) Porting Python 3.12\u00b6 Legacy Unicode APIs based Py_UNICODE* representation removed. Please migrate APIs based UTF-8 orwchar_t* .Argument parsing functions like PyArg_ParseTuple() doesn\u2019t supportPy_UNICODE* based format (e.g.u ,Z ) anymore. Please migrate formats Unicode likes ,z ,es , andU .tp_weaklist static builtin types alwaysNULL . internal-only field onPyTypeObject we\u2019re pointing change case someone happens accessing field directly anyway. avoid breakage, consider using existing public C-API instead, or, necessary, (internal-only)_PyObject_GET_WEAKREFS_LISTPTR() macro.This internal-only PyTypeObject.tp_subclasses may valid object pointer. type changed void* reflect this. mention case someone happens accessing internal-only field directly.To get list subclasses, call Python method __subclasses__() (usingPyObject_CallMethod() , example).Add support formatting options (left aligning, octals, uppercase hexadecimals, intmax_t ,ptrdiff_t ,wchar_t C strings, variable width precision) inPyUnicode_FromFormat() andPyUnicode_FromFormatV() . (Contributed Serhiy Storchaka gh-98836.)An unrecognized format character PyUnicode_FromFormat() andPyUnicode_FromFormatV() sets aSystemError . previous versions caused rest format string copied as-is result string, extra arguments discarded. (Contributed Serhiy Storchaka gh-95781.)Fix wrong sign placement PyUnicode_FromFormat() andPyUnicode_FromFormatV() . (Contributed Philip Georgi gh-95504.)Extension classes wanting add __dict__ weak reference slot usePy_TPFLAGS_MANAGED_DICT andPy_TPFLAGS_MANAGED_WEAKREF instead oftp_dictoffset andtp_weaklistoffset , respectively. use oftp_dictoffset andtp_weaklistoffset still supported, fully support multiple inheritance (gh-95589), performance may worse. Classes declaringPy_TPFLAGS_MANAGED_DICT must call_PyObject_VisitManagedDict() and_PyObject_ClearManagedDict() traverse clear instance\u2019s dictionaries. clear weakrefs, callPyObject_ClearWeakRefs() , before.The PyUnicode_FSDecoder() function longer accepts bytes-like paths, likebytearray andmemoryview types: exactbytes type accepted bytes strings. (Contributed Victor Stinner gh-98393.)The Py_CLEAR ,Py_SETREF andPy_XSETREF macros evaluate arguments once. argument side effects, side effects longer duplicated. (Contributed Victor Stinner gh-98724.)The interpreter\u2019s error indicator always normalized. means PyErr_SetObject() ,PyErr_SetString() functions set error indicator normalize exception storing it. (Contributed Mark Shannon gh-101578.)_Py_RefTotal longer authoritative kept around ABI compatibility. Note internal global available debug builds. happen using you\u2019ll need start using_Py_GetGlobalRefTotal() .The following functions select appropriate metaclass newly created type: Creating classes whose metaclass overrides tp_new deprecated, Python 3.14+ disallowed. Note functions ignoretp_new metaclass, possibly allowing incomplete initialization.Note PyType_FromMetaclass() (added Python 3.12) already disallows creating classes whose metaclass overridestp_new (__new__() Python).Since tp_new overrides almost everythingPyType_From* functions do, two incompatible other. existing behavior \u2013 ignoring metaclass several steps type creation \u2013 unsafe general, since (meta)classes assume thattp_new called. simple general workaround. One following may work you:If control metaclass, avoid using tp_new it:If initialization skipped, done tp_init instead.If metaclass doesn\u2019t need instantiated Python, set tp_new toNULL using thePy_TPFLAGS_DISALLOW_INSTANTIATION flag. makes acceptable forPyType_From* functions. Avoid PyType_From* functions: don\u2019t need C-specific features (slots setting instance size), create types calling metaclass.If know tp_new skipped safely, filter deprecation warning usingwarnings.catch_warnings() Python. PyOS_InputHook andPyOS_ReadlineFunctionPointer longer called subinterpreters. clients generally rely process-wide global state (since callbacks way recovering extension module state).This also avoids situations extensions may find running subinterpreter don\u2019t support (or haven\u2019t yet loaded in). See gh-104668 info. PyLongObject internals changed better performance. Although internals ofPyLongObject private, used extension modules. internal fields longer accessed directly, instead API functions beginningPyLong_... used instead. Two new unstable API functions provided efficient access value ofPyLongObject fit single machine word:Custom allocators, set via PyMem_SetAllocator() , required thread-safe, regardless memory domain. Allocators don\u2019t state, including \u201chooks\u201d, affected. custom allocator already thread-safe need guidance please create new GitHub issue CC@ericsnowcurrently . Deprecated\u00b6 accordance PEP 699, ma_version_tag field inPyDictObject deprecated extension modules. Accessing field generate compiler warning compile time. field removed Python 3.14. (Contributed Ramvikrams Kumar Aditya gh-101193. PEP Ken Jin.)Deprecate global configuration variable: Py_HashRandomizationFlag : usePyConfig.use_hash_seed andPyConfig.hash_seed Py_LegacyWindowsFSEncodingFlag : usePyPreConfig.legacy_windows_fs_encoding Py_LegacyWindowsStdioFlag : usePyConfig.legacy_windows_stdio Py_FileSystemDefaultEncoding : usePyConfig.filesystem_encoding Py_HasFileSystemDefaultEncoding : usePyConfig.filesystem_encoding Py_FileSystemDefaultEncodeErrors : usePyConfig.filesystem_errors Py_UTF8Mode : usePyPreConfig.utf8_mode (seePy_PreInitialize() ) Py_InitializeFromConfig() API used withPyConfig instead. (Contributed Victor Stinner gh-77782.)Creating immutable types mutable bases deprecated disabled Python 3.14. (gh-95388)The structmember.h header deprecated, though continues available plans remove it.Its contents available including Python.h , aPy prefix added missing:Type macros like Py_T_INT ,Py_T_DOUBLE , etc. (previouslyT_INT ,T_DOUBLE , etc.)The flags Py_READONLY (previouslyREADONLY ) andPy_AUDIT_READ (previously uppercase) Several items exposed Python.h :T_OBJECT (usePy_T_OBJECT_EX )T_NONE (previously undocumented, pretty quirky)The macro WRITE_RESTRICTED nothing.The macros RESTRICTED andREAD_RESTRICTED , equivalents ofPy_AUDIT_READ .In configurations, <stddef.h> included fromPython.h . included manually usingoffsetof() . deprecated header continues provide original contents original names. old code stay unchanged, unless extra include non-namespaced macros bother greatly. (Contributed gh-47146 Petr Viktorin, based earlier work Alexander Belopolsky Matthias Braun.) PyErr_Fetch() andPyErr_Restore() deprecated. UsePyErr_GetRaisedException() andPyErr_SetRaisedException() instead. (Contributed Mark Shannon gh-101578.)PyErr_Display() deprecated. UsePyErr_DisplayException() instead. (Contributed Irit Katriel gh-102755)._PyErr_ChainExceptions deprecated. Use_PyErr_ChainExceptions1 instead. (Contributed Irit Katriel gh-102192.)Using PyType_FromSpec() ,PyType_FromSpecWithBases() orPyType_FromModuleAndSpec() create class whose metaclass overridestp_new deprecated. Call metaclass instead. Pending Removal Python 3.14\u00b6 ma_version_tag field inPyDictObject extension modules (PEP 699; gh-101193).Creating immutable types mutable bases (gh-95388).Functions configure Python\u2019s initialization, deprecated Python 3.11: PySys_SetArgvEx() : SetPyConfig.argv instead.PySys_SetArgv() : SetPyConfig.argv instead.Py_SetProgramName() : SetPyConfig.program_name instead.Py_SetPythonHome() : SetPyConfig.home instead. Py_InitializeFromConfig() API used withPyConfig instead.Global configuration variables: Py_DebugFlag : UsePyConfig.parser_debug instead.Py_VerboseFlag : UsePyConfig.verbose instead.Py_QuietFlag : UsePyConfig.quiet instead.Py_InteractiveFlag : UsePyConfig.interactive instead.Py_InspectFlag : UsePyConfig.inspect instead.Py_OptimizeFlag : UsePyConfig.optimization_level instead.Py_NoSiteFlag : UsePyConfig.site_import instead.Py_BytesWarningFlag : UsePyConfig.bytes_warning instead.Py_FrozenFlag : UsePyConfig.pathconfig_warnings instead.Py_IgnoreEnvironmentFlag : UsePyConfig.use_environment instead.Py_DontWriteBytecodeFlag : UsePyConfig.write_bytecode instead.Py_NoUserSiteDirectory : UsePyConfig.user_site_directory instead.Py_UnbufferedStdioFlag : UsePyConfig.buffered_stdio instead.Py_HashRandomizationFlag : UsePyConfig.use_hash_seed andPyConfig.hash_seed instead.Py_IsolatedFlag : UsePyConfig.isolated instead.Py_LegacyWindowsFSEncodingFlag : UsePyPreConfig.legacy_windows_fs_encoding instead.Py_LegacyWindowsStdioFlag : UsePyConfig.legacy_windows_stdio instead.Py_FileSystemDefaultEncoding : UsePyConfig.filesystem_encoding instead.Py_HasFileSystemDefaultEncoding : UsePyConfig.filesystem_encoding instead.Py_FileSystemDefaultEncodeErrors : UsePyConfig.filesystem_errors instead.Py_UTF8Mode : UsePyPreConfig.utf8_mode instead. (seePy_PreInitialize() ) Py_InitializeFromConfig() API used withPyConfig instead. Pending Removal Python 3.15\u00b6 bundled copy libmpdecimal .The PyImport_ImportModuleNoBlock() : UsePyImport_ImportModule() instead.PyWeakref_GetObject() andPyWeakref_GET_OBJECT() : UsePyWeakref_GetRef() instead.Py_UNICODE type thePy_UNICODE_WIDE macro: Usewchar_t instead.Python initialization functions: PySys_ResetWarnOptions() : Clearsys.warnoptions andwarnings.filters instead.Py_GetExecPrefix() : Getsys.base_exec_prefix andsys.exec_prefix instead.Py_GetPath() : Getsys.path instead.Py_GetPrefix() : Getsys.base_prefix andsys.prefix instead.Py_GetProgramFullPath() : Getsys.executable instead.Py_GetProgramName() : Getsys.executable instead.Py_GetPythonHome() : GetPyConfig.home thePYTHONHOME environment variable instead. Pending Removal Future Versions\u00b6 following APIs deprecated removed, although currently date scheduled removal. Py_TPFLAGS_HAVE_FINALIZE : Unneeded since Python 3.8.PyErr_Fetch() : UsePyErr_GetRaisedException() instead.PyErr_NormalizeException() : UsePyErr_GetRaisedException() instead.PyErr_Restore() : UsePyErr_SetRaisedException() instead.PyModule_GetFilename() : UsePyModule_GetFilenameObject() instead.PyOS_AfterFork() : UsePyOS_AfterFork_Child() instead.PySlice_GetIndicesEx() : UsePySlice_Unpack() andPySlice_AdjustIndices() instead.PyUnicode_AsDecodedObject() : UsePyCodec_Decode() instead.PyUnicode_AsDecodedUnicode() : UsePyCodec_Decode() instead.PyUnicode_AsEncodedObject() : UsePyCodec_Encode() instead.PyUnicode_AsEncodedUnicode() : UsePyCodec_Encode() instead.PyUnicode_READY() : Unneeded since Python 3.12PyErr_Display() : UsePyErr_DisplayException() instead._PyErr_ChainExceptions() : Use_PyErr_ChainExceptions1() instead.PyBytesObject.ob_shash member: callPyObject_Hash() instead.PyDictObject.ma_version_tag member.Thread Local Storage (TLS) API: PyThread_create_key() : UsePyThread_tss_alloc() instead.PyThread_delete_key() : UsePyThread_tss_free() instead.PyThread_set_key_value() : UsePyThread_tss_set() instead.PyThread_get_key_value() : UsePyThread_tss_get() instead.PyThread_delete_key_value() : UsePyThread_tss_delete() instead.PyThread_ReInitTLS() : Unneeded since Python 3.7. Removed\u00b6 Remove token.h header file. never public tokenizer C API. Thetoken.h header file designed used Python internals. (Contributed Victor Stinner gh-92651.)Legacy Unicode APIs removed. See PEP 623 detail. PyUnicode_WCHAR_KIND PyUnicode_AS_UNICODE() PyUnicode_AsUnicode() PyUnicode_AsUnicodeAndSize() PyUnicode_AS_DATA() PyUnicode_FromUnicode() PyUnicode_GET_SIZE() PyUnicode_GetSize() PyUnicode_GET_DATA_SIZE() Remove PyUnicode_InternImmortal() function macro. (Contributed Victor Stinner gh-85858.)"},
{"source": "https://docs.python.org/3/whatsnew/3.13.html", "title": "What\u2019s New In Python 3.13", "text": "What\u2019s New Python 3.13\u00b6 - Editors: Adam Turner Thomas Wouters article explains new features Python 3.13, compared 3.12. Python 3.13 released October 7, 2024. full details, see changelog. See also PEP 719 \u2013 Python 3.13 Release Schedule Summary \u2013 Release Highlights\u00b6 Python 3.13 latest stable release Python programming language, mix changes language, implementation standard library. biggest changes include new interactive interpreter, experimental support running free-threaded mode (PEP 703), Just-In-Time compiler (PEP 744). Error messages continue improve, tracebacks highlighted color default. locals() builtin defined semantics changing returned mapping, type parameters support default values. library changes contain removal deprecated APIs modules, well usual improvements user-friendliness correctness. Several legacy standard library modules removed following deprecation Python 3.11 (PEP 594). article doesn\u2019t attempt provide complete specification new features, instead gives convenient overview. full details refer documentation, Library Reference Language Reference. understand complete implementation design rationale change, refer PEP particular new feature; note PEPs usually kept up-to-date feature fully implemented. See Porting Python 3.13 guidance upgrading earlier versions Python. Interpreter improvements: greatly improved interactive interpreter improved error messages. PEP 667: locals() builtin defined semantics mutating returned mapping. Python debuggers similar tools may reliably update local variables optimized scopes even concurrent code execution.PEP 703: CPython 3.13 experimental support running global interpreter lock disabled. See Free-threaded CPython details. PEP 744: basic JIT compiler added. currently disabled default (though may turn later). Performance improvements modest \u2013 expect improve next releases. Color support new interactive interpreter, well tracebacks doctest output. disabled PYTHON_COLORS andNO_COLOR environment variables. Python data model improvements: __static_attributes__ stores names attributes accessed throughself.X function class body.__firstlineno__ records first line number class definition. Significant improvements standard library: Add new PythonFinalizationError exception, raised operation blocked finalization.The argparse module supports deprecating command-line options, positional arguments, subcommands.The new functions base64.z85encode() andbase64.z85decode() support encoding decoding Z85 data.The copy module acopy.replace() function, support many builtin types class defining the__replace__() method.The new dbm.sqlite3 module defaultdbm backend.The os module suite new functions working Linux\u2019s timer notification file descriptors.The random module command-line interface. Security improvements: ssl.create_default_context() setsssl.VERIFY_X509_PARTIAL_CHAIN andssl.VERIFY_X509_STRICT default flags. C API improvements: Py_mod_gil slot used indicate extension module supports running GIL disabled.The PyTime C API added, providing access system clocks. PyMutex new lightweight mutex occupies single byte.There new suite functions generating PEP 669 monitoring events C API. New typing features: PEP 696: Type parameters ( typing.TypeVar ,typing.ParamSpec , andtyping.TypeVarTuple ) support defaults.PEP 702: new warnings.deprecated() decorator adds support marking deprecations type system runtime.PEP 705: typing.ReadOnly used mark item atyping.TypedDict read-only type checkers.PEP 742: typing.TypeIs provides intuitive type narrowing behavior, alternative totyping.TypeGuard . Platform support: PEP 730: Apple\u2019s iOS officially supported platform, tier 3. PEP 738: Android officially supported platform, tier 3. wasm32-wasi supported tier 2 platform.wasm32-emscripten longer officially supported platform. Important removals: PEP 594: remaining 19 \u201cdead batteries\u201d (legacy stdlib modules) removed standard library: aifc ,audioop ,cgi ,cgitb ,chunk ,crypt ,imghdr ,mailcap ,msilib ,nis ,nntplib ,ossaudiodev ,pipes ,sndhdr ,spwd ,sunau ,telnetlib ,uu andxdrlib .Remove 2to3 tool lib2to3 module (deprecated Python 3.11).Remove tkinter.tix module (deprecated Python 3.6).Remove locale.resetlocale() function.Remove typing.io andtyping.re namespaces.Remove chained classmethod descriptors. Release schedule changes: PEP 602 (\u201cAnnual Release Cycle Python\u201d) updated extend full support (\u2018bugfix\u2019) period new releases two years. updated policy means that: Python 3.9\u20133.12 one half years full support, followed three half years security fixes. Python 3.13 later two years full support, followed three years security fixes. New Features\u00b6 better interactive interpreter\u00b6 Python uses new interactive shell default, based code PyPy project. user starts REPL interactive terminal, following new features supported: Multiline editing history preservation. Direct support REPL-specific commands like help, exit, quit, without need call functions. Prompts tracebacks color enabled default. Interactive help browsing using F1 separate command history. History browsing using F2 skips output well >>> \u2026 prompts. \u201cPaste mode\u201d F3 makes pasting larger blocks code easier (press F3 return regular prompt). disable new interactive shell, set PYTHON_BASIC_REPL environment variable. interactive mode, see Interactive Mode. (Contributed Pablo Galindo Salgado, \u0141ukasz Langa, Lysandros Nikolaou gh-111201 based code PyPy project. Windows support contributed Dino Viehland Anthony Shaw.) Improved error messages\u00b6 interpreter uses color default displaying tracebacks terminal. feature controlled via new PYTHON_COLORS environment variable well canonicalNO_COLOR andFORCE_COLOR environment variables. (Contributed Pablo Galindo Salgado gh-112730.) common mistake write script name standard library module. results errors, display helpful error message: $ python random.py Traceback (most recent call last): File \"/home/me/random.py\", line 1, <module> import random File \"/home/me/random.py\", line 3, <module> print(random.randint(5)) ^^^^^^^^^^^^^^ AttributeError: module 'random' attribute 'randint' (consider renaming '/home/me/random.py' since name standard library module named 'random' prevents importing standard library module) Similarly, script name third-party module attempts import results errors, also display helpful error message: $ python numpy.py Traceback (most recent call last): File \"/home/me/numpy.py\", line 1, <module> import numpy np File \"/home/me/numpy.py\", line 3, <module> np.array([1, 2, 3]) ^^^^^^^^ AttributeError: module 'numpy' attribute 'array' (consider renaming '/home/me/numpy.py' name library intended import) (Contributed Shantanu Jain gh-95754.) error message tries suggest correct keyword argument incorrect keyword argument passed function. >>> \"Better error messages!\".split(max_split=1) Traceback (most recent call last): File \"<python-input-0>\", line 1, <module> \"Better error messages!\".split(max_split=1) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^ TypeError: split() got unexpected keyword argument 'max_split'. mean 'maxsplit'? (Contributed Pablo Galindo Salgado Shantanu Jain gh-107944.) Free-threaded CPython\u00b6 CPython experimental support running free-threaded mode, global interpreter lock (GIL) disabled. experimental feature therefore enabled default. free-threaded mode requires different executable, usually called python3.13t python3.13t.exe . Pre-built binaries marked free-threaded installed part official Windows macOS installers, CPython built source --disable-gil option. Free-threaded execution allows full utilization available processing power running threads parallel available CPU cores. software benefit automatically, programs designed threading mind run faster multi-core hardware. free-threaded mode experimental work ongoing improve it: expect bugs substantial single-threaded performance hit. Free-threaded builds CPython support optionally running GIL enabled runtime using environment variable PYTHON_GIL command-line option -X gil=1 . check current interpreter supports free-threading, python -VV sys.version contain \u201cexperimental free-threading build\u201d. new sys._is_gil_enabled() function used check whether GIL actually disabled running process. C-API extension modules need built specifically free-threaded build. Extensions support running GIL disabled use Py_mod_gil slot. Extensions using single-phase init use PyUnstable_Module_SetGIL() indicate whether support running GIL disabled. Importing C extensions don\u2019t use mechanisms cause GIL enabled, unless GIL explicitly disabled PYTHON_GIL environment variable -X gil=0 option. pip 24.1 newer required install packages C extensions free-threaded build. work made possible thanks many individuals organizations, including large community contributors Python third-party projects test enable free-threading support. Notable contributors include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, many others. Many contributors employed Meta, provided significant engineering resources support project. See also PEP 703 \u201cMaking Global Interpreter Lock Optional CPython\u201d contains rationale information surrounding work. Porting Extension Modules Support Free-Threading: community-maintained porting guide extension authors. experimental just-in-time (JIT) compiler\u00b6 CPython configured built using --enable-experimental-jit option, just-in-time (JIT) compiler added may speed Python programs. Windows, use PCbuild/build.bat --experimental-jit enable JIT --experimental-jit-interpreter enable Tier 2 interpreter. Build requirements supporting information contained Tools/jit/README.md . --enable-experimental-jit option takes (optional) values, defaulting yes --enable-experimental-jit present without optional value. : Disable entire Tier 2 JIT pipeline.yes : Enable JIT. disable JIT runtime, pass environment variablePYTHON_JIT=0 .yes-off : Build JIT disable default. enable JIT runtime, pass environment variablePYTHON_JIT=1 .interpreter : Enable Tier 2 interpreter disable JIT. interpreter disabled running withPYTHON_JIT=0 . internal architecture roughly follows: start specialized Tier 1 bytecode. See What\u2019s new 3.11 details. Tier 1 bytecode gets hot enough, gets translated new purely internal intermediate representation (IR), called Tier 2 IR, sometimes referred micro-ops (\u201cuops\u201d). Tier 2 IR uses stack-based virtual machine Tier 1, instruction format better suited translation machine code. several optimization passes Tier 2 IR, applied interpreted translated machine code. Tier 2 interpreter, mostly intended debugging earlier stages optimization pipeline. Tier 2 interpreter enabled configuring Python --enable-experimental-jit=interpreter .When JIT enabled, optimized Tier 2 IR translated machine code, executed. machine code translation process uses technique called copy-and-patch. runtime dependencies, new build-time dependency LLVM. See also (JIT Brandt Bucher, inspired paper Haoran Xu Fredrik Kjolstad. Tier 2 IR Mark Shannon Guido van Rossum. Tier 2 optimizer Ken Jin.) Defined mutation semantics locals() \u00b6 Historically, expected result mutating return value locals() left individual Python implementations define. Starting Python 3.13, PEP 667 standardises historical behavior CPython code execution scopes, changes optimized scopes (functions, generators, coroutines, comprehensions, generator expressions) explicitly return independent snapshots currently assigned local variables, including locally referenced nonlocal variables captured closures. change semantics locals() optimized scopes also affects default behavior code execution functions implicitly target locals() explicit namespace provided (such exec() eval() ). previous versions, whether changes could accessed calling locals() calling code execution function implementation-dependent. CPython specifically, code would typically appear work desired, could sometimes fail optimized scopes based code (including debuggers code execution tracing tools) potentially resetting shared snapshot scope. Now, code always run independent snapshot local variables optimized scopes, hence changes never visible subsequent calls locals() . access changes made cases, explicit namespace reference must passed relevant function. Alternatively, may make sense update affected code use higher level code execution API returns resulting code execution namespace (e.g. runpy.run_path() executing Python files disk). ensure debuggers similar tools reliably update local variables scopes affected change, FrameType.f_locals returns write-through proxy frame\u2019s local locally referenced nonlocal variables scopes, rather returning inconsistently updated shared dict instance undefined runtime semantics. See PEP 667 details, including related C API changes deprecations. Porting notes also provided affected Python APIs C APIs. (PEP implementation contributed Mark Shannon Tian Gao gh-74929. Documentation updates provided Guido van Rossum Alyssa Coghlan.) Support mobile platforms\u00b6 PEP 730: iOS PEP 11 supported platform, arm64-apple-ios arm64-apple-ios-simulator targets tier 3 (iPhone iPad devices released 2013 Xcode iOS simulator running Apple silicon hardware, respectively). x86_64-apple-ios-simulator (the Xcode iOS simulator running older x86_64 hardware) tier 3 supported platform, best-effort support. (PEP written implementation contributed Russell Keith-Magee gh-114099.) PEP 738: Android PEP 11 supported platform, aarch64-linux-android x86_64-linux-android targets tier 3. 32-bit targets arm-linux-androideabi i686-linux-android tier 3 supported platforms, best-effort support. (PEP written implementation contributed Malcolm Smith gh-116622.) Language Changes\u00b6 compiler strips common leading whitespace every line docstring. reduces size bytecode cache (such .pyc files), reductions file size around 5%, example insqlalchemy.orm.session SQLAlchemy 2.0. change affects tools use docstrings, asdoctest .>>> def spam(): ... \"\"\" ... docstring ... leading whitespace. ... ... even multiple paragraphs! ... \"\"\" ... >>> spam.__doc__ '\\nThis docstring with\\n leading whitespace.\\n\\nIt even multiple paragraphs!\\n' (Contributed Inada Naoki gh-81283.) Annotation scopes within class scopes contain lambdas comprehensions. Comprehensions located within class scopes inlined parent scope. class C[T]: type Alias = lambda: Future statements longer triggered relative imports __future__ module, meaning statements formfrom .__future__ import ... simply standard relative imports, special features activated. (Contributed Jeremiah Gabriel Pascual gh-118216.)global declarations permitted inexcept blocks global used theelse block. Previously raised erroneousSyntaxError . (Contributed Irit Katriel gh-111123.)Add PYTHON_FROZEN_MODULES , new environment variable determines whether frozen modules ignored import machinery, equivalent the-X frozen_modules command-line option. (Contributed Yilei Yang gh-111374.)Add support perf profiler working without frame pointers new environment variable PYTHON_PERF_JIT_SUPPORT command-line option-X perf_jit . (Contributed Pablo Galindo gh-118518.)The location .python_history file changed via newPYTHON_HISTORY environment variable. (Contributed Levi Sabah, Zackery Spytz Hugo van Kemenade gh-73965.)Classes new __static_attributes__ attribute. populated compiler tuple class\u2019s attribute names assigned throughself.<name> function body. (Contributed Irit Katriel gh-115775.)The compiler creates __firstlineno__ attribute classes line number first line class definition. (Contributed Serhiy Storchaka gh-118465.)The exec() andeval() builtins accept globals locals arguments keywords. (Contributed Raphael Gaschignard gh-105879)The compile() builtin accepts new flag,ast.PyCF_OPTIMIZED_AST , similar toast.PyCF_ONLY_AST except returned AST optimized according value optimize argument. (Contributed Irit Katriel gh-108113).Add __name__ attribute onproperty objects. (Contributed Eugene Toder gh-101860.)Add PythonFinalizationError , new exception derived fromRuntimeError used signal operations blocked finalization. following callables raisePythonFinalizationError , instead ofRuntimeError :(Contributed Victor Stinner gh-114570.) Allow count argument str.replace() keyword. (Contributed Hugo van Kemenade gh-106487.)Many functions emit warning boolean value passed file descriptor argument. help catch errors earlier. (Contributed Serhiy Storchaka gh-82626.) Added name andmode attributes compressed archived file-like objects thebz2 ,lzma ,tarfile , andzipfile modules. (Contributed Serhiy Storchaka gh-115961.) New Modules\u00b6 dbm.sqlite3 : SQLite backend fordbm . (Contributed Raymond Hettinger Erlend E. Aasland gh-100414.) Improved Modules\u00b6 argparse\u00b6 Add deprecated parameter add_argument() andadd_parser() methods, enable deprecating command-line options, positional arguments, subcommands. (Contributed Serhiy Storchaka gh-83648.) array\u00b6 Add 'w' type code (Py_UCS4 ) Unicode characters. used instead deprecated'u' type code. (Contributed Inada Naoki gh-80480.)Register array.array aMutableSequence implementing theclear() method. (Contributed Mike Zimin gh-114894.) ast\u00b6 constructors node types ast module stricter arguments accept, intuitive behavior arguments omitted.If optional field AST node included argument constructing instance, field set None . Similarly, list field omitted, field set empty list, anexpr_context field omitted, defaults toLoad() . (Previously, cases, attribute would missing newly constructed AST node instance.)In cases, required argument omitted, node constructor emit DeprecationWarning . raise exception Python 3.15. Similarly, passing keyword argument constructor map field AST node deprecated, raise exception Python 3.15.These changes apply user-defined subclasses ast.AST unless class opts new behavior defining theAST._field_types mapping.(Contributed Jelle Zijlstra gh-105858, gh-117486, gh-118851.) ast.parse() accepts optional argument optimize passed tocompile() . makes possible obtain optimized AST. (Contributed Irit Katriel gh-108113.) asyncio\u00b6 asyncio.as_completed() returns object asynchronous iterator plain iterator awaitables. awaitables yielded asynchronous iteration include original task future objects passed in, making easier associate results tasks completed. (Contributed Justin Arthur gh-77714.)asyncio.loop.create_unix_server() automatically remove Unix socket server closed. (Contributed Pierre Ossman gh-111246.)DatagramTransport.sendto() send zero-length datagrams called empty bytes object. transport flow control also accounts datagram header calculating buffer size. (Contributed Jamie Phan gh-115199.)Add Queue.shutdown andQueueShutDown manage queue termination. (Contributed Laurie Opperman Yves Duprat gh-104228.)Add Server.close_clients() andServer.abort_clients() methods, forcefully close asyncio server. (Contributed Pierre Ossman gh-113538.)Accept tuple separators StreamReader.readuntil() , stopping one encountered. (Contributed Bruce Merry gh-81322.)Improve behavior TaskGroup external cancellation collides internal cancellation. example, two task groups nested experience exception child task simultaneously, possible outer task group would hang, internal cancellation swallowed inner task group.In case task group cancelled externally also must raise ExceptionGroup , call parent task\u2019scancel() method. ensures aCancelledError raised nextawait , cancellation lost.An added benefit changes task groups preserve cancellation count ( cancelling() ).In order handle corner cases, uncancel() may reset undocumented_must_cancel flag cancellation count reaches zero.(Inspired issue reported Arthur Tacca gh-116720.) TaskGroup.create_task() called inactiveTaskGroup , given coroutine closed (which prevents aRuntimeWarning given coroutine never awaited). (Contributed Arthur Tacca Jason Zhang gh-115957.) base64\u00b6 Add z85encode() andz85decode() functions encodingbytes Z85 data decoding Z85-encoded data tobytes . (Contributed Matan Perelman gh-75299.) compileall\u00b6 default number worker threads processes selected using os.process_cpu_count() instead ofos.cpu_count() . (Contributed Victor Stinner gh-109649.) concurrent.futures\u00b6 default number worker threads processes selected using os.process_cpu_count() instead ofos.cpu_count() . (Contributed Victor Stinner gh-109649.) configparser\u00b6 ConfigParser support unnamed sections, allows top-level key-value pairs. enabled new allow_unnamed_section parameter. (Contributed Pedro Sousa Lacerda gh-66449.) copy\u00b6 new replace() function thereplace protocol make creating modified copies objects much simpler. especially useful working immutable objects. following types support thereplace() function implement replace protocol:Any user-defined class also support copy.replace() defining the__replace__() method. (Contributed Serhiy Storchaka gh-108751.) ctypes\u00b6 consequence necessary internal refactoring, initialization internal metaclasses happens __init__ rather in__new__ . affects projects subclass internal metaclasses provide custom initialization. Generally:Custom logic done __new__ callingsuper().__new__ moved to__init__ .To create class, call metaclass, metaclass\u2019s __new__ method. See gh-124520 discussion links changes affected projects. ctypes.Structure objects new_align_ attribute allows alignment structure packed to/from memory specified explicitly. (Contributed Matt Sanderson gh-112433) dbm\u00b6 Add dbm.sqlite3 , new module implements SQLite backend, make defaultdbm backend. (Contributed Raymond Hettinger Erlend E. Aasland gh-100414.)Allow removing items database new gdbm.clear() andndbm.clear() methods. (Contributed Donghee Na gh-107122.) dis\u00b6 Change output dis module functions show logical labels jump targets exception handlers, rather offsets. offsets added new-O command-line option show_offsets argument. (Contributed Irit Katriel gh-112137.)get_instructions() longer represents cache entries separate instructions. Instead, returns part theInstruction , new cache_info field. show_caches argument toget_instructions() deprecated longer effect. (Contributed Irit Katriel gh-112962.) doctest\u00b6 doctest output colored default. controlled via newPYTHON_COLORS environment variable well canonicalNO_COLOR andFORCE_COLOR environment variables. See also Controlling color. (Contributed Hugo van Kemenade gh-117225.)The DocTestRunner.run() method counts number skipped tests. Add theDocTestRunner.skips andTestResults.skipped attributes. (Contributed Victor Stinner gh-108794.) email\u00b6 Headers embedded newlines quoted output. generator refuse serialize (write) headers improperly folded delimited, would parsed multiple headers joined adjacent data. need turn safety feature off, setverify_generated_headers . (Contributed Bas Bloemsaat Petr Viktorin gh-121650.)getaddresses() andparseaddr() return('', '') pairs situations invalid email addresses encountered instead potentially inaccurate values. two functions new optional strict parameter (defaultTrue ). get old behavior (accepting malformed input), usestrict=False .getattr(email.utils, 'supports_strict_parsing', False) used check strict parameter available. (Contributed Thomas Dwyer Victor Stinner gh-102988 improve CVE 2023-27043 fix.) enum\u00b6 fractions\u00b6 Fraction objects support standard format specification mini-language rules fill, alignment, sign handling, minimum width, grouping. (Contributed Mark Dickinson gh-111320.) glob\u00b6 Add translate() , function convert path specification shell-style wildcards regular expression. (Contributed Barney Gale gh-72904.) importlib\u00b6 following functions importlib.resources allow accessing directory (or tree) resources, using multiple positional arguments (the encoding errors arguments text-reading functions keyword-only):These functions longer deprecated scheduled removal. (Contributed Petr Viktorin gh-116608.) contents() remains deprecated favor fully-featuredTraversable API. However, plan remove it. (Contributed Petr Viktorin gh-116608.) io\u00b6 IOBase finalizer logs errors raised theclose() method withsys.unraisablehook . Previously, errors ignored silently default, logged Python Development Mode using Python debug build. (Contributed Victor Stinner gh-62948.) ipaddress\u00b6 Add IPv4Address.ipv6_mapped property, returns IPv4-mapped IPv6 address. (Contributed Charles Machalow gh-109466.)Fix is_global andis_private behavior inIPv4Address ,IPv6Address ,IPv4Network , andIPv6Network . (Contributed Jakub Stasiak gh-113171.) itertools\u00b6 batched() new strict parameter, raises aValueError final batch shorter specified batch size. (Contributed Raymond Hettinger gh-113202.) marshal\u00b6 Add allow_code parameter module functions. Passing allow_code=False prevents serialization de-serialization code objects incompatible Python versions. (Contributed Serhiy Storchaka gh-113626.) math\u00b6 new function fma() performs fused multiply-add operations. computesx * + z single round, avoids intermediate loss precision. wraps thefma() function provided C99, follows specification IEEE 754 \u201cfusedMultiplyAdd\u201d operation special cases. (Contributed Mark Dickinson Victor Stinner gh-73468.) mimetypes\u00b6 Add guess_file_type() function guess MIME type filesystem path. Using paths withguess_type() soft deprecated. (Contributed Serhiy Storchaka gh-66543.) mmap\u00b6 mmap protected crashing Windows mapped memory inaccessible due file system errors access violations. (Contributed Jannis Weigend gh-118209.)mmap newseekable() method used seekable file-like object required. Theseek() method returns new absolute position. (Contributed Donghee Na Sylvie Liberman gh-111835.)The new UNIX-only trackfd parameter mmap controls file descriptor duplication; false, file descriptor specified fileno duplicated. (Contributed Zackery Spytz Petr Viktorin gh-78502.) multiprocessing\u00b6 default number worker threads processes selected using os.process_cpu_count() instead ofos.cpu_count() . (Contributed Victor Stinner gh-109649.) os\u00b6 Add process_cpu_count() function get number logical CPU cores usable calling thread current process. (Contributed Victor Stinner gh-109649.)cpu_count() andprocess_cpu_count() overridden new environment variablePYTHON_CPU_COUNT new command-line option-X cpu_count . option useful users need limit CPU resources container system without modify application code container itself. (Contributed Donghee Na gh-109595.)Add low level interface Linux\u2019s timer file descriptors via timerfd_create() ,timerfd_settime() ,timerfd_settime_ns() ,timerfd_gettime() ,timerfd_gettime_ns() ,TFD_NONBLOCK ,TFD_CLOEXEC ,TFD_TIMER_ABSTIME , andTFD_TIMER_CANCEL_ON_SET (Contributed Masaru Tsuchiyama gh-108277.)lchmod() follow_symlinks argument ofchmod() available Windows. Note default value follow_symlinks inlchmod() isFalse Windows. (Contributed Serhiy Storchaka gh-59616.)fchmod() support file descriptors inchmod() available Windows. (Contributed Serhiy Storchaka gh-113191.)On Windows, mkdir() andmakedirs() support passing mode value of0o700 apply access control new directory. implicitly affectstempfile.mkdtemp() mitigation CVE 2024-4030. values mode continue ignored. (Contributed Steve Dower gh-118486.)posix_spawn() acceptsNone env argument, makes newly spawned process use current process environment. (Contributed Jakub Kulik gh-113119.)posix_spawn() use thePOSIX_SPAWN_CLOSEFROM attribute file_actions parameter platforms supportposix_spawn_file_actions_addclosefrom_np() . (Contributed Jakub Kulik gh-113117.) os.path\u00b6 Add isreserved() check path reserved current system. function available Windows. (Contributed Barney Gale gh-88569.)On Windows, isabs() longer considers paths starting exactly one slash (\\ or/ ) absolute. (Contributed Barney Gale Jon Foster gh-44626.)realpath() resolves MS-DOS style file names even file accessible. (Contributed Moonsik Park gh-82367.) pathlib\u00b6 Add UnsupportedOperation , raised instead ofNotImplementedError path operation isn\u2019t supported. (Contributed Barney Gale gh-89812.)Add new constructor creating Path objects \u2018file\u2019 URIs (file:/// ),Path.from_uri() . (Contributed Barney Gale gh-107465.)Add PurePath.full_match() matching paths shell-style wildcards, including recursive wildcard \u201c** \u201d. (Contributed Barney Gale gh-73435.)Add PurePath.parser class attribute store implementation ofos.path used low-level path parsing joining. eitherposixpath orntpath .Add recurse_symlinks keyword-only argument Path.glob() andrglob() . (Contributed Barney Gale gh-77609.)Path.glob() andrglob() return files directories given pattern ends \u201c** \u201d. Previously, directories returned. (Contributed Barney Gale gh-70303.)Add follow_symlinks keyword-only argument Path.is_file ,Path.is_dir ,Path.owner() , andPath.group() . (Contributed Barney Gale gh-105793 Kamil Turek gh-107962.) pdb\u00b6 breakpoint() andset_trace() enter debugger immediately rather next line code executed. change prevents debugger breaking outside context whenbreakpoint() positioned end context. (Contributed Tian Gao gh-118579.)sys.path[0] longer replaced directory script debugged whensys.flags.safe_path set. (Contributed Tian Gao Christian Walther gh-111762.)zipapp supported debugging target. (Contributed Tian Gao gh-118501.)Add ability move chained exceptions post-mortem debugging pm() using newexceptions [exc_number] command Pdb. (Contributed Matthias Bussonnier gh-106676.)Expressions statements whose prefix pdb command correctly identified executed. (Contributed Tian Gao gh-108464.) queue\u00b6 Add Queue.shutdown andShutDown manage queue termination. (Contributed Laurie Opperman Yves Duprat gh-104750.) random\u00b6 Add command-line interface. (Contributed Hugo van Kemenade gh-118131.) re\u00b6 Rename re.error toPatternError improved clarity.re.error kept backward compatibility. shutil\u00b6 site\u00b6 .pth files decoded using UTF-8 first, locale encoding UTF-8 decoding fails. (Contributed Inada Naoki gh-117802.) sqlite3\u00b6 ResourceWarning emitted aConnection object notclosed explicitly. (Contributed Erlend E. Aasland gh-105539.)Add filter keyword-only parameter Connection.iterdump() filtering database objects dump. (Contributed Mariusz Felisiak gh-91602.) ssl\u00b6 create_default_context() API includesVERIFY_X509_PARTIAL_CHAIN andVERIFY_X509_STRICT default flags.Note VERIFY_X509_STRICT may reject pre-RFC 5280 malformed certificates underlying OpenSSL implementation might otherwise accept. Whilst disabling recommended, using:import ssl ctx = ssl.create_default_context() ctx.verify_flags &= ~ssl.VERIFY_X509_STRICT (Contributed William Woodruff gh-112389.) statistics\u00b6 Add kde() kernel density estimation. makes possible estimate continuous probability density function fixed number discrete samples. (Contributed Raymond Hettinger gh-115863.)Add kde_random() sampling estimated probability density function created bykde() . (Contributed Raymond Hettinger gh-115863.) subprocess\u00b6 subprocess module uses theposix_spawn() function situations.Notably, close_fds True (the default),posix_spawn() used C library providesposix_spawn_file_actions_addclosefrom_np() , includes recent versions Linux, FreeBSD, Solaris. Linux, perform similarly existing Linuxvfork() based code.A private control knob subprocess._USE_POSIX_SPAWN set toFalse need forcesubprocess never useposix_spawn() . Please report reason platform details issue tracker set improve API selection logic everyone. (Contributed Jakub Kulik gh-113117.) sys\u00b6 Add _is_interned() function test string interned. function guaranteed exist implementations Python. (Contributed Serhiy Storchaka gh-78573.) tempfile\u00b6 Windows, default mode 0o700 used bytempfile.mkdtemp() limits access new directory due changes toos.mkdir() . mitigation CVE 2024-4030. (Contributed Steve Dower gh-118486.) time\u00b6 Windows, monotonic() uses theQueryPerformanceCounter() clock resolution 1 microsecond, instead theGetTickCount64() clock resolution 15.6 milliseconds. (Contributed Victor Stinner gh-88494.)On Windows, time() uses theGetSystemTimePreciseAsFileTime() clock resolution 1 microsecond, instead theGetSystemTimeAsFileTime() clock resolution 15.6 milliseconds. (Contributed Victor Stinner gh-63207.) tkinter\u00b6 Add tkinter widget methods:tk_busy_hold() ,tk_busy_configure() ,tk_busy_cget() ,tk_busy_forget() ,tk_busy_current() , andtk_busy_status() . (Contributed Miguel, klappnase Serhiy Storchaka gh-72684.)The tkinter widget methodwm_attributes() accepts attribute name without minus prefix get window attributes, examplew.wm_attributes('alpha') allows specifying attributes values set keyword arguments, examplew.wm_attributes(alpha=0.5) . (Contributed Serhiy Storchaka gh-43457.)wm_attributes() return attributes adict , using new optional keyword-only parameter return_python_dict. (Contributed Serhiy Storchaka gh-43457.)Text.count() return simpleint new optional keyword-only parameter return_ints used. Otherwise, single count returned 1-tuple orNone . (Contributed Serhiy Storchaka gh-97928.)Support \u201cvsapi\u201d element type element_create() method oftkinter.ttk.Style . (Contributed Serhiy Storchaka gh-68166.)Add after_info() method Tkinter widgets. (Contributed Cheryl Sabella gh-77020.)Add new copy_replace() method toPhotoImage copy region one image another, possibly pixel zooming, subsampling, both. (Contributed Serhiy Storchaka gh-118225.)Add from_coords parameter PhotoImage methodscopy() ,zoom() andsubsample() . Add zoom subsample parameters thePhotoImage methodcopy() . (Contributed Serhiy Storchaka gh-118225.)Add PhotoImage methodsread() read image file anddata() get image data. Add background grayscale parameters thewrite() method. (Contributed Serhiy Storchaka gh-118271.) traceback\u00b6 Add exc_type_str attribute toTracebackException , holds string display exc_type. Deprecate theexc_type attribute, holds type object itself. Add parameter save_exc_type (defaultTrue ) indicate whetherexc_type saved. (Contributed Irit Katriel gh-112332.)Add new show_group keyword-only parameter TracebackException.format_exception_only() (recursively) format nested exceptions aBaseExceptionGroup instance. (Contributed Irit Katriel gh-105292.) types\u00b6 SimpleNamespace take single positional argument initialise namespace\u2019s arguments. argument must either mapping iterable key-value pairs. (Contributed Serhiy Storchaka gh-108191.) typing\u00b6 PEP 705: Add ReadOnly , special typing construct mark aTypedDict item read-only type checkers.PEP 742: Add TypeIs , typing construct used instruct type checker narrow type.Add NoDefault , sentinel object used represent defaults parameters thetyping module. (Contributed Jelle Zijlstra gh-116126.)Add get_protocol_members() return set members defining atyping.Protocol . (Contributed Jelle Zijlstra gh-104873.)Add is_protocol() check whether class aProtocol . (Contributed Jelle Zijlstra gh-104873.)ClassVar nested inFinal , vice versa. (Contributed Mehdi Drissi gh-89547.) unicodedata\u00b6 Update Unicode database version 15.1.0. (Contributed James Gerity gh-109559.) venv\u00b6 Add support creating source control management (SCM) ignore files virtual environment\u2019s directory. default, Git supported. implemented opt-in via API, extended support SCMs ( EnvBuilder andcreate() ), opt-out via CLI, using--without-scm-ignore-files . (Contributed Brett Cannon gh-108125.) warnings\u00b6 PEP 702: new warnings.deprecated() decorator provides way communicate deprecations static type checker warn usage deprecated classes functions. ADeprecationWarning may also emitted decorated function class used runtime. (Contributed Jelle Zijlstra gh-104003.) xml\u00b6 Allow controlling Expat >=2.6.0 reparse deferral (CVE 2023-52425) adding five new methods: xml.sax.expatreader.ExpatParser.flush() (Contributed Sebastian Pipping gh-115623.) Add close() method iterator returned byiterparse() explicit cleanup. (Contributed Serhiy Storchaka gh-69893.) zipimport\u00b6 Optimizations\u00b6 Several standard library modules import times significantly improved. example, import time typing module reduced around third removing dependencies onre andcontextlib . modules enjoy import-time speedups includeemail.utils ,enum ,functools ,importlib.metadata , andthreading . (Contributed Alex Waygood, Shantanu Jain, Adam Turner, Daniel Hollas, others gh-109653.)textwrap.indent() around 30% faster large input. (Contributed Inada Naoki gh-107369.)The subprocess module uses theposix_spawn() function situations, including close_fds isTrue (the default) many modern platforms. provide notable performance increase launching processes FreeBSD Solaris. See subprocess section details. (Contributed Jakub Kulik gh-113117.) Removed Modules APIs\u00b6 PEP 594: Remove \u201cdead batteries\u201d standard library\u00b6 PEP 594 proposed removing 19 modules standard library, colloquially referred \u2018dead batteries\u2019 due historic, obsolete, insecure status. following modules deprecated Python 3.11, removed: aifc audioop chunk cgi andcgitb cgi.FieldStorage typically replaced withurllib.parse.parse_qsl() forGET andHEAD requests, theemail.message module multipart library forPOST andPUT requests.cgi.parse() replaced callingurllib.parse.parse_qs() directly desired query string, unless input ismultipart/form-data , replaced described forcgi.parse_multipart() .cgi.parse_header() replaced functionality theemail package, implements MIME RFCs. example, withemail.message.EmailMessage :from email.message import EmailMessage msg = EmailMessage() msg['content-type'] = 'application/json; charset=\"utf8\"' main, params = msg.get_content_type(), msg['content-type'].params cgi.parse_multipart() replaced functionality theemail package, implements MIME RFCs, multipart library. example, theemail.message.EmailMessage andemail.message.Message classes. crypt private_crypt extension. Thehashlib module may appropriate replacement simply hashing value required. Otherwise, various third-party libraries PyPI available:bcrypt: Modern password hashing software servers. passlib: Comprehensive password hashing framework supporting 30 schemes. argon2-cffi: secure Argon2 password hashing algorithm. legacycrypt: ctypes wrapper POSIX crypt library call associated functionality.crypt_r: Fork crypt module, wrapper crypt_r(3) library call associated functionality. imghdr : filetype, puremagic, python-magic libraries used replacements. example, thepuremagic.what() function used replace theimghdr.what() function file formats supported byimghdr .mailcap : Use themimetypes module instead.msilib nis nntplib : Use pynntp library PyPI instead.ossaudiodev : audio playback, use pygame library PyPI instead.pipes : Use thesubprocess module instead. Useshlex.quote() replace undocumentedpipes.quote function.sndhdr : filetype, puremagic, python-magic libraries used replacements.spwd : Use python-pam library PyPI instead.sunau telnetlib , Use telnetlib3 Exscript libraries PyPI instead.uu : Use thebase64 module instead, modern alternative.xdrlib (Contributed Victor Stinner Zachary Ware gh-104773 gh-104780.) 2to3\u00b6 Remove 2to3 program lib2to3 module, previously deprecated Python 3.11. (Contributed Victor Stinner gh-104780.) builtins\u00b6 Remove support chained classmethod descriptors (introduced gh-63272). longer used wrap descriptors, asproperty . core design feature flawed led several problems. \u201cpass-through\u201d aclassmethod , consider using the__wrapped__ attribute added Python 3.10. (Contributed Raymond Hettinger gh-89519.)Raise RuntimeError callingframe.clear() suspended frame (as always case executing frame). (Contributed Irit Katriel gh-79932.) configparser\u00b6 Remove undocumented LegacyInterpolation class, deprecated docstring since Python 3.2, runtime since Python 3.11. (Contributed Hugo van Kemenade gh-104886.) importlib.metadata\u00b6 Remove deprecated subscript ( __getitem__() ) access EntryPoint objects. (Contributed Jason R. Coombs gh-113175.) locale\u00b6 Remove locale.resetlocale() function, deprecated Python 3.11. Uselocale.setlocale(locale.LC_ALL, \"\") instead. (Contributed Victor Stinner gh-104783.) opcode\u00b6 Move opcode.ENABLE_SPECIALIZATION to_opcode.ENABLE_SPECIALIZATION . field added 3.12, never documented, intended external use. (Contributed Irit Katriel gh-105481.)Remove opcode.is_pseudo() ,opcode.MIN_PSEUDO_OPCODE , andopcode.MAX_PSEUDO_OPCODE , added Python 3.12, neither documented exposed throughdis , intended used externally. (Contributed Irit Katriel gh-105481.) optparse\u00b6 module longer considered soft deprecated. argparse remains preferred new projects aren\u2019t using third party command line argument processing library, aspects wayargparse works mean lower leveloptparse module may provide better foundation writing argument processing libraries, implementing command line applications adhere strictly thanargparse various Unix command line processing conventions originate behaviour Cgetopt() function . (Contributed Alyssa Coghlan Serhiy Storchaka gh-126180.) pathlib\u00b6 re\u00b6 Remove undocumented, deprecated, broken re.template() function andre.TEMPLATE /re.T flag. (Contributed Serhiy Storchaka Nikita Sobolev gh-105687.) tkinter.tix\u00b6 Remove tkinter.tix module, deprecated Python 3.6. third-party Tix library module wrapped unmaintained. (Contributed Zachary Ware gh-75552.) turtle\u00b6 Remove RawTurtle.settiltangle() method, deprecated documentation since Python 3.1 runtime since Python 3.11. (Contributed Hugo van Kemenade gh-104876.) typing\u00b6 Remove typing.io andtyping.re namespaces, deprecated since Python 3.8. items namespaces imported directly thetyping module. (Contributed Sebastian Rittau gh-92871.)Remove keyword-argument method creating TypedDict types, deprecated Python 3.11. (Contributed Tomas Roun gh-104786.) unittest\u00b6 Remove following unittest functions, deprecated Python 3.11:unittest.findTestCases() unittest.makeSuite() unittest.getTestCaseNames() Use TestLoader methods instead:(Contributed Hugo van Kemenade gh-104835.) Remove untested undocumented TestProgram.usageExit() method, deprecated Python 3.11. (Contributed Hugo van Kemenade gh-104992.) urllib\u00b6 Remove cafile, capath, cadefault parameters urllib.request.urlopen() function, deprecated Python 3.6. Use context parameter instead anSSLContext instance. Thessl.SSLContext.load_cert_chain() function used load specific certificates, letssl.create_default_context() select operating system\u2019s trusted certificate authority (CA) certificates. (Contributed Victor Stinner gh-105382.) webbrowser\u00b6 Remove untested undocumented MacOSX class, deprecated Python 3.11. Use theMacOSXOSAScript class (introduced Python 3.2) instead. (Contributed Hugo van Kemenade gh-104804.)Remove deprecated MacOSXOSAScript._name attribute. Use theMacOSXOSAScript.name attribute instead. (Contributed Nikita Sobolev gh-105546.) New Deprecations\u00b6 - Deprecate undocumented SetPointerType() function, removed Python 3.15. (Contributed Victor Stinner gh-105733.)Soft-deprecate ARRAY() function favour oftype * length multiplication. (Contributed Victor Stinner gh-105733.) dis :- Deprecate non-integer numbers arguments functions methods consider plural forms gettext module, even translation found. (Contributed Serhiy Storchaka gh-88434.) glob :Deprecate undocumented glob0() andglob1() functions. Useglob() pass path-like object specifying root directory root_dir parameter instead. (Contributed Barney Gale gh-117337.) - Deprecate CGIHTTPRequestHandler , removed Python 3.15. Process-based CGI HTTP servers favor long time. code outdated, unmaintained, rarely used. high potential security functionality bugs. (Contributed Gregory P. Smith gh-109096.)Deprecate --cgi flag python -m http.server command-line interface, removed Python 3.15. (Contributed Gregory P. Smith gh-109096.) - Soft-deprecate file path arguments guess_type() , useguess_file_type() instead. (Contributed Serhiy Storchaka gh-66543.) :Deprecate passing optional maxsplit, count, flags arguments positional arguments module-level split() ,sub() , andsubn() functions. parameters become keyword-only future version Python. (Contributed Serhiy Storchaka gh-56166.) - Deprecate PurePath.is_reserved() , removed Python 3.15. Useos.path.isreserved() detect reserved paths Windows. (Contributed Barney Gale gh-88569.) - Deprecate java_ver() , removed Python 3.15. function useful Jython support, confusing API, largely untested. (Contributed Nikita Sobolev gh-116349.) - Deprecate undocumented ispackage() function. (Contributed Zackery Spytz gh-64020.) - Deprecate passing one positional argument connect() function theConnection constructor. remaining parameters become keyword-only Python 3.15. (Contributed Erlend E. Aasland gh-107948.)Deprecate passing name, number arguments, callable keyword arguments Connection.create_function() andConnection.create_aggregate() parameters become positional-only Python 3.15. (Contributed Erlend E. Aasland gh-108278.)Deprecate passing callback callable keyword set_authorizer() ,set_progress_handler() , andset_trace_callback() Connection methods. callback callables become positional-only Python 3.15. (Contributed Erlend E. Aasland gh-108278.) sys :Deprecate _enablelegacywindowsfsencoding() function, removed Python 3.16. Use thePYTHONLEGACYWINDOWSFSENCODING environment variable instead. (Contributed Inada Naoki gh-73427.) - Deprecate undocumented unused TarFile.tarfile attribute, removed Python 3.16. (Contributed gh-115256.) - Deprecate TracebackException.exc_type attribute. UseTracebackException.exc_type_str instead. (Contributed Irit Katriel gh-112332.) - Deprecate undocumented keyword argument syntax creating NamedTuple classes (e.g.Point = NamedTuple(\"Point\", x=int, y=int) ), removed Python 3.15. Use class-based syntax functional syntax instead. (Contributed Alex Waygood gh-105566.)Deprecate omitting fields parameter creating NamedTuple ortyping.TypedDict class, deprecate passingNone fields parameter types. Python 3.15 require valid sequence fields parameter. create NamedTuple class zero fields, useclass NT(NamedTuple): pass orNT = NamedTuple(\"NT\", ()) . create TypedDict class zero fields, useclass TD(TypedDict): pass orTD = TypedDict(\"TD\", {}) . (Contributed Alex Waygood gh-105566 gh-105570.)Deprecate typing.no_type_check_decorator() decorator function, removed Python 3.15. eight years thetyping module, yet supported major type checker. (Contributed Alex Waygood gh-106309.)Deprecate typing.AnyStr . Python 3.16, removed fromtyping.__all__ , aDeprecationWarning emitted runtime imported accessed. removed entirely Python 3.18. Use new type parameter syntax instead. (Contributed Michael gh-107116.) wave :Deprecate getmark() ,setmark() , andgetmarkers() methods theWave_read andWave_write classes, removed Python 3.15. (Contributed Victor Stinner gh-105096.) Pending Removal Python 3.14\u00b6 argparse : type, choices, metavar parameters ofargparse.BooleanOptionalAction deprecated removed 3.14. (Contributed Nikita Sobolev gh-92248.)ast : following features deprecated documentation since Python 3.8, cause aDeprecationWarning emitted runtime accessed used, removed Python 3.14:ast.Num ast.Str ast.Bytes ast.NameConstant ast.Ellipsis Use ast.Constant instead. (Contributed Serhiy Storchaka gh-90953.)- child watcher classes MultiLoopChildWatcher ,FastChildWatcher ,AbstractChildWatcher andSafeChildWatcher deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)asyncio.set_child_watcher() ,asyncio.get_child_watcher() ,asyncio.AbstractEventLoopPolicy.set_child_watcher() andasyncio.AbstractEventLoopPolicy.get_child_watcher() deprecated removed Python 3.14. (Contributed Kumar Aditya gh-94597.)The get_event_loop() method default event loop policy emits aDeprecationWarning current event loop set decides create one. (Contributed Serhiy Storchaka Guido van Rossum gh-100160.) collections.abc : DeprecatedByteString . PreferSequence orBuffer . use typing, prefer union, likebytes | bytearray , orcollections.abc.Buffer . (Contributed Shantanu Jain gh-91896.)email : Deprecated isdst parameter inemail.utils.localtime() . (Contributed Alan Williams gh-72346.)importlib.abc deprecated classes:importlib.abc.ResourceReader importlib.abc.Traversable importlib.abc.TraversableResources Use importlib.resources.abc classes instead:(Contributed Jason R. Coombs Hugo van Kemenade gh-93963.) itertools undocumented, inefficient, historically buggy, inconsistent support copy, deepcopy, pickle operations. removed 3.14 significant reduction code volume maintenance burden. (Contributed Raymond Hettinger gh-101588.)multiprocessing : default start method change safer one Linux, BSDs, non-macOS POSIX platforms where'fork' currently default (gh-84559). Adding runtime warning deemed disruptive majority code expected care. Use theget_context() orset_start_method() APIs explicitly specify code requires'fork' . See Contexts start methods.pathlib :is_relative_to() andrelative_to() : passing additional arguments deprecated.pkgutil :find_loader() andget_loader() raiseDeprecationWarning ; useimportlib.util.find_spec() instead. (Contributed Nikita Sobolev gh-97850.)pty :master_open() : usepty.openpty() .slave_open() : usepty.openpty() . - version andversion_info .execute() andexecutemany() named placeholders used parameters sequence instead adict . typing :ByteString , deprecated since Python 3.9, causes aDeprecationWarning emitted used.urllib :urllib.parse.Quoter deprecated: intended public API. (Contributed Gregory P. Smith gh-88168.) Pending Removal Python 3.15\u00b6 import system: Setting __cached__ module failing set__spec__.cached deprecated. Python 3.15,__cached__ cease set take consideration import system standard library. (gh-97879)Setting __package__ module failing set__spec__.parent deprecated. Python 3.15,__package__ cease set take consideration import system standard library. (gh-97879) - undocumented ctypes.SetPointerType() function deprecated since Python 3.13. - obsolete rarely used CGIHTTPRequestHandler deprecated since Python 3.13. direct replacement exists. Anything better CGI interface web server request handler.The --cgi flag python -m http.server command-line interface deprecated since Python 3.13. - getdefaultlocale() function deprecated since Python 3.11. removal originally planned Python 3.13 (gh-90817), postponed Python 3.15. Usegetlocale() ,setlocale() , andgetencoding() instead. (Contributed Hugo van Kemenade gh-111187.) - PurePath.is_reserved() deprecated since Python 3.13. Useos.path.isreserved() detect reserved paths Windows. - java_ver() deprecated since Python 3.13. function useful Jython support, confusing API, largely untested. - RLock() take arguments Python 3.15. Passing arguments deprecated since Python 3.14, Python version permit arguments, C version allows number positional keyword arguments, ignoring every argument. - types.CodeType : Accessingco_lnotab deprecated PEP 626 since 3.10 planned removed 3.12, got properDeprecationWarning 3.12. May removed 3.15. (Contributed Nikita Sobolev gh-101866.) - undocumented keyword argument syntax creating NamedTuple classes (e.g.Point = NamedTuple(\"Point\", x=int, y=int) ) deprecated since Python 3.13. Use class-based syntax functional syntax instead.The typing.no_type_check_decorator() decorator function deprecated since Python 3.13. eight years thetyping module, yet supported major type checker. wave :The getmark() ,setmark() , andgetmarkers() methods theWave_read andWave_write classes deprecated since Python 3.13. Pending removal Python 3.16\u00b6 import system: Setting __loader__ module failing set__spec__.loader deprecated. Python 3.16,__loader__ cease set taken consideration import system standard library. - 'u' format code (wchar_t ) deprecated documentation since Python 3.3 runtime since Python 3.13. Use the'w' format code (Py_UCS4 ) Unicode characters instead. - asyncio.iscoroutinefunction() deprecated removed Python 3.16, useinspect.iscoroutinefunction() instead. (Contributed Jiahao Li Kumar Aditya gh-122875.) - Bitwise inversion boolean types, ~True or~False deprecated since Python 3.12, produces surprising unintuitive results (-2 and-1 ). Usenot x instead logical negation Boolean. rare case need bitwise inversion underlying integer, convert toint explicitly (~int(x) ). - ExecError exception deprecated since Python 3.14. used function inshutil since Python 3.4, alias ofRuntimeError . - Class.get_methods method deprecated since Python 3.14. sys :The _enablelegacywindowsfsencoding() function deprecated since Python 3.13. Use thePYTHONLEGACYWINDOWSFSENCODING environment variable instead. - undocumented unused TarFile.tarfile attribute deprecated since Python 3.13. Pending Removal Future Versions\u00b6 following APIs removed future, although currently date scheduled removal. argparse : Nesting argument groups nesting mutually exclusive groups deprecated.- bool(NotImplemented) .Generators: throw(type, exc, tb) andathrow(type, exc, tb) signature deprecated: usethrow(exc) andathrow(exc) instead, single argument signature.Currently Python accepts numeric literals immediately followed keywords, example 0in x ,1or x ,0if 1else 2 . allows confusing ambiguous expressions like[0x1for x y] (which interpreted as[0x1 x y] or[0x1f x y] ). syntax warning raised numeric literal immediately followed one keywordsand ,else ,for ,if ,in ,is andor . future release changed syntax error. (gh-87999)Support __index__() and__int__() method returning non-int type: methods required return instance strict subclass ofint .Support __float__() method returning strict subclass offloat : methods required return instance offloat .Support __complex__() method returning strict subclass ofcomplex : methods required return instance ofcomplex .Delegation int() to__trunc__() method.Passing complex number real imag argument complex() constructor deprecated; passed single positional argument. (Contributed Serhiy Storchaka gh-109218.) calendar :calendar.January andcalendar.February constants deprecated replaced bycalendar.JANUARY andcalendar.FEBRUARY . (Contributed Prince Roshan gh-103636.)codeobject.co_lnotab : use thecodeobject.co_lines() method instead.- utcnow() : usedatetime.datetime.now(tz=datetime.UTC) .utcfromtimestamp() : usedatetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC) . gettext : Plural value must integer.- load_module() method: useexec_module() instead.cache_from_source() debug_override parameter deprecated: use optimization parameter instead. - EntryPoints tuple interface.Implicit None return values. logging : thewarn() method deprecated since Python 3.3, usewarning() instead.mailbox : Use StringIO input text mode deprecated, use BytesIO binary mode instead.os : Callingos.register_at_fork() multi-threaded process.pydoc.ErrorDuringImport : tuple value exc_info parameter deprecated, use exception instance.re : strict rules applied numerical group references group names regular expressions. sequence ASCII digits accepted numerical reference. group name bytes patterns replacement strings contain ASCII letters digits underscore. (Contributed Serhiy Storchaka gh-91760.)sre_compile ,sre_constants andsre_parse modules.shutil :rmtree() \u2019s onerror parameter deprecated Python 3.12; use onexc parameter instead.ssl options protocols:ssl.SSLContext without protocol argument deprecated.ssl.SSLContext :set_npn_protocols() andselected_npn_protocol() deprecated: use ALPN instead.ssl.OP_NO_SSL* optionsssl.OP_NO_TLS* optionsssl.PROTOCOL_SSLv3 ssl.PROTOCOL_TLS ssl.PROTOCOL_TLSv1 ssl.PROTOCOL_TLSv1_1 ssl.PROTOCOL_TLSv1_2 ssl.TLSVersion.SSLv3 ssl.TLSVersion.TLSv1 ssl.TLSVersion.TLSv1_1 sysconfig.is_python_build() check_home parameter deprecated ignored.threading methods:threading.Condition.notifyAll() : usenotify_all() .threading.Event.isSet() : useis_set() .threading.Thread.isDaemon() ,threading.Thread.setDaemon() : usethreading.Thread.daemon attribute.threading.Thread.getName() ,threading.Thread.setName() : usethreading.Thread.name attribute.threading.currentThread() : usethreading.current_thread() .threading.activeCount() : usethreading.active_count() . unittest.IsolatedAsyncioTestCase : deprecated return value notNone test case.urllib.parse deprecated functions:urlparse() insteadsplitattr() splithost() splitnport() splitpasswd() splitport() splitquery() splittag() splittype() splituser() splitvalue() to_bytes() urllib.request :URLopener andFancyURLopener style invoking requests deprecated. Use newerurlopen() functions methods.wsgiref :SimpleHandler.stdout.write() partial writes.xml.etree.ElementTree : Testing truth value anElement deprecated. future release always returnTrue . Prefer explicitlen(elem) orelem None tests instead.zipimport.zipimporter.load_module() deprecated: useexec_module() instead. CPython Bytecode Changes\u00b6 oparg YIELD_VALUE now1 yield part yield-from await, and0 otherwise. oparg ofRESUME changed add bit indicating except-depth 1, needed optimize closing generators. (Contributed Irit Katriel gh-111354.) C API Changes\u00b6 New Features\u00b6 Add PyMonitoring C API generating PEP 669 monitoring events: (Contributed Irit Katriel gh-111997). Add PyMutex , lightweight mutex occupies single byte, newPyMutex_Lock() andPyMutex_Unlock() functions.PyMutex_Lock() release GIL (if currently held) operation needs block. (Contributed Sam Gross gh-108724.)Add PyTime C API provide access system clocks: PyTime_MIN andPyTime_MAX . (Contributed Victor Stinner Petr Viktorin gh-110850.) Add PyDict_ContainsString() function behavior asPyDict_Contains() , key specified const char* UTF-8 encoded bytes string, rather PyObject*. (Contributed Victor Stinner gh-108314.)Add PyDict_GetItemRef() andPyDict_GetItemStringRef() functions, behave similarly toPyDict_GetItemWithError() , return strong reference instead borrowed reference. Moreover, functions return-1 error, removing need checkPyErr_Occurred() . (Contributed Victor Stinner gh-106004.)Add PyDict_SetDefaultRef() function, behaves similarly toPyDict_SetDefault() , returns strong reference instead borrowed reference. function returns-1 error,0 insertion, and1 key already present dictionary. (Contributed Sam Gross gh-112066.)Add PyDict_Pop() andPyDict_PopString() functions remove key dictionary optionally return removed value. similar todict.pop() , though default value, andKeyError raised missing keys. (Contributed Stefan Behnel Victor Stinner gh-111262.)Add PyMapping_GetOptionalItem() andPyMapping_GetOptionalItemString() functions alternatives toPyObject_GetItem() andPyMapping_GetItemString() respectively. new functions raiseKeyError requested key missing mapping. variants convenient faster missing key treated failure. (Contributed Serhiy Storchaka gh-106307.)Add PyObject_GetOptionalAttr() andPyObject_GetOptionalAttrString() functions alternatives toPyObject_GetAttr() andPyObject_GetAttrString() respectively. new functions raiseAttributeError requested attribute found object. variants convenient faster missing attribute treated failure. (Contributed Serhiy Storchaka gh-106521.)Add PyErr_FormatUnraisable() function extension toPyErr_WriteUnraisable() allows customizing warning message. (Contributed Serhiy Storchaka gh-108082.)Add new functions return strong reference instead borrowed reference frame locals, globals, builtins, part PEP 667: (Contributed Mark Shannon Tian Gao gh-74929.) Add Py_GetConstant() andPy_GetConstantBorrowed() functions get strong borrowed references constants. example,Py_GetConstant(Py_CONSTANT_ZERO) returns strong reference constant zero. (Contributed Victor Stinner gh-115754.)Add PyImport_AddModuleRef() function replacement forPyImport_AddModule() returns strong reference instead borrowed reference. (Contributed Victor Stinner gh-105922.)Add Py_IsFinalizing() function check whether main Python interpreter shutting down. (Contributed Victor Stinner gh-108014.)Add PyList_GetItemRef() function replacement forPyList_GetItem() returns strong reference instead borrowed reference. (Contributed Sam Gross gh-114329.)Add PyList_Extend() andPyList_Clear() functions, mirroring Pythonlist.extend() andlist.clear() methods. (Contributed Victor Stinner gh-111138.)Add PyLong_AsInt() function. behaves similarly toPyLong_AsLong() , stores result C int instead C long. (Contributed Victor Stinner gh-108014.)Add PyLong_AsNativeBytes() ,PyLong_FromNativeBytes() , andPyLong_FromUnsignedNativeBytes() functions simplify converting native integer types Pythonint objects. (Contributed Steve Dower gh-111140.)Add PyModule_Add() function, similar toPyModule_AddObjectRef() andPyModule_AddObject() , always steals reference value. (Contributed Serhiy Storchaka gh-86493.)Add PyObject_GenericHash() function implements default hashing function Python object. (Contributed Serhiy Storchaka gh-113024.)Add Py_HashPointer() function hash raw pointer. (Contributed Victor Stinner gh-111545.)Add PyObject_VisitManagedDict() andPyObject_ClearManagedDict() functions. must called traverse clear functions type using thePy_TPFLAGS_MANAGED_DICT flag. pythoncapi-compat project used use functions Python 3.11 3.12. (Contributed Victor Stinner gh-107073.)Add PyRefTracer_SetTracer() andPyRefTracer_GetTracer() functions, enable tracking object creation destruction way thetracemalloc module does. (Contributed Pablo Galindo gh-93502.)Add PySys_AuditTuple() function alternative toPySys_Audit() takes event arguments Pythontuple object. (Contributed Victor Stinner gh-85283.)Add PyThreadState_GetUnchecked() function alternative toPyThreadState_Get() doesn\u2019t kill process fatal error isNULL . caller responsible checking result isNULL . (Contributed Victor Stinner gh-108867.)Add PyType_GetFullyQualifiedName() function get type\u2019s fully qualified name. module name prepended iftype.__module__ string equal either'builtins' or'__main__' . (Contributed Victor Stinner gh-111696.)Add PyType_GetModuleName() function get type\u2019s module name. equivalent getting thetype.__module__ attribute. (Contributed Eric Snow Victor Stinner gh-111696.)Add PyUnicode_EqualToUTF8AndSize() andPyUnicode_EqualToUTF8() functions compare Unicode object const char* UTF-8 encoded string and1 equal or0 otherwise. functions raise exceptions. (Contributed Serhiy Storchaka gh-110289.)Add PyWeakref_GetRef() function alternative toPyWeakref_GetObject() returns strong reference orNULL referent longer live. (Contributed Victor Stinner gh-105927.)Add fixed variants functions silently ignore errors: PyObject_HasAttrStringWithError() replacesPyObject_HasAttrString() .PyMapping_HasKeyStringWithError() replacesPyMapping_HasKeyString() . new functions return -1 errors standard1 true and0 false.(Contributed Serhiy Storchaka gh-108511.) Changed C APIs\u00b6 keywords parameter PyArg_ParseTupleAndKeywords() andPyArg_VaParseTupleAndKeywords() type char *const* C const char *const* C++, instead char**. C++, makes functions compatible arguments type const char *const*, const char**, char *const* without explicit type cast. C, functions support arguments type char *const*. overridden thePY_CXX_CONST macro. (Contributed Serhiy Storchaka gh-65210.)PyArg_ParseTupleAndKeywords() supports non-ASCII keyword parameter names. (Contributed Serhiy Storchaka gh-110815.)The PyCode_GetFirstFree() function unstable API namedPyUnstable_Code_GetFirstFree() . (Contributed Bogdan Romanyuk gh-115781.)The PyDict_GetItem() ,PyDict_GetItemString() ,PyMapping_HasKey() ,PyMapping_HasKeyString() ,PyObject_HasAttr() ,PyObject_HasAttrString() , andPySys_GetObject() functions, clears errors occurred calling reports errors usingsys.unraisablehook() . may replace functions recommended documentation. (Contributed Serhiy Storchaka gh-106672.)Add support %T ,%#T ,%N and%#N formats toPyUnicode_FromFormat() :%T : Get fully qualified name object type%#T : above, use colon separator%N : Get fully qualified name type%#N : above, use colon separator See PEP 737 information. (Contributed Victor Stinner gh-111696.) longer define PY_SSIZE_T_CLEAN macro includingPython.h using# formats format codes. APIs accepting format codes always usePy_ssize_t for# formats. (Contributed Inada Naoki gh-104922.)If Python built debug mode assertions ,PyTuple_SET_ITEM() andPyList_SET_ITEM() check index argument assertion. (Contributed Victor Stinner gh-106168.) Limited C API Changes\u00b6 following functions included Limited C API: (Contributed Victor Stinner gh-85283, gh-85283, gh-116936.) Python built --with-trace-refs (tracing references) supports Limited API. (Contributed Victor Stinner gh-108634.) Removed C APIs\u00b6 Remove several functions, macros, variables, etc names prefixed _Py or_PY (which considered private). project affected one removals believe removed API remain available, please open new issue request public C API addcc: @vstinner issue notify Victor Stinner. (Contributed Victor Stinner gh-106320.)Remove old buffer protocols deprecated Python 3.0. Use Buffer Protocol instead. PyObject_CheckReadBuffer() : UsePyObject_CheckBuffer() test whether object supports buffer protocol. Note thatPyObject_CheckBuffer() doesn\u2019t guarantee thatPyObject_GetBuffer() succeed. test object actually readable, see next example ofPyObject_GetBuffer() .PyObject_AsCharBuffer() ,PyObject_AsReadBuffer() : UsePyObject_GetBuffer() andPyBuffer_Release() instead:Py_buffer view; (PyObject_GetBuffer(obj, &view, PyBUF_SIMPLE) < 0) { return NULL; } // Use `view.buf` `view.len` read buffer. // may need cast buf `(const char*)view.buf`. PyBuffer_Release(&view); PyObject_AsWriteBuffer() : UsePyObject_GetBuffer() andPyBuffer_Release() instead:Py_buffer view; (PyObject_GetBuffer(obj, &view, PyBUF_WRITABLE) < 0) { return NULL; } // Use `view.buf` `view.len` write buffer. PyBuffer_Release(&view); (Contributed Inada Naoki gh-85275.) Remove various functions deprecated Python 3.9: PyEval_CallObject() ,PyEval_CallObjectWithKeywords() : UsePyObject_CallNoArgs() orPyObject_Call() instead.Warning PyObject_Call() , positional arguments must atuple must beNULL , keyword arguments must adict orNULL , whereas removed functions checked argument types acceptedNULL positional keyword arguments. replacePyEval_CallObjectWithKeywords(func, NULL, kwargs) withPyObject_Call() , pass empty tuple positional arguments usingPyTuple_New(0) .PyEval_CallFunction() : UsePyObject_CallFunction() instead.PyEval_CallMethod() : UsePyObject_CallMethod() instead.PyCFunction_Call() : UsePyObject_Call() instead. (Contributed Victor Stinner gh-105107.) Remove following old functions configure Python initialization, deprecated Python 3.11: PySys_AddWarnOptionUnicode() : UsePyConfig.warnoptions instead.PySys_AddWarnOption() : UsePyConfig.warnoptions instead.PySys_AddXOption() : UsePyConfig.xoptions instead.PySys_HasWarnOptions() : UsePyConfig.xoptions instead.PySys_SetPath() : SetPyConfig.module_search_paths instead.Py_SetPath() : SetPyConfig.module_search_paths instead.Py_SetStandardStreamEncoding() : SetPyConfig.stdio_encoding instead, set also maybePyConfig.legacy_windows_stdio (on Windows)._Py_SetProgramFullPath() : SetPyConfig.executable instead. Use new PyConfig API Python Initialization Configuration instead (PEP 587), added Python 3.8. (Contributed Victor Stinner gh-105145.)Remove PyEval_AcquireLock() andPyEval_ReleaseLock() functions, deprecated Python 3.2. didn\u2019t update current thread state. replaced with:low-level PyEval_AcquireThread() andPyEval_RestoreThread() ; (Contributed Victor Stinner gh-105182.) Remove PyEval_ThreadsInitialized() function, deprecated Python 3.9. Since Python 3.7,Py_Initialize() always creates GIL: callingPyEval_InitThreads() nothing andPyEval_ThreadsInitialized() always returns non-zero. (Contributed Victor Stinner gh-105182.)Remove _PyInterpreterState_Get() alias toPyInterpreterState_Get() kept backward compatibility Python 3.8. pythoncapi-compat project used getPyInterpreterState_Get() Python 3.8 older. (Contributed Victor Stinner gh-106320.)Remove private _PyObject_FastCall() function: usePyObject_Vectorcall() available since Python 3.8 (PEP 590). (Contributed Victor Stinner gh-106023.)Remove cpython/pytime.h header file, contained private functions. (Contributed Victor Stinner gh-106316.)Remove undocumented PY_TIMEOUT_MAX constant limited C API. (Contributed Victor Stinner gh-110014.)Remove old trashcan macros Py_TRASHCAN_SAFE_BEGIN andPy_TRASHCAN_SAFE_END . Replace new macrosPy_TRASHCAN_BEGIN andPy_TRASHCAN_END . (Contributed Irit Katriel gh-105111.) Deprecated C APIs\u00b6 Deprecate old Python initialization functions: PySys_ResetWarnOptions() : Clearsys.warnoptions andwarnings.filters instead.Py_GetExecPrefix() : Getsys.exec_prefix instead.Py_GetPath() : Getsys.path instead.Py_GetPrefix() : Getsys.prefix instead.Py_GetProgramFullPath() : Getsys.executable instead.Py_GetProgramName() : Getsys.executable instead.Py_GetPythonHome() : GetPyConfig.home thePYTHONHOME environment variable instead. (Contributed Victor Stinner gh-105145.) Soft deprecate PyEval_GetBuiltins() ,PyEval_GetGlobals() , andPyEval_GetLocals() functions, return borrowed reference. (Soft deprecated part PEP 667.)Deprecate PyImport_ImportModuleNoBlock() function, alias toPyImport_ImportModule() since Python 3.3. (Contributed Victor Stinner gh-105396.)Soft deprecate PyModule_AddObject() function. replaced withPyModule_Add() orPyModule_AddObjectRef() . (Contributed Serhiy Storchaka gh-86493.)Deprecate old Py_UNICODE andPY_UNICODE_TYPE types thePy_UNICODE_WIDE define. Use thewchar_t type directly instead. Since Python 3.3,Py_UNICODE andPY_UNICODE_TYPE aliases towchar_t . (Contributed Victor Stinner gh-105156.)Deprecate PyWeakref_GetObject() andPyWeakref_GET_OBJECT() functions, return borrowed reference. Replace newPyWeakref_GetRef() function, returns strong reference. pythoncapi-compat project used getPyWeakref_GetRef() Python 3.12 older. (Contributed Victor Stinner gh-105927.) Pending Removal Python 3.14\u00b6 ma_version_tag field inPyDictObject extension modules (PEP 699; gh-101193).Creating immutable types mutable bases (gh-95388).Functions configure Python\u2019s initialization, deprecated Python 3.11: PySys_SetArgvEx() : SetPyConfig.argv instead.PySys_SetArgv() : SetPyConfig.argv instead.Py_SetProgramName() : SetPyConfig.program_name instead.Py_SetPythonHome() : SetPyConfig.home instead. Py_InitializeFromConfig() API used withPyConfig instead.Global configuration variables: Py_DebugFlag : UsePyConfig.parser_debug instead.Py_VerboseFlag : UsePyConfig.verbose instead.Py_QuietFlag : UsePyConfig.quiet instead.Py_InteractiveFlag : UsePyConfig.interactive instead.Py_InspectFlag : UsePyConfig.inspect instead.Py_OptimizeFlag : UsePyConfig.optimization_level instead.Py_NoSiteFlag : UsePyConfig.site_import instead.Py_BytesWarningFlag : UsePyConfig.bytes_warning instead.Py_FrozenFlag : UsePyConfig.pathconfig_warnings instead.Py_IgnoreEnvironmentFlag : UsePyConfig.use_environment instead.Py_DontWriteBytecodeFlag : UsePyConfig.write_bytecode instead.Py_NoUserSiteDirectory : UsePyConfig.user_site_directory instead.Py_UnbufferedStdioFlag : UsePyConfig.buffered_stdio instead.Py_HashRandomizationFlag : UsePyConfig.use_hash_seed andPyConfig.hash_seed instead.Py_IsolatedFlag : UsePyConfig.isolated instead.Py_LegacyWindowsFSEncodingFlag : UsePyPreConfig.legacy_windows_fs_encoding instead.Py_LegacyWindowsStdioFlag : UsePyConfig.legacy_windows_stdio instead.Py_FileSystemDefaultEncoding : UsePyConfig.filesystem_encoding instead.Py_HasFileSystemDefaultEncoding : UsePyConfig.filesystem_encoding instead.Py_FileSystemDefaultEncodeErrors : UsePyConfig.filesystem_errors instead.Py_UTF8Mode : UsePyPreConfig.utf8_mode instead. (seePy_PreInitialize() ) Py_InitializeFromConfig() API used withPyConfig instead. Pending Removal Python 3.15\u00b6 bundled copy libmpdecimal .The PyImport_ImportModuleNoBlock() : UsePyImport_ImportModule() instead.PyWeakref_GetObject() andPyWeakref_GET_OBJECT() : UsePyWeakref_GetRef() instead.Py_UNICODE type thePy_UNICODE_WIDE macro: Usewchar_t instead.Python initialization functions: PySys_ResetWarnOptions() : Clearsys.warnoptions andwarnings.filters instead.Py_GetExecPrefix() : Getsys.base_exec_prefix andsys.exec_prefix instead.Py_GetPath() : Getsys.path instead.Py_GetPrefix() : Getsys.base_prefix andsys.prefix instead.Py_GetProgramFullPath() : Getsys.executable instead.Py_GetProgramName() : Getsys.executable instead.Py_GetPythonHome() : GetPyConfig.home thePYTHONHOME environment variable instead. Pending Removal Future Versions\u00b6 following APIs deprecated removed, although currently date scheduled removal. Py_TPFLAGS_HAVE_FINALIZE : Unneeded since Python 3.8.PyErr_Fetch() : UsePyErr_GetRaisedException() instead.PyErr_NormalizeException() : UsePyErr_GetRaisedException() instead.PyErr_Restore() : UsePyErr_SetRaisedException() instead.PyModule_GetFilename() : UsePyModule_GetFilenameObject() instead.PyOS_AfterFork() : UsePyOS_AfterFork_Child() instead.PySlice_GetIndicesEx() : UsePySlice_Unpack() andPySlice_AdjustIndices() instead.PyUnicode_AsDecodedObject() : UsePyCodec_Decode() instead.PyUnicode_AsDecodedUnicode() : UsePyCodec_Decode() instead.PyUnicode_AsEncodedObject() : UsePyCodec_Encode() instead.PyUnicode_AsEncodedUnicode() : UsePyCodec_Encode() instead.PyUnicode_READY() : Unneeded since Python 3.12PyErr_Display() : UsePyErr_DisplayException() instead._PyErr_ChainExceptions() : Use_PyErr_ChainExceptions1() instead.PyBytesObject.ob_shash member: callPyObject_Hash() instead.PyDictObject.ma_version_tag member.Thread Local Storage (TLS) API: PyThread_create_key() : UsePyThread_tss_alloc() instead.PyThread_delete_key() : UsePyThread_tss_free() instead.PyThread_set_key_value() : UsePyThread_tss_set() instead.PyThread_get_key_value() : UsePyThread_tss_get() instead.PyThread_delete_key_value() : UsePyThread_tss_delete() instead.PyThread_ReInitTLS() : Unneeded since Python 3.7. Build Changes\u00b6 arm64-apple-ios andarm64-apple-ios-simulator PEP 11 tier 3 platforms. (PEP 730 written implementation contributed Russell Keith-Magee gh-114099.)aarch64-linux-android andx86_64-linux-android PEP 11 tier 3 platforms. (PEP 738 written implementation contributed Malcolm Smith gh-116622.)wasm32-wasi PEP 11 tier 2 platform. (Contributed Brett Cannon gh-115192.)wasm32-emscripten longer PEP 11 supported platform. (Contributed Brett Cannon gh-115192.)Building CPython requires compiler support C11 atomic library, GCC built-in atomic functions, MSVC interlocked intrinsics. Autoconf 2.71 aclocal 1.16.5 required regenerate configure script. (Contributed Christian Heimes gh-89886 Victor Stinner gh-112090.)SQLite 3.15.2 newer required build sqlite3 extension module. (Contributed Erlend Aasland gh-105875.)CPython bundles mimalloc library default. licensed MIT license; see mimalloc license. bundled mimalloc custom changes, see gh-113141 details. (Contributed Dino Viehland gh-109914.) configure option--with-system-libmpdec defaults toyes . bundled copy oflibmpdecimal removed Python 3.15.Python built configure --with-trace-refs (tracing references) ABI compatible Python release build debug build. (Contributed Victor Stinner gh-108634.)On POSIX systems, pkg-config ( .pc ) filenames include ABI flags. example, free-threaded build generatespython-3.13t.pc debug build generatespython-3.13d.pc .The errno ,fcntl ,grp ,md5 ,pwd ,resource ,termios ,winsound ,_ctypes_test ,_multiprocessing.posixshmem ,_scproxy ,_stat ,_statistics ,_testconsole ,_testimportmultiple and_uuid C extensions built limited C API. (Contributed Victor Stinner gh-85283.) Porting Python 3.13\u00b6 section lists previously described changes bugfixes may require changes code. Changes Python API\u00b6 PEP 667 introduces several changes semantics locals() andf_locals :Calling locals() optimized scope produces independent snapshot call, hence longer implicitly updates previously returned references. Obtaining legacy CPython behavior requires explicit calls update initially returned dictionary results subsequent calls tolocals() . Code execution functions implicitly targetlocals() (such asexec andeval ) must passed explicit namespace access results optimized scope. (Changed part PEP 667.)Calling locals() comprehension module class scope (including viaexec oreval ) behaves comprehension running independent nested function (i.e. local variables containing scope included). Python 3.12, changed include local variables containing scope implementing PEP 709. (Changed part PEP 667.)Accessing FrameType.f_locals optimized scope returns write-through proxy rather snapshot gets updated ill-specified times. snapshot desired, must created explicitly withdict proxy\u2019s.copy() method. (Changed part PEP 667.) functools.partial emits aFutureWarning used method. behavior change future Python versions. Wrap instaticmethod() want preserve old behavior. (Contributed Serhiy Storchaka gh-121027.)An OSError raised bygetpass.getuser() failure retrieve username, instead ofImportError non-Unix platforms orKeyError Unix platforms password database empty.The value mode attribute ofgzip.GzipFile string ('rb' or'wb' ) instead integer (1 or2 ). value themode attribute readable file-like object returned byzipfile.ZipFile.open() now'rb' instead of'r' . (Contributed Serhiy Storchaka gh-115961.)mailbox.Maildir ignores files leading dot (. ). (Contributed Zackery Spytz gh-65559.)pathlib.Path.glob() andrglob() return files directories pattern ends \u201c** \u201d given, rather directories only. Add trailing slash keep previous behavior match directories.The threading module expects the_thread module an_is_main_interpreter() function. function takes arguments returnsTrue current interpreter main interpreter.Any library application provides custom _thread module must provide_is_main_interpreter() , like module\u2019s \u201cprivate\u201d attributes. (gh-112826.) Changes C API\u00b6 Python.h longer includes the<ieeefp.h> standard header. included thefinite() function provided the<math.h> header. included explicitly needed. Remove also theHAVE_IEEEFP_H macro. (Contributed Victor Stinner gh-108765.)Python.h longer includes standard header files:<time.h> ,<sys/select.h> and<sys/time.h> . needed, included explicitly. example,<time.h> provides theclock() andgmtime() functions,<sys/select.h> provides theselect() function, and<sys/time.h> provides thefutimes() ,gettimeofday() andsetitimer() functions. (Contributed Victor Stinner gh-108765.)On Windows, Python.h longer includes the<stddef.h> standard header file. needed, included explicitly. example, providesoffsetof() function, andsize_t andptrdiff_t types. Including<stddef.h> explicitly already needed platforms, theHAVE_STDDEF_H macro defined Windows. (Contributed Victor Stinner gh-108765.)If Py_LIMITED_API macro defined,Py_BUILD_CORE ,Py_BUILD_CORE_BUILTIN andPy_BUILD_CORE_MODULE macros undefined by<Python.h> . (Contributed Victor Stinner gh-85283.)The old trashcan macros Py_TRASHCAN_SAFE_BEGIN andPy_TRASHCAN_SAFE_END removed. replaced new macrosPy_TRASHCAN_BEGIN andPy_TRASHCAN_END .A tp_dealloc function old macros, as:static void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_SAFE_BEGIN(p); ... Py_TRASHCAN_SAFE_END } migrate new macros follows: static void mytype_dealloc(mytype *p) { PyObject_GC_UnTrack(p); Py_TRASHCAN_BEGIN(p, mytype_dealloc) ... Py_TRASHCAN_END } Note Py_TRASHCAN_BEGIN second argument deallocation function in. new macros added Python 3.8 old macros deprecated Python 3.11. (Contributed Irit Katriel gh-105111.) PEP 667 introduces several changes frame-related functions: effects mutating dictionary returned PyEval_GetLocals() optimized scope changed. New dict entries added way visible subsequentPyEval_GetLocals() calls frame, asPyFrame_GetLocals() ,locals() , andFrameType.f_locals longer access underlying cached dictionary. Changes made entries actual variable names names added via write-through proxy interfaces overwritten subsequent calls toPyEval_GetLocals() frame. recommended code update depends function used, refer deprecation notice function details.Calling PyFrame_GetLocals() optimized scope returns write-through proxy rather snapshot gets updated ill-specified times. snapshot desired, must created explicitly (e.g. withPyDict_Copy() ), calling newPyEval_GetFrameLocals() API.PyFrame_FastToLocals() andPyFrame_FastToLocalsWithError() longer effect. Calling functions redundant since Python 3.11, whenPyFrame_GetLocals() first introduced.PyFrame_LocalsToFast() longer effect. Calling function redundant thatPyFrame_GetLocals() returns write-through proxy optimized scopes. Regression Test Changes\u00b6 Python built configure --with-pydebug supports a-X presite=package.module command-line option. used, specifies module imported early lifecycle interpreter, beforesite.py executed. (Contributed \u0141ukasz Langa gh-110769.) Notable changes 3.13.1\u00b6 sys\u00b6 previously undocumented special function sys.getobjects() , exists specialized builds Python, may return objects interpreters one it\u2019s called in."}]