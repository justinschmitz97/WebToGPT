{
    "name": "https://tailwindcss.com",
    "url": "https://https://tailwindcss.com",
    "pages": [
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v3",
            "title": "Tailwind CSS v3.0 - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.0 is here — bringing incredible performance gains, huge workflow improvements, and a seriously ridiculous number of new features."
                },
                {
                    "type": "p",
                    "text": "For a tour of some of the coolest new features, check out the“What’s new in Tailwind CSS v3.0”video on our YouTube channel. Tailwind CSS v3.0 has got to be our most exciting release ever, including improvements like:"
                },
                {
                    "type": "list",
                    "items": [
                        "Just-in-Time, all the time— lightning fast build times, stackable variants, arbitrary value support, better browser performance, and more.",
                        "Every color out of the box—  including all of the extended palette colors like cyan, rose, fuchsia, and lime, and fifty shades ofgreygray.",
                        "Colored box shadows— for fun glow and reflection effects, and more natural shadows on colored backgrounds.",
                        "Scroll snap API— a comprehensive and composable set of utilities for CSS-only scroll snapping.",
                        "Multi-column layout— so you can finally build that online newspaper you’ve been dreaming about.",
                        "Native form control styling— make checkboxes, radio buttons, and file inputs match your brand without reinventing the wheel.",
                        "Print modifier— control how your site looks when someone prints it, right from your HTML.",
                        "Modern aspect ratio API— no more padding hacks, well unless you need to support Safari 14, which you probably do, but still.",
                        "Fancy underline styles— the missing piece to making that side-project of yours finally take off.",
                        "RTL and LTR modifiers— for complete control when building multi-directional websites.",
                        "Portrait and landscape modifiers— honestly just because they were really easy to add.",
                        "Arbitrary properties— now Tailwind supports CSS properties we’ve never even heard of.",
                        "Play CDN— the new Just-in-Time engine squeezed into a CDN script that runs right in the browser.",
                        "Tons of other utilities— including support for touch-action, will-change, flex-basis, text-indent, scroll-behavior, and more."
                    ]
                },
                {
                    "type": "p",
                    "text": "Plus a beautiful, brand-spanking newdocumentation website, loaded with improved content and examples on every page. To start playing with Tailwind CSS v3.0 today, grab the latest release from npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest postcss autoprefixer"
                },
                {
                    "type": "p",
                    "text": "…or head over toTailwind Playto try out the latest features right in the browser. Tailwind CSS v3.0 is a new major version of the framework and there are some minor breaking changes, but we’ve worked really hard to make the upgrade process as smooth as possible, and for most projects you should be able to install v3.0 without making any changes. For example,Tailwind UIis probably the biggest Tailwind project on earth and every template is totally compatible with both v2 and v3 with no changes required. For more details and step-by-step instructions on migrating to v3.0, check out theupgrade guide."
                },
                {
                    "type": "p",
                    "text": "Back in March we introduced the brand newJust-in-Time enginewhich brought huge performance gains, unlocked exciting new features likearbitrary values, and made complex variant configurations a thing of the past."
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v3.0, the new engine has gone stable and replaced the classic engine, so every Tailwind project can benefit from these improvements out of the box."
                },
                {
                    "type": "p",
                    "text": "Before the new engine, we always had to be careful with CSS file size in development, and one of the biggest trade-offs we had to make was carefully limiting the color palette. In v3.0, every single color in the extended color palette is enabled by default, including lime, cyan, sky, fuchsia, rose, and fifty shades of gray. Check out thecolor palette referenceto learn more."
                },
                {
                    "type": "p",
                    "text": "People have been asking us for colored shadows for years, but supporting it in a composable way that actually made sense was way harder than I expected it to be. After about five false starts, we finally figured out an approach we liked, and now Tailwind CSS v3.0 includes colored shadows:"
                },
                {
                    "type": "p",
                    "text": "shadow-cyan-500/50"
                },
                {
                    "type": "p",
                    "text": "shadow-blue-500/50"
                },
                {
                    "type": "p",
                    "text": "shadow-indigo-500/50"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-cyan-500shadow-lg shadow-cyan-500/50...\">Subscribe</button><buttonclass=\"bg-blue-500shadow-lg shadow-blue-500/50...\">Subscribe</button><buttonclass=\"bg-indigo-500shadow-lg shadow-indigo-500/50...\">Subscribe</button>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theBox Shadow Colordocumentation."
                },
                {
                    "type": "p",
                    "text": "We’ve added a comprehensive set of utilities for the CSS Scroll Snap module, giving you the power to build very rich scroll snapping experiences directly in your HTML:"
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "p",
                    "text": "Start with the newScroll Marginutilities and work your way through the whole API to learn more."
                },
                {
                    "type": "p",
                    "text": "We’ve added support forcolumns— the newspaper layout kind. These are actually super useful, and are great for things like footer navigation layouts too."
                },
                {
                    "type": "p",
                    "text": "Expedita quo ea quod laborum ullam ipsum enim. Deleniti commodi et. Nam id laborum placeat natus eum. Aliquid aut aut soluta nesciunt culpa magni. Velit possimus autem et aut repudiandae culpa rerum. Qui blanditiis ut qui quia expedita necessitatibus sed. Autem sed ut saepe doloremque aut placeat voluptas ipsum. Eligendi error nisi recusandae velit numquam nihil aperiam enim. Eum et molestias. Id qui cum veritatis id ea quidem ea rerum saepe. Iste itaque fugiat sequi. Voluptatem quae minus. Maxime ullam ea praesentium recusandae vero est quas. Quia minima fugiat aut laborum impedit facere autem sit qui. Et eos et ullam necessitatibus. Ut voluptatem saepe natus itaque maiores sit repellat aut natus assumenda. Blanditiis ipsa officia dolores exercitationem nemo beatae voluptatem eos rerum velit asperiores. Non quisquam accusantium officia nisi eius necessitatibus. Quaerat quia ad voluptatem laudantium natus. Aut ipsa et numquam delectus aliquam. Recusandae libero consequatur dolorum. Animi culpa rerum molestiae ut non et molestias aliquid aut nemo. Sint dolorem dolorem. Iure dolorum amet ea sit perferendis. Et illum ut officia nisi commodi. Quia et mollitia possimus modi. Delectus aliquid quam eos consectetur. Accusantium et et qui non sed modi. Corrupti deserunt culpa eos vitae neque aperiam. Repellat tenetur fugit. Deleniti distinctio ad corrupti nisi. Mollitia qui est natus cumque. Officia dolor qui perferendis necessitatibus saepe excepturi asperiores quos voluptas. Est suscipit facere nihil expedita suscipit quibusdam. Quod cupiditate vero distinctio. Sed est soluta nostrum magnam et saepe blanditiis aut. Vero dolores repellendus et libero minima explicabo provident. Culpa aut dolorem est."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-1sm:columns-3...\"><p>...</p><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more in thecolumnsdocumentation — and check out the newbreak-after/inside/beforeutilities as well."
                },
                {
                    "type": "p",
                    "text": "We’ve added support for the new accent-color property, as well as a modifier for styling file input buttons to make it easier than ever to put your own touch on native form controls:"
                },
                {
                    "type": "code",
                    "code": "<form><divclass=\"flex items-center space-x-6\"><divclass=\"shrink-0\"><imgclass=\"h-16 w-16 object-cover rounded-full\"src=\"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1361&q=80\"alt=\"Current profile photo\"/></div><labelclass=\"block\"><spanclass=\"sr-only\">Choose profile photo</span><inputtype=\"file\"class=\"block w-full text-sm text-slate-500file:mr-4file:py-2file:px-4file:rounded-fullfile:border-0file:text-smfile:font-semiboldfile:bg-violet-50file:text-violet-700hover:file:bg-violet-100\"/></label></div><labelclass=\"mt-6 flex items-center justify-center space-x-2 text-sm font-medium text-slate-600\"><inputtype=\"checkbox\"class=\"accent-violet-500\"checked/><span>Yes, send me all your stupid updates</span></label></form>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theaccent colorandfile input buttonsdocumentation."
                },
                {
                    "type": "p",
                    "text": "The newprintmodifier lets you style how your site should look whenanimalspeople print it:"
                },
                {
                    "type": "code",
                    "code": "<div><articleclass=\"print:hidden\"><h1>My Secret Pizza Recipe</h1><p>This recipe is a secret, and must not be shared with anyone</p><!-- ... --></article><divclass=\"hiddenprint:block\">Are you seriously trying to print this? It's secret!</div></div>"
                },
                {
                    "type": "p",
                    "text": "I’d say “learn more in theprint stylesdocumentation” but it wouldn’t be true."
                },
                {
                    "type": "p",
                    "text": "We’ve added support for the new nativeaspect-ratioproperty, which is starting to see solid browser support:"
                },
                {
                    "type": "code",
                    "code": "<iframeclass=\"w-fullaspect-video...\"src=\"https://www.youtube.com/...\"></iframe>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theaspect ratiodocumentation."
                },
                {
                    "type": "p",
                    "text": "Now you can change underline colors, thickness, and more:"
                },
                {
                    "type": "p",
                    "text": "I’m Derek, an astro-engineer based in Tatooine. I like to build X-Wings atMy Company, Inc. Outside of work, I like towatch pod-racingand havelight-saberfights."
                },
                {
                    "type": "code",
                    "code": "<p>I’m Derek, an astro-engineer based in Tatooine. I like to build X-Wings at<ahref=\"#\"class=\"underlinedecoration-sky-500 decoration-2\">My Company, Inc</a>. Outside of work, I\n  like to<ahref=\"#\"class=\"underlinedecoration-pink-500 decoration-dotted decoration-2\">watch pod-racing</a>and have<ahref=\"#\"class=\"underlinedecoration-indigo-500 decoration-wavy decoration-2\">light-saber</a>fights.</p>"
                },
                {
                    "type": "p",
                    "text": "Learn more in thetext decoration color,text decoration style,text decoration thickness, andtext underline offsetdocumentation."
                },
                {
                    "type": "p",
                    "text": "We’ve added experimental support for multi-directional layouts with newrtlandltrmodifiers:"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Tom Cook Director of Operations"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "p",
                    "text": "تامر كرم الرئيس التنفيذي"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-700 group-hover:text-slate-900\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-700\">...</p></div></div><divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-300 group-hover:text-white\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-300\">...</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theRTL supportdocumentation."
                },
                {
                    "type": "p",
                    "text": "Use the newportraitandlandscapemodifiers to conditionally add styles when the viewport is in a specific orientation:"
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"portrait:hidden\"><!-- ... --></div><divclass=\"landscape:hidden\"><p>This experience is designed to be viewed in landscape. Please rotate your\n      device to view the site.</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "Thedocumentation for this featurehas even less content than this section of this post does."
                },
                {
                    "type": "p",
                    "text": "This might be illegal but we’ve made it possible to add totally arbitrary CSS that you can combine with modifiers likehover,lg, and whatever else:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[mask-type:luminance] hover:[mask-type:alpha]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is what inline styles want to be when they grow up. Learn more in thearbitrary propertiesdocumentation."
                },
                {
                    "type": "p",
                    "text": "There’s no way to make a sensible CSS-based CDN build for Tailwind CSS v3.0 so we had to do something different — we built a JavaScript library."
                },
                {
                    "type": "code",
                    "code": "<!DOCTYPEhtml><htmllang=\"en\"><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"/><title>Example</title><scriptsrc=\"https://cdn.tailwindcss.com/\"></script></head><body><!-- --></body></html>"
                },
                {
                    "type": "p",
                    "text": "Add that script tag to any HTML document and you can use every Tailwind feature, right in the browser. It’s meant for development purposes only, but it sure is a fun way to build little demos or hack on a new idea. Learn more in thePlay CDNdocumentation."
                },
                {
                    "type": "p",
                    "text": "So there it is — Tailwind CSS v3.0! Head over to the newdocumentation siteto get started with it today. For a comprehensive list of every single change, check out thechangelogon GitHub."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v3-1",
            "title": "Tailwind CSS v3.1: You wanna get nuts? Come on, let's get nuts! - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "It’s been about six months since we releasedTailwind CSS v3.0, and even though we’ve been collecting a lot of little improvements in the codebase since then, we just didn’t havethat-one-featureyet that makes you say“okay, it’s release-cuttin’ time”."
                },
                {
                    "type": "p",
                    "text": "Then on a random Saturday night a couple of weeks ago, I was talking to Robin in our Discord about coming up with a way to target thehtmlelement using:hasand a class deeper in the document, and explained how I thought it would look if we added support for arbitrary variants — something I’ve wanted to tackle for over a year:"
                },
                {
                    "type": "p",
                    "text": "Twenty minutes later Robin had a working proof of concept(in six lines of code!), and after another hour or so of Jordan performing regex miracles in our class detection engine,arbitrary variantswere born and we had our release-worthy feature. So here it is — Tailwind CSS v3.1! For a complete list of every fix and improvement check out therelease notes, but here’s the highlights:"
                },
                {
                    "type": "list",
                    "items": [
                        "First-party TypeScript types",
                        "Built-in support for CSS imports in the CLI",
                        "Change color opacity when using the theme function",
                        "Easier CSS variable color configuration",
                        "Border spacing utilities",
                        "Enabled and optional variants",
                        "Prefers-contrast variants",
                        "Style native dialog backdrops",
                        "Arbitrary values but for variants"
                    ]
                },
                {
                    "type": "p",
                    "text": "Upgrade your projects by installing the latest version oftailwindcssfrom npm:"
                },
                {
                    "type": "code",
                    "code": "npminstalltailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "Or spin up aTailwind Playto play around with all of the new goodies right in the browser."
                },
                {
                    "type": "p",
                    "text": "We’re now shipping types for all of our JS APIs you work with when using Tailwind, most notably thetailwind.config.jsfile. This means you get all sorts of useful IDE support, and makes it a lot easier to make changes to your configuration without referencing the documentation quite as much. To set it up, just add the type annotation above your config definition:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[// ...],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "If you’re a big TypeScript nerd you might enjoy poking around the actualtype definitions— lots of interesting stuff going on there to support such a potentially complex object."
                },
                {
                    "type": "p",
                    "text": "If you’re using our CLI tool to compile your CSS,postcss-importis now baked right in so you can organize your custom CSS into multiple files without any additional configuration."
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss/base\";@import\"./select2-theme.css\";@import\"tailwindcss/components\";@import\"tailwindcss/utilities\";"
                },
                {
                    "type": "p",
                    "text": "If you’re not using our CLI tool and instead using Tailwind as a PostCSS plugin, you’ll still need to install and configurepostcss-importyourself just like you do withautoprefixer, but if youareusing our CLI tool this will totally just work now. This is especially handy if you’re using ourstandalone CLIand don’t want to install any node dependencies at all."
                },
                {
                    "type": "p",
                    "text": "I don’t think tons of people know about this, but Tailwind exposes atheme()functionto your CSS files that lets you grab values from your config file — sort of turning them into variables that you can reuse."
                },
                {
                    "type": "code",
                    "code": ".select2-dropdown{border-radius:theme(borderRadius.lg);background-color:theme(colors.gray.100);color:theme(colors.gray.900);}/* ... */"
                },
                {
                    "type": "p",
                    "text": "One limitation though was that you couldn’t adjust the alpha channel any colors you grabbed this way. So in v3.1 we’ve added support for using a slash syntax to adjust the opacity, like you can with the modernrgbandhslCSS color functions:"
                },
                {
                    "type": "code",
                    "code": ".select2-dropdown{border-radius:theme(borderRadius.lg);background-color:theme(colors.gray.100/50%);color:theme(colors.gray.900);}/* ... */"
                },
                {
                    "type": "p",
                    "text": "We’ve made this work with thethemefunction in yourtailwind.config.jsfile, too:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:[// ...],theme:{extend:{colors:({theme})=>({primary:theme('colors.blue.500'),'primary-fade':theme('colors.blue.500 / 75%'),})},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "You can even use this stuff in arbitrary values which is pretty wild — honestly surprisingly useful for weird custom gradients and stuff:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[image:linear-gradient(to_right,theme(colors.red.500)_75%,theme(colors.red.500/25%))]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Anything to avoid editing a CSS file am I right?"
                },
                {
                    "type": "p",
                    "text": "If you like to define and configure your colors as CSS variables, you probably have some horrible boilerplate like this in yourtailwind.config.jsfile right now:"
                },
                {
                    "type": "code",
                    "code": "functionwithOpacityValue(variable){return({opacityValue})=>{if(opacityValue===undefined){return`rgb(var(${variable}))`}return`rgb(var(${variable}) /${opacityValue})`}}module.exports={theme:{colors:{primary:withOpacityValue('--color-primary'),secondary:withOpacityValue('--color-secondary'),// ...}}}"
                },
                {
                    "type": "p",
                    "text": "We’ve made this way less awful in v3.1 by adding support for defining your colors with a format string instead of having to use a function:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{colors:{primary:'rgb(var(--color-primary) / <alpha-value>)',secondary:'rgb(var(--color-secondary) / <alpha-value>)',// ...}}}"
                },
                {
                    "type": "p",
                    "text": "Instead of writing a function that receives thatopacityValueargument, you can just write a string with an<alpha-value>placeholder, and Tailwind will replace that placeholder with the correct alpha value based on the utility. If you haven’t seen any of this before, check out our updatedUsing CSS variablesdocumentation for more details."
                },
                {
                    "type": "p",
                    "text": "We’ve added new set of utilities for theborder-spacingproperty, so you can control the space between table borders when usingseparate borders:"
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"border-separateborder-spacing-2...\"><thead><tr><thclass=\"border border-slate-300 ...\">State</th><thclass=\"border border-slate-300 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-300 ...\">Indiana</td><tdclass=\"border border-slate-300 ...\">Indianapolis</td></tr><!-- ... --></tbody></table><tableclass=\"border-separateborder-spacing-2...\"><thead><tr><thclass=\"border border-slate-600 ...\">State</th><thclass=\"border border-slate-600 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-700 ...\">Indiana</td><tdclass=\"border border-slate-700 ...\">Indianapolis</td></tr><!-- ... --></tbody></table>"
                },
                {
                    "type": "p",
                    "text": "I know what you’re thinking —“I have never in my life wanted to build a table that looks like that…”— but listen for a second! One situation where this is actually super useful is when building a table with a sticky header row and you want a persistent bottom border under the headings:"
                },
                {
                    "type": "p",
                    "text": "Scroll this table to see the sticky header row in action"
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"border-separate border-spacing-0\"><theadclass=\"bg-gray-50\"><tr><thclass=\"sticky top-0 z-10 border-b border-gray-300 ...\">Name</th><thclass=\"sticky top-0 z-10 border-b border-gray-300 ...\">Email</th><thclass=\"sticky top-0 z-10 border-b border-gray-300 ...\">Role</th></tr></thead><tbodyclass=\"bg-white\"><tr><tdclass=\"border-b border-gray-200 ...\">Courtney Henry</td><tdclass=\"border-b border-gray-200 ...\">courtney.henry@example.com</td><tdclass=\"border-b border-gray-200 ...\">Admin</td></tr><!-- ... --></tbody></table>"
                },
                {
                    "type": "p",
                    "text": "You might think you could just useborder-collapsehere since you actually don’t want any space between the borders but you’d be mistaken. Withoutborder-separateandborder-spacing-0, the border will scroll away instead of sticking under the headings. CSS is fun isn’t it? Check out theborder spacing documentationfor some more details."
                },
                {
                    "type": "p",
                    "text": "We’ve added new variants for the:enabledand:optionalpseudo-classes, which target form elements when they are, well, enabled and optional. “But Adam why would I ever need these, enabled and optional aren’t even states, they are the defaults. Do you even make websites?” Ouch, that hurts because it’s true — I pretty much just write emails and answer the same questions over and over again on GitHub now. But check out this disabled button example:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-500 hover:bg-indigo-400 disabled:opacity-75 ...\"disabled>Processing...</button>"
                },
                {
                    "type": "p",
                    "text": "Notice how when you hover over the button, the background still changes color even though it’s disabled? Before this release, you’d usually fix that like this:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"disabled:hover:bg-indigo-500bg-indigo-500 hover:bg-indigo-400 disabled:opacity-75  ...\"disabled>Processing...</button>"
                },
                {
                    "type": "p",
                    "text": "But with the newenabledmodifier, you can write it like this instead:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-500hover:enabled:bg-indigo-400disabled:opacity-75  ...\"disabled>Processing...</button>"
                },
                {
                    "type": "p",
                    "text": "Instead of overriding the hover color back to the default color when the button is disabled, we combine thehoverandenabledvariants to just not apply the hover styles when the button is disabled in the first place. I think that’s better! Here’s an example combining the newoptionalmodifier with oursibling state featuresto hide a little “Required” notice for fields that aren’t required:"
                },
                {
                    "type": "code",
                    "code": "<form><div><labelfor=\"email\"...>Email</label><div><inputrequiredclass=\"peer ...\"id=\"email\"/><divclass=\"peer-optional:hidden...\">Required</div></div></div><div><labelfor=\"name\"...>Name</label><div><inputclass=\"peer ...\"id=\"name\"/><divclass=\"peer-optional:hidden...\">Required</div></div></div><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "This lets you use the same markup for all of your form groups and letting CSS handle all of the conditional rendering for you instead of handling it yourself. Kinda neat!"
                },
                {
                    "type": "p",
                    "text": "Did you know there’s aprefers-contrastmedia query? Well there is, and now Tailwind supports it out of the box. Use the newcontrast-moreandcontrast-lessvariants to modify your design when the user has requested more or less contrast, usually through an operating system accessibility preference like “Increase contrast” on macOS."
                },
                {
                    "type": "p",
                    "text": "Try emulating `prefers-contrast: more` in your developer tools to see the changes"
                },
                {
                    "type": "p",
                    "text": "We need this to steal your identity."
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Social Security Number</span><inputclass=\"border-slate-200 placeholder-slate-400contrast-more:border-slate-400contrast-more:placeholder-slate-500\"/><pclass=\"mt-2 opacity-10contrast-more:opacity-100text-slate-600 text-sm\">We need this to steal your identity.</p></label></form>"
                },
                {
                    "type": "p",
                    "text": "I wrotesome documentationfor this but honestly I wrote more here than I did there."
                },
                {
                    "type": "p",
                    "text": "There’s a pretty newHTML<dialog>elementwith surprisingly decentbrowser supportthat is worth playing with if you like to live on the bleeding edge. Dialogs have this new::backdroppseudo-element that’s rendered while the dialog is open, and Tailwind CSS v3.1 adds a newbackdropmodifier you can use to style this baby:"
                },
                {
                    "type": "code",
                    "code": "<dialogclass=\"backdrop:bg-slate-900/50 ...\"><formmethod=\"dialog\"><!-- ... --><buttonvalue=\"cancel\">Cancel</button><button>Submit</button></form></dialog>"
                },
                {
                    "type": "p",
                    "text": "I recommend reading theMDN Dialog documentationif you want to dig in to this thing more — it’s exciting stuff but there’s a lot to know."
                },
                {
                    "type": "p",
                    "text": "Okay so this one is the real highlight for me — you know how we give you theaddVariantAPIfor creating your own custom variants?"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addVariant}){addVariant('third','&:nth-child(3)')})]}"
                },
                {
                    "type": "p",
                    "text": "…and you know how we havearbitrary valuesfor using any value you want with a utility directly in your HTML?"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-[117px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Well Tailwind CSS v3.1 introducesarbitrary variants, letting you create your own ad hoc variants directly in your HTML:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[&:nth-child(3)]:py-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is super useful for variants that sort of feel like they need to be parameterized, for example adding a style if the browser supports a specific CSS feature using a@supportsquery:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-white[@supports(backdrop-filter:blur(0))]:bg-white/50[@supports(backdrop-filter:blur(0))]:backdrop-blur\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can even use this feature to target child elements with arbitrary variants like[&>*]:"
                },
                {
                    "type": "list",
                    "items": [
                        "Kristen Ramoskristen.ramos@example.com",
                        "Floyd Milesfloyd.miles@example.com",
                        "Courtney Henrycourtney.henry@example.com"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"[&>*]:p-4[&>*]:bg-white[&>*]:rounded-lg[&>*]:shadowspace-y-4\"><liclass=\"flex\"><imgclass=\"h-10 w-10 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ml-3 overflow-hidden\"><pclass=\"text-sm font-medium text-slate-900\">Kristen Ramos</p><pclass=\"text-sm text-slate-500 truncate\">kristen.ramos@example.com</p></div></li><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "You can even style the firstpinside thedivin the second childlibut only onhover:"
                },
                {
                    "type": "p",
                    "text": "Try hovering over the text “Floyd Miles”"
                },
                {
                    "type": "list",
                    "items": [
                        "Kristen Ramoskristen.ramos@example.com",
                        "Floyd Milesfloyd.miles@example.com",
                        "Courtney Henrycourtney.henry@example.com"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"hover:[&>li:nth-child(2)>div>p:first-child]:text-indigo-500[&>*]:p-4 [&>*]:bg-white [&>*]:rounded-lg [&>*]:shadow space-y-4\"><!-- ... --><liclass=\"flex\"><imgclass=\"h-10 w-10 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ml-3 overflow-hidden\"><pclass=\"text-sm font-medium text-slate-900\">Floyd Miles</p><pclass=\"text-sm text-slate-500 truncate\">floyd.miles@example.com</p></div></li><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "Nowshouldyou do this? Probably not very often, but honestly it can be a pretty useful escape hatch when trying to style HTML you can’t directly change. It’s a sharp knife, but the best chefs aren’t preparing food with safety scissors. Play with them a bit and I’ll bet you find they are a great tool when the situation calls for it. We’re using them in a couple of tricky spots in these new website templates we’re working on and the experience is much nicer than creating a custom class."
                },
                {
                    "type": "p",
                    "text": "So that’s Tailwind CSS v3.1! It’s only a minor version change, so there are no breaking changes and you should be able to update your project by just installing the latest version:"
                },
                {
                    "type": "code",
                    "code": "npminstalltailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "For the complete list of changes including bug fixes and a few minor improvements I didn’t talk about here, dig in to therelease noteson GitHub. I’ve already got a bunch of ideas for Tailwind CSS v3.2(maybe even text shadows finally?!), but right now we’re working hard to push these newwebsite templatesover the finish line. Look for another update on that topic in the next week or two!"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v3-2",
            "title": "Tailwind CSS v3.2: Dynamic breakpoints, multi-config, and container queries, oh my! - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "Well it’s that time again! The time where we quickly go from“I really have no idea what we could even add to a new Tailwind release”to“wow, well this is actually a ridiculous amount of new stuff — we better tag a release before things get completely out of hand”."
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.2 is here with an absolutelymassiveamount of new stuff, including support for dynamic breakpoints, multiple config files in a single project, nested groups, parameterized variants, container queries, and more. As always check out therelease notesfor every nitty-gritty fix and improvement, but here’s the highlight reel:"
                },
                {
                    "type": "list",
                    "items": [
                        "Multiple config files in one project using@config",
                        "Browser-support-based styling withsupports-*",
                        "ARIA attribute variants",
                        "Data attribute variants",
                        "Max-width and dynamic breakpoints",
                        "Dynamicgroup-*andpeer-*variants",
                        "Dynamic variants withmatchVariant",
                        "Nestedgroupand multiplepeersupport using variant modifiers",
                        "Container queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "Upgrade your projects by installing the latest version oftailwindcssfrom npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "Or play with the new features inTailwind Playwhere you can try everything out instantly, right in the browser."
                },
                {
                    "type": "p",
                    "text": "We’ve added a new@configdirective that you can use in a CSS file to specify which Tailwind CSS config to use for that file:"
                },
                {
                    "type": "code",
                    "code": "@config\"./tailwind.admin.config.js\";@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "This makes it a lot easier to build multiple stylesheets in a single project that have separate Tailwind configurations. For example, you might have one config file for the customer-facing part of your site, and another config for the admin/backend area. You’ve always technically been able to do this with enough webpack wizardry, but the new@configdirective makes it super easy and accessible to everyone, even in projects where you don’t have as much control over the build tool configuration."
                },
                {
                    "type": "p",
                    "text": "You can now conditionally style things based on whether a certain feature is supported in the user’s browser with thesupports-[...]variant, which generates@supports rulesunder the hood."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexsupports-[display:grid]:grid...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Thesupports-[...]variant takes anything you’d use with@supports (...)between the square brackets, like a property/value pair, and even expressions usingandandor. If you only need to check if a property itself is supported, you can even just specify the property name and Tailwind will fill in the blanks for you:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-black/75supports-[backdrop-filter]:bg-black/25supports-[backdrop-filter]:backdrop-blur...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can now conditionally style things based onARIA attributeswith the newaria-*variants. For example, you can update the background color of an element based on whether thearia-checkedstate istrue:"
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"bg-gray-600aria-checked:bg-blue-600\"aria-checked=\"true\"role=\"checkbox\"><!-- ... --></span>"
                },
                {
                    "type": "p",
                    "text": "By default we’ve included modifiers for the most common boolean ARIA attributes:"
                },
                {
                    "type": "p",
                    "text": "You can customize whicharia-*modifiers are available by editingtheme.ariaortheme.extend.ariain yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{aria:{asc:'sort=\"ascending\"',desc:'sort=\"descending\"',},},},};"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offariamodifier that doesn’t make sense to include in your theme, or for more complex ARIA attributes that take specific values, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')]aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]\">Invoice #</th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "ARIA state modifiers can also target parent and sibling elements using thegroup-aria-*andpeer-aria-*modifiers:"
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"group\">Invoice #<svgclass=\"group-aria-[sort=ascending]:rotate-0group-aria-[sort=descending]:rotate-180\"><!-- ... --></svg></th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "You can now conditionally style things based ondata attributeswith the newdata-*variants. Since there are no standarddata-*attributes by definition, we only support arbitrary values out of the box, for example:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will apply --><divdata-size=\"large\"class=\"data-[size=large]:p-8\"><!-- ... --></div><!-- Will not apply --><divdata-size=\"medium\"class=\"data-[size=large]:p-8\"><!-- ... --></div><!-- Generated CSS --><style>.data-\\[size\\=large\\]\\:p-8[data-size=\"large\"]{padding:2rem;}</style>"
                },
                {
                    "type": "p",
                    "text": "You can configure shortcuts for common data attribute selectors you’re using in your project under thedatakey in thethemesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{data:{checked:'ui~=\"checked\"',},},// ...};"
                },
                {
                    "type": "code",
                    "code": "<divdata-ui=\"checked active\"class=\"data-checked:underline\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "These variants also work asgroup-*andpeer-*variants like many other variants in the framework:"
                },
                {
                    "type": "code",
                    "code": "<divdata-size=\"large\"class=\"group\"><divclass=\"group-data-[size=large]:p-8\"><!-- Will apply `p-8` --></div></div><divdata-size=\"medium\"class=\"group\"><divclass=\"group-data-[size=large]:p-8\"><!-- Will not apply `p-8` --></div></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve added a newmax-*variant that lets you apply max-width media queries based on your configured breakpoints:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-lg:p-8\"><!-- Will apply `p-8` until the `lg` breakpoint kicks in --></div>"
                },
                {
                    "type": "p",
                    "text": "As a general rule I would still recommend using min-width breakpoints personally, but this feature does unlock one useful workflow benefit which is not having toundosome style at a different breakpoint. For example, without this feature you often end up doing things like this:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:sr-only xl:not-sr-only\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "With this feature, you can avoid undoing that style by stacking amax-*variant on the original declaration:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:max-xl:sr-only\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Along with this, we’ve added support for arbitrary values, and a newmin-*variant that only accepts arbitrary values, so you can do things like this:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"min-[712px]:max-[877px]:right-16 ...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "It’s important to note thatthese features will only be available if your project uses a simplescreensconfiguration. These features are a lot more complicated than they look due to needing to ensure that all of these media queries are sorted in the final CSS in a way that gives you the expected behavior in the browser. So for now, they will only work if yourscreensconfiguration is a simple object with string values, like the default configuration:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{screens:{sm:\"640px\",md:\"768px\",lg:\"1024px\",xl:\"1280px\",\"2xl\":\"1536px\",},},};"
                },
                {
                    "type": "p",
                    "text": "If you have a complex configuration where you already havemax-widthbreakpoints defined, or range-based media queries, oranythingother than just strings, these features won’t be available. We might be able to figure that out in the future but it just creates so many questions about how the CSS should be ordered that we don’t have answers for yet. So for now (and possibly forever), if you want to use these features, yourscreensconfiguration needs to be simple. My hope is that these features make complexscreensconfigurations unnecessary anyways."
                },
                {
                    "type": "p",
                    "text": "It’s now possible to create customgroup-*andpeer-*variants on the fly by passing your own selector to be “groupified” or “peerified” between square brackets:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group is-published\"><divclass=\"hiddengroup-[.is-published]:block\">Published</div></div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can use the&character to mark where.groupor.peershould end up in the final selector relative to the selector you are passing in:"
                },
                {
                    "type": "code",
                    "code": "<div><inputtype=\"text\"class=\"peer\"/><divclass=\"hiddenpeer-[:nth-of-type(3)_&]:block\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "Let’s be serious you’re probably going to use these features like three times in your entire life but it’s still pretty cool. Hoping we can use this as a building block to makegroupandpeerwork more automatically with variants registered by third-party plugins in the future."
                },
                {
                    "type": "p",
                    "text": "You’ve probably noticed this newvariant-[...]syntax in a lot of these new features — this is all powered by a newmatchVariantplugin API that makes it possible to create what we’re calling “dynamic variants”. Here’s an example of creating aplacement-*variant for some imaginary tooltip library that uses adata-placementattribute to tell you where the tooltip is currently positioned:"
                },
                {
                    "type": "code",
                    "code": "letplugin=require(\"tailwindcss/plugin\");module.exports={// ...plugins:[plugin(function({matchVariant}){matchVariant(\"placement\",(value)=>{return`&[data-placement=${value}]`;},{values:{t:\"top\",r:\"right\",b:\"bottom\",l:\"left\",},});}),],};"
                },
                {
                    "type": "p",
                    "text": "The variant defined above would give you variants likeplacement-tandplacement-b, but would also support the arbitrary portion in square brackets, so if this imaginary tooltip library had other potential values that you didn’t feel the need to create built-in values for, you could still do stuff like this:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"placement-[top-start]:mb-2 ...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "When defining a custom variant with this API, it’s often important that you have some control over which order the CSS is generated in to make sure each class has the right precedence with respect to other values that come from the same variant. To support this, there’s asortfunction you can provide when defining your variant:"
                },
                {
                    "type": "code",
                    "code": "matchVariant(\"min\",(value)=>`@media (min-width:${value})`,{sort(a,z){returnparseInt(a)-parseInt(z);},});"
                },
                {
                    "type": "p",
                    "text": "Sometimes you can run into problems when you have multiplegroupchunks nested within each other because Tailwind has no real way to disambiguate between them. To solve this, we’re adding support forvariant modifiers, which are a new dynamic chunk that you can add to the end of a variant (inspired by our optional opacity modifier syntax) that you can use to give each group/peer your own identifier. Here’s what it looks like:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group/sidebar...\"><!-- ... --><divclass=\"group/navitem...\"><ahref=\"#\"class=\"opacity-50group-hover/sidebar:opacity-75group-hover/navitem:bg-black/75\"><!-- ... --></a></div><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This lets you give each group a clear name that makes sense for that context on the fly, and Tailwind will generate the necessary CSS to make it work. I’m really excited to have a solution out there for this because it’s something I’ve been trying to land on a good approach for solving for several years, and this is the first thing we’ve come up with that really feels like it offers the power and flexibility I think it should."
                },
                {
                    "type": "p",
                    "text": "I can barely believe it butcontainer queriesare finally real and the browser support is dangerously close to making these ready for production — in fact if you’re building anElectronapp you could use these today. Today we’re releasing@tailwindcss/container-querieswhich is a new first-party plugin that adds container query support to the framework, using a new@syntax to differentiate them from normal media queries:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"@container\"><divclass=\"block @lg:flex\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "Out-of-the-box we include a set of container sizes that match our defaultmax-widthscale:"
                },
                {
                    "type": "p",
                    "text": "You can configure which values are available using thecontainerskey in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{extend:{containers:{2xs:'16rem',// etc...},},},}"
                },
                {
                    "type": "p",
                    "text": "We also include support for arbitrary values, using the@[...]syntax:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"@container\"><divclass=\"block @[618px]:flex\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "…and named containers using the same variant modifier syntax we’re now shipping forgroup-*andpeer-*variants:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"@container/main\"><!-- ... --><div><divclass=\"block @lg/main:flex\"><!-- ... --></div></div></div>"
                },
                {
                    "type": "p",
                    "text": "Right now we’re starting with simplemin-widthbased container queries, but we plan to expand the scope over time, and when it feels like we’ve really nailed the APIs we’ll bring it all into core. For complete documentation, check out the pluginon GitHub."
                },
                {
                    "type": "p",
                    "text": "So there you have it — Tailwind CSS v3.2! Major improvements but just a minor version change, so no breaking changes and you should be able to update your project by just updating your dependency:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "Yeah I hear you in the back, still no text shadows, but hey at least you can style the sibling of a checkbox when the checkbox’s parent is the third child in a list without leaving your HTML. Priorities people."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v3-3",
            "title": "Tailwind CSS v3.3: Extended color palette, ESM/TS support, logical properties, and more - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.3 is here — bringing a bunch of new features people have been asking for forever, and a bunch of new stuff you didn’t even know you wanted."
                },
                {
                    "type": "list",
                    "items": [
                        "Extended color palette for darker darks:New darker 950 shades for every color.",
                        "ESM and TypeScript support:Write your config file using ESM or TypeScript.",
                        "Simplified RTL support with logical properties:Build layouts that adapt to different directions.",
                        "Fine-tune gradient color stop positions:Specify exactly where you want each color stop to go.",
                        "Line-clamp out of the box:Truncate multi-line text without a plugin.",
                        "New line-height modifier:Set your font-size and line-height with one class.",
                        "CSS variables without the var(): New shorthand syntax for arbitrary values.",
                        "Configurablefont-variation-settings:Baked directly into yourfont-*utilities.",
                        "Newlist-style-imageutilities:So you can use horrible clip art for bullet points.",
                        "Newhyphensutilities:For fine-tuning hyphenation behavior.",
                        "Newcaption-sideutilities:Title your tables with style."
                    ]
                },
                {
                    "type": "p",
                    "text": "That covers the most exciting stuff, but check out therelease notesfor an exhaustive list of every single little improvement we’ve made since the last release. Upgrading your projects is as easy as installing the latest version oftailwindcssfrom npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "You can also try out all of the new features onTailwind Play, right in your browser."
                },
                {
                    "type": "p",
                    "text": "One of the most common feature requests we’ve had over the years is to add darker shades for every color — usually because someone is building a dark UI and just wants more options down in that dark end of the spectrum. Well wish granted — in Tailwind CSS v3.3 we’ve added a new950shade for every single color. In the grays they act as basically a tinted black, which is great for ultra dark UIs:"
                },
                {
                    "type": "p",
                    "text": "And in the rest of the color spectrum we optimized950for high contrast text and tinted control backgrounds:"
                },
                {
                    "type": "p",
                    "text": "Believe it or not the hardest part about this project was convincing ourselves to be okay with having 11 shades per color. Trying to make that look good in thecolor palette documentationwas a nightmare. Also pour one out for the 50 shades of gray jokes we used to be able to make."
                },
                {
                    "type": "p",
                    "text": "Now you can configure Tailwind CSS in ESM, or even in TypeScript:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "When you runnpx tailwindcss init, we’ll detect if your project is an ES Module and automatically generate your config file with the right syntax. You can also generate an ESM config file explicitly by using the--esmflag:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init--esm"
                },
                {
                    "type": "p",
                    "text": "To generate a TypeScript config file, use the--tsflag:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init--ts"
                },
                {
                    "type": "p",
                    "text": "A lot of people assume this is easy because they’re writing their own code in ESM already (even if it’s being transpiled by their build tool) but it’s actually pretty tricky — we literally have to transpile the config file for you on the fly. It’s a bit easier to understand why this has to happen when you think of the TypeScript case, because of course Tailwind is distributed as JavaScript, and it can’t magically import an uncompiled TypeScript file. We’re handling this with the wonderfuljitilibrary under the hood, and usingSucraseto transpile the code with the best possible performance while keeping the installation footprint small."
                },
                {
                    "type": "p",
                    "text": "We’ve made it possible to style multi-directional websites using ourLTR and RTL variantsfor a while, but now you can uselogical propertiesto do most of this styling more easily and automatically. Using new utilities likems-3andme-3, you can style thestartandendof an element so that your styles automatically adapt in RTL, instead of writing code likeltr:ml-3 rtl:mr-3:"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Tom Cook Director of Operations"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "p",
                    "text": "تامر كرم الرئيس التنفيذي"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><divclass=\"ms-3\"><pclass=\"text-sm font-medium text-slate-700 group-hover:text-slate-900\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-700\">...</p></div></div><divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><divclass=\"ms-3\"><pclass=\"text-sm font-medium text-slate-300 group-hover:text-white\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-300\">...</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve added new logical property utilities forinset,margin,padding,border-radius,scroll-margin, andscroll-padding. Here’s a full list of all of the new utilities we’ve added and what they map to:"
                },
                {
                    "type": "p",
                    "text": "These should save you a ton of code if you regularly build sites that need to support both LTR and RTL languages, and you can always combine these with theltrandrtlvariants when you need more control."
                },
                {
                    "type": "p",
                    "text": "We’ve added new utilities likefrom-5%,via-35%, andto-85%that let you adjust the actual position of each color stop in your gradients:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-indigo-500from-10%via-purple-500via-30%to-pink-500to-90%...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve included every value from 0% to 100% in steps of 5 out of the box, but you can of course use arbitrary values to get exactly the effect you want:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-cyan-400from-[21.56%]...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For more details, check out thegradient color stops documentation."
                },
                {
                    "type": "p",
                    "text": "We released ourofficial line-clamp pluginjust over two years ago and even though it uses a bunch of weird deprecated-webkit-*stuff, it works in every browser and it’s going to work forever, so we decided to just bake it into the framework itself."
                },
                {
                    "type": "p",
                    "text": "Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit consectetur enim."
                },
                {
                    "type": "code",
                    "code": "<article><div><timedatetime=\"2020-03-16\"class=\"block text-sm/6 text-gray-600\">Mar 10, 2020</time><h2class=\"mt-2 text-lg font-semibold text-gray-900\">Boost your conversion rate</h2><pclass=\"line-clamp-3mt-4 text-sm/6 text-gray-600\">Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit consectetur enim.</p></div><divclass=\"mt-4 flex gap-x-2.5 text-sm font-semibold leading-6 text-gray-900\"><imgsrc=\"...\"class=\"h-6 w-6 flex-none rounded-full bg-gray-50\"/>Lindsay Walton</div></article>"
                },
                {
                    "type": "p",
                    "text": "So when you upgrade to v3.3, you can safely remove the line-clamp plugin if you were using it:"
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...plugins:[require('@tailwindcss/line-clamp')]}"
                },
                {
                    "type": "p",
                    "text": "Don’t let the door hit you in the ass on the way out, plugin. Check out the newline-clamp documentationto learn more about how it all works if you haven’t played with it before."
                },
                {
                    "type": "p",
                    "text": "One thing we’ve found over years and years of designing beautiful stuff with Tailwind is that we literallyneverset a line-height without also setting the font-size at the same time. So inspired by our color opacity modifier syntax, we decided to make it possible to save a few characters by setting them together with a single utility:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-lg leading-7...\"><pclass=\"text-lg/7...\">So I started to walk into the water. I won't lie to you boys, I was terrified. ButI pressed on, and as I made my way past the breakers a strange calm came over me.I don't know if it was divine intervention or the kinship of all living things butI tell you Jerry at that moment, I<em>was</em>a marine biologist.</p>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in yourline-height scale, or use arbitrary values if you need to deviate from your design tokens:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-sm/[17px]...\"></p>"
                },
                {
                    "type": "p",
                    "text": "Check out thefont size documentationfor a few more examples."
                },
                {
                    "type": "p",
                    "text": "In the spirit of typing less, we’ve also made it possible to omit thevar()when using a CSS variable as an arbitrary value:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionMyComponent({company}){return(<divstyle={{'--brand-color':company.brandColor,'--brand-hover-color':company.brandHoverColor,}}className=\"bg-[var(--brand-color)] hover:bg-[var(--brand-hover-color)]\"className=\"bg-[--brand-color] hover:bg-[--brand-hover-color]\"/>)}"
                },
                {
                    "type": "p",
                    "text": "That’s a pretty cool trick right there for using things likehover:with styles that come from the database or something by the way."
                },
                {
                    "type": "p",
                    "text": "When using custom fonts, you’ll often want to configure things likefont-feature-settingsorfont-variation-settingsto opt-in to specific tweaks the font offers. We’ve made it easy to do this forfont-feature-settingsfor a while, but now you can do the same thing withfont-variation-settingsby providing a value for it in the sort-of options object you can plop after the font list in your config file:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{fontFamily:{sans:['Inter var, sans-serif',{fontFeatureSettings:'\"cv11\", \"ss01\"',fontVariationSettings:'\"opsz\" 32',},],},},}"
                },
                {
                    "type": "p",
                    "text": "In the example above we’re using a recent release ofInterthat supports using the optical size axis to trigger the “Display” variation of the font, optimized for larger sizes like headlines."
                },
                {
                    "type": "p",
                    "text": "Ever wanted to use a picture of a carrot as your list item marker? Well now you can, with the newlist-image-*utilities."
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-image-[url(carrot.png)]...\"><li>5 cups chopped Porcini mushrooms</li><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "We’re not going to start shipping vegetable clip art with the framework, but you can use any image you want either as an arbitrary value or configuring it in thelistStyleImagesection of your theme. Check out thelist style image documentationto learn more."
                },
                {
                    "type": "p",
                    "text": "Ever heard of the&shy;HTML entity? Me neither until we added support for thesehyphens-*utilities. Usinghyphens-manualand a carefully placed&shy;, you can tell the browser where to insert a hyphen when it needs to break a word across multiple lines:"
                },
                {
                    "type": "p",
                    "text": "Officially recognized by the Duden dictionary as the longest word in German,Kraftfahrzeug­haftpflichtversicherungis a 36 letter word for motor vehicle liability insurance."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-manual...\">... Kraftfahrzeug&shy;haftpflichtversicherung is a ...</p>"
                },
                {
                    "type": "p",
                    "text": "Maybe a code snippet like this would be useful to include as part of your unpronounceable death metal band’s press kit so the journalists don’t screw up the hyphenation in the article that finally breaks you on to the scene. Check out thehyphens documentationto learn more."
                },
                {
                    "type": "p",
                    "text": "Another new one for me — the<caption>element! We’ve got newcaption-*utilities you can use on table captions to control whether they appear at the top or bottom of the table they’re attached to."
                },
                {
                    "type": "code",
                    "code": "<table><captionclass=\"caption-bottom\">Table 3.1: Professional wrestlers and their signature moves.</caption><thead><tr><th>Wrestler</th><th>Signature Move(s)</th></tr></thead><tbody><tr><td>\"Stone Cold\" Steve Austin</td><td>Stone Cold Stunner, Lou Thesz Press</td></tr><tr><td>Bret \"The Hitman\" Hart</td><td>The Sharpshooter</td></tr><tr><td>Razor Ramon</td><td>Razor's Edge, Fallaway Slam</td></tr></tbody></table>"
                },
                {
                    "type": "p",
                    "text": "Check out thecaption side documentationfor some more examples."
                },
                {
                    "type": "p",
                    "text": "So that’s Tailwind CSS v3.3! No breaking changes, just a bunch of fun new stuff. Give it a try in your projects today by updating to the latest version with npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "Yep, another release withouttext-shadowutilities. Remember that episode of Seinfeld where Kramer tries to see how far he can drive without stopping for gas? That’s my favorite episode."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v3-4",
            "title": "Tailwind CSS v3.4: Dynamic viewport units, :has() support, balanced headlines, subgrid, and more - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "There’s nothing like buildinga major new productfor finding all the features you wish you had in your own tools, so we capitalized on some of that inspiration and turned it into this — Tailwind CSS v3.4. As always the improvements range from things you’ve been angry about for years, to supporting CSS features you’ve never even heard of and probably can’t even use at work."
                },
                {
                    "type": "list",
                    "items": [
                        "Dynamic viewport units:Full-height elements that actually work on mobile.",
                        "New:has()variant:Style parent elements based on their children.",
                        "Style children with the*variant:We’ll probably regret giving you this one.",
                        "Newsize-*utilities:Set width and height at the same time, finally.",
                        "Balanced headlines withtext-wraputilities:No more max-width tweaking or responsive line breaks.",
                        "Subgrid support:That grid feature you struggle to understand, finally in Tailwind CSS.",
                        "Extended min-width, max-width, and min-height scales:Nowmin-w-12is a real class.",
                        "Extended opacity scale:For those moments when neither 60% or 70% were quite right.",
                        "Extendedgrid-rows-*scale:Might as well make it match the column scale.",
                        "Newforced-colorsvariant:Easily fine-tune your site for forced colors mode.",
                        "Newforced-color-adjustutilities:For even more forced colors fine-tuning."
                    ]
                },
                {
                    "type": "p",
                    "text": "All the good stuff is in that list, but check out therelease notesfor a couple more details that weren’t exciting enough to earn a spot in this post. Upgrade your projects by installing the latest version oftailwindcssfrom npm:"
                },
                {
                    "type": "code",
                    "code": "$npminstalltailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "Or try out all of the new features onTailwind Play, right in your browser."
                },
                {
                    "type": "p",
                    "text": "When thevhunit was added to browsers we all got so excited — finally a way to build full-height application layouts and stuff without drillingheight: 100%through 17 layers of DOM! But mobile devices and their damn disappearing menu bars spoiled all the fun, effectively making thevhunit just a cruel reminder of a future that could’ve been so great. Well we’ve got a new future now —dvh,lvh, andsvhare designed to accommodate that disappearing browser chrome and Tailwind CSS v3.4 supports them out of the box:"
                },
                {
                    "type": "p",
                    "text": "Scroll up and down in the viewport to hide/show the browser UI"
                },
                {
                    "type": "p",
                    "text": "h-dvh"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-dvh\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve added the following new classes by default:"
                },
                {
                    "type": "p",
                    "text": "If you need other values, you can always use arbitrary values too likemin-h-[75dvh]. Browser support ispretty greatfor these nowadays, so unless you need to support Safari 14 you can start using these right away."
                },
                {
                    "type": "p",
                    "text": "The:has()pseudo-classis the most powerful thing that’s been added to CSS since flexbox. For the first time ever, you can style an element based on itschildren, not just based on its parents. It even makes it possible to style based on subsequent siblings. Here’s an example where the parent gets a colored ring if the radio button inside of it is checked:"
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"has-[:checked]:ring-indigo-500 has-[:checked]:text-indigo-900 has-[:checked]:bg-indigo-50..\"><svgfill=\"currentColor\"><!-- ... --></svg>Google Pay<inputtype=\"radio\"class=\"accent-indigo-500 ...\"/></label>"
                },
                {
                    "type": "p",
                    "text": "I feel like I’ve found a new use-case for:has()every week while working on this new UI kit we’ve been building for the last few  months, and it’s replaced a crazy amount of JavaScript in our code. For example, our text inputs are pretty complicated design-wise and require a little wrapper element to build. Without:has(), we had no way of styling the wrapper based on things like the:disabledstate of the input, but now we can:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionInput({...}){return(<spanclassName=\"has-[:disabled]:opacity-50 ...\"><input.../></span>)}"
                },
                {
                    "type": "p",
                    "text": "This one is pretty bleeding edge but as of literally today it’s now supported in the latest version of all major browsers. Give it a few weeks for any Firefox users to install today’s update and we should be able to go wild with it."
                },
                {
                    "type": "p",
                    "text": "Here’s one people have wanted for literally ever — a way to style children from the parent using utility classes. We’ve added a new*variant that targets direct children, letting you do stuff like this:"
                },
                {
                    "type": "code",
                    "code": "<div><h2>Categories:<h2><ulclass=\"*:rounded-full *:border *:border-sky-100 *:bg-sky-50 *:px-2 *:py-0.5 dark:text-sky-300 dark:*:border-sky-500/15 dark:*:bg-sky-500/10...\"><li>Sales</li><li>Marketing</li><li>SEO</li><!-- ... --></ul></div>"
                },
                {
                    "type": "p",
                    "text": "Generally I’d recommend just styling the children directly, but this can be useful when you don’t control those elements or need to make a conditional tweak because of the context the element is used in. It can be composed with other variants too, for instancehover:*:underlinewill style any child when the child is hovered. Here’s a cool way we’re using that to conditionally add layout styles to different child elements in the new UI kit we’re working on:"
                },
                {
                    "type": "code",
                    "code": "functionField({children}){return(<divclassName=\"data-[slot=description]:*:mt-4 ...\">{children}</div>)}functionDescription({children}){return(<pdata-slot=\"description\"...>{children}</p>)}functionExample(){return(<Field><Label>First name</Label><Input/><Description>Please tell me you know your own name.</Description></Field>)}"
                },
                {
                    "type": "p",
                    "text": "See that crazydata-[slot=description]:*:mt-4class? It first targets all direct children (that’s the*:part), then filters them down to just items with adata-slot=\"description\"attribute usingdata-[slot=description]. This makes it easy to target only specific children, without having to drop all the way down to a raw arbitrary variant. Looking forward to seeing all the horrible stuff everyone does to make me regret adding this feature."
                },
                {
                    "type": "p",
                    "text": "You’re sick of typingh-5 w-5every time you need to size an avatar, you know it and I know it. In Tailwind CSS v3.4 we’ve finally added a newsize-*utility that sets width and height at the same time:"
                },
                {
                    "type": "code",
                    "code": "<div><imgclass=\"h-10 w-10\"...><imgclass=\"h-12 w-12\"...><imgclass=\"h-14 w-14\"...><imgclass=\"size-10\"...><imgclass=\"size-12\"...><imgclass=\"size-14\"...></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve wanted to add this forever but have always been hung up on the exact name —size-*felt like so much to type compared tow-*orh-*ands-*felt way too cryptic. After using it for a few weeks though I can say decisively that even with the longer name, it’s way better than separate width and height utilities. Super convenient, especially if you’re combining it with variants or using a complex arbitrary value."
                },
                {
                    "type": "p",
                    "text": "How much time have you spent fiddling withmax-widthor inserting responsive line breaks to try and make those little section headings wrap nicely on your landing pages? Well now you can spend zero time on it, because the browser can do it for you withtext-wrap: balance:"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<article><h3class=\"text-balance...\">Beloved Manhattan soup stand closes<h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "p",
                    "text": "We’ve also addedtext-prettywhich tries to avoid orphaned words at the end of paragraphs usingtext-wrap: pretty:"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"text-pretty...\"><h3>Beloved Manhattan soup stand closes<h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "p",
                    "text": "The nice thing about these features is that even if someone visits your site with an older browser, they’ll just fallback to the regular wrapping behavior so it’s totally safe to start using these today."
                },
                {
                    "type": "p",
                    "text": "Subgrid is a fairly recent CSS feature that lets an element sort of inherit the grid columns or rows from its parent, make it possible to place its child elements in the parent grid."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-4 gap-4\"><!-- ... --><divclass=\"gridgrid-cols-subgridgap-4 col-span-3\"><divclass=\"col-start-2\">06</div></div><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "We’re using subgrid in the new UI kit we’re working on for example indropdown menus, so that if any item has an icon, all of the other items are indented to keep the text aligned:"
                },
                {
                    "type": "code",
                    "code": "<divrole=\"menu\"class=\"grid grid-cols-[auto_1fr]\"><ahref=\"#\"class=\"grid-cols-subgridcol-span-2\"><svgclass=\"mr-2\">...</svg><spanclass=\"col-start-2\">Account</span></a><ahref=\"#\"class=\"grid-cols-subgridcol-span-2\"><svgclass=\"mr-2\">...</svg><spanclass=\"col-start-2\">Settings</span></a><ahref=\"#\"class=\"grid-cols-subgridcol-span-2\"><spanclass=\"col-start-2\">Sign out</span></a></div>"
                },
                {
                    "type": "p",
                    "text": "When none of the items have an icon, the first column shrinks to 0px and the text is aligned all the way to left. Check out theMDN documentation on subgridfor a full primer — it’s a bit of a tricky feature to wrap your head around at first, but once it clicks it’s a game-changer."
                },
                {
                    "type": "p",
                    "text": "We’ve finally extended themin-width,max-width, andmin-heightscales to include the full spacing scale, so classes likemin-w-12are actually a real thing now:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"min-w-12\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "We should’ve just done this for v3.0 but never really got around to it — I’m sorry and you’re welcome."
                },
                {
                    "type": "p",
                    "text": "We’ve also extended the opacity scale to include every step of 5 out of the box:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"opacity-35\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Hopefully that means a few less arbitrary values in your markup. I’m coming for you next 2.5%."
                },
                {
                    "type": "p",
                    "text": "We’ve also bumped the baked-in number of grid rows from 6 to 12 because why not:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-9\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Maybe we’ll get even crazier and bump it to 16 in the next release."
                },
                {
                    "type": "p",
                    "text": "Ever heard offorced colors mode? Your site probably looks pretty bad in it. Well now you can’t blame us at least, because Tailwind CSS v3.4 includes aforced-colorsvariant for adjusting styles for forced colors mode:"
                },
                {
                    "type": "code",
                    "code": "<form><inputtype=\"checkbox\"class=\"appearance-noneforced-colors:appearance-auto...\"></form>"
                },
                {
                    "type": "p",
                    "text": "It’s really useful for fine-tuning totally custom controls, especially combined with arbitrary values and a working knowledge ofCSS system colors."
                },
                {
                    "type": "p",
                    "text": "We’ve also added newforced-color-adjust-autoandforces-color-adjust-noneutilities to control how forced colors mode affects your design:"
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Choose a color</legend><divclass=\"forced-color-adjust-none...\"><label><inputclass=\"sr-only\"type=\"radio\"name=\"color-choice\"value=\"white\"/><spanclass=\"sr-only\">White</span><spanclass=\"size-6 rounded-full bg-white\"></span></label><label><inputclass=\"sr-only\"type=\"radio\"name=\"color-choice\"value=\"gray\"/><spanclass=\"sr-only\">Gray</span><spanclass=\"size-6 rounded-full bg-gray-300\"></span></label><!-- ... --></div></fieldset>"
                },
                {
                    "type": "p",
                    "text": "These should be used pretty sparingly, but they can be useful when it’s critical that something is rendered in a specific color no matter what, like choosing the color of something someone is buying in an online store. To learn more about all this forced colors stuff, I recommend reading“Forced colors explained: A practical guide”on the Polypane blog — by far the most useful post I’ve found on this topic."
                },
                {
                    "type": "p",
                    "text": "If you’ve been paying close attention, you might be wondering aboutOxide, the engine improvements we previewed atTailwind Connectthis summer. We’d originally slated those improvements for v3.4, but we have a few things still to iron out and so many of these other improvements had been piling up that we felt it made sense to get it all out the door instead of holding it back. The Oxide stuff is still coming, and will be the headlining improvement for the next Tailwind CSS release in the new year. In the mean time, dig in to Tailwind CSS v3.4 by updating to the latest version with npm:"
                },
                {
                    "type": "code",
                    "code": "$npminstalltailwindcss@latest"
                },
                {
                    "type": "p",
                    "text": "With:has()and the new*variant, your HTML is about to get more out of control than ever."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v4-alpha",
            "title": "Open-sourcing our progress on Tailwind CSS v4.0 - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "Last summer at Tailwind ConnectI shared a preview of Oxide— a new high-performance engine for Tailwind CSS that we’ve been working on, designed to simplify the developer experience and take advantage of how the web platform has evolved in recent years. The new engine was originally going to ship as a v3.x release, but even though we’re committed to backwards compatibility, this feels so clearly like a new generation of the framework that it deserves to be v4.0. It’s still early and we’ve gota lot of work to do, but today we’reopen-sourcing our progressand tagging the first publicv4.0.0-alphaso you can start experimenting with it and help us get to a stable release later this year. I’ll try keep it brief to save some of the excitement for the stable release, but if you like to play with very early and experimental stuff, there should be plenty of information here to get you going."
                },
                {
                    "type": "p",
                    "text": "The new engine is a ground-up rewrite, using everything we know about the framework now to better model the problem space, making things faster with a lot less code."
                },
                {
                    "type": "list",
                    "items": [
                        "Up to 10x faster— we can do a full build of the Tailwind CSS website in 105ms instead of 960ms, or our Catalyst UI kit in 55ms instead of 341ms.",
                        "Smaller footprint— the new engine is over 35% smaller installed, even with the heavier native packages we ship like the parts we’ve rewritten in Rust and Lightning CSS.",
                        "Rust where it counts— we’ve migrated some of the most expensive and parallelizable parts of the framework to Rust, while keeping the core of the framework in TypeScript for extensibility.",
                        "One dependency— the only thing the new engine depends on is Lightning CSS.",
                        "Custom parser— we wrote our own CSS parser and designed our own data structures tailored to our needs, making parsing over 2x as fast for us as it was with PostCSS."
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v4 isn’t just a plugin anymore — it’s an all-in-one tool for processing your CSS. We’ve integratedLightning CSSdirectly into the framework so you don’t have to configure anything about your CSS pipeline."
                },
                {
                    "type": "list",
                    "items": [
                        "Built-in@importhandling— no need to setup and configure a tool likepostcss-import.",
                        "Built-in vendor prefixing— you don’t have to addautoprefixerto your projects anymore.",
                        "Built-in nesting support— no plugins needed to flatten nested CSS, it works out of the box.",
                        "Syntax transforms— modern CSS features likeoklch()colors and media query ranges are transpiled to syntax with better browser support."
                    ]
                },
                {
                    "type": "p",
                    "text": "We’re still shipping a PostCSS plugin, but we’re also exploring first-party bundler plugins, and we’re shipping an official Vite plugin with this first alpha release that you can try out today."
                },
                {
                    "type": "p",
                    "text": "We’re looking into the future with Tailwind CSS v4 and trying to build a framework that’s going to feel cutting edge for years to come."
                },
                {
                    "type": "list",
                    "items": [
                        "Native cascade layers— we’re using real@layerrules now, which solves a ton of specificity problems we’ve wrestled with in the past.",
                        "Explicitly defined custom properties— we use@propertyto define our internal custom properties with proper types and constraints, making it possible to do things like transition background gradients.",
                        "Usingcolor-mixfor opacity modifiers— making it easier than ever to use our opacity modifier syntax when using CSS variables for colors, or even adjusting the opacity ofcurrentColor.",
                        "Container queries in core— we’ve added support for container queries directly to core, with new@min-*and@max-*variants to support container query ranges."
                    ]
                },
                {
                    "type": "p",
                    "text": "We’re also working on refreshing our color palette with wide gamut colors, and introducing support for other modern CSS features like@starting-style, anchor positioning, and more."
                },
                {
                    "type": "p",
                    "text": "The new architecture makes it possible to compose together variants that act on other selectors, likegroup-*,peer-*,has-*, and a newnot-*variant we’re introducing for v4. In earlier releases, variants likegroup-has-*were explicitly defined in the framework, but nowgroup-*can compose with the existinghas-*variant, which can compose with other variants likefocus:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group\"><divclass=\"group-has-[&:focus]:opacity-100\"><divclass=\"group-has-focus:opacity-100\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "There’s no limits to this composability, and you can even write stuff likegroup-not-has-peer-not-data-active:underlineif for some horrible reason that’s what you need to do."
                },
                {
                    "type": "p",
                    "text": "You’ll notice that at least in these early alpha releases, it’s not even possible to configure yourcontentpaths. For most projects, you’re never going to need to do this ever again — Tailwind just finds your template files for you. We do this using one of two ways depending on how you’ve integrated Tailwind into your project:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using the PostCSS plugin or the CLI, Tailwind will crawl your entire project looking for template files, using a bunch of heuristics we’ve built in to keep things fast, like not crawling directories that are in your.gitignorefile, and ignoring binary file formats.",
                        "Using the Vite plugin, we rely on the module graph. This is amazing because we know exactly what files you’re actually using, so it’s maximally performant, and with no false positives or negatives. We’re hoping to expand this approach outside of the Vite ecosystem with other bundler plugins in the future."
                    ]
                },
                {
                    "type": "p",
                    "text": "We’ll introduce a way to configure content paths explicitly in the future for sure, but we’re curious to see how well this automatic approach works for everyone — it’s working awesome in our own projects."
                },
                {
                    "type": "p",
                    "text": "A major goal of Tailwind CSS v4.0 is making the framework feel CSS-native, and less like a JavaScript library. Once you’ve installed it, you add it to your project with a regular CSS@importstatement:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";"
                },
                {
                    "type": "p",
                    "text": "And instead of setting up all of your customizations in a JavaScript configuration file, you just use CSS variables:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";@theme{--font-family-display:\"Satoshi\",\"sans-serif\";--breakpoint-3xl:1920px;--color-neon-pink:oklch(71.7%0.25360);--color-neon-lime:oklch(91.5%0.258129);--color-neon-cyan:oklch(91.3%0.139195.8);}"
                },
                {
                    "type": "p",
                    "text": "The special@themedirective tells Tailwind to make new utilities and variants available based on those variables, letting you use classes like3xl:text-neon-limein your markup:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-lg3xl:max-w-xl\"><h1class=\"font-displaytext-4xl\">Data to<spanclass=\"text-neon-cyan\">enrich</span>your online business</h1></div>"
                },
                {
                    "type": "p",
                    "text": "Adding new CSS variables behaves likeextenddid in earlier versions of the framework, but you can override a whole set of variables by clearing the namespace with syntax like--color-*: initialbefore defining all of your custom values:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";@theme{--color-*:initial;--color-gray-50:#f8fafc;--color-gray-100:#f1f5f9;--color-gray-200:#e2e8f0;/* ... */--color-green-800:#3f6212;--color-green-900:#365314;--color-green-950:#1a2e05;}"
                },
                {
                    "type": "p",
                    "text": "We’re still fine-tuning some of the naming conventions, but you canexplore the default theme on GitHubto see what’s available to customize. If you don’t want to explicitly clear the default theme and would rather start from scratch, you can import\"tailwindcss/preflight\"and\"tailwindcss/utilities\"directly to skip importing the default theme:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";@import\"tailwindcss/preflight\"layer(base);@import\"tailwindcss/utilities\"layer(utilities);@theme{--color-*:initial;--color-gray-50:#f8fafc;--color-gray-100:#f1f5f9;--color-gray-200:#e2e8f0;/* ... */--color-green-800:#3f6212;--color-green-900:#365314;--color-green-950:#1a2e05;}"
                },
                {
                    "type": "p",
                    "text": "We also make all of your theme values available as native CSS variables in your custom CSS:"
                },
                {
                    "type": "code",
                    "code": ":root{--color-gray-50:#f8fafc;--color-gray-100:#f1f5f9;--color-gray-200:#e2e8f0;/* ... */--color-green-800:#3f6212;--color-green-900:#365314;--color-green-950:#1a2e05;}"
                },
                {
                    "type": "p",
                    "text": "This makes it easy to reference any of your theme values in arbitrary values without needing thetheme()function:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"p-[calc(var(--spacing-6)-1px)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "It also makes it possible to use your theme values when working with UI libraries like Framer Motion, without having to use theresolveConfig()function:"
                },
                {
                    "type": "code",
                    "code": "import{motion}from\"framer-motion\"exportconstMyComponent=()=>(<motion.divinitial={{y:'var(--spacing-8)'}}animate={{y:0}}exit={{y:'var(--spacing-8)'}}>{children}</motion.div>)"
                },
                {
                    "type": "p",
                    "text": "We don’t take breaking changes lightly, but there are a few things we’re doing differently in v4 so far that are worth sharing:"
                },
                {
                    "type": "list",
                    "items": [
                        "Removed deprecated utilities— we’ve removed utilities we stopped documenting a long time ago liketext-opacity-*,flex-grow-*, anddecoration-slicein favor of their modern replacements liketext-{color}/*,grow-*, andbox-decoration-slice.",
                        "PostCSS plugin and CLI are separate packages— the maintailwindcsspackage doesn’t include these anymore since not everyone needs them, instead they should be installed separately using@tailwindcss/postcssand@tailwindcss/cli.",
                        "No default border color— theborderutility used to default togray-200, but now it defaults tocurrentColorlike the browser does. We made this change to make it harder to accidentally introduce a wrong gray into your project if you’re usingzincorslateor something else as your main gray.",
                        "Rings are 1px by default— theringutility used to be a 3px blue ring by default, now it’s a 1px ring usingcurrentColor. We find ourselves using thering-*utilities as an alternative to borders in our projects, and usingoutline-*for focus rings, so we think making things consistent here is a helpful change."
                    ]
                },
                {
                    "type": "p",
                    "text": "There are a handful of other really low-level implementation detail changes that might surface in some way in your projects, but nothing deliberate like these changes. If you bump into anything surprising, let us know."
                },
                {
                    "type": "p",
                    "text": "This new engine is a ground-up rewrite, and up until now we’ve been focused entirely on this reimagined developer experience using the new configuration approach. We put an enormous amount of value in backwards compatibility, and that’s where the bulk of the work lies before we can tag a stable v4.0 release later this year."
                },
                {
                    "type": "list",
                    "items": [
                        "Support for JavaScript configuration files— reintroducing compatibility with the classictailwind.config.jsfile to make migrating to v4 easy.",
                        "Explicit content path configuration— making it possible to tell Tailwind exactly where your templates are when automatic content detection isn’t good enough for your setup.",
                        "Support for other dark modes— right now we only support dark mode using media queries, and still need to reimplement the selector and variant strategies.",
                        "Plugins and custom utilities— we don’t have support for plugins, or for writing custom utilities that automatically work with variants yet. Obviously we will make this work before a stable release.",
                        "Prefix support— there’s no way to configure a prefix for your classes yet, but we’ll bring it back for sure.",
                        "Safelists and blocklists— can’t force Tailwind to generate certain classes or prevent it from generating other classes yet.",
                        "Support forimportantconfiguration— there’s no way to make utilities all generate with!importantright now, but we plan to implement it.",
                        "Support for thetheme()function— this isn’t needed for new projects because you can usevar()now, but we’ll implement it for backwards compatibility.",
                        "Standalone CLI— we haven’t worked on a standalone CLI for the new engine yet, but will absolutely have it before the v4.0 release."
                    ]
                },
                {
                    "type": "p",
                    "text": "Aside from that, I’m sure we’ll find a lot of bugs to fix, some exciting new CSS features to sneak in, and refine some of these new APIs that need some more polish before a proper release. I don’t want to make promises on a specific release timeline, but I’d personally love to mark v4.0 as stable before the summer holiday season kicks in."
                },
                {
                    "type": "p",
                    "text": "We’ve tagged a couple alpha releases already, and you can start playing with it in your projects today. If you’re using the Tailwind CSS IntelliSense extension for VS Code, make sure you switch to the prerelease version from the extension page, and if you’re using our Prettier plugin, make sure you install the latest version. If you find an issue, pleaselet us know on GitHub. We really want this thing to be bullet-proof before we tag a stable release and reporting any problems you find will help us a lot."
                },
                {
                    "type": "p",
                    "text": "Install the Tailwind CSS v4 alpha and our new Vite plugin:"
                },
                {
                    "type": "code",
                    "code": "$npminstalltailwindcss@next @tailwindcss/vite@next"
                },
                {
                    "type": "p",
                    "text": "Then add our plugin to yourvite.config.tsfile:"
                },
                {
                    "type": "code",
                    "code": "importtailwindcssfrom'@tailwindcss/vite'import{defineConfig}from'vite'exportdefaultdefineConfig({plugins:[tailwindcss()],})"
                },
                {
                    "type": "p",
                    "text": "Finally, import Tailwind in your main CSS file:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";"
                },
                {
                    "type": "p",
                    "text": "Install the Tailwind CSS v4 alpha and the separate PostCSS plugin package:"
                },
                {
                    "type": "code",
                    "code": "$npminstalltailwindcss@next @tailwindcss/postcss@next"
                },
                {
                    "type": "p",
                    "text": "Then add our plugin to yourpostcss.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{'@tailwindcss/postcss':{}}}"
                },
                {
                    "type": "p",
                    "text": "Finally, import Tailwind in your main CSS file:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";"
                },
                {
                    "type": "p",
                    "text": "Install the Tailwind CSS v4 alpha and the separate CLI package:"
                },
                {
                    "type": "code",
                    "code": "$npminstalltailwindcss@next @tailwindcss/cli@next"
                },
                {
                    "type": "p",
                    "text": "Next, import Tailwind in your main CSS file:"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss\";"
                },
                {
                    "type": "p",
                    "text": "Finally, compile your CSS using the CLI tool:"
                },
                {
                    "type": "code",
                    "code": "$ npx @tailwindcss/cli@next-iapp.css-odist/app.css"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/blog/tailwindcss-v4-beta",
            "title": "Tailwind CSS v4.0 Beta 1 - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Adam Wathan@adamwathan"
                    ]
                },
                {
                    "type": "p",
                    "text": "About eight months ago weopen-sourced our progresson Tailwind CSS v4.0. Hundreds of hours of fixing bugs, soul-crushing backward compatibility work, and troubleshooting Windows CI failures later, I’m excited to finally tag the first public beta release. As I talked about when we published the first alpha, Tailwind CSS v4.0 is an all-new engine built for performance, and designed for the modern web."
                },
                {
                    "type": "list",
                    "items": [
                        "Built for performance— full builds in the new engine are up to 5x faster, and incremental builds are over 100x faster — and measured in microseconds.",
                        "Unified toolchain— built-in import handling, vendor prefixing, and syntax transforms, with no additional tooling required.",
                        "CSS-first configuration— a reimagined developer experience where you customize and extend the framework directly in CSS instead of a JavaScript configuration file.",
                        "Designed for the modern web— built on native cascade layers, wide-gamut colors, and including first-class support for modern CSS features like container queries,@starting-style, popovers, and more."
                    ]
                },
                {
                    "type": "p",
                    "text": "There’s so much more to say, but everything you need to get started is in the new beta documentation we published today: Get started with Tailwind CSS v4.0 Beta 1 → Start building and help us bullet-proof this thing for the stable release early in the new year."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/v4-beta",
            "title": "Tailwind CSS v4.0 Beta - Tailwind CSS",
            "content": []
        }
    ]
}