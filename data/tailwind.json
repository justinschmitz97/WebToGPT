{
    "name": "https://tailwindcss.com",
    "url": "https://https://tailwindcss.com",
    "pages": [
        {
            "url": "https://tailwindcss.com/docs/accent-color",
            "title": "Accent Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Accent Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the accent color"
                },
                {
                    "type": "p",
                    "text": "Use theaccent-*utilities to change the accent color of an element. This is helpful for styling elements like checkboxes and radio groups by overriding the browser’s default color."
                },
                {
                    "type": "code",
                    "code": "<label><inputtype=\"checkbox\"checked>Browser default</label><label><inputtype=\"checkbox\"class=\"accent-pink-500\"checked>Customized</label>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "While it’s possible to control the opacity of the accent color using the color opacity modifier, thergba()alpha value is only supported in Firefox at this time(last tested November 2021)."
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"accent-emerald-500/25\"checked>Emerald"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:accent-pink-500to only apply theaccent-pink-500utility onhover."
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"accent-pink-300focus:accent-pink-500\"checked>"
                },
                {
                    "type": "p",
                    "text": "Note, while it’s possible to set an accent color using thehoverandactivemodifiers, the resulting color will be slightly different than what you set, as browsers automatically adjust the brightness of the accent color for these two states."
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:accent-pink-500to apply theaccent-pink-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"accent-pink-300md:accent-pink-500\"checked>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asaccentcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just youraccentcolors by editingtheme.accentColorortheme.extend.accentColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offaccent-colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"accent-[#50d71e]\"checked>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the accent color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/adding-custom-styles",
            "title": "Adding Custom Styles - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Adding Custom Styles"
                    ]
                },
                {
                    "type": "p",
                    "text": "Often the biggest challenge when working with a framework is figuring out what you’re supposed to do when there’s something you need that the framework doesn’t handle for you."
                },
                {
                    "type": "p",
                    "text": "Tailwind has been designed from the ground up to be extensible and customizable, so that no matter what you’re building you never feel like you’re fighting the framework."
                },
                {
                    "type": "p",
                    "text": "This guide covers topics like customizing your design tokens, how to break out of those constraints when necessary, adding your own custom CSS, and extending the framework with plugins."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "If you want to change things like your color palette, spacing scale, typography scale, or breakpoints, add your customizations to thethemesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{sm:'480px',md:'768px',lg:'976px',xl:'1440px',},colors:{'blue':'#1fb6ff','pink':'#ff49db','orange':'#ff7849','green':'#13ce66','gray-dark':'#273444','gray':'#8492a6','gray-light':'#d3dce6',},fontFamily:{sans:['Graphik','sans-serif'],serif:['Merriweather','serif'],},extend:{spacing:{'128':'32rem','144':'36rem',},borderRadius:{'4xl':'2rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing your theme in theTheme Configurationdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using arbitrary values"
                },
                {
                    "type": "p",
                    "text": "While you can usually build the bulk of a well-crafted design using a constrained set of design tokens, once in a while you need to break out of those constraints to get things pixel-perfect."
                },
                {
                    "type": "p",
                    "text": "When you find yourself really needing something liketop: 117pxto get a background image in just the right spot, use Tailwind’s square bracket notation to generate a class on the fly with any arbitrary value:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-[117px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is basically like inline styles, with the major benefit that you can combine it with interactive modifiers likehoverand responsive modifiers likelg:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-[117px] lg:top-[344px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This works for everything in the framework, including things like background colors, font sizes, pseudo-element content, and more:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[#bada55] text-[22px] before:content-['Festivus']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "It’s even possible to use thethemefunctionto reference the design tokens in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-[fit-content(theme(spacing.32))]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "When using a CSS variable as an arbitrary value, wrapping your variable invar(...)isn’t needed — just providing the actual variable name is enough:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[--my-color]\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary properties"
                },
                {
                    "type": "p",
                    "text": "If you ever need to use a CSS property that Tailwind doesn’t include a utility for out of the box, you can also use square bracket notation to write completely arbitrary CSS:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[mask-type:luminance]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This isreallylike inline styles, but again with the benefit that you can use modifiers:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[mask-type:luminance] hover:[mask-type:alpha]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful for things like CSS variables as well, especially when they need to change under different conditions:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[--scroll-offset:56px] lg:[--scroll-offset:44px]\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary variants"
                },
                {
                    "type": "p",
                    "text": "Arbitraryvariantsare like arbitrary values but for doing on-the-fly selector modification, like you can with built-in pseudo-class variants likehover:{utility}or responsive variants likemd:{utility}but using square bracket notation directly in your HTML."
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each items as item}<liclass=\"lg:[&:nth-child(3)]:hover:underline\">{item}</li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "Learn more in thearbitrary variantsdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Handling whitespace"
                },
                {
                    "type": "p",
                    "text": "When an arbitrary value needs to contain a space, use an underscore (_) instead and Tailwind will automatically convert it to a space at build-time:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-cols-[1fr_500px_2fr]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "In situations where underscores are common but spaces are invalid, Tailwind will preserve the underscore instead of converting it to a space, for example in URLs:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[url('/what_a_rush.png')]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "In the rare case that you actually need to use an underscore but it’s ambiguous because a space is valid as well, escape the underscore with a backslash and Tailwind won’t convert it to a space:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['hello\\_world']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "If you’re using something like JSX where the backslash is stripped from the rendered HTML, useString.raw()so the backslash isn’t treated as a JavaScript escape character:"
                },
                {
                    "type": "code",
                    "code": "<divclassName={String.raw`before:content-['hello\\_world']`}><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resolving ambiguities"
                },
                {
                    "type": "p",
                    "text": "Many utilities in Tailwind share a common namespace but map to different CSS properties. For exampletext-lgandtext-blackboth share thetext-namespace, but one is forfont-sizeand the other is forcolor."
                },
                {
                    "type": "p",
                    "text": "When using arbitrary values, Tailwind can generally handle this ambiguity automatically based on the value you pass in:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will generate a font-size utility --><divclass=\"text-[22px]\">...</div><!-- Will generate a color utility --><divclass=\"text-[#bada55]\">...</div>"
                },
                {
                    "type": "p",
                    "text": "Sometimes it really is ambiguous though, for example when using CSS variables:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-[var(--my-var)]\">...</div>"
                },
                {
                    "type": "p",
                    "text": "In these situations, you can “hint” the underlying type to Tailwind by adding aCSS data typebefore the value:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will generate a font-size utility --><divclass=\"text-[length:var(--my-var)]\">...</div><!-- Will generate a color utility --><divclass=\"text-[color:var(--my-var)]\">...</div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using CSS and @layer"
                },
                {
                    "type": "p",
                    "text": "When you need to add truly custom CSS rules to a Tailwind project, the easiest approach is to just add the custom CSS to your stylesheet:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;.my-custom-style{/* ... */}"
                },
                {
                    "type": "p",
                    "text": "For more power, you can also use the@layerdirective to add styles to Tailwind’sbase,components, andutilitieslayers:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{.my-custom-style{/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "In CSS, the order of the rules in your stylesheet decides which declaration wins when two selectors have the same specificity:"
                },
                {
                    "type": "code",
                    "code": ".btn{background:blue;/* ... */}.bg-black{background:black;}"
                },
                {
                    "type": "p",
                    "text": "Here, both buttons will be black since.bg-blackcomes after.btnin the CSS:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"btn bg-black\">...</button><buttonclass=\"bg-black btn\">...</button>"
                },
                {
                    "type": "p",
                    "text": "To manage this, Tailwind organizes the styles it generates into three different “layers” — a concept popularized byITCSS."
                },
                {
                    "type": "list",
                    "items": [
                        "Thebaselayer is for things like reset rules or default styles applied to plain HTML elements.",
                        "Thecomponentslayer is for class-based styles that you want to be able to override with utilities.",
                        "Theutilitieslayer is for small, single-purpose classes that should always take precedence over any other styles."
                    ]
                },
                {
                    "type": "p",
                    "text": "Being explicit about this makes it easier to understand how your styles will interact with each other, and using the@layerdirective lets you control the final declaration order while still organizing your actual code in whatever way you like."
                },
                {
                    "type": "p",
                    "text": "The@layerdirective helps you control declaration order by automatically relocating your styles to the corresponding@tailwinddirective, and also enables features likemodifiersandtree-shakingfor your own custom CSS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding base styles"
                },
                {
                    "type": "p",
                    "text": "If you just want to set some defaults for the page (like the text color, background color, or font family), the easiest option is just adding some classes to thehtmlorbodyelements:"
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><htmllang=\"en\"class=\"text-gray-900 bg-gray-100 font-serif\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "This keeps your base styling decisions in your markup alongside all of your other styles, instead of hiding them in a separate file."
                },
                {
                    "type": "p",
                    "text": "If you want to add your own default base styles for specific HTML elements, use the@layerdirective to add those styles to Tailwind’sbaselayer:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{h1{@applytext-2xl;}h2{@applytext-xl;}/* ... */}"
                },
                {
                    "type": "p",
                    "text": "Use thethemefunction or@applydirective when adding custom base styles if you want to refer to any of the values defined in yourtheme."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding component classes"
                },
                {
                    "type": "p",
                    "text": "Use thecomponentslayer for any more complicated classes you want to add to your project that you’d still like to be able to override with utility classes."
                },
                {
                    "type": "p",
                    "text": "Traditionally these would be classes likecard,btn,badge— that kind of thing."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{.card{background-color:theme('colors.white');border-radius:theme('borderRadius.lg');padding:theme('spacing.6');box-shadow:theme('boxShadow.xl');}/* ... */}"
                },
                {
                    "type": "p",
                    "text": "By defining component classes in thecomponentslayer, you can still use utility classes to override them when necessary:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will look like a card, but with square corners --><divclass=\"card rounded-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Using Tailwind you probably don’t need these types of classes as often as you think. Read our guide onReusing Stylesfor our recommendations."
                },
                {
                    "type": "p",
                    "text": "Thecomponentslayer is also a good place to put custom styles for any third-party components you’re using:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{.select2-dropdown{@applyrounded-b-lg shadow-md;}.select2-search{@applyborder border-gray-300 rounded;}.select2-results__group{@applytext-lg font-bold text-gray-900;}/* ... */}"
                },
                {
                    "type": "p",
                    "text": "Use thethemefunction or@applydirective when adding custom component styles if you want to refer to any of the values defined in yourtheme."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding custom utilities"
                },
                {
                    "type": "p",
                    "text": "Add any of your own custom utility classes to Tailwind’sutilitieslayer:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerutilities{.content-auto{content-visibility:auto;}}"
                },
                {
                    "type": "p",
                    "text": "This can be useful when there’s a CSS feature you’d like to use in your project that Tailwind doesn’t include utilities for out of the box."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using modifiers with custom CSS"
                },
                {
                    "type": "p",
                    "text": "Any custom styles you add to Tailwind with@layerwill automatically support Tailwind’s modifier syntax for handling things like hover states, responsive breakpoints, dark mode, and more."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerutilities{.content-auto{content-visibility:auto;}}"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"lg:dark:content-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about how these modifiers work in theHover, Focus, and Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing unused custom CSS"
                },
                {
                    "type": "p",
                    "text": "Any custom styles you add to thebase,components, orutilitieslayers will only be included in your compiled CSS if those styles are actually used in your HTML."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{/* This won't be included in your compiled CSS unless you actually use it */.card{/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "If you want to add some custom CSS that should always be included, add it to your stylesheet without using the@layerdirective:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;/* This will always be included in your compiled CSS */.card{/* ... */}@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "Make sure to put your custom styles where they need to go to get the precedence behavior you want. In the example above, we’ve added the.cardclass before@tailwind utilitiesto make sure utilities can still override it."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using multiple CSS files"
                },
                {
                    "type": "p",
                    "text": "If you are writing a lot of CSS and organizing it into multiple files, make sure those files are combined into a single stylesheet before processing them with Tailwind, or you’ll see errors about using@layerwithout the corresponding@tailwinddirective."
                },
                {
                    "type": "p",
                    "text": "The easiest way to do this is using thepostcss-importplugin:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{'postcss-import':{},tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "p",
                    "text": "Learn more in ourbuild-time importsdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Layers and per-component CSS"
                },
                {
                    "type": "p",
                    "text": "Component frameworks like Vue and Svelte support adding per-component styles within a<style>block that lives in each component file."
                },
                {
                    "type": "p",
                    "text": "While you can use features like@applyandthemeinside component styles like this, the@layerdirective will not work and you’ll see an error about@layerbeing used without a matching@tailwinddirective:"
                },
                {
                    "type": "p",
                    "text": "Don’t use@layerin component styles"
                },
                {
                    "type": "code",
                    "code": "<div><slot></slot></div><style>/* Won't work because this file is processed in isolation */@layercomponents{div{background-color:theme('colors.white');border-radius:theme('borderRadius.lg');padding:theme('spacing.6');box-shadow:theme('boxShadow.xl');}}</style>"
                },
                {
                    "type": "p",
                    "text": "This is because under-the-hood, frameworks like Vue and Svelte are processing every single<style>block independently, and running your PostCSS plugin chain against each one in isolation."
                },
                {
                    "type": "p",
                    "text": "That means if you have 10 components that each have a<style>block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, Tailwind can’t take the styles you define in a@layerand move them to the corresponding@tailwinddirective, because as far as Tailwind can tell there is no@tailwinddirective to move it to."
                },
                {
                    "type": "p",
                    "text": "One solution to this is to simplynotuse@layerinside your component styles:"
                },
                {
                    "type": "p",
                    "text": "Add your styles without using@layer"
                },
                {
                    "type": "code",
                    "code": "<div><slot></slot></div><style>div{background-color:theme('colors.white');border-radius:theme('borderRadius.lg');padding:theme('spacing.6');box-shadow:theme('boxShadow.xl');}</style>"
                },
                {
                    "type": "p",
                    "text": "You lose the ability to control the precedence of your styles, but unfortunately that’s totally out of our control because of how these tools work."
                },
                {
                    "type": "p",
                    "text": "Our recommendation is that you just don’t use component styles like this at all and instead use Tailwind the way it’s intended to be used — as a single global stylesheet where you use the classes directly in your HTML:"
                },
                {
                    "type": "p",
                    "text": "Use Tailwind’s utilities instead of component styles"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-white rounded-lg p-6 shadow-xl\"><slot></slot></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Writing plugins"
                },
                {
                    "type": "p",
                    "text": "You can also add custom styles to your project using Tailwind’s plugin system instead of using a CSS file:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addBase,addComponents,addUtilities,theme}){addBase({'h1':{fontSize:theme('fontSize.2xl'),},'h2':{fontSize:theme('fontSize.xl'),},})addComponents({'.card':{backgroundColor:theme('colors.white'),borderRadius:theme('borderRadius.lg'),padding:theme('spacing.6'),boxShadow:theme('boxShadow.xl'),}})addUtilities({'.content-auto':{contentVisibility:'auto',}})})]}"
                },
                {
                    "type": "p",
                    "text": "Learn more about writing your own plugins in thePluginsdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Customizing your theme",
                        "Using arbitrary values",
                        "Arbitrary properties",
                        "Arbitrary variants",
                        "Handling whitespace",
                        "Resolving ambiguities",
                        "Using CSS and @layer",
                        "Adding base styles",
                        "Adding component classes",
                        "Adding custom utilities",
                        "Using modifiers with custom CSS",
                        "Removing unused custom CSS",
                        "Using multiple CSS files",
                        "Layers and per-component CSS",
                        "Writing plugins"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/align-content",
            "title": "Align Content - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Align Content"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Usecontent-startto pack rows in a container against the start of the cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-start...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Usecontent-centerto pack rows in a container in the center of the cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-center...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Usecontent-endto pack rows in a container against the end of the cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-end...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space between"
                },
                {
                    "type": "p",
                    "text": "Usecontent-betweento distribute rows in a container such that there is an equal amount of space between each line:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-between...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space around"
                },
                {
                    "type": "p",
                    "text": "Usecontent-aroundto distribute rows in a container such that there is an equal amount of space around each line:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-around...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space evenly"
                },
                {
                    "type": "p",
                    "text": "Usecontent-evenlyto distribute rows in a container such that there is an equal amount of space around each item, but also accounting for the doubling of space you would normally see between each item when usingcontent-around:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-evenly...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Usecontent-stretchto allow content items to fill the available space along the container’s cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-stretch...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Normal"
                },
                {
                    "type": "p",
                    "text": "Usecontent-normalto pack content items in their default position as if noalign-contentvalue was set:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 grid grid-cols-3 gap-4content-normal...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:content-aroundto only apply thecontent-aroundutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid content-starthover:content-around\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:content-aroundto apply thecontent-aroundutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid content-startmd:content-around\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Start",
                        "Center",
                        "End",
                        "Space between",
                        "Space around",
                        "Space evenly",
                        "Stretch",
                        "Normal",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/align-items",
            "title": "Align Items - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Align Items"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Useitems-stretchto stretch items to fill the container’s cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-stretch...\"><divclass=\"py-4\">01</div><divclass=\"py-12\">02</div><divclass=\"py-8\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Useitems-startto align items to the start of the container’s cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-start...\"><divclass=\"py-4\">01</div><divclass=\"py-12\">02</div><divclass=\"py-8\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Useitems-centerto align items along the center of the container’s cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-center...\"><divclass=\"py-4\">01</div><divclass=\"py-12\">02</div><divclass=\"py-8\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Useitems-endto align items to the end of the container’s cross axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-end...\"><divclass=\"py-4\">01</div><divclass=\"py-12\">02</div><divclass=\"py-8\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Baseline"
                },
                {
                    "type": "p",
                    "text": "Useitems-baselineto align items along the container’s cross axis such that all of their baselines align:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-baseline...\"><divclass=\"pt-2 pb-6\">01</div><divclass=\"pt-8 pb-12\">02</div><divclass=\"pt-12 pb-4\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:items-centerto only apply theitems-centerutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretchhover:items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:items-centerto apply theitems-centerutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretchmd:items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Stretch",
                        "Start",
                        "Center",
                        "End",
                        "Baseline",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/align-self",
            "title": "Align Self - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Align Self"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Useself-autoto align an item based on the value of the container’salign-itemsproperty:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretch ...\"><div>01</div><divclass=\"self-auto...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Useself-startto align an item to the start of the container’s cross axis, despite the container’salign-itemsvalue:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretch ...\"><div>01</div><divclass=\"self-start...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Useself-centerto align an item along the center of the container’s cross axis, despite the container’salign-itemsvalue:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretch ...\"><div>01</div><divclass=\"self-center...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Useself-endto align an item to the end of the container’s cross axis, despite the container’salign-itemsvalue:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretch ...\"><div>01</div><divclass=\"self-end...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Useself-stretchto stretch an item to fill the container’s cross axis, despite the container’salign-itemsvalue:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex items-stretch ...\"><div>01</div><divclass=\"self-stretch...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:self-endto only apply theself-endutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"self-autohover:self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:self-endto apply theself-endutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"self-automd:self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Auto",
                        "Start",
                        "Center",
                        "End",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/animation",
            "title": "Animation - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transitions & Animation",
                        "Animation"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Spin"
                },
                {
                    "type": "p",
                    "text": "Add theanimate-spinutility to add a linear spin animation to elements like loading indicators."
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-500 ...\"disabled><svgclass=\"animate-spinh-5 w-5 mr-3 ...\"viewBox=\"0 0 24 24\"><!-- ... --></svg>Processing...</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ping"
                },
                {
                    "type": "p",
                    "text": "Add theanimate-pingutility to make an element scale and fade like a radar ping or ripple of water — useful for things like notification badges."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"relative flex h-3 w-3\"><spanclass=\"animate-pingabsolute inline-flex h-full w-full rounded-full bg-sky-400 opacity-75\"></span><spanclass=\"relative inline-flex rounded-full h-3 w-3 bg-sky-500\"></span></span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pulse"
                },
                {
                    "type": "p",
                    "text": "Add theanimate-pulseutility to make an element gently fade in and out — useful for things like skeleton loaders."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto\"><divclass=\"animate-pulseflex space-x-4\"><divclass=\"rounded-full bg-slate-200 h-10 w-10\"></div><divclass=\"flex-1 space-y-6 py-1\"><divclass=\"h-2 bg-slate-200 rounded\"></div><divclass=\"space-y-3\"><divclass=\"grid grid-cols-3 gap-4\"><divclass=\"h-2 bg-slate-200 rounded col-span-2\"></div><divclass=\"h-2 bg-slate-200 rounded col-span-1\"></div></div><divclass=\"h-2 bg-slate-200 rounded\"></div></div></div></div></div><divclass=\"border border-blue-300 shadow rounded-md p-4 max-w-sm w-full mx-auto\"><divclass=\"animate-pulseflex space-x-4\"><divclass=\"rounded-full bg-slate-700 h-10 w-10\"></div><divclass=\"flex-1 space-y-6 py-1\"><divclass=\"h-2 bg-slate-700 rounded\"></div><divclass=\"space-y-3\"><divclass=\"grid grid-cols-3 gap-4\"><divclass=\"h-2 bg-slate-700 rounded col-span-2\"></div><divclass=\"h-2 bg-slate-700 rounded col-span-1\"></div></div><divclass=\"h-2 bg-slate-700 rounded\"></div></div></div></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Bounce"
                },
                {
                    "type": "p",
                    "text": "Add theanimate-bounceutility to make an element bounce up and down — useful for things like “scroll down” indicators."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"animate-bouncew-6 h-6 ...\"><!-- ... --></svg>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers-reduced-motion"
                },
                {
                    "type": "p",
                    "text": "For situations where the user has specified that they prefer reduced motion, you can conditionally apply animations and transitions using themotion-safeandmotion-reducevariants:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-600 ...\"disabled><svgclass=\"motion-safe:animate-spinh-5 w-5 mr-3 ...\"viewBox=\"0 0 24 24\"><!-- ... --></svg>Processing</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:animate-spinto only apply theanimate-spinutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:animate-spin\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:animate-spinto apply theanimate-spinutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:animate-spin\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "Animations by their very nature tend to be highly project-specific.The animations we include by default are best thought of as helpful examples, and you’re encouraged to customize your animations to better suit your needs."
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides utilities for four different example animations, as well as theanimate-noneutility. You can customize these values by editingtheme.animationortheme.extend.animationin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{animation:{'spin-slow':'spin 3s linear infinite',}}}}"
                },
                {
                    "type": "p",
                    "text": "To add new animation@keyframes, use thekeyframessection of your theme configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{keyframes:{wiggle:{'0%, 100%':{transform:'rotate(-3deg)'},'50%':{transform:'rotate(3deg)'},}}}}}"
                },
                {
                    "type": "p",
                    "text": "You can then reference these keyframes by name in theanimationsection of your theme configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{animation:{wiggle:'wiggle 1s ease-in-out infinite',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offanimationvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"animate-[wiggle_1s_ease-in-out_infinite]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Spin",
                        "Ping",
                        "Pulse",
                        "Bounce",
                        "Prefers-reduced-motion",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/appearance",
            "title": "Appearance - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Appearance"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing default element appearance"
                },
                {
                    "type": "p",
                    "text": "Useappearance-noneto reset any browser specific styling on an element. This utility is often used when creatingcustom form components."
                },
                {
                    "type": "code",
                    "code": "<select><option>Yes</option><option>No</option><option>Maybe</option></select><divclass=\"grid\"><selectclass=\"appearance-nonerow-start-1 col-start-1 bg-slate-50 dark:bg-slate-800 ...\"><option>Yes</option><option>No</option><option>Maybe</option></select><svgclass=\"pointer-events-none row-start-1 col-start-1 ...\"><!-- ... --></svg></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Restoring the default element appearance"
                },
                {
                    "type": "p",
                    "text": "Useappearance-autoto restore the default browser specific styling on an element. This is useful for reverting to the standard browser controls in certain accessibility modes."
                },
                {
                    "type": "p",
                    "text": "Try emulating `forced-colors: active` in your developer tools to see the difference"
                },
                {
                    "type": "code",
                    "code": "<label><div><inputtype=\"checkbox\"class=\"appearance-noneforced-colors:appearance-auto...\"/><svgclass=\"invisible peer-checked:visibleforced-colors:hidden...\"><!-- ... --></svg></div>Falls back to default appearance</label><label><div><inputtype=\"checkbox\"class=\"appearance-none ...\"/><svgclass=\"invisible peer-checked:visible ...\"><!-- ... --></svg></div>Keeps custom appearance</label>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:appearance-noneto only apply theappearance-noneutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"appearance-autohover:appearance-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:appearance-noneto apply theappearance-noneutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"appearance-automd:appearance-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Removing default element appearance",
                        "Restoring the default element appearance",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/aspect-ratio",
            "title": "Aspect Ratio - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Aspect Ratio"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the aspect ratio"
                },
                {
                    "type": "p",
                    "text": "Use theaspect-*utilities to set the desired aspect ratio of an element."
                },
                {
                    "type": "code",
                    "code": "<iframeclass=\"w-fullaspect-video...\"src=\"https://www.youtube.com/...\"></iframe>"
                },
                {
                    "type": "p",
                    "text": "Tailwind doesn’t include a large set of aspect ratio values out of the box since it’s easier to just use arbitrary values. See thearbitrary valuessection for more information."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Browser support"
                },
                {
                    "type": "p",
                    "text": "Theaspect-*utilities use the nativeaspect-ratioCSS property, which was not supported in Safari until version 15. Until Safari 15 is popularized, Tailwind’saspect-ratioplugin is a good alternative."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:aspect-squareto only apply theaspect-squareutility onhover."
                },
                {
                    "type": "code",
                    "code": "<iframeclass=\"w-full aspect-videohover:aspect-square\"src=\"https://www.youtube.com/...\"></iframe>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:aspect-squareto apply theaspect-squareutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<iframeclass=\"w-full aspect-videomd:aspect-square\"src=\"https://www.youtube.com/...\"></iframe>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides a minimal set ofaspect-ratioutilities. You can customize these values by editingtheme.aspectRatioortheme.extend.aspectRatioin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{aspectRatio:{'4/3':'4 / 3',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offaspect-ratiovalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<iframeclass=\"w-fullaspect-[4/3]\"src=\"https://www.youtube.com/...\"></iframe>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the aspect ratio",
                        "Browser support",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-blur",
            "title": "Backdrop Blur - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Blur"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Blurring behind an element"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-blur-*utilities to control an element’s backdrop blur."
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-sm"
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-md"
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smbg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-blur-mdbg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-blur-xlbg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-brightness-150md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-blur-lgto only apply thebackdrop-blur-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smhover:backdrop-blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-blur-lgto apply thebackdrop-blur-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smmd:backdrop-blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-blurutilities. You can customize these values by editingtheme.backdropBlurortheme.extend.backdropBlurin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropBlur:{xs:'2px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-blurvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-[2px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Blurring behind an element",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-brightness",
            "title": "Backdrop Brightness - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Brightness"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling backdrop brightness"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-brightness-*utilities to control an element’s backdrop brightness."
                },
                {
                    "type": "p",
                    "text": "backdrop-brightness-50"
                },
                {
                    "type": "p",
                    "text": "backdrop-brightness-125"
                },
                {
                    "type": "p",
                    "text": "backdrop-brightness-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-brightness-50bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-brightness-125bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-brightness-200bg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-brightness-150md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-brightness-150to only apply thebackdrop-brightness-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-brightness-110hover:backdrop-brightness-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-brightness-150to apply thebackdrop-brightness-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-brightness-110md:backdrop-brightness-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-brightnessutilities. You can customize these values by editingtheme.backdropBrightnessortheme.extend.backdropBrightnessin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropBrightness:{25:'.25',175:'1.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-brightnessvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-brightness-[1.75]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling backdrop brightness",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-contrast",
            "title": "Backdrop Contrast - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Contrast"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling backdrop contrast"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-contrast-*utilities to control an element’s backdrop contrast."
                },
                {
                    "type": "p",
                    "text": "backdrop-contrast-50"
                },
                {
                    "type": "p",
                    "text": "backdrop-contrast-125"
                },
                {
                    "type": "p",
                    "text": "backdrop-contrast-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-contrast-50bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-contrast-125bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-contrast-200bg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-contrast-125md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-contrast-150to only apply thebackdrop-contrast-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-contrast-125hover:backdrop-contrast-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-contrast-150to apply thebackdrop-contrast-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-contrast-125md:backdrop-contrast-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-contrastutilities. You can customize these values by editingtheme.backdropContrastortheme.extend.backdropContrastin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropContrast:{25:'.25',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-contrastvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-contrast-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling backdrop contrast",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-filter",
            "title": "Backdrop Blur - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Blur"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Blurring behind an element"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-blur-*utilities to control an element’s backdrop blur."
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-sm"
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-md"
                },
                {
                    "type": "p",
                    "text": "backdrop-blur-xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smbg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-blur-mdbg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-blur-xlbg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-brightness-150md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-blur-lgto only apply thebackdrop-blur-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smhover:backdrop-blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-blur-lgto apply thebackdrop-blur-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-smmd:backdrop-blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-blurutilities. You can customize these values by editingtheme.backdropBlurortheme.extend.backdropBlurin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropBlur:{xs:'2px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-blurvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-[2px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Blurring behind an element",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-grayscale",
            "title": "Backdrop Grayscale - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Grayscale"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Making an element grayscale"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-grayscaleandbackdrop-grayscale-0utilities to control whether an element’s backdrop should be rendered as grayscale or in full color."
                },
                {
                    "type": "p",
                    "text": "backdrop-grayscale-0"
                },
                {
                    "type": "p",
                    "text": "backdrop-grayscale"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-grayscale-0bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-grayscalebg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-grayscalemd:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-grayscale-0to only apply thebackdrop-grayscale-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-grayscalehover:backdrop-grayscale-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-grayscale-0to apply thebackdrop-grayscale-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-grayscalemd:backdrop-grayscale-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-grayscaleutilities. You can customize these values by editingtheme.backdropGrayscaleortheme.extend.backdropGrayscalein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropGrayscale:{50:'.5',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-grayscalevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-grayscale-[.5]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Making an element grayscale",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-hue-rotate",
            "title": "Backdrop Hue Rotate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Hue Rotate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rotating the backdrop’s hue"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-hue-rotate-*utilities to rotate the hue of an element’s backdrop."
                },
                {
                    "type": "p",
                    "text": "backdrop-hue-rotate-90"
                },
                {
                    "type": "p",
                    "text": "backdrop-hue-rotate-180"
                },
                {
                    "type": "p",
                    "text": "-backdrop-hue-rotate-60"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-hue-rotate-90bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-hue-rotate-180bg-white/30 ...\"><!-- ... --></div><divclass=\"-backdrop-hue-rotate-60bg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative backdrop hue rotate value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-backdrop-hue-rotate-60\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-hue-rotate-180md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-hue-rotate-60to only apply thebackdrop-hue-rotate-60utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-hue-rotate-15hover:backdrop-hue-rotate-60\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-hue-rotate-60to apply thebackdrop-hue-rotate-60utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-hue-rotate-15md:backdrop-hue-rotate-60\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-hue-rotateutilities. You can customize these values by editingtheme.backdropHueRotateortheme.extend.backdropHueRotatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropHueRotate:{'-270':'-270deg',270:'270deg',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-hue-rotatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-hue-rotate-[270deg]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Rotating the backdrop's hue",
                        "Using negative values",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-invert",
            "title": "Backdrop Invert - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Invert"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Inverting an element’s backdrop"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-invertandbackdrop-invert-0utilities to control whether an element should be rendered with inverted backdrop colors or normally."
                },
                {
                    "type": "p",
                    "text": "backdrop-invert-0"
                },
                {
                    "type": "p",
                    "text": "backdrop-invert"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-invert-0bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-invertbg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-invertmd:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-invert-0to only apply thebackdrop-invert-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-inverthover:backdrop-invert-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-invert-0to apply thebackdrop-invert-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-invertmd:backdrop-invert-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-invertutilities. You can customize these values by editingtheme.backdropInvertortheme.extend.backdropInvertin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropInvert:{25:'.25',75:'.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-invertvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-invert-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Inverting an element's backdrop",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-opacity",
            "title": "Backdrop Opacity - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Opacity"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling opacity of backdrop filters"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-opacity-*utilities to control the opacity of other backdrop filters applied to an element."
                },
                {
                    "type": "p",
                    "text": "backdrop-opacity-10"
                },
                {
                    "type": "p",
                    "text": "backdrop-opacity-60"
                },
                {
                    "type": "p",
                    "text": "backdrop-opacity-95"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-opacity-10backdrop-invert bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-opacity-60backdrop-invert bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-opacity-95backdrop-invert bg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-opacity-60md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-opacity-60to only apply thebackdrop-opacity-60utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-opacity-100hover:backdrop-opacity-60\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-opacity-60to apply thebackdrop-opacity-60utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-opacity-100md:backdrop-opacity-60\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-opacityutilities. You can customize these values by editingtheme.backdropOpacityortheme.extend.backdropOpacityin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropOpacity:{15:'.15',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-opacityvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-opacity-[.15]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling opacity of backdrop filters",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-saturate",
            "title": "Backdrop Saturate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Saturate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing backdrop saturation"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-saturate-*utilities to control an element’s backdrop saturation."
                },
                {
                    "type": "p",
                    "text": "backdrop-saturate-50"
                },
                {
                    "type": "p",
                    "text": "backdrop-saturate-125"
                },
                {
                    "type": "p",
                    "text": "backdrop-saturate-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-saturate-50bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-saturate-125bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-saturate-200bg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-saturate-150md:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-saturate-150to only apply thebackdrop-saturate-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-saturate-50hover:backdrop-saturate-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-saturate-150to apply thebackdrop-saturate-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-saturate-50md:backdrop-saturate-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-saturateutilities. You can customize these values by editingtheme.backdropSaturateortheme.extend.backdropSaturatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropSaturate:{25:'.25',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-saturatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-saturate-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing backdrop saturation",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/backdrop-sepia",
            "title": "Backdrop Sepia - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Backdrop Sepia"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding backdrop sepia filters"
                },
                {
                    "type": "p",
                    "text": "Use thebackdrop-sepiaandbackdrop-sepia-0utilities to control whether an element’s backdrop should be rendered as sepia or in full color."
                },
                {
                    "type": "p",
                    "text": "backdrop-sepia-0"
                },
                {
                    "type": "p",
                    "text": "backdrop-sepia"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-sepia-0bg-white/30 ...\"><!-- ... --></div><divclass=\"backdrop-sepiabg-white/30 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing backdrop filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the backdrop filters on an element at once, use thebackdrop-filter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-blur-md backdrop-sepiamd:backdrop-filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove backdrop filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:backdrop-sepia-0to only apply thebackdrop-sepia-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-sepiahover:backdrop-sepia-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:backdrop-sepia-0to apply thebackdrop-sepia-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-sepiamd:backdrop-sepia-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebackdrop-sepiautilities. You can customize these values by editingtheme.backdropSepiaortheme.extend.backdropSepiain yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backdropSepia:{25:'.25',75:'.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackdrop-sepiavalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"backdrop-sepia-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding backdrop sepia filters",
                        "Removing backdrop filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-attachment",
            "title": "Background Attachment - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Attachment"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed"
                },
                {
                    "type": "p",
                    "text": "Usebg-fixedto fix the background image relative to the viewport."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?"
                },
                {
                    "type": "p",
                    "text": "Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-fixed...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Local"
                },
                {
                    "type": "p",
                    "text": "Usebg-localto scroll the background image with the container and the viewport."
                },
                {
                    "type": "p",
                    "text": "\"Because the mail never stops. It just keeps coming and coming and coming, there's never a let-up. It's relentless. Every day it piles up more and more and more. And you gotta get it out but the more you get it out the more it keeps coming in. And then the barcode reader breaks and it's Publisher's Clearing House day.\""
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-local...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scroll"
                },
                {
                    "type": "p",
                    "text": "Usebg-scrollto scroll the background image with the viewport, but not with the container."
                },
                {
                    "type": "p",
                    "text": "\"Because the mail never stops. It just keeps coming and coming and coming, there's never a let-up. It's relentless. Every day it piles up more and more and more. And you gotta get it out but the more you get it out the more it keeps coming in. And then the barcode reader breaks and it's Publisher's Clearing House day.\""
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-scroll...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-fixedto only apply thebg-fixedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-localhover:bg-fixed\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-fixedto apply thebg-fixedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-localmd:bg-fixed\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Fixed",
                        "Local",
                        "Scroll",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-blend-mode",
            "title": "Background Blend Mode - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Effects",
                        "Background Blend Mode"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the background blend mode"
                },
                {
                    "type": "p",
                    "text": "Use thebg-blend-*utilities to control how an element’s background image(s) should blend with its background color."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-blend-multiply ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-blend-darkento only apply thebg-blend-darkenutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-blend-lightenhover:bg-blend-darken\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-blend-darkento apply thebg-blend-darkenutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-blend-lightenmd:bg-blend-darken\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the background blend mode",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-clip",
            "title": "Background Clip - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Clip"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the background clip"
                },
                {
                    "type": "p",
                    "text": "Use thebg-clip-*utilities to control the bounding box of an element’s background."
                },
                {
                    "type": "p",
                    "text": "bg-clip-border"
                },
                {
                    "type": "p",
                    "text": "bg-clip-padding"
                },
                {
                    "type": "p",
                    "text": "bg-clip-content"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-clip-borderp-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div><divclass=\"bg-clip-paddingp-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div><divclass=\"bg-clip-contentp-6 bg-violet-600 border-4 border-violet-300 border-dashed\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Cropping to text"
                },
                {
                    "type": "p",
                    "text": "Usebg-clip-textto crop an element’s background to match the shape of the text. Useful for effects where you want a background image to be visible through the text."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-5xl font-extrabold ...\"><spanclass=\"bg-clip-texttext-transparent bg-gradient-to-r from-pink-500 to-violet-500\">Hello world</span></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-clip-paddingto only apply thebg-clip-paddingutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-clip-borderhover:bg-clip-padding\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-clip-paddingto apply thebg-clip-paddingutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-clip-bordermd:bg-clip-padding\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the background clip",
                        "Cropping to text",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-color",
            "title": "Background Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the background color"
                },
                {
                    "type": "p",
                    "text": "Use utilities likebg-white,bg-indigo-500andbg-transparentto control the background color of an element."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-indigo-500...\">Save changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s background color."
                },
                {
                    "type": "p",
                    "text": "bg-sky-500"
                },
                {
                    "type": "p",
                    "text": "bg-sky-500/75"
                },
                {
                    "type": "p",
                    "text": "bg-sky-500/50"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-sky-500/100...\"></button><buttonclass=\"bg-sky-500/75...\"></button><buttonclass=\"bg-sky-500/50...\"></button>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-sky-500/[.06]...\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-cyan-600to only apply thebg-cyan-600utility onhover."
                },
                {
                    "type": "p",
                    "text": "Try hovering over the button to see the background color change"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-cyan-500hover:bg-cyan-600...\">Subscribe</button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-green-500to apply thebg-green-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-blue-500md:bg-green-500...\">Subscribe</button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asbackgroundcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourbackgroundcolors by editingtheme.backgroundColorortheme.extend.backgroundColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcolorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"bg-[#50d71e]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the background color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-image",
            "title": "Background Image - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Image"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Linear gradients"
                },
                {
                    "type": "p",
                    "text": "Use thebg-gradient-*utilities in combination with thegradient color stoputilities to give an element a linear gradient background."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-14bg-gradient-to-r from-cyan-500 to-blue-500\"></div><divclass=\"h-14bg-gradient-to-r from-sky-500 to-indigo-500\"></div><divclass=\"h-14bg-gradient-to-r from-violet-500 to-fuchsia-500\"></div><divclass=\"h-14bg-gradient-to-r from-purple-500 to-pink-500\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-gradient-to-rto only apply thebg-gradient-to-rutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-lhover:bg-gradient-to-r\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-gradient-to-rto apply thebg-gradient-to-rutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-lmd:bg-gradient-to-r\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes background image utilities for creating linear gradient backgrounds in eight directions."
                },
                {
                    "type": "p",
                    "text": "You can add your own background images by editing thetheme.backgroundImagesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{backgroundImage:{'hero-pattern':\"url('/img/hero-pattern.svg')\",'footer-texture':\"url('/img/footer-texture.png')\",}}}}"
                },
                {
                    "type": "p",
                    "text": "These don’t just have to be gradients — they can be any background images you need."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackground-imagevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[url('/img/hero-pattern.svg')]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Linear gradients",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-origin",
            "title": "Background Origin - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Origin"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the background origin"
                },
                {
                    "type": "p",
                    "text": "Usebg-origin-border,bg-origin-padding, andbg-origin-contentto control where an element’s background is rendered."
                },
                {
                    "type": "p",
                    "text": "bg-origin-border"
                },
                {
                    "type": "p",
                    "text": "bg-origin-padding"
                },
                {
                    "type": "p",
                    "text": "bg-origin-content"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-origin-borderp-4 border-4 border-dashed ...\"style=\"background-image:url(...)\"></div><divclass=\"bg-origin-paddingp-4 border-4 border-dashed ...\"style=\"background-image:url(...)\"></div><divclass=\"bg-origin-contentp-4 border-4 border-dashed ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-origin-paddingto only apply thebg-origin-paddingutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-origin-borderhover:bg-origin-padding\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-origin-paddingto apply thebg-origin-paddingutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-origin-bordermd:bg-origin-padding\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the background origin",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-position",
            "title": "Background Position - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Position"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the background position"
                },
                {
                    "type": "p",
                    "text": "Use utilities likebg-center,bg-right, andbg-left-topto the position of an element’s background image."
                },
                {
                    "type": "p",
                    "text": "bg-left-top"
                },
                {
                    "type": "p",
                    "text": "bg-top"
                },
                {
                    "type": "p",
                    "text": "bg-right-top"
                },
                {
                    "type": "p",
                    "text": "bg-left"
                },
                {
                    "type": "p",
                    "text": "bg-center"
                },
                {
                    "type": "p",
                    "text": "bg-right"
                },
                {
                    "type": "p",
                    "text": "bg-left-bottom"
                },
                {
                    "type": "p",
                    "text": "bg-bottom"
                },
                {
                    "type": "p",
                    "text": "bg-right-bottom"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-no-repeatbg-left-top...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-top...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-right-top...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-left...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-center...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-right...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-left-bottom...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-bottom...\"style=\"background-image:url(...);\"></div><divclass=\"bg-no-repeatbg-right-bottom...\"style=\"background-image:url(...);\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-topto only apply thebg-toputility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-centerhover:bg-top...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-topto apply thebg-toputility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-centermd:bg-top...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides ninebackground-positionutilities. You change, add, or remove these by editing thetheme.backgroundPositionsection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{backgroundPosition:{bottom:'bottom','bottom-4':'center bottom 1rem',center:'center',left:'left','left-bottom':'left bottom','left-top':'left top',right:'right','right-bottom':'right bottom','right-top':'right top',top:'top','top-4':'center top 1rem',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackground-positionvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[center_top_1rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the background position",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-repeat",
            "title": "Background Repeat - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Repeat"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Repeat"
                },
                {
                    "type": "p",
                    "text": "Usebg-repeatto repeat the background image both vertically and horizontally."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-repeat...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​No Repeat"
                },
                {
                    "type": "p",
                    "text": "Usebg-no-repeatwhen you don’t want to repeat the background image."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-no-repeatbg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Repeat Horizontally"
                },
                {
                    "type": "p",
                    "text": "Usebg-repeat-xto repeat the background image only horizontally."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-repeat-xbg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Repeat Vertically"
                },
                {
                    "type": "p",
                    "text": "Usebg-repeat-yto repeat the background image only vertically."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-repeat-ybg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-repeat-xto only apply thebg-repeat-xutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-repeathover:bg-repeat-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-repeat-xto apply thebg-repeat-xutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-repeatmd:bg-repeat-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Repeat",
                        "No Repeat",
                        "Repeat Horizontally",
                        "Repeat Vertically",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/background-size",
            "title": "Background Size - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Background Size"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Usebg-autoto display the background image at its default size."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-autobg-no-repeat bg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Cover"
                },
                {
                    "type": "p",
                    "text": "Usebg-coverto scale the background image until it fills the background layer."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-coverbg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Contain"
                },
                {
                    "type": "p",
                    "text": "Usebg-containto scale the background image to the outer edges without cropping or stretching."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-containbg-center ...\"style=\"background-image:url(...)\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:bg-containto only apply thebg-containutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-autohover:bg-contain\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:bg-containto apply thebg-containutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-automd:bg-contain\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides utilities forauto,cover, andcontainbackground sizes. You can change, add, or remove these by editing thetheme.backgroundSizesection of your config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{backgroundSize:{'auto':'auto','cover':'cover','contain':'contain','50%':'50%','16':'4rem',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbackground-sizevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[length:200px_100px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Auto",
                        "Cover",
                        "Contain",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/blur",
            "title": "Blur - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Blur"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Blurring elements"
                },
                {
                    "type": "p",
                    "text": "Use theblur-*utilities to blur an element."
                },
                {
                    "type": "p",
                    "text": "blur-none"
                },
                {
                    "type": "p",
                    "text": "blur-sm"
                },
                {
                    "type": "p",
                    "text": "blur-lg"
                },
                {
                    "type": "p",
                    "text": "blur-2xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-none...\"><!-- ... --></div><divclass=\"blur-sm...\"><!-- ... --></div><divclass=\"blur-lg...\"><!-- ... --></div><divclass=\"blur-2xl...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert brightness-150md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:blur-lgto only apply theblur-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blurhover:blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:blur-lgto apply theblur-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blurmd:blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposeblurutilities. You can customize these values by editingtheme.blurortheme.extend.blurin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{blur:{xs:'2px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offblurvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-[2px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Blurring elements",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-collapse",
            "title": "Border Collapse - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Tables",
                        "Border Collapse"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Collapse"
                },
                {
                    "type": "p",
                    "text": "Useborder-collapseto combine adjacent cell borders into a single border when possible. Note that this includes collapsing borders on the top-level<table>tag."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"border-collapseborder border-slate-400 ...\"><thead><tr><thclass=\"border border-slate-300 ...\">State</th><thclass=\"border border-slate-300 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-300 ...\">Indiana</td><tdclass=\"border border-slate-300 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-300 ...\">Ohio</td><tdclass=\"border border-slate-300 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-300 ...\">Michigan</td><tdclass=\"border border-slate-300 ...\">Detroit</td></tr></tbody></table><tableclass=\"border-collapseborder border-slate-500 ...\"><thead><tr><thclass=\"border border-slate-600 ...\">State</th><thclass=\"border border-slate-600 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-700 ...\">Indiana</td><tdclass=\"border border-slate-700 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-700 ...\">Ohio</td><tdclass=\"border border-slate-700 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-700 ...\">Michigan</td><tdclass=\"border border-slate-700 ...\">Detroit</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Separate"
                },
                {
                    "type": "p",
                    "text": "Useborder-separateto force each cell to display its own separate borders."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"border-separateborder border-slate-400 ...\"><thead><tr><thclass=\"border border-slate-300 ...\">State</th><thclass=\"border border-slate-300 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-300 ...\">Indiana</td><tdclass=\"border border-slate-300 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-300 ...\">Ohio</td><tdclass=\"border border-slate-300 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-300 ...\">Michigan</td><tdclass=\"border border-slate-300 ...\">Detroit</td></tr></tbody></table><tableclass=\"border-separateborder border-slate-500 ...\"><thead><tr><thclass=\"border border-slate-600 ...\">State</th><thclass=\"border border-slate-600 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-700 ...\">Indiana</td><tdclass=\"border border-slate-700 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-700 ...\">Ohio</td><tdclass=\"border border-slate-700 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-700 ...\">Michigan</td><tdclass=\"border border-slate-700 ...\">Detroit</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:border-collapseto only apply theborder-collapseutility onhover."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"hover:border-collapse\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:border-collapseto apply theborder-collapseutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"md:border-collapse\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Collapse",
                        "Separate",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-color",
            "title": "Border Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Border Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the border color"
                },
                {
                    "type": "p",
                    "text": "Use theborder-*utilities to control the border color of an element."
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"border-2border-rose-600...\"><inputclass=\"border-2border-rose-500...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s border color."
                },
                {
                    "type": "p",
                    "text": "border-indigo-500/100"
                },
                {
                    "type": "p",
                    "text": "border-indigo-500/75"
                },
                {
                    "type": "p",
                    "text": "border-indigo-500/50"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-4 border-indigo-500/100...\"></div><divclass=\"border-4 border-indigo-500/75...\"></div><divclass=\"border-4 border-indigo-500/50...\"></div>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-4 border-indigo-600/[.55]...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Individual sides"
                },
                {
                    "type": "p",
                    "text": "Use theborder-t-*,border-r-*,border-b-*, andborder-l-*utilities to set the border color for one side of an element."
                },
                {
                    "type": "p",
                    "text": "border-t-indigo-500"
                },
                {
                    "type": "p",
                    "text": "border-r-indigo-500"
                },
                {
                    "type": "p",
                    "text": "border-b-indigo-500"
                },
                {
                    "type": "p",
                    "text": "border-l-indigo-500"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-4 border-indigo-200border-t-indigo-500...\"></div><divclass=\"border-4 border-indigo-200border-r-indigo-500...\"></div><divclass=\"border-4 border-indigo-200border-b-indigo-500...\"></div><divclass=\"border-4 border-indigo-200border-l-indigo-500...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Horizontal and vertical sides"
                },
                {
                    "type": "p",
                    "text": "Use theborder-x-*andborder-y-*utilities to set the border color on two sides of an element at the same time."
                },
                {
                    "type": "p",
                    "text": "border-x-indigo-500"
                },
                {
                    "type": "p",
                    "text": "border-y-indigo-500"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-4 border-indigo-200border-x-indigo-500...\"></div><divclass=\"border-4 border-indigo-200border-y-indigo-500...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use theborder-s-*andborder-e-*utilities to set theborder-inline-start-colorandborder-inline-end-colorlogical properties, which map to either the left or right border based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"border-s-indigo-500...\"></div><div><divdir=\"rtl\"><divclass=\"border-s-indigo-500...\"></div><div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:border-gray-500to only apply theborder-gray-500utility onhover."
                },
                {
                    "type": "p",
                    "text": "Try hovering over the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"border border-slate-300hover:border-indigo-300...\">Send email</button><buttonclass=\"border border-slate-300hover:border-slate-400...\">Send email</button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:border-green-500to apply theborder-green-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"border-blue-500md:border-green-500\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asbordercolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourbordercolors by editingtheme.borderColorortheme.extend.borderColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offborder-colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"border-[#243c5a]\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the border color",
                        "Changing the opacity",
                        "Individual sides",
                        "Horizontal and vertical sides",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-radius",
            "title": "Border Radius - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Border Radius"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rounded corners"
                },
                {
                    "type": "p",
                    "text": "Use utilities likerounded-sm,rounded, orrounded-lgto apply different border radius sizes to an element."
                },
                {
                    "type": "p",
                    "text": "rounded"
                },
                {
                    "type": "p",
                    "text": "rounded-md"
                },
                {
                    "type": "p",
                    "text": "rounded-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-full"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rounded...\"></div><divclass=\"rounded-md...\"></div><divclass=\"rounded-lg...\"></div><divclass=\"rounded-full...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pill buttons"
                },
                {
                    "type": "p",
                    "text": "Use therounded-fullutility to create pill buttons."
                },
                {
                    "type": "p",
                    "text": "rounded-full"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"rounded-full...\">Save Changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​No rounding"
                },
                {
                    "type": "p",
                    "text": "Userounded-noneto remove an existing border radius from an element."
                },
                {
                    "type": "p",
                    "text": "rounded-none"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"rounded-none...\">Save Changes</button>"
                },
                {
                    "type": "p",
                    "text": "This is most commonly used to remove a border radius that was applied at a smaller breakpoint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rounding sides separately"
                },
                {
                    "type": "p",
                    "text": "Use therounded-t-*,rounded-r-*,rounded-b-*, androunded-l-*utilities to only round one side of an element."
                },
                {
                    "type": "p",
                    "text": "rounded-t-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-r-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-b-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-l-lg"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rounded-t-lg...\"></div><divclass=\"rounded-r-lg...\"></div><divclass=\"rounded-b-lg...\"></div><divclass=\"rounded-l-lg...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rounding corners separately"
                },
                {
                    "type": "p",
                    "text": "Use therounded-tl-*,rounded-tr-*,rounded-br-*, androunded-bl-*utilities to only round one corner of an element."
                },
                {
                    "type": "p",
                    "text": "rounded-tl-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-tr-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-br-lg"
                },
                {
                    "type": "p",
                    "text": "rounded-bl-lg"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rounded-tl-lg...\"></div><divclass=\"rounded-tr-lg...\"></div><divclass=\"rounded-br-lg...\"></div><divclass=\"rounded-bl-lg...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use therounded-s-*,rounded-e-*,rounded-ss-*,rounded-se-*,rounded-es-*, androunded-ee-*utilities to set the border radius usinglogical properties, which map to the appropriate corners based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"rounded-s-lg...\"></div><div><divdir=\"rtl\"><divclass=\"rounded-s-lg...\"></div><div>"
                },
                {
                    "type": "p",
                    "text": "Here are all the available border color logical property utilities and their physical property equivalents in both LTR and RTL modes."
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:rounded-lgto only apply therounded-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"roundedhover:rounded-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:rounded-lgto apply therounded-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"roundedmd:rounded-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides five border radius size utilities. You can change, add, or remove these by editing thetheme.borderRadiussection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{borderRadius:{'none':'0','sm':'0.125rem',DEFAULT:'0.25rem',DEFAULT:'4px','md':'0.375rem','lg':'0.5rem','full':'9999px','large':'12px',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offborder-radiusvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rounded-[12px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Rounded corners",
                        "Pill buttons",
                        "No rounding",
                        "Rounding sides separately",
                        "Rounding corners separately",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-spacing",
            "title": "Border Spacing - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Tables",
                        "Border Spacing"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the border spacing"
                },
                {
                    "type": "p",
                    "text": "Use theborder-spacing-*,border-spacing-x-*, andborder-spacing-y-*utilities to control the space between the borders of table cells withseparate borders."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"border-separateborder-spacing-2border border-slate-400 ...\"><thead><tr><thclass=\"border border-slate-300 ...\">State</th><thclass=\"border border-slate-300 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-300 ...\">Indiana</td><tdclass=\"border border-slate-300 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-300 ...\">Ohio</td><tdclass=\"border border-slate-300 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-300 ...\">Michigan</td><tdclass=\"border border-slate-300 ...\">Detroit</td></tr></tbody></table><tableclass=\"border-separateborder-spacing-2border border-slate-500 ...\"><thead><tr><thclass=\"border border-slate-600 ...\">State</th><thclass=\"border border-slate-600 ...\">City</th></tr></thead><tbody><tr><tdclass=\"border border-slate-700 ...\">Indiana</td><tdclass=\"border border-slate-700 ...\">Indianapolis</td></tr><tr><tdclass=\"border border-slate-700 ...\">Ohio</td><tdclass=\"border border-slate-700 ...\">Columbus</td></tr><tr><tdclass=\"border border-slate-700 ...\">Michigan</td><tdclass=\"border border-slate-700 ...\">Detroit</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:border-spacing-2to only apply theborder-spacing-2utility onhover."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"hover:border-spacing-2\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:border-spacing-4to apply theborder-spacing-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"md:border-spacing-4\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s border spacing utilities use thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'13':'3.25rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the border spacing scale by editingtheme.borderSpacingortheme.extend.borderSpacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{borderSpacing:{'13':'3.25rem',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offborder-spacingvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-spacing-[7px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the border spacing",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-style",
            "title": "Border Style - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Border Style"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the border style"
                },
                {
                    "type": "p",
                    "text": "Useborder-*to control an element’s border style."
                },
                {
                    "type": "p",
                    "text": "border-solid"
                },
                {
                    "type": "p",
                    "text": "border-dashed"
                },
                {
                    "type": "p",
                    "text": "border-dotted"
                },
                {
                    "type": "p",
                    "text": "border-double"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-solidborder-2 border-indigo-600 ...\"></div><divclass=\"border-dashedborder-2 border-indigo-600 ...\"></div><divclass=\"border-dottedborder-2 border-indigo-600 ...\"></div><divclass=\"border-doubleborder-4 border-indigo-600 ...\"></div><divclass=\"border-solidborder-2 border-sky-500 ...\"></div><divclass=\"border-dashedborder-2 border-sky-500 ...\"></div><divclass=\"border-dottedborder-2 border-sky-500 ...\"></div><divclass=\"border-doubleborder-4 border-sky-500 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​No style"
                },
                {
                    "type": "p",
                    "text": "Useborder-noneto remove an existing border style from an element."
                },
                {
                    "type": "p",
                    "text": "This is most commonly used to remove a border style that was applied at a smaller breakpoint."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"border-none...\">Save Changes</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:border-dottedto only apply theborder-dottedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-solidhover:border-dotted\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:border-dottedto apply theborder-dottedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-solidmd:border-dotted\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the border style",
                        "No style",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/border-width",
            "title": "Border Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Border Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​All sides"
                },
                {
                    "type": "p",
                    "text": "Use theborder,border-0,border-2,border-4, orborder-8utilities to set the border width for all sides of an element."
                },
                {
                    "type": "p",
                    "text": "border"
                },
                {
                    "type": "p",
                    "text": "border-2"
                },
                {
                    "type": "p",
                    "text": "border-4"
                },
                {
                    "type": "p",
                    "text": "border-8"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"borderborder-indigo-600 ...\"></div><divclass=\"border-2border-indigo-600 ...\"></div><divclass=\"border-4border-indigo-600 ...\"></div><divclass=\"border-8border-indigo-600 ...\"></div><divclass=\"borderborder-sky-500\"></div><divclass=\"border-2border-sky-500\"></div><divclass=\"border-4border-sky-500\"></div><divclass=\"border-8border-sky-500\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Individual sides"
                },
                {
                    "type": "p",
                    "text": "Use theborder-*,border-*-0,border-*-2,border-*-4, orborder-*-8utilities to set the border width for one side of an element."
                },
                {
                    "type": "p",
                    "text": "border-t-4"
                },
                {
                    "type": "p",
                    "text": "border-r-4"
                },
                {
                    "type": "p",
                    "text": "border-b-4"
                },
                {
                    "type": "p",
                    "text": "border-l-4"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-t-4border-indigo-500 ...\"></div><divclass=\"border-r-4border-indigo-500 ...\"></div><divclass=\"border-b-4border-indigo-500 ...\"></div><divclass=\"border-l-4border-indigo-500 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Horizontal and vertical sides"
                },
                {
                    "type": "p",
                    "text": "Use theborder-x-*andborder-y-*utilities to set the border width on two sides of an element at the same time."
                },
                {
                    "type": "p",
                    "text": "border-x-4"
                },
                {
                    "type": "p",
                    "text": "border-y-4"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-x-4border-indigo-500 ...\"></div><divclass=\"border-y-4border-indigo-500 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Between elements"
                },
                {
                    "type": "p",
                    "text": "You can also add borders between child elements using thedivide-x-*anddivide-y-*width utilities along with thedivide-*color utilities."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-ydivide-slate-200 ...\"><div>01</div><div>02</div><div>03</div></div><divclass=\"divide-ydivide-slate-700 ...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theDivide WidthandDivide Colordocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use theborder-s-*andborder-e-*utilities to set theborder-inline-start-widthandborder-inline-end-widthlogical properties, which map to either the left or right border based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"border-s-4...\"></div><div><divdir=\"rtl\"><divclass=\"border-s-4...\"></div><div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using without Preflight"
                },
                {
                    "type": "p",
                    "text": "If you’vedisabled Preflightin your project, you’ll need to include aborder styleutility any time you use one of theborder-widthutilities for the border to actually take effect:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-4border-indigo-500 ...\"><divclass=\"border-4 border-solidborder-indigo-500 ...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is because browsers set theborder-styleof most elements tononeby default, so adding aborder-widthon its own isn’t enough to render a border."
                },
                {
                    "type": "p",
                    "text": "Preflight applies a globalborder resetthat setsborder-styletosolidandborder-widthto0, which is what makes it possible to add a border to an element using just aborder-widthutility in projects using Preflight."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:border-t-4to only apply theborder-t-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-2hover:border-t-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:border-t-4to apply theborder-t-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-2md:border-t-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides fiveborder-widthutilities, and the same number of utilities per side (horizontal, vertical, top, right, bottom, and left). You change, add, or remove these by editing thetheme.borderWidthsection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{borderWidth:{DEFAULT:'1px','0':'0','2':'2px','3':'3px','4':'4px','6':'6px','8':'8px',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offborder-widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-t-[3px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "All sides",
                        "Individual sides",
                        "Horizontal and vertical sides",
                        "Between elements",
                        "Using logical properties",
                        "Using without Preflight",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/box-decoration-break",
            "title": "Box Decoration Break - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Box Decoration Break"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the box decoration break"
                },
                {
                    "type": "p",
                    "text": "Use thebox-decoration-sliceandbox-decoration-cloneutilities to control whether properties like background, border, border-image, box-shadow, clip-path, margin, and padding should be rendered as if the element were one continuous fragment, or distinct blocks."
                },
                {
                    "type": "p",
                    "text": "box-decoration-slice"
                },
                {
                    "type": "p",
                    "text": "box-decoration-clone"
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"box-decoration-slicebg-gradient-to-r from-indigo-600 to-pink-500 text-white px-2 ...\">Hello<br/>World</span><spanclass=\"box-decoration-clonebg-gradient-to-r from-indigo-600 to-pink-500 text-white px-2 ...\">Hello<br/>World</span>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:box-decoration-sliceto only apply thebox-decoration-sliceutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-decoration-clonehover:box-decoration-slice\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:box-decoration-sliceto apply thebox-decoration-sliceutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-decoration-clonemd:box-decoration-slice\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the box decoration break",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/box-shadow",
            "title": "Box Shadow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Effects",
                        "Box Shadow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding an outer shadow"
                },
                {
                    "type": "p",
                    "text": "Use theshadow-sm,shadow,shadow-md,shadow-lg,shadow-xl, orshadow-2xlutilities to apply different sized outer box shadows to an element."
                },
                {
                    "type": "p",
                    "text": "shadow-md"
                },
                {
                    "type": "p",
                    "text": "shadow-lg"
                },
                {
                    "type": "p",
                    "text": "shadow-xl"
                },
                {
                    "type": "p",
                    "text": "shadow-2xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadow-md...\"></div><divclass=\"shadow-lg...\"></div><divclass=\"shadow-xl...\"></div><divclass=\"shadow-2xl...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding an inner shadow"
                },
                {
                    "type": "p",
                    "text": "Use theshadow-innerutility to apply a subtle inset box shadow to an element. This can be useful for things like form controls or wells."
                },
                {
                    "type": "p",
                    "text": "shadow-inner"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadow-inner...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing the shadow"
                },
                {
                    "type": "p",
                    "text": "Useshadow-noneto remove an existing box shadow from an element. This is most commonly used to remove a shadow that was applied at a smaller breakpoint."
                },
                {
                    "type": "p",
                    "text": "shadow-none"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadow-none...\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:shadow-lgto only apply theshadow-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadowhover:shadow-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:shadow-lgto apply theshadow-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadowmd:shadow-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides six drop shadow utilities, one inner shadow utility, and a utility for removing existing shadows. You can customize these values by editingtheme.boxShadowortheme.extend.boxShadowin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "If aDEFAULTshadow is provided, it will be used for the non-suffixedshadowutility. Any other keys will be used as suffixes, for example the key'2'will create a correspondingshadow-2utility."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{boxShadow:{'3xl':'0 35px 60px -15px rgba(0, 0, 0, 0.3)',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbox-shadowvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shadow-[0_35px_60px_-15px_rgba(0,0,0,0.3)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding an outer shadow",
                        "Adding an inner shadow",
                        "Removing the shadow",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/box-shadow-color",
            "title": "Box Shadow Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Effects",
                        "Box Shadow Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the box shadow color"
                },
                {
                    "type": "p",
                    "text": "Use theshadow-*utilities to change the color of an existing box shadow. By default colored shadows have an opacity of 100%, but you can adjust this using the opacity modifier."
                },
                {
                    "type": "p",
                    "text": "shadow-cyan-500/50"
                },
                {
                    "type": "p",
                    "text": "shadow-blue-500/50"
                },
                {
                    "type": "p",
                    "text": "shadow-indigo-500/50"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-cyan-500shadow-lg shadow-cyan-500/50...\">Subscribe</button><buttonclass=\"bg-blue-500shadow-lg shadow-blue-500/50...\">Subscribe</button><buttonclass=\"bg-indigo-500shadow-lg shadow-indigo-500/50...\">Subscribe</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using shadows on colored backgrounds"
                },
                {
                    "type": "p",
                    "text": "When using shadows on a colored background, colored shadows can often look more natural than the default black-based shadows, which tend to appear gray and washed-out."
                },
                {
                    "type": "p",
                    "text": "Default shadow"
                },
                {
                    "type": "p",
                    "text": "Colored shadow"
                },
                {
                    "type": "code",
                    "code": "<!-- Default shadow--><buttonclass=\"shadow-lg\">Subscribe</button><!-- Colored shadow--><buttonclass=\"shadow-lgshadow-indigo-500/40...\">Subscribe</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:shadow-indigo-500/40to only apply theshadow-indigo-500/40utility onhover."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"shadow shadow-blue-500/40hover:shadow-indigo-500/40\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:shadow-indigo-500/40to apply theshadow-indigo-500/40utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"shadow shadow-blue-500/40md:shadow-indigo-500/40\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Preserving shadow color when changing the shadow size"
                },
                {
                    "type": "p",
                    "text": "Note that if you change thebox shadowsize at a different breakpoint, or on another state like hover, it will override any existing shadow colors."
                },
                {
                    "type": "code",
                    "code": "<!-- This shadow will NOT be red at medium screens and above --><divclass=\"shadow-lg shadow-red-500md:shadow-xl\"></div>"
                },
                {
                    "type": "p",
                    "text": "To preserve the shadow color in these states, it needs to be respecified:"
                },
                {
                    "type": "code",
                    "code": "<!-- This shadow WILL be red at medium screens and above --><divclass=\"shadow-lg shadow-red-500md:shadow-xl md:shadow-red-500\"></div>"
                },
                {
                    "type": "p",
                    "text": "It’s necessary for Tailwind to work this way, as otherwise there would be no way to switch back to the default shadow."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asbox shadowcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourbox shadowcolors by editingtheme.boxShadowColorortheme.extend.boxShadowColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbox-shadowvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"shadow-[#50d71e]\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the box shadow color",
                        "Using shadows on colored backgrounds",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Preserving shadow color when changing the shadow size",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/box-sizing",
            "title": "Box Sizing - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Box Sizing"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Including borders and padding"
                },
                {
                    "type": "p",
                    "text": "Use thebox-borderutility to set an element’sbox-sizingtoborder-box, telling the browser to include the element’s borders and padding when you give it a height or width."
                },
                {
                    "type": "p",
                    "text": "This means a 100px × 100px element with a 2px border and 4px of padding on all sides will be rendered as 100px × 100px, with an internal content area of 88px × 88px."
                },
                {
                    "type": "p",
                    "text": "Tailwind makes this the default for all elements in ourpreflight base styles."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-borderh-32 w-32 p-4 border-4 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Excluding borders and padding"
                },
                {
                    "type": "p",
                    "text": "Use thebox-contentutility to set an element’sbox-sizingtocontent-box, telling the browser to add borders and padding on top of the element’s specified width or height."
                },
                {
                    "type": "p",
                    "text": "This means a 100px × 100px element with a 2px border and 4px of padding on all sides will actually be rendered as 112px × 112px, with an internal content area of 100px × 100px."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-contenth-32 w-32 p-4 border-4 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:box-contentto only apply thebox-contentutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-borderhover:box-content\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:box-contentto apply thebox-contentutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"box-bordermd:box-content\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Including borders and padding",
                        "Excluding borders and padding",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/break-after",
            "title": "Break After - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Break After"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the break-after behavior"
                },
                {
                    "type": "p",
                    "text": "Use thebreak-after-*utilities to control how a column or page break should behave after an element. For example, use thebreak-after-columnutility to force a column break after an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-2\"><p>Well, let me tell you something, ...</p><pclass=\"break-after-column\">Sure, go ahead, laugh...</p><p>Maybe we can live without...</p><p>Look. If you think this is...</p></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:break-after-columnto only apply thebreak-after-columnutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:break-after-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:break-after-columnto apply thebreak-after-columnutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:break-after-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the break-after behavior",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/break-before",
            "title": "Break Before - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Break Before"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the break-before behavior"
                },
                {
                    "type": "p",
                    "text": "Use thebreak-before-*utilities to control how a column or page break should behave before an element. For example, use thebreak-before-columnutility to force a column break before an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-2\"><p>Well, let me tell you something, ...</p><pclass=\"break-before-column\">Sure, go ahead, laugh...</p><p>Maybe we can live without...</p><p>Look. If you think this is...</p></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:break-before-columnto only apply thebreak-before-columnutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:break-before-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:break-before-columnto apply thebreak-before-columnutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:break-before-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the break-before behavior",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/break-inside",
            "title": "Break Inside - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Break Inside"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the break-inside behavior"
                },
                {
                    "type": "p",
                    "text": "Use thebreak-inside-*utilities to control how a column or page break should behave within an element. For example, use thebreak-inside-avoid-columnutility to avoid a column break within an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-2\"><p>Well, let me tell you something, ...</p><pclass=\"break-inside-avoid-column\">Sure, go ahead, laugh...</p><p>Maybe we can live without...</p><p>Look. If you think this is...</p></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:break-inside-avoid-columnto only apply thebreak-inside-avoid-columnutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:break-inside-avoid-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:break-inside-avoid-columnto apply thebreak-inside-avoid-columnutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:break-inside-avoid-column\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the break-inside behavior",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/breakpoints",
            "title": "Customizing Screens - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Customizing Screens"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Configuring custom screens"
                },
                {
                    "type": "p",
                    "text": "You define your project’s breakpoints in thetheme.screenssection of yourtailwind.config.jsfile. The keys become yourresponsive modifiers(likemd:text-center), and the values are themin-widthwhere that breakpoint should start."
                },
                {
                    "type": "p",
                    "text": "The default breakpoints are inspired by common device resolutions:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'sm':'640px',// => @media (min-width: 640px) { ... }'md':'768px',// => @media (min-width: 768px) { ... }'lg':'1024px',// => @media (min-width: 1024px) { ... }'xl':'1280px',// => @media (min-width: 1280px) { ... }'2xl':'1536px',// => @media (min-width: 1536px) { ... }}}}"
                },
                {
                    "type": "p",
                    "text": "Feel free to have as few or as many screens as you want, naming them in whatever way you’d prefer for your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding the defaults"
                },
                {
                    "type": "p",
                    "text": "To completely replace the default breakpoints, add your customscreensconfiguration directly under thethemekey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'sm':'576px',// => @media (min-width: 576px) { ... }'md':'960px',// => @media (min-width: 960px) { ... }'lg':'1440px',// => @media (min-width: 1440px) { ... }},}}"
                },
                {
                    "type": "p",
                    "text": "Any default screens you haven’t overridden (such asxlusing the above example) will be removed and will not be available as screen modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding a single screen"
                },
                {
                    "type": "p",
                    "text": "To override a single screen size (likelg), add your customscreensvalue under thetheme.extendkey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{screens:{'lg':'992px',// => @media (min-width: 992px) { ... }},},},}"
                },
                {
                    "type": "p",
                    "text": "This will replace the default value for that breakpoint with the specified value."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding new breakpoints"
                },
                {
                    "type": "p",
                    "text": "The easiest way to add a new breakpoint is using theextendkey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{screens:{'3xl':'1600px',},},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "Tailwind will automatically sort your breakpoints to make sure smaller breakpoints are inserted first, and larger breakpoints are appended to the end."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using custom screen names"
                },
                {
                    "type": "p",
                    "text": "You can name your custom screens whatever you like, and are not limited to following thesm/md/lg/xl/2xlconvention that Tailwind uses by default."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'tablet':'640px',// => @media (min-width: 640px) { ... }'laptop':'1024px',// => @media (min-width: 1024px) { ... }'desktop':'1280px',// => @media (min-width: 1280px) { ... }},}}"
                },
                {
                    "type": "p",
                    "text": "Your responsive modifiers will reflect these custom screen names, so using them in your HTML would now look like this:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-1tablet:grid-cols-2laptop:grid-cols-3desktop:grid-cols-4\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Configuring custom screens",
                        "Overriding the defaults",
                        "Overriding a single screen",
                        "Adding new breakpoints",
                        "Using custom screen names"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/brightness",
            "title": "Brightness - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Brightness"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing element brightness"
                },
                {
                    "type": "p",
                    "text": "Use thebrightness-*utilities to control an element’s brightness."
                },
                {
                    "type": "p",
                    "text": "brightness-50"
                },
                {
                    "type": "p",
                    "text": "brightness-100"
                },
                {
                    "type": "p",
                    "text": "brightness-125"
                },
                {
                    "type": "p",
                    "text": "brightness-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"brightness-50...\"><!-- ... --></div><divclass=\"brightness-100...\"><!-- ... --></div><divclass=\"brightness-125...\"><!-- ... --></div><divclass=\"brightness-200...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert brightness-150md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:brightness-150to only apply thebrightness-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"brightness-110hover:brightness-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:brightness-150to apply thebrightness-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"brightness-110md:brightness-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposebrightnessutilities. You can customize these values by editingtheme.brightnessortheme.extend.brightnessin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{brightness:{25:'.25',175:'1.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offbrightnessvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"brightness-[1.75]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing element brightness",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/browser-support",
            "title": "Browser Support - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Browser Support"
                    ]
                },
                {
                    "type": "p",
                    "text": "In general, Tailwind CSS v3.0 is designed for and tested on the latest stable versions of Chrome, Firefox, Edge, and Safari. It does not support any version of IE, including IE 11."
                },
                {
                    "type": "p",
                    "text": "While most of the features in Tailwind CSS will work in all modern browsers, Tailwind also includes APIs for several bleeding-edge features that aren’t yet supported by all browsers, for example the:focus-visiblepseudo-class andbackdrop-filterutilities."
                },
                {
                    "type": "p",
                    "text": "Since Tailwind is such a low-level framework, it’s easy to avoid these features if you can’t use them by simply not using the utility or modifier that’s not supported, much like how you just wouldn’t use those CSS features in your CSS."
                },
                {
                    "type": "p",
                    "text": "TheCan I Usedatabase is a great resource when you’re unsure about the support for an unfamiliar CSS feature."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Vendor Prefixes"
                },
                {
                    "type": "p",
                    "text": "Many CSS properties require vendor prefixes to be understood by browsers, for examplebackground-clip: textneeds the-webkitprefix to work in most browsers:"
                },
                {
                    "type": "code",
                    "code": ".bg-clip-text{-webkit-background-clip:text;background-clip:text;}"
                },
                {
                    "type": "p",
                    "text": "If you’re using the Tailwind CLI tool, vendor prefixes like this will be added automatically."
                },
                {
                    "type": "p",
                    "text": "If not, we recommend that you useAutoprefixer, which is a PostCSS plugin that automatically adds any necessary vendor prefixes based on the browsers you tell it you need to support."
                },
                {
                    "type": "p",
                    "text": "To use it, install it via npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dautoprefixer"
                },
                {
                    "type": "p",
                    "text": "Then add it to the very end of your plugin list in your PostCSS configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "p",
                    "text": "To learn more about specifying which browsers you need to support, check outBrowserslistwhich is the standard way to define target browsers in front-end tooling."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Vendor Prefixes"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/caption-side",
            "title": "Caption Side - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Tables",
                        "Caption Side"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Top"
                },
                {
                    "type": "p",
                    "text": "Usecaption-topto position a caption element at the top of a table."
                },
                {
                    "type": "code",
                    "code": "<table><captionclass=\"caption-top\">Table 3.1: Professional wrestlers and their signature moves.</caption><thead><tr><th>Wrestler</th><th>Signature Move(s)</th></tr></thead><tbody><tr><td>\"Stone Cold\" Steve Austin</td><td>Stone Cold Stunner, Lou Thesz Press</td></tr><tr><td>Bret \"The Hitman\" Hart</td><td>The Sharpshooter</td></tr><tr><td>Razor Ramon</td><td>Razor's Edge, Fallaway Slam</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Bottom"
                },
                {
                    "type": "p",
                    "text": "Usecaption-bottomto position a caption element at the bottom of a table."
                },
                {
                    "type": "code",
                    "code": "<table><captionclass=\"caption-bottom\">Table 3.1: Professional wrestlers and their signature moves.</caption><thead><tr><th>Wrestler</th><th>Signature Move(s)</th></tr></thead><tbody><tr><td>\"Stone Cold\" Steve Austin</td><td>Stone Cold Stunner, Lou Thesz Press</td></tr><tr><td>Bret \"The Hitman\" Hart</td><td>The Sharpshooter</td></tr><tr><td>Razor Ramon</td><td>Razor's Edge, Fallaway Slam</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:caption-bottomto only apply thecaption-bottomutility onhover."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"caption-tophover:caption-bottom\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:caption-bottomto apply thecaption-bottomutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"caption-topmd:caption-bottom\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Top",
                        "Bottom",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/caret-color",
            "title": "Caret Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Caret Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the caret color"
                },
                {
                    "type": "p",
                    "text": "Use thecaret-*utilities to change the color of the text input cursor."
                },
                {
                    "type": "p",
                    "text": "Focus the textarea to see the new caret color"
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"caret-pink-500...\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:caret-indigo-500to only apply thecaret-indigo-500utility onfocus."
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"caret-blue-500focus:caret-indigo-500\"></textarea>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:caret-indigo-500to apply thecaret-indigo-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"caret-blue-500md:caret-indigo-500\"></textarea>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable ascaretcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourcaretcolors by editingtheme.caretColorortheme.extend.caretColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcaret-colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"caret-[#50d71e]\"></textarea>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the caret color",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/clear",
            "title": "Clear - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Clear"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Clearing left-floated elements"
                },
                {
                    "type": "p",
                    "text": "Use theclear-leftutility to position an element below any preceding left-floated elements."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better? Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<article><imgclass=\"float-left ...\"src=\"path/to/image.jpg\"><imgclass=\"float-right ...\"src=\"path/to/image.jpg\"><pclass=\"clear-left...\">Maybe we can live without libraries...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Clearing right-floated elements"
                },
                {
                    "type": "p",
                    "text": "Use theclear-rightutility to position an element below any preceding right-floated elements."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better? Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<article><imgclass=\"float-left ...\"src=\"path/to/image.jpg\"><imgclass=\"float-right ...\"src=\"path/to/image.jpg\"><pclass=\"clear-right...\">Maybe we can live without libraries...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Clearing all floated elements"
                },
                {
                    "type": "p",
                    "text": "Use theclear-bothutility to position an element below all preceding floated elements."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better? Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<article><imgclass=\"float-left ...\"src=\"path/to/image.jpg\"><imgclass=\"float-right ...\"src=\"path/to/image.jpg\"><pclass=\"clear-both...\">Maybe we can live without libraries...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling applied clears"
                },
                {
                    "type": "p",
                    "text": "Use theclear-noneutility to reset any clears that are applied to an element. This is the default value for the clear property."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better? Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<article><imgclass=\"float-left ...\"src=\"path/to/image.jpg\"><imgclass=\"float-right ...\"src=\"path/to/image.jpg\"><pclass=\"clear-none...\">Maybe we can live without libraries...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use theclear-startorclear-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "ربما يمكننا العيش بدون مكتبات، أشخاص مثلي ومثلك. ربما. بالتأكيد، نحن أكبر من أن نغير العالم، ولكن ماذا عن ذلك الطفل الذي يجلس ويفتح كتابًا الآن في أحد فروع المكتبة المحلية ويجد رسومات للتبول والبول على القطة في القبعة والإخوة الصينيون الخمسة؟ ألا يستحق الأفضل؟ ينظر. إذا كنت تعتقد أن الأمر يتعلق بالغرامات المتأخرة والكتب المفقودة، فمن الأفضل أن تفكر مرة أخرى. يتعلق الأمر بحق ذلك الطفل في قراءة كتاب دون أن يتشوه عقله! أو: ربما يثيرك هذا يا سينفيلد؛ ربما هذه هي الطريقة التي تحصل بها على ركلاتك. أنت ورفاقك الطيبين."
                },
                {
                    "type": "code",
                    "code": "<articledir=\"rtl\"><imgclass=\"float-start ...\"src=\"path/to/image.jpg\"><imgclass=\"float-end ...\"src=\"path/to/image.jpg\"><pclass=\"clear-end...\">...ربما يمكننا العيش بدون مكتبات،</p></article>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:clear-noneto only apply theclear-noneutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"clear-lefthover:clear-none\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:clear-noneto apply theclear-noneutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"clear-leftmd:clear-none\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Clearing left-floated elements",
                        "Clearing right-floated elements",
                        "Clearing all floated elements",
                        "Disabling applied clears",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/colors",
            "title": "Customizing Colors - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Customizing Colors"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Default color palette"
                },
                {
                    "type": "p",
                    "text": "Tailwind includes an expertly-crafted default color palette out-of-the-box that is a great starting point if you don’t have your own specific branding in mind."
                },
                {
                    "type": "p",
                    "text": "But when you do need to customize your palette, you can configure your colors under thecolorskey in thethemesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// Configure your color palette here}}}"
                },
                {
                    "type": "p",
                    "text": "When it comes to building a custom color palette, you can eitherconfigure your own custom colorsfrom scratch if you know exactly what you want, orcurate your colorsfrom our extensive included color palette if you want a head start."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom colors"
                },
                {
                    "type": "p",
                    "text": "If you’d like to completely replace the default color palette with your own custom colors, add your colors directly under thetheme.colorssection of your configuration file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{transparent:'transparent',current:'currentColor','white':'#ffffff','purple':'#3f3cbb','midnight':'#121063','metal':'#565584','tahiti':'#3ab7bf','silver':'#ecebff','bubble-gum':'#ff77e9','bermuda':'#78dcca',},},}"
                },
                {
                    "type": "p",
                    "text": "By default, these colors will be made available everywhere in the framework where you use colors, like thetext colorutilities,border colorutilities,background colorutilities, and more."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-midnighttext-tahiti\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Don’t forget to include values liketransparentandcurrentColorif you want to use them in your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Color object syntax"
                },
                {
                    "type": "p",
                    "text": "When your palette includes multiple shades of the same color, it can be convenient to group them together using our nested color object syntax:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{transparent:'transparent',current:'currentColor','white':'#ffffff','tahiti':{100:'#cffafe',200:'#a5f3fc',300:'#67e8f9',400:'#22d3ee',500:'#06b6d4',600:'#0891b2',700:'#0e7490',800:'#155e75',900:'#164e63',},// ...},},}"
                },
                {
                    "type": "p",
                    "text": "The nested keys will be combined with the parent key to form class names likebg-tahiti-400."
                },
                {
                    "type": "p",
                    "text": "Like many other places in Tailwind, the specialDEFAULTkey can be used when you want to define a value with no suffix:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// ...'tahiti':{light:'#67e8f9',DEFAULT:'#06b6d4',dark:'#0e7490',},// ...},},}"
                },
                {
                    "type": "p",
                    "text": "This will create classes likebg-tahiti,bg-tahiti-light, andbg-tahiti-dark."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need a one-off custom color in your project, consider using Tailwind’s arbitrary value notation to generate a class for that color on-demand instead of adding it to your theme:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-[#1da1f2] text-white ...\"><svg><!-- ... --></svg>Share on Twitter</button>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theusing arbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Generating colors"
                },
                {
                    "type": "p",
                    "text": "If you’re wondering how we automatically generated the 50–950 shades of each color, bad news — color is complicated and to get the absolute best results we picked all of Tailwind’s default colors by hand, meticulously balancing them by eye and testing them in real designs to make sure we were happy with them."
                },
                {
                    "type": "p",
                    "text": "If you are creating your own custom color palette and don’t feel confident doing it by hand,UI Colorsis a great tool that can give you a good starting point based on any custom color."
                },
                {
                    "type": "p",
                    "text": "Two other useful tools we recommend for building your own palettes arePalettteandColorBox— they won’t do the work for you but their interfaces are well-designed for doing this sort of work."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using the default colors"
                },
                {
                    "type": "p",
                    "text": "If you don’t have a set of completely custom colors in mind for your project, you can curate your colors from our default palette by importingtailwindcss/colorsin your configuration file and choosing the colors you want to use:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.gray,emerald:colors.emerald,indigo:colors.indigo,yellow:colors.yellow,},},}"
                },
                {
                    "type": "p",
                    "text": "This can be helpful if you want to deliberately limit your color palette and reduce the number of class names suggested byIntelliSense."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Aliasing color names"
                },
                {
                    "type": "p",
                    "text": "You can also alias the colors in our default palette to make the names simpler and easier to remember:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.slate,green:colors.emerald,purple:colors.violet,yellow:colors.amber,pink:colors.fuchsia,},},}"
                },
                {
                    "type": "p",
                    "text": "This is especially common for grays, as you usually only use one set in any given project and it’s nice to be able to typebg-gray-300instead ofbg-neutral-300for example."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding additional colors"
                },
                {
                    "type": "p",
                    "text": "If you’d like to add a brand new color to the default palette, add it in thetheme.extend.colorssection of your configuration file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{colors:{brown:{50:'#fdf8f6',100:'#f2e8e5',200:'#eaddd7',300:'#e0cec7',400:'#d2bab0',500:'#bfa094',600:'#a18072',700:'#977669',800:'#846358',900:'#43302b',},}},},}"
                },
                {
                    "type": "p",
                    "text": "You can also usetheme.extend.colorsto add additional shades to an existing color if it’s needed for your design:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{colors:{blue:{950:'#17275c',},}},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling a default color"
                },
                {
                    "type": "p",
                    "text": "If you’d like to disable any of the default colors, the best approach is to override the default color palette and just include the colors youdowant:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.gray,emerald:colors.emerald,indigo:colors.indigo,yellow:colors.yellow,},},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Naming your colors"
                },
                {
                    "type": "p",
                    "text": "Tailwind uses literal color names(like red, green, etc.)and a numeric scale(where 50 is light and 900 is dark)by default. We think this is the best choice for most projects, and have found it easier to maintain than using abstract names likeprimaryordanger."
                },
                {
                    "type": "p",
                    "text": "That said, you can name your colors in Tailwind whatever you like, and if you’re working on a project that needs to support multiple themes for example, it might make sense to use more abstract names:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{primary:'#5c6ac4',secondary:'#ecc94b',// ...}}}"
                },
                {
                    "type": "p",
                    "text": "You can configure those colors explicitly like we have above, or you can pull in colors from our default color palette and alias them:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{primary:colors.indigo,secondary:colors.yellow,neutral:colors.gray,}}}"
                },
                {
                    "type": "p",
                    "text": "Again, we recommend sticking to the default naming convention for most projects, and only using abstract names if you have a really good reason."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using CSS variables"
                },
                {
                    "type": "p",
                    "text": "If you’d like to define your colors as CSS variables, you’ll need to define those variables as just the colorchannelsif you want them to work with theopacity modifier syntax:"
                },
                {
                    "type": "p",
                    "text": "Define your CSS variables as channels with no color space function"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{--color-primary:255115179;--color-secondary:111114185;/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "Don’t include the color space function or opacity modifiers won’t work"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{--color-primary:rgb(255115179);--color-secondary:rgb(111114185);/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "Then define your colors in your configuration file, being sure to include the color space you’re using and a default alpha value for color spaces likergbawhere the alpha channel is required:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// Using modern `rgb`primary:'rgb(var(--color-primary))',secondary:'rgb(var(--color-secondary))',// Using modern `hsl`primary:'hsl(var(--color-primary))',secondary:'hsl(var(--color-secondary))',// Using legacy `rgba`primary:'rgba(var(--color-primary), 1)',secondary:'rgba(var(--color-secondary), 1)',}}}"
                },
                {
                    "type": "p",
                    "text": "When defining your colors this way, make sure that the format of your CSS variables is correct for the color function you are using. You’ll want to use spaces if using the modernspace-separated syntax, and commas if using legacy functions likergbaorhsla:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{/* For rgb(255 115 179 / 1) */--color-primary:255115179;/* For hsl(333deg 100% 73% / 1) */--color-primary:333deg100%73%;/* For rgba(255, 115, 179, 1) */--color-primary:255,115,179;}}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Default color palette",
                        "Using custom colors",
                        "Color object syntax",
                        "Arbitrary values",
                        "Generating colors",
                        "Using the default colors",
                        "Aliasing color names",
                        "Adding additional colors",
                        "Disabling a default color",
                        "Naming your colors",
                        "Using CSS variables"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/columns",
            "title": "Columns - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Columns"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding based on column count"
                },
                {
                    "type": "p",
                    "text": "Use utilities likecolumns-2andcolumns-3to set the number of columns that should be created for the content within an element. The column width will be automatically adjusted to accommodate that number."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-3...\"><imgclass=\"w-full aspect-video ...\"src=\"...\"/><imgclass=\"w-full aspect-square ...\"src=\"...\"/><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding based on column width"
                },
                {
                    "type": "p",
                    "text": "Use utilities likecolumns-xsandcolumns-smto set the ideal column width for the content within an element, with the number of columns (the count) automatically adjusting to accommodate that value."
                },
                {
                    "type": "p",
                    "text": "This “t-shirt” scale is the same as themax-widthscale, with the addition of2xsand3xs, since smaller columns may be desirable."
                },
                {
                    "type": "p",
                    "text": "Resize the example to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-3xs...\"><imgclass=\"w-full aspect-video ...\"src=\"...\"/><imgclass=\"w-full aspect-square ...\"src=\"...\"/><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the column gap"
                },
                {
                    "type": "p",
                    "text": "To specify the width between columns, you can use thegap-xutilities:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gap-8columns-3 ...\"><imgclass=\"w-full aspect-video ...\"src=\"...\"/><imgclass=\"w-full aspect-square ...\"src=\"...\"/><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:columns-3to only apply thecolumns-3utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-2hover:columns-3\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:columns-3to apply thecolumns-3utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-2md:columns-3\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides a column count scale from1-12as well as a column t-shirt scale from3xs-7xl. You can customize these values by editingtheme.columnsortheme.extend.columnsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{columns:{'4xs':'14rem',}},}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcolumnsvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"columns-[10rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding based on column count",
                        "Adding based on column width",
                        "Setting the column gap",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/configuration",
            "title": "Configuration - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Because Tailwind is a framework for building bespoke user interfaces, it has been designed from the ground up with customization in mind."
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind will look for an optionaltailwind.config.jsfile at the root of your project where you can define any customizations."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./src/**/*.{html,js}'],theme:{colors:{'blue':'#1fb6ff','purple':'#7e5bef','pink':'#ff49db','orange':'#ff7849','green':'#13ce66','yellow':'#ffc82c','gray-dark':'#273444','gray':'#8492a6','gray-light':'#d3dce6',},fontFamily:{sans:['Graphik','sans-serif'],serif:['Merriweather','serif'],},extend:{spacing:{'8xl':'96rem','9xl':'128rem',},borderRadius:{'4xl':'2rem',}}},}"
                },
                {
                    "type": "p",
                    "text": "Every section of the config file is optional, so you only have to specify what you’d like to change. Any missing sections will fall back to Tailwind’sdefault configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Creating your configuration file"
                },
                {
                    "type": "p",
                    "text": "Generate a Tailwind config file for your project using the Tailwind CLI utility included when you install thetailwindcssnpm package:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init"
                },
                {
                    "type": "p",
                    "text": "This will create a minimaltailwind.config.jsfile at the root of your project:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using a different file name"
                },
                {
                    "type": "p",
                    "text": "To use a name other thantailwind.config.js, pass it as an argument on the command-line:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init tailwindcss-config.js"
                },
                {
                    "type": "p",
                    "text": "When you use a custom file name, you will need to specify it as a command-line argument when compiling your CSS with the Tailwind CLI tool:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss-c./tailwindcss-config.js-iinput.css-ooutput.css"
                },
                {
                    "type": "p",
                    "text": "If you’re using Tailwind as a PostCSS plugin, you will need to specify your custom configuration path in your PostCSS configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{config:'./tailwindcss-config.js'},},}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can specify your custom configuration path using the@configdirective:"
                },
                {
                    "type": "code",
                    "code": "@config\"./tailwindcss-config.js\";@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "Learn more about the@configdirective in theFunctions & Directivesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using ESM or TypeScript"
                },
                {
                    "type": "p",
                    "text": "You can also configure Tailwind CSS in ESM or even TypeScript:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "When you runnpx tailwindcss init, we’ll detect if your project is an ES Module and automatically generate your config file with the right syntax."
                },
                {
                    "type": "p",
                    "text": "You can also generate an ESM config file explicitly by using the--esmflag:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init--esm"
                },
                {
                    "type": "p",
                    "text": "To generate a TypeScript config file, use the--tsflag:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init--ts"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Generating a PostCSS configuration file"
                },
                {
                    "type": "p",
                    "text": "Use the-pflag if you’d like to also generate a basicpostcss.config.jsfile alongside yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init-p"
                },
                {
                    "type": "p",
                    "text": "This will generate apostcss.config.jsfile in your project that looks like this:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scaffolding the entire default configuration"
                },
                {
                    "type": "p",
                    "text": "For most users we encourage you to keep your config file as minimal as possible, and only specify the things you want to customize."
                },
                {
                    "type": "p",
                    "text": "If you’d rather scaffold a complete configuration file that includes all of Tailwind’s default configuration, use the--fulloption:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss init--full"
                },
                {
                    "type": "p",
                    "text": "You’ll get a file that matches thedefault configuration fileTailwind uses internally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Configuration options"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Content"
                },
                {
                    "type": "p",
                    "text": "Thecontentsection is where you configure the paths to all of your HTML templates, JS components, and any other files that contain Tailwind class names."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "Learn more about configuring your content sources in theContent Configurationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Theme"
                },
                {
                    "type": "p",
                    "text": "Thethemesection is where you define your color palette, fonts, type scale, border sizes, breakpoints — anything related to the visual design of your site."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...theme:{colors:{'blue':'#1fb6ff','purple':'#7e5bef','pink':'#ff49db','orange':'#ff7849','green':'#13ce66','yellow':'#ffc82c','gray-dark':'#273444','gray':'#8492a6','gray-light':'#d3dce6',},fontFamily:{sans:['Graphik','sans-serif'],serif:['Merriweather','serif'],},extend:{spacing:{'8xl':'96rem','9xl':'128rem',},borderRadius:{'4xl':'2rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about the default theme and how to customize it in thetheme configuration guide."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Plugins"
                },
                {
                    "type": "p",
                    "text": "Thepluginssection allows you to register plugins with Tailwind that can be used to generate extra utilities, components, base styles, or custom variants."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...plugins:[require('@tailwindcss/forms'),require('@tailwindcss/aspect-ratio'),require('@tailwindcss/typography'),require('tailwindcss-children'),],}"
                },
                {
                    "type": "p",
                    "text": "Learn more about writing your own plugins in theplugin authoring guide."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Presets"
                },
                {
                    "type": "p",
                    "text": "Thepresetssection allows you to specify your own custom base configuration instead of using Tailwind’s default base configuration."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...presets:[require('@acmecorp/base-tailwind-config')],// Project-specific customizationstheme:{//...},}"
                },
                {
                    "type": "p",
                    "text": "Learn more about presets in thepresets documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefix"
                },
                {
                    "type": "p",
                    "text": "Theprefixoption allows you to add a custom prefix to all of Tailwind’s generated utility classes. This can be really useful when layering Tailwind on top of existing CSS where there might be naming conflicts."
                },
                {
                    "type": "p",
                    "text": "For example, you could add atw-prefix by setting theprefixoption like so:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={prefix:'tw-',}"
                },
                {
                    "type": "p",
                    "text": "Now every class will be generated with the configured prefix:"
                },
                {
                    "type": "code",
                    "code": ".tw-text-left{text-align:left;}.tw-text-center{text-align:center;}.tw-text-right{text-align:right;}/* etc. */"
                },
                {
                    "type": "p",
                    "text": "It’s important to understand that this prefix is addedafterany variant modifiers. That means that classes with responsive or state modifiers likesm:orhover:will still have the responsive or state modifierfirst, with your custom prefix appearing after the colon:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"tw-text-lg md:tw-text-xl tw-bg-red-500hover:tw-bg-blue-500\"><!-- --></div>"
                },
                {
                    "type": "p",
                    "text": "The dash modifier for negative values should be added before your prefix, so-mt-8would become-tw-mt-8if you’ve configuredtw-as your prefix:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-tw-mt-8\"><!-- --></div>"
                },
                {
                    "type": "p",
                    "text": "Prefixes are only added to classes generated by Tailwind;no prefix will be added to your own custom classes."
                },
                {
                    "type": "p",
                    "text": "That means if you add your own custom utility like this:"
                },
                {
                    "type": "code",
                    "code": "@layerutilities{.bg-brand-gradient{/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "…the generated variants will not have your configured prefix:"
                },
                {
                    "type": "code",
                    "code": ".bg-brand-gradient{/* ... */}.hover\\:bg-brand-gradient:hover{/* ... */}"
                },
                {
                    "type": "p",
                    "text": "If you’d like to prefix your own utilities as well, just add the prefix to the class definition:"
                },
                {
                    "type": "code",
                    "code": "@layerutilities{.tw-bg-brand-gradient{/* ... */}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Important"
                },
                {
                    "type": "p",
                    "text": "Theimportantoption lets you control whether or not Tailwind’s utilities should be marked with!important. This can be really useful when using Tailwind with existing CSS that has high specificity selectors."
                },
                {
                    "type": "p",
                    "text": "To generate utilities as!important, set theimportantkey in your configuration options totrue:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={important:true,}"
                },
                {
                    "type": "p",
                    "text": "Now all of Tailwind’s utility classes will be generated as!important:"
                },
                {
                    "type": "code",
                    "code": ".leading-none{line-height:1!important;}.leading-tight{line-height:1.25!important;}.leading-snug{line-height:1.375!important;}/* etc. */"
                },
                {
                    "type": "p",
                    "text": "This also applies to any custom utilities you define in your CSS using the@layer utilitiesdirective:"
                },
                {
                    "type": "code",
                    "code": "/* Input */@layerutilities{.bg-brand-gradient{background-image:linear-gradient(#3490dc,#6574cd);}}/* Output */.bg-brand-gradient{background-image:linear-gradient(#3490dc,#6574cd)!important;}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Selector strategy"
                },
                {
                    "type": "p",
                    "text": "Settingimportanttotruecan introduce some issues when incorporating third-party JS libraries that add inline styles to your elements. In those cases, Tailwind’s!importantutilities defeat the inline styles, which can break your intended design."
                },
                {
                    "type": "p",
                    "text": "To get around this, you can setimportantto an ID selector like#appinstead:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...important:'#app',}"
                },
                {
                    "type": "p",
                    "text": "This configuration will prefix all of your utilities with the given selector, effectively increasing their specificity without actually making them!important."
                },
                {
                    "type": "p",
                    "text": "After you specify theimportantselector, you’ll need to ensure that the root element of your site matches it.  Using the example above, we would need to set our root element’sidattribute toappin order for styles to work properly."
                },
                {
                    "type": "p",
                    "text": "After your configuration is all set up and your root element matches the selector in your Tailwind config, all of Tailwind’s utilities will have a high enough specificity to defeat other classes used in your project,withoutinterfering with inline styles:"
                },
                {
                    "type": "code",
                    "code": "<html><!-- ... --><style>.high-specificity.nested.selector{color:blue;}</style><bodyid=\"app\"><divclass=\"high-specificity\"><divclass=\"nested\"><!-- Will be red-500 --><divclass=\"selector text-red-500\"><!-- ... --></div></div></div><!-- Will be #bada55 --><divclass=\"text-red-500\"style=\"color:#bada55;\"><!-- ... --></div></body></html>"
                },
                {
                    "type": "p",
                    "text": "When using the selector strategy, be sure that the template file that includes your root selector is included in yourcontent configuration, otherwise all of your CSS will be removed when building for production."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Important modifier"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can make any utility important by adding a!character to the beginning:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"!font-medium font-bold\">This will be medium even though bold comes later in the CSS.</p>"
                },
                {
                    "type": "p",
                    "text": "The!always goes at the beginning of the utility name, after any variants, but before any prefix:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sm:hover:!tw-font-bold\">"
                },
                {
                    "type": "p",
                    "text": "This can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Separator"
                },
                {
                    "type": "p",
                    "text": "Theseparatoroption lets you customize which character should be used to separate modifiers (screen sizes,hover,focus, etc.) from utility names (text-center,items-end, etc.)."
                },
                {
                    "type": "p",
                    "text": "We use a colon by default (:), but it can be useful to change this if you’re using a templating language likePugthat doesn’t support special characters in class names."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={separator:'_',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Core Plugins"
                },
                {
                    "type": "p",
                    "text": "ThecorePluginssection lets you completely disable classes that Tailwind would normally generate by default if you don’t need them for your project."
                },
                {
                    "type": "p",
                    "text": "To disable specific core plugins, provide an object forcorePluginsthat sets those plugins tofalse:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={corePlugins:{float:false,objectFit:false,objectPosition:false,}}"
                },
                {
                    "type": "p",
                    "text": "If you’d like to safelist which core plugins should be enabled, provide an array that includes a list of the core plugins you’d like to use:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={corePlugins:['margin','padding','backgroundColor',// ...]}"
                },
                {
                    "type": "p",
                    "text": "If you’d like to disable all of Tailwind’s core plugins and simply use Tailwind as a tool for processing your own custom plugins, provide an empty array:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={corePlugins:[]}"
                },
                {
                    "type": "p",
                    "text": "Here’s a list of every core plugin for reference:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using multiple configurations"
                },
                {
                    "type": "p",
                    "text": "For projects that need to generate multiple CSS files using different Tailwind configurations, use the@configdirective to specify which config file should be used for each CSS entry point:"
                },
                {
                    "type": "code",
                    "code": "@config\"./tailwind.site.config.js\";@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "Learn more about the@configdirective in theFunctions & Directivesdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Referencing in JavaScript"
                },
                {
                    "type": "p",
                    "text": "It can often be useful to reference your configuration values in your own client-side JavaScript — for example to access some of your theme values when dynamically applying inline styles in a React or Vue component."
                },
                {
                    "type": "p",
                    "text": "To make this easy, Tailwind provides aresolveConfighelper you can use to generate a fully merged version of your configuration object:"
                },
                {
                    "type": "code",
                    "code": "importresolveConfigfrom'tailwindcss/resolveConfig'importtailwindConfigfrom'./tailwind.config.js'constfullConfig=resolveConfig(tailwindConfig)fullConfig.theme.width[4]// => '1rem'fullConfig.theme.screens.md// => '768px'fullConfig.theme.boxShadow['2xl']// => '0 25px 50px -12px rgba(0, 0, 0, 0.25)'"
                },
                {
                    "type": "p",
                    "text": "Note that this will transitively pull in a lot of our build-time dependencies, resulting in bigger client-side bundle size. To avoid this, we recommend using a tool likebabel-plugin-prevalto generate a static version of your configuration at build-time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​TypeScript types"
                },
                {
                    "type": "p",
                    "text": "We ship first-party TypeScript types for thetailwind.config.jsfile which give you all sorts of useful IDE support, and makes it a lot easier to make changes to your configuration without referencing the documentation quite as much."
                },
                {
                    "type": "p",
                    "text": "Configuration files generated with Tailwind CLI include the necessary type annotation by default, but to configure TypeScript types manually, just add the type annotation above your configuration object:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[// ...],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Creating your configuration file",
                        "Using a different file name",
                        "Using ESM or TypeScript",
                        "Generating a PostCSS configuration file",
                        "Scaffolding the entire default configuration",
                        "Configuration options",
                        "Content",
                        "Theme",
                        "Plugins",
                        "Presets",
                        "Prefix",
                        "Important",
                        "Separator",
                        "Core Plugins",
                        "Using multiple configurations",
                        "Referencing in JavaScript",
                        "TypeScript types"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/configuring-variants#enabling-extra-variants",
            "title": "Configuring Variants - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Configuring Variants"
                },
                {
                    "type": "p",
                    "text": "Configuring which utility variants are enabled in your project."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview"
                },
                {
                    "type": "p",
                    "text": "Thevariantssection of yourtailwind.config.jsfile is where you control which variants should be enabled for each core plugin:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{extend:{backgroundColor:['active'],// ...borderColor:['focus-visible','first'],// ...textColor:['visited'],}},}"
                },
                {
                    "type": "p",
                    "text": "Each property is a core plugin name pointing to an array of variants to generate for that plugin."
                },
                {
                    "type": "p",
                    "text": "The following variants are supported out of the box:"
                },
                {
                    "type": "p",
                    "text": "For more information about how variants work, read our documentation onresponsive variants,dark mode variants, andhover, focus and other state variants."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enabling extra variants"
                },
                {
                    "type": "p",
                    "text": "If you’d like to enable extra variants for a plugin in addition to the defaults, you can configure your variants using theextendkeyword, similar to how you can use extend inside of thethemesection:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{// The 'active' variant will be generated in addition to the defaultsextend:{backgroundColor:['active']}},}"
                },
                {
                    "type": "p",
                    "text": "Becausethe order of variants is important, any variants added under theextendkey are automatically ordered for you using a sensible default variant order. You can customize this order using thevariantOrderoption if necessary."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overriding default variants"
                },
                {
                    "type": "p",
                    "text": "Any variants configured directly under thevariantskey willoverridethe default variants for that plugin."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{// Only 'active' variants will be generatedbackgroundColor:['active'],},}"
                },
                {
                    "type": "p",
                    "text": "When overriding the default variants, make sure you always specifyallthe variants you’d like to enable, not just the new ones you’d like to add."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Ordering variants"
                },
                {
                    "type": "p",
                    "text": "It’s important to note that when overriding variants,variants are generated in the order you specify them, so variants at the end of the list will take precedence over variants at the beginning of the list."
                },
                {
                    "type": "p",
                    "text": "For example, herefocusvariants have the highest precedence forbackgroundColorutilities, buthovervariants have the highest precedence forborderColorutilities:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{backgroundColor:['hover','focus'],borderColor:['focus','hover'],},}"
                },
                {
                    "type": "code",
                    "code": "/* Generated CSS */.bg-black{background-color:#000}.bg-white{background-color:#fff}/* ... */.hover\\:bg-black:hover{background-color:#000}.hover\\:bg-white:hover{background-color:#fff}/* ... */.focus\\:bg-black:focus{background-color:#000}.focus\\:bg-white:focus{background-color:#fff}/* ... */.border-black{border-color:#000}.border-white{border-color:#fff}/* ... */.focus\\:border-black:focus{border-color:#000}.focus\\:border-white:focus{border-color:#fff}/* ... */.hover\\:border-black:hover{border-color:#000}.hover\\:border-white:hover{border-color:#fff}/* ... */"
                },
                {
                    "type": "p",
                    "text": "This means that given the following HTML:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"focus:bg-white hover:bg-black focus:border-white hover:border-black\">"
                },
                {
                    "type": "p",
                    "text": "…if the input was hoveredandfocused at the same time, the background would be white but the border would be black."
                },
                {
                    "type": "p",
                    "text": "Generating variants in order this way gives you the most flexibility as an end-user, but it’s also a sharp tool and can have unintended consequences if you aren’t careful. We recommendenabling extra variantsinstead of overriding the defaults whenever possible, and using this feature only as an escape hatch."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Special variants"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive"
                },
                {
                    "type": "p",
                    "text": "Theresponsivevariant is a special case in Tailwind and isnotimpacted by the order you list in your variants configuration."
                },
                {
                    "type": "p",
                    "text": "This is because theresponsivevariant automaticallystackswith other variants, meaning that if you specify bothresponsiveandhovervariants for a utility, Tailwind will generateresponsive hovervariants as well:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{backgroundColor:['responsive','hover'],borderColor:['responsive','focus'],},}"
                },
                {
                    "type": "p",
                    "text": "Responsive variants are grouped together and inserted at the end of your stylesheet by default to avoid specificity issues, regardless of whereresponsiveappears in yourvariantslist."
                },
                {
                    "type": "p",
                    "text": "If you’d like to customize this behavior for whatever reason, you can use the@tailwind screensdirective to specify where responsive variants should be inserted."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dark, motion-safe, and motion-reduce"
                },
                {
                    "type": "p",
                    "text": "Thedark,motion-safe, andmotion-reducevariants also stack with other variants, but unlikeresponsive, they stack in the same “slot”, so you can combine them with bothresponsiveand simple state variants, but not with each other."
                },
                {
                    "type": "p",
                    "text": "The order of these variants matter relative to each other, but not relative to other variants. There is just about no situation imaginable where these would conflict with each other in practice, so this ends up being a non-issue anyways."
                },
                {
                    "type": "p",
                    "text": "You can include these variants in any order in yourvariantsconfiguration and never notice the difference."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Default"
                },
                {
                    "type": "p",
                    "text": "You can use the specialDEFAULTvariant to control where the normal, non-prefixed version of a utility is generated relative to the other variants."
                },
                {
                    "type": "p",
                    "text": "This is an advanced feature and only really useful if you have a custom variant (likechildrenin the example below) that should have a lower precedence than the normal version of a utility."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{backgroundColor:['children','DEFAULT','hover','focus'],},}"
                },
                {
                    "type": "code",
                    "code": "/* Generated CSS */.children\\:bg-black>*{background-color:#000;}.children\\:bg-white>*{background-color:#fff;}.bg-black{background-color:#000}.bg-white{background-color:#fff}/* ... */.hover\\:bg-black:hover{background-color:#000}.hover\\:bg-white:hover{background-color:#fff}/* ... */.focus\\:bg-black:focus{background-color:#000}.focus\\:bg-white:focus{background-color:#fff}/* ... */"
                },
                {
                    "type": "p",
                    "text": "Learn more about creating custom variants in thevariant plugin documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using custom variants"
                },
                {
                    "type": "p",
                    "text": "If you’ve written or installed apluginthat adds a new variant, you can enable that variant by including it in your variants configuration just like if it were a built-in variant."
                },
                {
                    "type": "p",
                    "text": "For example, thetailwindcss-interaction-variants pluginadds agroup-disabledvariant (among others):"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.js{variants:{backgroundColor:['responsive','hover','focus','group-disabled'],},plugins:[require('tailwindcss-interaction-variants'),],}"
                },
                {
                    "type": "p",
                    "text": "Learn more about creating custom variants in thevariant plugin documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Ordering custom variants"
                },
                {
                    "type": "p",
                    "text": "If you’d like to specify a default sort position for a custom variant, override yourvariantOrderto include the custom variant:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={// ...variantOrder:['first','last','odd','even','visited','checked','group-hover','group-focus','focus-within','hover','focus','focus-visible','active','group-disabled',// Custom variant'disabled',],variants:{extend:{backgroundColor:['group-disabled'],}}}"
                },
                {
                    "type": "p",
                    "text": "You’ll need to specify the entire list when overriding thevariantOrderto include any custom variants."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Default variants reference"
                },
                {
                    "type": "p",
                    "text": "Here is a complete reference of Tailwind’s default variants configuration, which can be useful when you’d like to add a new variant while preserving the defaults."
                },
                {
                    "type": "code",
                    "code": "// Default configurationmodule.exports={// ...variants:{accessibility:['responsive','focus-within','focus'],alignContent:['responsive'],alignItems:['responsive'],alignSelf:['responsive'],animation:['responsive'],appearance:['responsive'],backdropBlur:['responsive'],backdropBrightness:['responsive'],backdropContrast:['responsive'],backdropFilter:['responsive'],backdropGrayscale:['responsive'],backdropHueRotate:['responsive'],backdropInvert:['responsive'],backdropOpacity:['responsive'],backdropSaturate:['responsive'],backdropSepia:['responsive'],backgroundAttachment:['responsive'],backgroundBlendMode:['responsive'],backgroundClip:['responsive'],backgroundColor:['responsive','dark','group-hover','focus-within','hover','focus'],backgroundImage:['responsive'],backgroundOpacity:['responsive','dark','group-hover','focus-within','hover','focus'],backgroundPosition:['responsive'],backgroundRepeat:['responsive'],backgroundSize:['responsive'],backgroundOrigin:['responsive'],blur:['responsive'],borderCollapse:['responsive'],borderColor:['responsive','dark','group-hover','focus-within','hover','focus'],borderOpacity:['responsive','dark','group-hover','focus-within','hover','focus'],borderRadius:['responsive'],borderStyle:['responsive'],borderWidth:['responsive'],boxDecorationBreak:['responsive'],boxShadow:['responsive','group-hover','focus-within','hover','focus'],boxSizing:['responsive'],brightness:['responsive'],clear:['responsive'],container:['responsive'],contrast:['responsive'],cursor:['responsive'],display:['responsive'],divideColor:['responsive','dark'],divideOpacity:['responsive','dark'],divideStyle:['responsive'],divideWidth:['responsive'],dropShadow:['responsive'],fill:['responsive'],filter:['responsive'],flex:['responsive'],flexDirection:['responsive'],flexGrow:['responsive'],flexShrink:['responsive'],flexWrap:['responsive'],float:['responsive'],fontFamily:['responsive'],fontSize:['responsive'],fontSmoothing:['responsive'],fontStyle:['responsive'],fontVariantNumeric:['responsive'],fontWeight:['responsive'],gap:['responsive'],gradientColorStops:['responsive','dark','hover','focus'],grayscale:['responsive'],gridAutoColumns:['responsive'],gridAutoFlow:['responsive'],gridAutoRows:['responsive'],gridColumn:['responsive'],gridColumnEnd:['responsive'],gridColumnStart:['responsive'],gridRow:['responsive'],gridRowEnd:['responsive'],gridRowStart:['responsive'],gridTemplateColumns:['responsive'],gridTemplateRows:['responsive'],height:['responsive'],hueRotate:['responsive'],inset:['responsive'],invert:['responsive'],isolation:['responsive'],justifyContent:['responsive'],justifyItems:['responsive'],justifySelf:['responsive'],letterSpacing:['responsive'],lineHeight:['responsive'],listStylePosition:['responsive'],listStyleType:['responsive'],margin:['responsive'],maxHeight:['responsive'],maxWidth:['responsive'],minHeight:['responsive'],minWidth:['responsive'],mixBlendMode:['responsive'],objectFit:['responsive'],objectPosition:['responsive'],opacity:['responsive','group-hover','focus-within','hover','focus'],order:['responsive'],outline:['responsive','focus-within','focus'],overflow:['responsive'],overscrollBehavior:['responsive'],padding:['responsive'],placeContent:['responsive'],placeItems:['responsive'],placeSelf:['responsive'],placeholderColor:['responsive','dark','focus'],placeholderOpacity:['responsive','dark','focus'],pointerEvents:['responsive'],position:['responsive'],resize:['responsive'],ringColor:['responsive','dark','focus-within','focus'],ringOffsetColor:['responsive','dark','focus-within','focus'],ringOffsetWidth:['responsive','focus-within','focus'],ringOpacity:['responsive','dark','focus-within','focus'],ringWidth:['responsive','focus-within','focus'],rotate:['responsive','hover','focus'],saturate:['responsive'],scale:['responsive','hover','focus'],sepia:['responsive'],skew:['responsive','hover','focus'],space:['responsive'],stroke:['responsive'],strokeWidth:['responsive'],tableLayout:['responsive'],textAlign:['responsive'],textColor:['responsive','dark','group-hover','focus-within','hover','focus'],textDecoration:['responsive','group-hover','focus-within','hover','focus'],textOpacity:['responsive','dark','group-hover','focus-within','hover','focus'],textOverflow:['responsive'],textTransform:['responsive'],transform:['responsive'],transformOrigin:['responsive'],transitionDelay:['responsive'],transitionDuration:['responsive'],transitionProperty:['responsive'],transitionTimingFunction:['responsive'],translate:['responsive','hover','focus'],userSelect:['responsive'],verticalAlign:['responsive'],visibility:['responsive'],whitespace:['responsive'],width:['responsive'],wordBreak:['responsive'],zIndex:['responsive','focus-within','focus']}}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Enabling extra variants",
                        "Overriding default variants",
                        "Ordering variants",
                        "Special variants",
                        "Responsive",
                        "Dark, motion-safe, and motion-reduce",
                        "Default",
                        "Using custom variants",
                        "Ordering custom variants",
                        "Default variants reference"
                    ]
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/container",
            "title": "Container - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Container"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using the container"
                },
                {
                    "type": "p",
                    "text": "Thecontainerclass sets themax-widthof an element to match themin-widthof the current breakpoint. This is useful if you’d prefer to design for a fixed set of screen sizes instead of trying to accommodate a fully fluid viewport."
                },
                {
                    "type": "p",
                    "text": "Note that unlike containers you might have used in other frameworks,Tailwind’s container does not center itself automatically and does not have any built-in horizontal padding."
                },
                {
                    "type": "p",
                    "text": "To center a container, use themx-autoutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"containermx-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To add horizontal padding, use thepx-*utilities:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"container mx-autopx-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "If you’d like to center your containers by default or include default horizontal padding, see thecustomization optionsbelow."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Responsive variants"
                },
                {
                    "type": "p",
                    "text": "Thecontainerclass also includes responsive variants likemd:containerby default that allow you to make something behave like a container at only a certain breakpoint and up:"
                },
                {
                    "type": "code",
                    "code": "<!-- Full-width fluid until the `md` breakpoint, then lock to container --><divclass=\"md:container md:mx-auto\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Customizing"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Centering by default"
                },
                {
                    "type": "p",
                    "text": "To center containers by default, set thecenteroption totruein thetheme.containersection of your config file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{container:{center:true,},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding horizontal padding"
                },
                {
                    "type": "p",
                    "text": "To add horizontal padding by default, specify the amount of padding you’d like using thepaddingoption in thetheme.containersection of your config file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{container:{padding:'2rem',},},}"
                },
                {
                    "type": "p",
                    "text": "If you want to specify a different padding amount for each breakpoint, use an object to provide adefaultvalue and any breakpoint-specific overrides:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{container:{padding:{DEFAULT:'1rem',sm:'2rem',lg:'4rem',xl:'5rem','2xl':'6rem',},},},};"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Using the container",
                        "Applying conditionally",
                        "Responsive variants",
                        "Customizing",
                        "Centering by default",
                        "Adding horizontal padding"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/content",
            "title": "Content - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Content"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting a pseudo-element’s content"
                },
                {
                    "type": "p",
                    "text": "Use thecontent-*utilities along with thebeforeandaftervariant modifiers to set the contents of the::beforeand::afterpseudo-elements."
                },
                {
                    "type": "p",
                    "text": "Out of the box,content-noneis the only available preconfigured content utility. And while you can add additional utilities bycustomizing your theme, it generally makes more sense to just use an arbitrary value."
                },
                {
                    "type": "p",
                    "text": "Use the square bracket notation to define any arbitrary content value on the fly."
                },
                {
                    "type": "code",
                    "code": "Higher resolution means more than just a better-quality image. With a Retina\n6K display,<aclass=\"text-blue-600after:content-['_↗']...\"href=\"https://www.\napple.com/pro-display-xdr/\"target=\"_blank\">Pro Display XDR</a>gives you\nnearly 40 percent more screen real estate than a 5K display.Higher resolution means more than just a better-quality image. With a Retina\n6K display,<aclass=\"text-sky-400after:content-['_↗']...\"href=\"https://www.\napple.com/pro-display-xdr/\"target=\"_blank\">Pro Display XDR</a>gives you\nnearly 40 percent more screen real estate than a 5K display."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Referencing an attribute value"
                },
                {
                    "type": "p",
                    "text": "These content utilities even support CSS features like theattr()function, which you can use to reference a value stored in an attribute:"
                },
                {
                    "type": "code",
                    "code": "<divbefore=\"Hello World\"class=\"before:content-[attr(before)]\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using spaces and underscores"
                },
                {
                    "type": "p",
                    "text": "Since whitespace denotes the end of a class in HTML, replace any spaces in an arbitrary value with an underscore:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['Hello_World']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "If you need to include an actual underscore, you can do this by escaping it with a backslash:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['Hello\\_World']\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:before:content-['Hovering']to only apply thebefore:content-['Hovering']utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['Not_Hovering']hover:before:content-['Hovering']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:before:content-['Desktop']to apply thebefore:content-['Desktop']utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['Mobile']md:before:content-['Desktop']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind only provides thecontent-noneutility. You can customize these values by editingtheme.contentortheme.extend.contentin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{content:{'link':'url(\"/icons/link.svg\")',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcontentvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['Hello_World']\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting a pseudo-element's content",
                        "Referencing an attribute value",
                        "Using spaces and underscores",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/content-configuration",
            "title": "Content Configuration - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Content Configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Thecontentsection of yourtailwind.config.jsfile is where you configure the paths to all of your HTML templates, JavaScript components, and any other source files that contain Tailwind class names."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "This guide covers everything you need to know to make sure Tailwind generates all of the CSS needed for your project."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Configuring source paths"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS works by scanning all of your HTML, JavaScript components, and any other template files for class names, then generating all of the corresponding CSS for those styles."
                },
                {
                    "type": "p",
                    "text": "In order for Tailwind to generate all of the CSS you need, it needs to know about every single file in your project that contains any Tailwind class names."
                },
                {
                    "type": "p",
                    "text": "Configure the paths to all of your content files in thecontentsection of your configuration file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}'],// ...}"
                },
                {
                    "type": "p",
                    "text": "Paths are configured asglob patterns, making it easy to match all of the content files in your project without a ton of configuration:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use*to match anything except slashes and hidden files",
                        "Use**to match zero or more directories",
                        "Use comma separate values between{}to match against a list of options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind uses thefast-globlibrary under-the-hood — check out their documentation for other supported pattern features."
                },
                {
                    "type": "p",
                    "text": "Paths are relative to your project root,notyourtailwind.config.jsfile, so if yourtailwind.config.jsfile is in a custom location, you should still write your paths relative to the root of your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pattern recommendations"
                },
                {
                    "type": "p",
                    "text": "For the best performance and to avoid false positives, be as specific as possible with your content configuration."
                },
                {
                    "type": "p",
                    "text": "If you use a really broad pattern like this one, Tailwind will even scannode_modulesfor content which is probably not what you want:"
                },
                {
                    "type": "p",
                    "text": "Don’t use extremely broad patterns"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "If you have any files you need to scan that are at the root of your project (often anindex.htmlfile), list that file independently so your other patterns can be more specific:"
                },
                {
                    "type": "p",
                    "text": "Be specific with your content patterns"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./components/**/*.{html,js}','./pages/**/*.{html,js}','./index.html',],// ...}"
                },
                {
                    "type": "p",
                    "text": "Some frameworks hide their main HTML entry point in a different place than the rest of your templates (oftenpublic/index.html), so if you are adding Tailwind classes to that file make sure it’s included in your configuration as well:"
                },
                {
                    "type": "p",
                    "text": "Remember to include your HTML entry point if applicable"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./public/index.html','./src/**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "If you have any JavaScript files that manipulate your HTML to add classes, make sure you include those as well:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[// ...'./src/**/*.js',],// ...}"
                },
                {
                    "type": "code",
                    "code": "// ...menuButton.addEventListener('click',function(){letclassList=document.getElementById('nav').classListclassList.toggle('hidden')classList.toggle('block')})// ..."
                },
                {
                    "type": "p",
                    "text": "It’s also important that you don’t scan any CSS files — configure Tailwind to scan yourtemplateswhere your class names are being used, never the CSS file that Tailwind is generating."
                },
                {
                    "type": "p",
                    "text": "Never include CSS files in your content configuration"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./src/**/*.css',],// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Class detection in-depth"
                },
                {
                    "type": "p",
                    "text": "The way Tailwind scans your source code for classes is intentionally very simple — we don’t actually parse or execute any of your code in the language it’s written in, we just use regular expressions to extract every string that could possibly be a class name."
                },
                {
                    "type": "p",
                    "text": "For example, here’s some HTML with every potential class name string individually highlighted:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:flex\"><divclass=\"md:flex-shrink-0\"><imgclass=\"rounded-lgmd:w-56\"src=\"/img/shopping.jpg\"alt=\"Womanpayingforapurchase\"></div><divclass=\"mt-4md:mt-0md:ml-6\"><divclass=\"uppercasetracking-widetext-smtext-indigo-600font-bold\">Marketing</div><ahref=\"/get-started\"class=\"blockmt-1text-lgleading-tightfont-semiboldtext-gray-900hover:underline\">Findingcustomersforyournewbusiness</a><pclass=\"mt-2text-gray-600\">Gettinganewbusinessoffthegroundisalotofhardwork.Herearefiveideasyoucanusetofindyourfirstcustomers.</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "We don’t just limit our search toclass=\"...\"attributes because you could be using classes anywhere, like in some JavaScript for toggling a menu:"
                },
                {
                    "type": "code",
                    "code": "<script>menuButton.addEventListener('click',function(){letclassList=document.getElementById('nav').classListclassList.toggle('hidden')classList.toggle('block')})</script>"
                },
                {
                    "type": "p",
                    "text": "By using this very simple approach, Tailwind works extremely reliably with any programming language, like JSX for example:"
                },
                {
                    "type": "code",
                    "code": "constsizes={md:'px-4 py-2 rounded-md text-base',lg:'px-5 py-3 rounded-lg text-lg',}constcolors={indigo:'bg-indigo-500 hover:bg-indigo-600 text-white',cyan:'bg-cyan-600 hover:bg-cyan-700 text-white',}exportdefaultfunctionButton({color,size,children}){letcolorClasses=colors[color]letsizeClasses=sizes[size]return(<buttontype=\"button\"className={`font-bold${sizeClasses}${colorClasses}`}>{children}</button>)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dynamic class names"
                },
                {
                    "type": "p",
                    "text": "The most important implication of how Tailwind extracts class names is that it will only find classes that existas complete unbroken stringsin your source files."
                },
                {
                    "type": "p",
                    "text": "If you use string interpolation or concatenate partial class names together, Tailwind will not find them and therefore will not generate the corresponding CSS:"
                },
                {
                    "type": "p",
                    "text": "Don’t construct class names dynamically"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-{{ error ? 'red' : 'green' }}-600\"></div>"
                },
                {
                    "type": "p",
                    "text": "In the example above, the stringstext-red-600andtext-green-600do not exist, so Tailwind will not generate those classes."
                },
                {
                    "type": "p",
                    "text": "Instead, make sure any class names you’re using exist in full:"
                },
                {
                    "type": "p",
                    "text": "Always use complete class names"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></div>"
                },
                {
                    "type": "p",
                    "text": "If you’re using a component library like React or Vue, this means you shouldn’t use props to dynamically construct classes:"
                },
                {
                    "type": "p",
                    "text": "Don’t use props to build class names dynamically"
                },
                {
                    "type": "code",
                    "code": "functionButton({color,children}){return(<buttonclassName={`bg-${color}-600 hover:bg-${color}-500 ...`}>{children}</button>)}"
                },
                {
                    "type": "p",
                    "text": "Instead, map props to complete class names that are statically detectable at build-time:"
                },
                {
                    "type": "p",
                    "text": "Always map props to static class names"
                },
                {
                    "type": "code",
                    "code": "functionButton({color,children}){constcolorVariants={blue:'bg-blue-600 hover:bg-blue-500',red:'bg-red-600 hover:bg-red-500',}return(<buttonclassName={`${colorVariants[color]}...`}>{children}</button>)}"
                },
                {
                    "type": "p",
                    "text": "This has the added benefit of letting you map different prop values to different color shades for example:"
                },
                {
                    "type": "code",
                    "code": "functionButton({color,children}){constcolorVariants={blue:'bg-blue-600 hover:bg-blue-500 text-white',red:'bg-red-500 hover:bg-red-400 text-white',yellow:'bg-yellow-300 hover:bg-yellow-400 text-black',}return(<buttonclassName={`${colorVariants[color]}...`}>{children}</button>)}"
                },
                {
                    "type": "p",
                    "text": "As long as you always use complete class names in your code, Tailwind will generate all of your CSS perfectly every time."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Working with third-party libraries"
                },
                {
                    "type": "p",
                    "text": "If you’re working with any third-party libraries (for exampleSelect2) and styling that library with your own custom CSS, we recommend writing those styleswithoutusing Tailwind’s@layerfeature:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;.select2-dropdown{@applyrounded-b-lg shadow-md;}.select2-search{@applyborder border-gray-300 rounded;}.select2-results__group{@applytext-lg font-bold text-gray-900;}/* ... */@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "This will ensure that Tailwindalwaysincludes those styles in your CSS, which is a lot easier than configuring Tailwind to scan the source code of a third-party library."
                },
                {
                    "type": "p",
                    "text": "If you’ve created your own reusable set of components that are styled with Tailwind and are importing them in multiple projects, make sure to configure Tailwind to scan those components for class names:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./components/**/*.{html,js}','./pages/**/*.{html,js}','./node_modules/@my-company/tailwind-components/**/*.js',],// ...}"
                },
                {
                    "type": "p",
                    "text": "This will make sure Tailwind generates all of the CSS needed for those components as well."
                },
                {
                    "type": "p",
                    "text": "If you’re working in a monorepo with workspaces, you may need to userequire.resolveto make sure Tailwind can see your content files:"
                },
                {
                    "type": "code",
                    "code": "constpath=require('path');module.exports={content:['./components/**/*.{html,js}','./pages/**/*.{html,js}',path.join(path.dirname(require.resolve('@my-company/tailwind-components')),'**/*.js'),],// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using relative paths"
                },
                {
                    "type": "p",
                    "text": "By default Tailwind resolves non-absolute content paths relative to the current working directory, not thetailwind.config.jsfile. This can lead to unexpected results if you run Tailwind from a different directory."
                },
                {
                    "type": "p",
                    "text": "To always resolve paths relative to thetailwind.config.jsfile, use the object notation for yourcontentconfiguration and set therelativeproperty totrue:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:{relative:true,files:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],},// ...}"
                },
                {
                    "type": "p",
                    "text": "This will likely become the default behavior in the next major version of the framework."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Configuring raw content"
                },
                {
                    "type": "p",
                    "text": "If for whatever reason you need to configure Tailwind to scan some raw content rather than the contents of a file, use an object with arawkey instead of a path:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',{raw:'<div class=\"font-bold\">',extension:'html'},],// ...}"
                },
                {
                    "type": "p",
                    "text": "There aren’t many valid use-cases for this —safelistingis usually what you really want instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Safelisting classes"
                },
                {
                    "type": "p",
                    "text": "For the smallest file size and best development experience, we highly recommend relying on yourcontentconfiguration to tell Tailwind which classes to generate as much as possible."
                },
                {
                    "type": "p",
                    "text": "Safelisting is a last-resort, and should only be used in situations where it’s impossible to scan certain content for class names. These situations are rare, and you should almost never need this feature."
                },
                {
                    "type": "p",
                    "text": "If you need to make sure Tailwind generates certain class names that don’t exist in your content files, use thesafelistoption:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],safelist:['bg-red-500','text-3xl','lg:text-4xl',]// ...}"
                },
                {
                    "type": "p",
                    "text": "One example of where this can be useful is if your site displays user-generated content and you want users to be able to use a constrained set of Tailwind classes in their content that might not exist in your own site’s source files."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using regular expressions"
                },
                {
                    "type": "p",
                    "text": "Tailwind supports pattern-based safelisting for situations where you need to safelist a lot of classes:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],safelist:['text-2xl','text-3xl',{pattern:/bg-(red|green|blue)-(100|200|300)/,},],// ...}"
                },
                {
                    "type": "p",
                    "text": "Patterns can only match against base utility names like/bg-red-.+/, and won’t match if the pattern includes a variant modifier like/hover:bg-red-.+/."
                },
                {
                    "type": "p",
                    "text": "If you want to force Tailwind to generate variants for any matched classes, include them using thevariantsoption:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],safelist:['text-2xl','text-3xl',{pattern:/bg-(red|green|blue)-(100|200|300)/,variants:['lg','hover','focus','lg:hover'],},],// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Discarding classes"
                },
                {
                    "type": "p",
                    "text": "Since Tailwind uses a very simple approach to detecting class names in your content, you may find that some classes are being generated that you don’t actually need."
                },
                {
                    "type": "p",
                    "text": "For example, this HTML would still generate thecontainerclass, even though that class is not actually being used:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-lg leading-8 text-gray-600\">Every custom pool we design starts as a used shippingcontainer, and is\n  retrofitted with state of the art technology and finishes to turn it into\n  a beautiful and functional way to entertain your guests all summer long.</div>"
                },
                {
                    "type": "p",
                    "text": "You may also want to prevent Tailwind from generating certain classes when those classes would conflict with some existing CSS, but you don’t want to go so far as to prefix all of your Tailwind classes."
                },
                {
                    "type": "p",
                    "text": "In these situations, you can use theblocklistoption to tell Tailwind to ignore specific classes that it detects in your content:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}',],blocklist:['container','collapse',],// ...}"
                },
                {
                    "type": "p",
                    "text": "Theblocklistoption only affects CSS that would be generated by Tailwind, not custom CSS you’ve authored yourself or are importing from another library."
                },
                {
                    "type": "p",
                    "text": "Unlikesafelist, theblocklistoption only supports strings, and you cannot block classes using regular expressions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Transforming source files"
                },
                {
                    "type": "p",
                    "text": "If you’re authoring content in a format thatcompilesto HTML (like Markdown), it often makes sense to compile that content to HTMLbeforescanning it for class names."
                },
                {
                    "type": "p",
                    "text": "Use thecontent.transformoption to transform any content matching a specific file extension before extracting classes:"
                },
                {
                    "type": "code",
                    "code": "constremark=require('remark')module.exports={content:{files:['./src/**/*.{html,md}'],transform:{md:(content)=>{returnremark().process(content)}}},// ...}"
                },
                {
                    "type": "p",
                    "text": "When usingcontent.transform, you’ll need to provide your source paths usingcontent.filesinstead of as a top-level array undercontent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Customizing extraction logic"
                },
                {
                    "type": "p",
                    "text": "Use theextractoption to override the logic Tailwind uses to detect class names for specific file extensions:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:{files:['./src/**/*.{html,wtf}'],extract:{wtf:(content)=>{returncontent.match(/[^<>\"'`\\s]*/g)}}},// ...}"
                },
                {
                    "type": "p",
                    "text": "This is an advanced feature and most users won’t need it — the default extraction logic in Tailwind works extremely well for almost all projects."
                },
                {
                    "type": "p",
                    "text": "As with transforming, when usingcontent.extract, you’ll need to provide your source paths usingcontent.filesinstead of as a top-level array undercontent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Troubleshooting"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Classes aren’t generated"
                },
                {
                    "type": "p",
                    "text": "If Tailwind isn’t generating classes, make sure yourcontentconfiguration is correct and matches all of the right source files."
                },
                {
                    "type": "p",
                    "text": "A common mistake is missing a file extension, for example if you’re usingjsxinstead ofjsfor your React components:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./src/**/*.{html,js}','./src/**/*.{html,js,jsx}'],// ...}"
                },
                {
                    "type": "p",
                    "text": "Or creating a new folder mid-project that wasn’t covered originally and forgetting to add it to your configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./pages/**/*.{html,js}','./components/**/*.{html,js}','./util/**/*.{html,js}'],// ...}"
                },
                {
                    "type": "p",
                    "text": "It could also be that you are trying to use dynamic class names, which won’t work because Tailwind doesn’t actually evaluate your source code and can only detect static unbroken class strings."
                },
                {
                    "type": "p",
                    "text": "Don’t construct class names dynamically"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-{{ error ? 'red' : 'green' }}-600\"></div>"
                },
                {
                    "type": "p",
                    "text": "Make sure you always use complete class names in your code:"
                },
                {
                    "type": "p",
                    "text": "Always use complete class names"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"{{ error ? 'text-red-600' : 'text-green-600' }}\"></div>"
                },
                {
                    "type": "p",
                    "text": "Read our documentation ondynamic class namesfor more details."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styles rebuild in an infinite loop"
                },
                {
                    "type": "p",
                    "text": "If your CSS seems to be rebuilding in an infinite loop, there’s a good chance it’s because your build tool doesn’t support thegloboption whenregistering PostCSS dependencies."
                },
                {
                    "type": "p",
                    "text": "Many build tools (such as webpack) don’t support this option, and as a result we can only tell them to watch specific files orentire directories. We can’t tell webpack toonlywatch*.htmlfiles in a directory for example."
                },
                {
                    "type": "p",
                    "text": "That means that if building your CSS causesanyfiles in those directories to change, a rebuild will be triggered, even if the changed file doesn’t match the extension in your glob."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[// With some build tools, your CSS will rebuild// any time *any* file in `src` changes.'./src/**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "So if you are watchingsrc/**/*.htmlfor changes, but you are writing your CSS output file tosrc/css/styles.css, you will get an infinite rebuild loop using some tools."
                },
                {
                    "type": "p",
                    "text": "Ideally we could warn you about this in the console, but many tools support it perfectly fine (including our own CLI tool), and we have no reliable way to detect what build tool you are using."
                },
                {
                    "type": "p",
                    "text": "To solve this problem, use more specific paths in yourcontentconfig, making sure to only include directories that won’t change when your CSS builds:"
                },
                {
                    "type": "code",
                    "code": "module.exports={content:['./src/**/*.{html,js}','./src/pages/**/*.{html,js}','./src/components/**/*.{html,js}','./src/layouts/**/*.{html,js}','./src/index.html',],// ...}"
                },
                {
                    "type": "p",
                    "text": "If necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files."
                },
                {
                    "type": "p",
                    "text": "If you absolutely can’t change your content config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend usingTailwind CLI, which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​It just isn’t working properly"
                },
                {
                    "type": "p",
                    "text": "If you are experiencing weird, hard to describe issues with the output, or things just don’t seem like they are working at all, there’s a good chance it’s due to your build tool not supporting PostCSS dependency messages properly(or at all). One known example of this currently isStencil."
                },
                {
                    "type": "p",
                    "text": "When you are having these sorts of issues, we recommend usingTailwind CLIto compile your CSS separately instead of trying to integrate Tailwind into your existing tooling."
                },
                {
                    "type": "p",
                    "text": "You can use packages likenpm-run-allorconcurrentlyto compile your CSS alongside your usual development command by adding some scripts to your project like this:"
                },
                {
                    "type": "code",
                    "code": "// package.json{// ...\"scripts\":{\"start\":\"concurrently \\\"npm run start:css\\\" \\\"react-scripts start\\\"\",\"start:css\":\"tailwindcss -o src/tailwind.css --watch\",\"build\":\"npm run build:css && react-scripts build\",\"build:css\":\"NODE_ENV=production tailwindcss -o src/tailwind.css -m\",},}"
                },
                {
                    "type": "p",
                    "text": "Either way, please be sure tocheck for an existing issueoropen a new oneso we can figure out the problem and try to improve compatibility with whatever tool you are using."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Configuring source paths",
                        "Pattern recommendations",
                        "Class detection in-depth",
                        "Dynamic class names",
                        "Working with third-party libraries",
                        "Using relative paths",
                        "Configuring raw content",
                        "Safelisting classes",
                        "Using regular expressions",
                        "Discarding classes",
                        "Transforming source files",
                        "Customizing extraction logic",
                        "Troubleshooting",
                        "Classes aren't generated",
                        "Styles rebuild in an infinite loop",
                        "It just isn't working properly"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/contrast",
            "title": "Contrast - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Contrast"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing element contrast"
                },
                {
                    "type": "p",
                    "text": "Use thecontrast-*utilities to control an element’s contrast."
                },
                {
                    "type": "p",
                    "text": "contrast-50"
                },
                {
                    "type": "p",
                    "text": "contrast-100"
                },
                {
                    "type": "p",
                    "text": "contrast-125"
                },
                {
                    "type": "p",
                    "text": "contrast-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"contrast-50...\"><!-- ... --></div><divclass=\"contrast-100...\"><!-- ... --></div><divclass=\"contrast-125...\"><!-- ... --></div><divclass=\"contrast-200...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert contrast-125md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:contrast-150to only apply thecontrast-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"contrast-125hover:contrast-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:contrast-150to apply thecontrast-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"contrast-125md:contrast-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposecontrastutilities. You can customize these values by editingtheme.contrastortheme.extend.contrastin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{contrast:{25:'.25',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcontrastvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"contrast-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing element contrast",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/cursor",
            "title": "Cursor - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Cursor"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the cursor style"
                },
                {
                    "type": "p",
                    "text": "Use thecursor-*utilities to control which cursor is displayed when hovering over an element."
                },
                {
                    "type": "p",
                    "text": "Hover over each button to see the cursor change"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"cursor-pointer...\">Submit</button><buttontype=\"button\"class=\"cursor-progress...\">Saving...</button><buttontype=\"button\"disabledclass=\"cursor-not-allowed...\">Confirm</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:cursor-autoto only apply thecursor-autoutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"cursor-not-allowedfocus:cursor-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:cursor-autoto apply thecursor-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"cursor-not-allowedmd:cursor-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includescursorutilities for many built in options. You can customize these values by editingtheme.cursorortheme.extend.cursorin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{cursor:{'fancy':'url(hand.cur), pointer',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcursorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"cursor-[url(hand.cur),_pointer]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the cursor style",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/customizing-colors",
            "title": "Customizing Colors - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Customizing Colors"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Default color palette"
                },
                {
                    "type": "p",
                    "text": "Tailwind includes an expertly-crafted default color palette out-of-the-box that is a great starting point if you don’t have your own specific branding in mind."
                },
                {
                    "type": "p",
                    "text": "But when you do need to customize your palette, you can configure your colors under thecolorskey in thethemesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// Configure your color palette here}}}"
                },
                {
                    "type": "p",
                    "text": "When it comes to building a custom color palette, you can eitherconfigure your own custom colorsfrom scratch if you know exactly what you want, orcurate your colorsfrom our extensive included color palette if you want a head start."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom colors"
                },
                {
                    "type": "p",
                    "text": "If you’d like to completely replace the default color palette with your own custom colors, add your colors directly under thetheme.colorssection of your configuration file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{transparent:'transparent',current:'currentColor','white':'#ffffff','purple':'#3f3cbb','midnight':'#121063','metal':'#565584','tahiti':'#3ab7bf','silver':'#ecebff','bubble-gum':'#ff77e9','bermuda':'#78dcca',},},}"
                },
                {
                    "type": "p",
                    "text": "By default, these colors will be made available everywhere in the framework where you use colors, like thetext colorutilities,border colorutilities,background colorutilities, and more."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-midnighttext-tahiti\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Don’t forget to include values liketransparentandcurrentColorif you want to use them in your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Color object syntax"
                },
                {
                    "type": "p",
                    "text": "When your palette includes multiple shades of the same color, it can be convenient to group them together using our nested color object syntax:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{transparent:'transparent',current:'currentColor','white':'#ffffff','tahiti':{100:'#cffafe',200:'#a5f3fc',300:'#67e8f9',400:'#22d3ee',500:'#06b6d4',600:'#0891b2',700:'#0e7490',800:'#155e75',900:'#164e63',},// ...},},}"
                },
                {
                    "type": "p",
                    "text": "The nested keys will be combined with the parent key to form class names likebg-tahiti-400."
                },
                {
                    "type": "p",
                    "text": "Like many other places in Tailwind, the specialDEFAULTkey can be used when you want to define a value with no suffix:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// ...'tahiti':{light:'#67e8f9',DEFAULT:'#06b6d4',dark:'#0e7490',},// ...},},}"
                },
                {
                    "type": "p",
                    "text": "This will create classes likebg-tahiti,bg-tahiti-light, andbg-tahiti-dark."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need a one-off custom color in your project, consider using Tailwind’s arbitrary value notation to generate a class for that color on-demand instead of adding it to your theme:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-[#1da1f2] text-white ...\"><svg><!-- ... --></svg>Share on Twitter</button>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theusing arbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Generating colors"
                },
                {
                    "type": "p",
                    "text": "If you’re wondering how we automatically generated the 50–950 shades of each color, bad news — color is complicated and to get the absolute best results we picked all of Tailwind’s default colors by hand, meticulously balancing them by eye and testing them in real designs to make sure we were happy with them."
                },
                {
                    "type": "p",
                    "text": "If you are creating your own custom color palette and don’t feel confident doing it by hand,UI Colorsis a great tool that can give you a good starting point based on any custom color."
                },
                {
                    "type": "p",
                    "text": "Two other useful tools we recommend for building your own palettes arePalettteandColorBox— they won’t do the work for you but their interfaces are well-designed for doing this sort of work."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using the default colors"
                },
                {
                    "type": "p",
                    "text": "If you don’t have a set of completely custom colors in mind for your project, you can curate your colors from our default palette by importingtailwindcss/colorsin your configuration file and choosing the colors you want to use:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.gray,emerald:colors.emerald,indigo:colors.indigo,yellow:colors.yellow,},},}"
                },
                {
                    "type": "p",
                    "text": "This can be helpful if you want to deliberately limit your color palette and reduce the number of class names suggested byIntelliSense."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Aliasing color names"
                },
                {
                    "type": "p",
                    "text": "You can also alias the colors in our default palette to make the names simpler and easier to remember:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.slate,green:colors.emerald,purple:colors.violet,yellow:colors.amber,pink:colors.fuchsia,},},}"
                },
                {
                    "type": "p",
                    "text": "This is especially common for grays, as you usually only use one set in any given project and it’s nice to be able to typebg-gray-300instead ofbg-neutral-300for example."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding additional colors"
                },
                {
                    "type": "p",
                    "text": "If you’d like to add a brand new color to the default palette, add it in thetheme.extend.colorssection of your configuration file:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{colors:{brown:{50:'#fdf8f6',100:'#f2e8e5',200:'#eaddd7',300:'#e0cec7',400:'#d2bab0',500:'#bfa094',600:'#a18072',700:'#977669',800:'#846358',900:'#43302b',},}},},}"
                },
                {
                    "type": "p",
                    "text": "You can also usetheme.extend.colorsto add additional shades to an existing color if it’s needed for your design:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{colors:{blue:{950:'#17275c',},}},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling a default color"
                },
                {
                    "type": "p",
                    "text": "If you’d like to disable any of the default colors, the best approach is to override the default color palette and just include the colors youdowant:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:colors.black,white:colors.white,gray:colors.gray,emerald:colors.emerald,indigo:colors.indigo,yellow:colors.yellow,},},}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Naming your colors"
                },
                {
                    "type": "p",
                    "text": "Tailwind uses literal color names(like red, green, etc.)and a numeric scale(where 50 is light and 900 is dark)by default. We think this is the best choice for most projects, and have found it easier to maintain than using abstract names likeprimaryordanger."
                },
                {
                    "type": "p",
                    "text": "That said, you can name your colors in Tailwind whatever you like, and if you’re working on a project that needs to support multiple themes for example, it might make sense to use more abstract names:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{primary:'#5c6ac4',secondary:'#ecc94b',// ...}}}"
                },
                {
                    "type": "p",
                    "text": "You can configure those colors explicitly like we have above, or you can pull in colors from our default color palette and alias them:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{colors:{primary:colors.indigo,secondary:colors.yellow,neutral:colors.gray,}}}"
                },
                {
                    "type": "p",
                    "text": "Again, we recommend sticking to the default naming convention for most projects, and only using abstract names if you have a really good reason."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using CSS variables"
                },
                {
                    "type": "p",
                    "text": "If you’d like to define your colors as CSS variables, you’ll need to define those variables as just the colorchannelsif you want them to work with theopacity modifier syntax:"
                },
                {
                    "type": "p",
                    "text": "Define your CSS variables as channels with no color space function"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{--color-primary:255115179;--color-secondary:111114185;/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "Don’t include the color space function or opacity modifiers won’t work"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{--color-primary:rgb(255115179);--color-secondary:rgb(111114185);/* ... */}}"
                },
                {
                    "type": "p",
                    "text": "Then define your colors in your configuration file, being sure to include the color space you’re using and a default alpha value for color spaces likergbawhere the alpha channel is required:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{// Using modern `rgb`primary:'rgb(var(--color-primary))',secondary:'rgb(var(--color-secondary))',// Using modern `hsl`primary:'hsl(var(--color-primary))',secondary:'hsl(var(--color-secondary))',// Using legacy `rgba`primary:'rgba(var(--color-primary), 1)',secondary:'rgba(var(--color-secondary), 1)',}}}"
                },
                {
                    "type": "p",
                    "text": "When defining your colors this way, make sure that the format of your CSS variables is correct for the color function you are using. You’ll want to use spaces if using the modernspace-separated syntax, and commas if using legacy functions likergbaorhsla:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{:root{/* For rgb(255 115 179 / 1) */--color-primary:255115179;/* For hsl(333deg 100% 73% / 1) */--color-primary:333deg100%73%;/* For rgba(255, 115, 179, 1) */--color-primary:255,115,179;}}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Default color palette",
                        "Using custom colors",
                        "Color object syntax",
                        "Arbitrary values",
                        "Generating colors",
                        "Using the default colors",
                        "Aliasing color names",
                        "Adding additional colors",
                        "Disabling a default color",
                        "Naming your colors",
                        "Using CSS variables"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/customizing-spacing",
            "title": "Customizing Spacing - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Customizing Spacing"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use thespacingkey in thethemesection of yourtailwind.config.jsfile to customize Tailwind’sdefault spacing/sizing scale."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{spacing:{'1':'8px','2':'12px','3':'16px','4':'24px','5':'32px','6':'48px',}}}"
                },
                {
                    "type": "p",
                    "text": "By default the spacing scale is inherited by thepadding,margin,width,minWidth,maxWidth,height,minHeight,maxHeight,gap,inset,space,translate,scrollMargin, andscrollPaddingcore plugins."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extending the default spacing scale"
                },
                {
                    "type": "p",
                    "text": "As described in thetheme documentation, if you’d like to extend the default spacing scale, you can do so using thetheme.extend.spacingsection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{spacing:{'13':'3.25rem','15':'3.75rem','128':'32rem','144':'36rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "This will generate classes likep-13,m-15, andh-128in addition to all of Tailwind’s default spacing/sizing utilities."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overriding the default spacing scale"
                },
                {
                    "type": "p",
                    "text": "As described in thetheme documentation, if you’d like to override the default spacing scale, you can do so using thetheme.spacingsection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{spacing:{sm:'8px',md:'12px',lg:'16px',xl:'24px',}}}"
                },
                {
                    "type": "p",
                    "text": "This will disable Tailwind’s default spacing scale and generate classes likep-sm,m-md,w-lg, andh-xlinstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Default spacing scale"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a generous and comprehensive numeric spacing scale. The values are proportional, so16is twice as much spacing as8for example. One spacing unit is equal to0.25rem, which translates to4pxby default in common browsers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Extending the default spacing scale",
                        "Overriding the default spacing scale",
                        "Default spacing scale"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/dark-mode",
            "title": "Dark Mode - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Dark Mode"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "p",
                    "text": "Now that dark mode is a first-class feature of many operating systems, it’s becoming more and more common to design a dark version of your website to go along with the default design."
                },
                {
                    "type": "p",
                    "text": "To make this as easy as possible, Tailwind includes adarkvariant that lets you style your site differently when dark mode is enabled:"
                },
                {
                    "type": "p",
                    "text": "Light mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "p",
                    "text": "Dark mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-whitedark:bg-slate-800rounded-lg px-6 py-8 ring-1 ring-slate-900/5 shadow-xl\"><div><spanclass=\"inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg\"><svgclass=\"h-6 w-6 text-white\"xmlns=\"http://www.w3.org/2000/svg\"fill=\"none\"viewBox=\"0 0 24 24\"stroke=\"currentColor\"aria-hidden=\"true\"><!-- ... --></svg></span></div><h3class=\"text-slate-900dark:text-whitemt-5 text-base font-medium tracking-tight\">Writes Upside-Down</h3><pclass=\"text-slate-500dark:text-slate-400mt-2 text-sm\">The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.</p></div>"
                },
                {
                    "type": "p",
                    "text": "By default this uses theprefers-color-schemeCSS media feature, but you can also build sites that support toggling dark mode manually using the‘selector’ strategy."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Toggling dark mode manually"
                },
                {
                    "type": "p",
                    "text": "If you want to support toggling dark mode manually instead of relying on the operating system preference, use theselectorstrategy instead of themediastrategy:"
                },
                {
                    "type": "p",
                    "text": "Theselectorstrategy replaced theclassstrategy in Tailwind CSS v3.4.1."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={darkMode:'selector',// ...}"
                },
                {
                    "type": "p",
                    "text": "Now instead ofdark:{class}classes being applied based onprefers-color-scheme, they will be applied whenever thedarkclass is present earlier in the HTML tree."
                },
                {
                    "type": "code",
                    "code": "<!-- Dark mode not enabled --><html><body><!-- Will be white --><divclass=\"bg-whitedark:bg-black\"><!-- ... --></div></body></html><!-- Dark mode enabled --><htmlclass=\"dark\"><body><!-- Will be black --><divclass=\"bg-whitedark:bg-black\"><!-- ... --></div></body></html>"
                },
                {
                    "type": "p",
                    "text": "If you’ve seta prefixin your Tailwind config, be sure to add that to thedarkclass. For example, if you have a prefix oftw-, you’ll need to use thetw-darkclass to enable dark mode."
                },
                {
                    "type": "p",
                    "text": "How you add thedarkclass to thehtmlelement is up to you, but a common approach is to use a bit of JavaScript that reads a preference from somewhere (likelocalStorage) and updates the DOM accordingly."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing the selector"
                },
                {
                    "type": "p",
                    "text": "Some frameworks (like NativeScript) have their own approach to enabling dark mode and add a different class name when dark mode is active."
                },
                {
                    "type": "p",
                    "text": "You can customize the dark mode selector by settingdarkModeto an array with your custom selector as the second item:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={darkMode:['selector','[data-mode=\"dark\"]'],// ...}"
                },
                {
                    "type": "p",
                    "text": "Tailwind will automatically wrap your custom dark mode selector with the:where()pseudo-class to make sure the specificity is the same as it would be when using themediastrategy:"
                },
                {
                    "type": "code",
                    "code": ".dark\\:underline:where([data-mode=\"dark\"],[data-mode=\"dark\"]*){text-decoration-line:underline}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Supporting system preference and manual selection"
                },
                {
                    "type": "p",
                    "text": "Theselectorstrategy can be used to support both the user’s system preferenceora manually selected mode by using thewindow.matchMedia()API."
                },
                {
                    "type": "p",
                    "text": "Here’s a simple example of how you can support light mode, dark mode, as well as respecting the operating system preference:"
                },
                {
                    "type": "code",
                    "code": "// On page load or when changing themes, best to add inline in `head` to avoid FOUCdocument.documentElement.classList.toggle('dark',localStorage.theme==='dark'||(!('theme'inlocalStorage)&&window.matchMedia('(prefers-color-scheme: dark)').matches))// Whenever the user explicitly chooses light modelocalStorage.theme='light'// Whenever the user explicitly chooses dark modelocalStorage.theme='dark'// Whenever the user explicitly chooses to respect the OS preferencelocalStorage.removeItem('theme')"
                },
                {
                    "type": "p",
                    "text": "Again you can manage this however you like, even storing the preference server-side in a database and rendering the class on the server — it’s totally up to you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overriding the dark variant"
                },
                {
                    "type": "p",
                    "text": "If you’d like to replace Tailwind’s built-in dark variant with your own custom variant, you can do so using thevariantdark mode strategy:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={darkMode:['variant','&:not(.light *)'],// ...}"
                },
                {
                    "type": "p",
                    "text": "When using this strategy Tailwind will not modify the provided selector in any way, so be mindful of it’s specificity and consider using the:where()pseudo-class to ensure it has the same specificity as other utilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using multiple selectors"
                },
                {
                    "type": "p",
                    "text": "If you have multiple scenarios where dark mode should be enabled, you can specify all of them by providing an array:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={darkMode:['variant',['@media (prefers-color-scheme: dark) { &:not(.light *) }','&:is(.dark *)',]],// ...}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Basic usage",
                        "Toggling dark mode manually",
                        "Customizing the selector",
                        "Supporting system preference and manual selection",
                        "Overriding the dark variant",
                        "Using multiple selectors"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/display",
            "title": "Display - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Display"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Block & Inline"
                },
                {
                    "type": "p",
                    "text": "Use theinline,inline-block, andblockutilities to control the flow of text and elements."
                },
                {
                    "type": "code",
                    "code": "<div>When controlling the flow of text, using the CSS property<spanclass=\"inline\">display: inline</span>will cause the text inside the element to wrap normally.\n\n  While using the property<spanclass=\"inline-block\">display: inline-block</span>will wrap the element to prevent the text inside from extending beyond its parent.\n\n  Lastly, using the property<spanclass=\"block\">display: block</span>will put the element on its own line and fill its parent.</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Flow Root"
                },
                {
                    "type": "p",
                    "text": "Use theflow-rootutility to create a block-level element with its ownblock formatting context."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"p-4\"><divclass=\"flow-root...\"><divclass=\"my-4 ...\">Well, let me tell you something, ...</div></div><divclass=\"flow-root...\"><divclass=\"my-4 ...\">Sure, go ahead, laugh if you want...</div></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Flex"
                },
                {
                    "type": "p",
                    "text": "Use theflexutility to create a block-level flex container."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexitems-center\"><imgsrc=\"path/to/image.jpg\"><div><strong>Andrew Alfred</strong><span>Technical advisor</span></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Inline Flex"
                },
                {
                    "type": "p",
                    "text": "Use theinline-flexutility to create an inline flex container that flows with text."
                },
                {
                    "type": "p",
                    "text": "Today I spent most of the day researching ways to take advantage of the fact that bottles can be returned for 10 cents in Michigan, but only 5 cents here.Kramerkeeps telling me there is no way to make it work, that he has run the numbers on every possible approach, but I just have to believe there's a way to make it work, there's simply too much opportunity here."
                },
                {
                    "type": "code",
                    "code": "<p>Today I spent most of the day researching ways to ...<spanclass=\"inline-flexitems-baseline\"><imgsrc=\"path/to/image.jpg\"alt=\"\"class=\"self-center w-5 h-5 rounded-full mx-1\"/><span>Kramer</span></span>keeps telling me there is no way to make it work, that ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Grid"
                },
                {
                    "type": "p",
                    "text": "Use thegridutility to create a grid container."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgap-4 grid-cols-3 grid-rows-3\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Inline Grid"
                },
                {
                    "type": "p",
                    "text": "Use theinline-gridutility to create an inline grid container."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-gridgrid-cols-3 gap-4\"><span>01</span><span>02</span><span>03</span><span>04</span><span>05</span><span>06</span></span><spanclass=\"inline-gridgrid-cols-3 gap-4\"><span>01</span><span>02</span><span>03</span><span>04</span><span>05</span><span>06</span></span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Contents"
                },
                {
                    "type": "p",
                    "text": "Use thecontentsutility to create a “phantom” container whose children act like direct children of the parent."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-1 ...\">01</div><divclass=\"contents\"><divclass=\"flex-1 ...\">02</div><divclass=\"flex-1 ...\">03</div></div><divclass=\"flex-1 ...\">04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Table"
                },
                {
                    "type": "p",
                    "text": "Use thetable,table-row,table-cell,table-caption,table-column,table-column-group,table-header-group,table-row-group, andtable-footer-grouputilities to create elements that behave like their respective table elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"tablew-full ...\"><divclass=\"table-header-group...\"><divclass=\"table-row\"><divclass=\"table-celltext-left ...\">Song</div><divclass=\"table-celltext-left ...\">Artist</div><divclass=\"table-celltext-left ...\">Year</div></div></div><divclass=\"table-row-group\"><divclass=\"table-row\"><divclass=\"table-cell...\">The Sliding Mr. Bones (Next Stop, Pottersville)</div><divclass=\"table-cell...\">Malcolm Lockyer</div><divclass=\"table-cell...\">1961</div></div><divclass=\"table-row\"><divclass=\"table-cell...\">Witchy Woman</div><divclass=\"table-cell...\">The Eagles</div><divclass=\"table-cell...\">1972</div></div><divclass=\"table-row\"><divclass=\"table-cell...\">Shining Star</div><divclass=\"table-cell...\">Earth, Wind, and Fire</div><divclass=\"table-cell...\">1975</div></div></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hidden"
                },
                {
                    "type": "p",
                    "text": "Use thehiddenutility to set an element todisplay: noneand remove it from the page layout (compare withinvisiblefrom thevisibilitydocumentation)."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"hidden...\">01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:inline-flexto only apply theinline-flexutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexhover:inline-flex\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:inline-flexto apply theinline-flexutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexmd:inline-flex\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Block & Inline",
                        "Flow Root",
                        "Flex",
                        "Inline Flex",
                        "Grid",
                        "Inline Grid",
                        "Contents",
                        "Table",
                        "Hidden",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/divide-color",
            "title": "Divide Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Divide Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the divide color"
                },
                {
                    "type": "p",
                    "text": "Use thedivide-*utilities to control the border color between elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-blue-200\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of the divide color."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y-4 divide-slate-400/25...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y-4 divide-slate-400/[.24]...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:divide-pink-400to only apply thedivide-pink-400utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-teal-400hover:divide-pink-400\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:divide-pink-400to apply thedivide-pink-400utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-teal-400md:divide-pink-400\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asdividecolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourdividecolors by editingtheme.divideColorortheme.extend.divideColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offdivide colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-[#243c5a]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the divide color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/divide-style",
            "title": "Divide Style - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Divide Style"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Set the divide style"
                },
                {
                    "type": "p",
                    "text": "Use thedivide-*utilities to control the border style between elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-ydivide-dashed\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:divide-solidto only apply thedivide-solidutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-dashedhover:divide-solid\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:divide-solidto apply thedivide-solidutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-dashedmd:divide-solid\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Set the divide style",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/divide-width",
            "title": "Divide Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Divide Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add borders between horizontal children"
                },
                {
                    "type": "p",
                    "text": "Use thedivide-x-*utilities to add borders between horizontal elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3divide-x\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add borders between stacked children"
                },
                {
                    "type": "p",
                    "text": "Use thedivide-y-*utilities to add borders between stacked elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-1divide-y\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Reversing children order"
                },
                {
                    "type": "p",
                    "text": "If your elements are in reverse order (using sayflex-row-reverseorflex-col-reverse), use thedivide-x-reverseordivide-y-reverseutilities to ensure the border is added to the correct side of each element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-col-reverse divide-y divide-y-reverse\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:divide-y-8to only apply thedivide-y-8utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-gray-400hover:divide-y-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:divide-y-8to apply thedivide-y-8utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-y divide-gray-400md:divide-y-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "The divide width scale inherits its values from theborderWidthscale by default, so if you’d like to customize your values for both border width and divide width together, use thetheme.borderWidthsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{borderWidth:{DEFAULT:'1px','0':'0','2':'2px','3':'3px','4':'4px','6':'6px','8':'8px',}}}"
                },
                {
                    "type": "p",
                    "text": "To customize only the divide width values, use thetheme.divideWidthsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{divideWidth:{DEFAULT:'1px','0':'0','2':'2px','3':'3px','4':'4px','6':'6px','8':'8px',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offdivide widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"divide-x-[3px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Add borders between horizontal children",
                        "Add borders between stacked children",
                        "Reversing children order",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/drop-shadow",
            "title": "Drop Shadow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Drop Shadow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding a drop shadow"
                },
                {
                    "type": "p",
                    "text": "Use thedrop-shadow-*utilities to add a drop shadow to an element."
                },
                {
                    "type": "p",
                    "text": "drop-shadow-md"
                },
                {
                    "type": "p",
                    "text": "drop-shadow-lg"
                },
                {
                    "type": "p",
                    "text": "drop-shadow-xl"
                },
                {
                    "type": "p",
                    "text": "drop-shadow-2xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"drop-shadow-md...\"><!-- ... --></div><divclass=\"drop-shadow-lg...\"><!-- ... --></div><divclass=\"drop-shadow-xl...\"><!-- ... --></div><divclass=\"drop-shadow-2xl...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is useful for applying shadows to irregular shapes, like text and SVG elements. For applying shadows to regular elements, you probably want to usebox shadowinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert drop-shadow-xlmd:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:drop-shadow-xlto only apply thedrop-shadow-xlutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"drop-shadow-mdhover:drop-shadow-xl\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:drop-shadow-xlto apply thedrop-shadow-xlutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"drop-shadow-mdmd:drop-shadow-xl\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposedropShadowutilities. You can customize these values by editingtheme.dropShadowortheme.extend.dropShadowin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{dropShadow:{'3xl':'0 35px 35px rgba(0, 0, 0, 0.25)','4xl':['0 35px 35px rgba(0, 0, 0, 0.25)','0 45px 65px rgba(0, 0, 0, 0.15)']}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offdrop-shadowvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"drop-shadow-[0_35px_35px_rgba(0,0,0,0.25)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding a drop shadow",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/editor-setup",
            "title": "Editor Setup - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Editor Setup"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Syntax support"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS uses a lot of custom CSS at-rules like@tailwind,@apply, and@config, and in many editors this can trigger warnings or errors where these rules aren’t recognized."
                },
                {
                    "type": "p",
                    "text": "The solution to this is almost always to install a plugin for your editor/IDE for PostCSS language support instead of regular CSS."
                },
                {
                    "type": "p",
                    "text": "If you’re using VS Code, our officialTailwind CSS IntelliSenseplugin includes a dedicated Tailwind CSS language mode that has support for all of the custom at-rules and functions Tailwind uses."
                },
                {
                    "type": "p",
                    "text": "In some cases, you may need to disable native CSS linting/validations if your editor is very strict about the syntax it expects in your CSS files."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​IntelliSense for VS Code"
                },
                {
                    "type": "p",
                    "text": "The officialTailwind CSS IntelliSenseextension for Visual Studio Code enhances the Tailwind development experience by providing users with advanced features such as autocomplete, syntax highlighting, and linting."
                },
                {
                    "type": "list",
                    "items": [
                        "Autocomplete. Intelligent suggestions for class names, as well asCSS functions and directives.",
                        "Linting. Highlights errors and potential bugs in both your CSS and your markup.",
                        "Hover Previews. See the complete CSS for a Tailwind class name by hovering over it.",
                        "Syntax Highlighting. Provides syntax definitions so that Tailwind features are highlighted correctly."
                    ]
                },
                {
                    "type": "p",
                    "text": "Check out the projecton GitHubto learn more, oradd it to Visual Studio Codeto get started now."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Automatic class sorting with Prettier"
                },
                {
                    "type": "p",
                    "text": "We maintain an officialPrettier pluginfor Tailwind CSS that automatically sorts your classes following ourrecommended class order."
                },
                {
                    "type": "p",
                    "text": "It works seamlessly with custom Tailwind configurations, and because it’s just a Prettier plugin, it works anywhere Prettier works — including every popular editor and IDE, and of course on the command line."
                },
                {
                    "type": "code",
                    "code": "<!-- Before --><buttonclass=\"text-white px-4 sm:px-8 py-2 sm:py-3 bg-sky-700 hover:bg-sky-800\">...</button><!-- After --><buttonclass=\"bg-sky-700 px-4 py-2 text-white hover:bg-sky-800 sm:px-8 sm:py-3\">...</button>"
                },
                {
                    "type": "p",
                    "text": "Check out the pluginon GitHubto learn more and get started."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​JetBrains IDEs"
                },
                {
                    "type": "p",
                    "text": "JetBrains IDEs like WebStorm, PhpStorm, and others include support for intelligent Tailwind CSS completions in your HTML and when using@apply."
                },
                {
                    "type": "p",
                    "text": "Learn more about Tailwind CSS support in JetBrains IDEs →"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Syntax support",
                        "IntelliSense for VS Code",
                        "Automatic class sorting with Prettier",
                        "JetBrains IDEs"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/examples/forms",
            "title": "Tailwind CSS Components - Tailwind UI",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "By the makers of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Beautiful UI components, crafted with Tailwind CSS."
                },
                {
                    "type": "p",
                    "text": "Over 500+ professionally designed, fully responsive, expertly crafted component examples you can drop into your Tailwind projects and customize to your heart’s content."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "500+ Components"
                },
                {
                    "type": "p",
                    "text": "Beautifully designed, expertly crafted components that follow all accessibility best practices and are easy to customize."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "React, Vue, and HTML"
                },
                {
                    "type": "p",
                    "text": "Interactive examples for React and Vue powered by Headless UI, plus vanilla HTML if you’d rather write any necessary JS yourself."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fully Responsive"
                },
                {
                    "type": "p",
                    "text": "Every example is fully responsive and carefully designed and implemented to look great at any screen size."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Marketing"
                },
                {
                    "type": "p",
                    "text": "Heroes, feature sections, newsletter sign up forms — everything you need to build beautiful marketing websites."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Page Sections"
                },
                {
                    "type": "list",
                    "items": [
                        "Hero Sections12 components",
                        "Feature Sections18 components",
                        "CTA Sections11 components",
                        "Bento Grids3 components",
                        "Pricing Sections14 components",
                        "Header Sections10 components",
                        "Newsletter Sections7 components",
                        "Stats10 components",
                        "Testimonials9 components",
                        "Blog Sections7 components",
                        "Contact Sections8 components",
                        "Team Sections9 components",
                        "Content Sections6 components",
                        "Logo Clouds12 components",
                        "FAQs10 componentsPNG previews only, upgrade to get the HTML.",
                        "Footers10 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Hero Sections"
                },
                {
                    "type": "p",
                    "text": "12 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Feature Sections"
                },
                {
                    "type": "p",
                    "text": "18 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "CTA Sections"
                },
                {
                    "type": "p",
                    "text": "11 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Bento Grids"
                },
                {
                    "type": "p",
                    "text": "3 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pricing Sections"
                },
                {
                    "type": "p",
                    "text": "14 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Header Sections"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Newsletter Sections"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Stats"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Testimonials"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Blog Sections"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Contact Sections"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Team Sections"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Content Sections"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Logo Clouds"
                },
                {
                    "type": "p",
                    "text": "12 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "FAQs"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Footers"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Elements"
                },
                {
                    "type": "list",
                    "items": [
                        "Headers12 components",
                        "Flyout Menus7 components",
                        "Banners13 components"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Headers"
                },
                {
                    "type": "p",
                    "text": "12 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Flyout Menus"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Banners"
                },
                {
                    "type": "p",
                    "text": "13 components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Feedback"
                },
                {
                    "type": "list",
                    "items": [
                        "404 Pages5 components"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "404 Pages"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Page Examples"
                },
                {
                    "type": "list",
                    "items": [
                        "Landing Pages4 examplesPNG previews only, upgrade to get the HTML.",
                        "Pricing Pages3 examplesPNG previews only, upgrade to get the HTML.",
                        "About Pages3 examplesPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Landing Pages"
                },
                {
                    "type": "p",
                    "text": "4 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pricing Pages"
                },
                {
                    "type": "p",
                    "text": "3 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "About Pages"
                },
                {
                    "type": "p",
                    "text": "3 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Application UI"
                },
                {
                    "type": "p",
                    "text": "Form layouts, tables, modal dialogs — everything you need to build beautiful responsive web applications."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Application Shells"
                },
                {
                    "type": "list",
                    "items": [
                        "Stacked Layouts9 components",
                        "Sidebar Layouts8 componentsPNG previews only, upgrade to get the HTML.",
                        "Multi-Column Layouts6 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Stacked Layouts"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sidebar Layouts"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Multi-Column Layouts"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Headings"
                },
                {
                    "type": "list",
                    "items": [
                        "Page Headings13 components",
                        "Card Headings6 componentsPNG previews only, upgrade to get the HTML.",
                        "Section Headings10 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Page Headings"
                },
                {
                    "type": "p",
                    "text": "13 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Card Headings"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Section Headings"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Data Display"
                },
                {
                    "type": "list",
                    "items": [
                        "Description Lists7 components",
                        "Stats5 componentsPNG previews only, upgrade to get the HTML.",
                        "Calendars8 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Description Lists"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Stats"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Calendars"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Lists"
                },
                {
                    "type": "list",
                    "items": [
                        "Stacked Lists17 components",
                        "Tables20 componentsPNG previews only, upgrade to get the HTML.",
                        "Grid Lists7 componentsPNG previews only, upgrade to get the HTML.",
                        "Feeds3 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Stacked Lists"
                },
                {
                    "type": "p",
                    "text": "17 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Tables"
                },
                {
                    "type": "p",
                    "text": "20 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Grid Lists"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Feeds"
                },
                {
                    "type": "p",
                    "text": "3 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Forms"
                },
                {
                    "type": "list",
                    "items": [
                        "Form Layouts5 components",
                        "Input Groups21 components",
                        "Select Menus7 components",
                        "Sign-in and Registration5 components",
                        "Textareas5 componentsPNG previews only, upgrade to get the HTML.",
                        "Radio Groups12 componentsPNG previews only, upgrade to get the HTML.",
                        "Checkboxes4 componentsPNG previews only, upgrade to get the HTML.",
                        "Toggles5 componentsPNG previews only, upgrade to get the HTML.",
                        "Action Panels8 componentsPNG previews only, upgrade to get the HTML.",
                        "Comboboxes5 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Form Layouts"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Input Groups"
                },
                {
                    "type": "p",
                    "text": "21 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Select Menus"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sign-in and Registration"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Textareas"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Radio Groups"
                },
                {
                    "type": "p",
                    "text": "12 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Checkboxes"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Toggles"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Action Panels"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Comboboxes"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Feedback"
                },
                {
                    "type": "list",
                    "items": [
                        "Alerts6 componentsPNG previews only, upgrade to get the HTML.",
                        "Empty States6 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Alerts"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Empty States"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Navigation"
                },
                {
                    "type": "list",
                    "items": [
                        "Navbars11 components",
                        "Pagination3 components",
                        "Tabs9 componentsPNG previews only, upgrade to get the HTML.",
                        "Vertical Navigation6 componentsPNG previews only, upgrade to get the HTML.",
                        "Sidebar Navigation5 componentsPNG previews only, upgrade to get the HTML.",
                        "Breadcrumbs4 componentsPNG previews only, upgrade to get the HTML.",
                        "Progress Bars8 componentsPNG previews only, upgrade to get the HTML.",
                        "Command Palettes9 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Navbars"
                },
                {
                    "type": "p",
                    "text": "11 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Pagination"
                },
                {
                    "type": "p",
                    "text": "3 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Tabs"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Vertical Navigation"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Sidebar Navigation"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Breadcrumbs"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Progress Bars"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Command Palettes"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overlays"
                },
                {
                    "type": "list",
                    "items": [
                        "Modal Dialogs6 components",
                        "Drawers12 components",
                        "Notifications6 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Modal Dialogs"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Drawers"
                },
                {
                    "type": "p",
                    "text": "12 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Notifications"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Elements"
                },
                {
                    "type": "list",
                    "items": [
                        "Avatars11 components",
                        "Badges18 components",
                        "Dropdowns5 components",
                        "Buttons10 componentsPNG previews only, upgrade to get the HTML.",
                        "Button Groups5 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Avatars"
                },
                {
                    "type": "p",
                    "text": "11 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Badges"
                },
                {
                    "type": "p",
                    "text": "18 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dropdowns"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Buttons"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Button Groups"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Layout"
                },
                {
                    "type": "list",
                    "items": [
                        "Containers5 componentsPNG previews only, upgrade to get the HTML.",
                        "Cards10 componentsPNG previews only, upgrade to get the HTML.",
                        "List containers7 componentsPNG previews only, upgrade to get the HTML.",
                        "Media Objects8 componentsPNG previews only, upgrade to get the HTML.",
                        "Dividers8 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Containers"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Cards"
                },
                {
                    "type": "p",
                    "text": "10 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "List containers"
                },
                {
                    "type": "p",
                    "text": "7 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Media Objects"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dividers"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Page Examples"
                },
                {
                    "type": "list",
                    "items": [
                        "Home Screens2 examplesPNG previews only, upgrade to get the HTML.",
                        "Detail Screens2 examplesPNG previews only, upgrade to get the HTML.",
                        "Settings Screens2 examplesPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Home Screens"
                },
                {
                    "type": "p",
                    "text": "2 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Detail Screens"
                },
                {
                    "type": "p",
                    "text": "2 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Settings Screens"
                },
                {
                    "type": "p",
                    "text": "2 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ecommerce"
                },
                {
                    "type": "p",
                    "text": "Checkout forms, shopping carts, product views — everything you need to build your next ecommerce front-end."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Components"
                },
                {
                    "type": "list",
                    "items": [
                        "Product Overviews5 components",
                        "Product Lists11 components",
                        "Category Previews6 components",
                        "Shopping Carts6 components",
                        "Category Filters5 components",
                        "Product Quickviews4 components",
                        "Product Features9 components",
                        "Store Navigation5 components",
                        "Promo Sections8 components",
                        "Checkout Forms5 componentsPNG previews only, upgrade to get the HTML.",
                        "Reviews4 componentsPNG previews only, upgrade to get the HTML.",
                        "Order Summaries4 componentsPNG previews only, upgrade to get the HTML.",
                        "Order History4 componentsPNG previews only, upgrade to get the HTML.",
                        "Incentives8 componentsPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Product Overviews"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Product Lists"
                },
                {
                    "type": "p",
                    "text": "11 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Category Previews"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Shopping Carts"
                },
                {
                    "type": "p",
                    "text": "6 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Category Filters"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Product Quickviews"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Product Features"
                },
                {
                    "type": "p",
                    "text": "9 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Store Navigation"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Promo Sections"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Checkout Forms"
                },
                {
                    "type": "p",
                    "text": "5 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Reviews"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Order Summaries"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Order History"
                },
                {
                    "type": "p",
                    "text": "4 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Incentives"
                },
                {
                    "type": "p",
                    "text": "8 components"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Page Examples"
                },
                {
                    "type": "list",
                    "items": [
                        "Storefront Pages4 examplesPNG previews only, upgrade to get the HTML.",
                        "Product Pages5 examplesPNG previews only, upgrade to get the HTML.",
                        "Category Pages5 examplesPNG previews only, upgrade to get the HTML.",
                        "Shopping Cart Pages3 examplesPNG previews only, upgrade to get the HTML.",
                        "Checkout Pages5 examplesPNG previews only, upgrade to get the HTML.",
                        "Order Detail Pages3 examplesPNG previews only, upgrade to get the HTML.",
                        "Order History Pages5 examplesPNG previews only, upgrade to get the HTML."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Storefront Pages"
                },
                {
                    "type": "p",
                    "text": "4 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Product Pages"
                },
                {
                    "type": "p",
                    "text": "5 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Category Pages"
                },
                {
                    "type": "p",
                    "text": "5 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Shopping Cart Pages"
                },
                {
                    "type": "p",
                    "text": "3 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Checkout Pages"
                },
                {
                    "type": "p",
                    "text": "5 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Order Detail Pages"
                },
                {
                    "type": "p",
                    "text": "3 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Order History Pages"
                },
                {
                    "type": "p",
                    "text": "5 examples"
                },
                {
                    "type": "p",
                    "text": "PNG previews only, upgrade to get the HTML."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pricing"
                },
                {
                    "type": "p",
                    "text": "Buy once, use forever."
                },
                {
                    "type": "p",
                    "text": "Every component package includes lifetime access, free updates, and examples in React, Vue, and plain HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Get with all-access"
                },
                {
                    "type": "p",
                    "text": "€249"
                },
                {
                    "type": "p",
                    "text": "one-time paymentplus local taxes"
                },
                {
                    "type": "p",
                    "text": "Get lifetime access to all of the application UI, marketing, and ecommerce components, as well as all of our site templates for a single one-time purchase."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "All-access features"
                },
                {
                    "type": "list",
                    "items": [
                        "Over 500+ components— everything you need to build beautiful application UIs, marketing sites, ecommerce stores, and more.",
                        "Every site template— beautifully designed, expertly crafted website templates built with modern technologies like React and Next.js.",
                        "Lifetime access— get instant access to everything we have today, plus any new components and templates we add in the future."
                    ]
                },
                {
                    "type": "p",
                    "text": "Over 500+ components— everything you need to build beautiful application UIs, marketing sites, ecommerce stores, and more."
                },
                {
                    "type": "p",
                    "text": "Every site template— beautifully designed, expertly crafted website templates built with modern technologies like React and Next.js."
                },
                {
                    "type": "p",
                    "text": "Lifetime access— get instant access to everything we have today, plus any new components and templates we add in the future."
                },
                {
                    "type": "p",
                    "text": "Available for teams— get access to all of our components and templates plus any future updates for your entire team."
                },
                {
                    "type": "list",
                    "items": [
                        "MarketingGet package,Marketing€129plus local taxesHeroes, feature sections, newsletter sign up forms — all of the components you need to build beautiful marketing websites.",
                        "Application UIGet package,Application UI€129plus local taxesForm layouts, tables, dialogs — all of the components you need to build beautiful responsive web applications.",
                        "EcommerceGet package,Ecommerce€129plus local taxesCheckout forms, shopping carts, product views — all of the components you need to build your next ecommerce front-end."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Marketing"
                },
                {
                    "type": "p",
                    "text": "€129plus local taxes"
                },
                {
                    "type": "p",
                    "text": "Heroes, feature sections, newsletter sign up forms — all of the components you need to build beautiful marketing websites."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Application UI"
                },
                {
                    "type": "p",
                    "text": "€129plus local taxes"
                },
                {
                    "type": "p",
                    "text": "Form layouts, tables, dialogs — all of the components you need to build beautiful responsive web applications."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Ecommerce"
                },
                {
                    "type": "p",
                    "text": "€129plus local taxes"
                },
                {
                    "type": "p",
                    "text": "Checkout forms, shopping carts, product views — all of the components you need to build your next ecommerce front-end."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Testimonials"
                },
                {
                    "type": "p",
                    "text": "Yet again Tailwind and Tailwind UI are dramatically speeding up my frontend work. At this point Tailwind UI is hands-down the highest ROI digital asset I’ve ever bought."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Frequently asked questions"
                },
                {
                    "type": "p",
                    "text": "Everything you need to know"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "General"
                },
                {
                    "type": "p",
                    "text": "Tailwind UI products are aone-time purchase, with no recurring subscription. When you purchase any Tailwind UI product, you have access to all of the content in that product forever."
                },
                {
                    "type": "p",
                    "text": "When you purchase any Tailwind UI product, any improvements we make or new content we add to that product will always be free for anyone who owns that product."
                },
                {
                    "type": "p",
                    "text": "Individual component packages:When you buy the Marketing, Application UI, or Ecommerce component packages individually, you'll get any new components we add to those packages in the future at no extra cost."
                },
                {
                    "type": "p",
                    "text": "We regularly add new components to these packages whenever we have new ideas, and you can see what previous updates have looked likein our changelog."
                },
                {
                    "type": "p",
                    "text": "Anynewcomponent packages we release are considered separate products, and can be purchased at an upgrade price."
                },
                {
                    "type": "p",
                    "text": "All-access:When you purchase an all-access license, you get access to every component packageandevery site template available today, plus any additional component packages or templates we release in the future at no additional cost."
                },
                {
                    "type": "p",
                    "text": "This means that if we add a brand new component package like “Journalism” or design a new social media website template, access to those products are included in your original purchase, with no upgrade cost."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Compatibility"
                },
                {
                    "type": "p",
                    "text": "No, design assets for tools like Figma, Sketch, or Adobe XD are not included."
                },
                {
                    "type": "p",
                    "text": "We don't produce high-quality design artifacts as part of our own design and development process, so building these extra resources means we can't spend as much time creating new examples in code which is where we believe we can provide the most value."
                },
                {
                    "type": "p",
                    "text": "All of the components in Tailwind UI are provided in three formats: React, Vue, and vanilla HTML."
                },
                {
                    "type": "p",
                    "text": "The React and Vue examples are fully functional out-of-the-box, and are powered byHeadless UI— a library of unstyled components we designed to integrate perfectly with Tailwind CSS. Headless UI supports both React and Vue 3, but is not compatible with Vue 2."
                },
                {
                    "type": "p",
                    "text": "The vanilla HTML examplesdo not include any JavaScriptand are designed for people who prefer to write any necessary JavaScript themselves."
                },
                {
                    "type": "p",
                    "text": "Most of the components do not rely on JS at all, but for the ones that do (dropdowns, dialogs, etc.) we've provided some simple comments in the HTML to explain things like what classes you need to use for different states (like a toggle switch being on or off), or what classes we recommend for transitioning elements on to or off of the screen (like a dialog opening)."
                },
                {
                    "type": "p",
                    "text": "To get a better idea of how this looks in practice,check out our documentation."
                },
                {
                    "type": "p",
                    "text": "Everything in Tailwind UI is designed and developed for the latest version of Tailwind CSS, which is currently Tailwind CSS v3.4."
                },
                {
                    "type": "p",
                    "text": "The components in Tailwind UI are designed to work in the latest, stable releases of all major browsers, including Chrome, Firefox, Safari, and Edge."
                },
                {
                    "type": "p",
                    "text": "We don't support Internet Explorer 11."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Licensing"
                },
                {
                    "type": "p",
                    "text": "Yup! If you're a solo developer you can start with a personal license, and then upgrade to the team license later if other developers join your team."
                },
                {
                    "type": "p",
                    "text": "There is an \"Upgrade to Team License\" option under the \"Account\" menu within the Tailwind UI app after logging in."
                },
                {
                    "type": "p",
                    "text": "Note that we only offer team all-access licenses, and do not offer team licenses for the individual component packages."
                },
                {
                    "type": "p",
                    "text": "Unlike most other templates/themes, you don't have to buy a new Tailwind UI license every time you want to use it on a new project."
                },
                {
                    "type": "p",
                    "text": "As long as what you're building is allowed as per the license, you can build as many sites as you want without ever having to buy an additional license."
                },
                {
                    "type": "p",
                    "text": "For more information and examples,read through our license."
                },
                {
                    "type": "p",
                    "text": "Yes! As long what you're building is a custom website developed for a single client, you can totally use components and templates in Tailwind UI to help build it."
                },
                {
                    "type": "p",
                    "text": "The only thing you can't do is use Tailwind UI to build a website or template that is resold to multiple clients."
                },
                {
                    "type": "p",
                    "text": "For more information and examples,read through our license."
                },
                {
                    "type": "p",
                    "text": "Absolutely! Your license gives you permission to build as many of your own projects as you like, whether those are simple public websites or SaaS applications that end users need to pay to access."
                },
                {
                    "type": "p",
                    "text": "As long as what you’re building isn’t a website builder or other tool that customers can use to create their own sites using elements that originate from Tailwind UI, you’re good to go."
                },
                {
                    "type": "p",
                    "text": "For more information and examples,read through our license.."
                },
                {
                    "type": "p",
                    "text": "Yep! As long as what you're building is some sort of actual website and not a derivative component library, theme builder, or other product where the primary purpose is clearly to repackage and redistribute our components, it's totally okay for that project to be open source."
                },
                {
                    "type": "p",
                    "text": "For more information and examples of what is and isn't okay,read through our license."
                },
                {
                    "type": "p",
                    "text": "No, you cannot use Tailwind UI to create derivative products like themes, UI kits, page builders, or anything else where you would be repackaging and redistributing our components or templates for someone else to use to build their own sites."
                },
                {
                    "type": "p",
                    "text": "For more information and examples of what is and isn't okay,read through our license."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Support"
                },
                {
                    "type": "p",
                    "text": "Tailwind UI is a self-serve product, meaning that while we do offer customer support for account management and licensing related concerns, the expectation is that customers have the requisite knowledge of Tailwind CSS, HTML, React, and Vue to use the product successfully."
                },
                {
                    "type": "p",
                    "text": "Because every project is different and the way independently authored pieces of code interact can be complex and time-consuming to understand,we do not offer technical support or consulting."
                },
                {
                    "type": "p",
                    "text": "Tailwind UI customers do get access to a private Discord community where you can ask questions and help others with their questions in return, but we don't offer first-party technical support or consulting here ourselves."
                },
                {
                    "type": "p",
                    "text": "If you're unhappy with your purchase for any reason, email us atsupport@tailwindui.comwithin 30 days and we'll refund you in full, no questions asked."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/fill",
            "title": "Fill - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "SVG",
                        "Fill"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the fill color"
                },
                {
                    "type": "p",
                    "text": "Use thefill-*utilities to change the fill color of an SVG."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"fill-blue-500...\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "This can be useful for styling icon sets likeHeroicons."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:fill-cyan-700to only apply thefill-cyan-700utility onhover."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"fill-cyan-500hover:fill-cyan-700\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:fill-cyan-700to apply thefill-cyan-700utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"fill-cyan-500md:fill-cyan-700\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asfillcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourfillcolors by editingtheme.fillortheme.extend.fillin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offfillvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"fill-[#243c5a]\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the fill color",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/filter",
            "title": "Blur - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Blur"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Blurring elements"
                },
                {
                    "type": "p",
                    "text": "Use theblur-*utilities to blur an element."
                },
                {
                    "type": "p",
                    "text": "blur-none"
                },
                {
                    "type": "p",
                    "text": "blur-sm"
                },
                {
                    "type": "p",
                    "text": "blur-lg"
                },
                {
                    "type": "p",
                    "text": "blur-2xl"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-none...\"><!-- ... --></div><divclass=\"blur-sm...\"><!-- ... --></div><divclass=\"blur-lg...\"><!-- ... --></div><divclass=\"blur-2xl...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert brightness-150md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:blur-lgto only apply theblur-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blurhover:blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:blur-lgto apply theblur-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blurmd:blur-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposeblurutilities. You can customize these values by editingtheme.blurortheme.extend.blurin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{blur:{xs:'2px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offblurvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-[2px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Blurring elements",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex",
            "title": "Flex - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Initial"
                },
                {
                    "type": "p",
                    "text": "Useflex-initialto allow a flex item to shrink but not grow, taking into account its initial size:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex\"><divclass=\"flex-none w-14 ...\">01</div><divclass=\"flex-initialw-64 ...\">02</div><divclass=\"flex-initialw-32 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Flex 1"
                },
                {
                    "type": "p",
                    "text": "Useflex-1to allow a flex item to grow and shrink as needed, ignoring its initial size:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex\"><divclass=\"flex-none w-14 ...\">01</div><divclass=\"flex-1w-64 ...\">02</div><divclass=\"flex-1w-32 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Useflex-autoto allow a flex item to grow and shrink, taking into account its initial size:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-none w-14 ...\">01</div><divclass=\"flex-autow-64 ...\">02</div><divclass=\"flex-autow-32 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​None"
                },
                {
                    "type": "p",
                    "text": "Useflex-noneto prevent a flex item from growing or shrinking:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-nonew-14 ...\">01</div><divclass=\"flex-nonew-32 ...\">02</div><divclass=\"flex-1 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:flex-1to only apply theflex-1utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex-nonehover:flex-1\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:flex-1to apply theflex-1utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex-nonemd:flex-1\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides fourflexutilities. You can customize these values by editingtheme.flexortheme.extend.flexin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{flex:{'2':'2 2 0%'}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offflexvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex-[2_2_0%]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Initial",
                        "Flex 1",
                        "Auto",
                        "None",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex-basis",
            "title": "Flex Basis - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex Basis"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the flex basis"
                },
                {
                    "type": "p",
                    "text": "Use thebasis-*utilities to set the initial size of flex items."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-row\"><divclass=\"basis-1/4\">01</div><divclass=\"basis-1/4\">02</div><divclass=\"basis-1/2\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:basis-1/2to only apply thebasis-1/2utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"basis-1/3hover:basis-1/2\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:basis-1/3to apply thebasis-1/3utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-row\"><divclass=\"basis-1/4md:basis-1/3\">01</div><divclass=\"basis-1/4md:basis-1/3\">02</div><divclass=\"basis-1/2md:basis-1/3\">03</div></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "The default flex basis scale is a combination of thedefault spacing scaleas well as a set of percentage based values."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'112':'28rem','128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the flex basis scale by editingtheme.flexBasisortheme.extend.flexBasisin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{flexBasis:{'1/7':'14.2857143%','2/7':'28.5714286%','3/7':'42.8571429%','4/7':'57.1428571%','5/7':'71.4285714%','6/7':'85.7142857%',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offflex-basisvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"basis-[14.2857143%]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the flex basis",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex-direction",
            "title": "Flex Direction - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex Direction"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Row"
                },
                {
                    "type": "p",
                    "text": "Useflex-rowto position flex items horizontally in the same direction as text:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-row...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Row reversed"
                },
                {
                    "type": "p",
                    "text": "Useflex-row-reverseto position flex items horizontally in the opposite direction:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-row-reverse...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Column"
                },
                {
                    "type": "p",
                    "text": "Useflex-colto position flex items vertically:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-col...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Column reversed"
                },
                {
                    "type": "p",
                    "text": "Useflex-col-reverseto position flex items vertically in the opposite direction:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-col-reverse...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:flex-rowto only apply theflex-rowutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-colhover:flex-row\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:flex-rowto apply theflex-rowutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-colmd:flex-row\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Row",
                        "Row reversed",
                        "Column",
                        "Column reversed",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex-grow",
            "title": "Flex Grow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex Grow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Grow"
                },
                {
                    "type": "p",
                    "text": "Usegrowto allow a flex item to grow to fill any available space:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-none w-14 h-14 ...\">01</div><divclass=\"growh-14 ...\">02</div><divclass=\"flex-none w-14 h-14 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Don’t grow"
                },
                {
                    "type": "p",
                    "text": "Usegrow-0to prevent a flex item from growing:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"grow h-14 ...\">01</div><divclass=\"grow-0h-14 ...\">02</div><divclass=\"grow h-14 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:grow-0to only apply thegrow-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"growhover:grow-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:grow-0to apply thegrow-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"growmd:grow-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides twogrowutilities. You can customize these values by editingtheme.flexGrowortheme.extend.flexGrowin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{flexGrow:{2:'2'}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offflex-growvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grow-[2]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Grow",
                        "Don't grow",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex-shrink",
            "title": "Flex Shrink - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex Shrink"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Shrink"
                },
                {
                    "type": "p",
                    "text": "Useshrinkto allow a flex item to shrink if needed:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-none w-14 h-14 ...\">01</div><divclass=\"shrinkw-64 h-14 ...\">02</div><divclass=\"flex-none w-14 h-14 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Don’t shrink"
                },
                {
                    "type": "p",
                    "text": "Useshrink-0to prevent a flex item from shrinking:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"flex-1 h-16 ...\">01</div><divclass=\"shrink-0h-16 w-32 ...\">02</div><divclass=\"flex-1 h-16 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:shrink-0to only apply theshrink-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shrinkhover:shrink-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:shrink-0to apply theshrink-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shrinkmd:shrink-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides twoshrinkutilities. You can customize these values by editingtheme.flexShrinkortheme.extend.flexShrinkin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{flexShrink:{2:'2'}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offflex-shrinkvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"shrink-[2]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Shrink",
                        "Don't shrink",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/flex-wrap",
            "title": "Flex Wrap - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Flex Wrap"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Don’t wrap"
                },
                {
                    "type": "p",
                    "text": "Useflex-nowrapto prevent flex items from wrapping, causing inflexible items to overflow the container if necessary:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-nowrap\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Wrap normally"
                },
                {
                    "type": "p",
                    "text": "Useflex-wrapto allow flex items to wrap:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-wrap\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Wrap reversed"
                },
                {
                    "type": "p",
                    "text": "Useflex-wrap-reverseto wrap flex items in the reverse direction:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexflex-wrap-reverse\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:flex-wrap-reverseto only apply theflex-wrap-reverseutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-wraphover:flex-wrap-reverse\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:flex-wrap-reverseto apply theflex-wrap-reverseutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-wrapmd:flex-wrap-reverse\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Don't wrap",
                        "Wrap normally",
                        "Wrap reversed",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/float",
            "title": "Floats - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Floats"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Floating elements to the right"
                },
                {
                    "type": "p",
                    "text": "Use thefloat-rightutility to float an element to the right of its container."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?  Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-right...\"src=\"path/to/image.jpg\"><p>Maybe we can live without libraries, people like you and me. ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Floating elements to the left"
                },
                {
                    "type": "p",
                    "text": "Use thefloat-leftutility to float an element to the left of its container."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?  Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-left...\"src=\"path/to/image.jpg\"><p>Maybe we can live without libraries, people like you and me. ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling a float"
                },
                {
                    "type": "p",
                    "text": "Use thefloat-noneutility to reset any floats that are applied to an element. This is the default value for the float property."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?  Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-none...\"src=\"path/to/image.jpg\"><p>Maybe we can live without libraries, people like you and me. ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use thefloat-startorfloat-endutilities, which uselogical propertiesto map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "left-to-right"
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better? Look. If you think this is about overdue fines and missing books, you'd better think again. This is about that kid's right to read a book without getting his mind warped! Or: maybe that turns you on, Seinfeld; maybe that's how y'get your kicks. You and your good-time buddies."
                },
                {
                    "type": "p",
                    "text": "right-to-left"
                },
                {
                    "type": "p",
                    "text": "ربما يمكننا العيش بدون مكتبات، أشخاص مثلي ومثلك. ربما. بالتأكيد، نحن أكبر من أن نغير العالم، ولكن ماذا عن ذلك الطفل الذي يجلس ويفتح كتابًا الآن في أحد فروع المكتبة المحلية ويجد رسومات للتبول والبول على القطة في القبعة والإخوة الصينيون الخمسة؟ ألا يستحق الأفضل؟ ينظر. إذا كنت تعتقد أن الأمر يتعلق بالغرامات المتأخرة والكتب المفقودة، فمن الأفضل أن تفكر مرة أخرى. يتعلق الأمر بحق ذلك الطفل في قراءة كتاب دون أن يتشوه عقله! أو: ربما يثيرك هذا يا سينفيلد؛ ربما هذه هي الطريقة التي تحصل بها على ركلاتك. أنت ورفاقك الطيبين."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-start...\"src=\"path/to/image.jpg\"><p>Maybe we can live without libraries, people like you and me. ...</p><imgclass=\"float-start...\"src=\"path/to/image.jpg\"><pdir=\"rtl\">... ربما يمكننا العيش بدون مكتبات، أشخاص مثلي ومثلك. ربما. بالتأكيد</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:float-rightto only apply thefloat-rightutility onhover."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-righthover:float-left\"src=\"path/to/image.jpg\">"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:float-rightto apply thefloat-rightutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"float-rightmd:float-left\"src=\"path/to/image.jpg\">"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Floating elements to the right",
                        "Floating elements to the left",
                        "Disabling a float",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-family",
            "title": "Font Family - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Family"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the font family"
                },
                {
                    "type": "p",
                    "text": "You can control the typeface of text using the font family utilities."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-sans...\">The quick brown fox ...</p><pclass=\"font-serif...\">The quick brown fox ...</p><pclass=\"font-mono...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:font-serifto only apply thefont-serifutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-sanshover:font-serif\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:font-serifto apply thefont-serifutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-sansmd:font-serif\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides three font family utilities: a cross-browser sans-serif stack, a cross-browser serif stack, and a cross-browser monospaced stack. You can change, add, or remove these by editing thetheme.fontFamilysection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{fontFamily:{'sans':['ui-sans-serif','system-ui',...],'serif':['ui-serif','Georgia',...],'mono':['ui-monospace','SFMono-Regular',...],'display':['Oswald',...],'body':['\"Open Sans\"',...],}}}"
                },
                {
                    "type": "p",
                    "text": "Font families can be specified as an array or as a simple comma-delimited string:"
                },
                {
                    "type": "code",
                    "code": "{// Array format:'sans':['Helvetica','Arial','sans-serif'],// Comma-delimited format:'sans':'Helvetica, Arial, sans-serif',}"
                },
                {
                    "type": "p",
                    "text": "Note thatTailwind does not automatically escape font namesfor you. If you’re using a font that contains an invalid identifier, wrap it in quotes or escape the invalid characters."
                },
                {
                    "type": "code",
                    "code": "{// Won't work:'sans':['Exo 2',...],// Add quotes:'sans':['\"Exo 2\"',...],// ...or escape the space:'sans':['Exo\\\\ 2',...],}"
                },
                {
                    "type": "p",
                    "text": "Like any other web project, make sure to include the necessary@font-faceor@importrules in your CSS for any custom fonts you’re using so that those fonts are loaded by the browser for your site:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{@font-face{font-family:'Roboto';font-style:normal;font-weight:400;font-display:swap;src:url(/fonts/Roboto.woff2)format('woff2');}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Providing default font settings"
                },
                {
                    "type": "p",
                    "text": "You can optionally provide defaultfont-feature-settingsandfont-variation-settingsfor each font in your project using a tuple of the form[fontFamilies, { fontFeatureSettings, fontVariationSettings }]when configuring custom fonts."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{fontFamily:{sans:['\"Inter var\", sans-serif',{fontFeatureSettings:'\"cv11\", \"ss01\"',fontVariationSettings:'\"opsz\" 32'},],},},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offfont-familyvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-['Open_Sans']\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing the default font"
                },
                {
                    "type": "p",
                    "text": "For convenience,Preflightsets the font family on thehtmlelement to match your configuredsansfont, so one way to change the default font for your project is to customize thesanskey in yourfontFamilyconfiguration:"
                },
                {
                    "type": "code",
                    "code": "constdefaultTheme=require('tailwindcss/defaultTheme')module.exports={theme:{extend:{fontFamily:{'sans':['\"Proxima Nova\"',...defaultTheme.fontFamily.sans],},}}}"
                },
                {
                    "type": "p",
                    "text": "You can also customize the default font used in your project byadding a custom base stylethat sets thefont-familyproperty explicitly:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{html{font-family:\"Proxima Nova\",system-ui,sans-serif;}}"
                },
                {
                    "type": "p",
                    "text": "This is the best approach if you have customized your font family utilities to have different names and don’t want there to befont-sansutility available in your project."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the font family",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values",
                        "Customizing the default font"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-size",
            "title": "Font Size - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Size"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the font size"
                },
                {
                    "type": "p",
                    "text": "Use thetext-*utilities to control the font size of an element."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-sm...\">The quick brown fox ...</p><pclass=\"text-base...\">The quick brown fox ...</p><pclass=\"text-lg...\">The quick brown fox ...</p><pclass=\"text-xl...\">The quick brown fox ...</p><pclass=\"text-2xl...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the line-height"
                },
                {
                    "type": "p",
                    "text": "Set an element’s line-height at the same time you set the font size by adding a line-height modifier to any font size utility. For example, usetext-xl/8to set a font size of1.25remwith a line-height of2rem."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-base/6...\">So I started to walk into the water...</p><pclass=\"text-base/7...\">So I started to walk into the water...</p><pclass=\"text-base/loose...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in yourline-height scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-sm/[17px]...\"></p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:text-baseto only apply thetext-baseutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-smhover:text-base\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:text-baseto apply thetext-baseutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-smmd:text-base\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can configure your own custom set of font size utilities using thetheme.fontSizesection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{fontSize:{sm:'0.8rem',base:'1rem',xl:'1.25rem','2xl':'1.563rem','3xl':'1.953rem','4xl':'2.441rem','5xl':'3.052rem',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Providing a default line-height"
                },
                {
                    "type": "p",
                    "text": "Tailwind’s default theme configures a sensible defaultline-heightfor eachfont-sizeutility. You can configure your own default line heights when using custom font sizes by defining each size using a tuple of the form[fontSize, lineHeight]in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{fontSize:{sm:['14px','20px'],base:['16px','24px'],lg:['20px','28px'],xl:['24px','32px'],}}}"
                },
                {
                    "type": "p",
                    "text": "You can also specify a default line height using the object syntax, which allows you to also provide defaultletter-spacingandfont-weightvalues. You can do this using a tuple of the form[fontSize, { lineHeight?, letterSpacing?, fontWeight? }]."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{fontSize:{'2xl':['1.5rem',{lineHeight:'2rem',letterSpacing:'-0.01em',fontWeight:'500',}],'3xl':['1.875rem',{lineHeight:'2.25rem',letterSpacing:'-0.02em',fontWeight:'700',}],}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offfont-sizevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-[14px]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the font size",
                        "Setting the line-height",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-smoothing",
            "title": "Font Smoothing - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Smoothing"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Applying font smoothing"
                },
                {
                    "type": "p",
                    "text": "Use thesubpixel-antialiasedutility to render text using subpixel antialiasing and theantialiasedutility to render text using grayscale antialiasing."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"subpixel-antialiased...\">The quick brown fox ...</p><pclass=\"antialiased...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:subpixel-antialiasedto only apply thesubpixel-antialiasedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"antialiasedhover:subpixel-antialiased\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:subpixel-antialiasedto apply thesubpixel-antialiasedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"antialiasedmd:subpixel-antialiased\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Applying font smoothing",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-style",
            "title": "Font Style - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Style"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Italicizing text"
                },
                {
                    "type": "p",
                    "text": "Theitalicutility can be used to make text italic. Likewise, thenot-italicutility can be used to display text normally — typically to reset italic text at different breakpoints."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"italic...\">The quick brown fox ...</p><pclass=\"not-italic...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:not-italicto only apply thenot-italicutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"italichover:not-italic\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:not-italicto apply thenot-italicutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"italicmd:not-italic\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Italicizing text",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-variant-numeric",
            "title": "Font Variant Numeric - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Variant Numeric"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Applying numeric variants"
                },
                {
                    "type": "p",
                    "text": "Use thefont-variant-numericutilities to enable additional glyphs for numbers, fractions, and ordinal markers(in fonts that support them)."
                },
                {
                    "type": "p",
                    "text": "These utilities are composable so you can enable multiplefont-variant-numericfeatures by combining multiple classes in your HTML:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"ordinal slashed-zero tabular-nums...\">1234567890</p>"
                },
                {
                    "type": "p",
                    "text": "Note that many fonts don’t support these features(stacked fractions support for example is especially rare), so some of these utilities may have no effect depending on the font family you are using."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ordinal"
                },
                {
                    "type": "p",
                    "text": "Use theordinalutility to enable special glyphs for the ordinal markers."
                },
                {
                    "type": "p",
                    "text": "1st"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"ordinal...\">1st</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Slashed Zero"
                },
                {
                    "type": "p",
                    "text": "Use theslashed-zeroutility to force a 0 with a slash; this is useful when a clear distinction between O and 0 is needed."
                },
                {
                    "type": "p",
                    "text": "0"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"slashed-zero...\">0</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Lining figures"
                },
                {
                    "type": "p",
                    "text": "Use thelining-numsutility to use the numeric glyphs that are all aligned by their baseline. This corresponds to thelnumOpenType feature. This is the default for most fonts."
                },
                {
                    "type": "p",
                    "text": "1234567890"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"lining-nums...\">1234567890</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Oldstyle figures"
                },
                {
                    "type": "p",
                    "text": "Use theoldstyle-numsutility to use numeric glyphs where some numbers have descenders. This corresponds to theonumOpenType feature."
                },
                {
                    "type": "p",
                    "text": "1234567890"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"oldstyle-nums...\">1234567890</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Proportional figures"
                },
                {
                    "type": "p",
                    "text": "Use theproportional-numsutility to use numeric glyphs that have proportional widths (rather than uniform/tabular). This corresponds to thepnumOpenType feature."
                },
                {
                    "type": "p",
                    "text": "12121"
                },
                {
                    "type": "p",
                    "text": "90909"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"proportional-nums...\">12121</p><pclass=\"proportional-nums...\">90909</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Tabular figures"
                },
                {
                    "type": "p",
                    "text": "Use thetabular-numsutility to use numeric glyphs that have uniform/tabular widths (rather than proportional). This corresponds to thetnumOpenType feature."
                },
                {
                    "type": "p",
                    "text": "12121"
                },
                {
                    "type": "p",
                    "text": "90909"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"tabular-nums...\">12121</p><pclass=\"tabular-nums...\">90909</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Diagonal fractions"
                },
                {
                    "type": "p",
                    "text": "Use thediagonal-fractionsutility to replace numbers separated by a slash with common diagonal fractions. This corresponds to thefracOpenType feature."
                },
                {
                    "type": "p",
                    "text": "1/2 3/4 5/6"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"diagonal-fractions...\">1/2 3/4 5/6</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stacked fractions"
                },
                {
                    "type": "p",
                    "text": "Use thestacked-fractionsutility to replace numbers separated by a slash with common stacked fractions. This corresponds to theafrcOpenType feature. Very few fonts seem to support this feature — we’ve used Ubuntu Mono here."
                },
                {
                    "type": "p",
                    "text": "1/2 3/4 5/6"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"stacked-fractions...\">1/2 3/4 5/6</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resetting numeric font variants"
                },
                {
                    "type": "p",
                    "text": "Use thenormal-numsproperty to reset numeric font variants. This is usually useful for resetting a font feature at a particular breakpoint:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"slashed-zero tabular-numsmd:normal-nums...\">12345</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:tabular-numsto only apply thetabular-numsutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"proportional-numshover:tabular-nums\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:tabular-numsto apply thetabular-numsutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"proportional-numsmd:tabular-nums\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Applying numeric variants",
                        "Ordinal",
                        "Slashed Zero",
                        "Lining figures",
                        "Oldstyle figures",
                        "Proportional figures",
                        "Tabular figures",
                        "Diagonal fractions",
                        "Stacked fractions",
                        "Resetting numeric font variants",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/font-weight",
            "title": "Font Weight - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Font Weight"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the font weight"
                },
                {
                    "type": "p",
                    "text": "Use thefont-*utilities to control the font weight of an element."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-light...\">The quick brown fox ...</p><pclass=\"font-normal...\">The quick brown fox ...</p><pclass=\"font-medium...\">The quick brown fox ...</p><pclass=\"font-semibold...\">The quick brown fox ...</p><pclass=\"font-bold...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:font-boldto only apply thefont-boldutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-normalhover:font-bold\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:font-boldto apply thefont-boldutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-normalmd:font-bold\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides ninefont-weightutilities. You change, add, or remove these by editing thetheme.fontWeightsection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{fontWeight:{thin:'100',hairline:'100',extralight:'200',light:'300',normal:'400',medium:'500',semibold:'600',bold:'700',extrabold:'800','extra-bold':'800',black:'900',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offfont-weightvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-[1100]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the font weight",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/forced-color-adjust",
            "title": "Forced Color Adjust - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Accessibility",
                        "Forced Color Adjust"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Opting out of forced colors"
                },
                {
                    "type": "p",
                    "text": "Useforced-color-adjust-noneto opt an element out the colors enforced byforced colors mode. This is useful in situations where enforcing a limited color palette will degrade usability."
                },
                {
                    "type": "p",
                    "text": "Try emulating `forced-colors: active` in your developer tools to see the changes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Basic Tee"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "$35"
                },
                {
                    "type": "code",
                    "code": "<form><imgsrc=\"...\"/><div><h3>Basic Tee</h3><h3>$35</h3><fieldset><legendclass=\"sr-only\">Choose a color</legend><divclass=\"forced-color-adjust-none...\"><label><inputclass=\"sr-only\"type=\"radio\"name=\"color-choice\"value=\"White\"/><spanclass=\"sr-only\">White</span><spanclass=\"size-6 rounded-full border border-black border-opacity-10 bg-white\"></span></label><!-- ... --></div></fieldset></form>"
                },
                {
                    "type": "p",
                    "text": "You can also use theforced-colorsmodifierto conditionally add styles when the user has enabled a forced color mode."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Restoring forced colors"
                },
                {
                    "type": "p",
                    "text": "Useforced-color-adjust-autoto undoforced-color-adjust-none, making an element adhere to colors enforced by forced colors mode."
                },
                {
                    "type": "p",
                    "text": "This can be useful if you use a different control on a larger screen size for example:"
                },
                {
                    "type": "code",
                    "code": "<form><fieldsetclass=\"forced-color-adjust-none lg:forced-color-adjust-auto...\"><legend>Choose a color:</legend><selectclass=\"hidden lg:block\"><optionvalue=\"White\">White</option><optionvalue=\"Gray\">Gray</option><optionvalue=\"Black\">Black</option></select><divclass=\"lg:hidden\"><label><inputclass=\"sr-only\"type=\"radio\"name=\"color-choice\"value=\"White\"/><!-- ... --></label><!-- ... --></div></fieldset></form>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:forced-color-adjust-noneto only apply theforced-color-adjust-noneutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#content\"class=\"forced-color-adjust-nonefocus:forced-color-adjust-auto\">Skip to content</a>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:forced-color-adjust-autoto apply theforced-color-adjust-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"forced-color-adjust-nonemd:forced-color-adjust-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Opting out of forced colors",
                        "Restoring forced colors",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/functions-and-directives",
            "title": "Functions & Directives - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Functions & Directives"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Directives"
                },
                {
                    "type": "p",
                    "text": "Directives are custom Tailwind-specificat-rulesyou can use in your CSS that offer special functionality for Tailwind CSS projects."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​@tailwind"
                },
                {
                    "type": "p",
                    "text": "Use the@tailwinddirective to insert Tailwind’sbase,components,utilitiesandvariantsstyles into your CSS."
                },
                {
                    "type": "code",
                    "code": "/**\n * This injects Tailwind's base styles and any base styles registered by\n * plugins.\n */@tailwindbase;/**\n * This injects Tailwind's component classes and any component classes\n * registered by plugins.\n */@tailwindcomponents;/**\n * This injects Tailwind's utility classes and any utility classes registered\n * by plugins.\n */@tailwindutilities;/**\n * Use this directive to control where Tailwind injects the hover, focus,\n * responsive, dark mode, and other variants of each class.\n *\n * If omitted, Tailwind will append these classes to the very end of\n * your stylesheet by default.\n */@tailwindvariants;"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​@layer"
                },
                {
                    "type": "p",
                    "text": "Use the@layerdirective to tell Tailwind which “bucket” a set of custom styles belong to. Valid layers arebase,components, andutilities."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerbase{h1{@applytext-2xl;}h2{@applytext-xl;}}@layercomponents{.btn-blue{@applybg-blue-500hover:bg-blue-700 text-white font-bold py-2 px-4 rounded;}}@layerutilities{.filter-none{filter:none;}.filter-grayscale{filter:grayscale(100%);}}"
                },
                {
                    "type": "p",
                    "text": "Tailwind will automatically move the CSS within any@layerdirective to the same place as the corresponding@tailwindrule, so you don’t have to worry about authoring your CSS in a specific order to avoid specificity issues."
                },
                {
                    "type": "p",
                    "text": "Any custom CSS added to a layer will only be included in the final build if that CSS is actually used in your HTML, just like all of the classes built in to Tailwind by default."
                },
                {
                    "type": "p",
                    "text": "Wrapping any custom CSS with@layeralso makes it possible to use modifiers with those rules, likehover:andfocus:or responsive modifiers likemd:andlg:."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​@apply"
                },
                {
                    "type": "p",
                    "text": "Use@applyto inline any existing utility classes into your own custom CSS."
                },
                {
                    "type": "p",
                    "text": "This is useful when you need to write custom CSS (like to override the styles in a third-party library) but still want to work with your design tokens and use the same syntax you’re used to using in your HTML."
                },
                {
                    "type": "code",
                    "code": ".select2-dropdown{@applyrounded-b-lg shadow-md;}.select2-search{@applyborder border-gray-300 rounded;}.select2-results__group{@applytext-lg font-bold text-gray-900;}"
                },
                {
                    "type": "p",
                    "text": "Any rules inlined with@applywill have!importantremovedby default to avoid specificity issues:"
                },
                {
                    "type": "code",
                    "code": "/* Input */.foo{color:blue!important;}.bar{@applyfoo;}/* Output */.foo{color:blue!important;}.bar{color:blue;}"
                },
                {
                    "type": "p",
                    "text": "If you’d like to@applyan existing class and make it!important, simply add!importantto the end of the declaration:"
                },
                {
                    "type": "code",
                    "code": "/* Input */.btn{@applyfont-bold py-2 px-4 rounded!important;}/* Output */.btn{font-weight:700!important;padding-top:.5rem!important;padding-bottom:.5rem!important;padding-right:1rem!important;padding-left:1rem!important;border-radius:.25rem!important;}"
                },
                {
                    "type": "p",
                    "text": "Note that if you’re using Sass/SCSS, you’ll need to use Sass’ interpolation feature to get this to work:"
                },
                {
                    "type": "code",
                    "code": ".btn{@applyfont-bold py-2 px-4 rounded #{!important};}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Using @apply with per-component CSS"
                },
                {
                    "type": "p",
                    "text": "Component frameworks like Vue and Svelte support adding per-component styles within a<style>block that lives in each component file."
                },
                {
                    "type": "p",
                    "text": "If you try to@applya custom class you’ve defined in your global CSS in one of these per-component<style>blocks, you’ll get an error about the class not existing:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{.card{background-color:theme(colors.white);border-radius:theme(borderRadius.lg);padding:theme(spacing.6);box-shadow:theme(boxShadow.xl);}}"
                },
                {
                    "type": "code",
                    "code": "<div><slot></slot></div><style>div{/* Won't work because this file and main.css are processed separately */@applycard;}</style>"
                },
                {
                    "type": "p",
                    "text": "This is because under-the-hood, frameworks like Vue and Svelte are processing every single<style>block independently, and running your PostCSS plugin chain against each one in isolation."
                },
                {
                    "type": "p",
                    "text": "That means if you have 10 components that each have a<style>block, Tailwind is being run 10 separate times, and each run has zero knowledge about the other runs. Because of this, when you try to@apply cardinCard.svelteit fails, because Tailwind has no idea that thecardclass exists since Svelte processedCard.svelteandmain.cssin total isolation from each other."
                },
                {
                    "type": "p",
                    "text": "The solution to this problem is to define any custom styles you want to@applyin your components using theplugin systeminstead:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addComponents,theme}){addComponents({'.card':{backgroundColor:theme('colors.white'),borderRadius:theme('borderRadius.lg'),padding:theme('spacing.6'),boxShadow:theme('boxShadow.xl'),}})})]}"
                },
                {
                    "type": "p",
                    "text": "This way any file processed by Tailwind that uses this config file will have access to those styles."
                },
                {
                    "type": "p",
                    "text": "Honestly though the best solution is to just not do weird stuff like this at all. Use Tailwind’s utilities directly in your markup the way they are intended to be used, and don’t abuse the@applyfeature to do things like this and you will have a much better experience."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​@config"
                },
                {
                    "type": "p",
                    "text": "Use the@configdirective to specify which config file Tailwind should use when compiling that CSS file. This is useful for projects that need to use different configuration files for different CSS entry points."
                },
                {
                    "type": "code",
                    "code": "@config\"./tailwind.site.config.js\";@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "The path you provide to the@configdirective is relative to that CSS file, and will take precedence over a path defined in your PostCSS configuration or in the Tailwind CLI."
                },
                {
                    "type": "p",
                    "text": "Note that if you’re usingpostcss-import, your@importstatements need to come before@configfor things to work correctly, aspostcss-importis strict about following the CSS spec which requires@importstatements to precede any other rules in the file."
                },
                {
                    "type": "p",
                    "text": "Don’t put@configbefore your@importstatements"
                },
                {
                    "type": "code",
                    "code": "@config\"./tailwind.admin.config.js\";@import\"tailwindcss/base\";@import\"./custom-base.css\";@import\"tailwindcss/components\";@import\"./custom-components.css\";@import\"tailwindcss/utilities\";"
                },
                {
                    "type": "p",
                    "text": "Put your@importstatements before the@configdirective"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss/base\";@import\"./custom-base.css\";@import\"tailwindcss/components\";@import\"./custom-components.css\";@import\"tailwindcss/utilities\";@config\"./tailwind.admin.config.js\";"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Functions"
                },
                {
                    "type": "p",
                    "text": "Tailwind adds a few custom functions you can use in your CSS to access Tailwind-specific values. These functions are evaluated at build-time, and are replaced by static values in your final CSS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​theme()"
                },
                {
                    "type": "p",
                    "text": "Use thetheme()function to access your Tailwind config values using dot notation."
                },
                {
                    "type": "code",
                    "code": ".content-area{height:calc(100vh-theme(spacing.12));}"
                },
                {
                    "type": "p",
                    "text": "If you need to access a value that contains a dot (like the2.5value in the spacing scale), you can use square bracket notation:"
                },
                {
                    "type": "code",
                    "code": ".content-area{height:calc(100vh-theme(spacing[2.5]));}"
                },
                {
                    "type": "p",
                    "text": "Since Tailwind uses anested object syntaxto define its default color palette, make sure to use dot notation to access the nested colors."
                },
                {
                    "type": "p",
                    "text": "Don’t use the dash syntax when accessing nested color values"
                },
                {
                    "type": "code",
                    "code": ".btn-blue{background-color:theme(colors.blue-500);}"
                },
                {
                    "type": "p",
                    "text": "Use dot notation to access nested color values"
                },
                {
                    "type": "code",
                    "code": ".btn-blue{background-color:theme(colors.blue.500);}"
                },
                {
                    "type": "p",
                    "text": "To adjust the opacity of a color retrieved withtheme, use a slash followed by the opacity value you want to use:"
                },
                {
                    "type": "code",
                    "code": ".btn-blue{background-color:theme(colors.blue.500/75%);}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​screen()"
                },
                {
                    "type": "p",
                    "text": "Thescreenfunction allows you to create media queries that reference your breakpoints by name instead of duplicating their values in your own CSS."
                },
                {
                    "type": "code",
                    "code": "@mediascreen(sm){/* ... */}"
                },
                {
                    "type": "p",
                    "text": "This will resolve to the underlying screen value at build-time, generating a regular media query that matches specified breakpoint:"
                },
                {
                    "type": "code",
                    "code": "@media(min-width:640px){/* ... */}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Directives",
                        "@tailwind",
                        "@layer",
                        "@apply",
                        "@config",
                        "Functions",
                        "theme()",
                        "screen()"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/gap",
            "title": "Gap - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Gap"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the gap between elements"
                },
                {
                    "type": "p",
                    "text": "Use thegap-*utilities to change the gap between both rows and columns in grid and flexbox layouts."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgap-4grid-cols-2\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing row and column gaps independently"
                },
                {
                    "type": "p",
                    "text": "Use thegap-x-*andgap-y-*utilities to change the gap between columns and rows independently."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgap-x-8gap-y-4grid-cols-3\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:gap-6to only apply thegap-6utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid gap-4hover:gap-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:gap-6to apply thegap-6utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid gap-4md:gap-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s gap scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'11':'2.75rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the gap scale by editingtheme.gaportheme.extend.gapin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gap:{'11':'2.75rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgapvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgap-[2.75rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the gap between elements",
                        "Changing row and column gaps independently",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/gradient-color-stops",
            "title": "Gradient Color Stops - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Backgrounds",
                        "Gradient Color Stops"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Starting color"
                },
                {
                    "type": "p",
                    "text": "Use thefrom-*utilities to set the starting color of a gradient."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-rfrom-indigo-500...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ending color"
                },
                {
                    "type": "p",
                    "text": "Use theto-*utilities to set the ending color of a gradient."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-cyan-500to-blue-500...\"></div>"
                },
                {
                    "type": "p",
                    "text": "Gradientsdo notfade in from transparent by default. To fade in from transparent, reverse the gradient direction and use afrom-*utility."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Middle color"
                },
                {
                    "type": "p",
                    "text": "Use thevia-*utilities to add a middle color to a gradient."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-indigo-500via-purple-500to-pink-500 ...\"></div>"
                },
                {
                    "type": "p",
                    "text": "Gradients with afrom-*andvia-*will fade out to transparent by default if noto-*is present."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Specifying stop positions"
                },
                {
                    "type": "p",
                    "text": "For more control over the gradient color stop positions, combine the gradient color utilities with gradient position utilities likefrom-10%,via-30%andto-90%."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-indigo-500from-10%via-sky-500via-30%to-emerald-500to-90%...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fading to transparent"
                },
                {
                    "type": "p",
                    "text": "Gradients fade out to transparent by default, without requiring you to addto-transparentexplicitly. Tailwind intelligently calculates theright“transparent” value to use based on the starting color to avoida bug in Safari < 15.4that causes fading to simply thetransparentkeyword to fade through gray, which just looks awful."
                },
                {
                    "type": "p",
                    "text": "Don’t addto-transparentexplicitly"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-blue-500 to-transparent\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Only specify a from color and fade to transparent automatically"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:from-pink-500to only apply thefrom-pink-500utility onhover."
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-gradient-to-r from-teal-400 to-blue-500hover:from-pink-500 hover:to-orange-500...\">Hover me</button>"
                },
                {
                    "type": "p",
                    "text": "Note that conditionally setting thefrom-*color resets the entire gradient, so if you want to keep the sameto-*color you need to specify it again for that condition."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"from-teal-400 to-blue-500hover:from-purple-500 hover:to-blue-500...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:from-yellow-500to apply thefrom-yellow-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-purple-400md:from-yellow-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asgradientcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourgradientcolors by editingtheme.gradientColorStopsortheme.extend.gradientColorStopsin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "In addition to the colors, you can also customize the gradient color stop positions by editingtheme.gradientColorStopPositionsortheme.extend.gradientColorStopPositions."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gradientColorStopPositions:{33:'33%',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgradient color stopvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"from-[#243c5a]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Starting color",
                        "Ending color",
                        "Middle color",
                        "Specifying stop positions",
                        "Fading to transparent",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grayscale",
            "title": "Grayscale - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Grayscale"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Making an element grayscale"
                },
                {
                    "type": "p",
                    "text": "Use thegrayscaleandgrayscale-0utilities to control whether an element should be rendered as grayscale or in full color."
                },
                {
                    "type": "p",
                    "text": "grayscale-0"
                },
                {
                    "type": "p",
                    "text": "grayscale"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grayscale-0...\"><!-- ... --></div><divclass=\"grayscale...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert grayscalemd:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:grayscale-0to only apply thegrayscale-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grayscalehover:grayscale-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:grayscale-0to apply thegrayscale-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grayscalemd:grayscale-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposegrayscaleutilities. You can customize these values by editingtheme.grayscaleortheme.extend.grayscalein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{grayscale:{50:'50%',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrayscalevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grayscale-[50%]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Making an element grayscale",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-auto-columns",
            "title": "Grid Auto Columns - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Auto Columns"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Sizing implicitly-created grid columns"
                },
                {
                    "type": "p",
                    "text": "Use theauto-cols-*utilities to control the size of implicitly-created grid columns."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-colauto-cols-max\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:auto-cols-minto only apply theauto-cols-minutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-col auto-cols-maxhover:auto-cols-min\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:auto-cols-minto apply theauto-cols-minutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-col auto-cols-maxmd:auto-cols-min\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes four general purposegrid-auto-columnsutilities. You can customize these values by editingtheme.gridAutoColumnsortheme.extend.gridAutoColumnsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridAutoColumns:{'2fr':'minmax(0, 2fr)',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid-auto-columnsvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-colauto-cols-[minmax(0,_2fr)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Sizing implicitly-created grid columns",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-auto-flow",
            "title": "Grid Auto Flow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Auto Flow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling grid element placement"
                },
                {
                    "type": "p",
                    "text": "Use thegrid-flow-*utilities to control how the auto-placement algorithm works for a grid layout."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-flow-row-densegrid-cols-3 grid-rows-3 ...\"><divclass=\"col-span-2\">01</div><divclass=\"col-span-2\">02</div><div>03</div><div>04</div><div>05</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:grid-flow-rowto only apply thegrid-flow-rowutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-colhover:grid-flow-row\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:grid-flow-rowto apply thegrid-flow-rowutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-colmd:grid-flow-row\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling grid element placement",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-auto-rows",
            "title": "Grid Auto Rows - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Auto Rows"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Sizing implicitly-created grid rows"
                },
                {
                    "type": "p",
                    "text": "Use theauto-rows-*utilities to control the size of implicitly-created grid rows."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-rowauto-rows-max\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:auto-rows-minto only apply theauto-rows-minutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-row auto-rows-maxhover:auto-rows-min\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:auto-rows-minto apply theauto-rows-minutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-row auto-rows-maxmd:auto-rows-min\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes four general purposegrid-auto-rowsutilities. You can customize these values by editingtheme.gridAutoRowsortheme.extend.gridAutoRowsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridAutoRows:{'2fr':'minmax(0, 2fr)',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid-auto-rowsvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-rowauto-rows-[minmax(0,_2fr)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Sizing implicitly-created grid rows",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-column",
            "title": "Grid Column Start / End - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Column Start / End"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Spanning columns"
                },
                {
                    "type": "p",
                    "text": "Use thecol-span-*utilities to make an element spanncolumns."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4\"><divclass=\"...\">01</div><divclass=\"...\">02</div><divclass=\"...\">03</div><divclass=\"col-span-2...\">04</div><divclass=\"...\">05</div><divclass=\"...\">06</div><divclass=\"col-span-2...\">07</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Starting and ending lines"
                },
                {
                    "type": "p",
                    "text": "Use thecol-start-*andcol-end-*utilities to make an element start or end at thenthgrid line. These can also be combined with thecol-span-*utilities to span a specific number of columns."
                },
                {
                    "type": "p",
                    "text": "Note that CSS grid lines start at 1, not 0, so a full-width element in a 6-column grid would start at line 1 and end at line 7."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-6 gap-4\"><divclass=\"col-start-2col-span-4 ...\">01</div><divclass=\"col-start-1 col-end-3...\">02</div><divclass=\"col-end-7 col-span-2...\">03</div><divclass=\"col-start-1 col-end-7...\">04</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:col-span-6to only apply thecol-span-6utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"col-span-2hover:col-span-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:col-span-6to apply thecol-span-6utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"col-span-2md:col-span-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes grid-column utilities for working with grids with up to 12 columns. You change, add, or remove these by customizing thegridColumn,gridColumnStart, andgridColumnEndsections of your Tailwind theme config."
                },
                {
                    "type": "p",
                    "text": "To add newcol-*utilities, customize thegridColumnsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridColumn:{'span-16':'span 16 / span 16',}}}}"
                },
                {
                    "type": "p",
                    "text": "We use this internally for ourcol-span-*utilities. Note that since this configures thegrid-columnshorthand property directly, we include the wordspandirectly in the value name, it’snotbaked into the class name automatically. That means you are free to add entries that do whatever you want here — they don’t just have to bespanutilities."
                },
                {
                    "type": "p",
                    "text": "To add newcol-start-*utilities, customize thegridColumnStartsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridColumnStart:{'13':'13','14':'14','15':'15','16':'16','17':'17',}}}}"
                },
                {
                    "type": "p",
                    "text": "To add newcol-end-*utilities, customize thegridColumnEndsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridColumnEnd:{'13':'13','14':'14','15':'15','16':'16','17':'17',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid columnvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"col-[16_/_span_16]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Spanning columns",
                        "Starting and ending lines",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-row",
            "title": "Grid Row Start / End - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Row Start / End"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Spanning rows"
                },
                {
                    "type": "p",
                    "text": "Use therow-span-*utilities to make an element spannrows."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-3 grid-flow-col gap-4\"><divclass=\"row-span-3...\">01</div><divclass=\"col-span-2 ...\">02</div><divclass=\"row-span-2col-span-2 ...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Starting and ending lines"
                },
                {
                    "type": "p",
                    "text": "Use therow-start-*androw-end-*utilities to make an element start or end at thenthgrid line. These can also be combined with therow-span-*utilities to span a specific number of rows."
                },
                {
                    "type": "p",
                    "text": "Note that CSS grid lines start at 1, not 0, so a full-height element in a 3-row grid would start at line 1 and end at line 4."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-3 grid-flow-col gap-4\"><divclass=\"row-start-2row-span-2 ...\">01</div><divclass=\"row-end-3row-span-2 ...\">02</div><divclass=\"row-start-1 row-end-4...\">03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:row-span-4to only apply therow-span-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"row-span-3hover:row-span-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:row-span-4to apply therow-span-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"row-span-3md:row-span-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes grid-row utilities for working with grids with up to 6 explicit rows. You can customize these values by editingtheme.gridRow,theme.extend.gridRow,theme.gridRowStart,theme.extend.gridRowStart,theme.gridRowEnd, andtheme.extend.gridRowEndin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "To add newrow-*utilities, customize thegridRowsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridRow:{'span-16':'span 16 / span 16',}}}}"
                },
                {
                    "type": "p",
                    "text": "We use this internally for ourrow-span-*utilities. Note that since this configures thegrid-rowshorthand property directly, we include the wordspandirectly in the value name, it’snotbaked into the class name automatically. That means you are free to add entries that do whatever you want here — they don’t just have to bespanutilities."
                },
                {
                    "type": "p",
                    "text": "To add newrow-start-*utilities, customize thegridRowStartsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridRowStart:{'8':'8','9':'9','10':'10','11':'11','12':'12','13':'13',}}}}"
                },
                {
                    "type": "p",
                    "text": "To add newrow-end-*utilities, customize thegridRowEndsection of your Tailwind theme config:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridRowEnd:{'8':'8','9':'9','10':'10','11':'11','12':'12','13':'13',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid rowvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"row-[span_16_/_span_16]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Spanning rows",
                        "Starting and ending lines",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-template-columns",
            "title": "Grid Template Columns - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Template Columns"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Specifying the columns in a grid"
                },
                {
                    "type": "p",
                    "text": "Use thegrid-cols-*utilities to create grids withnequally sized columns."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-cols-4gap-4\"><div>01</div><!-- ... --><div>09</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Subgrid"
                },
                {
                    "type": "p",
                    "text": "Use thegrid-cols-subgridutility to adopt the column tracks defined by the item’s parent."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-4 gap-4\"><div>01</div><!-- ... --><div>05</div><divclass=\"gridgrid-cols-subgridgap-4 col-span-3\"><divclass=\"col-start-2\">06</div></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:grid-cols-6to only apply thegrid-cols-6utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-1hover:grid-cols-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:grid-cols-6to apply thegrid-cols-6utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-1md:grid-cols-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includesgrid-template-columnutilities for creating basic grids with up to 12 equal width columns. You can customize these values by editingtheme.gridTemplateColumnsortheme.extend.gridTemplateColumnsin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "You have direct access to thegrid-template-columnsCSS property here so you can make your custom column values as generic or as complicated and site-specific as you like."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridTemplateColumns:{// Simple 16 column grid'16':'repeat(16, minmax(0, 1fr))',// Complex site-specific column configuration'footer':'200px minmax(900px, 1fr) 100px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid-template-columnsvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-cols-[200px_minmax(900px,_1fr)_100px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Specifying the columns in a grid",
                        "Subgrid",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/grid-template-rows",
            "title": "Grid Template Rows - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Grid Template Rows"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Specifying the rows in a grid"
                },
                {
                    "type": "p",
                    "text": "Use thegrid-rows-*utilities to create grids withnequally sized rows."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-rows-4grid-flow-col gap-4\"><div>01</div><!-- ... --><div>09</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Subgrid"
                },
                {
                    "type": "p",
                    "text": "Use thegrid-rows-subgridutility to adopt the row tracks defined by the item’s parent."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-4 grid-flow-col gap-4\"><div>01</div><!-- ... --><div>05</div><divclass=\"gridgrid-rows-subgridgap-4 row-span-3\"><divclass=\"row-start-2\">06</div></div><div>07</div><!-- ... --><div>10</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:grid-rows-6to only apply thegrid-rows-6utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-2hover:grid-rows-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:grid-rows-6to apply thegrid-rows-6utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-rows-2md:grid-rows-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includesgrid-template-rowutilities for creating basic grids with up to 12 equal width rows. You can customize these values by editingtheme.gridTemplateRowsortheme.extend.gridTemplateRowsin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "You have direct access to thegrid-template-rowsCSS property here so you can make your custom rows values as generic or as complicated and site-specific as you like."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{gridTemplateRows:{// Simple 16 row grid'16':'repeat(16, minmax(0, 1fr))',// Complex site-specific row configuration'layout':'200px minmax(900px, 1fr) 100px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offgrid-template-rowsvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridgrid-rows-[200px_minmax(900px,_1fr)_100px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Specifying the rows in a grid",
                        "Subgrid",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/adonisjs",
            "title": "Install Tailwind CSS with Adonis - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new AdonisJS project if you don’t have one set up already. The most common approach is to useCreate AdonisJS.Terminalnpm init adonisjs@latest my-project -- --kit=webcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./resources/**/*.edge\",\"./resources/**/*.{js,ts,jsx,tsx,vue}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./resources/css/app.cssfile.app.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectMake sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content.home.edge<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">@vite(['resources/css/app.css', 'resources/js/app.js'])</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new AdonisJS project if you don’t have one set up already. The most common approach is to useCreate AdonisJS."
                },
                {
                    "type": "code",
                    "code": "npm init adonisjs@latest my-project -- --kit=webcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./resources/**/*.edge\",\"./resources/**/*.{js,ts,jsx,tsx,vue}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./resources/css/app.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Make sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">@vite(['resources/css/app.css', 'resources/js/app.js'])</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/angular",
            "title": "Install Tailwind CSS with Angular - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Angular project if you don’t have one set up already. The most common approach is to useAngular CLI.Terminalng new my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssvia npm, and then run the init command to generate atailwind.config.jsfile.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,ts}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/styles.cssfile.styles.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withng serve.Terminalng serve",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.app.component.html<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Angular project if you don’t have one set up already. The most common approach is to useAngular CLI."
                },
                {
                    "type": "code",
                    "code": "ng new my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssvia npm, and then run the init command to generate atailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,ts}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/styles.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withng serve."
                },
                {
                    "type": "code",
                    "code": "ng serve"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/astro",
            "title": "Install Tailwind CSS with Astro - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Astro project if you don't have one set up already. The most common approach is to usecreate astro.Terminalnpm create astro@latest my-projectcd my-project",
                        "Install Tailwind CSSRun theastro addcommand to install bothtailwindcssand@astro/tailwindas well as generate atailwind.config.cjsfile.Terminalnpx astro add tailwind",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind's utility classes to style your content.index.astro<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Astro project if you don't have one set up already. The most common approach is to usecreate astro."
                },
                {
                    "type": "code",
                    "code": "npm create astro@latest my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Run theastro addcommand to install bothtailwindcssand@astro/tailwindas well as generate atailwind.config.cjsfile."
                },
                {
                    "type": "code",
                    "code": "npx astro add tailwind"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind's utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/create-react-app",
            "title": "Install Tailwind CSS with Create React App - Tailwind CSS",
            "content": [
                {
                    "type": "p",
                    "text": "Wehighly recommendusingVite,Next.js,Remix, orParcelinstead of Create React App. They provide an equivalent or better developer experience but with more flexibility, giving you more control over how Tailwind and PostCSS are configured. Create React App does not support custom PostCSS configurations, so you can't use"
                },
                {
                    "type": "p",
                    "text": "Create React App does not support custom PostCSS configurations and is incompatible with many important tools in the PostCSS ecosystem, like`postcss-import`."
                },
                {
                    "type": "p",
                    "text": "Wehighly recommendusingVite,Parcel,Next.js, orRemixinstead of Create React App. They provide an equivalent or better developer experience but with more flexibility, giving you more control over how Tailwind and PostCSS are configured."
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new React project withCreate React App v5.0+if you don't have one already set up.Terminalnpx create-react-app my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssvia npm, and then run the init command to generate yourtailwind.config.jsfile.Terminalnpm install -D tailwindcssnpx tailwindcss init",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile.index.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run start.Terminalnpm run start",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.App.jsexportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new React project withCreate React App v5.0+if you don't have one already set up."
                },
                {
                    "type": "code",
                    "code": "npx create-react-app my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssvia npm, and then run the init command to generate yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcssnpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run start."
                },
                {
                    "type": "code",
                    "code": "npm run start"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/emberjs",
            "title": "Install Tailwind CSS With Ember.js - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Ember.js project if you don't have one set up already. The most common approach is to useEmber CLI.Terminalnpx ember-cli new my-project --embroider --no-welcomecd my-project",
                        "Install Tailwind CSSUsing npm, installtailwindcssand its peer dependencies, as well aspostcss-loader, and then run theinitcommand to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p",
                        "Enable PostCSS supportIn yourember-cli-build.jsfile, configure PostCSS to process your CSS files.ember-cli-build.js'use strict';constEmberApp=require('ember-cli/lib/broccoli/ember-app');module.exports=function(defaults){constapp=newEmberApp(defaults,{// Add options here});const{Webpack}=require('@embroider/webpack');returnrequire('@embroider/compat').compatBuild(app,Webpack,{skipBabel:[{package:'qunit',},],packagerOptions:{webpackConfig:{module:{rules:[{test:/\\.css$/i,use:[{loader:'postcss-loader',options:{postcssOptions:{config:'postcss.config.js',},},},],},],},},},});};",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:['./app/**/*.{gjs,gts,hbs,html,js,ts}'],theme:{extend:{},},plugins:[],};",
                        "Add the Tailwind directives to your CSSCreate a./app/app.cssfile and add the@tailwinddirectives for each of Tailwind's layers.app.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Import the CSS fileImport the newly-created./app/app.cssfile in your./app/app.jsfile.app.jsimportApplicationfrom'@ember/application';importResolverfrom'ember-resolver';importloadInitializersfrom'ember-load-initializers';importconfigfrom'my-project/config/environment';import'my-project/app.css';exportdefaultclassAppextendsApplication{modulePrefix=config.modulePrefix;podModulePrefix=config.podModulePrefix;Resolver=Resolver;}loadInitializers(App,config.modulePrefix);",
                        "Start your build processRun your build process withnpm run start.Terminalnpm run start",
                        "Start using Tailwind in your projectStart using Tailwind's utility classes to style your content.application.hbs{{page-title\"MyProject\"}}<h1class=\"text-3xl font-bold underline\">Helloworld!</h1>{{outlet}}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Ember.js project if you don't have one set up already. The most common approach is to useEmber CLI."
                },
                {
                    "type": "code",
                    "code": "npx ember-cli new my-project --embroider --no-welcomecd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Using npm, installtailwindcssand its peer dependencies, as well aspostcss-loader, and then run theinitcommand to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable PostCSS support"
                },
                {
                    "type": "p",
                    "text": "In yourember-cli-build.jsfile, configure PostCSS to process your CSS files."
                },
                {
                    "type": "code",
                    "code": "'use strict';constEmberApp=require('ember-cli/lib/broccoli/ember-app');module.exports=function(defaults){constapp=newEmberApp(defaults,{// Add options here});const{Webpack}=require('@embroider/webpack');returnrequire('@embroider/compat').compatBuild(app,Webpack,{skipBabel:[{package:'qunit',},],packagerOptions:{webpackConfig:{module:{rules:[{test:/\\.css$/i,use:[{loader:'postcss-loader',options:{postcssOptions:{config:'postcss.config.js',},},},],},],},},},});};"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./app/**/*.{gjs,gts,hbs,html,js,ts}'],theme:{extend:{},},plugins:[],};"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create a./app/app.cssfile and add the@tailwinddirectives for each of Tailwind's layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Import the CSS file"
                },
                {
                    "type": "p",
                    "text": "Import the newly-created./app/app.cssfile in your./app/app.jsfile."
                },
                {
                    "type": "code",
                    "code": "importApplicationfrom'@ember/application';importResolverfrom'ember-resolver';importloadInitializersfrom'ember-load-initializers';importconfigfrom'my-project/config/environment';import'my-project/app.css';exportdefaultclassAppextendsApplication{modulePrefix=config.modulePrefix;podModulePrefix=config.podModulePrefix;Resolver=Resolver;}loadInitializers(App,config.modulePrefix);"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run start."
                },
                {
                    "type": "code",
                    "code": "npm run start"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind's utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "{{page-title\"MyProject\"}}<h1class=\"text-3xl font-bold underline\">Helloworld!</h1>{{outlet}}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/gatsby",
            "title": "Install Tailwind CSS with Gatsby - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Gatsby project if you don’t have one set up already. The most common approach is to useGatsby CLI.Terminalgatsby new my-projectcd my-project",
                        "Install Tailwind CSSUsing npm, installtailwindcssand its peer dependencies, as well asgatsby-plugin-postcss, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixer gatsby-plugin-postcssnpx tailwindcss init -p",
                        "Enable the Gatsby PostCSS pluginIn yourgatsby-config.jsfile, enable thegatsby-plugin-postcss. Seethe plugin's documentationfor more information.gatsby-config.jsmodule.exports={plugins:['gatsby-plugin-postcss',// ...],}",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/pages/**/*.{js,jsx,ts,tsx}\",\"./src/components/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSCreate a./src/styles/global.cssfile and add the@tailwinddirectives for each of Tailwind’s layers.global.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Import the CSS fileCreate agatsby-browser.jsfile at the root of your project if it doesn’t already exist, and import your newly-created./src/styles/global.cssfile.gatsby-browser.jsimport'./src/styles/global.css'",
                        "Start your build processRun your build process withgatsby develop.Terminalgatsby develop",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.index.jsexportdefaultfunctionIndexPage(){return(<Layout><h1className=\"text-3xl font-bold underline\">Helloworld!</h1></Layout>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Gatsby project if you don’t have one set up already. The most common approach is to useGatsby CLI."
                },
                {
                    "type": "code",
                    "code": "gatsby new my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Using npm, installtailwindcssand its peer dependencies, as well asgatsby-plugin-postcss, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixer gatsby-plugin-postcssnpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable the Gatsby PostCSS plugin"
                },
                {
                    "type": "p",
                    "text": "In yourgatsby-config.jsfile, enable thegatsby-plugin-postcss. Seethe plugin's documentationfor more information."
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:['gatsby-plugin-postcss',// ...],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/pages/**/*.{js,jsx,ts,tsx}\",\"./src/components/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create a./src/styles/global.cssfile and add the@tailwinddirectives for each of Tailwind’s layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Import the CSS file"
                },
                {
                    "type": "p",
                    "text": "Create agatsby-browser.jsfile at the root of your project if it doesn’t already exist, and import your newly-created./src/styles/global.cssfile."
                },
                {
                    "type": "code",
                    "code": "import'./src/styles/global.css'"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withgatsby develop."
                },
                {
                    "type": "code",
                    "code": "gatsby develop"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionIndexPage(){return(<Layout><h1className=\"text-3xl font-bold underline\">Helloworld!</h1></Layout>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/laravel",
            "title": "Install Tailwind CSS with Laravel - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Using Vite",
                        "Using Laravel Mix"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Vite"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Laravel Mix"
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Laravel project if you don’t have one set up already. The most common approach is to usethe Composercreate-projectcommand.Terminalcomposer create-project laravel/laravel my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./resources/**/*.blade.php\",\"./resources/**/*.js\",\"./resources/**/*.vue\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./resources/css/app.cssfile.app.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectMake sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content.app.blade.php<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">@vite('resources/css/app.css')</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Laravel project if you don’t have one set up already. The most common approach is to usethe Composercreate-projectcommand."
                },
                {
                    "type": "code",
                    "code": "composer create-project laravel/laravel my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./resources/**/*.blade.php\",\"./resources/**/*.js\",\"./resources/**/*.vue\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./resources/css/app.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Make sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">@vite('resources/css/app.css')</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/meteor",
            "title": "Install Tailwind CSS with Meteor - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Meteor project if you don't have one set up already. The most common approach is to usethe Meteor CLI.Terminalmeteor create my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./imports/ui/**/*.{js,jsx,ts,tsx}\",\"./client/*.html\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./client/main.cssfile.main.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run start.Terminalnpm run start",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.App.jsxexportconstApp=()=>(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Meteor project if you don't have one set up already. The most common approach is to usethe Meteor CLI."
                },
                {
                    "type": "code",
                    "code": "meteor create my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./imports/ui/**/*.{js,jsx,ts,tsx}\",\"./client/*.html\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./client/main.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run start."
                },
                {
                    "type": "code",
                    "code": "npm run start"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportconstApp=()=>(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/nextjs",
            "title": "Install Tailwind CSS with Next.js - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Next.js project if you don’t have one set up already. The most common approach is to useCreate Next App.Terminalnpx create-next-app@latest my-project --typescript --eslintcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./app/**/*.{js,ts,jsx,tsx,mdx}\",\"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\"./components/**/*.{js,ts,jsx,tsx,mdx}\",// Or if using `src` directory:\"./src/**/*.{js,ts,jsx,tsx,mdx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to yourglobals.cssfile.globals.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.index.tsxexportdefaultfunctionHome(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Next.js project if you don’t have one set up already. The most common approach is to useCreate Next App."
                },
                {
                    "type": "code",
                    "code": "npx create-next-app@latest my-project --typescript --eslintcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./app/**/*.{js,ts,jsx,tsx,mdx}\",\"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\"./components/**/*.{js,ts,jsx,tsx,mdx}\",// Or if using `src` directory:\"./src/**/*.{js,ts,jsx,tsx,mdx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to yourglobals.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionHome(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/nuxtjs",
            "title": "Install Tailwind CSS with Nuxt - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Standard installation",
                        "Using Nuxt Modules"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Standard installation"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Nuxt Modules"
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Nuxt project if you don’t have one set up already. The most common approach is to use theNuxt Command Line Interface.Terminalnpx nuxi init my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate atailwind.config.jsfile.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init",
                        "Add Tailwind to your PostCSS configurationAddtailwindcssandautoprefixerto thepostcss.pluginsobject in yournuxt.config.jsfile.nuxt.config.js// https://nuxt.com/docs/api/configuration/nuxt-configexportdefaultdefineNuxtConfig({devtools:{enabled:true},postcss:{plugins:{tailwindcss:{},autoprefixer:{},},},})",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./components/**/*.{js,vue,ts}\",\"./layouts/**/*.vue\",\"./pages/**/*.vue\",\"./plugins/**/*.{js,ts}\",\"./app.vue\",\"./error.vue\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSCreate an./assets/css/main.cssfile and add the@tailwinddirectives for each of Tailwind’s layers.main.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Add the CSS file globallyAdd your newly-created./assets/css/main.cssto thecssarray in yournuxt.config.jsfile.nuxt.config.js// https://nuxt.com/docs/api/configuration/nuxt-configexportdefaultdefineNuxtConfig({devtools:{enabled:true},css:['~/assets/css/main.css'],postcss:{plugins:{tailwindcss:{},autoprefixer:{},},},})",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.app.vue<template><h1class=\"text-3xl font-bold underline\">Hello world!</h1></template>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Nuxt project if you don’t have one set up already. The most common approach is to use theNuxt Command Line Interface."
                },
                {
                    "type": "code",
                    "code": "npx nuxi init my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate atailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add Tailwind to your PostCSS configuration"
                },
                {
                    "type": "p",
                    "text": "Addtailwindcssandautoprefixerto thepostcss.pluginsobject in yournuxt.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "// https://nuxt.com/docs/api/configuration/nuxt-configexportdefaultdefineNuxtConfig({devtools:{enabled:true},postcss:{plugins:{tailwindcss:{},autoprefixer:{},},},})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./components/**/*.{js,vue,ts}\",\"./layouts/**/*.vue\",\"./pages/**/*.vue\",\"./plugins/**/*.{js,ts}\",\"./app.vue\",\"./error.vue\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create an./assets/css/main.cssfile and add the@tailwinddirectives for each of Tailwind’s layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the CSS file globally"
                },
                {
                    "type": "p",
                    "text": "Add your newly-created./assets/css/main.cssto thecssarray in yournuxt.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "// https://nuxt.com/docs/api/configuration/nuxt-configexportdefaultdefineNuxtConfig({devtools:{enabled:true},css:['~/assets/css/main.css'],postcss:{plugins:{tailwindcss:{},autoprefixer:{},},},})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<template><h1class=\"text-3xl font-bold underline\">Hello world!</h1></template>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/parcel",
            "title": "Install Tailwind CSS with Parcel - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Parcel project if you don’t have one set up already. The most common approach is to add Parcel as a dev-dependency to your project as outlined in theirgetting started guide.Terminalmkdir my-projectcd my-projectnpm init -ynpm install -D parcelmkdir srctouch src/index.html",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generatetailwind.config.js.Terminalnpm install -D tailwindcss postcssnpx tailwindcss init",
                        "Configure PostCSSCreate a.postcssrcfile in your project root, and enable thetailwindcssplugin..postcssrc{\"plugins\":{\"tailwindcss\":{}}}",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSCreate a./src/index.cssfile and add the@tailwinddirectives for each of Tailwind’s layers.index.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpx parcel src/index.html.Terminalnpx parcel src/index.html",
                        "Start using Tailwind in your projectAdd your CSS file to the<head>and start using Tailwind’s utility classes to style your content.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"./index.css\"type=\"text/css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Parcel project if you don’t have one set up already. The most common approach is to add Parcel as a dev-dependency to your project as outlined in theirgetting started guide."
                },
                {
                    "type": "code",
                    "code": "mkdir my-projectcd my-projectnpm init -ynpm install -D parcelmkdir srctouch src/index.html"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generatetailwind.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcssnpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure PostCSS"
                },
                {
                    "type": "p",
                    "text": "Create a.postcssrcfile in your project root, and enable thetailwindcssplugin."
                },
                {
                    "type": "code",
                    "code": "{\"plugins\":{\"tailwindcss\":{}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create a./src/index.cssfile and add the@tailwinddirectives for each of Tailwind’s layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpx parcel src/index.html."
                },
                {
                    "type": "code",
                    "code": "npx parcel src/index.html"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Add your CSS file to the<head>and start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"./index.css\"type=\"text/css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/phoenix",
            "title": "Install Tailwind CSS with Phoenix - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Phoenix project if you don't have one set up already. You can follow theirinstallation guideto get up and running.Terminalmix phx.new myprojectcd myproject",
                        "Install the Tailwind pluginAdd the Tailwind plugin to your dependencies and runmix deps.getto install it.mix.exsdefpdepsdo[{:tailwind,\"~> 0.1\",runtime:Mix.env()==:dev}]end",
                        "Configure the Tailwind pluginIn yourconfig.exsfile you can set which version of Tailwind CSS you want to use, the path to your Tailwind config, and customize your asset paths.config.exsconfig:tailwind,version:\"3.4.13\",default:[args:~w(--config=tailwind.config.js--input=css/app.css--output=../priv/static/assets/app.css),cd:Path.expand(\"../assets\",__DIR__)]",
                        "Update your deployment scriptConfigure yourassets.deployalias to build your CSS on deployment.mix.exsdefpaliasesdo[setup:[\"deps.get\",\"ecto.setup\"],\"ecto.setup\":[\"ecto.create\",\"ecto.migrate\",\"run priv/repo/seeds.exs\"],\"ecto.reset\":[\"ecto.drop\",\"ecto.setup\"],test:[\"ecto.create --quiet\",\"ecto.migrate --quiet\",\"test\"],\"assets.deploy\":[\"tailwind default --minify\",\"esbuild default --minify\",\"phx.digest\"]]end",
                        "Enable watcher in developmentAdd Tailwind to your list of watchers in your./config/dev.exsfile.dev.exswatchers:[# Start the esbuild watcher by calling Esbuild.install_and_run(:default, args)esbuild:{Esbuild,:install_and_run,[:default,~w(--sourcemap=inline --watch)]},tailwind:{Tailwind,:install_and_run,[:default,~w(--watch)]}]",
                        "Install Tailwind CSSRun the install command to download the standalone Tailwind CLI and generate atailwind.config.jsfile in the./assetsdirectory.Terminalmix tailwind.install",
                        "Configure your template pathsAdd the paths to all of your template files in your./assets/tailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:['./js/**/*.js','../lib/*_web.ex','../lib/*_web/**/*.*ex',],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to./assets/css/app.cssapp.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Remove the default CSS importRemove the CSS import from./assets/js/app.js, as Tailwind is now handling this for you.app.js// Remove this line if you add your own CSS build pipeline (e.g postcss).import\"../css/app.css\"",
                        "Start your build processRun your build process withmix phx.server.Terminalmix phx.server",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.index.html.heex<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Phoenix project if you don't have one set up already. You can follow theirinstallation guideto get up and running."
                },
                {
                    "type": "code",
                    "code": "mix phx.new myprojectcd myproject"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install the Tailwind plugin"
                },
                {
                    "type": "p",
                    "text": "Add the Tailwind plugin to your dependencies and runmix deps.getto install it."
                },
                {
                    "type": "code",
                    "code": "defpdepsdo[{:tailwind,\"~> 0.1\",runtime:Mix.env()==:dev}]end"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure the Tailwind plugin"
                },
                {
                    "type": "p",
                    "text": "In yourconfig.exsfile you can set which version of Tailwind CSS you want to use, the path to your Tailwind config, and customize your asset paths."
                },
                {
                    "type": "code",
                    "code": "config:tailwind,version:\"3.4.13\",default:[args:~w(--config=tailwind.config.js--input=css/app.css--output=../priv/static/assets/app.css),cd:Path.expand(\"../assets\",__DIR__)]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update your deployment script"
                },
                {
                    "type": "p",
                    "text": "Configure yourassets.deployalias to build your CSS on deployment."
                },
                {
                    "type": "code",
                    "code": "defpaliasesdo[setup:[\"deps.get\",\"ecto.setup\"],\"ecto.setup\":[\"ecto.create\",\"ecto.migrate\",\"run priv/repo/seeds.exs\"],\"ecto.reset\":[\"ecto.drop\",\"ecto.setup\"],test:[\"ecto.create --quiet\",\"ecto.migrate --quiet\",\"test\"],\"assets.deploy\":[\"tailwind default --minify\",\"esbuild default --minify\",\"phx.digest\"]]end"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable watcher in development"
                },
                {
                    "type": "p",
                    "text": "Add Tailwind to your list of watchers in your./config/dev.exsfile."
                },
                {
                    "type": "code",
                    "code": "watchers:[# Start the esbuild watcher by calling Esbuild.install_and_run(:default, args)esbuild:{Esbuild,:install_and_run,[:default,~w(--sourcemap=inline --watch)]},tailwind:{Tailwind,:install_and_run,[:default,~w(--watch)]}]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Run the install command to download the standalone Tailwind CLI and generate atailwind.config.jsfile in the./assetsdirectory."
                },
                {
                    "type": "code",
                    "code": "mix tailwind.install"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in your./assets/tailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./js/**/*.js','../lib/*_web.ex','../lib/*_web/**/*.*ex',],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to./assets/css/app.css"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remove the default CSS import"
                },
                {
                    "type": "p",
                    "text": "Remove the CSS import from./assets/js/app.js, as Tailwind is now handling this for you."
                },
                {
                    "type": "code",
                    "code": "// Remove this line if you add your own CSS build pipeline (e.g postcss).import\"../css/app.css\""
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withmix phx.server."
                },
                {
                    "type": "code",
                    "code": "mix phx.server"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/qwik",
            "title": "Install Tailwind CSS with Qwik - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Qwik project if you don't have one set up already. The most common approach is to useCreate Qwik.Terminalnpm create qwik@latest my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:['./src/**/*.{js,ts,jsx,tsx,mdx}'],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/global.cssfile.global.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.index.tsximport{component$}from'@builder.io/qwik'exportdefaultcomponent$(()=>{return(<h1class=\"text-3xl font-bold underline\">HelloWorld!</h1>)})"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Qwik project if you don't have one set up already. The most common approach is to useCreate Qwik."
                },
                {
                    "type": "code",
                    "code": "npm create qwik@latest my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./src/**/*.{js,ts,jsx,tsx,mdx}'],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/global.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "import{component$}from'@builder.io/qwik'exportdefaultcomponent$(()=>{return(<h1class=\"text-3xl font-bold underline\">HelloWorld!</h1>)})"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/remix",
            "title": "Install Tailwind CSS with Remix - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Remix project if you don’t have one set up already. The most common approach is to useCreate Remix.Terminalnpx create-remix@latest my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssvia npm, and then run the init command to generate atailwind.config.tsandpostcss.config.jsfile.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init --ts -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.tsfile.tailwind.config.tsimporttype{Config}from'tailwindcss'exportdefault{content:['./app/**/*.{js,jsx,ts,tsx}'],theme:{extend:{},},plugins:[],}satisfies Config",
                        "Add the Tailwind directives to your CSSCreate a./app/tailwind.cssfile and add the@tailwinddirectives for each of Tailwind’s layers.tailwind.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Import the CSS fileImport the newly-created./app/tailwind.cssfile in your./app/root.tsxfile.root.tsximporttype{LinksFunction}from\"@remix-run/node\";importstylesheetfrom\"~/tailwind.css?url\";exportconstlinks:LinksFunction=()=>[{rel:\"stylesheet\",href:stylesheet},];",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content._index.tsxexportdefaultfunctionIndex(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Remix project if you don’t have one set up already. The most common approach is to useCreate Remix."
                },
                {
                    "type": "code",
                    "code": "npx create-remix@latest my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssvia npm, and then run the init command to generate atailwind.config.tsandpostcss.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init --ts -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.tsfile."
                },
                {
                    "type": "code",
                    "code": "importtype{Config}from'tailwindcss'exportdefault{content:['./app/**/*.{js,jsx,ts,tsx}'],theme:{extend:{},},plugins:[],}satisfies Config"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create a./app/tailwind.cssfile and add the@tailwinddirectives for each of Tailwind’s layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Import the CSS file"
                },
                {
                    "type": "p",
                    "text": "Import the newly-created./app/tailwind.cssfile in your./app/root.tsxfile."
                },
                {
                    "type": "code",
                    "code": "importtype{LinksFunction}from\"@remix-run/node\";importstylesheetfrom\"~/tailwind.css?url\";exportconstlinks:LinksFunction=()=>[{rel:\"stylesheet\",href:stylesheet},];"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionIndex(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/rspack",
            "title": "Install Tailwind CSS with Rspack - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Using React",
                        "Using Vue"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using React"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Vue"
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Rspack project if you don’t have one set up already. The most common approach is to useRspack CLI.Terminalnpm create rspack@latest",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles.Terminalnpm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p",
                        "Enable PostCSS supportIn yourrspack.config.jsfile, enable the PostCSS loader. Seethe documentationfor more information.rspack.config.jsmodule.exports={// ...module:{rules:[{test:/\\.css$/,use:[\"postcss-loader\"],type:\"css\",},// ...",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./src/**/*.{js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile.index.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.App.jsxexportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Rspack project if you don’t have one set up already. The most common approach is to useRspack CLI."
                },
                {
                    "type": "code",
                    "code": "npm create rspack@latest"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable PostCSS support"
                },
                {
                    "type": "p",
                    "text": "In yourrspack.config.jsfile, enable the PostCSS loader. Seethe documentationfor more information."
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...module:{rules:[{test:/\\.css$/,use:[\"postcss-loader\"],type:\"css\",},// ..."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./src/**/*.{js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/ruby-on-rails",
            "title": "Install Tailwind CSS with Ruby on Rails - Tailwind CSS",
            "content": [
                {
                    "type": "p",
                    "text": "The quickest way to start using Tailwind CSS in your Rails project is to useTailwind CSS for Railsby runningrails new my-project --css tailwind. This will automatically configure your Tailwind setup based on the official Rails example. If you'd like to configure Tailwind manually, continue with the rest of this guide."
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Rails project if you don't have one set up already. The most common approach is to use theRails Command Line.Terminalrails new my-projectcd my-project",
                        "Install Tailwind CSSInstall thetailwindcss-railsgem, and then run the install command to generate atailwind.config.jsfile in the./configdirectory.Terminal./bin/bundle add tailwindcss-rails./bin/rails tailwindcss:install",
                        "Configure your template pathsAdd the paths to all of your template files to your./config/tailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:['./public/*.html','./app/helpers/**/*.rb','./app/javascript/**/*.js','./app/views/**/*',],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind's layers to yourapplication.tailwind.cssfile located in the./app/assets/stylesheetsdirectory.application.tailwind.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process with./bin/dev.Terminal./bin/dev",
                        "Start using Tailwind in your projectStart using Tailwind's utility classes to style your content.index.html.erb<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Rails project if you don't have one set up already. The most common approach is to use theRails Command Line."
                },
                {
                    "type": "code",
                    "code": "rails new my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Install thetailwindcss-railsgem, and then run the install command to generate atailwind.config.jsfile in the./configdirectory."
                },
                {
                    "type": "code",
                    "code": "./bin/bundle add tailwindcss-rails./bin/rails tailwindcss:install"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files to your./config/tailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:['./public/*.html','./app/helpers/**/*.rb','./app/javascript/**/*.js','./app/views/**/*',],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind's layers to yourapplication.tailwind.cssfile located in the./app/assets/stylesheetsdirectory."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process with./bin/dev."
                },
                {
                    "type": "code",
                    "code": "./bin/dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind's utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-3xl font-bold underline\">Hello world!</h1>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/solidjs",
            "title": "Install Tailwind CSS with SolidJS - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new SolidJS project if you don't have one set up already. The most common approach is to usethe SolidJS Vite template.Terminalnpx degit solidjs/templates/js my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile.index.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.App.jsxexportdefaultfunctionApp(){return(<h1class=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new SolidJS project if you don't have one set up already. The most common approach is to usethe SolidJS Vite template."
                },
                {
                    "type": "code",
                    "code": "npx degit solidjs/templates/js my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{js,jsx,ts,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionApp(){return(<h1class=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/sveltekit",
            "title": "Install Tailwind CSS with SvelteKit - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new SvelteKit project if you don't have one set up already. The most common approach is outlined in theGetting Started with SvelteKitintroduction.Terminalnpm create svelte@latest my-projectcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Enable use of PostCSS in <style> blocksIn yoursvelte.config.jsfile, importvitePreprocessto enable processing<style>blocks as PostCSS.svelte.config.jsimportadapterfrom'@sveltejs/adapter-auto';import{vitePreprocess}from'@sveltejs/vite-plugin-svelte';/**@type{import('@sveltejs/kit').Config}*/constconfig={kit:{adapter:adapter()},preprocess:vitePreprocess()};exportdefaultconfig;",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/exportdefault{content:['./src/**/*.{html,js,svelte,ts}'],theme:{extend:{}},plugins:[]};",
                        "Add the Tailwind directives to your CSSCreate a./src/app.cssfile and add the@tailwinddirectives for each of Tailwind’s layers.app.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Import the CSS fileCreate a./src/routes/+layout.sveltefile and import the newly-createdapp.cssfile.+layout.svelte<script>import\"../app.css\";</script><slot/>",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content, making sure to setlang=\"postcss\"for any<style>blocks that need to be processed by Tailwind.+page.svelte<h1class=\"text-3xl font-bold underline\">Hello world!</h1><stylelang=\"postcss\">:global(html){background-color:theme(colors.gray.100);}</style>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new SvelteKit project if you don't have one set up already. The most common approach is outlined in theGetting Started with SvelteKitintroduction."
                },
                {
                    "type": "code",
                    "code": "npm create svelte@latest my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable use of PostCSS in <style> blocks"
                },
                {
                    "type": "p",
                    "text": "In yoursvelte.config.jsfile, importvitePreprocessto enable processing<style>blocks as PostCSS."
                },
                {
                    "type": "code",
                    "code": "importadapterfrom'@sveltejs/adapter-auto';import{vitePreprocess}from'@sveltejs/vite-plugin-svelte';/**@type{import('@sveltejs/kit').Config}*/constconfig={kit:{adapter:adapter()},preprocess:vitePreprocess()};exportdefaultconfig;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:['./src/**/*.{html,js,svelte,ts}'],theme:{extend:{}},plugins:[]};"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Create a./src/app.cssfile and add the@tailwinddirectives for each of Tailwind’s layers."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Import the CSS file"
                },
                {
                    "type": "p",
                    "text": "Create a./src/routes/+layout.sveltefile and import the newly-createdapp.cssfile."
                },
                {
                    "type": "code",
                    "code": "<script>import\"../app.css\";</script><slot/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content, making sure to setlang=\"postcss\"for any<style>blocks that need to be processed by Tailwind."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-3xl font-bold underline\">Hello world!</h1><stylelang=\"postcss\">:global(html){background-color:theme(colors.gray.100);}</style>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/symfony",
            "title": "Install Tailwind CSS with Symfony - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Symfony project if you don’t have one set up already. The most common approach is to usethe Symfony Installer.Terminalsymfony new --webapp my-projectcd my-project",
                        "Install Webpack EncoreInstall Webpack Encore, which handles building your assets. Seethe documentationfor more information.Terminalcomposer require symfony/webpack-encore-bundle",
                        "Install Tailwind CSSUsing npm, installtailwindcssand its peer dependencies, as well aspostcss-loader, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js.Terminalnpm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p",
                        "Enable PostCSS supportIn yourwebpack.config.jsfile, enable the PostCSS Loader. Seethe documentationfor more information.webpack.config.jsEncore// ....enablePostCssLoader();",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./assets/**/*.js\",\"./templates/**/*.html.twig\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./assets/styles/app.cssfile.app.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run watch.Terminalnpm run watch",
                        "Start using Tailwind in your projectMake sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content.base.html.twig<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">{% block stylesheets %}{{ encore_entry_link_tags('app') }}{% endblock %}</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Symfony project if you don’t have one set up already. The most common approach is to usethe Symfony Installer."
                },
                {
                    "type": "code",
                    "code": "symfony new --webapp my-projectcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Webpack Encore"
                },
                {
                    "type": "p",
                    "text": "Install Webpack Encore, which handles building your assets. Seethe documentationfor more information."
                },
                {
                    "type": "code",
                    "code": "composer require symfony/webpack-encore-bundle"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Using npm, installtailwindcssand its peer dependencies, as well aspostcss-loader, and then run the init command to generate bothtailwind.config.jsandpostcss.config.js."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss postcss-loader autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable PostCSS support"
                },
                {
                    "type": "p",
                    "text": "In yourwebpack.config.jsfile, enable the PostCSS Loader. Seethe documentationfor more information."
                },
                {
                    "type": "code",
                    "code": "Encore// ....enablePostCssLoader();"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./assets/**/*.js\",\"./templates/**/*.html.twig\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./assets/styles/app.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run watch."
                },
                {
                    "type": "code",
                    "code": "npm run watch"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Make sure your compiled CSS is included in the<head>then start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">{% block stylesheets %}{{ encore_entry_link_tags('app') }}{% endblock %}</head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/guides/vite",
            "title": "Install Tailwind CSS with Vite - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Using React",
                        "Using Vue",
                        "Using Svelte"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using React"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Svelte"
                },
                {
                    "type": "list",
                    "items": [
                        "Create your projectStart by creating a new Vite project if you don’t have one set up already. The most common approach is to useCreate Vite.Terminalnpm create vite@latest my-project -- --template reactcd my-project",
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./index.html\",\"./src/**/*.{js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile.index.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run dev.Terminalnpm run dev",
                        "Start using Tailwind in your projectStart using Tailwind’s utility classes to style your content.App.jsxexportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Create your project"
                },
                {
                    "type": "p",
                    "text": "Start by creating a new Vite project if you don’t have one set up already. The most common approach is to useCreate Vite."
                },
                {
                    "type": "code",
                    "code": "npm create vite@latest my-project -- --template reactcd my-project"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies, then generate yourtailwind.config.jsandpostcss.config.jsfiles."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init -p"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/exportdefault{content:[\"./index.html\",\"./src/**/*.{js,ts,jsx,tsx}\",],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your./src/index.cssfile."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run dev."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Start using Tailwind in your project"
                },
                {
                    "type": "p",
                    "text": "Start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "exportdefaultfunctionApp(){return(<h1className=\"text-3xl font-bold underline\">Helloworld!</h1>)}"
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/height",
            "title": "Height - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Height"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed heights"
                },
                {
                    "type": "p",
                    "text": "Use utilities likeh-px,h-1, andh-64to set an element to a fixed height."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-96...\">h-96</div><divclass=\"h-80...\">h-80</div><divclass=\"h-64...\">h-64</div><divclass=\"h-48...\">h-48</div><divclass=\"h-40...\">h-40</div><divclass=\"h-32...\">h-32</div><divclass=\"h-24...\">h-24</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Full height"
                },
                {
                    "type": "p",
                    "text": "Useh-fullto set an element’s height to 100% of its parent, as long as the parent has a defined height."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-48\"><divclass=\"h-full...\"><!-- This element will have a height of `12rem` (h-48) --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Viewport height"
                },
                {
                    "type": "p",
                    "text": "Useh-screento make an element span the entire height of the viewport."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-screen\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dynamic viewport height"
                },
                {
                    "type": "p",
                    "text": "Useh-dvhto make an element span the entire height of the viewport, which changes as the browser UI expands or contracts."
                },
                {
                    "type": "p",
                    "text": "Scroll up and down in the viewport to hide/show the browser UI"
                },
                {
                    "type": "p",
                    "text": "h-dvh"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-dvh\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Large viewport height"
                },
                {
                    "type": "p",
                    "text": "Useh-lvhto set an element’s height to the largest possible height of the viewport. This behaves the same as100vh."
                },
                {
                    "type": "p",
                    "text": "Scroll up and down in the viewport to hide/show the browser UI"
                },
                {
                    "type": "p",
                    "text": "h-lvh"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-lvh\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Small viewport height"
                },
                {
                    "type": "p",
                    "text": "Useh-svhto set an element’s height to the smallest possible height of the viewport."
                },
                {
                    "type": "p",
                    "text": "Scroll up and down in the viewport to hide/show the browser UI"
                },
                {
                    "type": "p",
                    "text": "h-svh"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-svh\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:h-fullto only apply theh-fullutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-8hover:h-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:h-fullto apply theh-fullutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-8md:h-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s height scale is a combination of thedefault spacing scaleas well as some additional values specific to heights."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customize height separately, use thetheme.heightsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{height:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offheightvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-[32rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Fixed heights",
                        "Full height",
                        "Viewport height",
                        "Dynamic viewport height",
                        "Large viewport height",
                        "Small viewport height",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/hover-focus-and-other-states",
            "title": "Handling Hover, Focus, and Other States - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Handling Hover, Focus, and Other States"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every utility class in Tailwind can be appliedconditionallyby adding a modifier to the beginning of the class name that describes the condition you want to target."
                },
                {
                    "type": "p",
                    "text": "For example, to apply thebg-sky-700class on hover, use thehover:bg-sky-700class:"
                },
                {
                    "type": "p",
                    "text": "Hover over this button to see the background color change"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-sky-500hover:bg-sky-700...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "When writing CSS the traditional way, a single class name would do different things based on the current state."
                },
                {
                    "type": "p",
                    "text": "Traditionally the same class name applies different styles on hover"
                },
                {
                    "type": "code",
                    "code": ".btn-primary{background-color:#0ea5e9;}.btn-primary:hover{background-color:#0369a1;}"
                },
                {
                    "type": "p",
                    "text": "In Tailwind, rather than adding the styles for a hover state to an existing class, you add another class to the element thatonlydoes something on hover."
                },
                {
                    "type": "p",
                    "text": "In Tailwind, separate classes are used for the default state and the hover state"
                },
                {
                    "type": "code",
                    "code": ".bg-sky-500{background-color:#0ea5e9;}.hover\\:bg-sky-700:hover{background-color:#0369a1;}"
                },
                {
                    "type": "p",
                    "text": "Notice howhover:bg-sky-700onlydefines styles for the:hoverstate? It does nothing by default, but as soon as you hover over an element with that class, the background color will change tosky-700."
                },
                {
                    "type": "p",
                    "text": "This is what we mean when we say a utility class can be appliedconditionally— by using modifiers you can control exactly how your design behaves in different states, without ever leaving your HTML."
                },
                {
                    "type": "p",
                    "text": "Tailwind includes modifiers for just about everything you’ll ever need, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Pseudo-classes, like:hover,:focus,:first-child, and:required",
                        "Pseudo-elements, like::before,::after,::placeholder, and::selection",
                        "Media and feature queries, like responsive breakpoints, dark mode, andprefers-reduced-motion",
                        "Attribute selectors, like[dir=\"rtl\"]and[open]"
                    ]
                },
                {
                    "type": "p",
                    "text": "These modifiers can even bestackedto target more specific situations, for example changing the background color in dark mode, at the medium breakpoint, on hover:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"dark:md:hover:bg-fuchsia-600...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "In this guide you’ll learn about every modifier available in the framework, how to use them with your own custom classes, and even how to create your own."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Pseudo-classes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and active"
                },
                {
                    "type": "p",
                    "text": "Style elements on hover, focus, and active using thehover,focus, andactivemodifiers:"
                },
                {
                    "type": "p",
                    "text": "Try interacting with this button to see the hover, focus, and active states"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-violet-500hover:bg-violet-600active:bg-violet-700focus:outline-none focus:ring focus:ring-violet-300...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other interactive states like:visited,:focus-within,:focus-visible, and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​First, last, odd, and even"
                },
                {
                    "type": "p",
                    "text": "Style an element when it is the first-child or last-child using thefirstandlastmodifiers:"
                },
                {
                    "type": "list",
                    "items": [
                        "Kristen Ramoskristen.ramos@example.com",
                        "Floyd Milesfloyd.miles@example.com",
                        "Courtney Henrycourtney.henry@example.com",
                        "Ted Foxted.fox@example.com"
                    ]
                },
                {
                    "type": "p",
                    "text": "Kristen Ramos"
                },
                {
                    "type": "p",
                    "text": "kristen.ramos@example.com"
                },
                {
                    "type": "p",
                    "text": "Floyd Miles"
                },
                {
                    "type": "p",
                    "text": "floyd.miles@example.com"
                },
                {
                    "type": "p",
                    "text": "Courtney Henry"
                },
                {
                    "type": "p",
                    "text": "courtney.henry@example.com"
                },
                {
                    "type": "p",
                    "text": "Ted Fox"
                },
                {
                    "type": "p",
                    "text": "ted.fox@example.com"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"p-6 divide-y divide-slate-200\">{#each people as person}<!-- Remove top/bottom padding when first/last child --><liclass=\"flex py-4first:pt-0last:pb-0\"><imgclass=\"h-10 w-10 rounded-full\"src=\"{person.imageUrl}\"alt=\"\"/><divclass=\"ml-3 overflow-hidden\"><pclass=\"text-sm font-medium text-slate-900\">{person.name}</p><pclass=\"text-sm text-slate-500 truncate\">{person.email}</p></div></li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "You can also style an element when it’s an odd or even child using theoddandevenmodifiers:"
                },
                {
                    "type": "code",
                    "code": "<table><!-- ... --><tbody>{#each people as person}<!-- Use a white background for odd rows, and slate-50 for even rows --><trclass=\"odd:bg-whiteeven:bg-slate-50\"><td>{person.name}</td><td>{person.title}</td><td>{person.email}</td></tr>{/each}</tbody></table>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other structural pseudo-classes like:only-child,:first-of-type,:empty, and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Form states"
                },
                {
                    "type": "p",
                    "text": "Style form elements in different states using modifiers likerequired,invalid, anddisabled:"
                },
                {
                    "type": "p",
                    "text": "Try making the email address valid to see the styles change"
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Username</span><!-- Using form state modifiers, the classes can be identical for every input --><inputtype=\"text\"value=\"tbone\"disabledclass=\"mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400\n      focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500disabled:bg-slate-50disabled:text-slate-500disabled:border-slate-200disabled:shadow-noneinvalid:border-pink-500invalid:text-pink-600focus:invalid:border-pink-500focus:invalid:ring-pink-500\"/></label><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "Using modifiers for this sort of thing can reduce the amount of conditional logic in your templates, letting you use the same set of classes regardless of what state an input is in and letting the browser apply the right styles for you."
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other form states like:read-only,:indeterminate,:checked,  and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on parent state(group-{modifier})"
                },
                {
                    "type": "p",
                    "text": "When you need to style an element based on the state of someparentelement, mark the parent with thegroupclass, and usegroup-*modifiers likegroup-hoverto style the target element:"
                },
                {
                    "type": "p",
                    "text": "Hover over the card to see both text elements change color"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "New project"
                },
                {
                    "type": "p",
                    "text": "Create a new project from a variety of starting templates."
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#\"class=\"groupblock max-w-xs mx-auto rounded-lg p-6 bg-white ring-1 ring-slate-900/5 shadow-lg space-y-3 hover:bg-sky-500 hover:ring-sky-500\"><divclass=\"flex items-center space-x-3\"><svgclass=\"h-6 w-6 stroke-sky-500group-hover:stroke-white\"fill=\"none\"viewBox=\"0 0 24 24\"><!-- ... --></svg><h3class=\"text-slate-900group-hover:text-whitetext-sm font-semibold\">New project</h3></div><pclass=\"text-slate-500group-hover:text-whitetext-sm\">Create a new project from a variety of starting templates.</p></a>"
                },
                {
                    "type": "p",
                    "text": "This pattern works with every pseudo-class modifier, for examplegroup-focus,group-active, or evengroup-odd."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Differentiating nested groups"
                },
                {
                    "type": "p",
                    "text": "When nesting groups, you can style something based on the state of aspecificparent group by giving that parent a unique group name using agroup/{name}class, and including that name in modifiers using classes likegroup-hover/{name}:"
                },
                {
                    "type": "list",
                    "items": [
                        "Leslie AbbottCo-Founder / CEOCall",
                        "Hector AdamsVP, MarketingCall",
                        "Blake AlexanderAccount CoordinatorCall"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each people as person}<liclass=\"group/itemhover:bg-slate-100 ...\"><imgsrc=\"{person.imageUrl}\"alt=\"\"/><div><ahref=\"{person.url}\">{person.name}</a><p>{person.title}</p></div><aclass=\"group/editinvisible hover:bg-slate-200group-hover/item:visible...\"href=\"tel:{person.phone}\"><spanclass=\"group-hover/edit:text-gray-700...\">Call</span><svgclass=\"group-hover/edit:translate-x-0.5 group-hover/edit:text-slate-500...\"><!-- ... --></svg></a></li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "Groups can be named however you like and don’t need to be configured in any way — just name your groups directly in your markup and Tailwind will automatically generate the necessary CSS."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Arbitrary groups"
                },
                {
                    "type": "p",
                    "text": "You can create one-offgroup-*modifiers on the fly by providing your own selector as anarbitrary valuebetween square brackets:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group is-published\"><divclass=\"hiddengroup-[.is-published]:block\">Published</div></div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can use the&character to mark where.groupshould end up in the final selector relative to the selector you are passing in:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group\"><divclass=\"group-[:nth-of-type(3)_&]:block\"><!-- ... --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on sibling state(peer-{modifier})"
                },
                {
                    "type": "p",
                    "text": "When you need to style an element based on the state of asiblingelement, mark the sibling with thepeerclass, and usepeer-*modifiers likepeer-invalidto style the target element:"
                },
                {
                    "type": "p",
                    "text": "Try making the email address valid to see the warning disappear"
                },
                {
                    "type": "p",
                    "text": "Please provide a valid email address."
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Email</span><inputtype=\"email\"class=\"peer...\"/><pclass=\"mt-2 invisiblepeer-invalid:visibletext-pink-600 text-sm\">Please provide a valid email address.</p></label></form>"
                },
                {
                    "type": "p",
                    "text": "This makes it possible to do all sorts of neat tricks, likefloating labelsfor example without any JS."
                },
                {
                    "type": "p",
                    "text": "This pattern works with every pseudo-class modifier, for examplepeer-focus,peer-required, andpeer-disabled."
                },
                {
                    "type": "p",
                    "text": "It’s important to note that thepeermarker can only be used onprevioussiblings because of how thesubsequent-sibling combinatorworks in CSS."
                },
                {
                    "type": "p",
                    "text": "Won’t work, only previous siblings can be marked as peers"
                },
                {
                    "type": "code",
                    "code": "<label><spanclass=\"peer-invalid:text-red-500...\">Email</span><inputtype=\"email\"class=\"peer...\"/></label>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Differentiating peers"
                },
                {
                    "type": "p",
                    "text": "When using multiple peers, you can style something on the state of aspecificpeer by giving that peer a unique name using apeer/{name}class, and including that name in modifiers using classes likepeer-checked/{name}:"
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Published status</legend><inputid=\"draft\"class=\"peer/draft\"type=\"radio\"name=\"status\"checked/><labelfor=\"draft\"class=\"peer-checked/draft:text-sky-500\">Draft</label><inputid=\"published\"class=\"peer/published\"type=\"radio\"name=\"status\"/><labelfor=\"published\"class=\"peer-checked/published:text-sky-500\">Published</label><divclass=\"hiddenpeer-checked/draft:block\">Drafts are only visible to administrators.</div><divclass=\"hiddenpeer-checked/published:block\">Your post will be publicly visible on your site.</div></fieldset>"
                },
                {
                    "type": "p",
                    "text": "Peers can be named however you like and don’t need to be configured in any way — just name your peers directly in your markup and Tailwind will automatically generate the necessary CSS."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Arbitrary peers"
                },
                {
                    "type": "p",
                    "text": "You can create one-offpeer-*modifiers on the fly by providing your own selector as anarbitrary valuebetween square brackets:"
                },
                {
                    "type": "code",
                    "code": "<form><labelfor=\"email\">Email:</label><inputid=\"email\"name=\"email\"type=\"email\"class=\"is-dirty peer\"required/><divclass=\"peer-[.is-dirty]:peer-required:block hidden\">This field is required.</div><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can use the&character to mark where.peershould end up in the final selector relative to the selector you are passing in:"
                },
                {
                    "type": "code",
                    "code": "<div><inputtype=\"text\"class=\"peer\"/><divclass=\"hiddenpeer-[:nth-of-type(3)_&]:block\"><!-- ... --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling direct children(*-{modifier})"
                },
                {
                    "type": "p",
                    "text": "While it’s generally preferable to put utility classes directly on child elements, you can use the*modifier in situations where you need to style direct children that you don’t have control over."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Categories"
                },
                {
                    "type": "code",
                    "code": "<div><h2>Categories<h2><ulclass=\"*:rounded-full *:border *:border-sky-100 *:bg-sky-50 *:px-2 *:py-0.5 dark:text-sky-300 dark:*:border-sky-500/15 dark:*:bg-sky-500/10...\"><li>Sales</li><li>Marketing</li><li>SEO</li><!-- ... --></ul></div>"
                },
                {
                    "type": "p",
                    "text": "It’s important to note that overriding a style with a utility directly on the child itself won’t work due to the specificity of the generated child selector."
                },
                {
                    "type": "p",
                    "text": "Won’t work, children can’t override their own styling."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"*:bg-sky-50...\"><liclass=\"bg-red-50...\">Sales</li><li>Marketing</li><li>SEO</li><!-- ... --></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on descendants(has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "Use thehas-*modifier to style an element based on the state or content of its descendants."
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"has-[:checked]:bg-indigo-50 has-[:checked]:text-indigo-900 has-[:checked]:ring-indigo-200..\"><svgfill=\"currentColor\"><!-- ... --></svg>Google Pay<inputtype=\"radio\"class=\"checked:border-indigo-500 ...\"/></label>"
                },
                {
                    "type": "p",
                    "text": "You can usehas-*with a pseudo-class, likehas-[:focus], to style an element based on the state of its descendants. You can also use element selectors, likehas-[img]orhas-[a], to style an element based on the content of its descendants."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Styling based on the descendants of a group(group-has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "If you need to style an element based on the descendants of a parent element, you can mark the parent with thegroupclass and use thegroup-has-*modifier to style the target element."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Spencer Sharp"
                },
                {
                    "type": "p",
                    "text": "Product Designer atplaneteria.tech"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Casey Jordan"
                },
                {
                    "type": "p",
                    "text": "Just happy to be here."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Alex Reed"
                },
                {
                    "type": "p",
                    "text": "A multidisciplinary designer, working at the intersection of art and technology.alex-reed.com"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Taylor Bailey"
                },
                {
                    "type": "p",
                    "text": "Pushing pixels. Slinging divs."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group...\"><imgsrc=\"...\"/><h4>Spencer Sharp</h4><svgclass=\"hiddengroup-has-[a]:block...\"><!-- ... --></svg><p>Product Designer at<ahref=\"...\">planeteria.tech</a></p></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Styling based on the descendants of a peer(peer-has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "If you need to style an element based on the descendants of a sibling element, you can mark the sibling with thepeerclass and use thepeer-has-*modifier to style the target element."
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Today</legend><div><labelclass=\"peer...\"><inputtype=\"checkbox\"name=\"todo[1]\"checked/>Create a to do list</label><svgclass=\"peer-has-[:checked]:hidden...\"><!-- ... --></svg></div><!-- ... --></fieldset>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Pseudo-elements"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Before and after"
                },
                {
                    "type": "p",
                    "text": "Style the::beforeand::afterpseudo-elements using thebeforeandaftermodifiers:"
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"block\"><spanclass=\"after:content-['*']after:ml-0.5after:text-red-500block text-sm font-medium text-slate-700\">Email</span><inputtype=\"email\"name=\"email\"class=\"mt-1 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1\"placeholder=\"you@example.com\"/></label>"
                },
                {
                    "type": "p",
                    "text": "When using these modifiers, Tailwind will automatically addcontent: ''by default so you don’t have to specify it unless you want a different value:"
                },
                {
                    "type": "code",
                    "code": "<blockquoteclass=\"text-2xl font-semibold italic text-center text-slate-900\">When you look<spanclass=\"before:blockbefore:absolutebefore:-inset-1before:-skew-y-3before:bg-pink-500relative inline-block\"><spanclass=\"relative text-white\">annoyed</span></span>all the time, people think that you're busy.</blockquote>"
                },
                {
                    "type": "p",
                    "text": "It’s worth noting that you don’t really need::beforeand::afterpseudo-elements for most things in Tailwind projects — it’s usually simpler to just use a real HTML element."
                },
                {
                    "type": "p",
                    "text": "For example, here’s the same design from above but using a<span>instead of the::beforepseudo-element, which is a little easier to read and is actually less code:"
                },
                {
                    "type": "code",
                    "code": "<blockquoteclass=\"text-2xl font-semibold italic text-center text-slate-900\">When you look<spanclass=\"relative\"><spanclass=\"block absolute -inset-1 -skew-y-3 bg-pink-500\"aria-hidden=\"true\"></span><spanclass=\"relative text-white\">annoyed</span></span>all the time, people think that you're busy.</blockquote>"
                },
                {
                    "type": "p",
                    "text": "Savebeforeandafterfor situations where it’s important that the content of the pseudo-element is not actually in the DOM and can’t be selected by the user."
                },
                {
                    "type": "p",
                    "text": "Note that if you’ve disabled ourpreflight base styles, the content property will not be set to an empty string by default, and you will need to includecontent-['']any time you use thebeforeandaftermodifiers."
                },
                {
                    "type": "p",
                    "text": "If you’ve disabled preflight make sure to set the content manually"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['']before:block ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Placeholder text"
                },
                {
                    "type": "p",
                    "text": "Style the placeholder text of any input or textarea using theplaceholdermodifier:"
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"relative block\"><spanclass=\"sr-only\">Search</span><spanclass=\"absolute inset-y-0 left-0 flex items-center pl-2\"><svgclass=\"h-5 w-5 fill-slate-300\"viewBox=\"0 0 20 20\"><!-- ... --></svg></span><inputclass=\"placeholder:italicplaceholder:text-slate-400block bg-white w-full border border-slate-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1 sm:text-sm\"placeholder=\"Search for anything...\"type=\"text\"name=\"search\"/></label>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​File input buttons"
                },
                {
                    "type": "p",
                    "text": "Style the button in file inputs using thefilemodifier:"
                },
                {
                    "type": "code",
                    "code": "<formclass=\"flex items-center space-x-6\"><divclass=\"shrink-0\"><imgclass=\"h-16 w-16 object-cover rounded-full\"src=\"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1361&q=80\"alt=\"Current profile photo\"/></div><labelclass=\"block\"><spanclass=\"sr-only\">Choose profile photo</span><inputtype=\"file\"class=\"block w-full text-sm text-slate-500file:mr-4file:py-2file:px-4file:rounded-fullfile:border-0file:text-smfile:font-semiboldfile:bg-violet-50file:text-violet-700hover:file:bg-violet-100\"/></label></form>"
                },
                {
                    "type": "p",
                    "text": "Note that Tailwind’sborder resetis not applied to file input buttons. This means that to add a border to a file input button, you need to explicitly set theborder-styleusing a class likefile:border-solidalongside anyborder-widthutility:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"file\"class=\"file:borderfile:border-solid...\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​List markers"
                },
                {
                    "type": "p",
                    "text": "Style the counters or bullets in lists using themarkermodifier:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ingredients"
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"marker:text-sky-400list-disc pl-5 space-y-3 text-slate-500\"><li>5 cups chopped Porcini mushrooms</li><li>1/2 cup of olive oil</li><li>3lb of celery</li></ul><ulrole=\"list\"class=\"marker:text-sky-400list-disc pl-5 space-y-3 text-slate-400\"><li>5 cups chopped Porcini mushrooms</li><li>1/2 cup of olive oil</li><li>3lb of celery</li></ul>"
                },
                {
                    "type": "p",
                    "text": "We’ve designed themarkermodifier to be inheritable, so although you can use it directly on an<li>element, you can also use it on a parent to avoid repeating yourself."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Highlighted text"
                },
                {
                    "type": "p",
                    "text": "Style the active text selection using theselectionmodifier:"
                },
                {
                    "type": "p",
                    "text": "Try selecting some of this text with your mouse"
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"selection:bg-fuchsia-300selection:text-fuchsia-900\"><p>So I started to walk into the water. I won't lie to you boys, I was\n    terrified. But I pressed on, and as I made my way past the breakers\n    a strange calm came over me. I don't know if it was divine intervention\n    or the kinship of all living things but I tell you Jerry at that moment,\n    I<em>was</em>a marine biologist.</p></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve designed theselectionmodifier to be inheritable, so you can add it anywhere in the tree and it will be applied to all descendant elements."
                },
                {
                    "type": "p",
                    "text": "This makes it easy to set the selection color to match your brand across your entire site:"
                },
                {
                    "type": "code",
                    "code": "<html><head><!-- ... --></head><bodyclass=\"selection:bg-pink-300\"><!-- ... --></body></html>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​First-line and first-letter"
                },
                {
                    "type": "p",
                    "text": "Style the first line in a block of content using thefirst-linemodifier, and the first letter using thefirst-lettermodifier:"
                },
                {
                    "type": "p",
                    "text": "Well, let me tell you something, funny boy. Y'know that little stamp, the one that says \"New York Public Library\"? Well that may not mean anything to you, but that means a lot to me. One whole hell of a lot."
                },
                {
                    "type": "p",
                    "text": "Sure, go ahead, laugh if you want to. I've seen your type before: Flashy, making the scene, flaunting convention. Yeah, I know what you're thinking. What's this guy making such a big stink about old library books? Well, let me give you a hint, junior."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"first-line:uppercasefirst-line:tracking-widestfirst-letter:text-7xlfirst-letter:font-boldfirst-letter:text-slate-900first-letter:mr-3first-letter:float-left\">Well, let me tell you something, funny boy. Y'know that little stamp, the one\n  that says \"New York Public Library\"? Well that may not mean anything to you,\n  but that means a lot to me. One whole hell of a lot.</p><pclass=\"first-line:uppercasefirst-line:tracking-widestfirst-letter:text-7xlfirst-letter:font-boldfirst-letter:text-whitefirst-letter:mr-3first-letter:float-left\">Well, let me tell you something, funny boy. Y'know that little stamp, the one\n  that says \"New York Public Library\"? Well that may not mean anything to you,\n  but that means a lot to me. One whole hell of a lot.</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dialog backdrops"
                },
                {
                    "type": "p",
                    "text": "Style the backdrop of anative<dialog>elementusing thebackdropmodifier:"
                },
                {
                    "type": "code",
                    "code": "<dialogclass=\"backdrop:bg-gray-50\"><formmethod=\"dialog\"><!-- ... --></form></dialog>"
                },
                {
                    "type": "p",
                    "text": "If you’re using native<dialog>elements in your project, you may also want to read aboutstyling open/closed statesusing theopenmodifier."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Media and feature queries"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Responsive breakpoints"
                },
                {
                    "type": "p",
                    "text": "To style an element at a specific breakpoint, use responsive modifiers likemdandlg."
                },
                {
                    "type": "p",
                    "text": "For example, this will render a 3-column grid on mobile, a 4-column grid on medium-width screens, and a 6-column grid on large-width screens:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Check out theResponsive Designdocumentation for an in-depth look at how these features work."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers color scheme"
                },
                {
                    "type": "p",
                    "text": "Theprefers-color-schememedia query tells you whether the user prefers a light theme or dark theme, and is usually configured at the operating system level."
                },
                {
                    "type": "p",
                    "text": "Use utilities with no modifier to target light mode, and use thedarkmodifier to provide overrides for dark mode:"
                },
                {
                    "type": "p",
                    "text": "Light mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "p",
                    "text": "Dark mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-whitedark:bg-slate-900rounded-lg px-6 py-8 ring-1 ring-slate-900/5 shadow-xl\"><div><spanclass=\"inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg\"><svgclass=\"h-6 w-6 text-white\"fill=\"none\"viewBox=\"0 0 24 24\"stroke=\"currentColor\"aria-hidden=\"true\"><!-- ... --></svg></span></div><h3class=\"text-slate-900dark:text-whitemt-5 text-base font-medium tracking-tight\">Writes Upside-Down</h3><pclass=\"text-slate-500dark:text-slate-400mt-2 text-sm\">The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.</p></div>"
                },
                {
                    "type": "p",
                    "text": "Check out theDark Modedocumentation for an in-depth look at how this feature works."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers reduced motion"
                },
                {
                    "type": "p",
                    "text": "Theprefers-reduced-motionmedia query tells you if the user has requested that you minimize non-essential motion."
                },
                {
                    "type": "p",
                    "text": "Use themotion-reducemodifier to conditionally add styles when the user has requested reduced motion:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `prefers-reduced-motion: reduce` in your developer tools to hide the spinner"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-500 ...\"disabled><svgclass=\"motion-reduce:hiddenanimate-spin ...\"viewBox=\"0 0 24 24\"><!-- ... --></svg>Processing...</button>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes amotion-safemodifier that only adds styles when the user hasnotrequested reduced motion. This can be useful when using themotion-reducehelper would mean having to “undo” a lot of styles:"
                },
                {
                    "type": "code",
                    "code": "<!-- Using `motion-reduce` can mean lots of \"undoing\" styles --><buttonclass=\"hover:-translate-y-0.5 transitionmotion-reduce:hover:translate-y-0motion-reduce:transition-none...\">Save changes</button><!-- Using `motion-safe` is less code in these situations --><buttonclass=\"motion-safe:hover:-translate-x-0.5motion-safe:transition...\">Save changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers contrast"
                },
                {
                    "type": "p",
                    "text": "Theprefers-contrastmedia query tells you if the user has requested more or less contrast."
                },
                {
                    "type": "p",
                    "text": "Use thecontrast-moremodifier to conditionally add styles when the user has requested more contrast:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `prefers-contrast: more` in your developer tools to see the changes"
                },
                {
                    "type": "p",
                    "text": "We need this to steal your identity."
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Social Security Number</span><inputclass=\"border-slate-200 placeholder-slate-400contrast-more:border-slate-400contrast-more:placeholder-slate-500\"/><pclass=\"mt-2 opacity-10contrast-more:opacity-100text-slate-600 text-sm\">We need this to steal your identity.</p></label></form>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes acontrast-lessmodifier you can use to conditionally add styles when the user has requested less contrast."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Forced colors mode"
                },
                {
                    "type": "p",
                    "text": "Theforced-colorsmedia query indicates if the user is using a forced colors mode. These modes override your site’s colors with a user defined palette for text, backgrounds, links and buttons."
                },
                {
                    "type": "p",
                    "text": "Use theforced-colorsmodifier to conditionally add styles when the user has enabled a forced color mode:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `forced-colors: active` in your developer tools to see the changes"
                },
                {
                    "type": "p",
                    "text": "Cyan"
                },
                {
                    "type": "p",
                    "text": "Blue"
                },
                {
                    "type": "p",
                    "text": "Indigo"
                },
                {
                    "type": "p",
                    "text": "Purple"
                },
                {
                    "type": "code",
                    "code": "<form><legend>Choose a theme:</legend><label><inputtype=\"radio\"class=\"forced-colors:appearance-autoappearance-none\"/><pclass=\"forced-colors:blockhidden\">Cyan</p><divclass=\"forced-colors:hiddenh-6 w-6 rounded-full bg-cyan-200 ...\"></div><divclass=\"forced-colors:hiddenh-6 w-6 rounded-full bg-cyan-500 ...\"></div></label><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes aforced color adjustutilities to opt in and out of forced colors."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Viewport orientation"
                },
                {
                    "type": "p",
                    "text": "Use theportraitandlandscapemodifiers to conditionally add styles when the viewport is in a specific orientation:"
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"portrait:hidden\"><!-- ... --></div><divclass=\"landscape:hidden\"><p>This experience is designed to be viewed in landscape. Please rotate your\n      device to view the site.</p></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Print styles"
                },
                {
                    "type": "p",
                    "text": "Use theprintmodifier to conditionally add styles that only apply when the document is being printed:"
                },
                {
                    "type": "code",
                    "code": "<div><articleclass=\"print:hidden\"><h1>My Secret Pizza Recipe</h1><p>This recipe is a secret, and must not be shared with anyone</p><!-- ... --></article><divclass=\"hiddenprint:block\">Are you seriously trying to print this? It's secret!</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Supports rules"
                },
                {
                    "type": "p",
                    "text": "Use thesupports-[...]modifier to style things based on whether a certain feature is supported in the user’s browser."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexsupports-[display:grid]:grid...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Under the hood thesupports-[...]modifier generates@supports rulesand takes anything you’d use with@supports (...)between the square brackets, like a property/value pair, and even expressions usingandandor."
                },
                {
                    "type": "p",
                    "text": "For terseness, if you only need to check if a property is supported (and not a specific value), you can just specify the property name:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-black/75supports-[backdrop-filter]:bg-black/25supports-[backdrop-filter]:backdrop-blur...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can configure shortcuts for common@supportsrules you’re using in your project in thetheme.supportssection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{supports:{grid:'display: grid',},},}"
                },
                {
                    "type": "p",
                    "text": "You can then use these customsupports-*modifiers in your project:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"supports-grid:grid\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Attribute selectors"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​ARIA states"
                },
                {
                    "type": "p",
                    "text": "Use thearia-*modifier to conditionally style things based onARIA attributes."
                },
                {
                    "type": "p",
                    "text": "For example, to apply thebg-sky-700class when thearia-checkedattribute is set totrue, use thearia-checked:bg-sky-700class:"
                },
                {
                    "type": "code",
                    "code": "<divaria-checked=\"true\"class=\"bg-gray-600aria-checked:bg-sky-700\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "By default we’ve included modifiers for the most common boolean ARIA attributes:"
                },
                {
                    "type": "p",
                    "text": "You can customize whicharia-*modifiers are available by editingtheme.ariaortheme.extend.ariain yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{aria:{asc:'sort=\"ascending\"',desc:'sort=\"descending\"',},},},};"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offariamodifier that doesn’t make sense to include in your theme, or for more complex ARIA attributes that take specific values, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')]aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]\">Invoice #</th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "ARIA state modifiers can also target parent and sibling elements using thegroup-aria-*andpeer-aria-*modifiers:"
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"group\">Invoice #<svgclass=\"group-aria-[sort=ascending]:rotate-0group-aria-[sort=descending]:rotate-180\"><!-- ... --></svg></th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Data attributes"
                },
                {
                    "type": "p",
                    "text": "Use thedata-*modifier to conditionally apply styles based ondata attributes."
                },
                {
                    "type": "p",
                    "text": "Since there are no standarddata-*attributes by definition, by default we only support arbitrary values out of the box, for example:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will apply --><divdata-size=\"large\"class=\"data-[size=large]:p-8\"><!-- ... --></div><!-- Will not apply --><divdata-size=\"medium\"class=\"data-[size=large]:p-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can configure shortcuts for common data attribute selectors you’re using in your project in thetheme.datasection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{data:{checked:'ui~=\"checked\"',},},}"
                },
                {
                    "type": "p",
                    "text": "You can then use these customdata-*modifiers in your project:"
                },
                {
                    "type": "code",
                    "code": "<divdata-ui=\"checked active\"class=\"data-checked:underline\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​RTL support"
                },
                {
                    "type": "p",
                    "text": "Use thertlandltrmodifiers to conditionally add styles in right-to-left and left-to-right modes respectively when building multi-directional layouts:"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Tom Cook"
                },
                {
                    "type": "p",
                    "text": "Director of Operations"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "p",
                    "text": "تامر كرم"
                },
                {
                    "type": "p",
                    "text": "الرئيس التنفيذي"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-700 group-hover:text-slate-900\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-700\">...</p></div></div><divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-300 group-hover:text-white\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-300\">...</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "Note that theltrmodifier will not take effect unless thedirattribute is explicitly set toltr, so if you are building a multi-directional site make sure to always set a direction, not just inrtlmode."
                },
                {
                    "type": "p",
                    "text": "Always set the direction, even if left-to-right is your default"
                },
                {
                    "type": "code",
                    "code": "<htmldir=\"ltr\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "Remember, these modifiers are only useful if you are building a site that needs to supportbothleft-to-right and right-to-left layouts. If you’re building a site that only needs to support a single direction, you don’t need these modifiers — just apply the styles that make sense for your content."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Open/closed state"
                },
                {
                    "type": "p",
                    "text": "Use theopenmodifier to conditionally add styles when a<details>or<dialog>element is in an open state:"
                },
                {
                    "type": "p",
                    "text": "Try toggling the disclosure to see the styles change"
                },
                {
                    "type": "p",
                    "text": "The mug is round. The jar is round. They should call it Roundtine."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-lg mx-auto p-8\"><detailsclass=\"open:bg-white dark:open:bg-slate-900 open:ring-1 open:ring-black/5 dark:open:ring-white/10 open:shadow-lg p-6 rounded-lg\"open><summaryclass=\"text-sm leading-6 text-slate-900 dark:text-white font-semibold select-none\">Why do they call it Ovaltine?</summary><divclass=\"mt-3 text-sm leading-6 text-slate-600 dark:text-slate-400\"><p>The mug is round. The jar is round. They should call it Roundtine.</p></div></details></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Custom modifiers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using arbitrary variants"
                },
                {
                    "type": "p",
                    "text": "Just likearbitrary valueslet you use custom values with your utility classes, arbitrary variants let you write custom selector modifiers directly in your HTML."
                },
                {
                    "type": "p",
                    "text": "Arbitrary variants are just format strings that represent the selector, wrapped in square brackets. For example, this arbitrary modifier selects an element only when it is the third child:"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each items as item}<liclass=\"[&:nth-child(3)]:underline\">{item}</li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "The format string is the same as what you’d use with theaddVariantplugin API, with the&representing the selector being modified."
                },
                {
                    "type": "p",
                    "text": "Arbitrary variants can be stacked with built-in modifiers or with each other, just like the rest of the modifiers in Tailwind:"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each items as item}<liclass=\"lg:[&:nth-child(3)]:hover:underline\">{item}</li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "If you need spaces in your selector, you can use an underscore. For example, this arbitrary modifier selects allpelements within the element where you’ve added the class:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[&_p]:mt-4\"><p>Lorem ipsum...</p><ul><li><p>Lorem ipsum...</p></li><!-- ... --></ul></div>"
                },
                {
                    "type": "p",
                    "text": "You can also use at-rules like@mediaor@supportsin arbitrary variants:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex[@supports(display:grid)]:grid\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "With at-rule custom modifiers the&placeholder isn’t necessary, just like when nesting with a preprocessor."
                },
                {
                    "type": "p",
                    "text": "You can even combine at-rules and regular selector modifiers by including the selector modifier within curly braces after the at-rule:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"[@media(any-hover:hover){&:hover}]:opacity-100\"><!-- ... --></button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Creating a plugin"
                },
                {
                    "type": "p",
                    "text": "If you find yourself using the same arbitrary modifier multiple times in your project, it might be worth extracting it to a plugin using theaddVariantAPI:"
                },
                {
                    "type": "code",
                    "code": "letplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addVariant}){// Add a `third` variant, ie. `third:pb-0`addVariant('third','&:nth-child(3)')})]}"
                },
                {
                    "type": "p",
                    "text": "Learn more in theadding variant pluginsdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Advanced topics"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using with your own classes"
                },
                {
                    "type": "p",
                    "text": "All of Tailwind’s modifiers are available to use with your own custom classes as long as you’ve defined them in one of Tailwind’slayersor added them using aplugin:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerutilities{.content-auto{content-visibility:auto;}}"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"lg:content-auto\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ordering stacked modifiers"
                },
                {
                    "type": "p",
                    "text": "When stacking modifiers, they are applied from the inside-out, like nested function calls:"
                },
                {
                    "type": "code",
                    "code": "// These modifiers:'dark:group-hover:focus:opacity-100'// ...are applied like this:dark(groupHover(focus('opacity-100')))"
                },
                {
                    "type": "p",
                    "text": "For the most part this doesn’t actually matter, but there are a few situations where the order you use actually generates meaningfully different CSS."
                },
                {
                    "type": "p",
                    "text": "For example, if you havedarkModeconfigured toclass, combining thedarkandgroup-hovermodifiers generates a different result depending on the order you use:"
                },
                {
                    "type": "code",
                    "code": "/* dark:group-hover:opacity-100 */.dark.group:hover.dark\\:group-hover\\:opacity-100{opacity:1;}/* group-hover:dark:opacity-100 */.group:hover.dark.group-hover\\:dark\\:opacity-100{opacity:1;}"
                },
                {
                    "type": "p",
                    "text": "In the first example, thedarkelement needs to be a parent of thegroupelement, but in the second example it’s reversed."
                },
                {
                    "type": "p",
                    "text": "Another place this is important is when using modifiers likeprose-headingsthat are included with the official typography plugin:"
                },
                {
                    "type": "code",
                    "code": "/* prose-headings:hover:underline */.prose-headings\\:hover\\:underline:hover:is(:where(h1,h2,h3,h4,th)){text-decoration:underline;}/* hover:prose-headings:underline */.hover\\:prose-headings\\:underline:is(:where(h1,h2,h3,h4,th)):hover{text-decoration:underline;}"
                },
                {
                    "type": "p",
                    "text": "In the first example, every single heading is underlined when you hover over the article itself, whereas in the second example each heading is only underlined when you hover over that heading."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Appendix"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Quick reference"
                },
                {
                    "type": "p",
                    "text": "A quick reference table of every single modifier included in Tailwind by default."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pseudo-class reference"
                },
                {
                    "type": "p",
                    "text": "This is a comprehensive list of examples for all the pseudo-class modifiers included in Tailwind to complement thepseudo-classes  documentationat the beginning of this guide."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​hover(:hover)"
                },
                {
                    "type": "p",
                    "text": "Style an element when the user hovers over it with the mouse cursor using thehovermodifier:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-blackhover:bg-white...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus(:focus)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it has focus using thefocusmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"border-gray-300focus:border-blue-400...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus-within(:focus-within)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it or one of its descendants has focus using thefocus-withinmodifier:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"focus-within:shadow-lg...\"><inputtype=\"text\"/></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus-visible(:focus-visible)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it has been focused using the keyboard using thefocus-visiblemodifier:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"focus:outline-nonefocus-visible:ring...\">Submit</button>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​active(:active)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it is being pressed using theactivemodifier:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-blue-500active:bg-blue-600...\">Submit</button>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​visited(:visited)"
                },
                {
                    "type": "p",
                    "text": "Style a link when it has already been visited using thevisitedmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"https://seinfeldquotes.com\"class=\"text-blue-600visited:text-purple-600...\">Inspiration</a>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​target(:target)"
                },
                {
                    "type": "p",
                    "text": "Style an element if its ID matches the current URL fragment using thetargetmodifier:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"about\"class=\"target:shadow-lg...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​first(:first-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the first child using thefirstmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4first:pt-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​last(:last-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the last child using thelastmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4last:pb-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​only(:only-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the only child using theonlymodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4only:py-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​odd(:nth-child(odd))"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s an oddly numbered child using theoddmodifier:"
                },
                {
                    "type": "code",
                    "code": "<table>{#each people as person}<trclass=\"bg-whiteodd:bg-gray-100...\"><!-- ... --></tr>{/each}</table>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​even(:nth-child(even))"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s an evenly numbered child using theevenmodifier:"
                },
                {
                    "type": "code",
                    "code": "<table>{#each people as person}<trclass=\"bg-whiteeven:bg-gray-100...\"><!-- ... --></tr>{/each}</table>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​first-of-type(:first-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the first child of its type using thefirst-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"ml-2first-of-type:ml-6...\"><!-- ... --></a>{/each}</nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​last-of-type(:last-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the last child of its type using thelast-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"mr-2last-of-type:mr-6...\"><!-- ... --></a>{/each}<button>More</button></nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​only-of-type(:only-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the only child of its type using theonly-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"mx-2only-of-type:mx-6...\"><!-- ... --></a>{/each}<button>More</button></nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​empty(:empty)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it has no content using theemptymodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"empty:hidden...\">{person.hobby}</li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​disabled(:disabled)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s disabled using thedisabledmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"disabled:opacity-75...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​enabled(:enabled)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s enabled using theenabledmodifier, most helpful when you only want to apply another style when an element is not disabled:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"enabled:hover:border-gray-400disabled:opacity-75 ...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​checked(:checked)"
                },
                {
                    "type": "p",
                    "text": "Style a checkbox or radio button when it’s checked using thecheckedmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"appearance-nonechecked:bg-blue-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​indeterminate(:indeterminate)"
                },
                {
                    "type": "p",
                    "text": "Style a checkbox or radio button in an indeterminate state using theindeterminatemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"appearance-noneindeterminate:bg-gray-300...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​default(:default)"
                },
                {
                    "type": "p",
                    "text": "Style an option, checkbox or radio button that was the default value when the page initially loaded using thedefaultmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"default:ring-2...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​required(:required)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s required using therequiredmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"required:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​valid(:valid)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s valid using thevalidmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"valid:border-green-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​invalid(:invalid)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s invalid using theinvalidmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"invalid:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​in-range(:in-range)"
                },
                {
                    "type": "p",
                    "text": "Style an input when its value is within a specified range limit using thein-rangemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputmin=\"1\"max=\"5\"class=\"in-range:border-green-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​out-of-range(:out-of-range)"
                },
                {
                    "type": "p",
                    "text": "Style an input when its value is outside of a specified range limit using theout-of-rangemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputmin=\"1\"max=\"5\"class=\"out-of-range:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​placeholder-shown(:placeholder-shown)"
                },
                {
                    "type": "p",
                    "text": "Style an input when the placeholder is shown using theplaceholder-shownmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"placeholder-shown:border-gray-500...\"placeholder=\"you@example.com\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​autofill(:autofill)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it has been autofilled by the browser using theautofillmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"autofill:bg-yellow-200...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​read-only(:read-only)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it is read-only using theread-onlymodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"read-only:bg-gray-100...\"/>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Pseudo-classes",
                        "Hover, focus, and active",
                        "First, last, odd, and even",
                        "Form states",
                        "Styling based on parent state",
                        "Styling based on sibling state",
                        "Styling direct children",
                        "Styling based on descendants",
                        "Pseudo-elements",
                        "Before and after",
                        "Placeholder text",
                        "File input buttons",
                        "List markers",
                        "Highlighted text",
                        "First-line and first-letter",
                        "Dialog backdrops",
                        "Media and feature queries",
                        "Responsive breakpoints",
                        "Prefers color scheme",
                        "Prefers reduced motion",
                        "Prefers contrast",
                        "Forced colors mode",
                        "Viewport orientation",
                        "Print styles",
                        "Supports rules",
                        "Attribute selectors",
                        "ARIA states",
                        "Data attributes",
                        "RTL support",
                        "Open/closed state",
                        "Custom modifiers",
                        "Using arbitrary variants",
                        "Creating a plugin",
                        "Advanced topics",
                        "Using with your own classes",
                        "Ordering stacked modifiers",
                        "Appendix",
                        "Quick reference",
                        "Pseudo-class reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/hue-rotate",
            "title": "Hue Rotate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Hue Rotate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rotating an element’s hue"
                },
                {
                    "type": "p",
                    "text": "Use thehue-rotate-*utilities to rotate the hue of an element."
                },
                {
                    "type": "p",
                    "text": "hue-rotate-15"
                },
                {
                    "type": "p",
                    "text": "hue-rotate-90"
                },
                {
                    "type": "p",
                    "text": "hue-rotate-180"
                },
                {
                    "type": "p",
                    "text": "-hue-rotate-60"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hue-rotate-15...\"><!-- ... --></div><divclass=\"hue-rotate-90...\"><!-- ... --></div><divclass=\"hue-rotate-180...\"><!-- ... --></div><divclass=\"-hue-rotate-60...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative hue-rotate value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-hue-rotate-60 ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert hue-rotate-180md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:hue-rotate-0to only apply thehue-rotate-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hue-rotate-60hover:hue-rotate-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:hue-rotate-0to apply thehue-rotate-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hue-rotate-60md:hue-rotate-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposehue-rotateutilities. You can customize these values by editingtheme.hueRotateortheme.extend.hueRotatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{hueRotate:{'-270':'-270deg',270:'270deg',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offhue-rotatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hue-rotate-[270deg]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Rotating an element's hue",
                        "Using negative values",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/hyphens",
            "title": "Hyphens - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Hyphens"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​None"
                },
                {
                    "type": "p",
                    "text": "Usehyphens-noneto prevent words from being hyphenated even if the line break suggestion&shy;is used:"
                },
                {
                    "type": "p",
                    "text": "Officially recognized by the Duden dictionary as the longest word in German,Kraftfahrzeug­haftpflichtversicherungis a 36 letter word for motor vehicle liability insurance."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-none...\">... Kraftfahrzeug&shy;haftpflichtversicherung is a ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Manual"
                },
                {
                    "type": "p",
                    "text": "Usehyphens-manualto only set hyphenation points where the line break suggestion&shy;is used:"
                },
                {
                    "type": "p",
                    "text": "Officially recognized by the Duden dictionary as the longest word in German,Kraftfahrzeug­haftpflichtversicherungis a 36 letter word for motor vehicle liability insurance."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-manual...\">... Kraftfahrzeug&shy;haftpflichtversicherung is a ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Usehyphens-autoto allow the browser to automatically choose hyphenation points based on the language. The line break suggestion&shy;will be preferred over automatic hyphenation points."
                },
                {
                    "type": "p",
                    "text": "Officially recognized by the Duden dictionary as the longest word in German,Kraftfahrzeughaftpflichtversicherungis a 36 letter word for motor vehicle liability insurance."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-auto...\"lang=\"de\">... Kraftfahrzeughaftpflichtversicherung is a ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:hyphens-autoto only apply thehyphens-autoutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-nonehover:hyphens-auto\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:hyphens-autoto apply thehyphens-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"hyphens-nonemd:hyphens-auto\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "None",
                        "Manual",
                        "Auto",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/installation",
            "title": "Installation - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailwind CLI",
                        "Using PostCSS",
                        "Framework Guides",
                        "Play CDN"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tailwind CLI"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using PostCSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Framework Guides"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Play CDN"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Installing Tailwind CLI"
                },
                {
                    "type": "p",
                    "text": "The simplest and fastest way to get up and running with Tailwind CSS from scratch is with the Tailwind CLI tool. The CLI is also available as astandalone executableif you want to use it without installing Node.js."
                },
                {
                    "type": "list",
                    "items": [
                        "Install Tailwind CSSInstalltailwindcssvia npm, and create yourtailwind.config.jsfile.Terminalnpm install -D tailwindcssnpx tailwindcss init",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js}\"],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your main CSS file.src/input.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start the Tailwind CLI build processRun the CLI tool to scan your template files for classes and build your CSS.Terminalnpx tailwindcss -i ./src/input.css -o ./src/output.css --watch",
                        "Start using Tailwind in your HTMLAdd your compiled CSS file to the<head>and start using Tailwind’s utility classes to style your content.src/index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"./output.css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssvia npm, and create yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcssnpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js}\"],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your main CSS file."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Start the Tailwind CLI build process"
                },
                {
                    "type": "p",
                    "text": "Run the CLI tool to scan your template files for classes and build your CSS."
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss -i ./src/input.css -o ./src/output.css --watch"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Start using Tailwind in your HTML"
                },
                {
                    "type": "p",
                    "text": "Add your compiled CSS file to the<head>and start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"./output.css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What to read next"
                },
                {
                    "type": "p",
                    "text": "Get familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS."
                },
                {
                    "type": "list",
                    "items": [
                        "Utility-First FundamentalsUsing a utility-first workflow to build complex components from a constrained set of primitive utilities.",
                        "Responsive DesignBuild fully responsive user interfaces that adapt to any screen size using responsive modifiers.",
                        "Hover, Focus & Other StatesStyle elements in interactive states like hover, focus, and more using conditional modifiers.",
                        "Dark ModeOptimize your site for dark mode directly in your HTML using the dark mode modifier.",
                        "Reusing StylesManage duplication and keep your projects maintainable by creating reusable abstractions.",
                        "Customizing the FrameworkCustomize the framework to match your brand and extend it with your own custom styles."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Utility-First Fundamentals"
                },
                {
                    "type": "p",
                    "text": "Using a utility-first workflow to build complex components from a constrained set of primitive utilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive Design"
                },
                {
                    "type": "p",
                    "text": "Build fully responsive user interfaces that adapt to any screen size using responsive modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hover, Focus & Other States"
                },
                {
                    "type": "p",
                    "text": "Style elements in interactive states like hover, focus, and more using conditional modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dark Mode"
                },
                {
                    "type": "p",
                    "text": "Optimize your site for dark mode directly in your HTML using the dark mode modifier."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing Styles"
                },
                {
                    "type": "p",
                    "text": "Manage duplication and keep your projects maintainable by creating reusable abstractions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the Framework"
                },
                {
                    "type": "p",
                    "text": "Customize the framework to match your brand and extend it with your own custom styles."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/installation/framework-guides",
            "title": "Framework Guides - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailwind CLI",
                        "Using PostCSS",
                        "Framework Guides",
                        "Play CDN"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tailwind CLI"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using PostCSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Framework Guides"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Play CDN"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Framework Guides"
                },
                {
                    "type": "p",
                    "text": "Framework-specific guides that cover our recommended approach to installing Tailwind CSS in a number of popular environments."
                },
                {
                    "type": "list",
                    "items": [
                        "Next.jsFull-featured React framework with great developer experience.",
                        "LaravelPHP web application framework with expressive, elegant syntax.",
                        "ViteFast and modern development server and build tool.",
                        "NuxtIntuitive Vue framework for building universal applications.",
                        "GatsbyFramework for building static sites with React and GraphQL.",
                        "SolidJSA tool for building simple, performant, and reactive user interfaces.",
                        "SvelteKitThe fastest way to build apps of all sizes with Svelte.js.",
                        "AngularPlatform for building mobile and desktop web applications.",
                        "Ruby on RailsFull-stack framework with all the tools needed to build amazing web apps.",
                        "RemixFull stack framework focused on web fundamentals and modern UX.",
                        "PhoenixA framework to build rich, interactive applications with Elixir.",
                        "ParcelThe zero-configuration build tool for the web.",
                        "SymfonyA PHP framework to create websites and web applications.",
                        "MeteorThe full stack JavaScript framework for developing cross-platform apps.",
                        "Create React AppCLI tool for scaffolding a new single-page React application.",
                        "AdonisJSA fully featured web framework for Node.js.",
                        "Ember.jsA JavaScript framework for ambitious web developers.",
                        "AstroThe all-in-one web framework designed for speed.",
                        "QwikBuild instantly-interactive web apps without effort.",
                        "RspackA fast Rust-based web bundler."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Next.js"
                },
                {
                    "type": "p",
                    "text": "Full-featured React framework with great developer experience."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Laravel"
                },
                {
                    "type": "p",
                    "text": "PHP web application framework with expressive, elegant syntax."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Vite"
                },
                {
                    "type": "p",
                    "text": "Fast and modern development server and build tool."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Nuxt"
                },
                {
                    "type": "p",
                    "text": "Intuitive Vue framework for building universal applications."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Gatsby"
                },
                {
                    "type": "p",
                    "text": "Framework for building static sites with React and GraphQL."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "SolidJS"
                },
                {
                    "type": "p",
                    "text": "A tool for building simple, performant, and reactive user interfaces."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "SvelteKit"
                },
                {
                    "type": "p",
                    "text": "The fastest way to build apps of all sizes with Svelte.js."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Angular"
                },
                {
                    "type": "p",
                    "text": "Platform for building mobile and desktop web applications."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Ruby on Rails"
                },
                {
                    "type": "p",
                    "text": "Full-stack framework with all the tools needed to build amazing web apps."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Remix"
                },
                {
                    "type": "p",
                    "text": "Full stack framework focused on web fundamentals and modern UX."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Phoenix"
                },
                {
                    "type": "p",
                    "text": "A framework to build rich, interactive applications with Elixir."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Parcel"
                },
                {
                    "type": "p",
                    "text": "The zero-configuration build tool for the web."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Symfony"
                },
                {
                    "type": "p",
                    "text": "A PHP framework to create websites and web applications."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Meteor"
                },
                {
                    "type": "p",
                    "text": "The full stack JavaScript framework for developing cross-platform apps."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Create React App"
                },
                {
                    "type": "p",
                    "text": "CLI tool for scaffolding a new single-page React application."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "AdonisJS"
                },
                {
                    "type": "p",
                    "text": "A fully featured web framework for Node.js."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Ember.js"
                },
                {
                    "type": "p",
                    "text": "A JavaScript framework for ambitious web developers."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Astro"
                },
                {
                    "type": "p",
                    "text": "The all-in-one web framework designed for speed."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Qwik"
                },
                {
                    "type": "p",
                    "text": "Build instantly-interactive web apps without effort."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Rspack"
                },
                {
                    "type": "p",
                    "text": "A fast Rust-based web bundler."
                },
                {
                    "type": "p",
                    "text": "Don't see your framework of choice? Try usingTailwind CLIor installing Tailwindas a PostCSS plugininstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What to read next"
                },
                {
                    "type": "p",
                    "text": "Get familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS."
                },
                {
                    "type": "list",
                    "items": [
                        "Utility-First FundamentalsUsing a utility-first workflow to build complex components from a constrained set of primitive utilities.",
                        "Responsive DesignBuild fully responsive user interfaces that adapt to any screen size using responsive modifiers.",
                        "Hover, Focus & Other StatesStyle elements in interactive states like hover, focus, and more using conditional modifiers.",
                        "Dark ModeOptimize your site for dark mode directly in your HTML using the dark mode modifier.",
                        "Reusing StylesManage duplication and keep your projects maintainable by creating reusable abstractions.",
                        "Customizing the FrameworkCustomize the framework to match your brand and extend it with your own custom styles."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Utility-First Fundamentals"
                },
                {
                    "type": "p",
                    "text": "Using a utility-first workflow to build complex components from a constrained set of primitive utilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive Design"
                },
                {
                    "type": "p",
                    "text": "Build fully responsive user interfaces that adapt to any screen size using responsive modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hover, Focus & Other States"
                },
                {
                    "type": "p",
                    "text": "Style elements in interactive states like hover, focus, and more using conditional modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dark Mode"
                },
                {
                    "type": "p",
                    "text": "Optimize your site for dark mode directly in your HTML using the dark mode modifier."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing Styles"
                },
                {
                    "type": "p",
                    "text": "Manage duplication and keep your projects maintainable by creating reusable abstractions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the Framework"
                },
                {
                    "type": "p",
                    "text": "Customize the framework to match your brand and extend it with your own custom styles."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/installation/play-cdn",
            "title": "Try Tailwind CSS using the Play CDN - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailwind CLI",
                        "Using PostCSS",
                        "Framework Guides",
                        "Play CDN"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tailwind CLI"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using PostCSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Framework Guides"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Play CDN"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Play CDN"
                },
                {
                    "type": "p",
                    "text": "Use the Play CDN to try Tailwind right in the browser without any build step. The Play CDN is designed for development purposes only, and is not the best choice for production."
                },
                {
                    "type": "list",
                    "items": [
                        "Add the Play CDN script to your HTMLAdd the Play CDN script tag to the<head>of your HTML file, and start using Tailwind’s utility classes to style your content.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>",
                        "Try customizing your configEdit thetailwind.configobject tocustomize your configurationwith your own design tokens.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script><script>tailwind.config={theme:{extend:{colors:{clifford:'#da373d',}}}}</script></head><body><h1class=\"text-3xl font-bold underlinetext-clifford\">Hello world!</h1></body></html>",
                        "Try adding some custom CSSUsetype=\"text/tailwindcss\"to add custom CSS that supports all of Tailwind's CSS features.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script><styletype=\"text/tailwindcss\">@layerutilities{.content-auto{content-visibility:auto;}}</style></head><body><divclass=\"lg:content-auto\"><!-- ... --></div></body></html>",
                        "Try using a first-party pluginEnable first-party plugins, like forms and typography, using thepluginsquery parameter.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries\"></script></head><body><divclass=\"prose\"><!-- ... --></div></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Add the Play CDN script to your HTML"
                },
                {
                    "type": "p",
                    "text": "Add the Play CDN script tag to the<head>of your HTML file, and start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Try customizing your config"
                },
                {
                    "type": "p",
                    "text": "Edit thetailwind.configobject tocustomize your configurationwith your own design tokens."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script><script>tailwind.config={theme:{extend:{colors:{clifford:'#da373d',}}}}</script></head><body><h1class=\"text-3xl font-bold underlinetext-clifford\">Hello world!</h1></body></html>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Try adding some custom CSS"
                },
                {
                    "type": "p",
                    "text": "Usetype=\"text/tailwindcss\"to add custom CSS that supports all of Tailwind's CSS features."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com\"></script><styletype=\"text/tailwindcss\">@layerutilities{.content-auto{content-visibility:auto;}}</style></head><body><divclass=\"lg:content-auto\"><!-- ... --></div></body></html>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Try using a first-party plugin"
                },
                {
                    "type": "p",
                    "text": "Enable first-party plugins, like forms and typography, using thepluginsquery parameter."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><scriptsrc=\"https://cdn.tailwindcss.com?plugins=forms,typography,aspect-ratio,line-clamp,container-queries\"></script></head><body><divclass=\"prose\"><!-- ... --></div></body></html>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What to read next"
                },
                {
                    "type": "p",
                    "text": "Get familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS."
                },
                {
                    "type": "list",
                    "items": [
                        "Utility-First FundamentalsUsing a utility-first workflow to build complex components from a constrained set of primitive utilities.",
                        "Responsive DesignBuild fully responsive user interfaces that adapt to any screen size using responsive modifiers.",
                        "Hover, Focus & Other StatesStyle elements in interactive states like hover, focus, and more using conditional modifiers.",
                        "Dark ModeOptimize your site for dark mode directly in your HTML using the dark mode modifier.",
                        "Reusing StylesManage duplication and keep your projects maintainable by creating reusable abstractions.",
                        "Customizing the FrameworkCustomize the framework to match your brand and extend it with your own custom styles."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Utility-First Fundamentals"
                },
                {
                    "type": "p",
                    "text": "Using a utility-first workflow to build complex components from a constrained set of primitive utilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive Design"
                },
                {
                    "type": "p",
                    "text": "Build fully responsive user interfaces that adapt to any screen size using responsive modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hover, Focus & Other States"
                },
                {
                    "type": "p",
                    "text": "Style elements in interactive states like hover, focus, and more using conditional modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dark Mode"
                },
                {
                    "type": "p",
                    "text": "Optimize your site for dark mode directly in your HTML using the dark mode modifier."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing Styles"
                },
                {
                    "type": "p",
                    "text": "Manage duplication and keep your projects maintainable by creating reusable abstractions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the Framework"
                },
                {
                    "type": "p",
                    "text": "Customize the framework to match your brand and extend it with your own custom styles."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/installation/using-postcss",
            "title": "Install Tailwind CSS using PostCSS - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailwind CLI",
                        "Using PostCSS",
                        "Framework Guides",
                        "Play CDN"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tailwind CLI"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using PostCSS"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Framework Guides"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Play CDN"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Installing Tailwind CSS as a PostCSS plugin"
                },
                {
                    "type": "p",
                    "text": "Installing Tailwind CSS as a PostCSS plugin is the most seamless way to integrate it with build tools like webpack, Rollup, Vite, and Parcel."
                },
                {
                    "type": "list",
                    "items": [
                        "Install Tailwind CSSInstalltailwindcssand its peer dependencies via npm, and create yourtailwind.config.jsfile.Terminalnpm install -D tailwindcss postcss autoprefixernpx tailwindcss init",
                        "Add Tailwind to your PostCSS configurationAddtailwindcssandautoprefixerto yourpostcss.config.jsfile, or wherever PostCSS is configured in your project.postcss.config.jsmodule.exports={plugins:{tailwindcss:{},autoprefixer:{},}}",
                        "Configure your template pathsAdd the paths to all of your template files in yourtailwind.config.jsfile.tailwind.config.js/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js}\"],theme:{extend:{},},plugins:[],}",
                        "Add the Tailwind directives to your CSSAdd the@tailwinddirectives for each of Tailwind’s layers to your main CSS file.main.css@tailwindbase;@tailwindcomponents;@tailwindutilities;",
                        "Start your build processRun your build process withnpm run devor whatever command is configured in yourpackage.jsonfile.Terminalnpm run dev",
                        "Start using Tailwind in your HTMLMake sure your compiled CSS is included in the<head>(your framework might handle this for you), then start using Tailwind’s utility classes to style your content.index.html<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"/dist/main.css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Install Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Installtailwindcssand its peer dependencies via npm, and create yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss postcss autoprefixernpx tailwindcss init"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Add Tailwind to your PostCSS configuration"
                },
                {
                    "type": "p",
                    "text": "Addtailwindcssandautoprefixerto yourpostcss.config.jsfile, or wherever PostCSS is configured in your project."
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Configure your template paths"
                },
                {
                    "type": "p",
                    "text": "Add the paths to all of your template files in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={content:[\"./src/**/*.{html,js}\"],theme:{extend:{},},plugins:[],}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Add the Tailwind directives to your CSS"
                },
                {
                    "type": "p",
                    "text": "Add the@tailwinddirectives for each of Tailwind’s layers to your main CSS file."
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Start your build process"
                },
                {
                    "type": "p",
                    "text": "Run your build process withnpm run devor whatever command is configured in yourpackage.jsonfile."
                },
                {
                    "type": "code",
                    "code": "npm run dev"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Start using Tailwind in your HTML"
                },
                {
                    "type": "p",
                    "text": "Make sure your compiled CSS is included in the<head>(your framework might handle this for you), then start using Tailwind’s utility classes to style your content."
                },
                {
                    "type": "code",
                    "code": "<!doctypehtml><html><head><metacharset=\"UTF-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"><linkhref=\"/dist/main.css\"rel=\"stylesheet\"></head><body><h1class=\"text-3xl font-bold underline\">Hello world!</h1></body></html>"
                },
                {
                    "type": "p",
                    "text": "Are you stuck?Setting up Tailwind with PostCSS can be a bit different across different build tools. Check our framework guides to see if we have more specific instructions for your particular setup.Explore our framework guides"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What to read next"
                },
                {
                    "type": "p",
                    "text": "Get familiar with some of the core concepts that make Tailwind CSS different from writing traditional CSS."
                },
                {
                    "type": "list",
                    "items": [
                        "Utility-First FundamentalsUsing a utility-first workflow to build complex components from a constrained set of primitive utilities.",
                        "Responsive DesignBuild fully responsive user interfaces that adapt to any screen size using responsive modifiers.",
                        "Hover, Focus & Other StatesStyle elements in interactive states like hover, focus, and more using conditional modifiers.",
                        "Dark ModeOptimize your site for dark mode directly in your HTML using the dark mode modifier.",
                        "Reusing StylesManage duplication and keep your projects maintainable by creating reusable abstractions.",
                        "Customizing the FrameworkCustomize the framework to match your brand and extend it with your own custom styles."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Utility-First Fundamentals"
                },
                {
                    "type": "p",
                    "text": "Using a utility-first workflow to build complex components from a constrained set of primitive utilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Responsive Design"
                },
                {
                    "type": "p",
                    "text": "Build fully responsive user interfaces that adapt to any screen size using responsive modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hover, Focus & Other States"
                },
                {
                    "type": "p",
                    "text": "Style elements in interactive states like hover, focus, and more using conditional modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dark Mode"
                },
                {
                    "type": "p",
                    "text": "Optimize your site for dark mode directly in your HTML using the dark mode modifier."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reusing Styles"
                },
                {
                    "type": "p",
                    "text": "Manage duplication and keep your projects maintainable by creating reusable abstractions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the Framework"
                },
                {
                    "type": "p",
                    "text": "Customize the framework to match your brand and extend it with your own custom styles."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/intellisense",
            "title": "Editor Setup - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Editor Setup"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Syntax support"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS uses a lot of custom CSS at-rules like@tailwind,@apply, and@config, and in many editors this can trigger warnings or errors where these rules aren’t recognized."
                },
                {
                    "type": "p",
                    "text": "The solution to this is almost always to install a plugin for your editor/IDE for PostCSS language support instead of regular CSS."
                },
                {
                    "type": "p",
                    "text": "If you’re using VS Code, our officialTailwind CSS IntelliSenseplugin includes a dedicated Tailwind CSS language mode that has support for all of the custom at-rules and functions Tailwind uses."
                },
                {
                    "type": "p",
                    "text": "In some cases, you may need to disable native CSS linting/validations if your editor is very strict about the syntax it expects in your CSS files."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​IntelliSense for VS Code"
                },
                {
                    "type": "p",
                    "text": "The officialTailwind CSS IntelliSenseextension for Visual Studio Code enhances the Tailwind development experience by providing users with advanced features such as autocomplete, syntax highlighting, and linting."
                },
                {
                    "type": "list",
                    "items": [
                        "Autocomplete. Intelligent suggestions for class names, as well asCSS functions and directives.",
                        "Linting. Highlights errors and potential bugs in both your CSS and your markup.",
                        "Hover Previews. See the complete CSS for a Tailwind class name by hovering over it.",
                        "Syntax Highlighting. Provides syntax definitions so that Tailwind features are highlighted correctly."
                    ]
                },
                {
                    "type": "p",
                    "text": "Check out the projecton GitHubto learn more, oradd it to Visual Studio Codeto get started now."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Automatic class sorting with Prettier"
                },
                {
                    "type": "p",
                    "text": "We maintain an officialPrettier pluginfor Tailwind CSS that automatically sorts your classes following ourrecommended class order."
                },
                {
                    "type": "p",
                    "text": "It works seamlessly with custom Tailwind configurations, and because it’s just a Prettier plugin, it works anywhere Prettier works — including every popular editor and IDE, and of course on the command line."
                },
                {
                    "type": "code",
                    "code": "<!-- Before --><buttonclass=\"text-white px-4 sm:px-8 py-2 sm:py-3 bg-sky-700 hover:bg-sky-800\">...</button><!-- After --><buttonclass=\"bg-sky-700 px-4 py-2 text-white hover:bg-sky-800 sm:px-8 sm:py-3\">...</button>"
                },
                {
                    "type": "p",
                    "text": "Check out the pluginon GitHubto learn more and get started."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​JetBrains IDEs"
                },
                {
                    "type": "p",
                    "text": "JetBrains IDEs like WebStorm, PhpStorm, and others include support for intelligent Tailwind CSS completions in your HTML and when using@apply."
                },
                {
                    "type": "p",
                    "text": "Learn more about Tailwind CSS support in JetBrains IDEs →"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Syntax support",
                        "IntelliSense for VS Code",
                        "Automatic class sorting with Prettier",
                        "JetBrains IDEs"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/invert",
            "title": "Invert - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Invert"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Inverting an element’s color"
                },
                {
                    "type": "p",
                    "text": "Use theinvertandinvert-0utilities to control whether an element should be rendered with inverted colors or normally."
                },
                {
                    "type": "p",
                    "text": "invert-0"
                },
                {
                    "type": "p",
                    "text": "invert"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"invert-0...\"><!-- ... --></div><divclass=\"invert...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert brightness-150md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:invert-0to only apply theinvert-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"inverthover:invert-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:invert-0to apply theinvert-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"invertmd:invert-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposeinvertutilities. You can customize these values by editingtheme.invertortheme.extend.invertin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{invert:{25:'.25',50:'.5',75:'.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offinvertvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"invert-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Inverting an element's color",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/isolation",
            "title": "Isolation - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Isolation"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the stacking context"
                },
                {
                    "type": "p",
                    "text": "Use theisolateandisolation-autoutilities to control whether an element should explicitly create a new stacking context."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"isolate ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:isolation-autoto only apply theisolation-autoutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"isolatehover:isolation-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:isolation-autoto apply theisolation-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"isolatemd:isolation-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the stacking context",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/just-in-time-mode",
            "title": "Just-in-Time Mode - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Just-in-Time Mode"
                },
                {
                    "type": "p",
                    "text": "A faster, more powerful, on-demand engine for Tailwind CSS v2.1+."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview"
                },
                {
                    "type": "p",
                    "text": "This feature is currently in preview.Preview features are not covered by semantic versioning and some details may change as we continue to refine them."
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.1 introduces a new just-in-time compiler for Tailwind CSS that generates your styles on-demand as you author your templates instead of generating everything in advance at initial build time."
                },
                {
                    "type": "p",
                    "text": "This comes with a lot of advantages:"
                },
                {
                    "type": "list",
                    "items": [
                        "Lightning fast build times. Tailwind can take 3–8s to initially compile using our CLI, and upwards of 30–45s in webpack projects because webpack struggles with large CSS files. This library can compile even the biggest projects in about 800ms(with incremental rebuilds as fast as 3ms), no matter what build tool you’re using.",
                        "Every variant is enabled out of the box. Variants likefocus-visible,active,disabled, and others are not normally enabled by default due to file-size considerations. Since this library generates styles on demand, you can use any variant you want, whenever you want. You can even stack them likesm:hover:active:disabled:opacity-75. Never configure your variants again.",
                        "Generate arbitrary styles without writing custom CSS.Ever needed some ultra-specific value that wasn’t part of your design system, liketop: -113pxfor a quirky background image? Since styles are generated on demand, you can just generate a utility for this as needed using square bracket notation liketop-[-113px]. Works with variants too, likemd:top-[-113px].",
                        "Your CSS is identical in development and production. Since styles are generated as they are needed, you don’t need to purge unused styles for production, which means you see the exact same CSS in all environments. Never worry about accidentally purging an important style in production again.",
                        "Better browser performance in development. Since development builds are as small as production builds, the browser doesn’t have to parse and manage multiple megabytes of pre-generated CSS. In projects with heavily extended configurations this makes dev tools a lot more responsive."
                    ]
                },
                {
                    "type": "p",
                    "text": "To see it in action,watch our announcement video."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enabling JIT mode"
                },
                {
                    "type": "p",
                    "text": "To enable just-in-time mode, set themodeoption to'jit'in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={+mode:'jit',purge:[// ...],theme:{// ...}// ...}"
                },
                {
                    "type": "p",
                    "text": "Since JIT mode generates your CSS on-demand by scanning your template files, it’s crucial that you configure thepurgeoption in yourtailwind.config.jsfile with all of your template paths, otherwise your CSS will be empty:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={mode:'jit',+// These paths are just examples, customize them to match your project structure+purge:[+'./public/**/*.html',+'./src/**/*.{js,jsx,ts,tsx,vue}',+],theme:{// ...}// ...}"
                },
                {
                    "type": "p",
                    "text": "Now when you start your development server or build runner, Tailwind will generate your styles on-demand instead of generating everything in advance."
                },
                {
                    "type": "p",
                    "text": "Having issues? See thetroubleshooting sectionto learn how to fix common problems."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "New features"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "All variants are enabled"
                },
                {
                    "type": "p",
                    "text": "Since styles are generated on-demand, there’s no need to configure which variants are available for each core plugin."
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"disabled:opacity-75\">"
                },
                {
                    "type": "p",
                    "text": "You can use variants likefocus-visible,active,disabled,even, and more in combination with any utility, without making any changes to yourtailwind.config.jsfile."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Stackable variants"
                },
                {
                    "type": "p",
                    "text": "All variants can be combined together to easily target very specific situations without writing custom CSS."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"md:dark:disabled:focus:hover:bg-gray-400\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Arbitrary value support"
                },
                {
                    "type": "p",
                    "text": "Many utilities support arbitrary values using a new square bracket notation to indicate that you’re “breaking out” of your design system."
                },
                {
                    "type": "code",
                    "code": "<!-- Sizes and positioning --><imgclass=\"absolute w-[762px] h-[918px] top-[-325px] right-[62px] md:top-[-400px] md:right-[80px]\"src=\"/crazy-background-image.png\"><!-- Colors --><buttonclass=\"bg-[#1da1f1]\">Share on Twitter</button><!-- Complex grids --><divclass=\"grid-cols-[1fr,700px,2fr]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This is very useful for building pixel-perfect designs where there are a few elements that need hyper-specific styles, like a carefully positioned background image on a marketing site."
                },
                {
                    "type": "p",
                    "text": "We’ll likely add some form of “strict mode” in the future for power-hungry team leads who don’t trust their colleagues to use this feature responsibly."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dynamic values"
                },
                {
                    "type": "p",
                    "text": "Note that you still need towrite purgeable HTMLwhen using arbitrary values, and your classes need to exist as complete strings for Tailwind to detect them correctly."
                },
                {
                    "type": "p",
                    "text": "Don't use string concatenation to create class names"
                },
                {
                    "type": "code",
                    "code": "<divclassName={`mt-[${size==='lg'?'22px':'17px'}]`}></div>"
                },
                {
                    "type": "p",
                    "text": "Do dynamically select a complete class name"
                },
                {
                    "type": "code",
                    "code": "<divclassName={size==='lg'?'mt-[22px]':'mt-[17px]'}></div>"
                },
                {
                    "type": "p",
                    "text": "Tailwind doesn’t include any sort of client-side runtime, so class names need to be statically extractable at build-time, and can’t depend on any sort of arbitrary dynamic values that change on the client. Use inline styles for these situations, or combine Tailwind with a CSS-in-JS library likeEmotionif it makes sense for your project."
                },
                {
                    "type": "p",
                    "text": "Arbitrary values cannot be computed from dynamic values"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-[{{ userThemeColor }}]\"></div>"
                },
                {
                    "type": "p",
                    "text": "Use inline styles for truly dynamic or user-defined values"
                },
                {
                    "type": "code",
                    "code": "<divstyle=\"background-color:{{userThemeColor}}\"></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Values with spaces"
                },
                {
                    "type": "p",
                    "text": "It’s also important to note that CSS classes cannot contain spaces, which means you can’t use arbitrary values likecalc(100px - 4rem)or1fr 700px 2fras-is. To use arbitrary values like this in your class names, you need to remove the spaces in things likecalccalls, and replace the spaces with commas in lists like1fr 700px 2fr. Tailwind will automatically re-introduce the spaces for you incalccalls and replace the commas with spaces in lists when generating the corresponding CSS."
                },
                {
                    "type": "p",
                    "text": "Don't use spaces in arbitrary values"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-[calc(1000px - 4rem)]\">...</div><divclass=\"grid-cols-[1fr 700px 2fr]\">...</div>"
                },
                {
                    "type": "p",
                    "text": "Remove spaces or replace with commas as appropriate"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-[calc(1000px-4rem)]\">...</div><divclass=\"grid-cols-[1fr,700px,2fr]\">...</div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Ambiguous values"
                },
                {
                    "type": "p",
                    "text": "If you are using a CSS variable as an arbitrary value, it can sometimes lead to class names that are ambiguous to the engine, for example:"
                },
                {
                    "type": "code",
                    "code": "<!-- Is this a font size utility, or a text color utility? --><divclass=\"text-[var(--mystery-var)]\">"
                },
                {
                    "type": "p",
                    "text": "In these situations, you can provide a hint to the engine by prefixing the arbitrary value with the type name:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-[color:var(--mystery-var)]\">"
                },
                {
                    "type": "p",
                    "text": "The supported types are:"
                },
                {
                    "type": "list",
                    "items": [
                        "length",
                        "color",
                        "angle",
                        "list"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Built-in important modifier"
                },
                {
                    "type": "p",
                    "text": "You can make any utility important by adding a!character to the beginning:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"font-bold !font-medium\">This will be medium even though bold comes later in the CSS.</p>"
                },
                {
                    "type": "p",
                    "text": "The!always goes at the beginning of the utility name, after any variants, but before any prefix:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sm:hover:!tw-font-bold\">"
                },
                {
                    "type": "p",
                    "text": "This can be useful in rare situations where you need to increase specificity because you’re at war with some styles you don’t control."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Color opacity shorthand"
                },
                {
                    "type": "p",
                    "text": "Instead of needing to use utilities likebg-opacity-50,text-opacity-25, orplaceholder-opacity-40, the JIT engine lets you just tack the opacity right on to the end of the color:"
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"bg-red-500 bg-opacity-25\">+<divclass=\"bg-red-500/25\">"
                },
                {
                    "type": "p",
                    "text": "This means you can now change the opacity of colors anywhere in Tailwind, even where we previously didn’t have specific opacity utilities, like in gradients for example:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-gradient-to-r from-red-500/50\">"
                },
                {
                    "type": "p",
                    "text": "The opacity values are taken from youropacityscale, but you can also use arbitrary opacity values using square bracket notation:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-red-500/[0.31]\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Per-side border colors"
                },
                {
                    "type": "p",
                    "text": "Requested since like 2017 but left out due to file-size considerations, the JIT engine finally adds support for setting the border color for each side of an element independently:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border-2 border-t-blue-500 border-r-pink-500 border-b-green-500 border-l-yellow-500\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Pseudo-element variants"
                },
                {
                    "type": "p",
                    "text": "The JIT engine adds support for styling pseudo-elements like::before,::after,::first-letter,::first-line,::marker, and::selection."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:block before:bg-blue-500 after:flex after:bg-pink-300\">"
                },
                {
                    "type": "p",
                    "text": "When you add anybeforeoraftervariant, thecontentproperty is automatically set to\"\"to make sure the element is actually visible. To change the content property, use the newcontent utilities."
                },
                {
                    "type": "p",
                    "text": "As mentioned, we’ve also added support for other pseudo-elements like::selection, which allows you to style selected text:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"selection:bg-yellow-300 ...\">I'm yellow when you highlight me.</p>"
                },
                {
                    "type": "p",
                    "text": "Or the::markerpseudo-element, which allows you to style list markers:"
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"marker:text-gray-500\"><li>Odio et sed.</li><li>Voluptatem perferendis optio est id.</li><li>Accusamus et aut odit.</li></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Content utilities"
                },
                {
                    "type": "p",
                    "text": "We’ve added newcontent-*utilities for setting thecontentproperty — super useful alongside the newbeforeandaftervariants:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['hello'] before:block ...\">"
                },
                {
                    "type": "p",
                    "text": "They even support stuff like theattrfunction, so you can reference a value stored in an attribute:"
                },
                {
                    "type": "code",
                    "code": "<divdata-content=\"hello world\"class=\"before:content-[attr(data-content)] before:block ...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Exhaustive pseudo-class support"
                },
                {
                    "type": "p",
                    "text": "On top of the existing stuff likehover,focus, and others, we’ve added support for every pseudo-class we thought made any sense at all, likerequired,invalid,placeholder-shown, and tons more."
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"invalid:border-red-500 ...\">"
                },
                {
                    "type": "p",
                    "text": "Here’s the complete list of new pseudo-class variants:"
                },
                {
                    "type": "list",
                    "items": [
                        "only(foronly-child)",
                        "first-of-type",
                        "last-of-type",
                        "only-of-type",
                        "target",
                        "default",
                        "indeterminate",
                        "placeholder-shown",
                        "autofill",
                        "required",
                        "valid",
                        "invalid",
                        "in-range",
                        "out-of-range"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caret color utilities"
                },
                {
                    "type": "p",
                    "text": "You can now set the color of the cursor in form fields using the newcaret-{color}utilities:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"caret-red-500\">"
                },
                {
                    "type": "p",
                    "text": "These are customizable using thecaretColorkey in thethemesection of yourtailwind.config.jsfile."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sibling selector variants"
                },
                {
                    "type": "p",
                    "text": "Similar to thegroup-*variants we’ve supported for years for styling an element based on the parent state, you can use the newpeer-*variants to style an element based on the state of one of its previous siblings:"
                },
                {
                    "type": "code",
                    "code": "<label><inputtype=\"checkbox\"class=\"peer sr-only\"><spanclass=\"h-4 w-4 bg-gray-200 peer-checked:bg-blue-500\"><!-- ... --></span><!-- ... --></label>"
                },
                {
                    "type": "p",
                    "text": "Simply mark the previous sibling you’re interested in with thepeerclass, then use variants likepeer-hover,peer-checked,peer-focus, etc. to style your element based on the state of that sibling."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Simplified transform, filter, and backdrop-filter composition"
                },
                {
                    "type": "p",
                    "text": "Thetransform,filter, andbackdrop-filterclasses are no longer necessary to “enable” their respective set of composable utilities."
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm\">+<divclass=\"scale-50 grayscale backdrop-blur-sm\">"
                },
                {
                    "type": "p",
                    "text": "Now those features are automatically enabled any time you use any of the relevant sub-utilities."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Changes"
                },
                {
                    "type": "p",
                    "text": "We see the JIT engine as a preview of what we plan to ship as Tailwind CSS v3.0, so there are a few small breaking changes to consider when opting in. We really don’t expect these to impact very many people but worth reading, especially if you notice any subtle differences in how your projects look."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Variants are rendered together"
                },
                {
                    "type": "p",
                    "text": "In the classic engine, utility variants are grouped together in the generated CSS per utility like this:"
                },
                {
                    "type": "code",
                    "code": "/* Classic engine */.bg-black{background-color:#000}.hover\\:bg-black:hover{background-color:#000}.focus\\:bg-black:focus{background-color:#000}/* ... */.opacity-75{opacity:0.75}.hover\\:opacity-75:hover{opacity:0.75}.focus\\:opacity-75:focus{opacity:0.75}/* ... */.translate-x-4{--tw-translate-x:1rem}.hover\\:translate-x-4:hover{--tw-translate-x:1rem}.focus\\:translate-x-4:focus{--tw-translate-x:1rem}"
                },
                {
                    "type": "p",
                    "text": "In the JIT engine, variants are grouped togetherper variant:"
                },
                {
                    "type": "code",
                    "code": "/* JIT engine */.bg-black{background-color:#000}.opacity-75{opacity:0.75}.translate-x-4{--tw-translate-x:1rem}/* ... */.hover\\:bg-black:hover{background-color:#000}.hover\\:opacity-75:hover{opacity:0.75}.hover\\:translate-x-4:hover{--tw-translate-x:1rem}/* ... */.focus\\:bg-black:focus{background-color:#000}.focus\\:opacity-75:focus{opacity:0.75}.focus\\:translate-x-4:focus{--tw-translate-x:1rem}"
                },
                {
                    "type": "p",
                    "text": "This means that it’s not possible to specify the variant order per core plugin anymore — the variants will always be in the same order for all utilities. This could be a problem for you if previously you neededhoverto defeatfocusfor a specific utility for example and had ensuredhovercame afterfocusin the variant list."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports{// Variant configuration (including order) is not respected by the JIT engine-variants:{-// ...-backgroundColor:['focus','hover']-}}"
                },
                {
                    "type": "p",
                    "text": "To handle these situations with the JIT engine, we recommend using stacked variants instead:"
                },
                {
                    "type": "code",
                    "code": "<!-- This ensures the element is blue on hover, even if it's also focused --><divclass=\"focus:bg-red-500 hover:bg-blue-500hover:focus:bg-blue-500\">"
                },
                {
                    "type": "p",
                    "text": "Stacked variants let you specify how something should be styled when multiple variants are active at the same time, so instead of trying to overridefocusstyles withhoverstyles, you explicitly declare what an element should look like when bothhoverandfocusare active simultaneously."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Variants are inserted at @tailwind variants"
                },
                {
                    "type": "p",
                    "text": "In the classic engine, all utility variants are injected as part of the@tailwind utilitiesdirective."
                },
                {
                    "type": "p",
                    "text": "In the JIT engine, variants are injected at the@tailwind variantsdirective, which has been renamed from@tailwind screens."
                },
                {
                    "type": "p",
                    "text": "This directive is optional(just like@tailwind screensalways has been)and is only useful if you want explicit control over where utility variants are injected. By default, they are always injected at the very end of your stylesheet."
                },
                {
                    "type": "p",
                    "text": "If you were using@tailwind screensbefore, you should update your code to use@tailwind variants:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;-@tailwindscreens;+@tailwindvariants;/* Some custom CSS... */"
                },
                {
                    "type": "p",
                    "text": "The@tailwind variantsfeature is considered an advanced escape hatch and we recommend omitting it by default. You should only use it if your project won’t work properly without it, which is only ever really true if you are introducing Tailwind to a legacy system with a very fragile existing CSS codebase that has styles that absolutelyneedto be at the very end of the stylesheet for things to work."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Transforms and filters don't need to be explicitly enabled"
                },
                {
                    "type": "p",
                    "text": "Thetransform,filter, andbackdrop-filterclasses aren’t necessary for “enabling” those features when using the JIT engine:"
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm\">+<divclass=\"scale-50 grayscale backdrop-blur-sm\">"
                },
                {
                    "type": "p",
                    "text": "This means you can no longer expect transforms and filters to be dormant by default, and conditionally activated by addingtransform,filter, orbackdrop-filter."
                },
                {
                    "type": "p",
                    "text": "Instead, you will want put any variants on the sub-utilities themselves:"
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"scale-105 -translate-y-1 hover:transform\">+<divclass=\"hover:scale-105 hover:-translate-y-1\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Limitations"
                },
                {
                    "type": "p",
                    "text": "This new engine supports almost every feature that exists in the classic engine, plus tons of new features that wouldn’t be possible if everything had to be pre-generated up front."
                },
                {
                    "type": "p",
                    "text": "Due to the nature of how the engine works however, there are a few things that aren’t currently possible:"
                },
                {
                    "type": "list",
                    "items": [
                        "Thesafelistoption does not support regular expressions. Because no CSS is generated by default, the safelist has to be a list of complete class names. It’s not possible to safelist a regular expression, because there is not a pre-generated list of class names to match against that regular expression.",
                        "Theprefixoption cannot detect complete class names when configured as a function. Because we don’t generate class names in advance, we can only pass the utility “namespace” to custom prefix functions. Seethis commentfor an example.",
                        "You can only@applyclasses that are part of core, generated by plugins, or defined within a@layerrule. You can’t currently@applyarbitrary CSS classes that aren’t defined within a@layerrule, although we may add support for this in the future."
                    ]
                },
                {
                    "type": "p",
                    "text": "We are also still ironing out some compatibility issues with certain build tools, which you can follow in ourissue tracker."
                },
                {
                    "type": "p",
                    "text": "If you run into any other issues or find any bugs, pleaseopen an issueso we can fix it."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Troubleshooting"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styles aren't removed when classes are deleted"
                },
                {
                    "type": "p",
                    "text": "When the JIT engine is running in watch mode, you might notice that when you add a class to your HTML then remove it, that the class isstillpresent in your CSS."
                },
                {
                    "type": "p",
                    "text": "This isn’t a bug and is rather a deliberate performance optimization that drastically increases the speed of incremental rebuilds, especially in large projects."
                },
                {
                    "type": "p",
                    "text": "We recommend you always compile your CSS in a separate one-off build before deploying to production so that you can minify the output. For most modern tools (like Next.js for example), this sort of thing happens automatically because your compiled CSS is never committed to version control anyways."
                },
                {
                    "type": "p",
                    "text": "If you want Tailwind to rebuild the CSS completely from scratch while in watch mode, saving yourtailwind.config.jsfile or your CSS input file will invalidate all of the caches and trigger a fresh rebuild."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styles don't update when saving content files"
                },
                {
                    "type": "p",
                    "text": "As of Tailwind CSS v2.2+, the JIT engine depends on PostCSS’sdirectory dependency messagesto register your content files as CSS build dependencies with your build tool. These are a fairly new addition to PostCSS (added in May 2021), and not all build tools have been updated to support them yet."
                },
                {
                    "type": "p",
                    "text": "If your CSS isn’t rebuilding when you change your content files, try settingTAILWIND_MODE=watchas part of your watch script to tell Tailwind to use a legacy dependency tracking strategy instead, which works well with many build tools."
                },
                {
                    "type": "p",
                    "text": "For example, if you are usingpostcss-cli, setTAILWIND_MODE=watchin your dev/watch script:"
                },
                {
                    "type": "code",
                    "code": "// package.json{// ...scripts:{// Set TAILWIND_MODE=watch when starting your dev server\"dev\":\"TAILWIND_MODE=watch postcss -i tailwind.css -o build.css --watch\",// Do not set TAILWIND_MODE for one-off builds\"build\":\"postcss -i tailwind.css -o build.css --minify\",// ...},// ...}"
                },
                {
                    "type": "p",
                    "text": "If you’re using Windows, we recommendcross-envfor setting environment variables in your scripts."
                },
                {
                    "type": "p",
                    "text": "Note that settingTAILWIND_MODE=watchwill start a long-running watch process in the background, so if you set that environment variable when trying to do a one-off build, it will look like the build is hanging."
                },
                {
                    "type": "p",
                    "text": "You should only setTAILWIND_MODE=watchwhen you are actually running a dev server/watch process, and only if your build tool doesn’t yet support PostCSS directory dependency messages. This flag is a temporary workaround for incompatible tooling, and will eventually be removed in a future version of Tailwind CSS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Styles rebuild in an infinite loop"
                },
                {
                    "type": "p",
                    "text": "If your CSS seems to be rebuilding in an infinite loop, there’s a good chance it’s because your build tool doesn’t support PostCSS’sgloboption whenregistering dependencies."
                },
                {
                    "type": "p",
                    "text": "Many build tools (such as webpack) don’t support this option, and as a result we can only tell them to watch specific files orentire directories. We can’t tell webpack to only watch*.htmlfiles in a directory for example."
                },
                {
                    "type": "p",
                    "text": "That means that if building your CSS causesanyfiles in those directories to change, a rebuild will be triggered, even if the changed file doesn’t match the extension in your glob."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={purge:[// Your CSS will rebuild any time *any* file in `src` changes'./src/**/*.{html,js}',],// ...}"
                },
                {
                    "type": "p",
                    "text": "So if you are watchingsrc/**/*.htmlfor changes, but you are writing your CSS output file tosrc/css/styles.css, you will get an infinite rebuild loop in some tools."
                },
                {
                    "type": "p",
                    "text": "Ideally we could warn you about this in the console, but many tools support it perfectly fine (including our own CLI tool), and we have no reliable way to detect what build tool you are using."
                },
                {
                    "type": "p",
                    "text": "You have a few options for solving this problem:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use more specific paths in yourpurgeconfig. Make sure you only include directories that won’t change when your CSS builds.// tailwind.config.jsmodule.exports={purge:[-'./src/**/*.{html,js}',+'./src/pages/**/*.{html,js}',+'./src/components/**/*.{html,js}',+'./src/layouts/**/*.{html,js}',+'./src/index.html',],// ...}If necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files.",
                        "Use a build tool with PostCSS glob support. If you absolutely can’t change your purge config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend usingTailwind CLI, which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use more specific paths in yourpurgeconfig. Make sure you only include directories that won’t change when your CSS builds."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={purge:[-'./src/**/*.{html,js}',+'./src/pages/**/*.{html,js}',+'./src/components/**/*.{html,js}',+'./src/layouts/**/*.{html,js}',+'./src/index.html',],// ...}"
                },
                {
                    "type": "p",
                    "text": "If necessary, adjust your actual project directory structure to make sure you can target your template files without accidentally catching your CSS file or other build artifacts like manifest files."
                },
                {
                    "type": "p",
                    "text": "Use a build tool with PostCSS glob support. If you absolutely can’t change your purge config or directory structure, your best bet is to compile your CSS separately with a tool that has complete glob support. We recommend usingTailwind CLI, which is a fast, simple, purpose-built tool for compiling your CSS with Tailwind."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "It just doesn't seem to work properly"
                },
                {
                    "type": "p",
                    "text": "If you are experiencing weird, hard to describe issues with the output, or things just don’t seem like they are working at all, there’s a good chance it’s due to your build tool not supporting PostCSS dependency messages properly(or at all). One known example of this currently isStencil."
                },
                {
                    "type": "p",
                    "text": "When you are having these sorts of issues, we recommend using the Tailwind CLI tool to compile your CSS separately instead of trying to integrate Tailwind into your existing tooling."
                },
                {
                    "type": "p",
                    "text": "You can use packages likenpm-run-allorconcurrentlyto compile your CSS alongside your usual development command by adding some scripts to your project like this:"
                },
                {
                    "type": "code",
                    "code": "// package.json{// ...\"scripts\":{\"dev\":\"npm-run-all --parallel dev:*\",\"dev:parcel\":\"parcel serve ./src/index.html\",\"dev:css\":\"tailwindcss -o src/tailwind.css --watch\",\"build\":\"npm-run-all build:css build:parcel\",\"build:parcel\":\"parcel build ./src/index.html\",\"build:css\":\"tailwindcss -o src/tailwind.css --minify\",},}"
                },
                {
                    "type": "p",
                    "text": "Either way, please be sure tocheck for an existing issueoropen a new oneso we can figure out the problem and try to improve compatibility with whatever tool you are using."
                },
                {
                    "type": "p",
                    "text": "Tools with known compatibility issues currently include:"
                },
                {
                    "type": "list",
                    "items": [
                        "postcss-cli (#383)",
                        "Parcel (#6299)",
                        "Stencil (#35)"
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Enabling JIT mode",
                        "New features",
                        "All variants are enabled",
                        "Stackable variants",
                        "Arbitrary value support",
                        "Built-in important modifier",
                        "Color opacity shorthand",
                        "Per-side border colors",
                        "Pseudo-element variants",
                        "Content utilities",
                        "Exhaustive pseudo-class support",
                        "Caret color utilities",
                        "Sibling selector variants",
                        "Simplified transform, filter, and backdrop-filter composition",
                        "Changes",
                        "Variants are rendered together",
                        "Variants are inserted at @tailwind variants",
                        "Transforms and filters don't need to be explicitly enabled",
                        "Limitations",
                        "Troubleshooting",
                        "Styles aren't removed when classes are deleted",
                        "Styles don't update when saving content files",
                        "Styles rebuild in an infinite loop",
                        "It just doesn't seem to work properly"
                    ]
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/justify-content",
            "title": "Justify Content - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Justify Content"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Usejustify-startto justify items against the start of the container’s main axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-start...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Usejustify-centerto justify items along the center of the container’s main axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-center...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Usejustify-endto justify items against the end of the container’s main axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-end...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space between"
                },
                {
                    "type": "p",
                    "text": "Usejustify-betweento justify items along the container’s main axis such that there is an equal amount of space between each item:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-between...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space around"
                },
                {
                    "type": "p",
                    "text": "Usejustify-aroundto justify items along the container’s main axis such that there is an equal amount of space on each side of each item:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-around...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space evenly"
                },
                {
                    "type": "p",
                    "text": "Usejustify-evenlyto justify items along the container’s main axis such that there is an equal amount of space around each item, but also accounting for the doubling of space you would normally see between each item when usingjustify-around:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-evenly...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Usejustify-stretchto allow content items to fill the available space along the container’s main axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-flow-coljustify-stretch...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Normal"
                },
                {
                    "type": "p",
                    "text": "Usejustify-normalto pack content items in their default position as if nojustify-contentvalue was set:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexjustify-normal...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:justify-betweento only apply thejustify-betweenutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex justify-starthover:justify-between\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:justify-betweento apply thejustify-betweenutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex justify-startmd:justify-between\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Start",
                        "Center",
                        "End",
                        "Space between",
                        "Space around",
                        "Space evenly",
                        "Stretch",
                        "Normal",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/justify-items",
            "title": "Justify Items - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Justify Items"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Usejustify-items-startto justify grid items against the start of their inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridjustify-items-start...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Usejustify-items-endto justify grid items against the end of their inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridjustify-items-end...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Usejustify-items-centerto justify grid items along their inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridjustify-items-center...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Usejustify-items-stretchto stretch items along their inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"gridjustify-items-stretch...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:justify-items-centerto only apply thejustify-items-centerutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-starthover:justify-items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:justify-items-centerto apply thejustify-items-centerutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-startmd:justify-items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Start",
                        "End",
                        "Center",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/justify-self",
            "title": "Justify Self - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Justify Self"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Usejustify-self-autoto align an item based on the value of the grid’sjustify-itemsproperty:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-stretch ...\"><!-- ... --><divclass=\"justify-self-auto...\">02</div><!-- ... --><!-- ... --><!-- ... --><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Usejustify-self-startto align a grid item to the start of its inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-stretch ...\"><!-- ... --><divclass=\"justify-self-start...\">02</div><!-- ... --><!-- ... --><!-- ... --><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Usejustify-self-centerto align a grid item along the center of its inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-stretch ...\"><!-- ... --><divclass=\"justify-self-center...\">02</div><!-- ... --><!-- ... --><!-- ... --><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Usejustify-self-endto align a grid item to the end of its inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-stretch ...\"><!-- ... --><divclass=\"justify-self-end...\">02</div><!-- ... --><!-- ... --><!-- ... --><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Usejustify-self-stretchto stretch a grid item to fill the grid area on its inline axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid justify-items-start ...\"><!-- ... --><divclass=\"justify-self-stretch...\">02</div><!-- ... --><!-- ... --><!-- ... --><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:justify-self-endto only apply thejustify-self-endutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"justify-self-starthover:justify-self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:justify-self-endto apply thejustify-self-endutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"justify-self-startmd:justify-self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Auto",
                        "Start",
                        "Center",
                        "End",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/letter-spacing",
            "title": "Letter Spacing - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Letter Spacing"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the letter spacing"
                },
                {
                    "type": "p",
                    "text": "Use thetracking-*utilities to control the letter spacing of an element."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"tracking-tight...\">The quick brown fox ...</p><pclass=\"tracking-normal...\">The quick brown fox ...</p><pclass=\"tracking-wide...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative letter-spacing value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "p",
                    "text": "Using negative values doesn’t make a ton of sense with the letter-spacing scale Tailwind includes out of the box, but if you’ve opted to customize your letter-spacing scale to use numbers instead of descriptive words like “wide” the negative value modifier can be useful."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"-tracking-2\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:tracking-wideto only apply thetracking-wideutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"tracking-tighthover:tracking-wide\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:tracking-wideto apply thetracking-wideutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"tracking-tightmd:tracking-wide\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides sixletter-spacingutilities. You can change, add, or remove these by editing thetheme.letterSpacingsection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{letterSpacing:{tightest:'-.075em',tighter:'-.05em',tight:'-.025em',normal:'0',wide:'.025em',wider:'.05em',widest:'.1em',widest:'.25em',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offletter-spacingvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"tracking-[.25em]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the letter spacing",
                        "Using negative values",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/line-clamp",
            "title": "Line Clamp - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Boost your conversion rate"
                },
                {
                    "type": "p",
                    "text": "Nulla dolor velit adipisicing duis excepteur esse in duis nostrud occaecat mollit incididunt deserunt sunt. Ut ut sunt laborum ex occaecat eu tempor labore enim adipisicing minim ad. Est in quis eu dolore occaecat excepteur fugiat dolore nisi aliqua fugiat enim ut cillum. Labore enim duis nostrud eu. Est ut eiusmod consequat irure quis deserunt ex. Enim laboris dolor magna pariatur. Dolor et ad sint voluptate sunt elit mollit officia ad enim sit consectetur enim."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/line-height",
            "title": "Line Height - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Line Height"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Relative line-heights"
                },
                {
                    "type": "p",
                    "text": "Use theleading-none,leading-tight,leading-snug,leading-normal,leading-relaxed, andleading-looseutilities to give an element a relative line-height based on its current font-size."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"leading-normal...\">So I started to walk into the water...</p><pclass=\"leading-relaxed...\">So I started to walk into the water...</p><pclass=\"leading-loose...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed line-heights"
                },
                {
                    "type": "p",
                    "text": "Use utilities likeleading-6andleading-7to give an element a fixed line-height, irrespective of the current font-size. These are useful when you need very precise control over an element’s final size."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"leading-6...\">So I started to walk into the water...</p><pclass=\"leading-7...\">So I started to walk into the water...</p><pclass=\"leading-8...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:leading-looseto only apply theleading-looseutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"leading-nonehover:leading-loose\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:leading-looseto apply theleading-looseutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"leading-nonemd:leading-loose\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding default line-heights"
                },
                {
                    "type": "p",
                    "text": "It’s important to note that by default, Tailwind’sfont-sizeutilities each set their own default line-height. This means that any time you use a responsive font-size utility likesm:text-xl, any explicit line-height you have set for a smaller breakpoint will be overridden."
                },
                {
                    "type": "code",
                    "code": "<!-- The `leading-loose` class will be overridden at the `md` breakpoint --><pclass=\"text-lg leading-loose md:text-xl\">Maybe we can live without libraries...</p>"
                },
                {
                    "type": "p",
                    "text": "If you want to override the default line-height after setting a breakpoint-specific font-size, make sure to set a breakpoint-specific line-height as well:"
                },
                {
                    "type": "code",
                    "code": "<!-- The `leading-loose` class will be overridden at the `md` breakpoint --><pclass=\"text-lg leading-loose md:text-xl md:leading-loose\">Maybe we can live without libraries...</p>"
                },
                {
                    "type": "p",
                    "text": "Using the same line-height across different font sizes is generally not going to give you good typographic results. Line-height should typically get smaller as font-size increases, so the default behavior here usually saves you a ton of work. If you find yourself fighting it, you can alwayscustomize your font-size scaleto not include default line-heights."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides six relative and eight fixedline-heightutilities. You change, add, or remove these by customizing thelineHeightsection of your Tailwind theme config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{lineHeight:{'extra-loose':'2.5','12':'3rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offline-heightvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"leading-[3rem]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Relative line-heights",
                        "Fixed line-heights",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Overriding default line-heights",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/list-style-image",
            "title": "List Style Image - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "List Style Image"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the list style image"
                },
                {
                    "type": "p",
                    "text": "Use thelist-image-*utilities to control the marker image for list items."
                },
                {
                    "type": "p",
                    "text": "Out of the box,list-image-noneis the only available preconfigured list style image utility. And while you can add additional utilities bycustomizing your theme, you can also use the square bracket notation to generate an arbitrary value on the fly."
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-image-[url(checkmark.png)]...\"><li>5 cups chopped Porcini mushrooms</li><!-- ... --></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:list-image-[url(checkmark.png)]to only apply thelist-image-[url(checkmark.png)]utility onhover."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-image-nonehover:list-image-[url(checkmark.png)]\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:list-image-[url(checkmark.png)]to apply thelist-image-[url(checkmark.png)]utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-image-nonemd:list-image-[url(checkmark.png)]\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind only provides thelist-image-noneutility. You can customize these values by editingtheme.listStyleImageortheme.extend.listStyleImagein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{listStyleImage:{checkmark:'url(\"/img/checkmark.png\")',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offlist-style-imagevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-image-[url(checkmark.png)]\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the list style image",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/list-style-position",
            "title": "List Style Position - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "List Style Position"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the list style position"
                },
                {
                    "type": "p",
                    "text": "Use thelist-insideandlist-outsideutilities to control the position of the markers and text indentation in a list."
                },
                {
                    "type": "p",
                    "text": "list-inside"
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "p",
                    "text": "list-outside"
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-inside ...\"><li>5 cups chopped Porcini mushrooms</li><!-- ... --></ul><ulclass=\"list-outside ...\"><li>5 cups chopped Porcini mushrooms</li><!-- ... --></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:list-insideto only apply thelist-insideutility onhover."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-outsidehover:list-inside\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:list-insideto apply thelist-insideutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-outsidemd:list-inside\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the list style position",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/list-style-type",
            "title": "List Style Type - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "List Style Type"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the list style type"
                },
                {
                    "type": "p",
                    "text": "To create bulleted or numeric lists, use thelist-discandlist-decimalutilities."
                },
                {
                    "type": "list",
                    "items": [
                        "Now this is a story all about how, my life got flipped-turned upside down",
                        "And I'd like to take a minute just sit right there",
                        "I'll tell you how I became the prince of a town called Bel-Air"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Now this is a story all about how, my life got flipped-turned upside down",
                        "And I'd like to take a minute just sit right there",
                        "I'll tell you how I became the prince of a town called Bel-Air"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Now this is a story all about how, my life got flipped-turned upside down",
                        "And I'd like to take a minute just sit right there",
                        "I'll tell you how I became the prince of a town called Bel-Air"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-disc\"><li>Now this is a story all about how, my life got flipped-turned upside down</li><!-- ... --></ul><olclass=\"list-decimal\"><li>Now this is a story all about how, my life got flipped-turned upside down</li><!-- ... --></ol><ulclass=\"list-none\"><li>Now this is a story all about how, my life got flipped-turned upside down</li><!-- ... --></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:list-discto only apply thelist-discutility onhover."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-nonehover:list-disc\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:list-discto apply thelist-discutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-nonemd:list-disc\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides three utilities for the most common list style types. You change, add, or remove these by editing thetheme.listStyleTypesection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{listStyleType:{none:'none',disc:'disc',decimal:'decimal',square:'square',roman:'upper-roman',}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offlist-style-typevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-[upper-roman]\"><!-- ... --></ul>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the list style type",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/margin",
            "title": "Margin - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Spacing",
                        "Margin"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add margin to a single side"
                },
                {
                    "type": "p",
                    "text": "Use themt-*,mr-*,mb-*, andml-*utilities to control the margin on one side of an element."
                },
                {
                    "type": "p",
                    "text": "For example,mt-6would add1.5remof margin to the top of an element,mr-4would add1remof margin to the right of an element,mb-8would add2remof margin to the bottom of an element, andml-2would add0.5remof margin to the left of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mt-6...\">mt-6</div><divclass=\"mr-4...\">mr-4</div><divclass=\"mb-8...\">mb-8</div><divclass=\"ml-2...\">ml-2</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add horizontal margin"
                },
                {
                    "type": "p",
                    "text": "Use themx-*utilities to control the horizontal margin of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mx-8...\">mx-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add vertical margin"
                },
                {
                    "type": "p",
                    "text": "Use themy-*utilities to control the vertical margin of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"my-8...\">my-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add margin to all sides"
                },
                {
                    "type": "p",
                    "text": "Use them-*utilities to control the margin on all sides of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"m-8...\">m-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative margin value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-36 h-16 bg-sky-400 opacity-20 ...\"></div><divclass=\"-mt-8bg-sky-300 ...\">-mt-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use thems-*andme-*utilities to set themargin-inline-startandmargin-inline-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"ms-8...\">ms-8</div><divclass=\"me-8...\">me-8</div><div><divdir=\"rtl\"><divclass=\"ms-8...\">ms-8</div><divclass=\"me-8...\">me-8</div><div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:mt-8to only apply themt-8utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mt-4hover:mt-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:mt-8to apply themt-8utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mt-4md:mt-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s margin scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the margin scale by editingtheme.marginortheme.extend.marginin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{margin:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offmarginvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"m-[5px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Add margin to a single side",
                        "Add horizontal margin",
                        "Add vertical margin",
                        "Add margin to all sides",
                        "Using negative values",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/max-height",
            "title": "Max-Height - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Max-Height"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the maximum height"
                },
                {
                    "type": "p",
                    "text": "Set the maximum height of an element usingmax-h-*utilities."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-96...\"><divclass=\"h-fullmax-h-80...\">max-h-80</div><divclass=\"h-fullmax-h-64...\">max-h-64</div><divclass=\"h-fullmax-h-48...\">max-h-48</div><divclass=\"h-fullmax-h-40...\">max-h-40</div><divclass=\"h-fullmax-h-32...\">max-h-32</div><divclass=\"h-fullmax-h-24...\">max-h-24</div><divclass=\"h-fullmax-h-full...\">max-h-full</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:max-h-screento only apply themax-h-screenutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-48 max-h-fullhover:max-h-screen\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:max-h-screento apply themax-h-screenutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-48 max-h-fullmd:max-h-screen\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s maximum height scale is a combination of thedefault spacing scaleas well as some additional values specific to heights."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customizemax-heightseparately, use thetheme.minHeightsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{maxHeight:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offmax-heightvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-h-[220px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the maximum height",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/max-width",
            "title": "Max-Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Max-Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the maximum width"
                },
                {
                    "type": "p",
                    "text": "Set the maximum width of an element using themax-w-*utilities."
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"w-fullmax-w-96...\">max-w-96</div><divclass=\"w-fullmax-w-80...\">max-w-80</div><divclass=\"w-fullmax-w-64...\">max-w-64</div><divclass=\"w-fullmax-w-48...\">max-w-48</div><divclass=\"w-fullmax-w-40...\">max-w-40</div><divclass=\"w-fullmax-w-32...\">max-w-32</div><divclass=\"w-fullmax-w-24...\">max-w-24</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Sizing large elements"
                },
                {
                    "type": "p",
                    "text": "Above24rem, themax-w-*utilities use a named scale instead of a numeric scale to make the values easier to guess."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-md...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Reading width"
                },
                {
                    "type": "p",
                    "text": "Themax-w-proseutility gives an element a max-width optimized for readability and adapts based on the font size."
                },
                {
                    "type": "p",
                    "text": "Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops."
                },
                {
                    "type": "p",
                    "text": "Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops."
                },
                {
                    "type": "p",
                    "text": "Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"text-smmax-w-prose...\"><p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p></div><divclass=\"text-basemax-w-prose...\"><p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p></div><divclass=\"text-xlmax-w-prose...\"><p>Oh yeah. It's the best part. It's crunchy, it's explosive, it's where the muffin breaks free of the pan and sort of does it's own thing. I'll tell you. That's a million dollar idea right there. Just sell the tops.</p></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Constraining to your breakpoints"
                },
                {
                    "type": "p",
                    "text": "Themax-w-screen-*classes can be used to give an element a max-width matching a specific breakpoint. These values are automatically derived from thetheme.screenssectionof yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-screen-2xl\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:max-w-lgto only apply themax-w-lgutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-smhover:max-w-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:max-w-lgto apply themax-w-lgutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-smmd:max-w-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s maximum width scale is a combination of thedefault spacing scaleas well as an additional set of named sizes forlarge elementsexclusive to themax-w-*utilities."
                },
                {
                    "type": "p",
                    "text": "You can customize values in the global spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customize values for just themax-w-*utilities, use thetheme.maxWidthsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{maxWidth:{'8xl':'96rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Note that values defined intheme.maxWidthtake precedence over values defined intheme.spacing, so adding a custom value totheme.spacingthat matches one of the default named sizes (likelgorxl) will not affect the correspondingmax-w-*utility."
                },
                {
                    "type": "p",
                    "text": "Don’t override named sizes undertheme.spacing"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'lg':'30rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Usetheme.maxWidthto override named sizes"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{maxWidth:{'lg':'30rem',}}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offmax-widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-[220px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the maximum width",
                        "Sizing large elements",
                        "Reading width",
                        "Constraining to your breakpoints",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/min-height",
            "title": "Min-Height - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Min-Height"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the minimum height"
                },
                {
                    "type": "p",
                    "text": "Set the minimum height of an element usingmin-h-*utilities."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-96...\"><divclass=\"min-h-80...\">min-h-80</div><divclass=\"min-h-64...\">min-h-64</div><divclass=\"min-h-48...\">min-h-48</div><divclass=\"min-h-40...\">min-h-40</div><divclass=\"min-h-32...\">min-h-32</div><divclass=\"min-h-24...\">min-h-24</div><divclass=\"min-h-full...\">min-h-full</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:min-h-fullto only apply themin-h-fullutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-24 min-h-0hover:min-h-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:min-h-fullto apply themin-h-fullutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-24 min-h-0md:min-h-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s minimum height scale is a combination of thedefault spacing scaleas well as some additional values specific to heights."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customizemin-heightseparately, use thetheme.minHeightsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{minHeight:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offmin-heightvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"min-h-[220px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the minimum height",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/min-width",
            "title": "Min-Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Min-Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the minimum width"
                },
                {
                    "type": "p",
                    "text": "Set the minimum width of an element usingmin-w-*utilities."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-96...\"><divclass=\"min-w-80...\">min-w-80</div><divclass=\"min-w-64...\">min-w-64</div><divclass=\"min-w-48...\">min-w-48</div><divclass=\"min-w-40...\">min-w-40</div><divclass=\"min-w-32...\">min-w-32</div><divclass=\"min-w-24...\">min-w-24</div><divclass=\"min-w-full...\">min-w-full</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:min-w-0to only apply themin-w-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-24 min-w-fullhover:min-w-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:min-w-0to apply themin-w-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-24 min-w-fullmd:min-w-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s minimum width scale is a combination of thedefault spacing scaleas well as some additional values specific to widths."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customizemin-widthseparately, use thetheme.minWidthsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{minWidth:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offmin-widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"min-w-[220px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the minimum width",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/mix-blend-mode",
            "title": "Mix Blend Mode - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Effects",
                        "Mix Blend Mode"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting an element’s blend mode"
                },
                {
                    "type": "p",
                    "text": "Use themix-blend-*utilities to control how an element’s content should be blended with the background."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex justify-center -space-x-14\"><divclass=\"mix-blend-multiplybg-blue-400 ...\"></div><divclass=\"mix-blend-multiplybg-pink-400 ...\"></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:mix-blend-overlayto only apply themix-blend-overlayutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mix-blend-multiplyhover:mix-blend-overlay\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:mix-blend-overlayto apply themix-blend-overlayutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"mix-blend-multiplymd:mix-blend-overlay\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting an element's blend mode",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/object-fit",
            "title": "Object Fit - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Object Fit"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resizing to cover a container"
                },
                {
                    "type": "p",
                    "text": "Use theobject-coverutility to resize an element’s content to cover its container."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-indigo-300 ...\"><imgclass=\"object-coverh-48 w-96 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Containing an element"
                },
                {
                    "type": "p",
                    "text": "Use theobject-containutility to resize an element’s content to stay contained within its container."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-purple-300 ...\"><imgclass=\"object-containh-48 w-96 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretching to fit a container"
                },
                {
                    "type": "p",
                    "text": "Use theobject-fillutility to stretch an element’s content to fit its container."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-sky-300 ...\"><imgclass=\"object-fillh-48 w-96 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scaling down if too large"
                },
                {
                    "type": "p",
                    "text": "Use theobject-scale-downutility to display an element’s content at its original size but scale it down to fit its container if necessary."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-cyan-300\"><imgclass=\"object-scale-downh-48 w-96 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using an element’s original size"
                },
                {
                    "type": "p",
                    "text": "Use theobject-noneutility to display an element’s content at its original size ignoring the container size."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-yellow-300\"><imgclass=\"object-noneh-48 w-96 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:object-scale-downto only apply theobject-scale-downutility onhover."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-containhover:object-scale-down\">"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:object-scale-downto apply theobject-scale-downutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-containmd:object-scale-down\">"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Resizing to cover a container",
                        "Containing an element",
                        "Stretching to fit a container",
                        "Scaling down if too large",
                        "Using an element's original size",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/object-position",
            "title": "Object Position - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Object Position"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Positioning a replaced element"
                },
                {
                    "type": "p",
                    "text": "Use theobject-*utilities to specify how a replaced element’s content should be positioned within its container."
                },
                {
                    "type": "p",
                    "text": "object-left-top"
                },
                {
                    "type": "p",
                    "text": "object-top"
                },
                {
                    "type": "p",
                    "text": "object-right-top"
                },
                {
                    "type": "p",
                    "text": "object-left"
                },
                {
                    "type": "p",
                    "text": "object-center"
                },
                {
                    "type": "p",
                    "text": "object-right"
                },
                {
                    "type": "p",
                    "text": "object-left-bottom"
                },
                {
                    "type": "p",
                    "text": "object-bottom"
                },
                {
                    "type": "p",
                    "text": "object-right-bottom"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-noneobject-left-topbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-topbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-right-topbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-leftbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-centerbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-rightbg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-left-bottombg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-bottombg-yellow-300 w-24 h-24 ...\"src=\"...\"><imgclass=\"object-noneobject-right-bottombg-yellow-300 w-24 h-24 ...\"src=\"...\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:object-topto only apply theobject-toputility onhover."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-centerhover:object-top\"src=\"...\">"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:object-topto apply theobject-toputility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-centermd:object-top\"src=\"...\">"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides nine object position utilities. You can customize these values by editingtheme.objectPositionortheme.extend.objectPositionin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{objectPosition:{'center-bottom':'center bottom',}},}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offobject-positionvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"object-[center_bottom]\"src=\"...\">"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Positioning a replaced element",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/opacity",
            "title": "Opacity - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Effects",
                        "Opacity"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing an element’s opacity"
                },
                {
                    "type": "p",
                    "text": "Use theopacity-*utilities to control the opacity of an element."
                },
                {
                    "type": "p",
                    "text": "opacity-100"
                },
                {
                    "type": "p",
                    "text": "opacity-75"
                },
                {
                    "type": "p",
                    "text": "opacity-50"
                },
                {
                    "type": "p",
                    "text": "opacity-25"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-indigo-500opacity-100...\"></button><buttonclass=\"bg-indigo-500opacity-75...\"></button><buttonclass=\"bg-indigo-500opacity-50...\"></button><buttonclass=\"bg-indigo-500opacity-25...\"></button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:opacity-100to only apply theopacity-100utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"opacity-50hover:opacity-100\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:opacity-100to apply theopacity-100utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"opacity-50md:opacity-100\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides several opacity utilities for general purpose use. You can customize these values by editingtheme.opacityortheme.extend.opacityin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{opacity:{'67':'.67',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offopacityvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"opacity-[.67]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing an element's opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/optimizing-for-production",
            "title": "Optimizing for Production - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Optimizing for Production"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS is incredibly performance focused and aims to produce the smallest CSS file possible by only generating the CSS you areactually usingin your project."
                },
                {
                    "type": "p",
                    "text": "Combined with minification and network compression, this usually leads to CSS files that are less than 10kB, even for large projects. For example, Netflix uses Tailwind forNetflix Top 10and the entire website delivers only 6.5kB of CSS over the network."
                },
                {
                    "type": "p",
                    "text": "With CSS files this small, you don’t have to worry about complex solutions like code-splitting your CSS for each page, and can instead just ship a single small CSS file that’s downloaded once and cached until you redeploy your site."
                },
                {
                    "type": "p",
                    "text": "For the smallest possible production build, we recommend minifying your CSS with a tool likecssnano, and compressing your CSS withBrotli."
                },
                {
                    "type": "p",
                    "text": "If you’re using Tailwind CLI, you can minify your CSS by adding the--minifyflag:"
                },
                {
                    "type": "code",
                    "code": "npx tailwindcss-obuild.css--minify"
                },
                {
                    "type": "p",
                    "text": "If you’ve installed Tailwind as a PostCSS plugin, addcssnanoto the end of your plugin list:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},...(process.env.NODE_ENV==='production'?{cssnano:{}}:{})}}"
                },
                {
                    "type": "p",
                    "text": "If you’re using a framework, check the documentation as this is often handled for you in production automatically and you don’t even need to configure it."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/order",
            "title": "Order - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Order"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ordering flex and grid items"
                },
                {
                    "type": "p",
                    "text": "Use theorder-*utilities to render flex and grid items in a different order than they appear in the DOM."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex justify-between ...\"><divclass=\"order-last\">01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative order value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-order-1\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:order-lastto only apply theorder-lastutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"order-firsthover:order-last\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:order-lastto apply theorder-lastutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"order-firstmd:order-last\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides utilities fororder-first,order-last,order-none, and numbered utilities from 1 through 12. You can customize these values by editingtheme.orderortheme.extend.orderin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{order:{'13':'13'}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offordervalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"order-[13]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Ordering flex and grid items",
                        "Using negative values",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/outline-color",
            "title": "Outline Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Outline Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the outline color"
                },
                {
                    "type": "p",
                    "text": "Use theoutline-*utilities to change the color of an element’s outline."
                },
                {
                    "type": "p",
                    "text": "outline-blue-500"
                },
                {
                    "type": "p",
                    "text": "outline-cyan-500"
                },
                {
                    "type": "p",
                    "text": "outline-pink-500"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline outline-offset-2outline-blue-500...\">Button A</button><buttonclass=\"outline outline-offset-2outline-cyan-500...\">Button B</button><buttonclass=\"outline outline-offset-2outline-pink-500...\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s outline color."
                },
                {
                    "type": "p",
                    "text": "outline-blue-500/50"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline-2 outline-blue-500/50...\">Save Changes</button>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline-4 outline-pink-400/[.55]...\"></button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:outline-blue-400to only apply theoutline-blue-400utility onhover."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlinehover:outline-blue-400\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:outline-blue-400to apply theoutline-blue-400utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlinemd:outline-blue-400\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asoutlinecolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just youroutlinecolors by editingtheme.outlineColorortheme.extend.outlineColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offoutline-colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline-[#243c5a]\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the outline color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/outline-offset",
            "title": "Outline Offset - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Outline Offset"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the outline offset"
                },
                {
                    "type": "p",
                    "text": "Use theoutline-*utilities to change the offset of an element’s outline."
                },
                {
                    "type": "p",
                    "text": "outline-offset-0"
                },
                {
                    "type": "p",
                    "text": "outline-offset-2"
                },
                {
                    "type": "p",
                    "text": "outline-offset-4"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlineoutline-offset-0...\">Button A</button><buttonclass=\"outlineoutline-offset-2...\">Button B</button><buttonclass=\"outlineoutline-offset-4...\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:outline-offset-2to only apply theoutline-offset-2utility onhover."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlinehover:outline-offset-2\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:outline-offset-2to apply theoutline-offset-2utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlinemd:outline-offset-2\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can customize theoutline-offset-*utilities by editingtheme.outlineOffsetortheme.extend.outlineOffsetin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{outlineOffset:{3:'3px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offoutline-offsetvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline-offset-[3px]\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the outline offset",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/outline-style",
            "title": "Outline Style - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Outline Style"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the outline style"
                },
                {
                    "type": "p",
                    "text": "Use theoutline-*utilities to change the style of an element’s outline."
                },
                {
                    "type": "p",
                    "text": "outline"
                },
                {
                    "type": "p",
                    "text": "outline-dashed"
                },
                {
                    "type": "p",
                    "text": "outline-dotted"
                },
                {
                    "type": "p",
                    "text": "outline-double"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outlineoutline-2 outline-offset-2 ...\">Button A</button><buttonclass=\"outline-dashedoutline-2 outline-offset-2 ...\">Button B</button><buttonclass=\"outline-dottedoutline-2 outline-offset-2 ...\">Button C</button><buttonclass=\"outline-doubleoutline-3 outline-offset-2 ...\">Button D</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing outlines"
                },
                {
                    "type": "p",
                    "text": "Useoutline-noneto hide the default browser outline on focused elements."
                },
                {
                    "type": "p",
                    "text": "It is highly recommended to apply your own focus styling for accessibility when using this utility."
                },
                {
                    "type": "p",
                    "text": "Focus the input to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"text\"placeholder=\"Default focus style\"class=\"...\"/><inputtype=\"text\"placeholder=\"Custom focus style\"class=\"focus:outline-none focus:ring focus:border-blue-500...\"/>"
                },
                {
                    "type": "p",
                    "text": "Theoutline-noneutility is implemented using a transparent outline under the hood to ensure elements are still visibly focused toWindows high contrast modeusers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:outline-dashedto only apply theoutline-dashedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outlinehover:outline-dashed\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:outline-dashedto apply theoutline-dashedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outlinemd:outline-dashed\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the outline style",
                        "Removing outlines",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/outline-width",
            "title": "Outline Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Outline Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the outline width"
                },
                {
                    "type": "p",
                    "text": "Use theoutline-*utilities to change the width of an element’s outline."
                },
                {
                    "type": "p",
                    "text": "outline-1"
                },
                {
                    "type": "p",
                    "text": "outline-2"
                },
                {
                    "type": "p",
                    "text": "outline-4"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"outline outline-offset-2outline-1...\">Button A</button><buttonclass=\"outline outline-offset-2outline-2...\">Button B</button><buttonclass=\"outline outline-offset-2outline-4...\">Button C</button>"
                },
                {
                    "type": "p",
                    "text": "The default outline width is3px."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:outline-2to only apply theoutline-2utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outlinehover:outline-2\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:outline-2to apply theoutline-2utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outlinemd:outline-2\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can customize theoutline-*utilities by editingtheme.outlineWidthortheme.extend.outlineWidthin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{outlineWidth:{5:'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offoutline-widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outline-[5px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the outline width",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/overflow",
            "title": "Overflow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Overflow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Showing content that overflows"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-visibleutility to prevent content within an element from being clipped. Note that any content that overflows the bounds of the element will then be visible."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-visible...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hiding content that overflows"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-hiddenutility to clip any content within an element that overflows the bounds of that element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-hidden...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling if needed"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-autoutility to add scrollbars to an element in the event that its content overflows the bounds of that element. Unlikeoverflow-scroll, which always shows scrollbars, this utility will only show them if scrolling is necessary."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-auto...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling horizontally if needed"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-x-autoutility to allow horizontal scrolling if needed."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-x-auto...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling vertically if needed"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-y-autoutility to allow vertical scrolling if needed."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-y-autoh-32 ...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling horizontally always"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-x-scrollutility to allow horizontal scrolling and always show scrollbars unless always-visible scrollbars are disabled by the operating system."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-x-scroll...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling vertically always"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-y-scrollutility to allow vertical scrolling and always show scrollbars unless always-visible scrollbars are disabled by the operating system."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-y-scroll...\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scrolling in all directions"
                },
                {
                    "type": "p",
                    "text": "Use theoverflow-scrollutility to add scrollbars to an element. Unlikeoverflow-auto, which only shows scrollbars if they are necessary, this utility always shows them. Note that some operating systems (like macOS) hide unnecessary scrollbars regardless of this setting."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-scroll...\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:overflow-scrollto only apply theoverflow-scrollutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-autohover:overflow-scroll\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:overflow-scrollto apply theoverflow-scrollutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-automd:overflow-scroll\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Showing content that overflows",
                        "Hiding content that overflows",
                        "Scrolling if needed",
                        "Scrolling horizontally if needed",
                        "Scrolling vertically if needed",
                        "Scrolling horizontally always",
                        "Scrolling vertically always",
                        "Scrolling in all directions",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/overscroll-behavior",
            "title": "Overscroll Behavior - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Overscroll Behavior"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Preventing parent overscrolling"
                },
                {
                    "type": "p",
                    "text": "Use theoverscroll-containutility to prevent scrolling in the target area from triggering scrolling in the parent element, but preserve “bounce” effects when scrolling past the end of the container in operating systems that support it."
                },
                {
                    "type": "p",
                    "text": "Well, let me tell you something, funny boy. Y'know that little stamp, the one that says \"New York Public Library\"? Well that may not mean anything to you, but that means a lot to me. One whole hell of a lot."
                },
                {
                    "type": "p",
                    "text": "Sure, go ahead, laugh if you want to. I've seen your type before: Flashy, making the scene, flaunting convention. Yeah, I know what you're thinking. What's this guy making such a big stink about old library books? Well, let me give you a hint, junior."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overscroll-contain...\">Well, let me tell you something, ...</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Preventing overscroll bouncing"
                },
                {
                    "type": "p",
                    "text": "Use theoverscroll-noneutility to prevent scrolling in the target area from triggering scrolling in the parent element, and also prevent “bounce” effects when scrolling past the end of the container."
                },
                {
                    "type": "p",
                    "text": "Well, let me tell you something, funny boy. Y'know that little stamp, the one that says \"New York Public Library\"? Well that may not mean anything to you, but that means a lot to me. One whole hell of a lot."
                },
                {
                    "type": "p",
                    "text": "Sure, go ahead, laugh if you want to. I've seen your type before: Flashy, making the scene, flaunting convention. Yeah, I know what you're thinking. What's this guy making such a big stink about old library books? Well, let me give you a hint, junior."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overscroll-none...\">Well, let me tell you something, ...</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using the default overscroll behavior"
                },
                {
                    "type": "p",
                    "text": "Use theoverscroll-autoutility to make it possible for the user to continue scrolling a parent scroll area when they reach the boundary of the primary scroll area."
                },
                {
                    "type": "p",
                    "text": "Well, let me tell you something, funny boy. Y'know that little stamp, the one that says \"New York Public Library\"? Well that may not mean anything to you, but that means a lot to me. One whole hell of a lot."
                },
                {
                    "type": "p",
                    "text": "Sure, go ahead, laugh if you want to. I've seen your type before: Flashy, making the scene, flaunting convention. Yeah, I know what you're thinking. What's this guy making such a big stink about old library books? Well, let me give you a hint, junior."
                },
                {
                    "type": "p",
                    "text": "Maybe we can live without libraries, people like you and me. Maybe. Sure, we're too old to change the world, but what about that kid, sitting down, opening a book, right now, in a branch at the local library and finding drawings of pee-pees and wee-wees on the Cat in the Hat and the Five Chinese Brothers? Doesn't HE deserve better?"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overscroll-auto...\">Well, let me tell you something, ...</div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:overscroll-containto only apply theoverscroll-containutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<htmlclass=\"overscroll-autofocus:overscroll-contain\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:overscroll-containto apply theoverscroll-containutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<htmlclass=\"overscroll-automd:overscroll-contain\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Preventing parent overscrolling",
                        "Preventing overscroll bouncing",
                        "Using the default overscroll behavior",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/padding",
            "title": "Padding - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Spacing",
                        "Padding"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add padding to a single side"
                },
                {
                    "type": "p",
                    "text": "Use thept-*,pr-*,pb-*, andpl-*utilities to control the padding on one side of an element."
                },
                {
                    "type": "p",
                    "text": "For example,pt-6would add1.5remof padding to the top of an element,pr-4would add1remof padding to the right of an element,pb-8would add2remof padding to the bottom of an element, andpl-2would add0.5remof padding to the left of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"pt-6...\">pt-6</div><divclass=\"pr-4...\">pr-4</div><divclass=\"pb-8...\">pb-8</div><divclass=\"pl-2...\">pl-2</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add horizontal padding"
                },
                {
                    "type": "p",
                    "text": "Use thepx-*utilities to control the horizontal padding of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"px-8...\">px-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add vertical padding"
                },
                {
                    "type": "p",
                    "text": "Use thepy-*utilities to control the vertical padding of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"py-8...\">py-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add padding to all sides"
                },
                {
                    "type": "p",
                    "text": "Use thep-*utilities to control the padding on all sides of an element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"p-8...\">p-8</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use theps-*andpe-*utilities to set thepadding-inline-startandpadding-inline-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"ps-8...\">ps-8</div><divclass=\"pe-8...\">pe-8</div><div><divdir=\"rtl\"><divclass=\"ps-8...\">ps-8</div><divclass=\"pe-8...\">pe-8</div><div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:py-8to only apply thepy-8utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"py-4hover:py-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:py-8to apply thepy-8utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"py-4md:py-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s padding scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the padding scale by editingtheme.paddingortheme.extend.paddingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{padding:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offpaddingvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"p-[5px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Add padding to a single side",
                        "Add horizontal padding",
                        "Add vertical padding",
                        "Add padding to all sides",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/place-content",
            "title": "Place Content - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Place Content"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-centerto pack items in the center of the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-centerh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-startto pack items against the start of the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-starth-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-endto to pack items against the end of the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-endh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space between"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-betweento distribute grid items along the block axis so that that there is an equal amount of space between each row on the block axis."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-betweenh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space around"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-arounddistribute grid items such that there is an equal amount of space around each row on the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-aroundh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Space evenly"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-evenlyto distribute grid items such that they are evenly spaced on the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-evenlyh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Useplace-content-stretchto stretch grid items along their grid areas on the block axis:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-2 gap-4place-content-stretchh-48 ...\"><div>01</div><div>02</div><div>03</div><div>04</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:place-content-centerto only apply theplace-content-centerutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid place-content-starthover:place-content-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:place-content-centerto apply theplace-content-centerutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid place-content-startmd:place-content-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Center",
                        "Start",
                        "End",
                        "Space between",
                        "Space around",
                        "Space evenly",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/place-items",
            "title": "Place Items - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Place Items"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Useplace-items-startto place grid items on the start of their grid areas on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4place-items-start...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Useplace-items-endto place grid items on the end of their grid areas on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4place-items-endh-56 ...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Useplace-items-centerto place grid items on the center of their grid areas on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4place-items-centerh-56 ...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Useplace-items-stretchto stretch items along their grid areas on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4place-items-stretchh-56 ...\"><div>01</div><div>02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:place-items-centerto only apply theplace-items-centerutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid place-items-starthover:place-items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:place-items-centerto apply theplace-items-centerutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid place-items-startmd:place-items-center\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Start",
                        "End",
                        "Center",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/place-self",
            "title": "Place Self - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Flexbox & Grid",
                        "Place Self"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Useplace-self-autoto align an item based on the value of the container’splace-itemsproperty:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4 ...\"><div>01</div><divclass=\"place-self-auto...\">02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Start"
                },
                {
                    "type": "p",
                    "text": "Useplace-self-startto align an item to the start on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4 ...\"><div>01</div><divclass=\"place-self-start...\">02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Center"
                },
                {
                    "type": "p",
                    "text": "Useplace-self-centerto align an item at the center on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4 ...\"><div>01</div><divclass=\"place-self-center...\">02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​End"
                },
                {
                    "type": "p",
                    "text": "Useplace-self-endto align an item to the end on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4 ...\"><div>01</div><divclass=\"place-self-end...\">02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stretch"
                },
                {
                    "type": "p",
                    "text": "Useplace-self-stretchto stretch an item on both axes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-2 ...\"><div>01</div><divclass=\"place-self-stretch...\">02</div><div>03</div><div>04</div><div>05</div><div>06</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:place-self-endto only apply theplace-self-endutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"place-self-starthover:place-self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:place-self-endto apply theplace-self-endutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"place-self-startmd:place-self-end\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Auto",
                        "Start",
                        "Center",
                        "End",
                        "Stretch",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/plugins",
            "title": "Plugins - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Plugins"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overview"
                },
                {
                    "type": "p",
                    "text": "Plugins let you register new styles for Tailwind to inject into the user’s stylesheet using JavaScript instead of CSS."
                },
                {
                    "type": "p",
                    "text": "To get started with your first plugin, import Tailwind’spluginfunction fromtailwindcss/plugin. Then inside yourpluginsarray, call the importedpluginfunction with an anonymous function as the first argument."
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({addUtilities,addComponents,e,config}){// Add your custom styles here}),]}"
                },
                {
                    "type": "p",
                    "text": "Plugin functions receive a single object argument that can bedestructuredinto several helper functions:"
                },
                {
                    "type": "list",
                    "items": [
                        "addUtilities(), for registering new static utility styles",
                        "matchUtilities(), for registering new dynamic utility styles",
                        "addComponents(), for registering new static component styles",
                        "matchComponents(), for registering new dynamic component styles",
                        "addBase(), for registering new base styles",
                        "addVariant(), for registering custom static variants",
                        "matchVariant(), for registering custom dynamic variants",
                        "theme(), for looking up values in the user’s theme configuration",
                        "config(), for looking up values in the user’s Tailwind configuration",
                        "corePlugins(), for checking if a core plugin is enabled",
                        "e(), for manually escaping strings meant to be used in class names"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Official plugins"
                },
                {
                    "type": "p",
                    "text": "We’ve developed a handful of official plugins for popular features that for one reason or another don’t belong in core yet."
                },
                {
                    "type": "p",
                    "text": "Plugins can be added to your project by installing them via npm, then adding them to yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...plugins:[require('@tailwindcss/typography'),require('@tailwindcss/forms'),require('@tailwindcss/aspect-ratio'),require('@tailwindcss/container-queries'),]}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Typography"
                },
                {
                    "type": "p",
                    "text": "The@tailwindcss/typographyplugin adds a set ofproseclasses that can be used to quickly add sensible typographic styles to content blocks that come from sources like markdown or a CMS database."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose lg:prose-xl\"><h1>Garlic bread with cheese: What the science tells us</h1><p>For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.</p><p>But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.</p><!-- ... --></article>"
                },
                {
                    "type": "p",
                    "text": "Learn more about the typography plugin →"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Forms"
                },
                {
                    "type": "p",
                    "text": "The@tailwindcss/formsplugin adds an opinionated form reset layer that makes it easier to style form elements with utility classes."
                },
                {
                    "type": "code",
                    "code": "<!-- You can actually customize padding on a select element: --><selectclass=\"px-4 py-3 rounded-full\"><!-- ... --></select><!-- Or change a checkbox color using text color utilities: --><inputtype=\"checkbox\"class=\"rounded text-pink-500\"/>"
                },
                {
                    "type": "p",
                    "text": "Learn more about the forms plugin →"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Aspect ratio"
                },
                {
                    "type": "p",
                    "text": "The@tailwindcss/aspect-ratioplugin is an alternative to nativeaspect-ratiosupport that works in older browsers, and addsaspect-w-*andaspect-h-*classes that can be combined to give an element a fixed aspect ratio."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"aspect-w-16 aspect-h-9\"><iframesrc=\"https://www.youtube.com/embed/dQw4w9WgXcQ\"frameborder=\"0\"allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"allowfullscreen></iframe></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about the aspect ratio plugin →"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Container queries"
                },
                {
                    "type": "p",
                    "text": "The@tailwindcss/container-queriesplugin adds new@{size}variants like@smand@mdthat let you style an element based on the dimensions of a parent marked with@containerinstead of the viewport."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"@container\"><divclass=\"@lg:text-sky-400\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about the container queries plugin →"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Adding utilities"
                },
                {
                    "type": "p",
                    "text": "TheaddUtilitiesandmatchUtilitiesfunctions allow you to register new styles in Tailwind’sutilitieslayer."
                },
                {
                    "type": "p",
                    "text": "Like with the utilities Tailwind includes by default, utilities added by a plugin will only be included in the generated CSS if they are actually being used in the project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Static utilities"
                },
                {
                    "type": "p",
                    "text": "Use theaddUtilitiesfunction to register simple static utilities that don’t support user-provided values:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({addUtilities}){addUtilities({'.content-auto':{'content-visibility':'auto',},'.content-hidden':{'content-visibility':'hidden',},'.content-visible':{'content-visibility':'visible',},})})]}"
                },
                {
                    "type": "p",
                    "text": "Learn more about how to represent your styles in JavaScript in theCSS-in-JS syntaxreference."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dynamic utilities"
                },
                {
                    "type": "p",
                    "text": "Use thematchUtilitiesfunction to register utilities that map to values defined in the user’sthemeconfiguration:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={theme:{tabSize:{1:'1',2:'2',4:'4',8:'8',}},plugins:[plugin(function({matchUtilities,theme}){matchUtilities({tab:(value)=>({tabSize:value}),},{values:theme('tabSize')})})]}"
                },
                {
                    "type": "p",
                    "text": "Utilities defined this way also supportarbitrary values, which means you can use values not present in the theme using square bracket notation:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"tab-[13]\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefix and important"
                },
                {
                    "type": "p",
                    "text": "By default, plugin utilities automatically respect the user’sprefixandimportantpreferences."
                },
                {
                    "type": "p",
                    "text": "That means that given this Tailwind configuration:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={prefix:'tw-',important:true,// ...}"
                },
                {
                    "type": "p",
                    "text": "…the example plugin above would generate the following CSS:"
                },
                {
                    "type": "code",
                    "code": ".tw-content-auto{content-visibility:auto!important;}.tw-content-hidden{content-visibility:hidden!important;}.tw-content-visible{content-visibility:visible!important;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using with modifiers"
                },
                {
                    "type": "p",
                    "text": "Any custom utilities added usingaddUtilitiescan automatically be used with modifiers:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"content-auto lg:content-visible\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theHover, Focus, and Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Providing default values"
                },
                {
                    "type": "p",
                    "text": "Utility plugins can provide default values by including a configuration object as the second argument to thepluginfunction:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports=plugin(function({matchUtilities,theme}){matchUtilities({tab:(value)=>({tabSize:value}),},{values:theme('tabSize')})},{theme:{tabSize:{1:'1',2:'2',4:'4',8:'8',}}})"
                },
                {
                    "type": "p",
                    "text": "These values behave just like the values in the default configuration, and can be overridden or extended by the end user."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Adding components"
                },
                {
                    "type": "p",
                    "text": "TheaddComponentsfunction allows you to register new styles in Tailwind’scomponentslayer."
                },
                {
                    "type": "p",
                    "text": "Use it to add more opinionated, complex classes like buttons, form controls, alerts, etc; the sort of pre-built components you often see in other frameworks that you might need to override with utility classes."
                },
                {
                    "type": "p",
                    "text": "To add new component styles from a plugin, calladdComponents, passing in your styles usingCSS-in-JS syntax:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({addComponents}){addComponents({'.btn':{padding:'.5rem 1rem',borderRadius:'.25rem',fontWeight:'600',},'.btn-blue':{backgroundColor:'#3490dc',color:'#fff','&:hover':{backgroundColor:'#2779bd'},},'.btn-red':{backgroundColor:'#e3342f',color:'#fff','&:hover':{backgroundColor:'#cc1f1a'},},})})]}"
                },
                {
                    "type": "p",
                    "text": "Like with other component classes in Tailwind, component classes added by a plugin will only be included in the generated CSS if they are actually being used in the project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefix and important"
                },
                {
                    "type": "p",
                    "text": "By default, component classes automatically respect the user’sprefixpreference, butthey are not affectedby the user’simportantpreference."
                },
                {
                    "type": "p",
                    "text": "That means that given this Tailwind configuration:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={prefix:'tw-',important:true,// ...}"
                },
                {
                    "type": "p",
                    "text": "…the example plugin above would generate the following CSS:"
                },
                {
                    "type": "code",
                    "code": ".tw-btn{padding:.5rem1rem;border-radius:.25rem;font-weight:600;}.tw-btn-blue{background-color:#3490dc;color:#fff;}.tw-btn-blue:hover{background-color:#2779bd;}.tw-btn-red{background-color:#e3342f;color:#fff;}.tw-btn-red:hover{background-color:#cc1f1a;}"
                },
                {
                    "type": "p",
                    "text": "Although there’s rarely a good reason to make component declarations important, if you really need to do it you can always add!importantmanually:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({addComponents}){addComponents({'.btn':{padding:'.5rem 1rem !important',borderRadius:'.25rem !important',fontWeight:'600 !important',},// ...})})]}"
                },
                {
                    "type": "p",
                    "text": "All classes in a selector will be prefixed by default, so if you add a more complex style like:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={prefix:'tw-',plugins:[plugin(function({addComponents}){constcomponents={// ...'.navbar-inverse a.nav-link':{color:'#fff',}}addComponents(components)})]}"
                },
                {
                    "type": "p",
                    "text": "…the following CSS would be generated:"
                },
                {
                    "type": "code",
                    "code": ".tw-navbar-inversea.tw-nav-link{color:#fff;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using with modifiers"
                },
                {
                    "type": "p",
                    "text": "Any component classes added usingaddComponentscan automatically be used with modifiers:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"btn md:btn-lg\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more in theHover, Focus, and Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Adding base styles"
                },
                {
                    "type": "p",
                    "text": "TheaddBasefunction allows you to register new styles in Tailwind’sbaselayer. Use it to add things like base typography styles, opinionated global resets, or@font-facerules."
                },
                {
                    "type": "p",
                    "text": "To add new base styles from a plugin, calladdBase, passing in your styles usingCSS-in-JS syntax:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({addBase,theme}){addBase({'h1':{fontSize:theme('fontSize.2xl')},'h2':{fontSize:theme('fontSize.xl')},'h3':{fontSize:theme('fontSize.lg')},})})]}"
                },
                {
                    "type": "p",
                    "text": "Since base styles are meant to target bare selectors likedivorh1, they do not respect the user’sprefixorimportantconfiguration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Adding variants"
                },
                {
                    "type": "p",
                    "text": "TheaddVariantandmatchVariantfunctions allow you to register your own custommodifiersthat can be used just like built-in variants likehover,focus, orsupports."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Static variants"
                },
                {
                    "type": "p",
                    "text": "Use theaddVariantfunction for simple custom variants, passing in the name of your custom variant, and a format string that represents how the selector should be modified."
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addVariant}){addVariant('optional','&:optional')addVariant('hocus',['&:hover','&:focus'])addVariant('inverted-colors','@media (inverted-colors: inverted)')})]}"
                },
                {
                    "type": "p",
                    "text": "The first argument is the modifier name that users will use in their HTML, so the above example would make it possible to write classes like these:"
                },
                {
                    "type": "code",
                    "code": "<formclass=\"flexinverted-colors:outline...\"><inputclass=\"optional:border-gray-300...\"/><buttonclass=\"bg-blue-500hocus:bg-blue-600\">...</button></form>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dynamic variants"
                },
                {
                    "type": "p",
                    "text": "Use thematchVariantfunction to register new parameterized variants like the built-insupports-*,data-*, andaria-*variants:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={plugins:[plugin(function({matchVariant}){matchVariant('nth',(value)=>{return`&:nth-child(${value})`;},{values:{1:'1',2:'2',3:'3',}});})]}"
                },
                {
                    "type": "p",
                    "text": "Variants defined withmatchVariantalso support arbitrary values using square bracket notation:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"nth-[3n+1]:bg-blue-500...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Use thesortoption to control the source order of the generated CSS if needed to avoid precedence issues with other values that come from the same variant:"
                },
                {
                    "type": "code",
                    "code": "matchVariant(\"min\",(value)=>`@media (min-width:${value})`,{sort(a,z){returnparseInt(a.value)-parseInt(z.value);},});"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Parent and sibling states"
                },
                {
                    "type": "p",
                    "text": "Your custom modifiers won’t automatically work with Tailwind’sparentandsiblingstate modifiers."
                },
                {
                    "type": "p",
                    "text": "To support thegroup-*andpeer-*versions of your own custom modifiers, register them as separate variants using the special:mergedirective to ensure the.groupand.peerclasses only appear once in the final selector."
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addVariant}){addVariant('optional','&:optional')addVariant('group-optional',':merge(.group):optional &')addVariant('peer-optional',':merge(.peer):optional ~ &')})]}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extending the configuration"
                },
                {
                    "type": "p",
                    "text": "Plugins can merge their own set of configuration values into the user’stailwind.config.jsconfiguration by providing an object as the second argument to thepluginfunction:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports=plugin(function({matchUtilities,theme}){matchUtilities({tab:(value)=>({tabSize:value}),},{values:theme('tabSize')})},{theme:{tabSize:{1:'1',2:'2',4:'4',8:'8',}}})"
                },
                {
                    "type": "p",
                    "text": "This can be useful for things like providing defaultthemevalues for the classes your plugin generates."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Exposing options"
                },
                {
                    "type": "p",
                    "text": "Sometimes it makes sense for a plugin to be configurable in a way that doesn’t really belong undertheme, like perhaps you want users to be able to customize the class name your plugin uses."
                },
                {
                    "type": "p",
                    "text": "For cases like this, you can useplugin.withOptionsto define a plugin that can be invoked with a configuration object. This API is similar to the regularpluginAPI, except each argument should be a function that receives the user’soptionsand returns the value that you would have normally passed in using the regular API:"
                },
                {
                    "type": "code",
                    "code": "constplugin=require('tailwindcss/plugin')module.exports=plugin.withOptions(function(options={}){returnfunction({addComponents}){constclassName=options.className??'markdown'addComponents({[`.${className}`]:{// ...}})}},function(options){return{theme:{markdown:{// ...}},}})"
                },
                {
                    "type": "p",
                    "text": "The user would invoke your plugin passing along their options when registering it in theirpluginsconfiguration:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{// ...},plugins:[require('./plugins/markdown.js')({className:'wysiwyg'})],}"
                },
                {
                    "type": "p",
                    "text": "The user can also register plugins created this way normally without invoking them if they don’t need to pass in any custom options:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{// ...},plugins:[require('./plugins/markdown.js')],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​CSS-in-JS syntax"
                },
                {
                    "type": "p",
                    "text": "Tailwind’s plugin system expects CSS rules written as JavaScript objects, using the same sort of syntax you might recognize from CSS-in-JS libraries likeEmotion, powered bypostcss-jsunder-the-hood."
                },
                {
                    "type": "p",
                    "text": "Consider this simple CSS rule:"
                },
                {
                    "type": "code",
                    "code": ".card{background-color:#fff;border-radius:.25rem;box-shadow:02px4pxrgba(0,0,0,0.2);}"
                },
                {
                    "type": "p",
                    "text": "Translating this to a CSS-in-JS object would look like this:"
                },
                {
                    "type": "code",
                    "code": "addComponents({'.card':{'background-color':'#fff','border-radius':'.25rem','box-shadow':'0 2px 4px rgba(0,0,0,0.2)',}})"
                },
                {
                    "type": "p",
                    "text": "For convenience, property names can also be written in camelCase and will be automatically translated to dash-case:"
                },
                {
                    "type": "code",
                    "code": "addComponents({'.card':{backgroundColor:'#fff',borderRadius:'.25rem',boxShadow:'0 2px 4px rgba(0,0,0,0.2)',}})"
                },
                {
                    "type": "p",
                    "text": "Nesting is also supported (powered bypostcss-nested), using the same syntax you might be familiar with from Sass or Less:"
                },
                {
                    "type": "code",
                    "code": "addComponents({'.card':{backgroundColor:'#fff',borderRadius:'.25rem',boxShadow:'0 2px 4px rgba(0,0,0,0.2)','&:hover':{boxShadow:'0 10px 15px rgba(0,0,0,0.2)',},'@media (min-width: 500px)':{borderRadius:'.5rem',}}})"
                },
                {
                    "type": "p",
                    "text": "Multiple rules can be defined in the same object:"
                },
                {
                    "type": "code",
                    "code": "addComponents({'.btn':{padding:'.5rem 1rem',borderRadius:'.25rem',fontWeight:'600',},'.btn-blue':{backgroundColor:'#3490dc',color:'#fff','&:hover':{backgroundColor:'#2779bd'},},'.btn-red':{backgroundColor:'#e3342f',color:'#fff','&:hover':{backgroundColor:'#cc1f1a'},},})"
                },
                {
                    "type": "p",
                    "text": "…or as an array of objects in case you need to repeat the same key:"
                },
                {
                    "type": "code",
                    "code": "addComponents([{'@media (min-width: 500px)':{// ...}},{'@media (min-width: 500px)':{// ...}},{'@media (min-width: 500px)':{// ...}},])"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Official plugins",
                        "Typography",
                        "Forms",
                        "Aspect ratio",
                        "Container queries",
                        "Adding utilities",
                        "Static utilities",
                        "Dynamic utilities",
                        "Prefix and important",
                        "Using with modifiers",
                        "Providing default values",
                        "Adding components",
                        "Prefix and important",
                        "Using with modifiers",
                        "Adding base styles",
                        "Adding variants",
                        "Static variants",
                        "Dynamic variants",
                        "Parent and sibling states",
                        "Extending the configuration",
                        "Exposing options",
                        "CSS-in-JS syntax"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/pointer-events",
            "title": "Pointer Events - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Pointer Events"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling pointer event behavior"
                },
                {
                    "type": "p",
                    "text": "Usepointer-events-autoto revert to the default browser behavior for pointer events (like:hoverandclick)."
                },
                {
                    "type": "p",
                    "text": "Usepointer-events-noneto make an element ignore pointer events. The pointer events will still trigger on child elements and pass-through to elements that are “beneath” the target."
                },
                {
                    "type": "p",
                    "text": "Try clicking the search icons to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "pointer-events-auto"
                },
                {
                    "type": "p",
                    "text": "pointer-events-none"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relative ...\"><divclass=\"absolutepointer-events-auto...\"><svgclass=\"absolute text-slate-400 h-5 w-5\"viewBox=\"0 0 20 20\"fill=\"currentColor\"><pathfill-rule=\"evenodd\"d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"clip-rule=\"evenodd\"/></svg></div><inputtype=\"text\"placeholder=\"Search\"class=\"...\"></div><divclass=\"relative ...\"><divclass=\"absolutepointer-events-none...\"><svgclass=\"absolute text-slate-400 h-5 w-5\"viewBox=\"0 0 20 20\"fill=\"currentColor\"><pathfill-rule=\"evenodd\"d=\"M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z\"clip-rule=\"evenodd\"/></svg></div><inputtype=\"text\"placeholder=\"Search\"class=\"...\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:pointer-events-autoto only apply thepointer-events-autoutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"pointer-events-nonefocus:pointer-events-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:pointer-events-autoto apply thepointer-events-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"pointer-events-nonemd:pointer-events-auto\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling pointer event behavior",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/position",
            "title": "Position - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Position"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Statically positioning elements"
                },
                {
                    "type": "p",
                    "text": "Use thestaticutility to position an element according to the normal flow of the document."
                },
                {
                    "type": "p",
                    "text": "Anyoffsetswill be ignored and the element will not act as a position reference for absolutely positioned children."
                },
                {
                    "type": "p",
                    "text": "Static parent"
                },
                {
                    "type": "p",
                    "text": "Absolute child"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"static...\"><p>Static parent</p><divclass=\"absolute bottom-0 left-0 ...\"><p>Absolute child</p></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Relatively positioning elements"
                },
                {
                    "type": "p",
                    "text": "Use therelativeutility to position an element according to the normal flow of the document."
                },
                {
                    "type": "p",
                    "text": "Anyoffsetsare calculated relative to the element’s normal position and the elementwillact as a position reference for absolutely positioned children."
                },
                {
                    "type": "p",
                    "text": "Relative parent"
                },
                {
                    "type": "p",
                    "text": "Absolute child"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relative...\"><p>Relative parent</p><divclass=\"absolute bottom-0 left-0 ...\"><p>Absolute child</p></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Absolutely positioning elements"
                },
                {
                    "type": "p",
                    "text": "Use theabsoluteutility to position an elementoutsideof the normal flow of the document, causing neighboring elements to act as if the element doesn’t exist."
                },
                {
                    "type": "p",
                    "text": "Anyoffsetsare calculated relative to the nearest parent that has a position other thanstatic, and the elementwillact as a position reference for other absolutely positioned children."
                },
                {
                    "type": "p",
                    "text": "With static positioning"
                },
                {
                    "type": "p",
                    "text": "Relative parent"
                },
                {
                    "type": "p",
                    "text": "Static parent"
                },
                {
                    "type": "p",
                    "text": "Static child"
                },
                {
                    "type": "p",
                    "text": "Static sibling"
                },
                {
                    "type": "p",
                    "text": "With absolute positioning"
                },
                {
                    "type": "p",
                    "text": "Relative parent"
                },
                {
                    "type": "p",
                    "text": "Static parent"
                },
                {
                    "type": "p",
                    "text": "Absolute child"
                },
                {
                    "type": "p",
                    "text": "Static sibling"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"static ...\"><!-- Static parent --><divclass=\"static ...\"><p>Static child</p></div><divclass=\"inline-block ...\"><p>Static sibling</p></div><!-- Static parent --><divclass=\"absolute...\"><p>Absolute child</p></div><divclass=\"inline-block ...\"><p>Static sibling</p></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed positioning elements"
                },
                {
                    "type": "p",
                    "text": "Use thefixedutility to position an element relative to the browser window."
                },
                {
                    "type": "p",
                    "text": "Anyoffsetsare calculated relative to the viewport and the elementwillact as a position reference for absolutely positioned children."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relative\"><divclass=\"fixedtop-0 left-0 right-0\">Contacts</div><div><div><imgsrc=\"...\"/><strong>Andrew Alfred</strong></div><div><imgsrc=\"...\"/><strong>Debra Houston</strong></div><!-- ... --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Sticky positioning elements"
                },
                {
                    "type": "p",
                    "text": "Use thestickyutility to position an element asrelativeuntil it crosses a specified threshold, then treat it asfixeduntil its parent is off screen."
                },
                {
                    "type": "p",
                    "text": "Anyoffsetsare calculated relative to the element’s normal position and the elementwillact as a position reference for absolutely positioned children."
                },
                {
                    "type": "code",
                    "code": "<div><div><divclass=\"sticky top-0...\">A</div><div><div><imgsrc=\"...\"/><strong>Andrew Alfred</strong></div><div><imgsrc=\"...\"/><strong>Aisha Houston</strong></div><!-- ... --></div></div><div><divclass=\"sticky top-0\">B</div><div><div><imgsrc=\"...\"/><strong>Bob Alfred</strong></div><!-- ... --></div></div><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:absoluteto only apply theabsoluteutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relativehover:absolute\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:absoluteto apply theabsoluteutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relativemd:absolute\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Statically positioning elements",
                        "Relatively positioning elements",
                        "Absolutely positioning elements",
                        "Fixed positioning elements",
                        "Sticky positioning elements",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/preflight",
            "title": "Preflight - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Base Styles",
                        "Preflight"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overview"
                },
                {
                    "type": "p",
                    "text": "Built on top ofmodern-normalize, Preflight is a set of base styles for Tailwind projects that are designed to smooth over cross-browser inconsistencies and make it easier for you to work within the constraints of your design system."
                },
                {
                    "type": "p",
                    "text": "Tailwind automatically injects these styles when you include@tailwind basein your CSS:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;/* Preflight will be injected here */@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "While most of the styles in Preflight are meant to go unnoticed — they simply make things behave more like you’d expect them to — some are more opinionated and can be surprising when you first encounter them."
                },
                {
                    "type": "p",
                    "text": "For a complete reference of all the styles applied by Preflight,see the stylesheet."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Default margins are removed"
                },
                {
                    "type": "p",
                    "text": "Preflight removes all of the default margins from elements like headings, blockquotes, paragraphs, etc."
                },
                {
                    "type": "code",
                    "code": "blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0;}"
                },
                {
                    "type": "p",
                    "text": "This makes it harder to accidentally rely on margin values applied by the user-agent stylesheet that are not part of your spacing scale."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Headings are unstyled"
                },
                {
                    "type": "p",
                    "text": "All heading elements are completely unstyled by default, and have the same font-size and font-weight as normal text."
                },
                {
                    "type": "code",
                    "code": "h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit;}"
                },
                {
                    "type": "p",
                    "text": "The reason for this is two-fold:"
                },
                {
                    "type": "list",
                    "items": [
                        "It helps you avoid accidentally deviating from your type scale. By default, browsers assign sizes to headings that don’t exist in Tailwind’s default type scale, and aren’t guaranteed to exist in your own type scale.",
                        "In UI development, headings should often be visually de-emphasized. Making headings unstyled by default means any styling you apply to headings happens consciously and deliberately."
                    ]
                },
                {
                    "type": "p",
                    "text": "You can always add default header styles to your project byadding your own base styles."
                },
                {
                    "type": "p",
                    "text": "If you’d like to selectively introduce sensible default heading styles into article-style parts of a page, we recommend the@tailwindcss/typography plugin."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Lists are unstyled"
                },
                {
                    "type": "p",
                    "text": "Ordered and unordered lists are unstyled by default, with no bullets/numbers and no margin or padding."
                },
                {
                    "type": "code",
                    "code": "ol,ul{list-style:none;margin:0;padding:0;}"
                },
                {
                    "type": "p",
                    "text": "If you’d like to style a list, you can do so using thelist-style-typeandlist-style-positionutilities:"
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"list-disc list-inside\"><li>One</li><li>Two</li><li>Three</li></ul>"
                },
                {
                    "type": "p",
                    "text": "You can always add default list styles to your project byadding your own base styles."
                },
                {
                    "type": "p",
                    "text": "If you’d like to selectively introduce default list styles into article-style parts of a page, we recommend the@tailwindcss/typography plugin."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Accessibility considerations"
                },
                {
                    "type": "p",
                    "text": "Unstyled lists arenot announced as lists by VoiceOver. If your content is truly a list but you would like to keep it unstyled,add a “list” roleto the element:"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"><li>One</li><li>Two</li><li>Three</li></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Images are block-level"
                },
                {
                    "type": "p",
                    "text": "Images and other replaced elements (likesvg,video,canvas, and others) aredisplay: blockby default."
                },
                {
                    "type": "code",
                    "code": "img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle;}"
                },
                {
                    "type": "p",
                    "text": "This helps to avoid unexpected alignment issues that you often run into using the browser default ofdisplay: inline."
                },
                {
                    "type": "p",
                    "text": "If you ever need to make one of these elementsinlineinstead ofblock, simply use theinlineutility:"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"inline\"src=\"...\"alt=\"...\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Images are constrained to the parent width"
                },
                {
                    "type": "p",
                    "text": "Images and videos are constrained to the parent width in a way that preserves their intrinsic aspect ratio."
                },
                {
                    "type": "code",
                    "code": "img,video{max-width:100%;height:auto;}"
                },
                {
                    "type": "p",
                    "text": "This prevents them from overflowing their containers and makes them responsive by default. If you ever need to override this behavior, use themax-w-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"max-w-none\"src=\"...\"alt=\"...\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Border styles are reset globally"
                },
                {
                    "type": "p",
                    "text": "In order to make it easy to add a border by simply adding theborderclass, Tailwind overrides the default border styles for all elements with the following rules:"
                },
                {
                    "type": "code",
                    "code": "*,::before,::after{border-width:0;border-style:solid;border-color:theme('borderColor.DEFAULT',currentColor);}"
                },
                {
                    "type": "p",
                    "text": "Since theborderclass only sets theborder-widthproperty, this reset ensures that adding that class always adds a solid 1px border using your configured default border color."
                },
                {
                    "type": "p",
                    "text": "This can cause some unexpected results when integrating certain third-party libraries, likeGoogle mapsfor example."
                },
                {
                    "type": "p",
                    "text": "When you run into situations like this, you can work around them by overriding the Preflight styles with your own custom CSS:"
                },
                {
                    "type": "code",
                    "code": ".google-map*{border-style:none;}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extending Preflight"
                },
                {
                    "type": "p",
                    "text": "If you’d like to add your own base styles on top of Preflight, simply add them to your CSS using the@layer basedirective:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@layerbase{h1{@applytext-2xl;}h2{@applytext-xl;}h3{@applytext-lg;}a{@applytext-blue-600 underline;}}@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "p",
                    "text": "Learn more in theadding base styles documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Disabling Preflight"
                },
                {
                    "type": "p",
                    "text": "If you’d like to completely disable Preflight — perhaps because you’re integrating Tailwind into an existing project or because you’d like to provide your own base styles — all you need to do is setpreflighttofalsein thecorePluginssection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={corePlugins:{preflight:false,}}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Default margins are removed",
                        "Headings are unstyled",
                        "Lists are unstyled",
                        "Accessibility considerations",
                        "Images are block-level",
                        "Images are constrained to the parent width",
                        "Border styles are reset globally",
                        "Extending Preflight",
                        "Disabling Preflight"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/presets",
            "title": "Presets - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Presets"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, any configuration you add in your owntailwind.config.jsfile is intelligently merged with thedefault configuration, with your own configuration acting as a set of overrides and extensions."
                },
                {
                    "type": "p",
                    "text": "Thepresetsoption lets you specify adifferentconfiguration to use as your base, making it easy to package up a set of customizations that you’d like to reuse across projects."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('@acmecorp/tailwind-base')],// ...}"
                },
                {
                    "type": "p",
                    "text": "This can be very useful for teams that manage multiple Tailwind projects for the same brand where they want a single source of truth for colors, fonts, and other common customizations."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Creating a preset"
                },
                {
                    "type": "p",
                    "text": "Presets are just regular Tailwind configuration objects, taking the exact same shape as the configuration you would add in yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "// Example presetmodule.exports={theme:{colors:{blue:{light:'#85d7ff',DEFAULT:'#1fb6ff',dark:'#009eeb',},pink:{light:'#ff7ce5',DEFAULT:'#ff49db',dark:'#ff16d1',},gray:{darkest:'#1f2d3d',dark:'#3c4858',DEFAULT:'#c0ccda',light:'#e0e6ed',lightest:'#f9fafc',}},fontFamily:{sans:['Graphik','sans-serif'],},extend:{flexGrow:{2:'2',3:'3',},zIndex:{60:'60',70:'70',80:'80',90:'90',100:'100',},}},plugins:[require('@tailwindcss/typography'),require('@tailwindcss/aspect-ratio'),],}"
                },
                {
                    "type": "p",
                    "text": "As you can see, presets can contain all of the configuration options you’re used to, including theme overrides and extensions, adding plugins, configuring a prefix, and so on. Read abouthow configurations are mergedfor more details."
                },
                {
                    "type": "p",
                    "text": "Assuming this preset was saved at./my-preset.js, you would use it by adding it to thetailwind.config.jsfile in your actual project under thepresetskey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('./my-preset.js')],// Customizations specific to this project would go heretheme:{extend:{minHeight:{48:'12rem',}}},}"
                },
                {
                    "type": "p",
                    "text": "By default, presets themselves extend Tailwind’sdefault configurationjust like your own configuration would. If you’d like to create a preset that completely replaces the default configuration, include an emptypresetskey in the preset itself:"
                },
                {
                    "type": "code",
                    "code": "// Example presetmodule.exports={presets:[],theme:{// ...},plugins:[// ...],}"
                },
                {
                    "type": "p",
                    "text": "For more information, read aboutdisabling the default configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Merging logic in-depth"
                },
                {
                    "type": "p",
                    "text": "Project-specific configurations (those found in yourtailwind.config.jsfile) are merged against presets the same way they are merged against the default configuration."
                },
                {
                    "type": "p",
                    "text": "The following options intailwind.config.jssimplyreplacethe same option if present in a preset:"
                },
                {
                    "type": "list",
                    "items": [
                        "content",
                        "darkMode",
                        "prefix",
                        "important",
                        "variantOrder",
                        "separator",
                        "safelist"
                    ]
                },
                {
                    "type": "p",
                    "text": "The remaining options are each carefully merged in the way that makes the most sense for that option, explained in more detail below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Theme"
                },
                {
                    "type": "p",
                    "text": "Thethemeobject is merged shallowly, with top-level keys intailwind.config.jsreplacing the same top-level keys in any presets. The exception to this is theextendkey, which is collected across all configurations and applied on top of the rest of the theme configuration."
                },
                {
                    "type": "p",
                    "text": "Learn more about how thethemeoption works in thetheme configuration documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Presets"
                },
                {
                    "type": "p",
                    "text": "Thepresetsarray is merged across configurations, allowing presets to include their own presets, which can also include their own presets."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Plugins"
                },
                {
                    "type": "p",
                    "text": "Thepluginsarray is merged across configurations to make it possible for a preset to register plugins while also allowing you to add additional plugins at the project-level."
                },
                {
                    "type": "p",
                    "text": "This means it’s not possible to disable a plugin that has been added by a preset. If you find yourself wanting to disable a plugin in a preset, it’s a sign that you should probably remove that plugin from the preset and include it on a project-by-project basis instead, orsplit your preset into two presets."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Core plugins"
                },
                {
                    "type": "p",
                    "text": "ThecorePluginsoption behaves differently depending on whether you configure it as an object or as an array."
                },
                {
                    "type": "p",
                    "text": "If you configurecorePluginsas an object, it is merged across configurations."
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...corePlugins:{float:false,},}"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('./my-preset.js'),],// This configuration will be mergedcorePlugins:{cursor:false}}"
                },
                {
                    "type": "p",
                    "text": "If you configurecorePluginsas an array, it replaces anycorePluginsconfiguration provided by your configured preset(s)."
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...corePlugins:{float:false,},}"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('./example-preset.js'),],// This will replace the configuration in the presetcorePlugins:['float','padding','margin']}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extending multiple presets"
                },
                {
                    "type": "p",
                    "text": "Thepresetsoption is an array and can accept multiple presets. This is useful if you want to split your reusable customizations up into composable chunks that can be imported independently."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('@acmecorp/tailwind-colors'),require('@acmecorp/tailwind-fonts'),require('@acmecorp/tailwind-spacing'),]}"
                },
                {
                    "type": "p",
                    "text": "When adding multiple presets, it’s important to note that if they overlap in any way, they are resolved the same way your own customizations are resolved against a preset, and the last configuration wins."
                },
                {
                    "type": "p",
                    "text": "For example, if both of these configurations provided a custom color palette (and were not usingextend), the color palette fromconfiguration-bwould be used:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('@acmecorp/configuration-a'),require('@acmecorp/configuration-b'),]}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Disabling the default configuration"
                },
                {
                    "type": "p",
                    "text": "If you’d like to completely disable the default configuration and start with no base configuration at all, setpresetsto an empty array:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[],// ...}"
                },
                {
                    "type": "p",
                    "text": "This will completely disable all of Tailwind’s defaults, so no colors, font families, font sizes, spacing values, etc. will be generated at all."
                },
                {
                    "type": "p",
                    "text": "You can also do this from within a preset if you’d like your preset to provide a complete design system on its own that doesn’t extend Tailwind’s defaults:"
                },
                {
                    "type": "code",
                    "code": "module.exports={presets:[],// ...}"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={presets:[require('./my-preset.js')],// ...}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Creating a preset",
                        "Merging logic in-depth",
                        "Theme",
                        "Presets",
                        "Plugins",
                        "Core plugins",
                        "Extending multiple presets",
                        "Disabling the default configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/pseudo-class-variants",
            "title": "Handling Hover, Focus, and Other States - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Handling Hover, Focus, and Other States"
                    ]
                },
                {
                    "type": "p",
                    "text": "Every utility class in Tailwind can be appliedconditionallyby adding a modifier to the beginning of the class name that describes the condition you want to target."
                },
                {
                    "type": "p",
                    "text": "For example, to apply thebg-sky-700class on hover, use thehover:bg-sky-700class:"
                },
                {
                    "type": "p",
                    "text": "Hover over this button to see the background color change"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-sky-500hover:bg-sky-700...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "When writing CSS the traditional way, a single class name would do different things based on the current state."
                },
                {
                    "type": "p",
                    "text": "Traditionally the same class name applies different styles on hover"
                },
                {
                    "type": "code",
                    "code": ".btn-primary{background-color:#0ea5e9;}.btn-primary:hover{background-color:#0369a1;}"
                },
                {
                    "type": "p",
                    "text": "In Tailwind, rather than adding the styles for a hover state to an existing class, you add another class to the element thatonlydoes something on hover."
                },
                {
                    "type": "p",
                    "text": "In Tailwind, separate classes are used for the default state and the hover state"
                },
                {
                    "type": "code",
                    "code": ".bg-sky-500{background-color:#0ea5e9;}.hover\\:bg-sky-700:hover{background-color:#0369a1;}"
                },
                {
                    "type": "p",
                    "text": "Notice howhover:bg-sky-700onlydefines styles for the:hoverstate? It does nothing by default, but as soon as you hover over an element with that class, the background color will change tosky-700."
                },
                {
                    "type": "p",
                    "text": "This is what we mean when we say a utility class can be appliedconditionally— by using modifiers you can control exactly how your design behaves in different states, without ever leaving your HTML."
                },
                {
                    "type": "p",
                    "text": "Tailwind includes modifiers for just about everything you’ll ever need, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Pseudo-classes, like:hover,:focus,:first-child, and:required",
                        "Pseudo-elements, like::before,::after,::placeholder, and::selection",
                        "Media and feature queries, like responsive breakpoints, dark mode, andprefers-reduced-motion",
                        "Attribute selectors, like[dir=\"rtl\"]and[open]"
                    ]
                },
                {
                    "type": "p",
                    "text": "These modifiers can even bestackedto target more specific situations, for example changing the background color in dark mode, at the medium breakpoint, on hover:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"dark:md:hover:bg-fuchsia-600...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "In this guide you’ll learn about every modifier available in the framework, how to use them with your own custom classes, and even how to create your own."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Pseudo-classes"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and active"
                },
                {
                    "type": "p",
                    "text": "Style elements on hover, focus, and active using thehover,focus, andactivemodifiers:"
                },
                {
                    "type": "p",
                    "text": "Try interacting with this button to see the hover, focus, and active states"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-violet-500hover:bg-violet-600active:bg-violet-700focus:outline-none focus:ring focus:ring-violet-300...\">Save changes</button>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other interactive states like:visited,:focus-within,:focus-visible, and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​First, last, odd, and even"
                },
                {
                    "type": "p",
                    "text": "Style an element when it is the first-child or last-child using thefirstandlastmodifiers:"
                },
                {
                    "type": "list",
                    "items": [
                        "Kristen Ramoskristen.ramos@example.com",
                        "Floyd Milesfloyd.miles@example.com",
                        "Courtney Henrycourtney.henry@example.com",
                        "Ted Foxted.fox@example.com"
                    ]
                },
                {
                    "type": "p",
                    "text": "Kristen Ramos"
                },
                {
                    "type": "p",
                    "text": "kristen.ramos@example.com"
                },
                {
                    "type": "p",
                    "text": "Floyd Miles"
                },
                {
                    "type": "p",
                    "text": "floyd.miles@example.com"
                },
                {
                    "type": "p",
                    "text": "Courtney Henry"
                },
                {
                    "type": "p",
                    "text": "courtney.henry@example.com"
                },
                {
                    "type": "p",
                    "text": "Ted Fox"
                },
                {
                    "type": "p",
                    "text": "ted.fox@example.com"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"p-6 divide-y divide-slate-200\">{#each people as person}<!-- Remove top/bottom padding when first/last child --><liclass=\"flex py-4first:pt-0last:pb-0\"><imgclass=\"h-10 w-10 rounded-full\"src=\"{person.imageUrl}\"alt=\"\"/><divclass=\"ml-3 overflow-hidden\"><pclass=\"text-sm font-medium text-slate-900\">{person.name}</p><pclass=\"text-sm text-slate-500 truncate\">{person.email}</p></div></li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "You can also style an element when it’s an odd or even child using theoddandevenmodifiers:"
                },
                {
                    "type": "code",
                    "code": "<table><!-- ... --><tbody>{#each people as person}<!-- Use a white background for odd rows, and slate-50 for even rows --><trclass=\"odd:bg-whiteeven:bg-slate-50\"><td>{person.name}</td><td>{person.title}</td><td>{person.email}</td></tr>{/each}</tbody></table>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other structural pseudo-classes like:only-child,:first-of-type,:empty, and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Form states"
                },
                {
                    "type": "p",
                    "text": "Style form elements in different states using modifiers likerequired,invalid, anddisabled:"
                },
                {
                    "type": "p",
                    "text": "Try making the email address valid to see the styles change"
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Username</span><!-- Using form state modifiers, the classes can be identical for every input --><inputtype=\"text\"value=\"tbone\"disabledclass=\"mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md text-sm shadow-sm placeholder-slate-400\n      focus:outline-none focus:border-sky-500 focus:ring-1 focus:ring-sky-500disabled:bg-slate-50disabled:text-slate-500disabled:border-slate-200disabled:shadow-noneinvalid:border-pink-500invalid:text-pink-600focus:invalid:border-pink-500focus:invalid:ring-pink-500\"/></label><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "Using modifiers for this sort of thing can reduce the amount of conditional logic in your templates, letting you use the same set of classes regardless of what state an input is in and letting the browser apply the right styles for you."
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes modifiers for other form states like:read-only,:indeterminate,:checked,  and more."
                },
                {
                    "type": "p",
                    "text": "See thepseudo-class referencefor a complete list of available pseudo-class modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on parent state(group-{modifier})"
                },
                {
                    "type": "p",
                    "text": "When you need to style an element based on the state of someparentelement, mark the parent with thegroupclass, and usegroup-*modifiers likegroup-hoverto style the target element:"
                },
                {
                    "type": "p",
                    "text": "Hover over the card to see both text elements change color"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "New project"
                },
                {
                    "type": "p",
                    "text": "Create a new project from a variety of starting templates."
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#\"class=\"groupblock max-w-xs mx-auto rounded-lg p-6 bg-white ring-1 ring-slate-900/5 shadow-lg space-y-3 hover:bg-sky-500 hover:ring-sky-500\"><divclass=\"flex items-center space-x-3\"><svgclass=\"h-6 w-6 stroke-sky-500group-hover:stroke-white\"fill=\"none\"viewBox=\"0 0 24 24\"><!-- ... --></svg><h3class=\"text-slate-900group-hover:text-whitetext-sm font-semibold\">New project</h3></div><pclass=\"text-slate-500group-hover:text-whitetext-sm\">Create a new project from a variety of starting templates.</p></a>"
                },
                {
                    "type": "p",
                    "text": "This pattern works with every pseudo-class modifier, for examplegroup-focus,group-active, or evengroup-odd."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Differentiating nested groups"
                },
                {
                    "type": "p",
                    "text": "When nesting groups, you can style something based on the state of aspecificparent group by giving that parent a unique group name using agroup/{name}class, and including that name in modifiers using classes likegroup-hover/{name}:"
                },
                {
                    "type": "list",
                    "items": [
                        "Leslie AbbottCo-Founder / CEOCall",
                        "Hector AdamsVP, MarketingCall",
                        "Blake AlexanderAccount CoordinatorCall"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each people as person}<liclass=\"group/itemhover:bg-slate-100 ...\"><imgsrc=\"{person.imageUrl}\"alt=\"\"/><div><ahref=\"{person.url}\">{person.name}</a><p>{person.title}</p></div><aclass=\"group/editinvisible hover:bg-slate-200group-hover/item:visible...\"href=\"tel:{person.phone}\"><spanclass=\"group-hover/edit:text-gray-700...\">Call</span><svgclass=\"group-hover/edit:translate-x-0.5 group-hover/edit:text-slate-500...\"><!-- ... --></svg></a></li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "Groups can be named however you like and don’t need to be configured in any way — just name your groups directly in your markup and Tailwind will automatically generate the necessary CSS."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Arbitrary groups"
                },
                {
                    "type": "p",
                    "text": "You can create one-offgroup-*modifiers on the fly by providing your own selector as anarbitrary valuebetween square brackets:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group is-published\"><divclass=\"hiddengroup-[.is-published]:block\">Published</div></div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can use the&character to mark where.groupshould end up in the final selector relative to the selector you are passing in:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group\"><divclass=\"group-[:nth-of-type(3)_&]:block\"><!-- ... --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on sibling state(peer-{modifier})"
                },
                {
                    "type": "p",
                    "text": "When you need to style an element based on the state of asiblingelement, mark the sibling with thepeerclass, and usepeer-*modifiers likepeer-invalidto style the target element:"
                },
                {
                    "type": "p",
                    "text": "Try making the email address valid to see the warning disappear"
                },
                {
                    "type": "p",
                    "text": "Please provide a valid email address."
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Email</span><inputtype=\"email\"class=\"peer...\"/><pclass=\"mt-2 invisiblepeer-invalid:visibletext-pink-600 text-sm\">Please provide a valid email address.</p></label></form>"
                },
                {
                    "type": "p",
                    "text": "This makes it possible to do all sorts of neat tricks, likefloating labelsfor example without any JS."
                },
                {
                    "type": "p",
                    "text": "This pattern works with every pseudo-class modifier, for examplepeer-focus,peer-required, andpeer-disabled."
                },
                {
                    "type": "p",
                    "text": "It’s important to note that thepeermarker can only be used onprevioussiblings because of how thesubsequent-sibling combinatorworks in CSS."
                },
                {
                    "type": "p",
                    "text": "Won’t work, only previous siblings can be marked as peers"
                },
                {
                    "type": "code",
                    "code": "<label><spanclass=\"peer-invalid:text-red-500...\">Email</span><inputtype=\"email\"class=\"peer...\"/></label>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Differentiating peers"
                },
                {
                    "type": "p",
                    "text": "When using multiple peers, you can style something on the state of aspecificpeer by giving that peer a unique name using apeer/{name}class, and including that name in modifiers using classes likepeer-checked/{name}:"
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Published status</legend><inputid=\"draft\"class=\"peer/draft\"type=\"radio\"name=\"status\"checked/><labelfor=\"draft\"class=\"peer-checked/draft:text-sky-500\">Draft</label><inputid=\"published\"class=\"peer/published\"type=\"radio\"name=\"status\"/><labelfor=\"published\"class=\"peer-checked/published:text-sky-500\">Published</label><divclass=\"hiddenpeer-checked/draft:block\">Drafts are only visible to administrators.</div><divclass=\"hiddenpeer-checked/published:block\">Your post will be publicly visible on your site.</div></fieldset>"
                },
                {
                    "type": "p",
                    "text": "Peers can be named however you like and don’t need to be configured in any way — just name your peers directly in your markup and Tailwind will automatically generate the necessary CSS."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Arbitrary peers"
                },
                {
                    "type": "p",
                    "text": "You can create one-offpeer-*modifiers on the fly by providing your own selector as anarbitrary valuebetween square brackets:"
                },
                {
                    "type": "code",
                    "code": "<form><labelfor=\"email\">Email:</label><inputid=\"email\"name=\"email\"type=\"email\"class=\"is-dirty peer\"required/><divclass=\"peer-[.is-dirty]:peer-required:block hidden\">This field is required.</div><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can use the&character to mark where.peershould end up in the final selector relative to the selector you are passing in:"
                },
                {
                    "type": "code",
                    "code": "<div><inputtype=\"text\"class=\"peer\"/><divclass=\"hiddenpeer-[:nth-of-type(3)_&]:block\"><!-- ... --></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling direct children(*-{modifier})"
                },
                {
                    "type": "p",
                    "text": "While it’s generally preferable to put utility classes directly on child elements, you can use the*modifier in situations where you need to style direct children that you don’t have control over."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Categories"
                },
                {
                    "type": "code",
                    "code": "<div><h2>Categories<h2><ulclass=\"*:rounded-full *:border *:border-sky-100 *:bg-sky-50 *:px-2 *:py-0.5 dark:text-sky-300 dark:*:border-sky-500/15 dark:*:bg-sky-500/10...\"><li>Sales</li><li>Marketing</li><li>SEO</li><!-- ... --></ul></div>"
                },
                {
                    "type": "p",
                    "text": "It’s important to note that overriding a style with a utility directly on the child itself won’t work due to the specificity of the generated child selector."
                },
                {
                    "type": "p",
                    "text": "Won’t work, children can’t override their own styling."
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"*:bg-sky-50...\"><liclass=\"bg-red-50...\">Sales</li><li>Marketing</li><li>SEO</li><!-- ... --></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Styling based on descendants(has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "Use thehas-*modifier to style an element based on the state or content of its descendants."
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"has-[:checked]:bg-indigo-50 has-[:checked]:text-indigo-900 has-[:checked]:ring-indigo-200..\"><svgfill=\"currentColor\"><!-- ... --></svg>Google Pay<inputtype=\"radio\"class=\"checked:border-indigo-500 ...\"/></label>"
                },
                {
                    "type": "p",
                    "text": "You can usehas-*with a pseudo-class, likehas-[:focus], to style an element based on the state of its descendants. You can also use element selectors, likehas-[img]orhas-[a], to style an element based on the content of its descendants."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Styling based on the descendants of a group(group-has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "If you need to style an element based on the descendants of a parent element, you can mark the parent with thegroupclass and use thegroup-has-*modifier to style the target element."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Spencer Sharp"
                },
                {
                    "type": "p",
                    "text": "Product Designer atplaneteria.tech"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Casey Jordan"
                },
                {
                    "type": "p",
                    "text": "Just happy to be here."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Alex Reed"
                },
                {
                    "type": "p",
                    "text": "A multidisciplinary designer, working at the intersection of art and technology.alex-reed.com"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Taylor Bailey"
                },
                {
                    "type": "p",
                    "text": "Pushing pixels. Slinging divs."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group...\"><imgsrc=\"...\"/><h4>Spencer Sharp</h4><svgclass=\"hiddengroup-has-[a]:block...\"><!-- ... --></svg><p>Product Designer at<ahref=\"...\">planeteria.tech</a></p></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​Styling based on the descendants of a peer(peer-has-{modifier})"
                },
                {
                    "type": "p",
                    "text": "If you need to style an element based on the descendants of a sibling element, you can mark the sibling with thepeerclass and use thepeer-has-*modifier to style the target element."
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Today</legend><div><labelclass=\"peer...\"><inputtype=\"checkbox\"name=\"todo[1]\"checked/>Create a to do list</label><svgclass=\"peer-has-[:checked]:hidden...\"><!-- ... --></svg></div><!-- ... --></fieldset>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Pseudo-elements"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Before and after"
                },
                {
                    "type": "p",
                    "text": "Style the::beforeand::afterpseudo-elements using thebeforeandaftermodifiers:"
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"block\"><spanclass=\"after:content-['*']after:ml-0.5after:text-red-500block text-sm font-medium text-slate-700\">Email</span><inputtype=\"email\"name=\"email\"class=\"mt-1 px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 focus:outline-none focus:border-sky-500 focus:ring-sky-500 block w-full rounded-md sm:text-sm focus:ring-1\"placeholder=\"you@example.com\"/></label>"
                },
                {
                    "type": "p",
                    "text": "When using these modifiers, Tailwind will automatically addcontent: ''by default so you don’t have to specify it unless you want a different value:"
                },
                {
                    "type": "code",
                    "code": "<blockquoteclass=\"text-2xl font-semibold italic text-center text-slate-900\">When you look<spanclass=\"before:blockbefore:absolutebefore:-inset-1before:-skew-y-3before:bg-pink-500relative inline-block\"><spanclass=\"relative text-white\">annoyed</span></span>all the time, people think that you're busy.</blockquote>"
                },
                {
                    "type": "p",
                    "text": "It’s worth noting that you don’t really need::beforeand::afterpseudo-elements for most things in Tailwind projects — it’s usually simpler to just use a real HTML element."
                },
                {
                    "type": "p",
                    "text": "For example, here’s the same design from above but using a<span>instead of the::beforepseudo-element, which is a little easier to read and is actually less code:"
                },
                {
                    "type": "code",
                    "code": "<blockquoteclass=\"text-2xl font-semibold italic text-center text-slate-900\">When you look<spanclass=\"relative\"><spanclass=\"block absolute -inset-1 -skew-y-3 bg-pink-500\"aria-hidden=\"true\"></span><spanclass=\"relative text-white\">annoyed</span></span>all the time, people think that you're busy.</blockquote>"
                },
                {
                    "type": "p",
                    "text": "Savebeforeandafterfor situations where it’s important that the content of the pseudo-element is not actually in the DOM and can’t be selected by the user."
                },
                {
                    "type": "p",
                    "text": "Note that if you’ve disabled ourpreflight base styles, the content property will not be set to an empty string by default, and you will need to includecontent-['']any time you use thebeforeandaftermodifiers."
                },
                {
                    "type": "p",
                    "text": "If you’ve disabled preflight make sure to set the content manually"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"before:content-['']before:block ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Placeholder text"
                },
                {
                    "type": "p",
                    "text": "Style the placeholder text of any input or textarea using theplaceholdermodifier:"
                },
                {
                    "type": "code",
                    "code": "<labelclass=\"relative block\"><spanclass=\"sr-only\">Search</span><spanclass=\"absolute inset-y-0 left-0 flex items-center pl-2\"><svgclass=\"h-5 w-5 fill-slate-300\"viewBox=\"0 0 20 20\"><!-- ... --></svg></span><inputclass=\"placeholder:italicplaceholder:text-slate-400block bg-white w-full border border-slate-300 rounded-md py-2 pl-9 pr-3 shadow-sm focus:outline-none focus:border-sky-500 focus:ring-sky-500 focus:ring-1 sm:text-sm\"placeholder=\"Search for anything...\"type=\"text\"name=\"search\"/></label>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​File input buttons"
                },
                {
                    "type": "p",
                    "text": "Style the button in file inputs using thefilemodifier:"
                },
                {
                    "type": "code",
                    "code": "<formclass=\"flex items-center space-x-6\"><divclass=\"shrink-0\"><imgclass=\"h-16 w-16 object-cover rounded-full\"src=\"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1361&q=80\"alt=\"Current profile photo\"/></div><labelclass=\"block\"><spanclass=\"sr-only\">Choose profile photo</span><inputtype=\"file\"class=\"block w-full text-sm text-slate-500file:mr-4file:py-2file:px-4file:rounded-fullfile:border-0file:text-smfile:font-semiboldfile:bg-violet-50file:text-violet-700hover:file:bg-violet-100\"/></label></form>"
                },
                {
                    "type": "p",
                    "text": "Note that Tailwind’sborder resetis not applied to file input buttons. This means that to add a border to a file input button, you need to explicitly set theborder-styleusing a class likefile:border-solidalongside anyborder-widthutility:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"file\"class=\"file:borderfile:border-solid...\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​List markers"
                },
                {
                    "type": "p",
                    "text": "Style the counters or bullets in lists using themarkermodifier:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ingredients"
                },
                {
                    "type": "list",
                    "items": [
                        "5 cups chopped Porcini mushrooms",
                        "1/2 cup of olive oil",
                        "3lb of celery"
                    ]
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\"class=\"marker:text-sky-400list-disc pl-5 space-y-3 text-slate-500\"><li>5 cups chopped Porcini mushrooms</li><li>1/2 cup of olive oil</li><li>3lb of celery</li></ul><ulrole=\"list\"class=\"marker:text-sky-400list-disc pl-5 space-y-3 text-slate-400\"><li>5 cups chopped Porcini mushrooms</li><li>1/2 cup of olive oil</li><li>3lb of celery</li></ul>"
                },
                {
                    "type": "p",
                    "text": "We’ve designed themarkermodifier to be inheritable, so although you can use it directly on an<li>element, you can also use it on a parent to avoid repeating yourself."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Highlighted text"
                },
                {
                    "type": "p",
                    "text": "Style the active text selection using theselectionmodifier:"
                },
                {
                    "type": "p",
                    "text": "Try selecting some of this text with your mouse"
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"selection:bg-fuchsia-300selection:text-fuchsia-900\"><p>So I started to walk into the water. I won't lie to you boys, I was\n    terrified. But I pressed on, and as I made my way past the breakers\n    a strange calm came over me. I don't know if it was divine intervention\n    or the kinship of all living things but I tell you Jerry at that moment,\n    I<em>was</em>a marine biologist.</p></div>"
                },
                {
                    "type": "p",
                    "text": "We’ve designed theselectionmodifier to be inheritable, so you can add it anywhere in the tree and it will be applied to all descendant elements."
                },
                {
                    "type": "p",
                    "text": "This makes it easy to set the selection color to match your brand across your entire site:"
                },
                {
                    "type": "code",
                    "code": "<html><head><!-- ... --></head><bodyclass=\"selection:bg-pink-300\"><!-- ... --></body></html>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​First-line and first-letter"
                },
                {
                    "type": "p",
                    "text": "Style the first line in a block of content using thefirst-linemodifier, and the first letter using thefirst-lettermodifier:"
                },
                {
                    "type": "p",
                    "text": "Well, let me tell you something, funny boy. Y'know that little stamp, the one that says \"New York Public Library\"? Well that may not mean anything to you, but that means a lot to me. One whole hell of a lot."
                },
                {
                    "type": "p",
                    "text": "Sure, go ahead, laugh if you want to. I've seen your type before: Flashy, making the scene, flaunting convention. Yeah, I know what you're thinking. What's this guy making such a big stink about old library books? Well, let me give you a hint, junior."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"first-line:uppercasefirst-line:tracking-widestfirst-letter:text-7xlfirst-letter:font-boldfirst-letter:text-slate-900first-letter:mr-3first-letter:float-left\">Well, let me tell you something, funny boy. Y'know that little stamp, the one\n  that says \"New York Public Library\"? Well that may not mean anything to you,\n  but that means a lot to me. One whole hell of a lot.</p><pclass=\"first-line:uppercasefirst-line:tracking-widestfirst-letter:text-7xlfirst-letter:font-boldfirst-letter:text-whitefirst-letter:mr-3first-letter:float-left\">Well, let me tell you something, funny boy. Y'know that little stamp, the one\n  that says \"New York Public Library\"? Well that may not mean anything to you,\n  but that means a lot to me. One whole hell of a lot.</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Dialog backdrops"
                },
                {
                    "type": "p",
                    "text": "Style the backdrop of anative<dialog>elementusing thebackdropmodifier:"
                },
                {
                    "type": "code",
                    "code": "<dialogclass=\"backdrop:bg-gray-50\"><formmethod=\"dialog\"><!-- ... --></form></dialog>"
                },
                {
                    "type": "p",
                    "text": "If you’re using native<dialog>elements in your project, you may also want to read aboutstyling open/closed statesusing theopenmodifier."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Media and feature queries"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Responsive breakpoints"
                },
                {
                    "type": "p",
                    "text": "To style an element at a specific breakpoint, use responsive modifiers likemdandlg."
                },
                {
                    "type": "p",
                    "text": "For example, this will render a 3-column grid on mobile, a 4-column grid on medium-width screens, and a 6-column grid on large-width screens:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 md:grid-cols-4 lg:grid-cols-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Check out theResponsive Designdocumentation for an in-depth look at how these features work."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers color scheme"
                },
                {
                    "type": "p",
                    "text": "Theprefers-color-schememedia query tells you whether the user prefers a light theme or dark theme, and is usually configured at the operating system level."
                },
                {
                    "type": "p",
                    "text": "Use utilities with no modifier to target light mode, and use thedarkmodifier to provide overrides for dark mode:"
                },
                {
                    "type": "p",
                    "text": "Light mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "p",
                    "text": "Dark mode"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Writes Upside-Down"
                },
                {
                    "type": "p",
                    "text": "The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-whitedark:bg-slate-900rounded-lg px-6 py-8 ring-1 ring-slate-900/5 shadow-xl\"><div><spanclass=\"inline-flex items-center justify-center p-2 bg-indigo-500 rounded-md shadow-lg\"><svgclass=\"h-6 w-6 text-white\"fill=\"none\"viewBox=\"0 0 24 24\"stroke=\"currentColor\"aria-hidden=\"true\"><!-- ... --></svg></span></div><h3class=\"text-slate-900dark:text-whitemt-5 text-base font-medium tracking-tight\">Writes Upside-Down</h3><pclass=\"text-slate-500dark:text-slate-400mt-2 text-sm\">The Zero Gravity Pen can be used to write in any orientation, including upside-down. It even works in outer space.</p></div>"
                },
                {
                    "type": "p",
                    "text": "Check out theDark Modedocumentation for an in-depth look at how this feature works."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers reduced motion"
                },
                {
                    "type": "p",
                    "text": "Theprefers-reduced-motionmedia query tells you if the user has requested that you minimize non-essential motion."
                },
                {
                    "type": "p",
                    "text": "Use themotion-reducemodifier to conditionally add styles when the user has requested reduced motion:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `prefers-reduced-motion: reduce` in your developer tools to hide the spinner"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"bg-indigo-500 ...\"disabled><svgclass=\"motion-reduce:hiddenanimate-spin ...\"viewBox=\"0 0 24 24\"><!-- ... --></svg>Processing...</button>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes amotion-safemodifier that only adds styles when the user hasnotrequested reduced motion. This can be useful when using themotion-reducehelper would mean having to “undo” a lot of styles:"
                },
                {
                    "type": "code",
                    "code": "<!-- Using `motion-reduce` can mean lots of \"undoing\" styles --><buttonclass=\"hover:-translate-y-0.5 transitionmotion-reduce:hover:translate-y-0motion-reduce:transition-none...\">Save changes</button><!-- Using `motion-safe` is less code in these situations --><buttonclass=\"motion-safe:hover:-translate-x-0.5motion-safe:transition...\">Save changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers contrast"
                },
                {
                    "type": "p",
                    "text": "Theprefers-contrastmedia query tells you if the user has requested more or less contrast."
                },
                {
                    "type": "p",
                    "text": "Use thecontrast-moremodifier to conditionally add styles when the user has requested more contrast:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `prefers-contrast: more` in your developer tools to see the changes"
                },
                {
                    "type": "p",
                    "text": "We need this to steal your identity."
                },
                {
                    "type": "code",
                    "code": "<form><labelclass=\"block\"><spanclass=\"block text-sm font-medium text-slate-700\">Social Security Number</span><inputclass=\"border-slate-200 placeholder-slate-400contrast-more:border-slate-400contrast-more:placeholder-slate-500\"/><pclass=\"mt-2 opacity-10contrast-more:opacity-100text-slate-600 text-sm\">We need this to steal your identity.</p></label></form>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes acontrast-lessmodifier you can use to conditionally add styles when the user has requested less contrast."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Forced colors mode"
                },
                {
                    "type": "p",
                    "text": "Theforced-colorsmedia query indicates if the user is using a forced colors mode. These modes override your site’s colors with a user defined palette for text, backgrounds, links and buttons."
                },
                {
                    "type": "p",
                    "text": "Use theforced-colorsmodifier to conditionally add styles when the user has enabled a forced color mode:"
                },
                {
                    "type": "p",
                    "text": "Try emulating `forced-colors: active` in your developer tools to see the changes"
                },
                {
                    "type": "p",
                    "text": "Cyan"
                },
                {
                    "type": "p",
                    "text": "Blue"
                },
                {
                    "type": "p",
                    "text": "Indigo"
                },
                {
                    "type": "p",
                    "text": "Purple"
                },
                {
                    "type": "code",
                    "code": "<form><legend>Choose a theme:</legend><label><inputtype=\"radio\"class=\"forced-colors:appearance-autoappearance-none\"/><pclass=\"forced-colors:blockhidden\">Cyan</p><divclass=\"forced-colors:hiddenh-6 w-6 rounded-full bg-cyan-200 ...\"></div><divclass=\"forced-colors:hiddenh-6 w-6 rounded-full bg-cyan-500 ...\"></div></label><!-- ... --></form>"
                },
                {
                    "type": "p",
                    "text": "Tailwind also includes aforced color adjustutilities to opt in and out of forced colors."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Viewport orientation"
                },
                {
                    "type": "p",
                    "text": "Use theportraitandlandscapemodifiers to conditionally add styles when the viewport is in a specific orientation:"
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"portrait:hidden\"><!-- ... --></div><divclass=\"landscape:hidden\"><p>This experience is designed to be viewed in landscape. Please rotate your\n      device to view the site.</p></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Print styles"
                },
                {
                    "type": "p",
                    "text": "Use theprintmodifier to conditionally add styles that only apply when the document is being printed:"
                },
                {
                    "type": "code",
                    "code": "<div><articleclass=\"print:hidden\"><h1>My Secret Pizza Recipe</h1><p>This recipe is a secret, and must not be shared with anyone</p><!-- ... --></article><divclass=\"hiddenprint:block\">Are you seriously trying to print this? It's secret!</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Supports rules"
                },
                {
                    "type": "p",
                    "text": "Use thesupports-[...]modifier to style things based on whether a certain feature is supported in the user’s browser."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexsupports-[display:grid]:grid...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Under the hood thesupports-[...]modifier generates@supports rulesand takes anything you’d use with@supports (...)between the square brackets, like a property/value pair, and even expressions usingandandor."
                },
                {
                    "type": "p",
                    "text": "For terseness, if you only need to check if a property is supported (and not a specific value), you can just specify the property name:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-black/75supports-[backdrop-filter]:bg-black/25supports-[backdrop-filter]:backdrop-blur...\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can configure shortcuts for common@supportsrules you’re using in your project in thetheme.supportssection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{supports:{grid:'display: grid',},},}"
                },
                {
                    "type": "p",
                    "text": "You can then use these customsupports-*modifiers in your project:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"supports-grid:grid\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Attribute selectors"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​ARIA states"
                },
                {
                    "type": "p",
                    "text": "Use thearia-*modifier to conditionally style things based onARIA attributes."
                },
                {
                    "type": "p",
                    "text": "For example, to apply thebg-sky-700class when thearia-checkedattribute is set totrue, use thearia-checked:bg-sky-700class:"
                },
                {
                    "type": "code",
                    "code": "<divaria-checked=\"true\"class=\"bg-gray-600aria-checked:bg-sky-700\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "By default we’ve included modifiers for the most common boolean ARIA attributes:"
                },
                {
                    "type": "p",
                    "text": "You can customize whicharia-*modifiers are available by editingtheme.ariaortheme.extend.ariain yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{aria:{asc:'sort=\"ascending\"',desc:'sort=\"descending\"',},},},};"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offariamodifier that doesn’t make sense to include in your theme, or for more complex ARIA attributes that take specific values, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"aria-[sort=ascending]:bg-[url('/img/down-arrow.svg')]aria-[sort=descending]:bg-[url('/img/up-arrow.svg')]\">Invoice #</th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "ARIA state modifiers can also target parent and sibling elements using thegroup-aria-*andpeer-aria-*modifiers:"
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><tharia-sort=\"ascending\"class=\"group\">Invoice #<svgclass=\"group-aria-[sort=ascending]:rotate-0group-aria-[sort=descending]:rotate-180\"><!-- ... --></svg></th><!-- ... --></tr></thead><!-- ... --></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Data attributes"
                },
                {
                    "type": "p",
                    "text": "Use thedata-*modifier to conditionally apply styles based ondata attributes."
                },
                {
                    "type": "p",
                    "text": "Since there are no standarddata-*attributes by definition, by default we only support arbitrary values out of the box, for example:"
                },
                {
                    "type": "code",
                    "code": "<!-- Will apply --><divdata-size=\"large\"class=\"data-[size=large]:p-8\"><!-- ... --></div><!-- Will not apply --><divdata-size=\"medium\"class=\"data-[size=large]:p-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "You can configure shortcuts for common data attribute selectors you’re using in your project in thetheme.datasection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{data:{checked:'ui~=\"checked\"',},},}"
                },
                {
                    "type": "p",
                    "text": "You can then use these customdata-*modifiers in your project:"
                },
                {
                    "type": "code",
                    "code": "<divdata-ui=\"checked active\"class=\"data-checked:underline\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​RTL support"
                },
                {
                    "type": "p",
                    "text": "Use thertlandltrmodifiers to conditionally add styles in right-to-left and left-to-right modes respectively when building multi-directional layouts:"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Tom Cook"
                },
                {
                    "type": "p",
                    "text": "Director of Operations"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "p",
                    "text": "تامر كرم"
                },
                {
                    "type": "p",
                    "text": "الرئيس التنفيذي"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-700 group-hover:text-slate-900\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-700\">...</p></div></div><divclass=\"group flex items-center\"><imgclass=\"shrink-0 h-12 w-12 rounded-full\"src=\"...\"alt=\"\"/><divclass=\"ltr:ml-3 rtl:mr-3\"><pclass=\"text-sm font-medium text-slate-300 group-hover:text-white\">...</p><pclass=\"text-sm font-medium text-slate-500 group-hover:text-slate-300\">...</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "Note that theltrmodifier will not take effect unless thedirattribute is explicitly set toltr, so if you are building a multi-directional site make sure to always set a direction, not just inrtlmode."
                },
                {
                    "type": "p",
                    "text": "Always set the direction, even if left-to-right is your default"
                },
                {
                    "type": "code",
                    "code": "<htmldir=\"ltr\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "Remember, these modifiers are only useful if you are building a site that needs to supportbothleft-to-right and right-to-left layouts. If you’re building a site that only needs to support a single direction, you don’t need these modifiers — just apply the styles that make sense for your content."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Open/closed state"
                },
                {
                    "type": "p",
                    "text": "Use theopenmodifier to conditionally add styles when a<details>or<dialog>element is in an open state:"
                },
                {
                    "type": "p",
                    "text": "Try toggling the disclosure to see the styles change"
                },
                {
                    "type": "p",
                    "text": "The mug is round. The jar is round. They should call it Roundtine."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-lg mx-auto p-8\"><detailsclass=\"open:bg-white dark:open:bg-slate-900 open:ring-1 open:ring-black/5 dark:open:ring-white/10 open:shadow-lg p-6 rounded-lg\"open><summaryclass=\"text-sm leading-6 text-slate-900 dark:text-white font-semibold select-none\">Why do they call it Ovaltine?</summary><divclass=\"mt-3 text-sm leading-6 text-slate-600 dark:text-slate-400\"><p>The mug is round. The jar is round. They should call it Roundtine.</p></div></details></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Custom modifiers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using arbitrary variants"
                },
                {
                    "type": "p",
                    "text": "Just likearbitrary valueslet you use custom values with your utility classes, arbitrary variants let you write custom selector modifiers directly in your HTML."
                },
                {
                    "type": "p",
                    "text": "Arbitrary variants are just format strings that represent the selector, wrapped in square brackets. For example, this arbitrary modifier selects an element only when it is the third child:"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each items as item}<liclass=\"[&:nth-child(3)]:underline\">{item}</li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "The format string is the same as what you’d use with theaddVariantplugin API, with the&representing the selector being modified."
                },
                {
                    "type": "p",
                    "text": "Arbitrary variants can be stacked with built-in modifiers or with each other, just like the rest of the modifiers in Tailwind:"
                },
                {
                    "type": "code",
                    "code": "<ulrole=\"list\">{#each items as item}<liclass=\"lg:[&:nth-child(3)]:hover:underline\">{item}</li>{/each}</ul>"
                },
                {
                    "type": "p",
                    "text": "If you need spaces in your selector, you can use an underscore. For example, this arbitrary modifier selects allpelements within the element where you’ve added the class:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"[&_p]:mt-4\"><p>Lorem ipsum...</p><ul><li><p>Lorem ipsum...</p></li><!-- ... --></ul></div>"
                },
                {
                    "type": "p",
                    "text": "You can also use at-rules like@mediaor@supportsin arbitrary variants:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex[@supports(display:grid)]:grid\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "With at-rule custom modifiers the&placeholder isn’t necessary, just like when nesting with a preprocessor."
                },
                {
                    "type": "p",
                    "text": "You can even combine at-rules and regular selector modifiers by including the selector modifier within curly braces after the at-rule:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"button\"class=\"[@media(any-hover:hover){&:hover}]:opacity-100\"><!-- ... --></button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Creating a plugin"
                },
                {
                    "type": "p",
                    "text": "If you find yourself using the same arbitrary modifier multiple times in your project, it might be worth extracting it to a plugin using theaddVariantAPI:"
                },
                {
                    "type": "code",
                    "code": "letplugin=require('tailwindcss/plugin')module.exports={// ...plugins:[plugin(function({addVariant}){// Add a `third` variant, ie. `third:pb-0`addVariant('third','&:nth-child(3)')})]}"
                },
                {
                    "type": "p",
                    "text": "Learn more in theadding variant pluginsdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Advanced topics"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using with your own classes"
                },
                {
                    "type": "p",
                    "text": "All of Tailwind’s modifiers are available to use with your own custom classes as long as you’ve defined them in one of Tailwind’slayersor added them using aplugin:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerutilities{.content-auto{content-visibility:auto;}}"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"lg:content-auto\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ordering stacked modifiers"
                },
                {
                    "type": "p",
                    "text": "When stacking modifiers, they are applied from the inside-out, like nested function calls:"
                },
                {
                    "type": "code",
                    "code": "// These modifiers:'dark:group-hover:focus:opacity-100'// ...are applied like this:dark(groupHover(focus('opacity-100')))"
                },
                {
                    "type": "p",
                    "text": "For the most part this doesn’t actually matter, but there are a few situations where the order you use actually generates meaningfully different CSS."
                },
                {
                    "type": "p",
                    "text": "For example, if you havedarkModeconfigured toclass, combining thedarkandgroup-hovermodifiers generates a different result depending on the order you use:"
                },
                {
                    "type": "code",
                    "code": "/* dark:group-hover:opacity-100 */.dark.group:hover.dark\\:group-hover\\:opacity-100{opacity:1;}/* group-hover:dark:opacity-100 */.group:hover.dark.group-hover\\:dark\\:opacity-100{opacity:1;}"
                },
                {
                    "type": "p",
                    "text": "In the first example, thedarkelement needs to be a parent of thegroupelement, but in the second example it’s reversed."
                },
                {
                    "type": "p",
                    "text": "Another place this is important is when using modifiers likeprose-headingsthat are included with the official typography plugin:"
                },
                {
                    "type": "code",
                    "code": "/* prose-headings:hover:underline */.prose-headings\\:hover\\:underline:hover:is(:where(h1,h2,h3,h4,th)){text-decoration:underline;}/* hover:prose-headings:underline */.hover\\:prose-headings\\:underline:is(:where(h1,h2,h3,h4,th)):hover{text-decoration:underline;}"
                },
                {
                    "type": "p",
                    "text": "In the first example, every single heading is underlined when you hover over the article itself, whereas in the second example each heading is only underlined when you hover over that heading."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Appendix"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Quick reference"
                },
                {
                    "type": "p",
                    "text": "A quick reference table of every single modifier included in Tailwind by default."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pseudo-class reference"
                },
                {
                    "type": "p",
                    "text": "This is a comprehensive list of examples for all the pseudo-class modifiers included in Tailwind to complement thepseudo-classes  documentationat the beginning of this guide."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​hover(:hover)"
                },
                {
                    "type": "p",
                    "text": "Style an element when the user hovers over it with the mouse cursor using thehovermodifier:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-blackhover:bg-white...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus(:focus)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it has focus using thefocusmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"border-gray-300focus:border-blue-400...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus-within(:focus-within)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it or one of its descendants has focus using thefocus-withinmodifier:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"focus-within:shadow-lg...\"><inputtype=\"text\"/></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​focus-visible(:focus-visible)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it has been focused using the keyboard using thefocus-visiblemodifier:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"focus:outline-nonefocus-visible:ring...\">Submit</button>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​active(:active)"
                },
                {
                    "type": "p",
                    "text": "Style an element when it is being pressed using theactivemodifier:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"bg-blue-500active:bg-blue-600...\">Submit</button>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​visited(:visited)"
                },
                {
                    "type": "p",
                    "text": "Style a link when it has already been visited using thevisitedmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"https://seinfeldquotes.com\"class=\"text-blue-600visited:text-purple-600...\">Inspiration</a>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​target(:target)"
                },
                {
                    "type": "p",
                    "text": "Style an element if its ID matches the current URL fragment using thetargetmodifier:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"about\"class=\"target:shadow-lg...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​first(:first-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the first child using thefirstmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4first:pt-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​last(:last-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the last child using thelastmodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4last:pb-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​only(:only-child)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the only child using theonlymodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"py-4only:py-0...\"><!-- ... --></li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​odd(:nth-child(odd))"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s an oddly numbered child using theoddmodifier:"
                },
                {
                    "type": "code",
                    "code": "<table>{#each people as person}<trclass=\"bg-whiteodd:bg-gray-100...\"><!-- ... --></tr>{/each}</table>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​even(:nth-child(even))"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s an evenly numbered child using theevenmodifier:"
                },
                {
                    "type": "code",
                    "code": "<table>{#each people as person}<trclass=\"bg-whiteeven:bg-gray-100...\"><!-- ... --></tr>{/each}</table>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​first-of-type(:first-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the first child of its type using thefirst-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"ml-2first-of-type:ml-6...\"><!-- ... --></a>{/each}</nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​last-of-type(:last-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the last child of its type using thelast-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"mr-2last-of-type:mr-6...\"><!-- ... --></a>{/each}<button>More</button></nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​only-of-type(:only-of-type)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it’s the only child of its type using theonly-of-typemodifier:"
                },
                {
                    "type": "code",
                    "code": "<nav><imgsrc=\"/logo.svg\"alt=\"Vandelay Industries\"/>{#each links as link}<ahref=\"#\"class=\"mx-2only-of-type:mx-6...\"><!-- ... --></a>{/each}<button>More</button></nav>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​empty(:empty)"
                },
                {
                    "type": "p",
                    "text": "Style an element if it has no content using theemptymodifier:"
                },
                {
                    "type": "code",
                    "code": "<ul>{#each people as person}<liclass=\"empty:hidden...\">{person.hobby}</li>{/each}</ul>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​disabled(:disabled)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s disabled using thedisabledmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"disabled:opacity-75...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​enabled(:enabled)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s enabled using theenabledmodifier, most helpful when you only want to apply another style when an element is not disabled:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"enabled:hover:border-gray-400disabled:opacity-75 ...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​checked(:checked)"
                },
                {
                    "type": "p",
                    "text": "Style a checkbox or radio button when it’s checked using thecheckedmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"appearance-nonechecked:bg-blue-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​indeterminate(:indeterminate)"
                },
                {
                    "type": "p",
                    "text": "Style a checkbox or radio button in an indeterminate state using theindeterminatemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"appearance-noneindeterminate:bg-gray-300...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​default(:default)"
                },
                {
                    "type": "p",
                    "text": "Style an option, checkbox or radio button that was the default value when the page initially loaded using thedefaultmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"class=\"default:ring-2...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​required(:required)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s required using therequiredmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"required:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​valid(:valid)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s valid using thevalidmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"valid:border-green-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​invalid(:invalid)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it’s invalid using theinvalidmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"invalid:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​in-range(:in-range)"
                },
                {
                    "type": "p",
                    "text": "Style an input when its value is within a specified range limit using thein-rangemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputmin=\"1\"max=\"5\"class=\"in-range:border-green-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​out-of-range(:out-of-range)"
                },
                {
                    "type": "p",
                    "text": "Style an input when its value is outside of a specified range limit using theout-of-rangemodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputmin=\"1\"max=\"5\"class=\"out-of-range:border-red-500...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​placeholder-shown(:placeholder-shown)"
                },
                {
                    "type": "p",
                    "text": "Style an input when the placeholder is shown using theplaceholder-shownmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"placeholder-shown:border-gray-500...\"placeholder=\"you@example.com\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​autofill(:autofill)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it has been autofilled by the browser using theautofillmodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"autofill:bg-yellow-200...\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "​read-only(:read-only)"
                },
                {
                    "type": "p",
                    "text": "Style an input when it is read-only using theread-onlymodifier:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"read-only:bg-gray-100...\"/>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Pseudo-classes",
                        "Hover, focus, and active",
                        "First, last, odd, and even",
                        "Form states",
                        "Styling based on parent state",
                        "Styling based on sibling state",
                        "Styling direct children",
                        "Styling based on descendants",
                        "Pseudo-elements",
                        "Before and after",
                        "Placeholder text",
                        "File input buttons",
                        "List markers",
                        "Highlighted text",
                        "First-line and first-letter",
                        "Dialog backdrops",
                        "Media and feature queries",
                        "Responsive breakpoints",
                        "Prefers color scheme",
                        "Prefers reduced motion",
                        "Prefers contrast",
                        "Forced colors mode",
                        "Viewport orientation",
                        "Print styles",
                        "Supports rules",
                        "Attribute selectors",
                        "ARIA states",
                        "Data attributes",
                        "RTL support",
                        "Open/closed state",
                        "Custom modifiers",
                        "Using arbitrary variants",
                        "Creating a plugin",
                        "Advanced topics",
                        "Using with your own classes",
                        "Ordering stacked modifiers",
                        "Appendix",
                        "Quick reference",
                        "Pseudo-class reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/resize",
            "title": "Resize - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Resize"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resizing in all directions"
                },
                {
                    "type": "p",
                    "text": "Useresizeto make an element horizontally and vertically resizable."
                },
                {
                    "type": "p",
                    "text": "Drag the textarea handle in the demo to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"resizerounded-md\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resizing vertically"
                },
                {
                    "type": "p",
                    "text": "Useresize-yto make an element vertically resizable."
                },
                {
                    "type": "p",
                    "text": "Drag the textarea handle in the demo to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"resize-yrounded-md\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resizing horizontally"
                },
                {
                    "type": "p",
                    "text": "Useresize-xto make an element horizontally resizable."
                },
                {
                    "type": "p",
                    "text": "Drag the textarea handle in the demo to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"resize-xrounded-md\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Preventing resizing"
                },
                {
                    "type": "p",
                    "text": "Useresize-noneto prevent an element from being resizable."
                },
                {
                    "type": "p",
                    "text": "Notice that the textarea handle is gone"
                },
                {
                    "type": "code",
                    "code": "<textareaclass=\"resize-nonerounded-md\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:resizeto only apply theresizeutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"resize-nonehover:resize\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:resizeto apply theresizeutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"resize-nonemd:resize\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Resizing in all directions",
                        "Resizing vertically",
                        "Resizing horizontally",
                        "Preventing resizing",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/responsive-design",
            "title": "Responsive Design - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Responsive Design"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overview"
                },
                {
                    "type": "p",
                    "text": "Every utility class in Tailwind can be applied conditionally at different breakpoints, which makes it a piece of cake to build complex responsive interfaces without ever leaving your HTML."
                },
                {
                    "type": "p",
                    "text": "First, make sure you’ve added theviewport meta tagto the<head>of your document:"
                },
                {
                    "type": "code",
                    "code": "<metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\">"
                },
                {
                    "type": "p",
                    "text": "Then to add a utility but only have it take effect at a certain breakpoint, all you need to do is prefix the utility with the breakpoint name, followed by the:character:"
                },
                {
                    "type": "code",
                    "code": "<!-- Width of 16 by default, 32 on medium screens, and 48 on large screens --><imgclass=\"w-16md:w-32lg:w-48\"src=\"...\">"
                },
                {
                    "type": "p",
                    "text": "There are five breakpoints by default, inspired by common device resolutions:"
                },
                {
                    "type": "p",
                    "text": "This works forevery utility class in the framework, which means you can change literally anything at a given breakpoint — even things like letter spacing or cursor styles."
                },
                {
                    "type": "p",
                    "text": "Here’s a simple example of a marketing page component that uses a stacked layout on small screens, and a side-by-side layout on larger screens:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hiddenmd:max-w-2xl\"><divclass=\"md:flex\"><divclass=\"md:shrink-0\"><imgclass=\"h-48 w-full object-covermd:h-full md:w-48\"src=\"/img/building.jpg\"alt=\"Modern building architecture\"></div><divclass=\"p-8\"><divclass=\"uppercase tracking-wide text-sm text-indigo-500 font-semibold\">Company retreats</div><ahref=\"#\"class=\"block mt-1 text-lg leading-tight font-medium text-black hover:underline\">Incredible accommodation for your team</a><pclass=\"mt-2 text-slate-500\">Looking to take your team away on a retreat to enjoy awesome food and take in some sunshine? We have a list of places to do just that.</p></div></div></div>"
                },
                {
                    "type": "p",
                    "text": "Here’s how the example above works:"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, the outerdivisdisplay: block, but by adding themd:flexutility, it becomesdisplay: flexon medium screens and larger.",
                        "When the parent is a flex container, we want to make sure the image never shrinks, so we’ve addedmd:shrink-0to prevent shrinking on medium screens and larger. Technically we could have just usedshrink-0since it would do nothing on smaller screens, but since it only matters onmdscreens, it’s a good idea to make that clear in the class name.",
                        "On small screens the image is automatically full width by default. On medium screens and up, we’ve constrained the width to a fixed size and ensured the image is full height usingmd:h-full md:w-48."
                    ]
                },
                {
                    "type": "p",
                    "text": "We’ve only used one breakpoint in this example, but you could easily customize this component at other sizes using thesm,lg,xl, or2xlresponsive prefixes as well."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Working mobile-first"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind uses a mobile-first breakpoint system, similar to what you might be used to in other frameworks like Bootstrap."
                },
                {
                    "type": "p",
                    "text": "What this means is that unprefixed utilities (likeuppercase) take effect on all screen sizes, while prefixed utilities (likemd:uppercase) only take effect at the specified breakpointand above."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Targeting mobile screens"
                },
                {
                    "type": "p",
                    "text": "Where this approach surprises people most often is that to style something for mobile, you need to use the unprefixed version of a utility, not thesm:prefixed version. Don’t think ofsm:as meaning “on small screens”, think of it as “at the smallbreakpoint“."
                },
                {
                    "type": "p",
                    "text": "Don’t usesm:to target mobile devices"
                },
                {
                    "type": "code",
                    "code": "<!-- This will only center text on screens 640px and wider, not on small screens --><divclass=\"sm:text-center\"></div>"
                },
                {
                    "type": "p",
                    "text": "Use unprefixed utilities to target mobile, and override them at larger breakpoints"
                },
                {
                    "type": "code",
                    "code": "<!-- This will center text on mobile, and left align it on screens 640px and wider --><divclass=\"text-center sm:text-left\"></div>"
                },
                {
                    "type": "p",
                    "text": "For this reason, it’s often a good idea to implement the mobile layout for a design first, then layer on any changes that make sense forsmscreens, followed bymdscreens, etc."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Targeting a breakpoint range"
                },
                {
                    "type": "p",
                    "text": "By default, styles applied by rules likemd:flexwill apply at that breakpoint and stay applied at larger breakpoints."
                },
                {
                    "type": "p",
                    "text": "If you’d like to apply a utilityonlywhen a specific breakpoint range is active, stack a responsive modifier likemdwith amax-*modifier to limit that style to a specific range:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:max-xl:flex\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Tailwind generates a correspondingmax-*modifier for each breakpoint, so out of the box the following modifiers are available:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Targeting a single breakpoint"
                },
                {
                    "type": "p",
                    "text": "To target a single breakpoint, target the range for that breakpoint by stacking a responsive modifier likemdwith themax-*modifier for the next breakpoint:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:max-lg:flex\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Read abouttargeting breakpoint rangesto learn more."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom breakpoints"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can completely customize your breakpoints in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'tablet':'640px',// => @media (min-width: 640px) { ... }'laptop':'1024px',// => @media (min-width: 1024px) { ... }'desktop':'1280px',// => @media (min-width: 1280px) { ... }},}}"
                },
                {
                    "type": "p",
                    "text": "Learn more in thecustomizing breakpoints documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-off breakpoint that doesn’t make sense to include in your theme, use theminormaxmodifiers to generate a custom breakpoint on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"min-[320px]:text-centermax-[600px]:bg-sky-300\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Working mobile-first",
                        "Targeting mobile screens",
                        "Targeting a breakpoint range",
                        "Targeting a single breakpoint",
                        "Using custom breakpoints",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/reusing-styles",
            "title": "Reusing Styles - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Reusing Styles"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind encourages autility-firstworkflow, where designs are implemented using only low-level utility classes. This is a powerful way to avoid premature abstraction and the pain points that come with it."
                },
                {
                    "type": "p",
                    "text": "But of course as a project grows, you’ll inevitably find yourself repeating common utility combinations to recreate the same design in many different places."
                },
                {
                    "type": "p",
                    "text": "For example, in the template below you can see the utility classes for each avatar image are repeated five separate times:"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Contributors"
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"flex items-center space-x-2 text-base\"><h4class=\"font-semibold text-slate-900\">Contributors</h4><spanclass=\"rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700\">204</span></div><divclass=\"mt-3 flex -space-x-2 overflow-hidden\"><imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"alt=\"\"/><imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"alt=\"\"/><imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80\"alt=\"\"/><imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"alt=\"\"/><imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"https://images.unsplash.com/photo-1517365830460-955ce3ccd263?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"alt=\"\"/></div><divclass=\"mt-3 text-sm font-medium\"><ahref=\"#\"class=\"text-blue-500\">+ 198 others</a></div></div>"
                },
                {
                    "type": "p",
                    "text": "Don’t panic! In this guide, you’ll learn about different strategies for reusing styles in your project, as well as best practices for when to employ each one."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using editor and language features"
                },
                {
                    "type": "p",
                    "text": "A lot of the time, duplication like this isn’t even a real problem because it’s all together in one place, or doesn’t even actually exist because you’re iterating over an array of items and only writing the markup once."
                },
                {
                    "type": "p",
                    "text": "If the styles you need to reuse only need to be reused within a single file, multi-cursor editing and loops are the simplest way to manage any duplication."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Multi-cursor editing"
                },
                {
                    "type": "p",
                    "text": "When duplication is localized to a group of elements in a single file, the easiest way to deal with it to usemulti-cursor editingto quickly select and edit the class list for each element at once:"
                },
                {
                    "type": "code",
                    "code": "<navclass=\"flex justify-center space-x-4\"><ahref=\"/dashboard\"class=\"font-mediumpx-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Home</a><ahref=\"/team\"class=\"font-mediumpx-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Team</a><ahref=\"/projects\"class=\"font-mediumpx-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Projects</a><ahref=\"/reports\"class=\"font-mediumpx-3 py-2 text-slate-700 rounded-lg hover:bg-slate-100 hover:text-slate-900\">Reports</a></nav>"
                },
                {
                    "type": "p",
                    "text": "You’d be surprised at how often this ends up being the best solution. If you can quickly edit all of the duplicated class lists simultaneously, there’s no benefit to introducing any additional abstraction."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Loops"
                },
                {
                    "type": "p",
                    "text": "Before you assume you’re going to need to extract a component or create a custom class for something, make sure you’reactuallyusing it more than once in your template."
                },
                {
                    "type": "p",
                    "text": "A lot of the time a design element that shows up more than once in the rendered page is only actually authored once because the actual markup is rendered in a loop."
                },
                {
                    "type": "p",
                    "text": "For example, the duplicate avatars at the beginning of this guide would almost certainly be rendered in a loop in a real project:"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Contributors"
                },
                {
                    "type": "code",
                    "code": "<div><divclass=\"flex items-center space-x-2 text-base\"><h4class=\"font-semibold text-slate-900\">Contributors</h4><spanclass=\"rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700\">204</span></div><divclass=\"mt-3 flex -space-x-2 overflow-hidden\">{#each contributors as user}<imgclass=\"inline-block h-12 w-12 rounded-full ring-2 ring-white\"src=\"{user.avatarUrl}\"alt=\"{user.handle}\"/>{/each}</div><divclass=\"mt-3 text-sm font-medium\"><ahref=\"#\"class=\"text-blue-500\">+ 198 others</a></div></div>"
                },
                {
                    "type": "p",
                    "text": "You could even rewrite the navigation example using a loop ormapif you preferred as well:"
                },
                {
                    "type": "code",
                    "code": "<navclassName=\"flex sm:justify-center space-x-4\">{[['Home','/dashboard'],['Team','/team'],['Projects','/projects'],['Reports','/reports'],].map(([title,url])=>(<ahref={url}className=\"rounded-lg px-3 py-2 text-slate-700 font-medium hover:bg-slate-100 hover:text-slate-900\">{title}</a>))}</nav>"
                },
                {
                    "type": "p",
                    "text": "When elements are rendered in a loop like this, the actual class list is only written once so there’s no actual duplication problem to solve."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extracting components and partials"
                },
                {
                    "type": "p",
                    "text": "If you need to reuse some styles across multiple files, the best strategy is to create acomponentif you’re using a front-end framework like React, Svelte, or Vue, or atemplate partialif you’re using a templating language like Blade, ERB, Twig, or Nunjucks."
                },
                {
                    "type": "code",
                    "code": "<template><div><imgclass=\"rounded\":src=\"img\":alt=\"imgAlt\"><divclass=\"mt-2\"><div><divclass=\"text-xs text-slate-600 uppercase font-bold tracking-wider\">{{ eyebrow }}</div><divclass=\"font-bold text-slate-700 leading-snug\"><a:href=\"url\"class=\"hover:underline\">{{ title }}</a></div><divclass=\"mt-2 text-sm text-slate-600\">{{ pricing }}</div></div></div></div></template><script>exportdefault{props:['img','imgAlt','eyebrow','title','pricing','url']}</script>"
                },
                {
                    "type": "p",
                    "text": "Now you can use this component in as many places as you like, while still having a single source of truth for the styles so they can easily be updated together in one place."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Compared to CSS abstractions"
                },
                {
                    "type": "p",
                    "text": "Unless a component is a single HTML element, the information needed to define it can’t be captured in CSS alone. For anything even remotely complex, the HTML structure is just as important as the CSS."
                },
                {
                    "type": "p",
                    "text": "Don’t rely on CSS classes to extract complex components"
                },
                {
                    "type": "p",
                    "text": "You have a new message!"
                },
                {
                    "type": "code",
                    "code": "<!-- Even with custom CSS, you still need to duplicate this HTML structure --><divclass=\"chat-notification\"><divclass=\"chat-notification-logo-wrapper\"><imgclass=\"chat-notification-logo\"src=\"/img/logo.svg\"alt=\"ChitChat Logo\"></div><divclass=\"chat-notification-content\"><divclass=\"chat-notification-title\">ChitChat</div><pclass=\"chat-notification-message\">You have a new message!</p></div></div><style>.chat-notification{/* ... */}.chat-notification-logo-wrapper{/* ... */}.chat-notification-logo{/* ... */}.chat-notification-content{/* ... */}.chat-notification-title{/* ... */}.chat-notification-message{/* ... */}</style>"
                },
                {
                    "type": "p",
                    "text": "Even if you create classes for the different elements in a component like this,you still have to duplicate the HTML every time you want to use this component. Sure you can update the font-size for every instance in a single place, but what if you need to turn the title into a link?"
                },
                {
                    "type": "p",
                    "text": "Components and template partials solve this problem much better than CSS-only abstractions because a component can encapsulate the HTMLandthe styles. Changing the font-size for every instance is just as easy as it is with CSS, but now you can turn all of the titles into links in a single place too."
                },
                {
                    "type": "p",
                    "text": "Create a template partial or JavaScript component"
                },
                {
                    "type": "p",
                    "text": "You have a new message!"
                },
                {
                    "type": "code",
                    "code": "functionNotification({imageUrl,imageAlt,title,message}){return(<divclassName=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4\"><divclassName=\"shrink-0\"><imgclassName=\"h-12 w-12\"src={imageUrl.src}alt={imageAlt}></div><div><divclassName=\"text-xl font-medium text-black\">{title}</div><pclassName=\"text-slate-500\">{message}</p></div></div>)\n}"
                },
                {
                    "type": "p",
                    "text": "When you create components and template partials like this, there’s no reason to use anything other than utility classes because you already have a single source of truth for the styles."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Extracting classes with @apply"
                },
                {
                    "type": "p",
                    "text": "If you’re using a traditional templating language like ERB or Twig, creating a template partial for something as small as a button can feel like overkill compared to a simple CSS class likebtn."
                },
                {
                    "type": "p",
                    "text": "While it’s highly recommended that you create proper template partials for more complex components, you can use Tailwind’s@applydirective to extract repeated utility patterns to custom CSS classes when a template partial feels heavy-handed."
                },
                {
                    "type": "p",
                    "text": "Here’s what abtn-primaryclass might look like using@applyto compose it from existing utilities:"
                },
                {
                    "type": "code",
                    "code": "<!-- Before extracting a custom class --><buttonclass=\"py-2 px-5 bg-violet-500 text-white font-semibold rounded-full shadow-md hover:bg-violet-700 focus:outline-none focus:ring focus:ring-violet-400 focus:ring-opacity-75\">Save changes</button><!-- After extracting a custom class --><buttonclass=\"btn-primary\">Save changes</button>"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layercomponents{.btn-primary{@applypy-2 px-5 bg-violet-500 text-white font-semibold rounded-full shadow-mdhover:bg-violet-700focus:outline-nonefocus:ringfocus:ring-violet-400focus:ring-opacity-75;}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about@applyand@layerin theFunctions & Directivesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Avoiding premature abstraction"
                },
                {
                    "type": "p",
                    "text": "Whatever you do,don’t use@applyjust to make things look “cleaner”. Yes, HTML templates littered with Tailwind classes are kind of ugly. Making changes in a project that has tons of custom CSS is worse."
                },
                {
                    "type": "p",
                    "text": "If you start using@applyfor everything, you are basically just writing CSS again and throwing away all of the workflow and maintainability advantages Tailwind gives you, for example:"
                },
                {
                    "type": "list",
                    "items": [
                        "You have to think up class names all the time— nothing will slow you down or drain your energy like coming up with a class name for something that doesn’t deserve to be named.",
                        "You have to jump between multiple files to make changes— which is a way bigger workflow killer than you’d think before co-locating everything together.",
                        "Changing styles is scarier— CSS is global, are yousureyou can change the min-width value in that class without breaking something in another part of the site?",
                        "Your CSS bundle will be bigger— oof."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you’re going to use@apply, use it for very small, highly reusable things like buttons and form controls — and even then only if you’re not using a framework like React where a component would be a better choice."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Using editor and language features",
                        "Multi-cursor editing",
                        "Loops",
                        "Extracting components and partials",
                        "Compared to CSS abstractions",
                        "Extracting classes with @apply",
                        "Avoiding premature abstraction"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/ring-color",
            "title": "Ring Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Ring Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the ring color"
                },
                {
                    "type": "p",
                    "text": "Use thering-*utilities to set the color of anoutline ring."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2ring-blue-500\">Create account</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s background color."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2 ring-blue-500/50\">Subscribe</button>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2 ring-blue-500/[.55]\">Subscribe</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ring-blue-500to only apply thering-blue-500utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring ring-blue-300hover:ring-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ring-blue-500to apply thering-blue-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring ring-blue-300md:ring-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asringcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourringcolors by editingtheme.ringColorortheme.extend.ringColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offring colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-[#50d71e]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the ring color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/ring-offset-color",
            "title": "Ring Offset Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Ring Offset Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the ring offset color"
                },
                {
                    "type": "p",
                    "text": "Use thering-offset-*utilities to change the color of a ring offset. Usually this is done to try and match the offset to the parent background color, since true box-shadow offsets aren’t actually possible in CSS."
                },
                {
                    "type": "p",
                    "text": "ring-offset-slate-50dark:ring-offset-slate-900"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring-2 ring-purple-500 ring-offset-4ring-offset-slate-50dark:ring-offset-slate-900...\">Save Changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s ring offset color."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring-2 ring-purple-500 ring-offset-4 ring-offset-purple-100/50\"></button>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring-2 ring-purple-500 ring-offset-4 ring-offset-purple-100/[.55]\"></button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ring-offset-blue-500to only apply thering-offset-blue-500utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-2 ring-offset-2 ring-offset-blue-300hover:ring-offset-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ring-offset-blue-500to apply thering-offset-blue-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-2 ring-offset-2 ring-offset-blue-300md:ring-offset-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asring offset colorcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourring offset colorcolors by editingtheme.ringOffsetColorortheme.extend.ringOffsetColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offring offset colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-offset-[#50d71e]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the ring offset color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/ring-offset-width",
            "title": "Ring Offset Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Ring Offset Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the ring offset width"
                },
                {
                    "type": "p",
                    "text": "Use utilities likering-offset-2andring-offset-4to simulate an offset by adding solid white box-shadow and increasing the thickness of the accompanying outline ring to accommodate the offset."
                },
                {
                    "type": "p",
                    "text": "ring-offset-0"
                },
                {
                    "type": "p",
                    "text": "ring-offset-2"
                },
                {
                    "type": "p",
                    "text": "ring-offset-4"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring ring-pink-500ring-offset-0\">Button A</button><buttonclass=\"... ring ring-pink-500ring-offset-2\">Button B</button><buttonclass=\"... ring ring-pink-500ring-offset-4\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the offset color"
                },
                {
                    "type": "p",
                    "text": "You can’t actually offset a box-shadow in CSS, so we have to fake it using a solid color shadow that matches the parent background color. We use white by default, but if you are adding a ring offset over a different background color, use the ring offset color utilities, likering-offset-slate-50, to match the parent background color:"
                },
                {
                    "type": "p",
                    "text": "ring-offset-slate-50dark:ring-offset-slate-900"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring ring-pink-500ring-offset-2ring-offset-slate-50dark:ring-offset-slate-900...\">Save Changes</button>"
                },
                {
                    "type": "p",
                    "text": "For more information, see thering offset colordocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ring-offset-4to only apply thering-offset-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring-2 ring-offset-2hover:ring-offset-4\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ring-offset-4to apply thering-offset-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ring-2 ring-offset-2md:ring-offset-4\"><!-- ... --></button>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "To customize which ring offset width utilities are generated, add your custom values underringOffsetWidthkey in thethemesection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{ringOffsetWidth:{'3':'3px','6':'6px','10':'10px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offring-offsetvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-offset-[3px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the ring offset width",
                        "Changing the offset color",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/ring-opacity",
            "title": "Ring Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Ring Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the ring color"
                },
                {
                    "type": "p",
                    "text": "Use thering-*utilities to set the color of anoutline ring."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2ring-blue-500\">Create account</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s background color."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2 ring-blue-500/50\">Subscribe</button>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2 ring-blue-500/[.55]\">Subscribe</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ring-blue-500to only apply thering-blue-500utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring ring-blue-300hover:ring-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ring-blue-500to apply thering-blue-500utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring ring-blue-300md:ring-blue-500\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asringcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourringcolors by editingtheme.ringColorortheme.extend.ringColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offring colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-[#50d71e]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the ring color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/ring-width",
            "title": "Ring Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Borders",
                        "Ring Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding a ring"
                },
                {
                    "type": "p",
                    "text": "Use thering-*utilities to apply solid box-shadow of a specific thickness to an element. Rings are a semi-transparent blue color by default, similar to the default focus ring style in many systems."
                },
                {
                    "type": "p",
                    "text": "ring-2"
                },
                {
                    "type": "p",
                    "text": "ring"
                },
                {
                    "type": "p",
                    "text": "ring-4"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-offset-2ring-2\">Button A</button><buttonclass=\"... ring-offset-2ring\">Button B</button><buttonclass=\"... ring-offset-2ring-4\">Button C</button>"
                },
                {
                    "type": "p",
                    "text": "Ring utilities compose gracefully with regularshadow-*utilities and can be combined on the same element."
                },
                {
                    "type": "p",
                    "text": "You can also control the color, opacity, and offset of rings using theringColor,ringOpacity, andringOffsetWidthutilities."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Focus rings"
                },
                {
                    "type": "p",
                    "text": "The ring width utilities make it easy to use custom focus rings by addingfocus:to the beginning of anyring-*utility."
                },
                {
                    "type": "p",
                    "text": "Focus this button to see the ring appear"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"...focus:ring-2\">Save Changes</button>"
                },
                {
                    "type": "p",
                    "text": "Thefocusvariant is enabled by default for theringColor,ringOpacity,ringOffsetWidth, andringOffsetColorutilities as well."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Inset rings"
                },
                {
                    "type": "p",
                    "text": "Use thering-insetutility to force a ring to render on the inside of an element instead of the outside. This can be useful for elements at the edge of the screen where part of the ring wouldn’t be visible."
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"... ring-2 ring-pink-300ring-inset\">Save Changes</button><buttonclass=\"... ring-2 ring-pink-500ring-inset\">Save Changes</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ring-4to only apply thering-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-2hover:ring-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ring-4to apply thering-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-2md:ring-4\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposering-widthutilities. You can customize these values by editingtheme.ringWidthortheme.extend.ringWidthin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{ringWidth:{'10':'10px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offringvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ring-[10px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding a ring",
                        "Focus rings",
                        "Inset rings",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/rotate",
            "title": "Rotate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transforms",
                        "Rotate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Rotating an element"
                },
                {
                    "type": "p",
                    "text": "Use therotate-*utilities to rotate an element."
                },
                {
                    "type": "p",
                    "text": "rotate-0"
                },
                {
                    "type": "p",
                    "text": "rotate-45"
                },
                {
                    "type": "p",
                    "text": "rotate-90"
                },
                {
                    "type": "p",
                    "text": "rotate-180"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"rotate-0...\"><imgclass=\"rotate-45...\"><imgclass=\"rotate-90...\"><imgclass=\"rotate-180...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative rotate value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"-rotate-45...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing transforms"
                },
                {
                    "type": "p",
                    "text": "To remove all of the transforms on an element at once, use thetransform-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-75 translate-x-4 skew-y-3md:transform-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hardware acceleration"
                },
                {
                    "type": "p",
                    "text": "If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding thetransform-gpuutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rotate-45transform-gpu\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Usetransform-cputo force things back to the CPU if you need to undo this conditionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:rotate-45to only apply therotate-45utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:rotate-45\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:rotate-45to apply therotate-45utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:rotate-45\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposerotateutilities. You can customize these values by editingtheme.rotateortheme.extend.rotatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{rotate:{'17':'17deg',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offrotatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"rotate-[17deg]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Rotating an element",
                        "Using negative values",
                        "Removing transforms",
                        "Hardware acceleration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/saturate",
            "title": "Saturate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Saturate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing element saturation"
                },
                {
                    "type": "p",
                    "text": "Use thesaturate-*utilities to control an element’s saturation."
                },
                {
                    "type": "p",
                    "text": "saturate-50"
                },
                {
                    "type": "p",
                    "text": "saturate-100"
                },
                {
                    "type": "p",
                    "text": "saturate-150"
                },
                {
                    "type": "p",
                    "text": "saturate-200"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"saturate-50...\"><!-- ... --></div><divclass=\"saturate-100...\"><!-- ... --></div><divclass=\"saturate-150...\"><!-- ... --></div><divclass=\"saturate-200...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert saturate-150md:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:saturate-150to only apply thesaturate-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"saturate-50hover:saturate-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:saturate-150to apply thesaturate-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"saturate-50md:saturate-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposesaturateutilities. You can customize these values by editingtheme.saturateortheme.extend.saturatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{saturate:{25:'.25',75:'.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offsaturatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"saturate-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing element saturation",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scale",
            "title": "Scale - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transforms",
                        "Scale"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Scaling an element"
                },
                {
                    "type": "p",
                    "text": "Use thescale-*,scale-x-*, andscale-y-*utilities to scale an element."
                },
                {
                    "type": "p",
                    "text": "scale-75"
                },
                {
                    "type": "p",
                    "text": "scale-100"
                },
                {
                    "type": "p",
                    "text": "scale-125"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"scale-75...\"><imgclass=\"scale-100...\"><imgclass=\"scale-125...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative scale value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"-scale-50\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing transforms"
                },
                {
                    "type": "p",
                    "text": "To remove all of the transforms on an element at once, use thetransform-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-75 translate-x-4 skew-y-3md:transform-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hardware acceleration"
                },
                {
                    "type": "p",
                    "text": "If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding thetransform-gpuutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-150transform-gpu\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Usetransform-cputo force things back to the CPU if you need to undo this conditionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:scale-125to only apply thescale-125utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:scale-125\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:scale-125to apply thescale-125utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:scale-125\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposescaleutilities. You can customize these values by editingtheme.scaleortheme.extend.scalein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{scale:{'175':'1.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offscalevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-[1.7]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Scaling an element",
                        "Using negative values",
                        "Removing transforms",
                        "Hardware acceleration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/screen-readers",
            "title": "Screen Readers - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Accessibility",
                        "Screen Readers"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Screen-reader-only elements"
                },
                {
                    "type": "p",
                    "text": "Usesr-onlyto hide an element visually without hiding it from screen readers:"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#\"><svg><!-- ... --></svg><spanclass=\"sr-only\">Settings</span></a>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Undoing screen-reader-only elements"
                },
                {
                    "type": "p",
                    "text": "Usenot-sr-onlyto undosr-only, making an element visible to sighted users as well as screen readers. This can be useful when you want to visually hide something on small screens but show it on larger screens for example:"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#\"><svg><!-- ... --></svg><spanclass=\"sr-only sm:not-sr-only\">Settings</span></a>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:not-sr-onlyto only apply thenot-sr-onlyutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#content\"class=\"sr-onlyfocus:not-sr-only\">Skip to content</a>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:not-sr-onlyto apply thenot-sr-onlyutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sr-onlymd:not-sr-only\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Screen-reader-only elements",
                        "Undoing screen-reader-only elements",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/screens",
            "title": "Customizing Screens - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Customizing Screens"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Configuring custom screens"
                },
                {
                    "type": "p",
                    "text": "You define your project’s breakpoints in thetheme.screenssection of yourtailwind.config.jsfile. The keys become yourresponsive modifiers(likemd:text-center), and the values are themin-widthwhere that breakpoint should start."
                },
                {
                    "type": "p",
                    "text": "The default breakpoints are inspired by common device resolutions:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'sm':'640px',// => @media (min-width: 640px) { ... }'md':'768px',// => @media (min-width: 768px) { ... }'lg':'1024px',// => @media (min-width: 1024px) { ... }'xl':'1280px',// => @media (min-width: 1280px) { ... }'2xl':'1536px',// => @media (min-width: 1536px) { ... }}}}"
                },
                {
                    "type": "p",
                    "text": "Feel free to have as few or as many screens as you want, naming them in whatever way you’d prefer for your project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding the defaults"
                },
                {
                    "type": "p",
                    "text": "To completely replace the default breakpoints, add your customscreensconfiguration directly under thethemekey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'sm':'576px',// => @media (min-width: 576px) { ... }'md':'960px',// => @media (min-width: 960px) { ... }'lg':'1440px',// => @media (min-width: 1440px) { ... }},}}"
                },
                {
                    "type": "p",
                    "text": "Any default screens you haven’t overridden (such asxlusing the above example) will be removed and will not be available as screen modifiers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding a single screen"
                },
                {
                    "type": "p",
                    "text": "To override a single screen size (likelg), add your customscreensvalue under thetheme.extendkey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{screens:{'lg':'992px',// => @media (min-width: 992px) { ... }},},},}"
                },
                {
                    "type": "p",
                    "text": "This will replace the default value for that breakpoint with the specified value."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding new breakpoints"
                },
                {
                    "type": "p",
                    "text": "The easiest way to add a new breakpoint is using theextendkey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{screens:{'3xl':'1600px',},},},plugins:[],}"
                },
                {
                    "type": "p",
                    "text": "Tailwind will automatically sort your breakpoints to make sure smaller breakpoints are inserted first, and larger breakpoints are appended to the end."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using custom screen names"
                },
                {
                    "type": "p",
                    "text": "You can name your custom screens whatever you like, and are not limited to following thesm/md/lg/xl/2xlconvention that Tailwind uses by default."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'tablet':'640px',// => @media (min-width: 640px) { ... }'laptop':'1024px',// => @media (min-width: 1024px) { ... }'desktop':'1280px',// => @media (min-width: 1280px) { ... }},}}"
                },
                {
                    "type": "p",
                    "text": "Your responsive modifiers will reflect these custom screen names, so using them in your HTML would now look like this:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-1tablet:grid-cols-2laptop:grid-cols-3desktop:grid-cols-4\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Configuring custom screens",
                        "Overriding the defaults",
                        "Overriding a single screen",
                        "Adding new breakpoints",
                        "Using custom screen names"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-behavior",
            "title": "Scroll Behavior - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Behavior"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding smooth scrolling"
                },
                {
                    "type": "p",
                    "text": "Use thescroll-smoothutility to enable smooth scrolling within an element."
                },
                {
                    "type": "code",
                    "code": "<htmlclass=\"scroll-smooth\"><!-- ... --></html>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:scroll-autoto only apply thescroll-autoutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<htmlclass=\"scroll-smoothfocus:scroll-auto\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:scroll-autoto apply thescroll-autoutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<htmlclass=\"scroll-smoothmd:scroll-auto\"><!-- ... --></html>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding smooth scrolling",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-margin",
            "title": "Scroll Margin - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Margin"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the scroll margin"
                },
                {
                    "type": "p",
                    "text": "Use thescroll-mt-*,scroll-mr-*,scroll-mb-*, andscroll-ml-*utilities to set the scroll offset around items within a snap container."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x ...\"><divclass=\"scroll-ml-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"scroll-ml-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"scroll-ml-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"scroll-ml-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"scroll-ml-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative scroll margin value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-scroll-ml-6snap-start ...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use thescroll-ms-*andscroll-me-*utilities to set thescroll-margin-inline-startandscroll-margin-inline-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"snap-x ...\"><divclass=\"scroll-ms-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><!-- ... --></div></div><divdir=\"rtl\"><divclass=\"snap-x ...\"><divclass=\"scroll-ms-6snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:scroll-m-0to only apply thescroll-m-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-m-8hover:scroll-m-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:scroll-m-0to apply thescroll-m-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-m-8md:scroll-m-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s scroll margin scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'96':'24rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the scroll margin scale by editingtheme.scrollMarginortheme.extend.scrollMarginin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{scrollMargin:{'96':'24rem',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offscroll-marginvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-m-[24rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the scroll margin",
                        "Using negative values",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-padding",
            "title": "Scroll Padding - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Padding"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the scroll padding"
                },
                {
                    "type": "p",
                    "text": "Use thescroll-pt-*,scroll-pr-*,scroll-pb-*, andscroll-pl-*utilities to set the scroll offset of an element within a snap container."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-pl-6snap-x ...\"><divclass=\"snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use thescroll-ps-*andscroll-pe-*utilities to set thescroll-padding-inline-startandscroll-padding-inline-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"scroll-ps-6snap-x ...\"><!-- ... --></div></div><divdir=\"rtl\"><divclass=\"scroll-ps-6snap-x ...\"><!-- ... --></div></div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:scroll-p-0to only apply thescroll-p-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-p-8hover:scroll-p-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:scroll-p-0to apply thescroll-p-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-p-8md:scroll-p-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s scroll padding scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'96':'24rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the scroll padding scale by editingtheme.scrollPaddingortheme.extend.scrollPaddingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{scrollPadding:{'96':'24rem',},}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offscroll-paddingvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scroll-p-[24rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the scroll padding",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-snap-align",
            "title": "Scroll Snap Align - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Snap Align"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Snapping to the center"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-centerutility to snap an element to its center when being scrolled inside a snap container."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Snapping to the start"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-startutility to snap an element to its start when being scrolled inside a snap container."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-start...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Snapping to the end"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-endutility to snap an element to its end when being scrolled inside a snap container."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-end...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:snap-startto only apply thesnap-startutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-centerhover:snap-start\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:snap-startto apply thesnap-startutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-centermd:snap-start\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Snapping to the center",
                        "Snapping to the start",
                        "Snapping to the end",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-snap-stop",
            "title": "Scroll Snap Stop - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Snap Stop"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Forcing snap position stops"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-alwaysutility together with thesnap-mandatoryutility to force a snap container to always stop on an element before the user can continue scrolling to the next item."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x snap-mandatory...\"><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-alwayssnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Skipping snap position stops"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-normalutility to allow a snap container to skip past possible scroll snap positions."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-normalsnap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:snap-normalto only apply thesnap-normalutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-alwayshover:snap-normal\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:snap-normalto apply thesnap-normalutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-alwaysmd:snap-normal\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Forcing snap position stops",
                        "Skipping snap position stops",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/scroll-snap-type",
            "title": "Scroll Snap Type - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Scroll Snap Type"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Horizontal scroll snapping"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-xutility to enable horizontal scroll snapping within an element."
                },
                {
                    "type": "p",
                    "text": "For scroll snapping to work, you need to also set thescroll snap alignmenton the children within the element."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-x...\"><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Mandatory scroll snapping"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-mandatoryutility to force a snap container to always come to rest on a snap point."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-mandatorysnap-x ...\"><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1559333086-b0a56225a93c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Proximity scroll snapping"
                },
                {
                    "type": "p",
                    "text": "Use thesnap-proximityutility to make a snap container come to rest on snap points that are close in proximity. This is the browser default."
                },
                {
                    "type": "p",
                    "text": "Scroll in the grid of images to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"snap-proximitysnap-x ...\"><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1604999565976-8913ad2ddb7c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1540206351-d6465b3ac5c1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1622890806166-111d7f6c7c97?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1590523277543-a94d2e4eb00b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div><divclass=\"snap-center ...\"><imgsrc=\"https://images.unsplash.com/photo-1575424909138-46b05e5919ec?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=320&h=160&q=80\"/></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:snap-xto only apply thesnap-xutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:snap-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:snap-xto apply thesnap-xutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:snap-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Horizontal scroll snapping",
                        "Mandatory scroll snapping",
                        "Proximity scroll snapping",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/sepia",
            "title": "Sepia - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Filters",
                        "Sepia"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding sepia filters"
                },
                {
                    "type": "p",
                    "text": "Use thesepiaandsepia-0utilities to control whether an element should be rendered as sepia or in full color."
                },
                {
                    "type": "p",
                    "text": "sepia-0"
                },
                {
                    "type": "p",
                    "text": "sepia"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sepia-0...\"><!-- ... --></div><divclass=\"sepia...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing filters"
                },
                {
                    "type": "p",
                    "text": "To remove all of the filters on an element at once, use thefilter-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"blur-md invert sepiamd:filter-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove filters conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:sepia-0to only apply thesepia-0utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sepiahover:sepia-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:sepia-0to apply thesepia-0utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sepiamd:sepia-0\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposesepiautilities. You can customize these values by editingtheme.sepiaortheme.extend.sepiain yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{sepia:{25:'.25',75:'.75',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offsepiavalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"sepia-[.25]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding sepia filters",
                        "Removing filters",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/size",
            "title": "Size - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Size"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed sizes"
                },
                {
                    "type": "p",
                    "text": "Use utilities likesize-px,size-1, andsize-64to set an element to a fixed width and height at the same time."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"size-16...\">size-16</div><divclass=\"size-20...\">size-20</div><divclass=\"size-24...\">size-24</div><divclass=\"size-32...\">size-32</div><divclass=\"size-40...\">size-40</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Percentage sizes"
                },
                {
                    "type": "p",
                    "text": "Usesize-fullto set an element’s width and height to be 100% of the parent container’s width and height."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"h-56 p-2 ...\"><divclass=\"size-full...\">size-full</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resetting the size"
                },
                {
                    "type": "p",
                    "text": "Thesize-autoutility can be useful if you need to remove an element’s assigned width and height under a specific condition, like at a particular breakpoint:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"size-full md:size-auto\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:size-fullto only apply thesize-fullutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"size-48hover:size-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:size-fullto apply thesize-fullutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"size-48md:size-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s size scale is a combination of thedefault spacing scaleas well as some additional values specific to sizing."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customize size separately, use thetheme.sizesection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{size:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offsizevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"size-[32rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Fixed sizes",
                        "Percentage sizes",
                        "Resetting the size",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/skew",
            "title": "Skew - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transforms",
                        "Skew"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Skewing an element"
                },
                {
                    "type": "p",
                    "text": "Use theskew-x-*andskew-y-*utilities to skew an element."
                },
                {
                    "type": "p",
                    "text": "skew-y-0"
                },
                {
                    "type": "p",
                    "text": "skew-y-3"
                },
                {
                    "type": "p",
                    "text": "skew-y-6"
                },
                {
                    "type": "p",
                    "text": "skew-y-12"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"skew-y-0...\"><imgclass=\"skew-y-3...\"><imgclass=\"skew-y-6...\"><imgclass=\"skew-y-12...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative skew value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"-skew-y-6...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing transforms"
                },
                {
                    "type": "p",
                    "text": "To remove all of the transforms on an element at once, use thetransform-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-75 translate-x-4 skew-y-3md:transform-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hardware acceleration"
                },
                {
                    "type": "p",
                    "text": "If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding thetransform-gpuutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"skew-y-6transform-gpu\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Usetransform-cputo force things back to the CPU if you need to undo this conditionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:skew-y-12to only apply theskew-y-12utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:skew-y-12\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:skew-y-12to apply theskew-y-12utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:skew-y-12\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind includes a handful of general purposeskewutilities. You can customize these values by editingtheme.skewortheme.extend.skewin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{skew:{'17':'17deg',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offskewvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"skew-y-[17deg]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Skewing an element",
                        "Using negative values",
                        "Removing transforms",
                        "Hardware acceleration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/space",
            "title": "Space Between - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Spacing",
                        "Space Between"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add horizontal space between children"
                },
                {
                    "type": "p",
                    "text": "Use thespace-x-*utilities to control the horizontal space between elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flexspace-x-4...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Add vertical space between children"
                },
                {
                    "type": "p",
                    "text": "Use thespace-y-*utilities to control the vertical space between elements."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-colspace-y-4...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Reversing children order"
                },
                {
                    "type": "p",
                    "text": "If your elements are in reverse order (using sayflex-row-reverseorflex-col-reverse), use thespace-x-reverseorspace-y-reverseutilities to ensure the space is added to the correct side of each element."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex flex-row-reversespace-x-4 space-x-reverse...\"><div>01</div><div>02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative space value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex-space-x-4...\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Limitations"
                },
                {
                    "type": "p",
                    "text": "These utilities are really just a shortcut for adding margin to all-but-the-first-item in a group, and aren’t designed to handle complex cases like grids, layouts that wrap, or situations where the children are rendered in a complex custom order rather than their natural DOM order."
                },
                {
                    "type": "p",
                    "text": "For those situations, it’s better to use thegap utilitieswhen possible, or add margin to every element with a matching negative margin on the parent:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flow-root\"><divclass=\"-m-2 flex flex-wrap\"><divclass=\"m-2 ...\"></div><divclass=\"m-2 ...\"></div><divclass=\"m-2 ...\"></div></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Cannot be paired with divide utilities"
                },
                {
                    "type": "p",
                    "text": "Thespace-*utilities are not designed to work together with thedivide utilities. For those situations, consider adding margin/padding utilities to the children instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:space-x-8to only apply thespace-x-8utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex space-x-2hover:space-x-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:space-x-8to apply thespace-x-8utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex space-x-2md:space-x-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s space scale uses thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the space scale by editingtheme.spaceortheme.extend.spacein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{space:{'5px':'5px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offspacevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"space-y-[5px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Add horizontal space between children",
                        "Add vertical space between children",
                        "Reversing children order",
                        "Using negative values",
                        "Limitations",
                        "Cannot be paired with divide utilities",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/stroke",
            "title": "Stroke - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "SVG",
                        "Stroke"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the stroke color"
                },
                {
                    "type": "p",
                    "text": "Use thestroke-*utilities to change the stroke color of an SVG."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-cyan-500...\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "This can be useful for styling icon sets likeHeroicons."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:stroke-cyan-700to only apply thestroke-cyan-700utility onhover."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-cyan-500hover:stroke-cyan-700\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:stroke-cyan-700to apply thestroke-cyan-700utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-cyan-500md:stroke-cyan-700\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable asstrokecolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourstrokecolors by editingtheme.strokeortheme.extend.strokein yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offstrokevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-[#243c5a]\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the stroke color",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/stroke-width",
            "title": "Stroke Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "SVG",
                        "Stroke Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the stroke width"
                },
                {
                    "type": "p",
                    "text": "Use thestroke-*utilities to set the stroke width of an SVG."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-1...\"></svg><svgclass=\"stroke-2...\"></svg>"
                },
                {
                    "type": "p",
                    "text": "This can be useful for styling icon sets likeHeroicons."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:stroke-2to only apply thestroke-2utility onhover."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-1hover:stroke-2\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:stroke-2to apply thestroke-2utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-1md:stroke-2\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides threestroke-widthutilities. You change, add, or remove these by editing thetheme.strokeWidthsection of your Tailwind config."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{strokeWidth:{'2':'2px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offstroke-widthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<svgclass=\"stroke-[2px]\"><!-- ... --></svg>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the stroke width",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/table-layout",
            "title": "Table Layout - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Tables",
                        "Table Layout"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Auto"
                },
                {
                    "type": "p",
                    "text": "Usetable-autoto allow the table to automatically size columns to fit the contents of the cell."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"table-auto\"><thead><tr><th>Song</th><th>Artist</th><th>Year</th></tr></thead><tbody><tr><td>The Sliding Mr. Bones (Next Stop, Pottersville)</td><td>Malcolm Lockyer</td><td>1961</td></tr><tr><td>Witchy Woman</td><td>The Eagles</td><td>1972</td></tr><tr><td>Shining Star</td><td>Earth, Wind, and Fire</td><td>1975</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed"
                },
                {
                    "type": "p",
                    "text": "Usetable-fixedto allow the table to ignore the content and use fixed widths for columns. The width of the first row will set the column widths for the whole table."
                },
                {
                    "type": "p",
                    "text": "You can manually set the widths for some columns and the rest of the available width will be divided evenly amongst the columns without explicit width."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"table-fixed\"><thead><tr><th>Song</th><th>Artist</th><th>Year</th></tr></thead><tbody><tr><td>The Sliding Mr. Bones (Next Stop, Pottersville)</td><td>Malcolm Lockyer</td><td>1961</td></tr><tr><td>Witchy Woman</td><td>The Eagles</td><td>1972</td></tr><tr><td>Shining Star</td><td>Earth, Wind, and Fire</td><td>1975</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:table-fixedto only apply thetable-fixedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"hover:table-fixed\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:table-fixedto apply thetable-fixedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<tableclass=\"md:table-fixed\"><!-- ... --></table>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Auto",
                        "Fixed",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-align",
            "title": "Text Align - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Align"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text alignment"
                },
                {
                    "type": "p",
                    "text": "Use thetext-left,text-center,text-right, andtext-justifyutilities to control the text alignment of an element."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-left...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-center...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-right...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was terrified. But I pressed on, and as I made my way past the breakers a strange calm came over me. I don't know if it was divine intervention or the kinship of all living things but I tell you Jerry at that moment, Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-justify...\">So I started to walk into the water...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:text-centerto only apply thetext-centerutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-lefthover:text-center\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:text-centerto apply thetext-centerutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-leftmd:text-center\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text alignment",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-color",
            "title": "Text Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text color"
                },
                {
                    "type": "p",
                    "text": "Use thetext-*utilities to control the text color of an element."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-blue-600\">The quick brown fox...</p><pclass=\"text-sky-400\">The quick brown fox...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s text color."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-blue-600/100\">The quick brown fox...</p><pclass=\"text-blue-600/75\">The quick brown fox...</p><pclass=\"text-blue-600/50\">The quick brown fox...</p><pclass=\"text-blue-600/25\">The quick brown fox...</p><pclass=\"text-blue-600/0\">The quick brown fox...</p><pclass=\"text-sky-400/100\">The quick brown fox...</p><pclass=\"text-sky-400/75\">The quick brown fox...</p><pclass=\"text-sky-400/50\">The quick brown fox...</p><pclass=\"text-sky-400/25\">The quick brown fox...</p><pclass=\"text-sky-400/0\">The quick brown fox...</p>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-blue-600/[.06]\">The quick brown fox...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:text-blue-600to only apply thetext-blue-600utility onhover."
                },
                {
                    "type": "p",
                    "text": "Try hovering over the text to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-slate-500hover:text-blue-600\">The quick brown fox...</p><pclass=\"text-slate-400hover:text-sky-400\">The quick brown fox...</p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:text-green-600to apply thetext-green-600utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-blue-600md:text-green-600\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable astextcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourtextcolors by editingtheme.textColorortheme.extend.textColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offcolorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-[#50d71e]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-decoration",
            "title": "Text Decoration - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Decoration"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text decoration"
                },
                {
                    "type": "p",
                    "text": "Control how text is decorated with theunderline,no-underline, andline-throughutilities."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underline...\">The quick brown fox ...</p><pclass=\"overline...\">The quick brown fox ...</p><pclass=\"line-through...\">The quick brown fox ...</p><pclass=\"no-underline...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:underlineto only apply theunderlineutility onhover."
                },
                {
                    "type": "p",
                    "text": "Try hovering over the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<ahref=\"#\"class=\"no-underlinehover:underline...\">Link</a>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:underlineto apply theunderlineutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"no-underlinemd:underline\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text decoration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-decoration-color",
            "title": "Text Decoration Color - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Decoration Color"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text decoration color"
                },
                {
                    "type": "p",
                    "text": "Use thedecoration-*utilities to change the color of an element’stext decoration."
                },
                {
                    "type": "p",
                    "text": "I’m Derek, an astro-engineer based in Tattooine. I like to build X-Wings atMy Company, Inc. Outside of work, I like towatch pod-racingand havelight-saberfights."
                },
                {
                    "type": "code",
                    "code": "<div><p>I’m Derek, an astro-engineer based in Tattooine. I like to build X-Wings at<aclass=\"underlinedecoration-sky-500\">My Company, Inc</a>.\n    Outside of work, I like to<aclass=\"underlinedecoration-pink-500\">watch\n    pod-racing</a>and have<aclass=\"underlinedecoration-indigo-500\">light-saber</a>fights.</p></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the opacity"
                },
                {
                    "type": "p",
                    "text": "Use the color opacity modifier to control the opacity of an element’s text decoration color."
                },
                {
                    "type": "p",
                    "text": "I’m Derek, an astro-engineer based in Tattooine. I like to build X-Wings atMy Company, Inc. Outside of work, I like towatch pod-racingand havelight-saberfights."
                },
                {
                    "type": "code",
                    "code": "<div><p>I’m Derek, an astro-engineer based in Tattooine. I like to build X-Wings at<aclass=\"underlinedecoration-sky-500/30\">My Company, Inc</a>.\n    Outside of work, I like to<aclass=\"underlinedecoration-pink-500/30\">watch\n    pod-racing</a>and have<aclass=\"underlinedecoration-indigo-500/30\">light-saber</a>fights.</p></div>"
                },
                {
                    "type": "p",
                    "text": "You can use any value defined in youropacity scale, or use arbitrary values if you need to deviate from your design tokens."
                },
                {
                    "type": "code",
                    "code": "<strongclass=\"underlinedecoration-sky-500/[.33]\"></strong>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:decoration-blue-400to only apply thedecoration-blue-400utility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underline decoration-sky-600hover:decoration-blue-400\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:decoration-blue-400to apply thedecoration-blue-400utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underline decoration-sky-600md:decoration-blue-400\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind makes the entiredefault color paletteavailable astext decorationcolors. You cancustomize your color paletteby editingtheme.colorsortheme.extend.colorsin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{colors:{'regal-blue':'#243c5a',},}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just yourtext decorationcolors by editingtheme.textDecorationColorortheme.extend.textDecorationColorin yourtailwind.config.jsfile."
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtext-decoration-colorvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"decoration-[#50d71e]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text decoration color",
                        "Changing the opacity",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-decoration-style",
            "title": "Text Decoration Style - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Decoration Style"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text decoration style"
                },
                {
                    "type": "p",
                    "text": "Use thedecoration-*utilities to change the style of an element’stext decoration."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinedecoration-solid...\">The quick brown fox...</p><pclass=\"underlinedecoration-double...\">The quick brown fox...</p><pclass=\"underlinedecoration-dotted...\">The quick brown fox...</p><pclass=\"underlinedecoration-dashed...\">The quick brown fox...</p><pclass=\"underlinedecoration-wavy...\">The quick brown fox...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:decoration-dashedto only apply thedecoration-dashedutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinehover:decoration-dashed\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:decoration-dashedto apply thedecoration-dashedutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinemd:decoration-dashed\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text decoration style",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-decoration-thickness",
            "title": "Text Decoration Thickness - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Decoration Thickness"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the text decoration thickness"
                },
                {
                    "type": "p",
                    "text": "Use thedecoration-*utilities to change the thickness of an element’stext decoration."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinedecoration-1...\">The quick brown fox...</p><pclass=\"underlinedecoration-2...\">The quick brown fox...</p><pclass=\"underlinedecoration-4...\">The quick brown fox...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:decoration-4to only apply thedecoration-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinehover:decoration-4\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:decoration-4to apply thedecoration-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinemd:decoration-4\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can customize thedecoration-*utilities by editingtheme.textDecorationThicknessortheme.extend.textDecorationThicknessin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{textDecorationThickness:{3:'3px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtext-decoration-thicknessvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"decoration-[3px]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the text decoration thickness",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-indent",
            "title": "Text Indent - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Indent"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Adding a text indent"
                },
                {
                    "type": "p",
                    "text": "Use theindent-*utilities to set the amount of empty space (indentation) that’s shown before text in a block."
                },
                {
                    "type": "p",
                    "text": "So I started to walk into the water. I won't lie to you boys, I was\n    terrified. But I pressed on, and as I made my way past the breakers\n    a strange calm came over me. I don't know if it was divine intervention\n    or the kinship of all living things but I tell you Jerry at that moment,\n    Iwasa marine biologist."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"indent-8\">So I started to walk into the water. I won't lie to you boys, I was\n  terrified. But I pressed on, and as I made my way past the breakers\n  a strange calm came over me. I don't know if it was divine intervention\n  or the kinship of all living things but I tell you Jerry at that moment,\n  I<em>was</em>a marine biologist.</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative text indent value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-indent-8\">So I started to walk into the water. I won't lie to...</div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:indent-8to only apply theindent-8utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"indent-4hover:indent-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:indent-8to apply theindent-8utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"indent-4md:indent-8\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "The default text indent scale is based on thedefault spacing scale. You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the text indent scale by editingtheme.textIndentortheme.extend.textIndentin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{textIndent:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtext-indentvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"indent-[50%]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Adding a text indent",
                        "Using negative values",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-overflow",
            "title": "Text Overflow - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Overflow"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Truncate"
                },
                {
                    "type": "p",
                    "text": "Usetruncateto prevent text from wrapping and truncate overflowing text with an ellipsis (…) if needed."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"truncate...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Ellipsis"
                },
                {
                    "type": "p",
                    "text": "Usetext-ellipsisto truncate overflowing text with an ellipsis (…) if needed."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-ellipsisoverflow-hidden ...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Clip"
                },
                {
                    "type": "p",
                    "text": "Usetext-clipto truncate the text at the limit of the content area."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"text-clipoverflow-hidden ...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:text-clipto only apply thetext-cliputility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"truncatehover:text-clip\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:text-clipto apply thetext-cliputility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"truncatemd:text-clip\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Truncate",
                        "Ellipsis",
                        "Clip",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-transform",
            "title": "Text Transform - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Transform"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Transforming text"
                },
                {
                    "type": "p",
                    "text": "Theuppercaseandlowercasewill uppercase and lowercase text respectively, whereascapitalizeutility will convert text to title-case. Thenormal-caseutility can be used to preserve the original casing — typically to reset capitalization at different breakpoints."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"normal-case...\">The quick brown fox ...</p><pclass=\"uppercase...\">The quick brown fox ...</p><pclass=\"lowercase...\">The quick brown fox ...</p><pclass=\"capitalize...\">The quick brown fox ...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:uppercaseto only apply theuppercaseutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"capitalizehover:uppercase\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:uppercaseto apply theuppercaseutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"capitalizemd:uppercase\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Transforming text",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-underline-offset",
            "title": "Text Underline Offset - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Underline Offset"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the underline offset"
                },
                {
                    "type": "p",
                    "text": "Use theunderline-offset-*utilities to change the offset of a text underline."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "p",
                    "text": "The quick brown fox jumps over the lazy dog."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlineunderline-offset-1...\">The quick brown fox...</p><pclass=\"underlineunderline-offset-2...\">The quick brown fox...</p><pclass=\"underlineunderline-offset-4...\">The quick brown fox...</p><pclass=\"underlineunderline-offset-8...\">The quick brown fox...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:underline-offset-4to only apply theunderline-offset-4utility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinehover:underline-offset-4\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:underline-offset-4to apply theunderline-offset-4utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underlinemd:underline-offset-4\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "You can customize thetext-underline-offsetutilities by editingtheme.textUnderlineOffsetortheme.extend.textUnderlineOffsetin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{textUnderlineOffset:{3:'3px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtext-underline-offsetvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"underline-offset-[3px]\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the underline offset",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/text-wrap",
            "title": "Text Wrap - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Text Wrap"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Wrap"
                },
                {
                    "type": "p",
                    "text": "Usetext-wrapto wrap overflowing text onto multiple lines at logical points in the text."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Beloved Manhattan soup stand closes"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"text-wrap...\"><h3>Beloved Manhattan soup stand closes</h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​No Wrap"
                },
                {
                    "type": "p",
                    "text": "Usetext-nowrapto prevent text from wrapping, allowing it to overflow if necessary."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Beloved Manhattan soup stand closes"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"text-nowrap...\"><h3>Beloved Manhattan soup stand closes</h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Balance"
                },
                {
                    "type": "p",
                    "text": "Usetext-balanceto distribute the text evenly across each line."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Beloved Manhattan soup stand closes"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<article><h3class=\"text-balance...\">Beloved Manhattan soup stand closes</h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "p",
                    "text": "For performance reasons browsers limit text balancing to blocks that are ~6 lines or less, making it best suited for headings."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pretty"
                },
                {
                    "type": "p",
                    "text": "Usetext-prettyto prevent orphans (a single word on its own line) at the end of a text block."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Beloved Manhattan soup stand closes"
                },
                {
                    "type": "p",
                    "text": "New Yorkers are facing the winter chill with less warmth this year as the city's most revered soup stand unexpectedly shutters, following a series of events that have left the community puzzled."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"text-pretty...\"><h3>Beloved Manhattan soup stand closes</h3><p>New Yorkers are facing the winter chill...</p></article>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:text-balanceto only apply thetext-balanceutility onhover."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-wraphover:text-balance\"><!-- ... --></h1>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:text-balanceto apply thetext-balanceutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<h1class=\"text-wrapmd:text-balance\"><!-- ... --></h1>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Wrap",
                        "No Wrap",
                        "Balance",
                        "Pretty",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/theme",
            "title": "Theme Configuration - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Customization",
                        "Theme Configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Thethemesection of yourtailwind.config.jsfile is where you define your project’s color palette, type scale, fonts, breakpoints, border radius values, and more."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{sm:'480px',md:'768px',lg:'976px',xl:'1440px',},colors:{'blue':'#1fb6ff','purple':'#7e5bef','pink':'#ff49db','orange':'#ff7849','green':'#13ce66','yellow':'#ffc82c','gray-dark':'#273444','gray':'#8492a6','gray-light':'#d3dce6',},fontFamily:{sans:['Graphik','sans-serif'],serif:['Merriweather','serif'],},extend:{spacing:{'128':'32rem','144':'36rem',},borderRadius:{'4xl':'2rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "We provide a sensibledefault themewith a very generous set of values to get you started, but don’t be afraid to change it or extend it; you’re encouraged to customize it as much as you need to fit the goals of your design."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Theme structure"
                },
                {
                    "type": "p",
                    "text": "Thethemeobject contains keys forscreens,colors, andspacing, as well as a key for each customizablecore plugin."
                },
                {
                    "type": "p",
                    "text": "See thetheme configuration referenceor thedefault themefor a complete list of theme options."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Screens"
                },
                {
                    "type": "p",
                    "text": "Thescreenskey allows you to customize the responsive breakpoints in your project."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{screens:{'sm':'640px','md':'768px','lg':'1024px','xl':'1280px','2xl':'1536px',}}}"
                },
                {
                    "type": "p",
                    "text": "To learn more, see thebreakpoint customization documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Colors"
                },
                {
                    "type": "p",
                    "text": "Thecolorskey allows you to customize the global color palette for your project."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{colors:{transparent:'transparent',black:'#000',white:'#fff',gray:{100:'#f7fafc',// ...900:'#1a202c',},// ...}}}"
                },
                {
                    "type": "p",
                    "text": "By default, these colors are inherited by all color-related core plugins, likebackgroundColor,borderColor,textColor, and others."
                },
                {
                    "type": "p",
                    "text": "To learn more, see thecolor customization documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Spacing"
                },
                {
                    "type": "p",
                    "text": "Thespacingkey allows you to customize the global spacing and sizing scale for your project."
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{spacing:{px:'1px',0:'0',0.5:'0.125rem',1:'0.25rem',1.5:'0.375rem',2:'0.5rem',2.5:'0.625rem',3:'0.75rem',3.5:'0.875rem',4:'1rem',5:'1.25rem',6:'1.5rem',7:'1.75rem',8:'2rem',9:'2.25rem',10:'2.5rem',11:'2.75rem',12:'3rem',14:'3.5rem',16:'4rem',20:'5rem',24:'6rem',28:'7rem',32:'8rem',36:'9rem',40:'10rem',44:'11rem',48:'12rem',52:'13rem',56:'14rem',60:'15rem',64:'16rem',72:'18rem',80:'20rem',96:'24rem',},}}"
                },
                {
                    "type": "p",
                    "text": "By default, these values are inherited by thepadding,margin,width,height,maxHeight,flex-basis,gap,inset,space,translate,scrollMargin,scrollPadding, andtextIndentcore plugins."
                },
                {
                    "type": "p",
                    "text": "To learn more, see thespacing customization documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Core plugins"
                },
                {
                    "type": "p",
                    "text": "The rest of thethemesection is used to configure which values are available for each individual core plugin."
                },
                {
                    "type": "p",
                    "text": "For example, theborderRadiuskey lets you customize which border radius utilities will be generated:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{borderRadius:{'none':'0','sm':'.125rem',DEFAULT:'.25rem','lg':'.5rem','full':'9999px',},}}"
                },
                {
                    "type": "p",
                    "text": "The keys determine the suffix for the generated classes, and the values determine the value of the actual CSS declaration."
                },
                {
                    "type": "p",
                    "text": "The exampleborderRadiusconfiguration above would generate the following CSS classes:"
                },
                {
                    "type": "code",
                    "code": ".rounded-none{border-radius:0}.rounded-sm{border-radius:.125rem}.rounded{border-radius:.25rem}.rounded-lg{border-radius:.5rem}.rounded-full{border-radius:9999px}"
                },
                {
                    "type": "p",
                    "text": "You’ll notice that using a key ofDEFAULTin the theme configuration created the classroundedwith no suffix. This is a common convention in Tailwind and is supported by all core plugins."
                },
                {
                    "type": "p",
                    "text": "To learn more about customizing a specific core plugin, visit the documentation for that plugin."
                },
                {
                    "type": "p",
                    "text": "For a complete reference of available theme properties and their default values,see the default theme configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Customizing the default theme"
                },
                {
                    "type": "p",
                    "text": "Out of the box, your project will automatically inherit the values fromthe default theme configuration. If you would like to customize the default theme, you have a few different options depending on your goals."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Extending the default theme"
                },
                {
                    "type": "p",
                    "text": "If you’d like to preserve the default values for a theme option but also add new values, add your extensions under thetheme.extendkey in your configuration file. Values under this key are merged with existingthemevalues and automatically become available as new classes that you can use."
                },
                {
                    "type": "p",
                    "text": "As an example, here we extend thefontFamilyproperty to add thefont-displayclass that can change the font used on an element:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{fontFamily:{display:'Oswald, ui-serif',// Adds a new `font-display` class}}}}"
                },
                {
                    "type": "p",
                    "text": "After adding this to your theme you can use it just like any other font family utility:"
                },
                {
                    "type": "code",
                    "code": "<h1class=\"font-display\">This uses the Oswald font</h1>"
                },
                {
                    "type": "p",
                    "text": "In some cases, properties map tovariantsthat can be placed in front of a utility to conditionally apply its styles. For example, to add a3xlscreen size that works just like the existing responsive screens, add a property under thescreenskey:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{extend:{screens:{'3xl':'1600px',// Adds a new `3xl:` screen variant}}}}"
                },
                {
                    "type": "p",
                    "text": "With this addition, a new3xlscreen size is made available alongside the existing responsive variants likesm,md,lg, etc. You can use this new variant by placing it before a utility class:"
                },
                {
                    "type": "code",
                    "code": "<blockquoteclass=\"text-base md:text-md3xl:text-lg\">Oh I gotta get on that internet, I'm late on everything!</blockquote>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Overriding the default theme"
                },
                {
                    "type": "p",
                    "text": "To override an option in the default theme, add your overrides directly under thethemesection of yourtailwind.config.js:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{// Replaces all of the default `opacity` valuesopacity:{'0':'0','20':'0.2','40':'0.4','60':'0.6','80':'0.8','100':'1',}}}"
                },
                {
                    "type": "p",
                    "text": "This will completely replace Tailwind’s default configuration for that key, so in the example above none of the default opacity utilities would be generated."
                },
                {
                    "type": "p",
                    "text": "Any keys youdo notprovide will be inherited from the default theme, so in the above example, the default theme configuration for things like colors, spacing, border-radius, background-position, etc. would be preserved."
                },
                {
                    "type": "p",
                    "text": "You can of course both override some parts of the default theme and extend other parts of the default theme within the same configuration:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{opacity:{'0':'0','20':'0.2','40':'0.4','60':'0.6','80':'0.8','100':'1',},extend:{screens:{'3xl':'1600px',}}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Referencing other values"
                },
                {
                    "type": "p",
                    "text": "If you need to reference another value in your theme, you can do so by providing a closure instead of a static value. The closure will receive an object that includes atheme()function that you can use to look up other values in your theme using dot notation."
                },
                {
                    "type": "p",
                    "text": "For example, you could generatebackground-sizeutilities for every value in your spacing scale by referencingtheme('spacing')in yourbackgroundSizeconfiguration:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{spacing:{// ...},backgroundSize:({theme})=>({auto:'auto',cover:'cover',contain:'contain',...theme('spacing')})}}"
                },
                {
                    "type": "p",
                    "text": "Thetheme()function attempts to find the value you are looking for from the fully merged theme object, so it can reference your own customizations as well as the default theme values. It also works recursively, so as long as there is a static value at the end of the chain it will be able to resolve the value you are looking for."
                },
                {
                    "type": "p",
                    "text": "Note that you can only use this kind of closure with top-level theme keys, not the keys inside of each section."
                },
                {
                    "type": "p",
                    "text": "You can’t use functions for individual values"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{fill:{gray:({theme})=>theme('colors.gray')}}}"
                },
                {
                    "type": "p",
                    "text": "Use functions for top-level theme keys"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{fill:({theme})=>({gray:theme('colors.gray')})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Referencing the default theme"
                },
                {
                    "type": "p",
                    "text": "If you’d like to reference a value in the default theme for any reason, you can import it fromtailwindcss/defaultTheme."
                },
                {
                    "type": "p",
                    "text": "One example of where this is useful is if you’d like to add a font family to one of Tailwind’s default font stacks:"
                },
                {
                    "type": "code",
                    "code": "constdefaultTheme=require('tailwindcss/defaultTheme')module.exports={theme:{extend:{fontFamily:{sans:['Lato',...defaultTheme.fontFamily.sans,]}}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling an entire core plugin"
                },
                {
                    "type": "p",
                    "text": "If you don’t want to generate any classes for a certain core plugin, it’s better to set that plugin to false in yourcorePluginsconfiguration than to provide an empty object for that key in yourthemeconfiguration."
                },
                {
                    "type": "p",
                    "text": "Don’t assign an empty object in your theme configuration"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={theme:{opacity:{},}}"
                },
                {
                    "type": "p",
                    "text": "Do disable the plugin in your corePlugins configuration"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={corePlugins:{opacity:false,}}"
                },
                {
                    "type": "p",
                    "text": "The end result is the same, but since many core plugins expose no configuration they can only be disabled usingcorePluginsanyways, so it’s better to be consistent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Configuration reference"
                },
                {
                    "type": "p",
                    "text": "Except forscreens,colors, andspacing, all of the keys in thethemeobject map to one of Tailwind’score plugins. Since many plugins are responsible for CSS properties that only accept a static set of values (likefloatfor example), note that not every plugin has a corresponding key in thethemeobject."
                },
                {
                    "type": "p",
                    "text": "All of these keys are also available under thetheme.extendkey to enableextending the default theme."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Theme structure",
                        "Screens",
                        "Colors",
                        "Spacing",
                        "Core plugins",
                        "Customizing the default theme",
                        "Extending the default theme",
                        "Overriding the default theme",
                        "Referencing other values",
                        "Referencing the default theme",
                        "Disabling an entire core plugin",
                        "Configuration reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/top-right-bottom-left",
            "title": "Top / Right / Bottom / Left - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Top / Right / Bottom / Left"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Placing a positioned element"
                },
                {
                    "type": "p",
                    "text": "Use thetop-*,right-*,bottom-*,left-*, andinset-*utilities to set the horizontal or vertical position of apositioned element."
                },
                {
                    "type": "code",
                    "code": "<!-- Pin to top left corner --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteleft-0 top-0h-16 w-16 ...\">01</div></div><!-- Span top edge --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteinset-x-0 top-0h-16 ...\">02</div></div><!-- Pin to top right corner --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absolutetop-0 right-0h-16 w-16 ...\">03</div></div><!-- Span left edge --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteinset-y-0 left-0w-16 ...\">04</div></div><!-- Fill entire parent --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteinset-0...\">05</div></div><!-- Span right edge --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteinset-y-0 right-0w-16 ...\">06</div></div><!-- Pin to bottom left corner --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absolutebottom-0 left-0h-16 w-16 ...\">07</div></div><!-- Span bottom edge --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absoluteinset-x-0 bottom-0h-16 ...\">08</div></div><!-- Pin to bottom right corner --><divclass=\"relative h-32 w-32 ...\"><divclass=\"absolutebottom-0 right-0h-16 w-16 ...\">09</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative top/right/bottom/left value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"relative h-32 w-32 ...\"><divclass=\"absolute h-14 w-14-left-4 -top-4...\"></div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using logical properties"
                },
                {
                    "type": "p",
                    "text": "Use thestart-*andend-*utilities to set theinset-inline-startandinset-inline-endlogical properties, which map to either the left or right side based on the text direction."
                },
                {
                    "type": "p",
                    "text": "Left-to-right"
                },
                {
                    "type": "p",
                    "text": "Right-to-left"
                },
                {
                    "type": "code",
                    "code": "<divdir=\"ltr\"><divclass=\"relative h-32 w-32 ...\"><divclass=\"absolute h-14 w-14 top-0start-0...\"></div></div><div><divdir=\"rtl\"><divclass=\"relative h-32 w-32 ...\"><divclass=\"absolute h-14 w-14 top-0start-0...\"></div></div><div>"
                },
                {
                    "type": "p",
                    "text": "For more control, you can also use theLTR and RTL modifiersto conditionally apply specific styles depending on the current text direction."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:top-6to only apply thetop-6utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-4hover:top-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:top-6to apply thetop-6utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-4md:top-6\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides top/right/bottom/left/inset utilities for a combination of thedefault spacing scale,auto,fullas well as some additional fraction values."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'3px':'3px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the top/right/bottom/left/inset scale by editingtheme.insetortheme.extend.insetin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{inset:{'3px':'3px',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offpositionvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"top-[3px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Placing a positioned element",
                        "Using negative values",
                        "Using logical properties",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/touch-action",
            "title": "Touch Action - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Touch Action"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the touch action"
                },
                {
                    "type": "p",
                    "text": "Use thetouch-*utilities to control how an element can be scrolled (panned) and zoomed (pinched) on touchscreens."
                },
                {
                    "type": "p",
                    "text": "Try panning these images on a touchscreen"
                },
                {
                    "type": "p",
                    "text": "touch-auto"
                },
                {
                    "type": "p",
                    "text": "touch-none"
                },
                {
                    "type": "p",
                    "text": "touch-pan-x"
                },
                {
                    "type": "p",
                    "text": "touch-pan-y"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-full h-48overflow-auto touch-auto...\"><imgclass=\"w-[150%] max-w-none h-auto\"src=\"...\"/></div><divclass=\"w-full h-48overflow-auto touch-none...\"><imgclass=\"w-[150%] max-w-none h-auto\"src=\"...\"/></div><divclass=\"w-full h-48overflow-auto touch-pan-x...\"><imgclass=\"w-[150%] max-w-none h-auto\"src=\"...\"/></div><divclass=\"w-full h-48overflow-auto touch-pan-y...\"><imgclass=\"w-[150%] max-w-none h-auto\"src=\"...\"/></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usefocus:touch-pan-xto only apply thetouch-pan-xutility onfocus."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"focus:touch-pan-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:touch-pan-xto apply thetouch-pan-xutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:touch-pan-x\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the touch action",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/transform-origin",
            "title": "Transform Origin - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transforms",
                        "Transform Origin"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing the transform origin"
                },
                {
                    "type": "p",
                    "text": "Specify an element’s transform origin using theorigin-*utilities."
                },
                {
                    "type": "p",
                    "text": "origin-center"
                },
                {
                    "type": "p",
                    "text": "origin-top-left"
                },
                {
                    "type": "p",
                    "text": "origin-bottom"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"origin-centerrotate-45 ...\"><imgclass=\"origin-top-leftrotate-12 ...\"><imgclass=\"origin-bottom-rotate-12 ...\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:origin-topto only apply theorigin-toputility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"origin-centerhover:origin-top\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:origin-topto apply theorigin-toputility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"origin-centermd:origin-top\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind providestransform-originutilities for all of the built-in browser keyword options. You can customize these values by editingtheme.transformOriginortheme.extend.transformOriginin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{transformOrigin:{'top-left-1/3-3/4':'33% 75%',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtransform-originvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"origin-[33%_75%]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing the transform origin",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/transition-delay",
            "title": "Transition Delay - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transitions & Animation",
                        "Transition Delay"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Delaying transitions"
                },
                {
                    "type": "p",
                    "text": "Use thedelay-*utilities to control an element’s transition-delay."
                },
                {
                    "type": "p",
                    "text": "Hover each button to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "delay-150"
                },
                {
                    "type": "p",
                    "text": "delay-300"
                },
                {
                    "type": "p",
                    "text": "delay-700"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"transitiondelay-150duration-300 ease-in-out ...\">Button A</button><buttonclass=\"transitiondelay-300duration-300 ease-in-out ...\">Button B</button><buttonclass=\"transitiondelay-700duration-300 ease-in-out ...\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:delay-300to only apply thedelay-300utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-300 delay-150hover:delay-300\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:delay-300to apply thedelay-300utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-300 delay-150md:delay-300\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides eight general purpose transition-delay utilities. You can customize these values by editingtheme.transitionDelayortheme.extend.transitionDelayin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{transitionDelay:{'2000':'2000ms',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtransition-delayvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"delay-[2000ms]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Delaying transitions",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/transition-duration",
            "title": "Transition Duration - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transitions & Animation",
                        "Transition Duration"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Changing transition duration"
                },
                {
                    "type": "p",
                    "text": "Use theduration-*utilities to control an element’s transition-duration."
                },
                {
                    "type": "p",
                    "text": "Hover each button to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "duration-150"
                },
                {
                    "type": "p",
                    "text": "duration-300"
                },
                {
                    "type": "p",
                    "text": "duration-700"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"transitionduration-150ease-in-out ...\">Button A</button><buttonclass=\"transitionduration-300ease-in-out ...\">Button B</button><buttonclass=\"transitionduration-700ease-in-out ...\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:duration-150to only apply theduration-150utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-0hover:duration-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:duration-150to apply theduration-150utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-0md:duration-150\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides eight general purpose transition-duration utilities. You can customize these values by editingtheme.transitionDurationortheme.extend.transitionDurationin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{transitionDuration:{'2000':'2000ms',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtransition-durationvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"duration-[2000ms]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Changing transition duration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/transition-property",
            "title": "Transition Property - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transitions & Animation",
                        "Transition Property"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling transitioned properties"
                },
                {
                    "type": "p",
                    "text": "Use thetransition-*utilities to specify which properties should transition when they change."
                },
                {
                    "type": "p",
                    "text": "Hover the button to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"transitionease-in-out delay-150 bg-blue-500 hover:-translate-y-1 hover:scale-110 hover:bg-indigo-500 duration-300 ...\">Save Changes</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefers-reduced-motion"
                },
                {
                    "type": "p",
                    "text": "For situations where the user has specified that they prefer reduced motion, you can conditionally apply animations and transitions using themotion-safeandmotion-reducevariants:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"transition transform hover:-translate-y-1motion-reduce:transition-none motion-reduce:hover:transform-none...\">Hover me</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:transition-allto only apply thetransition-allutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:transition-all\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:transition-allto apply thetransition-allutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:transition-all\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides transition-property utilities for seven common property combinations. You can customize these values by editingtheme.transitionPropertyortheme.extend.transitionPropertyin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{transitionProperty:{'height':'height','spacing':'margin, padding',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtransition-propertyvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition-[height]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling transitioned properties",
                        "Prefers-reduced-motion",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/transition-timing-function",
            "title": "Transition Timing Function - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transitions & Animation",
                        "Transition Timing Function"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Controlling the easing curve"
                },
                {
                    "type": "p",
                    "text": "Use theease-*utilities to control an element’s easing curve."
                },
                {
                    "type": "p",
                    "text": "Hover each button to see the expected behaviour"
                },
                {
                    "type": "p",
                    "text": "ease-in"
                },
                {
                    "type": "p",
                    "text": "ease-out"
                },
                {
                    "type": "p",
                    "text": "ease-in-out"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"ease-induration-300 ...\">Button A</button><buttonclass=\"ease-outduration-300 ...\">Button B</button><buttonclass=\"ease-in-outduration-300 ...\">Button C</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:ease-into only apply theease-inutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-150 ease-outhover:ease-in\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:ease-into apply theease-inutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transition duration-150 ease-outmd:ease-in\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides four general purpose transition-timing-function utilities. You can customize these values by editingtheme.transitionTimingFunctionortheme.extend.transitionTimingFunctionin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{transitionTimingFunction:{'in-expo':'cubic-bezier(0.95, 0.05, 0.795, 0.035)','out-expo':'cubic-bezier(0.19, 1, 0.22, 1)',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtransition-timing-functionvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"ease-[cubic-bezier(0.95,0.05,0.795,0.035)]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Controlling the easing curve",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/translate",
            "title": "Translate - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Transforms",
                        "Translate"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Translating an element"
                },
                {
                    "type": "p",
                    "text": "Use thetranslate-x-*andtranslate-y-*utilities to translate an element."
                },
                {
                    "type": "p",
                    "text": "translate-y-6"
                },
                {
                    "type": "p",
                    "text": "-translate-y-6"
                },
                {
                    "type": "p",
                    "text": "translate-x-6"
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"translate-y-6...\"><imgclass=\"-translate-y-6...\"><imgclass=\"translate-x-6...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative translate value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<imgclass=\"-translate-y-6...\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removing transforms"
                },
                {
                    "type": "p",
                    "text": "To remove all of the transforms on an element at once, use thetransform-noneutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"scale-75 translate-x-4 skew-y-3md:transform-none\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you want to remove transforms conditionally, such as on hover or at a particular breakpoint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hardware acceleration"
                },
                {
                    "type": "p",
                    "text": "If your transition performs better when rendered by the GPU instead of the CPU, you can force hardware acceleration by adding thetransform-gpuutility:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"translate-y-6transform-gpu\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Usetransform-cputo force things back to the CPU if you need to undo this conditionally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:translate-y-12to only apply thetranslate-y-12utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:translate-y-12\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:translate-y-12to apply thetranslate-y-12utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:translate-y-12\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides fixed valuetranslateutilities that match thedefault spacing scale, as well as 50% and 100% variations for translating relative to the element’s size.  You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'4.25':'17rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can customize just the translate scale by editingtheme.translateortheme.extend.translatein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{translate:{'4.25':'17rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offtranslatevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"translate-y-[17rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Translating an element",
                        "Using negative values",
                        "Removing transforms",
                        "Hardware acceleration",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/typography-plugin",
            "title": "GitHub - tailwindlabs/tailwindcss-typography: Beautiful typographic defaults for HTML you don't control.",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "NotificationsYou must be signed in to change notification settings",
                        "Fork268",
                        "Star4.6k"
                    ]
                },
                {
                    "type": "p",
                    "text": "Beautiful typographic defaults for HTML you don't control."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "License"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "tailwindlabs/tailwindcss-typography"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Folders and files"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Latest commit"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "History"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Repository files navigation"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "The official Tailwind CSS Typography plugin provides a set ofproseclasses you can use to add beautiful typographic defaults to any vanilla HTML you don’t control, like HTML rendered from Markdown, or pulled from a CMS."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose lg:prose-xl\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "To see what it looks like in action, check out ourlive demoon Tailwind Play."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Installation"
                },
                {
                    "type": "p",
                    "text": "Install the plugin from npm:"
                },
                {
                    "type": "code",
                    "code": "npm install -D @tailwindcss/typography"
                },
                {
                    "type": "p",
                    "text": "Then add the plugin to yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */module.exports={theme:{// ...},plugins:[require('@tailwindcss/typography'),// ...],}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic usage"
                },
                {
                    "type": "p",
                    "text": "Now you can use theproseclasses to add sensible typography styles to any vanilla HTML:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose lg:prose-xl\"><h1>Garlic bread with cheese: What the science tells us</h1><p>For years parents have espoused the health benefits of eating garlic bread with cheese to their\n    children, with the food earning such an iconic status in our culture that kids will often dress\n    up as warm, cheesy loaf for Halloween.</p><p>But a recent study shows that the celebrated appetizer may be linked to a series of rabies cases\n    springing up around the country.</p><!-- ... --></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choosing a gray scale"
                },
                {
                    "type": "p",
                    "text": "This plugin includes a modifier class for each of the five gray scales Tailwind includes by default so you can easily style your content to match the grays you're using in your project."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-slate\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "Here are the classes that are generated using a totally default Tailwind CSS v2.0 build:"
                },
                {
                    "type": "p",
                    "text": "Modifier classes are designed to be used with themulti-class modifier patternand must be used in conjunction with the baseproseclass."
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "Always include theproseclass when adding a gray scale modifier"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-stone\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "To learn about creating your own color themes, read theadding custom color themesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Applying a type scale"
                },
                {
                    "type": "p",
                    "text": "Size modifiers allow you to adjust the overall size of your typography for different contexts."
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-xl\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "Five different typography sizes are included out of the box:"
                },
                {
                    "type": "p",
                    "text": "These can be used in combination with Tailwind'sbreakpoint modifiersto change the overall font size of a piece of content at different viewport sizes:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose md:prose-lg lg:prose-xl\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "Everything about the provided size modifiers has been hand-tuned by professional designers to look as beautiful as possible, including the relationships between font sizes, heading spacing, code block padding, and more."
                },
                {
                    "type": "p",
                    "text": "Size modifiers are designed to be used with themulti-class modifier patternand must be used in conjunction with the baseproseclass."
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "Always include theproseclass when adding a size modifier"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-lg\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "To learn about customizing the included type scales, read the documentation oncustomizing the CSS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adapting to dark mode"
                },
                {
                    "type": "p",
                    "text": "Each default color theme includes a hand-designed dark mode version that you can trigger by adding theprose-invertclass:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose dark:prose-invert\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "To learn about creating your own color themes, read theadding custom color themesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Element modifiers"
                },
                {
                    "type": "p",
                    "text": "Use element modifiers to customize the style of individual elements in your content directly in your HTML:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-img:rounded-xl prose-headings:underline prose-a:text-blue-600\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "This makes it easy to do things like style links to match your brand, add a border radius to images, and tons more."
                },
                {
                    "type": "p",
                    "text": "Here's a complete list of available element modifiers:"
                },
                {
                    "type": "p",
                    "text": "When stacking these modifiers with other modifiers likehover, you most likely want the other modifier to come first:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose prose-a:text-blue-600 hover:prose-a:text-blue-500\">{{ markdown }}</article>"
                },
                {
                    "type": "p",
                    "text": "Read the Tailwind CSS documentation onordering stacked modifiersto learn more."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overriding max-width"
                },
                {
                    "type": "p",
                    "text": "Each size modifier comes with a baked inmax-widthdesigned to keep the content as readable as possible. This isn't always what you want though, and sometimes you'll want the content to just fill the width of its container."
                },
                {
                    "type": "p",
                    "text": "In those cases, all you need to do is addmax-w-noneto your content to override the embedded max-width:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-4\"><divclass=\"col-span-1\"><!-- ... --></div><divclass=\"col-span-3\"><articleclass=\"prose max-w-none\">{{ markdown }}</article></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced topics"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Undoing typography styles"
                },
                {
                    "type": "p",
                    "text": "If you have a block of markup embedded in some content that shouldn't inherit theprosestyles, use thenot-proseclass to sandbox it:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"prose\"><h1>My Heading</h1><p>...</p><divclass=\"not-prose\"><!-- Some example or demo that needs to be prose-free --></div><p>...</p><!-- ... --></article>"
                },
                {
                    "type": "p",
                    "text": "Note that you can't nest newproseinstances within anot-proseblock at this time."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding custom color themes"
                },
                {
                    "type": "p",
                    "text": "You can create your own color theme by adding a new key in thetypographysection of yourtailwind.config.jsfile and providing your colors under thecsskey:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */module.exports={theme:{extend:{typography:({theme})=>({pink:{css:{'--tw-prose-body':theme('colors.pink[800]'),'--tw-prose-headings':theme('colors.pink[900]'),'--tw-prose-lead':theme('colors.pink[700]'),'--tw-prose-links':theme('colors.pink[900]'),'--tw-prose-bold':theme('colors.pink[900]'),'--tw-prose-counters':theme('colors.pink[600]'),'--tw-prose-bullets':theme('colors.pink[400]'),'--tw-prose-hr':theme('colors.pink[300]'),'--tw-prose-quotes':theme('colors.pink[900]'),'--tw-prose-quote-borders':theme('colors.pink[300]'),'--tw-prose-captions':theme('colors.pink[700]'),'--tw-prose-code':theme('colors.pink[900]'),'--tw-prose-pre-code':theme('colors.pink[100]'),'--tw-prose-pre-bg':theme('colors.pink[900]'),'--tw-prose-th-borders':theme('colors.pink[300]'),'--tw-prose-td-borders':theme('colors.pink[200]'),'--tw-prose-invert-body':theme('colors.pink[200]'),'--tw-prose-invert-headings':theme('colors.white'),'--tw-prose-invert-lead':theme('colors.pink[300]'),'--tw-prose-invert-links':theme('colors.white'),'--tw-prose-invert-bold':theme('colors.white'),'--tw-prose-invert-counters':theme('colors.pink[400]'),'--tw-prose-invert-bullets':theme('colors.pink[600]'),'--tw-prose-invert-hr':theme('colors.pink[700]'),'--tw-prose-invert-quotes':theme('colors.pink[100]'),'--tw-prose-invert-quote-borders':theme('colors.pink[700]'),'--tw-prose-invert-captions':theme('colors.pink[400]'),'--tw-prose-invert-code':theme('colors.white'),'--tw-prose-invert-pre-code':theme('colors.pink[300]'),'--tw-prose-invert-pre-bg':'rgb(0 0 0 / 50%)','--tw-prose-invert-th-borders':theme('colors.pink[600]'),'--tw-prose-invert-td-borders':theme('colors.pink[700]'),},},}),},},plugins:[require('@tailwindcss/typography'),// ...],}"
                },
                {
                    "type": "p",
                    "text": "See our internalstyle definitionsfor some more examples."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Changing the default class name"
                },
                {
                    "type": "p",
                    "text": "If you need to use a class name other thanprosefor any reason, you can do so using theclassNameoption when registering the plugin:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */module.exports={theme:{// ...},plugins:[require('@tailwindcss/typography')({className:'wysiwyg',}),]...}"
                },
                {
                    "type": "p",
                    "text": "Now every instance ofprosein the default class names will be replaced by your custom class name:"
                },
                {
                    "type": "code",
                    "code": "<articleclass=\"wysiwyg wysiwyg-slate lg:wysiwyg-xl\"><h1>My Heading</h1><p>...</p><divclass=\"not-wysiwyg\"><!-- Some example or demo that needs to be prose-free --></div><p>...</p><!-- ... --></article>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Customizing the CSS"
                },
                {
                    "type": "p",
                    "text": "If you want to customize the raw CSS generated by this plugin, add your overrides under thetypographykey in thethemesection of yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */module.exports={theme:{extend:{typography:{DEFAULT:{css:{color:'#333',a:{color:'#3182ce','&:hover':{color:'#2c5282',},},},},},},},plugins:[require('@tailwindcss/typography'),// ...],}"
                },
                {
                    "type": "p",
                    "text": "Like with all theme customizations in Tailwind, you can also define thetypographykey as a function if you need access to thethemehelper:"
                },
                {
                    "type": "code",
                    "code": "/** @type {import('tailwindcss').Config} */module.exports={theme:{extend:{typography:(theme)=>({DEFAULT:{css:{color:theme('colors.gray.800'),// ...},},}),},},plugins:[require('@tailwindcss/typography'),// ...],}"
                },
                {
                    "type": "p",
                    "text": "Customizations should be applied to a specific modifier likeDEFAULTorxl, and must be added under thecssproperty. Customizations are authored in the sameCSS-in-JS syntaxused to write Tailwind plugins."
                },
                {
                    "type": "p",
                    "text": "Seethe default stylesfor this plugin for more in-depth examples of configuring each modifier."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Community"
                },
                {
                    "type": "p",
                    "text": "For help, discussion about best practices, or any other conversation that would benefit from being searchable:"
                },
                {
                    "type": "p",
                    "text": "Discuss the Tailwind CSS Typography plugin on GitHub"
                },
                {
                    "type": "p",
                    "text": "For casual chit-chat with others using the framework:"
                },
                {
                    "type": "p",
                    "text": "Join the Tailwind CSS Discord Server"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About"
                },
                {
                    "type": "p",
                    "text": "Beautiful typographic defaults for HTML you don't control."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Resources"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "License"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Stars"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Watchers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Forks"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Releases26"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Packages0"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Contributors32"
                },
                {
                    "type": "list",
                    "items": [
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Languages"
                },
                {
                    "type": "list",
                    "items": [
                        "JavaScript100.0%"
                    ]
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/upcoming-changes#default-line-heights-for-font-size-utilities",
            "title": "Upcoming Changes - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Upcoming Changes"
                },
                {
                    "type": "p",
                    "text": "Updates and deprecations coming in the future and how to prepare for them."
                },
                {
                    "type": "p",
                    "text": "Tailwind followssemantic versioning, so we never introduce breaking changes until a new major release(v2.0 is the next one)."
                },
                {
                    "type": "p",
                    "text": "Rather than drop a bunch of breaking changes on you at once though, we use feature flags as an incremental adoption strategy so you can opt-in to breaking changes early, and save the upgrade hassle down the road."
                },
                {
                    "type": "p",
                    "text": "The following breaking changes are currently available in Tailwind behind flags."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remove deprecated gap utilities"
                },
                {
                    "type": "p",
                    "text": "Tailwind v1.7.0 introduced newgap-x-{n}andgap-y-{n}utilities to replace the existingcol-gap-{n}androw-gap-{n}utilities. We currently include both by default, but the old utilities will be removed in v2.0."
                },
                {
                    "type": "p",
                    "text": "To opt-in to removing them now, use theremoveDeprecatedGapUtilitiesflag:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={future:{removeDeprecatedGapUtilities:true,},// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Purge layers by default"
                },
                {
                    "type": "p",
                    "text": "Tailwind v1.8.0 introduced newlayerspurge mode which will be the default in v2.0. It purges all layers (base,components, andutilities) by default, whereas the previous default mode (conservative, now deprecated) only purged theutilitieslayer."
                },
                {
                    "type": "p",
                    "text": "With the introduction of the newpreserveHtmlElementspurge option (which istrueby default), we consider this more aggressive purging mode very safe, and it is unlikely to actually be a breaking change in your application."
                },
                {
                    "type": "p",
                    "text": "You should see an even smaller CSS file by default with the newlayersmode enabled, and shouldn't see any negative consequences unless you were deliberately relying on the fact that Tailwind was previously not purging thebaseorcomponentslayers by default."
                },
                {
                    "type": "p",
                    "text": "To opt-in to using the newlayersmode by default, use thepurgeLayersByDefaultflag:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={future:{purgeLayersByDefault:true,},// ...}"
                },
                {
                    "type": "p",
                    "text": "If you'd like to only purge theutilitieslayer (like theconservativemode did), you can still opt-in with this flag, but then explicitly specify that you'd only like to purge theutilitieslayer:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={future:{purgeLayersByDefault:true,},purge:{layers:['utilities'],content:[// Paths to your templates...],},// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Default line heights for font size utilities"
                },
                {
                    "type": "p",
                    "text": "In Tailwind v2.0, all font-size utilities liketext-smandtext-lgwill also include their own default line-height value specific to that font size."
                },
                {
                    "type": "p",
                    "text": "Here's a list of the included font-size utilities with their corresponding default line-heights:"
                },
                {
                    "type": "code",
                    "code": "// Default config for 2.0module.exports={// ...theme:{fontSize:{xs:['0.75rem',{lineHeight:'1rem'}],sm:['0.875rem',{lineHeight:'1.25rem'}],base:['1rem',{lineHeight:'1.5rem'}],lg:['1.125rem',{lineHeight:'1.75rem'}],xl:['1.25rem',{lineHeight:'1.75rem'}],'2xl':['1.5rem',{lineHeight:'2rem'}],'3xl':['1.875rem',{lineHeight:'2.25rem'}],'4xl':['2.25rem',{lineHeight:'2.5rem'}],'5xl':['3rem',{lineHeight:'1'}],'6xl':['4rem',{lineHeight:'1'}],},},}"
                },
                {
                    "type": "p",
                    "text": "This is a breaking change because you might be using a utility liketext-2xlin your project right now without adding an explicit line-height likeleading-8, which means you are implicitly relying on the current default of1.5and the new defaults will change how your project looks."
                },
                {
                    "type": "p",
                    "text": "The easiest way to update your project for 2.0 is to look through your project for any places where you are using a font-size utility without adding a line-height utility and explicitly addleading-normal, so that when you upgrade to 2.0 the new line-height defaults won't impact your design."
                },
                {
                    "type": "p",
                    "text": "To opt-in to this change now and ease the transition to 2.0, use thedefaultLineHeightsflag:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={future:{defaultLineHeights:true,},// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rename font-thin and font-hairline"
                },
                {
                    "type": "p",
                    "text": "In Tailwind 2.0, thefont-thinutility will be renamed tofont-extralightandfont-hairlinewill be renamed tofont-thinto better match the naming in theOpenType specification."
                },
                {
                    "type": "p",
                    "text": "To opt-in to this change now and ease the transition to 2.0, use thestandardFontWeightsflag:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={future:{standardFontWeights:true,},// ...}"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Remove deprecated gap utilities",
                        "Purge layers by default",
                        "Default line heights for font size utilities",
                        "Rename font-thin and font-hairline"
                    ]
                },
                {
                    "type": "p",
                    "text": "Beautiful UI components by the creators of Tailwind CSS."
                },
                {
                    "type": "p",
                    "text": "Tailwind UIis now in early access!Now in early access!Beautiful UI components by the creators of Tailwind CSS.Beautiful UI components, crafted by the creators of Tailwind CSS."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/upgrade-guide",
            "title": "Upgrade Guide - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Upgrade Guide"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.0 is a major update to the framework with a brand new internal engine and as such includes a small number of breaking changes."
                },
                {
                    "type": "p",
                    "text": "We take stability very seriously and have worked hard to make any breaking changes as painless as possible. For most projects, upgrading to Tailwind CSS v3.0 should take less than 30 minutes."
                },
                {
                    "type": "p",
                    "text": "To learn more about what’s new in Tailwind CSS v3.0, read theTailwind CSS v3.0 announcementon our blog."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Upgrade packages"
                },
                {
                    "type": "p",
                    "text": "Update Tailwind, as well as PostCSS and autoprefixer, using npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dtailwindcss@latest postcss@latest autoprefixer@latest"
                },
                {
                    "type": "p",
                    "text": "Note that Tailwind CSS v3.0 requires PostCSS 8, and no longer supports PostCSS 7. If you can’t upgrade to PostCSS 8, we recommend usingTailwind CLIinstead of installing Tailwind as a PostCSS plugin."
                },
                {
                    "type": "p",
                    "text": "If you are using nesting in your custom CSS (in combination with a PostCSS nesting plugin), you should alsoconfigure thetailwindcss/nestingpluginin your PostCSS configuration to ensure compatibility with Tailwind CSS v3.0."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Official plugins"
                },
                {
                    "type": "p",
                    "text": "All of our first-party plugins have been updated for compatibility with v3.0."
                },
                {
                    "type": "p",
                    "text": "If you’re using any of our plugins, make sure to update them all to the latest version at the same time to avoid version constraint errors."
                },
                {
                    "type": "code",
                    "code": "npm install -D tailwindcss@latest \\@tailwindcss/typography@latest\\@tailwindcss/forms@latest\\@tailwindcss/aspect-ratio@latest\\@tailwindcss/line-clamp@latest\\\n  postcss@latest \\\n  autoprefixer@latest"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Play CDN"
                },
                {
                    "type": "p",
                    "text": "For Tailwind CSS v3.0, the CSS-based CDN build we’ve offered in the past has been replaced by the newPlay CDN, which gives you the full power of the new engine right in the browser with no build step."
                },
                {
                    "type": "p",
                    "text": "To try it out, throw this<script>tag in your<head>:"
                },
                {
                    "type": "code",
                    "code": "<!DOCTYPEhtml><htmllang=\"en\"><head><metacharset=\"utf-8\"><metaname=\"viewport\"content=\"width=device-width, initial-scale=1.0\"/><title>Example</title><scriptsrc=\"https://cdn.tailwindcss.com\"></script></head><body><!-- --></body></html>"
                },
                {
                    "type": "p",
                    "text": "The Play CDN is designed for development purposes only — compiling your own static CSS build is a much better choice in production."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Migrating to the JIT engine"
                },
                {
                    "type": "p",
                    "text": "The newJust-in-Time enginewe announced in March has replaced the classic engine in Tailwind CSS v3.0."
                },
                {
                    "type": "p",
                    "text": "The new engine generates the styles you need for your project on-demand, and might necessitate some small changes to your project depending on how you have Tailwind configured."
                },
                {
                    "type": "p",
                    "text": "If you were already opting in tomode: 'jit'in Tailwind CSS v2.x, you can safely remove that from your configuration in v3.0:"
                },
                {
                    "type": "code",
                    "code": "module.exports={mode:'jit',// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Configure content sources"
                },
                {
                    "type": "p",
                    "text": "Since Tailwind no longer uses PurgeCSS under the hood, we’ve renamed thepurgeoption tocontentto better reflect what it’s for:"
                },
                {
                    "type": "code",
                    "code": "module.exports={purge:[content:[// Example content paths...'./public/**/*.html','./src/**/*.{js,jsx,ts,tsx,vue}',],theme:{// ...}// ...}"
                },
                {
                    "type": "p",
                    "text": "If you weren’t already using thepurgeoption in your project, it’s crucial that you configure your template paths now or your compiled CSS will be empty."
                },
                {
                    "type": "p",
                    "text": "Since we’re not using PurgeCSS under the hood anymore, some of the advanced purge options have changed. See the newcontent configurationdocumentation for more information on advanced options."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Remove dark mode configuration"
                },
                {
                    "type": "p",
                    "text": "The dark mode feature is now enabled using themediastrategy by default, so you can remove this key entirely from yourtailwind.config.jsfile,unlessyou’re using theclassstrategy."
                },
                {
                    "type": "code",
                    "code": "module.exports={darkMode:'media',// ...}"
                },
                {
                    "type": "p",
                    "text": "You can also safely remove this key if it’s currently set tofalse:"
                },
                {
                    "type": "code",
                    "code": "module.exports={darkMode:false,// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Remove variant configuration"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v3.0, every variant is automatically available for every utility by default, so you can remove thevariantssection from yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...variants:{extend:{padding:['hover'],}},}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Replace @variants with @layer"
                },
                {
                    "type": "p",
                    "text": "Since all variants are now enabled by default, you no longer need to explicitly enable these for custom CSS using the@variantsor@responsivedirectives."
                },
                {
                    "type": "p",
                    "text": "Instead, add any custom CSS to appropriate “layer” using the@layerdirective:"
                },
                {
                    "type": "code",
                    "code": "@variantshover,focus{@layerutilities{.content-auto{content-visibility:auto;}}"
                },
                {
                    "type": "p",
                    "text": "Any custom CSS added to one of Tailwind’s layers will automatically support variants."
                },
                {
                    "type": "p",
                    "text": "See the documentation onadding custom styles using CSS and @layerfor more information."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Automatic transforms and filters"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v3.0, transform and filter utilities likescale-50andbrightness-75will automatically take effect without needing to add thetransform,filter, orbackdrop-filterclasses:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"transform scale-50 filter grayscale backdrop-filter backdrop-blur-sm\"><divclass=\"scale-50 grayscale backdrop-blur-sm\">"
                },
                {
                    "type": "p",
                    "text": "While there’s no harm in leaving them in your HTML, they can safely be removed — with one exception. If you’re relying ontransformto create a new stacking context, you may want to leave it, otherwise you may run into z-order issues. Alternatively, replace it withrelativeorisolateto force a new stacking context."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​New opacity modifier syntax"
                },
                {
                    "type": "p",
                    "text": "The new engine introducesa new syntaxfor changing the opacity of color utilities that we recommend migrating to from utilities likebg-opacity-*:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"bg-black bg-opacity-25\"><divclass=\"bg-black/25\">"
                },
                {
                    "type": "p",
                    "text": "The old approach still works in all cases except when using aborder-opacity-*utility with the defaultborderclass — in v3 you’ll need to explicitly specify your border color:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"border border-opacity-25\"><divclass=\"border border-gray-200/25\">"
                },
                {
                    "type": "p",
                    "text": "Every other situation behaves the same, so aside from that change your projects will work exactly as they did before. We do recommend using the new syntax going forward though, and plan to disable utilities likeborder-opacity-*andbg-opacity-*by default in v4, though you will still be able to enable them if needed."
                },
                {
                    "type": "p",
                    "text": "This new syntax works for all color utilities, even utilities that didn’t have any way to change the opacity in the past likefrom-red-500/75."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Color palette changes"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.0 now includes every color from the extended color palette by default, including previously disabled colors like cyan, rose, fuchsia, and lime, and all five variations of gray."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Removed color aliases"
                },
                {
                    "type": "p",
                    "text": "In v2.0, several of the default colors were actually aliases for the extended colors:"
                },
                {
                    "type": "p",
                    "text": "In v3.0, these colors use their extended names by default, so what was previouslybg-green-500is nowbg-emerald-500, andbg-green-500now refers to the green from the extended palette."
                },
                {
                    "type": "p",
                    "text": "If you’re using these colors in your project, the simplest way to upgrade is to alias them back to their previous names in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{extend:{colors:{green:colors.emerald,yellow:colors.amber,purple:colors.violet,}},},// ...}"
                },
                {
                    "type": "p",
                    "text": "If you are already using a custom color palette, this change doesn’t impact you at all."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Renamed gray scales"
                },
                {
                    "type": "p",
                    "text": "As part of enabling all of the extended colors by default, we’ve given the different gray shades shorter single-word names to make them more practical to use and make it less awkward for them to co-exist at the same time."
                },
                {
                    "type": "p",
                    "text": "If you were referencing any of the extended grays, you should update your references to the new names, for example:"
                },
                {
                    "type": "code",
                    "code": "constcolors=require('tailwindcss/colors')module.exports={theme:{extend:{colors:{gray:colors.trueGray,gray:colors.neutral,}},},// ...}"
                },
                {
                    "type": "p",
                    "text": "If you weren’t referencing any of the grays from the extended color palette, this change doesn’t impact you at all."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Class name changes"
                },
                {
                    "type": "p",
                    "text": "Some class names in Tailwind CSS v3.0 have changed to avoid naming collisions, improve the developer experience, or make it possible to support new features."
                },
                {
                    "type": "p",
                    "text": "Wherever possible we have preserved the old name as well so many of these changes are non-breaking, but you’re encouraged to update to the new class names."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​overflow-clip/ellipsis"
                },
                {
                    "type": "p",
                    "text": "Those damn browser developers added a realoverflow: clipproperty, so usingoverflow-clipfortext-overflow: clipis a really bad idea now."
                },
                {
                    "type": "p",
                    "text": "We’ve renamedoverflow-cliptotext-clip, and renamedoverflow-ellipsistotext-ellipsisto avoid the naming collision:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-clip overflow-ellipsis\"><divclass=\"text-clip text-ellipsis\">"
                },
                {
                    "type": "p",
                    "text": "This is extremely unlikely to affect anyone, as there are very few use-cases fortext-clipand it’s only really included for the sake of completion."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​flex-grow/shrink"
                },
                {
                    "type": "p",
                    "text": "We’ve addedgrow-*andshrink-*as aliases forflex-grow-*andflex-shrink-*:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex-grow-0 flex-shrink\"><divclass=\"grow-0 shrink\">"
                },
                {
                    "type": "p",
                    "text": "The old class names will always work but you’re encouraged to update to the new ones."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​outline-black/white"
                },
                {
                    "type": "p",
                    "text": "Since browsers are finally starting to respect border radius when rendering outlines, we’ve added separate utilities for theoutline-style,outline-color,outline-widthandoutline-offsetproperties."
                },
                {
                    "type": "p",
                    "text": "This means thatoutline-whiteandoutline-blacknow only set the outlinecolor, whereas in v2 they set the color, width, style, and offset."
                },
                {
                    "type": "p",
                    "text": "If you are usingoutline-whiteoroutline-blackin your project, you can bring back the old styles by adding the following custom CSS to your project:"
                },
                {
                    "type": "code",
                    "code": "@layerutilities{.outline-black{outline:2pxdottedblack;outline-offset:2px;}.outline-white{outline:2pxdottedwhite;outline-offset:2px;}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can update any usage of them in your CSS with the following classes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outline-black\"><divclass=\"outline-black outline-2 outline-dotted outline-offset-2\"><divclass=\"outline-white\"><divclass=\"outline-white outline-2 outline-dotted outline-offset-2\">"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​decoration-clone/slice"
                },
                {
                    "type": "p",
                    "text": "We’ve addedbox-decoration-cloneandbox-decoration-sliceas aliases fordecoration-cloneanddecoration-sliceto avoid confusion with all of the newtext-decorationutilities that use thedecoration-namespace:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"decoration-clone\"></div><divclass=\"box-decoration-clone\"></div><divclass=\"decoration-slice\"></div><divclass=\"box-decoration-slice\"></div>"
                },
                {
                    "type": "p",
                    "text": "The old class names will always work but you’re encouraged to update to the new ones."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Other minor changes"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v3.0 necessitates a couple of other small breaking changes that are unlikely to affect many people, but have been captured here."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Separator cannot be a dash"
                },
                {
                    "type": "p",
                    "text": "The dash (-) character cannot be used as a custom separator in v3.0 because of a parsing ambiguity it introduces in the engine."
                },
                {
                    "type": "p",
                    "text": "You’ll have to switch to another character like_instead:"
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...separator:'-',separator:'_',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Prefix cannot be a function"
                },
                {
                    "type": "p",
                    "text": "Prior to Tailwind CSS v3.0, it was possible to define your class prefix as a function:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...prefix(selector){// ...},}"
                },
                {
                    "type": "p",
                    "text": "This isn’t possible in the new engine and we’ve had to remove support for this feature."
                },
                {
                    "type": "p",
                    "text": "Instead, use a static prefix that is the same for every class Tailwind generates:"
                },
                {
                    "type": "code",
                    "code": "/**@type{import('tailwindcss').Config}*/module.exports={// ...prefix:'tw-',}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​File modifier order reversed"
                },
                {
                    "type": "p",
                    "text": "Super minor change since v3.0.0-alpha.2 where thefilemodifier was introduced — if you were combining it with other modifiers likehoverorfocus, you’ll need to flip the modifier order:"
                },
                {
                    "type": "code",
                    "code": "<inputclass=\"file:hover:bg-blue-600 ...\"><inputclass=\"hover:file:bg-blue-600 ...\">"
                },
                {
                    "type": "p",
                    "text": "Learn more in theordering stacked modifiersdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fill and stroke use color palette"
                },
                {
                    "type": "p",
                    "text": "Thefill-*andstroke-*utilities mirror yourtheme.colorskey by default now. This isn’t a breaking change if you haven’t customized your color palette, but if you have, thefill-currentandstroke-currentclasses may not work if you don’t havecurrentincluded in your own custom color palette."
                },
                {
                    "type": "p",
                    "text": "Addcurrentto your custom color palette to resolve this:"
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...theme:{colors:{current:'currentColor',// ...}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Negative values removed"
                },
                {
                    "type": "p",
                    "text": "The negative prefix in utilities like-mx-4is a first class feature in Tailwind now, rather than something driven by your theme, so you can add-in front of any utility that support negative values and it will just work."
                },
                {
                    "type": "p",
                    "text": "The negative values have been removed from the default theme, so if you were referencing them withtheme(), you will see an error when trying to compile your CSS."
                },
                {
                    "type": "p",
                    "text": "Use thecalc()function to update any affected code:"
                },
                {
                    "type": "code",
                    "code": ".my-class{top:theme('top.-4')top:calc(theme('top.4')*-1)}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Base layer must be present"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v3.0, the@tailwind basedirective must be present for utilities like transforms, filters, and shadows to work as expected."
                },
                {
                    "type": "p",
                    "text": "If you were previously disabling Tailwind’s base styles by not including this directive, you should add it back and disablepreflightin yourcorePluginsconfiguration instead:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;"
                },
                {
                    "type": "code",
                    "code": "module.exports={// ...corePlugins:{preflight:false,},}"
                },
                {
                    "type": "p",
                    "text": "This will disable Tailwind’s global base styles without affecting utilities that rely on adding their own base styles to function correctly."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Screens layer has been renamed"
                },
                {
                    "type": "p",
                    "text": "The@tailwind screenslayer has been renamed to@tailwind variants:"
                },
                {
                    "type": "code",
                    "code": "/* ... */@tailwindscreens;@tailwindvariants;"
                },
                {
                    "type": "p",
                    "text": "I think you are more likely to be attacked by a shark while working at your desk than you are to be affected by this change."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Upgrade packages",
                        "Official plugins",
                        "Play CDN",
                        "Migrating to the JIT engine",
                        "Configure content sources",
                        "Remove dark mode configuration",
                        "Remove variant configuration",
                        "Replace @variants with @layer",
                        "Automatic transforms and filters",
                        "New opacity modifier syntax",
                        "Color palette changes",
                        "Removed color aliases",
                        "Renamed gray scales",
                        "Class name changes",
                        "overflow-clip/ellipsis",
                        "flex-grow/shrink",
                        "outline-black/white",
                        "decoration-clone/slice",
                        "Other minor changes",
                        "Separator cannot be a dash",
                        "Prefix cannot be a function",
                        "File modifier order reversed",
                        "Fill and stroke use color palette",
                        "Negative values removed",
                        "Base layer must be present",
                        "Screens layer has been renamed"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/upgrading-to-v2",
            "title": "Upgrade Guide - Tailwind CSS",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Upgrade Guide"
                },
                {
                    "type": "p",
                    "text": "Upgrading from Tailwind CSS v1.x to v2.0."
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.0 is the first new major version since v1.0 was released in May 2019, and as such it includes a handful of small breaking changes."
                },
                {
                    "type": "p",
                    "text": "We don’t take breaking changes lightly and have worked hard to make sure the upgrade path is as simple as possible. For most projects, upgrading should take less than 30 minutes."
                },
                {
                    "type": "p",
                    "text": "If your project uses the@tailwindcss/uiplugin, be sure to read theTailwind UI for Tailwind CSS v2.0 upgrade guideas well."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Install Tailwind CSS v2.0 and PostCSS 8"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.0 has been updated for the latest PostCSS release which requires installingpostcssandautoprefixeras peer dependencies alongside Tailwind itself."
                },
                {
                    "type": "p",
                    "text": "Update Tailwind and install PostCSS and autoprefixer using npm:"
                },
                {
                    "type": "code",
                    "code": "npminstalltailwindcss@latest postcss@latest autoprefixer@latest"
                },
                {
                    "type": "p",
                    "text": "If you run into issues, you may need to use ourPostCSS 7 compatibility buildinstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Support for IE 11 has been dropped"
                },
                {
                    "type": "p",
                    "text": "Prior to v2.0, we tried our best to make sure features we included in Tailwind worked in IE 11 whenever possible. This added considerable maintenance burden as well as increased build sizes (even when purging unused styles), so we have decided to drop support for IE 11 as of v2.0."
                },
                {
                    "type": "p",
                    "text": "If you need to support IE 11, we recommend continuing to use Tailwind CSS v1.9 until you no longer need to support IE."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Upgrade to Node.js 12.13 or higher"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.0 no longer supports Node.js 8 or 10. To build your CSS you’ll need to ensure you are running Node.js 12.13.0 or higher in both your local and CI environments."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update typography and forms plugins"
                },
                {
                    "type": "p",
                    "text": "If you are using@tailwindcss/typography, you’ll want toupgrade to v0.3.0which adds Tailwind CSS v2.0 support."
                },
                {
                    "type": "p",
                    "text": "If you are using@tailwindcss/custom-forms, you will want to migrate to@tailwindcss/formswhich replaces it. Learn more about the new forms plugin inthe release notes."
                },
                {
                    "type": "p",
                    "text": "The@tailwindcss/custom-formsplugin is not compatible with Tailwind CSS v2.0."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remove future and experimental configuration options"
                },
                {
                    "type": "p",
                    "text": "As of v2.0 there are nofutureorexperimentaloptions available, so you can remove any configuration like this from yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "module.exports={-future:{-defaultLineHeights:true,-purgeLayersByDefault:true,-removeDeprecatedGapUtilities:true,-},-experimental:{-additionalBreakpoint:true,-extendedFontSizeScale:true,-extendedSpacingScale:true,-},// ...}"
                },
                {
                    "type": "p",
                    "text": "We will continue to use theexperimentaloption in the future for new feature ideas but thefutureoption will probably not be used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update renamed utility classes"
                },
                {
                    "type": "p",
                    "text": "A small number of utilities have been renamed in v2.0:"
                },
                {
                    "type": "p",
                    "text": "You should be able to globally find and replace these classes throughout your entire project very safely, as they are very distinct strings."
                },
                {
                    "type": "p",
                    "text": "Updatingwhitespace-no-wrapandflex-no-wrapis just a direct replacement, and for the gap utilities we recommend replacingcol-gap-withgap-x-androw-gap-withgap-y-to handle all sizes at once."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable hover and focus for fontWeight if needed"
                },
                {
                    "type": "p",
                    "text": "Thehoverandfocusvariants have been disabled for thefontWeightplugin by default, as changing font-weight like this tends to cause layout jank so it’s uncommon to actually do it anyways."
                },
                {
                    "type": "p",
                    "text": "If you need these in your project, re-enable them in yourtailwind.config.jsfile:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{extend:{+fontWeight:['hover','focus']}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Replace clearfix with flow-root"
                },
                {
                    "type": "p",
                    "text": "Theclearfixclass has been removed sinceflow-rootis a simpler solution to the same problem in modern browsers."
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"clearfix\">+<divclass=\"flow-root\"><imgclass=\"float-left\"src=\"...\"alt=\"...\"/><p>Lorem ipsum...</p></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update font-weight class names for 100 and 200 weights"
                },
                {
                    "type": "p",
                    "text": "The class names for the100and200font weights have changed in Tailwind CSS v2.0:"
                },
                {
                    "type": "p",
                    "text": "Sincefont-thinappears in both v1 and v2 for different weights, we recommend updating your classes in the following order:"
                },
                {
                    "type": "list",
                    "items": [
                        "Globally find and replacefont-thinwithfont-extralight",
                        "Globally find and replacefont-hairlinewithfont-thin"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Replace shadow-outline and shadow-xs with ring utilities"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.0 introduces a new set ofringutilities that let you add outline shadows/focus rings in a way that automatically composes with Tailwind’s other box-shadow utilities."
                },
                {
                    "type": "p",
                    "text": "These are a much better and more powerful alternative to theshadow-outlineandshadow-xsclasses, so we’ve removed those classes."
                },
                {
                    "type": "p",
                    "text": "Replaceshadow-outlinewithring:"
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"...focus:shadow-outline\">+<divclass=\"...focus:ring\">"
                },
                {
                    "type": "p",
                    "text": "Replaceshadow-xswithring-1 ring-black ring-opacity-5:"
                },
                {
                    "type": "code",
                    "code": "-<divclass=\"...shadow-xs\">+<divclass=\"...ring-1 ring-black ring-opacity-5\">"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can also addshadow-outlineandshadow-xsback to your config file and leave your HTML untouched:"
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{boxShadow:{xs:'0 0 0 1px rgba(0, 0, 0, 0.05)',outline:'0 0 0 3px rgba(66, 153, 225, 0.5)',}}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your breakpoints explicitly"
                },
                {
                    "type": "p",
                    "text": "Tailwind CSS v2.0 adds a new2xlbreakpoint which will affect any situations where you’ve used thecontainerclass. If this impacts you, remove the2xlbreakpoint by overridingscreenswith your existing breakpoints:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.js\nmodule.exports = {purge:[// ...],theme:{+screens:{+sm:'640px',+md:'768px',+lg:'1024px',+xl:'1280px',+}// ...},variants:{// ...}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your color palette explicitly"
                },
                {
                    "type": "p",
                    "text": "If you are already using a custom color palette, no changes are required and you can safely skip this step."
                },
                {
                    "type": "p",
                    "text": "The default color palette has changed considerably in Tailwind CSS v2.0 and is not designed to be a drop-in replacement for the color palette that was included in v1."
                },
                {
                    "type": "p",
                    "text": "If you’re using the default color palette, you should configure it explicitly to override the new default palette with the colors your site is already using."
                },
                {
                    "type": "p",
                    "text": "Here is an exampletailwind.config.jsfile that includes the default colors from v1:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{colors:{transparent:'transparent',current:'currentColor',black:'#000',white:'#fff',gray:{100:'#f7fafc',200:'#edf2f7',300:'#e2e8f0',400:'#cbd5e0',500:'#a0aec0',600:'#718096',700:'#4a5568',800:'#2d3748',900:'#1a202c',},red:{100:'#fff5f5',200:'#fed7d7',300:'#feb2b2',400:'#fc8181',500:'#f56565',600:'#e53e3e',700:'#c53030',800:'#9b2c2c',900:'#742a2a',},orange:{100:'#fffaf0',200:'#feebc8',300:'#fbd38d',400:'#f6ad55',500:'#ed8936',600:'#dd6b20',700:'#c05621',800:'#9c4221',900:'#7b341e',},yellow:{100:'#fffff0',200:'#fefcbf',300:'#faf089',400:'#f6e05e',500:'#ecc94b',600:'#d69e2e',700:'#b7791f',800:'#975a16',900:'#744210',},green:{100:'#f0fff4',200:'#c6f6d5',300:'#9ae6b4',400:'#68d391',500:'#48bb78',600:'#38a169',700:'#2f855a',800:'#276749',900:'#22543d',},teal:{100:'#e6fffa',200:'#b2f5ea',300:'#81e6d9',400:'#4fd1c5',500:'#38b2ac',600:'#319795',700:'#2c7a7b',800:'#285e61',900:'#234e52',},blue:{100:'#ebf8ff',200:'#bee3f8',300:'#90cdf4',400:'#63b3ed',500:'#4299e1',600:'#3182ce',700:'#2b6cb0',800:'#2c5282',900:'#2a4365',},indigo:{100:'#ebf4ff',200:'#c3dafe',300:'#a3bffa',400:'#7f9cf5',500:'#667eea',600:'#5a67d8',700:'#4c51bf',800:'#434190',900:'#3c366b',},purple:{100:'#faf5ff',200:'#e9d8fd',300:'#d6bcfa',400:'#b794f4',500:'#9f7aea',600:'#805ad5',700:'#6b46c1',800:'#553c9a',900:'#44337a',},pink:{100:'#fff5f7',200:'#fed7e2',300:'#fbb6ce',400:'#f687b3',500:'#ed64a6',600:'#d53f8c',700:'#b83280',800:'#97266d',900:'#702459',},}}}"
                },
                {
                    "type": "p",
                    "text": "We do not recommend updating existing sites to use the new default color palette.The numbers are not meant to be transferrable, so for examplebg-red-600in v2 is not just a “better” version ofbg-red-600from v1 — it has different contrast characteristics. If you are happy with how your site looks, there is no reason to spend hours of your life updating your HTML. The old colors are great too!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configure your font-size scale explicitly"
                },
                {
                    "type": "p",
                    "text": "If you are already using a custom typography scale, no changes are required and you can safely skip this step."
                },
                {
                    "type": "p",
                    "text": "In v2.0, each font-size utility includes a sensible size-specific line-height by default, so for exampletext-smautomatically sets a line-height of1.25rem."
                },
                {
                    "type": "p",
                    "text": "This will change how your site looks anywhere where you haven’t explicitly added aleadingutility alongside a font-size utility."
                },
                {
                    "type": "p",
                    "text": "The fastest way to get past this is to explicitly configure your font-size scale to use the scale from v1:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{fontSize:{xs:'0.75rem',sm:'0.875rem',base:'1rem',lg:'1.125rem',xl:'1.25rem','2xl':'1.5rem','3xl':'1.875rem','4xl':'2.25rem','5xl':'3rem','6xl':'4rem',},}}"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can go through your HTML and explicitly add aleadingutility anywhere where you were depending on an inherited line-height:"
                },
                {
                    "type": "code",
                    "code": "-<pclass=\"text-lg\">...</p>+<pclass=\"text-lgleading-normal\">...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update default theme keys to DEFAULT"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v1.x, thedefaultkeyword in variousthemesections of thetailwind.config.jssection sometimes meant “don’t add a suffix to the class name”."
                },
                {
                    "type": "p",
                    "text": "For example, this configuration:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{borderRadius:{none:'0',sm:'0.125rem',default:'0.25rem',md:'0.375rem',lg:'0.5rem',},}}"
                },
                {
                    "type": "p",
                    "text": "…would generated aroundedclass with aborder-radiusof0.25rem,notarounded-defaultclass."
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v2.0, we’ve updated all special usage ofdefaultto uppercaseDEFAULTinstead:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{borderRadius:{none:'0',sm:'0.125rem',DEFAULT:'0.25rem',md:'0.375rem',lg:'0.5rem',},}}"
                },
                {
                    "type": "p",
                    "text": "Lowercasedefaultwill be treated like any other string, so adefaultvalue underborderRadiuswillgenerate arounded-defaultclass in Tailwind CSS v.2.0."
                },
                {
                    "type": "p",
                    "text": "You should update all usage ofdefaultin your config file toDEFAULT,exceptwhere you actually want to generate a{utility}-defaultclass, like forcursor-default."
                },
                {
                    "type": "p",
                    "text": "Referencethe complete default configurationto see where we now useDEFAULTand where we still usedefaultif you are unclear about what changes you need to make to your own configuration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Move deliberately shallow extend to top-level"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v1.0, theme changes underextendwere merged shallowly. So this configuration would overrideallof the purple colors:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={theme:{extend:{colors:{purple:{light:'#E9D8FD',medium:'#9F7AEA',dark:'#553C9A',}}}}}"
                },
                {
                    "type": "p",
                    "text": "In v2.0, these are merged deeply, so the above configuration would still generate the defaultpurple-100topurple-900shades in addition to the custompurple-light,purple-medium, andpurple-darkshades."
                },
                {
                    "type": "p",
                    "text": "For the most part this is just helpful, but if you were depending on the shallow merging you will want to move your customizations to the top-level, and manually merge in the other top-level colors:"
                },
                {
                    "type": "code",
                    "code": "constdefaultTheme=require('tailwindcss/defaultTheme')module.exports={theme:{colors:{...defaultTheme.colors,purple:{light:'#E9D8FD',medium:'#9F7AEA',dark:'#553C9A',}}}}"
                },
                {
                    "type": "p",
                    "text": "You probably won’t have to do this."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update @apply statements that rely on class order"
                },
                {
                    "type": "p",
                    "text": "The@applyfeature has gotten a lot more powerful in v2.0, but a few behaviors needed to change to make that possible."
                },
                {
                    "type": "p",
                    "text": "Previously, classes were applied in the order they appeared in your CSS:"
                },
                {
                    "type": "code",
                    "code": "/* Input */.my-class{@applypt-5 p-4;}/* Output */.my-class{padding-top:1.25rem;padding:1rem;}"
                },
                {
                    "type": "p",
                    "text": "Now, classes are applied in the order they appear in the original CSS:"
                },
                {
                    "type": "code",
                    "code": "/* Input */.my-class{@applypt-5 p-4;}/* Output */.my-class{padding:1rem;padding-top:1.25rem;}"
                },
                {
                    "type": "p",
                    "text": "This is to make sure the behavior matches the behavior you’d get in HTML:"
                },
                {
                    "type": "code",
                    "code": "<!-- Here `pt-5` still takes precedence even though it appears first. --><divclass=\"pt-5 p-4\">...</div>"
                },
                {
                    "type": "p",
                    "text": "If you were depending on the old behavior, you may see some differences in how your site is rendered. To get around this, use multiple@applydeclarations:"
                },
                {
                    "type": "code",
                    "code": ".my-class{@applypt-5;@applyp-4;}"
                },
                {
                    "type": "p",
                    "text": "This is unlikely to affect almost anyone who wasn’t going out their way to do something weird."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add your configured prefix to any @apply statements"
                },
                {
                    "type": "p",
                    "text": "In Tailwind CSS v1.0, you could@applyunprefixed utilities even if you had configured a prefix."
                },
                {
                    "type": "p",
                    "text": "This is no longer supported in v2.0, so if you have a prefix (liketw-) configured for your site, you’ll need to make sure you include that whenever you use@apply:"
                },
                {
                    "type": "code",
                    "code": ".my-class{@applytw-p-4 tw-bg-red-500;}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Remove leading dot from @apply statements"
                },
                {
                    "type": "p",
                    "text": "We used to support writing@applystatements with an optional leading.character:"
                },
                {
                    "type": "code",
                    "code": ".my-class{@apply.p-4 .bg-red-500;}"
                },
                {
                    "type": "p",
                    "text": "We don’t support this anymore, so update any@applystatements and remove the dot:"
                },
                {
                    "type": "code",
                    "code": ".my-class{@applyp-4 bg-red-500;}"
                },
                {
                    "type": "p",
                    "text": "The following regex can be useful to find and remove the leading dots in your@applystatements:"
                },
                {
                    "type": "code",
                    "code": "(?<=@apply.*)\\."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enable any truncate variants under textOverflow"
                },
                {
                    "type": "p",
                    "text": "Thetruncateutility is now part of thetextOverflowcore plugin, so if you had enabled any extra variants (likegroup-hover) for thewordBreakplugin in order to use them with thetruncateclass, you’ll want to enable them fortextOverflownow as well or instead:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={variants:{wordBreak:['responsive','group-hover'],+textOverflow:['responsive','group-hover'],}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The scrolling-touch and scrolling-auto utilities have been removed"
                },
                {
                    "type": "p",
                    "text": "Since iOS 13 stopped supporting the-webkit-overflow-scrollingproperty, we’ve removed these two utilities from v2.0."
                },
                {
                    "type": "p",
                    "text": "If you still need them because you are building something for older iOS versions, you can add them yourself as custom utilities:"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@tailwindcomponents;@tailwindutilities;@layerutilities{@responsive{.scrolling-touch{-webkit-overflow-scrolling:touch;}.scrolling-auto{-webkit-overflow-scrolling:auto;}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update theme function references that read from arrays"
                },
                {
                    "type": "p",
                    "text": "Thethemefunction (in CSS, thetailwind.config.jsfile, and in the plugin API) is more intelligent in v2.0 and no longer requires you to manually join arrays or access the first index explicitly."
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsconstplugin=require('tailwindcss/plugin')module.exports={theme:{fontSize:{// ...xl:['20px',{lineHeight:'28px'}]}},plugins:[plugin(({addBase,theme})=>{addBase({h1:{// BeforefontSize:theme('fontSize.xl')[0],fontFamily:theme('fontFamily.sans').join(','),// NowfontSize:theme('fontSize.xl'),fontFamily:theme('fontFamily.sans'),}})})]}"
                },
                {
                    "type": "p",
                    "text": "If for whatever reason you want to access the raw data structure, you can use theconfigfunction instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Add hidden to any template tags within space or divide elements"
                },
                {
                    "type": "p",
                    "text": "We used to have a special rule for ignoringtemplateelements when using thespace-x/yanddivide-x/yutilities, mostly to make life easier for Alpine.js users."
                },
                {
                    "type": "p",
                    "text": "We’ve updated how this works to no longer special casetemplateelements and instead just explicitly ignore any element that has ahiddenattribute."
                },
                {
                    "type": "p",
                    "text": "To update your code for this change, just addhiddento yourtemplatetags:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"space-y-4\">-<templatex-for=\"item in items\">+<templatex-for=\"item in items\"hidden><!-- ... --></template></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update purge options to match PurgeCSS 3.0"
                },
                {
                    "type": "p",
                    "text": "Internally we’ve upgraded toPurgeCSS 3.0, so any raw options you were passing into PurgeCSS through theoptionskey need to be updated to match the options exposed in PurgeCSS 3.0."
                },
                {
                    "type": "p",
                    "text": "For example, if you were usingwhitelist, you’ll want to update this tosafelist:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={purge:{content:[// ...],options:{-whitelist:['my-class']+safelist:['my-class']}}}"
                },
                {
                    "type": "p",
                    "text": "If you weren’t using theoptionskey, you don’t need to do anything."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disable preserveHtmlElements if using a custom PurgeCSS extractor"
                },
                {
                    "type": "p",
                    "text": "In v1.0, Tailwind ignored thepreserveHtmlElementsoption if you were using a custom extractor. This option is now properly respected in v2.0, so if you want to disable it you’ll need to do so explicitly:"
                },
                {
                    "type": "code",
                    "code": "// tailwind.config.jsmodule.exports={purge:{content:[// ...],+preserveHtmlElements:false,options:{defaultExtractor:()=>{// ...}}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prefix any keyframe references if needed"
                },
                {
                    "type": "p",
                    "text": "If you’ve configured a prefix in yourtailwind.config.jsfile, Tailwind v2.0 will automatically apply that prefix to any keyframes declarations in yourtheme."
                },
                {
                    "type": "p",
                    "text": "If you are referencing any configured keyframes in custom CSS, you’ll want to make sure you add your prefix:"
                },
                {
                    "type": "code",
                    "code": ".my-class{-animation:spin1sinfinite;+animation:tw-spin1sinfinite;}"
                },
                {
                    "type": "p",
                    "text": "This only matters if you’ve configured a prefixandyou’re referencing configured keyframes in custom CSS files. If this affects more than two people on the entire planet I will be absolutely amazed."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Install Tailwind CSS v2.0 and PostCSS 8",
                        "Support for IE 11 has been dropped",
                        "Upgrade to Node.js 12.13 or higher",
                        "Update typography and forms plugins",
                        "Remove future and experimental configuration options",
                        "Update renamed utility classes",
                        "Enable hover and focus for fontWeight if needed",
                        "Replace clearfix with flow-root",
                        "Update font-weight class names for 100 and 200 weights",
                        "Replace shadow-outline and shadow-xs with ring utilities",
                        "Configure your breakpoints explicitly",
                        "Configure your color palette explicitly",
                        "Configure your font-size scale explicitly",
                        "Update default theme keys to DEFAULT",
                        "Move deliberately shallow extend to top-level",
                        "Update  statements that rely on class order",
                        "Add your configured prefix to any @apply statements",
                        "Remove leading dot from @apply statements",
                        "Enable any truncate variants under textOverflow",
                        "The scrolling-touch and scrolling-auto utilities have been removed",
                        "Update theme function references that read from arrays",
                        "Add hidden to any template tags within space or divide elements",
                        "Update purge options to match PurgeCSS 3.0",
                        "Disable preserveHtmlElements if using a custom PurgeCSS extractor",
                        "Prefix any keyframe references if needed"
                    ]
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/user-select",
            "title": "User Select - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "User Select"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Disabling text selection"
                },
                {
                    "type": "p",
                    "text": "Useselect-noneto prevent selecting text in an element and its children."
                },
                {
                    "type": "p",
                    "text": "Try selecting the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"select-none...\">The quick brown fox jumps over the lazy dog.</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Allowing text selection"
                },
                {
                    "type": "p",
                    "text": "Useselect-textto allow selecting text in an element and its children."
                },
                {
                    "type": "p",
                    "text": "Try selecting the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"select-text...\">The quick brown fox jumps over the lazy dog.</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Selecting all text in one click"
                },
                {
                    "type": "p",
                    "text": "Useselect-allto automatically select all the text in an element when a user clicks."
                },
                {
                    "type": "p",
                    "text": "Try selecting the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"select-all...\">The quick brown fox jumps over the lazy dog.</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using auto select behaviour"
                },
                {
                    "type": "p",
                    "text": "Useselect-autoto use the default browser behavior for selecting text. Useful for undoing other classes likeselect-noneat different breakpoints."
                },
                {
                    "type": "p",
                    "text": "Try selecting the text to see the expected behaviour"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"select-auto...\">The quick brown fox jumps over the lazy dog.</div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:select-allto only apply theselect-allutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"hover:select-all\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:select-allto apply theselect-allutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"md:select-all\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Disabling text selection",
                        "Allowing text selection",
                        "Selecting all text in one click",
                        "Using auto select behaviour",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/using-with-preprocessors",
            "title": "Using with Preprocessors - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Getting Started",
                        "Using with Preprocessors"
                    ]
                },
                {
                    "type": "p",
                    "text": "Since Tailwind is a PostCSS plugin, there’s nothing stopping you from using it with Sass, Less, Stylus, or other preprocessors, just like you can with other PostCSS plugins likeAutoprefixer."
                },
                {
                    "type": "p",
                    "text": "It’s important to note thatyou don’t need to use a preprocessor with Tailwind— you typically write very little CSS on a Tailwind project anyway, so using a preprocessor just isn’t as beneficial as it would be in a project where you write a lot of custom CSS."
                },
                {
                    "type": "p",
                    "text": "This guide only exists as a reference for people who need to integrate Tailwind with a preprocessor for reasons outside of their control, not because it is a recommended practice."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using PostCSS as your preprocessor"
                },
                {
                    "type": "p",
                    "text": "If you’re using Tailwind for a brand new project and don’t need to integrate it with any existing Sass/Less/Stylus stylesheets, you should highly consider relying on other PostCSS plugins to add the preprocessor features you use instead of using a separate preprocessor."
                },
                {
                    "type": "p",
                    "text": "This has a few benefits:"
                },
                {
                    "type": "list",
                    "items": [
                        "Your builds will be faster. Since your CSS doesn’t have to be parsed and processed by multiple tools, your CSS will compile much quicker using only PostCSS.",
                        "No quirks or workarounds.Because Tailwind adds some new non-standard keywords to CSS (like@tailwind,@apply,theme(), etc.), you often have to write your CSS in annoying, unintuitive ways to get a preprocessor to give you the expected output. Working exclusively with PostCSS avoids this."
                    ]
                },
                {
                    "type": "p",
                    "text": "For a fairly comprehensive list of available PostCSS plugins see thePostCSS GitHub repository, but here are a few important ones we use on our own projects and can recommend."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Build-time imports"
                },
                {
                    "type": "p",
                    "text": "One of the most useful features preprocessors offer is the ability to organize your CSS into multiple files and combine them at build time by processing@importstatements in advance, instead of in the browser."
                },
                {
                    "type": "p",
                    "text": "The canonical plugin for handling this with PostCSS ispostcss-import."
                },
                {
                    "type": "p",
                    "text": "To use it, install the plugin via npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dpostcss-import"
                },
                {
                    "type": "p",
                    "text": "Then add it as the very first plugin in your PostCSS configuration:"
                },
                {
                    "type": "code",
                    "code": "// postcss.config.jsmodule.exports={plugins:{'postcss-import':{},tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "p",
                    "text": "One important thing to note aboutpostcss-importis that it strictly adheres to the CSS spec and disallows@importstatements anywhere except at the very top of a file."
                },
                {
                    "type": "p",
                    "text": "Won’t work,@importstatements must come first"
                },
                {
                    "type": "code",
                    "code": "/* components.css */.btn{padding:theme('spacing.4')theme('spacing.2');/* ... */}/* Will not work */@import\"./components/card\";"
                },
                {
                    "type": "p",
                    "text": "The easiest solution to this problem is to never mix regular CSS and imports in the same file. Instead, create one main entry-point file for your imports, and keep all of your actual CSS in separate files."
                },
                {
                    "type": "p",
                    "text": "Use separate files for imports and actual CSS"
                },
                {
                    "type": "code",
                    "code": "/* components.css */@import\"./components/buttons.css\";@import\"./components/card.css\";"
                },
                {
                    "type": "code",
                    "code": "/* components/buttons.css */.btn{padding:theme('spacing.4')theme('spacing.2');/* ... */}"
                },
                {
                    "type": "code",
                    "code": "/* components/card.css */.card{padding:theme('spacing.4');/* ... */}"
                },
                {
                    "type": "p",
                    "text": "The place you are most likely to run into this situation is in your main CSS file that includes your@tailwinddeclarations."
                },
                {
                    "type": "p",
                    "text": "Won’t work,@importstatements must come first"
                },
                {
                    "type": "code",
                    "code": "@tailwindbase;@import\"./custom-base-styles.css\";@tailwindcomponents;@import\"./custom-components.css\";@tailwindutilities;@import\"./custom-utilities.css\";"
                },
                {
                    "type": "p",
                    "text": "You can solve this by creating separate files for each@tailwinddeclaration, and then importing those files in your main stylesheet. To make this easy, we provide separate files for each@tailwinddeclaration out of the box that you can import directly fromnode_modules."
                },
                {
                    "type": "p",
                    "text": "Thepostcss-importplugin is smart enough to look for files in thenode_modulesfolder automatically, so you don’t need to provide the entire path —\"tailwindcss/base\"for example is enough."
                },
                {
                    "type": "p",
                    "text": "Import our provided CSS files"
                },
                {
                    "type": "code",
                    "code": "@import\"tailwindcss/base\";@import\"./custom-base-styles.css\";@import\"tailwindcss/components\";@import\"./custom-components.css\";@import\"tailwindcss/utilities\";@import\"./custom-utilities.css\";"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Nesting"
                },
                {
                    "type": "p",
                    "text": "To add support for nested declarations, we recommend our bundledtailwindcss/nestingplugin, which is a PostCSS plugin that wrapspostcss-nestedorpostcss-nestingand acts as a compatibility layer to make sure your nesting plugin of choice properly understands Tailwind’s custom syntax."
                },
                {
                    "type": "p",
                    "text": "It’s included directly in thetailwindcsspackage itself, so to use it all you need to do is add it to your PostCSS configuration, somewhere before Tailwind:"
                },
                {
                    "type": "code",
                    "code": "// postcss.config.jsmodule.exports={plugins:{'postcss-import':{},'tailwindcss/nesting':{},tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "p",
                    "text": "By default, it uses thepostcss-nestedplugin under the hood, which uses a Sass-like syntax and is the plugin that powers nesting support in theTailwind CSS plugin API."
                },
                {
                    "type": "p",
                    "text": "If you’d rather usepostcss-nesting(which is based on the standardCSS Nestingspecification), first install the plugin:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dpostcss-nesting"
                },
                {
                    "type": "p",
                    "text": "Then pass the plugin itself as an argument totailwindcss/nestingin your PostCSS configuration:"
                },
                {
                    "type": "code",
                    "code": "// postcss.config.jsmodule.exports={plugins:{'postcss-import':{},'tailwindcss/nesting':'postcss-nesting',tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "p",
                    "text": "This can also be helpful if for whatever reason you need to use a very specific version ofpostcss-nestedand want to override the version we bundle withtailwindcss/nestingitself."
                },
                {
                    "type": "p",
                    "text": "Note that if you are usingpostcss-preset-envin your project, you should make sure to disable nesting and lettailwindcss/nestinghandle it for you instead:"
                },
                {
                    "type": "code",
                    "code": "// postcss.config.jsmodule.exports={plugins:{'postcss-import':{},'tailwindcss/nesting':'postcss-nesting',tailwindcss:{},'postcss-preset-env':{features:{'nesting-rules':false},},}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Variables"
                },
                {
                    "type": "p",
                    "text": "These days CSS variables (officially known as custom properties) have really goodbrowser support, so you don’t need a preprocessor to use variables at all."
                },
                {
                    "type": "code",
                    "code": ":root{--theme-color:#52b3d0;}/* ... */.btn{background-color:var(--theme-color);/* ... */}"
                },
                {
                    "type": "p",
                    "text": "We use CSS variables extensively within Tailwind itself, so if you can use Tailwind, you can use native CSS variables."
                },
                {
                    "type": "p",
                    "text": "You may also find that most of the things you’ve used variables for in the past can be replaced with Tailwind’stheme()function, which gives you access to all of your design tokens from yourtailwind.config.jsfile directly in your CSS:"
                },
                {
                    "type": "code",
                    "code": ".btn{background-color:theme('colors.blue.500');padding:theme('spacing.2')theme('spacing.4');/* ... */}"
                },
                {
                    "type": "p",
                    "text": "Learn more about thetheme()function in ourfunctions and directives documentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Vendor prefixes"
                },
                {
                    "type": "p",
                    "text": "For automatically managing vendor prefixes in your CSS, you should useAutoprefixer."
                },
                {
                    "type": "p",
                    "text": "To use it, install it via npm:"
                },
                {
                    "type": "code",
                    "code": "npminstall-Dautoprefixer"
                },
                {
                    "type": "p",
                    "text": "Then add it to the very end of your plugin list in your PostCSS configuration:"
                },
                {
                    "type": "code",
                    "code": "module.exports={plugins:{tailwindcss:{},autoprefixer:{},}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using Sass, Less, or Stylus"
                },
                {
                    "type": "p",
                    "text": "For the best development experience, we highly recommend that youuse PostCSS exclusively, and that you don’t use preprocessors like Sass or Less in your Tailwind projects."
                },
                {
                    "type": "p",
                    "text": "To use Tailwind with a preprocessing tool like Sass, Less, or Stylus, you’ll need to add an additional build step to your project that lets you run your preprocessed CSS through PostCSS. If you’re using Autoprefixer in your project, you already have something like this set up."
                },
                {
                    "type": "p",
                    "text": "See our documentation oninstalling Tailwind as a PostCSS pluginto learn more about integrating Tailwind into your existing build process."
                },
                {
                    "type": "p",
                    "text": "The most important thing to understand about using Tailwind with a preprocessor is thatpreprocessors like Sass, Less, and Stylus run separately, before Tailwind. This means that you can’t feed output from Tailwind’stheme()function into a Sass color function for example, because thetheme()function isn’t actually evaluated until your Sass has been compiled to CSS and fed into PostCSS."
                },
                {
                    "type": "p",
                    "text": "Won’t work, Sass is processed first"
                },
                {
                    "type": "code",
                    "code": ".alert{background-color:darken(theme('colors.red.500'),10%);}"
                },
                {
                    "type": "p",
                    "text": "Aside from that, some preprocessors have quirks when used with Tailwind, which are outlined with workarounds below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Sass"
                },
                {
                    "type": "p",
                    "text": "When using Tailwind with Sass, using!importantwith@applyrequires you to use interpolation to compile properly."
                },
                {
                    "type": "p",
                    "text": "Won’t work, Sass complains about !important"
                },
                {
                    "type": "code",
                    "code": ".alert{@applybg-red-500!important;}"
                },
                {
                    "type": "p",
                    "text": "Use interpolation as a workaround"
                },
                {
                    "type": "code",
                    "code": ".alert{@applybg-red-500 #{!important};}"
                },
                {
                    "type": "p",
                    "text": "In addition to this, Sass has trouble with Tailwind’sscreen()function unless wrapped in parentheses."
                },
                {
                    "type": "p",
                    "text": "Won’t work, Sass will generate an error"
                },
                {
                    "type": "code",
                    "code": "@mediascreen(md){.foo{color:blue;}}"
                },
                {
                    "type": "p",
                    "text": "Wrap the screen() function in parentheses"
                },
                {
                    "type": "code",
                    "code": "@media(screen(md)){.foo{color:blue;}}"
                },
                {
                    "type": "p",
                    "text": "Technically this results in an extra set of parentheses around your media query, but it still works."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Stylus"
                },
                {
                    "type": "p",
                    "text": "When using Tailwind with Stylus, you can’t use Tailwind’s@applyfeature without wrapping the entire CSS rule in@cssso that Stylus treats it as literal CSS."
                },
                {
                    "type": "p",
                    "text": "Won’t work, Stylus complains about @apply"
                },
                {
                    "type": "code",
                    "code": ".card{@apply rounded-lg bg-white p-4}"
                },
                {
                    "type": "p",
                    "text": "Use @css to avoid processing as Stylus"
                },
                {
                    "type": "code",
                    "code": "@css{.card{@apply rounded-lg bg-white p-4}}"
                },
                {
                    "type": "p",
                    "text": "This comes with a significant cost however, which is thatyou cannot use any Stylus features inside a@cssblock."
                },
                {
                    "type": "p",
                    "text": "Another option is to use thetheme()function instead of@apply, and write out the actual CSS properties in long form:"
                },
                {
                    "type": "p",
                    "text": "Use theme() instead of @apply"
                },
                {
                    "type": "code",
                    "code": ".card{border-radius:theme('borderRadius.lg');background-color:theme('colors.white');padding:theme('spacing.4');}"
                },
                {
                    "type": "p",
                    "text": "In addition to this, Stylus has trouble with Tailwind’sscreen()function unless you use interpolation and wrap it in parentheses."
                },
                {
                    "type": "p",
                    "text": "Won’t work, Stylus will generate an error"
                },
                {
                    "type": "code",
                    "code": "@mediascreen(md){.foo{color:blue;}}"
                },
                {
                    "type": "p",
                    "text": "Use interpolation and parentheses as a workaround"
                },
                {
                    "type": "code",
                    "code": "@media({'screen(md)'}){.foo{color:blue;}}"
                },
                {
                    "type": "p",
                    "text": "Technically this results in an extra set of parentheses around your media query, but it still works."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Using PostCSS as your preprocessor",
                        "Build-time imports",
                        "Nesting",
                        "Variables",
                        "Vendor prefixes",
                        "Using Sass, Less, or Stylus",
                        "Sass",
                        "Stylus"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/utility-first",
            "title": "Utility-First Fundamentals - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Core Concepts",
                        "Utility-First Fundamentals"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Overview"
                },
                {
                    "type": "p",
                    "text": "Traditionally, whenever you need to style something on the web, you write CSS."
                },
                {
                    "type": "p",
                    "text": "Using a traditional approach where custom designs require custom CSS"
                },
                {
                    "type": "p",
                    "text": "You have a new message!"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"chat-notification\"><divclass=\"chat-notification-logo-wrapper\"><imgclass=\"chat-notification-logo\"src=\"/img/logo.svg\"alt=\"ChitChat Logo\"></div><divclass=\"chat-notification-content\"><h4class=\"chat-notification-title\">ChitChat</h4><pclass=\"chat-notification-message\">You have a new message!</p></div></div><style>.chat-notification{display:flex;align-items:center;max-width:24rem;margin:0auto;padding:1.5rem;border-radius:0.5rem;background-color:#fff;box-shadow:020px25px-5pxrgba(0,0,0,0.1),010px10px-5pxrgba(0,0,0,0.04);}.chat-notification-logo-wrapper{flex-shrink:0;}.chat-notification-logo{height:3rem;width:3rem;}.chat-notification-content{margin-left:1.5rem;}.chat-notification-title{color:#1a202c;font-size:1.25rem;line-height:1.25;}.chat-notification-message{color:#718096;font-size:1rem;line-height:1.5;}</style>"
                },
                {
                    "type": "p",
                    "text": "With Tailwind, you style elements by applying pre-existing classes directly in your HTML."
                },
                {
                    "type": "p",
                    "text": "Using utility classes to build custom designs without writing CSS"
                },
                {
                    "type": "p",
                    "text": "You have a new message!"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"p-6 max-w-sm mx-auto bg-white rounded-xl shadow-lg flex items-center gap-x-4\"><divclass=\"shrink-0\"><imgclass=\"size-12\"src=\"/img/logo.svg\"alt=\"ChitChat Logo\"></div><div><divclass=\"text-xl font-medium text-black\">ChitChat</div><pclass=\"text-slate-500\">You have a new message!</p></div></div>"
                },
                {
                    "type": "p",
                    "text": "In the example above, we’ve used:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tailwind’sflexboxandpaddingutilities (flex,shrink-0, andp-6) to control the overall card layout",
                        "Themax-widthandmarginutilities (max-w-smandmx-auto) to constrain the card width and center it horizontally",
                        "Thebackground color,border radius, andbox-shadowutilities (bg-white,rounded-xl, andshadow-lg) to style the card’s appearance",
                        "Thesizeutilities (size-12) to set the width and height of the logo image",
                        "Thegaputilities (gap-x-4) to handle the spacing between the logo and the text",
                        "Thefont size,text color, andfont-weightutilities (text-xl,text-black,font-medium, etc.) to style the card text"
                    ]
                },
                {
                    "type": "p",
                    "text": "This approach allows us to implement a completely custom component design without writing a single line of custom CSS."
                },
                {
                    "type": "p",
                    "text": "Now I know what you’re thinking,“this is an atrocity, what a horrible mess!”and you’re right, it’s kind of ugly. In fact it’s just about impossible to think this is a good idea the first time you see it —you have to actually try it."
                },
                {
                    "type": "p",
                    "text": "But once you’ve actually built something this way, you’ll quickly notice some really important benefits:"
                },
                {
                    "type": "list",
                    "items": [
                        "You aren’t wasting energy inventing class names. No more adding silly class names likesidebar-inner-wrapperjust to be able to style something, and no more agonizing over the perfect abstract name for something that’s really just a flex container.",
                        "Your CSS stops growing. Using a traditional approach, your CSS files get bigger every time you add a new feature. With utilities, everything is reusable so you rarely need to write new CSS.",
                        "Making changes feels safer. CSS is global and you never know what you’re breaking when you make a change. Classes in your HTML are local, so you can change them without worrying about something else breaking."
                    ]
                },
                {
                    "type": "p",
                    "text": "When you realize how productive you can be working exclusively in HTML with predefined utility classes, working any other way will feel like torture."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Why not just use inline styles?"
                },
                {
                    "type": "p",
                    "text": "A common reaction to this approach is wondering, “isn’t this just inline styles?” and in some ways it is — you’re applying styles directly to elements instead of assigning them a class name and then styling that class."
                },
                {
                    "type": "p",
                    "text": "But using utility classes has a few important advantages over inline styles:"
                },
                {
                    "type": "list",
                    "items": [
                        "Designing with constraints. Using inline styles, every value is a magic number. With utilities, you’re choosing styles from a predefineddesign system, which makes it much easier to build visually consistent UIs.",
                        "Responsive design. You can’t use media queries in inline styles, but you can use Tailwind’sresponsive utilitiesto build fully responsive interfaces easily.",
                        "Hover, focus, and other states. Inline styles can’t target states like hover or focus, but Tailwind’sstate variantsmake it easy to style those states with utility classes."
                    ]
                },
                {
                    "type": "p",
                    "text": "This component is fully responsive and includes a button with hover and focus styles, and is built entirely with utility classes:"
                },
                {
                    "type": "p",
                    "text": "Erin Lindford"
                },
                {
                    "type": "p",
                    "text": "Product Engineer"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"py-8 px-8 max-w-sm mx-auto space-y-2 bg-white rounded-xl shadow-lgsm:py-4 sm:flex sm:items-center sm:space-y-0 sm:gap-x-6\"><imgclass=\"block mx-auto h-24 rounded-fullsm:mx-0 sm:shrink-0\"src=\"/img/erin-lindford.jpg\"alt=\"Woman's Face\"/><divclass=\"text-center space-y-2sm:text-left\"><divclass=\"space-y-0.5\"><pclass=\"text-lg text-black font-semibold\">Erin Lindford</p><pclass=\"text-slate-500 font-medium\">Product Engineer</p></div><buttonclass=\"px-4 py-1 text-sm text-purple-600 font-semibold rounded-full border border-purple-200hover:text-white hover:bg-purple-600 hover:border-transparent focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-offset-2\">Message</button></div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Maintainability concerns"
                },
                {
                    "type": "p",
                    "text": "The biggest maintainability concern when using a utility-first approach is managing commonly repeated utility combinations."
                },
                {
                    "type": "p",
                    "text": "This is easily solved byextracting components and partials, and usingeditor and language featureslike multi-cursor editing and simple loops."
                },
                {
                    "type": "code",
                    "code": "<!-- PrimaryButton.vue --><template><buttonclass=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"><slot/></button></template>"
                },
                {
                    "type": "p",
                    "text": "Aside from that, maintaining a utility-first CSS project turns out to be a lot easier than maintaining a large CSS codebase, simply because HTML is so much easier to maintain than CSS. Large companies like GitHub, Netflix, Heroku, Kickstarter, Twitch, Segment, and more are using this approach with great success."
                },
                {
                    "type": "p",
                    "text": "If you’d like to hear about others’ experiences with this approach, check out the following resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "By The Numbers: A Year and a Half with Atomic CSSby John Polacek",
                        "No, Utility Classes Aren’t the Same As Inline Stylesby Sarah Dayan of Algolia",
                        "Diana Mounter on using utility classes at GitHub, a podcast interview"
                    ]
                },
                {
                    "type": "p",
                    "text": "For even more, check outThe Case for Atomic/Utility-First CSS, curated byJohn Polacek."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Why not just use inline styles?",
                        "Maintainability concerns"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/vertical-align",
            "title": "Vertical Align - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Vertical Align"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Baseline"
                },
                {
                    "type": "p",
                    "text": "Usealign-baselineto align the baseline of an element with the baseline of its parent."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-baseline...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Top"
                },
                {
                    "type": "p",
                    "text": "Usealign-topto align the top of an element and its descendants with the top of the entire line."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-top...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Middle"
                },
                {
                    "type": "p",
                    "text": "Usealign-middleto align the middle of an element with the baseline plus half the x-height of the parent."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-middle...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Bottom"
                },
                {
                    "type": "p",
                    "text": "Usealign-bottomto align the bottom of an element and its descendants with the bottom of the entire line."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-bottom...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Text Top"
                },
                {
                    "type": "p",
                    "text": "Usealign-text-topto align the top of an element with the top of the parent element’s font."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-text-top...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Text Bottom"
                },
                {
                    "type": "p",
                    "text": "Usealign-text-bottomto align the bottom of an element with the bottom of the parent element’s font."
                },
                {
                    "type": "code",
                    "code": "<spanclass=\"inline-blockalign-text-bottom...\">...</span>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:align-topto only apply thealign-toputility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"align-middlehover:align-top\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:align-topto apply thealign-toputility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"align-middlemd:align-top\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offvertical-alignvalue that isn't included in Tailwind by default, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"align-[4px]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Baseline",
                        "Top",
                        "Middle",
                        "Bottom",
                        "Text Top",
                        "Text Bottom",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/visibility",
            "title": "Visibility - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Visibility"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Making elements invisible"
                },
                {
                    "type": "p",
                    "text": "Use theinvisibleutility to hide an element, but still maintain its place in the DOM, affecting the layout of other elements (compare withhiddenfrom thedisplaydocumentation)."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4\"><div>01</div><divclass=\"invisible...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Collapsing elements"
                },
                {
                    "type": "p",
                    "text": "Use thecollapseutility to hide table rows, row groups, columns, and column groups as if they were set todisplay: none, but without impacting the size of other rows and columns."
                },
                {
                    "type": "p",
                    "text": "This makes it possible to dynamically toggle rows and columns without affecting the table layout."
                },
                {
                    "type": "code",
                    "code": "<table><thead><tr><th>Invoice #</th><th>Client</th><th>Amount</th></tr></thead><tbody><tr><td>#100</td><td>Pendant Publishing</td><td>$2,000.00</td></tr><trclass=\"collapse\"><td>#101</td><td>Kruger Industrial Smoothing</td><td>$545.00</td></tr><tr><td>#102</td><td>J. Peterman</td><td>$10,000.25</td></tr></tbody></table>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Making elements visible"
                },
                {
                    "type": "p",
                    "text": "Use thevisibleutility to make an element visible. This is mostly useful for undoing theinvisibleutility at different screen sizes."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"grid grid-cols-3 gap-4\"><div>01</div><divclass=\"visible...\">02</div><div>03</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:invisibleto only apply theinvisibleutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"visiblehover:invisible\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:invisibleto apply theinvisibleutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"visiblemd:invisible\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Making elements invisible",
                        "Collapsing elements",
                        "Making elements visible",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/whitespace",
            "title": "Whitespace - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Whitespace"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Normal"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-normalto cause text to wrap normally within an element. Newlines and spaces will be collapsed."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 ...\"><divclass=\"whitespace-normal...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​No Wrap"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-nowrapto prevent text from wrapping within an element. Newlines and spaces will be collapsed."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 overflow-x-auto ...\"><divclass=\"whitespace-nowrap...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pre"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-preto preserve newlines and spaces within an element. Text will not be wrapped."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 overflow-x-auto ...\"><divclass=\"whitespace-pre...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pre Line"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-pre-lineto preserve newlines but not spaces within an element. Text will be wrapped normally."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 ...\"><divclass=\"whitespace-pre-line...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Pre Wrap"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-pre-wrapto preserve newlines and spaces within an element. Text will be wrapped normally."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 ...\"><divclass=\"whitespace-pre-wrap...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Break Spaces"
                },
                {
                    "type": "p",
                    "text": "Usewhitespace-break-spacesto preserve newlines and spaces within an element. White space at the end of lines will not hang, but will wrap to the next line."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-3/4 ...\"><divclass=\"whitespace-break-spaces...\">Hey everyone!\n\nIt's almost 2022       and we still don't know if there       is aliens living among us, or do we? Maybe the person writing this is an alien.\n\nYou will never know.</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:whitespace-preto only apply thewhitespace-preutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"whitespace-normalhover:whitespace-pre\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:whitespace-preto apply thewhitespace-preutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"whitespace-normalmd:whitespace-pre\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Normal",
                        "No Wrap",
                        "Pre",
                        "Pre Line",
                        "Pre Wrap",
                        "Break Spaces",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/width",
            "title": "Width - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Sizing",
                        "Width"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Fixed widths"
                },
                {
                    "type": "p",
                    "text": "Use utilities likew-px,w-1, andw-64to set an element to a fixed width."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-96...\">w-96</div><divclass=\"w-80...\">w-80</div><divclass=\"w-64...\">w-64</div><divclass=\"w-48...\">w-48</div><divclass=\"w-40...\">w-40</div><divclass=\"w-32...\">w-32</div><divclass=\"w-24...\">w-24</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Percentage widths"
                },
                {
                    "type": "p",
                    "text": "Use utilities likew-full,w-1/2, andw-2/5to set an element to a percentage based width."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"flex ...\"><divclass=\"w-1/2...\">w-1/2</div><divclass=\"w-1/2...\">w-1/2</div></div><divclass=\"flex ...\"><divclass=\"w-2/5...\">w-2/5</div><divclass=\"w-3/5...\">w-3/5</div></div><divclass=\"flex ...\"><divclass=\"w-1/3...\">w-1/3</div><divclass=\"w-2/3...\">w-2/3</div></div><divclass=\"flex ...\"><divclass=\"w-1/4...\">w-1/4</div><divclass=\"w-3/4...\">w-3/4</div></div><divclass=\"flex ...\"><divclass=\"w-1/5...\">w-1/5</div><divclass=\"w-4/5...\">w-4/5</div></div><divclass=\"flex ...\"><divclass=\"w-1/6...\">w-1/6</div><divclass=\"w-5/6...\">w-5/6</div></div><divclass=\"w-full...\">w-full</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Viewport width"
                },
                {
                    "type": "p",
                    "text": "Usew-screento make an element span the entire width of the viewport."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-screen\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Resetting the width"
                },
                {
                    "type": "p",
                    "text": "Thew-autoutility can be useful if you need to remove an element’s assigned width under a specific condition, like at a particular breakpoint:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-full md:w-auto\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:w-fullto only apply thew-fullutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-1/2hover:w-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:w-fullto apply thew-fullutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-1/2md:w-full\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind’s width scale is a combination of thedefault spacing scaleas well as some additional values specific to widths."
                },
                {
                    "type": "p",
                    "text": "You can customize your spacing scale by editingtheme.spacingortheme.extend.spacingin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{spacing:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "To customize width separately, use thetheme.widthsection of yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{width:{'128':'32rem',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offwidthvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"w-[32rem]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Fixed widths",
                        "Percentage widths",
                        "Viewport width",
                        "Resetting the width",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/will-change",
            "title": "Will Change - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Interactivity",
                        "Will Change"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Optimizing with will change"
                },
                {
                    "type": "p",
                    "text": "Usewill-change-scroll,will-change-contentsandwill-change-transformto optimize an element that’s expected to change in the near future by instructing the browser to prepare the necessary animation before it actually begins."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"overflow-autowill-change-scroll\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "It’s recommended that you apply these utilities just before an element changes, and then remove it shortly after it finishes usingwill-change-auto."
                },
                {
                    "type": "p",
                    "text": "The will-change property is intended to be used as a last resort when dealing withknown performance problems. Avoid using these utilities too much, or simply in anticipation of performance issues, as it could actually cause the page to be less performant."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:will-change-scrollto only apply thewill-change-scrollutility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"will-change-autohover:will-change-scroll\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:will-change-scrollto apply thewill-change-scrollutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"will-change-automd:will-change-scroll\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides fourwill-changeutilities. You can customize these values by editingtheme.willChangeortheme.extend.willChangein yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{willChange:{'left-top':'left, top',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offwill-changevalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"will-change-[top,left]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Optimizing with will change",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/word-break",
            "title": "Word Break - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Typography",
                        "Word Break"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Normal"
                },
                {
                    "type": "p",
                    "text": "Usebreak-normalto only add line breaks at normal word break points."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-normal...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Break Words"
                },
                {
                    "type": "p",
                    "text": "Usebreak-wordsto add line breaks mid-word if needed."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-words...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Break All"
                },
                {
                    "type": "p",
                    "text": "Usebreak-allto add line breaks whenever necessary, without trying to preserve whole words."
                },
                {
                    "type": "p",
                    "text": "The longest word in any of the major English language dictionaries ispneumonoultramicroscopicsilicovolcanoconiosis,a word that refers to a lung disease contracted from the inhalation of very fine silica particles, specifically from a volcano; medically, it is the same as silicosis."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-all...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Break Keep"
                },
                {
                    "type": "p",
                    "text": "Usebreak-keepto prevent line breaks from being applied to Chinese/Japanese/Korean (CJK) text. For non-CJK textbreak-keephas the same behavior asbreak-normal."
                },
                {
                    "type": "p",
                    "text": "抗衡不屈不挠 (kànghéng bùqū bùnáo) 这是一个长词，意思是不畏强暴，奋勇抗争，坚定不移，永不放弃。这个词通常用来描述那些在面对困难和挑战时坚持自己信念的人，他们克服一切困难，不屈不挠地追求自己的目标。无论遇到多大的挑战，他们都能够坚持到底，不放弃，最终获得胜利。"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-keep...\">...</p>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:break-allto only apply thebreak-allutility onhover."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-normalhover:break-all\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:break-allto apply thebreak-allutility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<pclass=\"break-normalmd:break-all\"><!-- ... --></p>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Normal",
                        "Break Words",
                        "Break All",
                        "Break Keep",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        },
        {
            "url": "https://tailwindcss.com/docs/z-index",
            "title": "Z-Index - Tailwind CSS",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Layout",
                        "Z-Index"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Quick reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Basic usage"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Setting the z-index"
                },
                {
                    "type": "p",
                    "text": "Use thez-*utilities to control the stack order (or three-dimensional positioning) of an element, regardless of order it has been displayed."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"z-40...\">05</div><divclass=\"z-30...\">04</div><divclass=\"z-20...\">03</div><divclass=\"z-10...\">02</div><divclass=\"z-0...\">01</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Using negative values"
                },
                {
                    "type": "p",
                    "text": "To use a negative z-index value, prefix the class name with a dash to convert it to a negative value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"-z-50\"><!-- ... --></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Applying conditionally"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Hover, focus, and other states"
                },
                {
                    "type": "p",
                    "text": "Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, usehover:z-50to only apply thez-50utility onhover."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"z-0hover:z-50\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "For a complete list of all available state modifiers, check out theHover, Focus, & Other Statesdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Breakpoints and media queries"
                },
                {
                    "type": "p",
                    "text": "You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, usemd:z-50to apply thez-50utility at only medium screen sizes and above."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"z-0md:z-50\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "To learn more, check out the documentation onResponsive Design,Dark Modeandother media query modifiers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "​Using custom values"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Customizing your theme"
                },
                {
                    "type": "p",
                    "text": "By default, Tailwind provides six numericz-indexutilities and anautoutility. You can customize these values by editingtheme.zIndexortheme.extend.zIndexin yourtailwind.config.jsfile."
                },
                {
                    "type": "code",
                    "code": "module.exports={theme:{extend:{zIndex:{'100':'100',}}}}"
                },
                {
                    "type": "p",
                    "text": "Learn more about customizing the default theme in thetheme customizationdocumentation."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "​Arbitrary values"
                },
                {
                    "type": "p",
                    "text": "If you need to use a one-offz-indexvalue that doesn’t make sense to include in your theme, use square brackets to generate a property on the fly using any arbitrary value."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"z-[100]\"><!-- ... --></div>"
                },
                {
                    "type": "p",
                    "text": "Learn more about arbitrary value support in thearbitrary valuesdocumentation."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "On this page"
                },
                {
                    "type": "list",
                    "items": [
                        "Quick reference",
                        "Basic usage",
                        "Setting the z-index",
                        "Using negative values",
                        "Applying conditionally",
                        "Hover, focus, and other states",
                        "Breakpoints and media queries",
                        "Using custom values",
                        "Customizing your theme",
                        "Arbitrary values"
                    ]
                },
                {
                    "type": "p",
                    "text": "From the creators of Tailwind CSS"
                },
                {
                    "type": "p",
                    "text": "Make your ideas look awesome, without relying on a designer."
                }
            ]
        }
    ]
}