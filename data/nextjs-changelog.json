[{"source": "https://nextjs.org/blog/next-14", "title": "Next.js 14", "text": "Thursday, October 26th 2023 Next.js 14 Posted byAs announced Next.js Conf, Next.js 14 focused release with: - Turbopack: 5,000 tests passing App & Pages Router - 53% faster local server startup - 94% faster code updates Fast Refresh - Server Actions (Stable): Progressively enhanced mutations - Integrated caching & revalidating - Simple function calls, works natively forms - Partial Prerendering (Preview): Fast initial static response + streaming dynamic content - Next.js Learn (New): Free course teaching App Router, authentication, databases, more. Upgrade today get started with: npx create-next-app@latest Next.js Compiler: Turbocharged Since Next.js 13, working improve local development performance Next.js Pages App Router. Previously, rewriting next dev parts Next.js support effort. since changed approach incremental. means Rust-based compiler reach stability soon, refocused supporting Next.js features first. 5,000 integration tests next dev passing Turbopack, underlying Rust engine. tests include 7 years bug fixes reproductions. testing vercel.com , large Next.js application, seen: - 53.3% faster local server startup - 94.7% faster code updates Fast Refresh benchmark practical result performance improvements expect large application (and large module graph). 90% tests next dev passing, see faster reliable performance consistently using next dev --turbo . hit 100% tests passing, move Turbopack stable upcoming minor release. also continue support using webpack custom configurations ecosystem plugins. follow percentage tests passing areweturboyet.com. Forms Mutations Next.js 9 introduced API Routes\u2014a way quickly build backend endpoints alongside frontend code. example, would create new file api/ directory: import type { NextApiRequest, NextApiResponse } 'next'; export default async function handler( req: NextApiRequest, res: NextApiResponse, ) { const data = req.body; const id = await createItem(data); res.status(200).json({ id }); } Then, client-side, could use React event handler like onSubmit make fetch API Route. import { FormEvent } 'react'; export default function Page() { async function onSubmit(event: FormEvent<HTMLFormElement>) { event.preventDefault(); const formData = new FormData(event.currentTarget); const response = await fetch('/api/submit', { method: 'POST', body: formData, }); // Handle response necessary const data = await response.json(); // ... } return ( <form onSubmit={onSubmit}> <input type=\"text\" name=\"name\" /> <button type=\"submit\">Submit</button> </form> ); } Next.js 14, want simplify developer experience authoring data mutations. Further, want improve user experience user slow network connection, submitting form lower-powered device. Server Actions (Stable) need manually create API Route? Instead, could define function runs securely server, called directly React components. App Router built React canary channel, stable frameworks adopt new features. v14, Next.js upgraded latest React canary , includes stable Server Actions. previous example Pages Router simplified one file: export default function Page() { async function create(formData: FormData) { 'use server'; const id = await createItem(formData); } return ( <form action={create}> <input type=\"text\" name=\"name\" /> <button type=\"submit\">Submit</button> </form> ); } Server Actions feel familiar developers previously used server-centric frameworks past. built web fundamentals like forms FormData Web API. using Server Actions form helpful progressive enhancement, requirement. also call directly function, without form. using TypeScript, gives full end-to-end type-safety client server. Mutating data, re-rendering page, redirecting happen one network roundtrip, ensuring correct data displayed client, even upstream provider slow. Further, compose reuse different actions, including many different actions route. Caching, Revalidating, Redirecting, Server Actions deeply integrated entire App Router model. can: - Revalidate cached data revalidatePath() orrevalidateTag() - Redirect different routes redirect() - Set read cookies cookies() - Handle optimistic UI updates useOptimistic() - Catch display errors server useFormState() - Display loading states client useFormStatus() Learn Forms Mutations Server Actions security model best practices Server Components Server Actions. Partial Prerendering (Preview) like share preview Partial Prerendering \u2014 compiler optimization dynamic content fast initial static response \u2014 working Next.js. Partial Prerendering builds decade research development server-side rendering (SSR), static-site generation (SSG), incremental static revalidation (ISR). Motivation heard feedback. There's currently many runtimes, configuration options, rendering methods consider. want speed reliability static, also supporting fully dynamic, personalized responses. great performance globally personalization come cost complexity. challenge create better developer experience, simplifying existing model without introducing new APIs developers learn. partial caching server-side content existed, approaches still need meet developer experience composability goals aim for. Partial Prerendering requires new APIs learn. Built React Suspense Partial Prerendering defined Suspense boundaries. Here's works. Consider following ecommerce page: export default function Page() { return ( <main> <header> <h1>My Store</h1> <Suspense fallback={<CartSkeleton />}> <ShoppingCart /> </Suspense> </header> <Banner /> <Suspense fallback={<ProductListSkeleton />}> <Recommendations /> </Suspense> <NewProducts /> </main> ); } Partial Prerendering enabled, page generates static shell based <Suspense /> boundaries. fallback React Suspense prerendered. Suspense fallbacks shell replaced dynamic components, like reading cookies determine cart, showing banner based user. request made, static HTML shell immediately served: <main> <header> <h1>My Store</h1> <div class=\"cart-skeleton\"> <!-- Hole --> </div> </header> <div class=\"banner\" /> <div class=\"product-list-skeleton\"> <!-- Hole --> </div> <section class=\"new-products\" /> </main> Since <ShoppingCart /> reads cookies look user session, component streamed part HTTP request static shell. extra network roundtrips needed. import { cookies } 'next/headers' export default function ShoppingCart() { const cookieStore = cookies() const session = cookieStore.get('session') return ... } granular static shell, may require adding additional Suspense boundaries. However, already using loading.js today, implicit Suspense boundary, changes would required generate static shell. Coming soon Partial prerendering active development. sharing updates upcoming minor release. Metadata Improvements page content streamed server, there's important metadata viewport, color scheme, theme need sent browser first. Ensuring meta tags sent initial page content helps smooth user experience, preventing page flickering changing theme color, shifting layout due viewport changes. Next.js 14, decoupled blocking non-blocking metadata. small subset metadata options blocking, want ensure non-blocking metadata prevent partially prerendered page serving static shell. following metadata options deprecated removed metadata future major version: viewport : Sets initial zoom properties viewportcolorScheme : Sets support modes (light/dark) viewportthemeColor : Sets color chrome around viewport render Starting Next.js 14, new options viewport generateViewport replace options. metadata options remain same. start adopting new APIs today. existing metadata options continue work. Next.js Learn Course Today releasing brand new, free course Next.js Learn. course teaches: - Next.js App Router - Styling Tailwind CSS - Optimizing Fonts Images - Creating Layouts Pages - Navigating Pages - Setting Postgres Database - Fetching Data Server Components - Static Dynamic Rendering - Streaming - Partial Prerendering (Optional) - Adding Search Pagination - Mutating Data - Handling Errors - Improving Accessibility - Adding Authentication - Adding Metadata Next.js Learn taught millions developers foundations framework, can't wait hear feedback new addition. Head nextjs.org/learn take course. Changes - [Breaking] Minimum Node.js version 18.17 - [Breaking] Removes WASM target next-swc build (PR) - [Breaking] Dropped support @next/font favor ofnext/font (Codemod) - [Breaking] Changed ImageResponse import fromnext/server tonext/og (Codemod) - [Breaking] next export command removed favor ofoutput: 'export' config (Docs) - [Deprecation] onLoadingComplete fornext/image deprecated favor ofonLoad - [Deprecation] domains fornext/image deprecated favor ofremotePatterns - [Feature] verbose logging around fetch caching enabled (Docs) - [Improvement] 80% smaller function size basic create-next-app application - [Improvement] Enhanced memory management using edge runtime development Contributors Next.js result combined work 2,900 individual developers, industry partners like Google Meta, core team Vercel. Join community GitHub Discussions, Reddit, Discord. release brought by: - Next.js team: Andrew, Balazs, Jiachi, Jimmy, JJ, Josh, Sebastian, Shu, Steven, Tim, Wyatt, Zack. - Turbopack team: Donny, Justin, Leah, Maia, OJ, Tobias, Will. - Next.js Learn: Delba, Steph, Emil, Balazs, Hector, Amy. contributions of: @05lazy, @0xadada, @2-NOW, @aarnadlr, @aaronbrown-vercel, @aaronjy, @abayomi185, @abe1272001, @abhiyandhakal, @abstractvector, @acdlite, @adamjmcgrath, @AdamKatzDev, @adamrhunter, @ademilter, @adictonator, @adilansari, @adtc, @afonsojramos, @agadzik, @agrattan0820, @akd-io, @AkifumiSato, @akshaynox, @alainkaiser, @alantoa, @albertothedev, @AldeonMoriak, @aleksa-codes, @alexanderbluhm, @alexkirsz, @alfred-mountfield, @alpha-xek, @andarist, @Andarist, @andrii-bodnar, @andykenward, @angel1254mc, @anonrig, @anthonyshew, @AntoineBourin, @anujssstw, @apeltop, @aralroca, @aretrace, @artdevgame, @artechventure, @arturbien, @Aryan9592, @AviAvinav, @aziyatali, @BaffinLee, @Banbarashik, @bencmbrook, @benjie, @bennettdams, @bertho-zero, @bigyanse, @Bitbbot, @blue-devil1134, @bot08, @bottxiang, @Bowens20832, @bre30kra69cs, @BrennanColberg, @brkalow, @BrodaNoel, @Brooooooklyn, @brunoeduardodev, @brvnonascimento, @carlos-menezes, @cassidoo, @cattmote, @cesarkohl, @chanceaclark, @charkour, @charlesbdudley, @chibicode, @chrisipanaque, @ChristianIvicevic, @chriswdmr, @chunsch, @ciruz, @cjmling, @clive-h-townsend, @colinhacks, @colinking, @coreyleelarson, @Cow258, @cprussin, @craigwheeler, @cramforce, @cravend, @cristobaldominguez95, @ctjlewis, @cvolant, @cxa, @danger-ahead, @daniel-web-developer, @danmindru, @dante-robinson, @darshanjain-entrepreneur, @darshkpatel, @davecarlson, @David0z, @davidnx, @dciug, @delbaoliveira, @denchance, @DerTimonius, @devagrawal09, @DevEsteves, @devjiwonchoi, @devknoll, @DevLab2425, @devvspaces, @didemkkaslan, @dijonmusters, @dirheimerb, @djreillo, @dlehmhus, @doinki, @dpnolte, @Drblessing, @dtinth, @ducanhgh, @DuCanhGH, @ductnn, @duncanogle, @dunklesToast, @DustinsCode, @dvakatsiienko, @dvoytenko, @dylanjha, @ecklf, @EndangeredMassa, @eps1lon, @ericfennis, @escwxyz, @Ethan-Arrowood, @ethanmick, @ethomson, @fantaasm, @feikerwu, @ferdingler, @FernandVEYRIER, @feugy, @fgiuliani, @fomichroman, @Fonger, @ForsakenHarmony, @franktronics, @FSaldanha, @fsansalvadore, @furkanmavili, @g12i, @gabschne, @gaojude, @gdborton, @gergelyke, @gfgabrielfranca, @gidgudgod, @Gladowar, @Gnadhi, @gnoff, @goguda, @greatSumini, @gruz0, @Guilleo03, @gustavostz, @hanneslund, @HarshaVardhanReddyDuvvuru, @haschikeks, @Heidar-An, @heyitsuzair, @hiddenest, @hiro0218, @hotters, @hsrvms, @hu0p, @hughlilly, @HurSungYun, @hustLer2k, @iamarpitpatidar, @ianldgs, @ianmacartney, @iaurg, @ibash, @ibrahemid, @idoob, @iiegor, @ikryvorotenko, @imranbarbhuiya, @ingovals, @inokawa, @insik-han, @isaackatayev, @ishaqibrahimbot, @ismaelrumzan, @itsmingjie, @ivanhofer, @IvanKiral, @jacobsfletch, @jakemstar, @jamespearson, @JanCizmar, @janicklas-ralph, @jankaifer, @JanKaifer, @jantimon, @jaredpalmer, @javivelasco, @jayair, @jaykch, @Jeffrey-Zutt, @jenewland1999, @jeremydouglas, @JesseKoldewijn, @jessewarren-aa, @jimcresswell, @jiwooIncludeJeong, @jocarrd, @joefreeman, @JohnAdib, @JohnAlbin, @JohnDaly, @johnnyomair, @johnta0, @joliss, @jomeswang, @joostdecock, @Josehower, @josephcsoti, @josh, @joshuabaker, @JoshuaKGoldberg, @joshuaslate, @joulev, @jsteele-stripe, @JTaylor0196, @JuanM04, @jueungrace, @juliusmarminge, @Juneezee, @Just-Moh-it, @juzhiyuan, @jyunhanlin, @kaguya3222, @karlhorky, @kevinmitch14, @keyz, @kijikunnn, @kikobeats, @Kikobeats, @kleintorres, @koba04, @koenpunt, @koltong, @konomae, @kosai106, @krmeda, @kvnang, @kwonoj, @ky1ejs, @kylemcd, @labyrinthitis, @lachlanjc, @lacymorrow, @laityned, @Lantianyou, @leerob, @leodr, @leoortizz, @li-jia-nan, @loettz, @lorenzobloedow, @lubakravche, @lucasassisrosa, @lucasconstantino, @lucgagan, @LukeSchlangen, @LuudJanssen, @lycuid, @M3kH, @m7yue, @manovotny, @maranomynet, @marcus-rise, @MarDi66, @MarkAtOmniux, @martin-wahlberg, @masnormen, @matepapp, @matthew-heath, @mattpr, @maxleiter, @MaxLeiter, @maxproske, @meenie, @meesvandongen, @mhmdrioaf, @michaeloliverx, @mike-plummer, @MiLk, @milovangudelj, @Mingyu-Song, @mirismaili, @mkcy3, @mknichel, @mltsy, @mmaaaaz, @mnajdova, @moetazaneta, @mohanraj-r, @molebox, @morganfeeney, @motopods, @mPaella, @mrkldshv, @mrxbox98, @nabsul, @nathanhammond, @nbouvrette, @nekochantaiwan, @nfinished, @Nick-Mazuk, @nickmccurdy, @niedziolkamichal, @niko20, @nikolovlazar, @nivak-monarch, @nk980113, @nnnnoel, @nocell, @notrab, @nroland013, @nuta, @nutlope, @obusk, @okcoker, @oliviertassinari, @omarhoumz, @opnay, @orionmiz, @ossan-engineer, @patrick91, @pauek, @peraltafederico, @Phiction, @pn-code, @pyjun01, @pythagoras-yamamoto, @qrohlf, @raisedadead, @reconbot, @reshmi-sriram, @reyrodrigez, @ricardofiorani, @rightones, @riqwan, @rishabhpoddar, @rjsdnql123, @rodrigofeijao, @runjuu, @Ryan-Dia, @ryo-manba, @s0h311, @sagarpreet-xflowpay, @sairajchouhan, @samdenty, @samsisle, @sanjaiyan-dev, @saseungmin, @SCG82, @schehata, @Schniz, @sepiropht, @serkanbektas, @sferadev, @ShaunFerris, @shivanshubisht, @shozibabbas, @silvioprog, @simonswiss, @simPod, @sivtu, @SleeplessOne1917, @smaeda-ks, @sonam-serchan, @SonMooSans, @soonoo, @sophiebits, @souporserious, @sp00ls, @sqve, @sreetamdas, @stafyniaksacha, @starunaway, @steebchen, @stefanprobst, @steppefox, @steven-tey, @suhaotian, @sukkaw, @SukkaW, @superbahbi, @SuttonJack, @svarunid, @swaminator, @swarnava, @syedtaqi95, @taep96, @taylorbryant, @teobler, @Terro216, @theevilhead, @thepatrick00, @therealrinku, @thomasballinger, @thorwebdev, @tibi1220, @tim-hanssen, @timeyoutakeit, @tka5, @tknickman, @tomryanx, @trigaten, @tristndev, @tunamagur0, @tvthatsme, @tyhopp, @tyler-lutz, @UnknownMonk, @v1k1, @valentincostam, @valentinh, @valentinpolitov, @vamcs, @vasucp1207, @vicsantizo, @vinaykulk621, @vincenthongzy, @visshaljagtap, @vladikoff, @wherehows, @WhoAmIRUS, @WilderDev, @Willem-Jaap, @williamli, @wiredacorn, @wiscaksono, @wojtekolek, @ws-jm, @wxh06, @wyattfry, @wyattjoh, @xiaolou86, @y-tsubuku, @yagogmaisp, @yangshun, @yasath, @Yash-Singh1, @yigithanyucedag, @ykzts, @Yovach, @yutsuten, @yyuemii, @zek, @zekicaneksi, @zignis, @zlrlyy"},
{"source": "https://nextjs.org/blog/next-14-1", "title": "Next.js 14.1", "text": "Thursday, January 18th 2024 Next.js 14.1 Posted byNext.js 14.1 includes developer experience improvements including: - Improved Self-Hosting: New documentation custom cache handler - Turbopack Improvements: 5,600 tests passing next dev --turbo - DX Improvements: Improved error messages, pushState andreplaceState support - Parallel & Intercepted Routes: 20 bug fixes based feedback next/image Improvements:<picture> , art direction, dark mode support Upgrade today get started with: npx create-next-app@latest Improved Self-Hosting heard feedback improved clarity self-host Next.js Node.js server, Docker container, static export. overhauled self-hosting documentation on: - Runtime environment variables - Custom cache configuration ISR - Custom image optimization - Middleware Next.js 14.1, also stabilized providing custom cache handlers Incremental Static Regeneration granular Data Cache App Router: module.exports = { cacheHandler: require.resolve('./cache-handler.js'), cacheMaxMemorySize: 0, // disable default in-memory caching }; Using configuration self-hosting important using container orchestration platforms like Kubernetes, pod copy cache. Using custom cache handler allow ensure consistency across pods hosting Next.js application. instance, save cached values anywhere, like Redis Memcached. like thank @neshca Redis cache handler adapter example. Turbopack Improvements continuing focus reliability performance local Next.js development: - Reliability: Turbopack passing entire Next.js development test suite dogfooding Vercel's applications - Performance: Improving Turbopack initial compile times Fast Refresh times - Memory Usage: Improving Turbopack memory usage plan stabilize next dev --turbo upcoming release still opt-in. Reliability Next.js Turbopack passes 5,600 development tests (94%), 600 since last update. follow progress areweturboyet.com. continued dogfooding next dev --turbo Vercel's Next.js applications, including vercel.com v0.dev. engineers working applications using Turbopack daily. found fixed number issues large Next.js applications using Turbopack. fixes, added new tests existing development test suites Next.js. Performance vercel.com , large Next.js application, seen: - 76.7% faster local server startup - 96.3% faster code updates Fast Refresh - 45.8% faster initial route compile without caching (Turbopack disk caching yet) v0.dev, identified opportunity optimize way React Client Components discovered bundled Turbopack - resulting 61.5% faster initial compile time. performance improvement also observed vercel.com. Future Improvements Turbopack currently in-memory caching, improves incremental compilation times Fast Refresh. However, cache currently preserved restarting Next.js development server. next big step Turbopack performance disk caching, allow cache preserved restating development server. Developer Experience Improvements Improved Error Messages Fast Refresh know critical clear error messages local development experience. made number fixes improve quality stack traces error messages see running next dev . - Errors previously displayed bundler errors like webpack-internal properly display source code error affected file. - seeing error client component, fixing error editor, Fast Refresh clear error screen. required hard reload. fixed number instances. example, trying export metadata Client Component. example, previous error message: Next.js 14.1 improved to: window.history.pushState window.history.replaceState App Router allows usage native pushState replaceState methods update browser's history stack without reloading page. pushState replaceState calls integrate Next.js App Router, allowing sync usePathname useSearchParams . helpful needing immediately update URL saving state like filters, sort order, information desired persist across reloads. 'use client'; import { useSearchParams } 'next/navigation'; export default function SortProducts() { const searchParams = useSearchParams(); function updateSorting(sortOrder: string) { const params = new URLSearchParams(searchParams.toString()); params.set('sort', sortOrder); window.history.pushState(null, '', `?${params.toString()}`); } return ( <> <button onClick={() => updateSorting('asc')}>Sort Ascending</button> <button onClick={() => updateSorting('desc')}>Sort Descending</button> </> ); } Learn using native History API Next.js. Data Cache Logging improved observability cached data Next.js application running next dev , made number improvements logging configuration option. display whether cache HIT SKIP full URL requested: GET / 200 48ms \u2713 Compiled /fetch-cache 117ms GET /fetch-cache 200 165ms \u2502 GET https://api.vercel.app/products/1 200 14ms (cache: HIT) \u2713 Compiled /fetch-no-store 150ms GET /fetch-no-store 200 548ms \u2502 GET https://api.vercel.app/products/1 200 345ms (cache: SKIP) \u2502 \u2502 Cache missed reason: (cache: no-store) enabled next.config.js : module.exports = { logging: { fetches: { fullUrl: true, }, }, }; next/image support <picture> Art Direction Next.js Image component supports advanced use cases getImageProps() (stable) require using <Image> directly. includes: - Working background-image orimage-set - Working canvas context.drawImage() ornew Image() - Working <picture> media queries implement Art Direction Light/Dark Mode images import { getImageProps } 'next/image'; export default function Page() { const common = { alt: 'Hero', width: 800, height: 400 }; const { props: { srcSet: dark }, } = getImageProps({ ...common, src: '/dark.png' }); const { props: { srcSet: light, ...rest }, } = getImageProps({ ...common, src: '/light.png' }); return ( <picture> <source media=\"(prefers-color-scheme: dark)\" srcSet={dark} /> <source media=\"(prefers-color-scheme: light)\" srcSet={light} /> <img {...rest} /> </picture> ); } Learn getImageProps() . Parallel & Intercepted Routes Next.js 14.1, made 20 improvements Parallel & Intercepted Routes. past two releases, focused improving performance reliability Next.js. able make many improvements Parallel & Intercepted Routes based feedback. Notably, added support catch-all routes Server Actions. - Parallel Routes allow simultaneously conditionally render one pages layout. highly dynamic sections app, dashboards feeds social sites, Parallel Routes used implement complex routing patterns. - Intercepted Routes allow load route another part application within current layout. example, clicking photo feed, display photo modal, overlaying feed. case, Next.js intercepts /photo/123 route, masks URL, overlays over/feed . Learn Parallel & Intercepted Routes view example. Improvements Since 14.0 , fixed number highly upvoted bugs community. also recently published videos explaining caching common mistakes App Router might find helpful. - [Docs] New documentation Redirecting - [Docs] New documentation Testing - [Docs] New documentation Production Checklist - [Feature] Add <GoogleAnalytics /> component tonext/third-parties (Docs) - [Improvement] create-next-app smaller faster install (PR) - [Improvement] Nested routes throwing errors still caught global-error (PR) - [Improvement] redirect respectsbasePath used server action (PR) - [Improvement] Fix next/script andbeforeInteractive usage App Router (PR) - [Improvement] Automatically transpile @aws-sdk andlodash faster route startup (PR) - [Improvement] Fix flash unstyled content next dev andnext/font (PR) - [Improvement] Propagate notFound errors past segment's error boundary (PR) - [Improvement] Fix serving public files locale domains Pages Router i18n (PR) - [Improvement] Error invalidate revalidate value passed (PR) - [Improvement] Fix path issues linux machines build created windows (PR) - [Improvement] Fix Fast Refresh / HMR using multi-zone app basePath (PR) - [Improvement] Improve graceful shutdown termination signals (PR) - [Improvement] Modal routes clash intercepting different routes (PR) - [Improvement] Fix intercepting routes using basePath config (PR) - [Improvement] Show warning missing parallel slot results 404 (PR) - [Improvement] Improve intercepted routes used catch-all routes (PR) - [Improvement] Improve intercepted routes used revalidatePath (PR) - [Improvement] Fix usage @children slots parallel routes (PR) - [Improvement] Fix Fix TypeError using params parallel routes (PR) - [Improvement] Fix catch-all route normalization default parallel routes (PR) - [Improvement] Fix display parallel routes next build summary (PR) - [Improvement] Fix route parameters using intercepted routes (PR) - [Improvement] Improve deeply nested parallel/intercepted routes (PR) - [Improvement] Fix 404 intercepted routes paired route groups (PR) - [Improvement] Fix parallel routes server actions / revalidating router cache (PR) - [Improvement] Fix usage rewrites intercepted route (PR) - [Improvement] Server Actions work third-party libraries (PR) - [Improvement] Next.js used within ESM package (PR) - [Improvement] Barrel file optimizations libraries like Material UI (PR) - [Improvement] Builds fail incorrect usage useSearchParams withoutSuspense (PR) Contributors Next.js result combined work 3,000 individual developers, industry partners like Google Meta, core team Vercel. Join community GitHub Discussions, Reddit, Discord. release brought by: - Next.js team: Andrew, Balazs, Jiachi, Jimmy, JJ, Josh, Sebastian, Shu, Steven, Tim, Wyatt, Zack. - Turbopack team: Donny, Leah, Maia, OJ, Tobias, Will. - Next.js Docs: Delba, Steph, Michael, Lee. contributions of: @OlehDutchenko, @eps1lon, @ebidel, @janicklas-ralph, @JohnPhamous, @chentsulin, @akawalsky, @BlankParticle, @dvoytenko, @smaeda-ks, @kenji-webdev, @rv-david, @icyJoseph, @dijonmusters, @A7med3bdulBaset, @jenewland1999, @mknichel, @kdy1, @housseindjirdeh, @max-programming, @redbmk, @SSakibHossain10, @jamesmillerburgess, @minaelee, @officialrajdeepsingh, @LorisSigrist, @yesl-kim, @StevenKamwaza, @manovotny, @mcexit, @remcohaszing, @ryo-manba, @TranquilMarmot, @vinaykulk621, @haritssr, @divquan, @IgorVaryvoda, @LukeSchlangen, @RiskyMH, @ash2048, @ManuWeb3, @msgadi, @dhayab, @ShahriarKh, @jvandenaardweg, @DestroyerXyz, @SwitchBladeAK, @ianmacartney, @justinh00k, @tiborsaas, @ArianHamdi, @li-jia-nan, @aramikuto, @jquinc30, @samcx, @Haosik, @AkifumiSato, @arnabsen, @nfroidure, @clbn, @siddtheone, @zbauman3, @anthonyshew, @alexfradiani, @CalebBarnes, @adk96r, @pacexy, @hichemfantar, @michaldudak, @redonkulus, @k-taro56, @mhughdo, @tknickman, @shumakmanohar, @vordgi, @hamirmahal, @gaspar09, @JCharante, @sjoerdvanBommel, @mass2527, @N-Ziermann, @tordans, @davidthorand, @rmathew8-gh, @chriskrogh, @shogunsea, @auipga, @SukkaW, @agustints, @OXXD, @clarencepenz, @better-salmon, @808vita, @coltonehrman, @tksst, @hugo-syn, @JakobJingleheimer, @Willem-Jaap, @brandonnorsworthy, @jaehunn, @jridgewell, @gtjamesa, @mugi-uno, @kentobento, @vivianyentran, @empflow, @samennis1, @mkcy3, @suhaotian, @imevanc, @d3lm, @amannn, @hallatore, @Dylan700, @mpsq, @mdio, @christianvuerings, @karlhorky, @simonhaenisch, @olci34, @zce, @LavaToaster, @rishabhpoddar, @jirihofman, @codercor, @devjiwonchoi, @JackieLi565, @thoushif, @pkellner, @jpfifer, @quisido, @tomfa, @raphaelbadia, @j9141997, @hongaar, @MadCcc, @luismulinari, @dumb-programmer, @nonoakij, @franky47, @robbertstevens, @bryndyment, @marcosmartini, @functino, @Anisi, @AdonisAgelis, @seangray-dev, @prkagrawal, @heloineto, @kn327, @ihommani, @MrNiceRicee, @falsepopsky, @thomasballinger, @tmilewski, @Vadman97, @dnhn, @RodrigoTomeES, @sadikkuzu, @gffuma, @Schniz, @joulev, @Athrun-Judah, @rasvanjaya21, @rashidul0405, @nguyenbry, @Mwimwii, @molebox, @mrr11k, @philwolstenholme, @IgorKowalczyk, @Zoe-Bot, @HanCiHu, @JackHowa, @goncy, @hirotomoyamada, @pveyes, @yeskunall, @ChendayUP, @hmaesta, @ajz003, @its-kunal, @joelhooks, @blurrah, @tariknh, @Vinlock, @Nayeem-XTREME, @aziyatali, @aspehler, @moka-ayumu."},
{"source": "https://nextjs.org/blog/next-14-2", "title": "Next.js 14.2", "text": "Thursday, April 11th 2024 Next.js 14.2 Posted byNext.js 14.2 includes development, production, caching improvements. - Turbopack Development (Release Candidate): 99.8% tests passing next dev --turbo . - Build Production Improvements: Reduced build memory usage CSS optimizations. - Caching Improvements: Configurable invalidation periods staleTimes . - Error DX Improvements: Better hydration mismatch errors design updates. Upgrade today get started with: npx create-next-app@latest Turbopack Development (Release Candidate) past months, we\u2019ve working improving local development performance Turbopack. version 14.2, Turbopack Release Candidate available local development: - 99.8% integrations tests passing. - We\u2019ve verified top 300 npm packages used Next.js applications compile Turbopack. - Next.js examples work Turbopack. - We\u2019ve integrated Lightning CSS, fast CSS bundler minifier, written Rust. We\u2019ve extensively dogfooding Turbopack Vercel\u2019s applications. example, vercel.com , large Next.js app, seen: - 76.7% faster local server startup. - 96.3% faster code updates Fast Refresh. - 45.8% faster initial route compile without caching (Turbopack disk caching yet). Turbopack continues opt-in try with: next dev --turbo focusing improving memory usage, implementing persistent caching, next build --turbo . - Memory Usage - We\u2019ve built low-level tools investigating memory usage. generate traces include performance metrics broad memory usage information. traces allows us investigate performance memory usage without needing access application\u2019s source code. - Persistent Caching - We\u2019re also exploring best architecture options, we\u2019re expecting share details future release. next build - Turbopack available builds yet, 74.7% tests already passing. follow progress areweturboyet.com/build. see list supported unsupported features Turbopack, please refer documentation. Build Production Improvements addition bundling improvements Turbopack, we\u2019ve worked improve overall build production performance Next.js applications (both Pages App Router). Tree-shaking identified optimization boundary Server Client Components allows tree-shaking unused exports. example, importing single Icon component file \"use client\" longer includes icons package. largely reduce production JavaScript bundle size. Testing optimization popular library like react-aria-components reduced final bundle size -51.3%. Note: optimization currently work barrel files. meantime, use optimizePackageImports config option:next.config.tsmodule.exports = { experimental: { optimizePackageImports: ['package-name'], }, }; Build Memory Usage extremely large-scale Next.js applications, noticed out-of-memory crashes (OOMs) production builds. investigating user reports reproductions, identified root issue over-bundling minification (Next.js created fewer, larger JavaScript files duplication). We\u2019ve refactored bundling logic optimized compiler cases. early tests show minimal Next.js app, memory usage cache file size decreased 2.2GB 190MB average. make easier debug memory performance, we\u2019ve introduced --experimental-debug-memory-usage flag next build . Learn documentation. CSS updated CSS optimized production Next.js builds chunking CSS avoid conflicting styles navigate pages. order merging CSS chunks defined import order. example, base-button.module.css ordered page.module.css : import styles './base-button.module.css'; export function BaseButton() { return <button className={styles.primary} />; } import { BaseButton } './base-button'; import styles './page.module.css'; export function Page() { return <BaseButton className={styles.primary} />; } maintain correct CSS order, recommend: - Using CSS Modules global styles. - import CSS Module single JS/TS file. - using global class names, import global styles JS/TS too. don\u2019t expect change negatively impact majority applications. However, see unexpected styles upgrading, please review CSS import order per recommendations documentation. Caching Improvements Caching critical part building fast reliable web applications. performing mutations, users developers expect cache updated reflect latest changes. exploring improve Next.js caching experience App Router. staleTimes (Experimental) Client-side Router Cache caching layer designed provide fast navigation experience caching visited prefetched routes client. Based community feedback, we\u2019ve added experimental staleTimes option allow client-side router cache invalidation period configured. default, prefetched routes (using <Link> component without prefetch prop) cached 30 seconds, prefetch prop set true , 5 minutes. overwrite default values defining custom revalidation times next.config.js : const nextConfig = { experimental: { staleTimes: { dynamic: 30, static: 180, }, }, }; module.exports = nextConfig; staleTimes aims improve current experience users want control caching heuristics, intended complete solution. upcoming releases, focus improving overall caching semantics providing flexible solutions. Learn staleTimes documentation. Parallel Intercepting Routes continuing iterate Parallel Intercepting Routes, improving integration Client-side Router Cache. - Parallel Intercepting routes invoke Server Actions revalidatePath orrevalidateTag revalidate cache refresh visible slots maintaining user\u2019s current view. - Similarly, calling router.refresh correctly refreshes visible slots, maintaining current view. Errors DX Improvements version 14.1, started working improving readability error messages stack traces running next dev . work continued 14.2 include better error messages, overlay design improvements App Router Pages Router, light dark mode support, clearer dev build logs. example, React Hydration errors common source confusion community. made improvements help users pinpoint source hydration mismatches (see below), working React team improve underlying error messages show file name error occurred. Before: After: React 19 February, React team announced upcoming release React 19. prepare React 19, working integrating latest features improvements Next.js, plan releasing major version orchestrate changes. New features like Actions related hooks, available within Next.js React canary channel, available React applications (including client-only applications). excited see wider adoption features React ecosystem. Improvements - [Docs] New documentation Video Optimization (PR). - [Docs] New documentation instrumentation.ts (PR) - [Feature] New overrideSrc prop fornext/image (PR). - [Feature] New revalidateReason argument togetStaticProps (PR). - [Improvement] Refactored streaming logic, reducing time stream pages production (PR). - [Improvement] Support nested Server Actions (PR). - [Improvement] Support localization generated Sitemaps (PR). - [Improvement] Visual improvements dev build logs (PR) - [Improvement] Skew protection stable Vercel (Docs). - [Improvement] Make useSelectedLayoutSegment compatible Pages Router (PR). - [Improvement] Skip metadataBase warnings absolute URLs don\u2019t need resolved (PR). - [Improvement] Fix Server Actions submitting without JavaScript enabled deployed Vercel (PR) - [Improvement] Fix error Server Action found actions manifest triggered navigating away referring page, used inside inactive parallel route segment (PR) - [Improvement] Fix CSS imports components loaded next/dynamic (PR). - [Improvement] Warn animated image missing unoptimized prop (PR). - [Improvement] Show error message images.loaderFile export default function (PR) Community Next.js 1 million monthly active developers. grateful community's support contributions. Join conversation GitHub Discussions, Reddit, Discord. Contributors Next.js result combined work 3,000 individual developers, industry partners like Google Meta, core team Vercel. release brought by: - Next.js team: Andrew, Balazs, Ethan, Janka, Jiachi, Jimmy, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Steven, Tim, Wyatt, Zack. - Turbopack team: Donny, Leah, Maia, OJ, Tobias, Will. - Next.js Docs: Delba, Steph, Michael, Anthony, Lee. Huge thanks @taishikato, @JesseKoldewijn, @Evavic44, @feugy, @liamlaverty, @dvoytenko, @SukkaW, @wbinnssmith, @rishabhpoddar, @better-salmon, @ziyafenn, @A7med3bdulBaset, @jasonuc, @yossydev, @Prachi-meon, @InfiniteCodeMonkeys, @ForsakenHarmony, @miketimmerman, @kwonoj, @williamli, @gnoff, @jsteele-stripe, @chungweileong94, @WITS, @sogoagain, @junioryono, @eisafaqiri, @yannbolliger, @aramikuto, @rocketman-21, @kenji-webdev, @michaelpeterswa, @Dannymx, @vpaflah, @zeevo, @chrisweb, @stefangeneralao, @tknickman, @Kikobeats, @ubinatus, @code-haseeb, @hmmChase, @byhow, @DanielRivers, @wojtekmaj, @paramoshkinandrew, @OMikkel, @theitaliandev, @oliviertassinari, @Ishaan2053, @Sandeep-Mani, @alyahmedaly, @Lezzio, @devjiwonchoi, @juliusmarminge, @szmazhr, @eddiejaoude, @itz-Me-Pj, @AndersDJohnson, @gentamura, @tills13, @dijonmusters, @SaiGanesh21, @vordgi, @ryota-murakami, @tszhong0411, @officialrajdeepsingh, @alexpuertasr, @AkifumiSato, @Jonas-PFX, @icyJoseph, @florian-lp, @pbzona, @erfanium, @remcohaszing, @bernardobelchior, @willashe, @kevinmitch14, @smakosh, @mnjongerius, @asobirov, @theoholl, @suu3, @ArianHamdi, @adrianha, @Sina-Abf, @kuzeykose, @meenie, @nphmuller, @javivelasco, @belgattitude, @Svetoslav99, @johnslemmer, @colbyfayock, @mehranmf31, @m-nakamura145, @ryo8000, @aryaemami59, @bestlyg, @jinsoul75, @petrovmiroslav, @nattui, @zhuyedev, @dongwonnn, @nhducit, @flotwig, @Schmavery, @abhinaypandey02, @rvetere, @coffeecupjapan, @cjimmy, @Soheiljafarnejad, @jantimon, @zengspr, @wesbos, @neomad1337, @MaxLeiter, @devr77 helping!"},
{"source": "https://nextjs.org/blog/next-15", "title": "Next.js 15", "text": "Monday, October 21st 2024 Next.js 15 Posted byNext.js 15 officially stable ready production. release builds updates RC1 RC2. focused heavily stability adding exciting updates think love. Try Next.js 15 today: # Use new automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@rc react-dom@rc also excited share what's coming next Next.js Conf Thursday, October 24th. Here's new Next.js 15: @next/codemod CLI: Easily upgrade latest Next.js React versions.- Async Request APIs (Breaking): Incremental step towards simplified rendering caching model. - Caching Semantics (Breaking): fetch requests,GET Route Handlers, client navigations longer cached default. - React 19 Support: Support React 19, React Compiler (Experimental), hydration error improvements. - Turbopack Dev (Stable): Performance stability improvements. - Static Indicator: New visual indicator shows static routes development. unstable_after API (Experimental): Execute code response finishes streaming.instrumentation.js API (Stable): New API server lifecycle observability.- Enhanced Forms ( next/form ): Enhance HTML forms client-side navigation. next.config : TypeScript support fornext.config.ts .- Self-hosting Improvements: control Cache-Control headers. - Server Actions Security: Unguessable endpoints removal unused actions. - Bundling External Packages (Stable): New config options App Pages Router. - ESLint 9 Support: Added support ESLint 9. - Development Build Performance: Improved build times Faster Fast Refresh. Smooth upgrades @next/codemod CLI include codemods (automated code transformations) every major Next.js release help automate upgrading breaking changes. make upgrades even smoother, released enhanced codemod CLI: npx @next/codemod@canary upgrade latest tool helps upgrade codebase latest stable prerelease versions. CLI update dependencies, show available codemods, guide applying them. canary tag uses latest version codemod latest specifies Next.js version. recommend using canary version codemod even upgrading latest Next.js version, plan continue adding improvements tool based feedback. Learn Next.js codemod CLI. Async Request APIs (Breaking Change) traditional Server-Side Rendering, server waits request rendering content. However, components depend request-specific data, unnecessary wait request render them. Ideally, server would prepare much possible request arrives. enable this, set stage future optimizations, need know wait request. Therefore, transitioning APIs rely request-specific data\u2014such headers , cookies , params , searchParams \u2014to asynchronous. import { cookies } 'next/headers'; export async function AdminPanel() { const cookieStore = await cookies(); const token = cookieStore.get('token'); // ... } breaking change affects following APIs: cookies headers draftMode params inlayout.js ,page.js ,route.js ,default.js ,generateMetadata , andgenerateViewport searchParams inpage.js easier migration, APIs temporarily accessed synchronously, show warnings development production next major version. codemod available automate migration: npx @next/codemod@canary next-async-request-api . cases codemod can't fully migrate code, please read upgrade guide. also provided example migrate Next.js application new APIs. Caching Semantics Next.js App Router launched opinionated caching defaults. designed provide performant option default ability opt required. Based feedback, re-evaluated caching heuristics would interact projects like Partial Prerendering (PPR) third party libraries using fetch . Next.js 15, changing caching default GET Route Handlers Client Router Cache cached default uncached default. want retain previous behavior, continue opt-into caching. continuing improve caching Next.js coming months share details soon. GET Route Handlers longer cached default Next 14, Route Handlers used GET HTTP method cached default unless used dynamic function dynamic config option. Next.js 15, GET functions cached default. still opt caching using static route config option export dynamic = 'force-static' . Special Route Handlers like sitemap.ts , opengraph-image.tsx , icon.tsx , metadata files remain static default unless use dynamic functions dynamic config options. Client Router Cache longer caches Page components default Next.js 14.2.0, introduced experimental staleTimes flag allow custom configuration Router Cache. Next.js 15, flag still remains accessible, changing default behavior staleTime 0 Page segments. means navigate around app, client always reflect latest data Page component(s) become active part navigation. However, still important behaviors remain unchanged: - Shared layout data refetched server continue support partial rendering. - Back/forward navigation still restore cache ensure browser restore scroll position. loading.js remain cached 5 minutes (or value thestaleTimes.static configuration). opt previous Client Router Cache behavior setting following configuration: const nextConfig = { experimental: { staleTimes: { dynamic: 30, }, }, }; export default nextConfig; React 19 part Next.js 15 release, made decision align upcoming release React 19. version 15, App Router uses React 19 RC, also introduced backwards compatibility React 18 Pages Router based community feedback. using Pages Router, allows upgrade React 19 ready. Although React 19 still RC phase, extensive testing across real-world applications close work React team given us confidence stability. core breaking changes well-tested affect existing App Router users. Therefore, decided release Next.js 15 stable now, projects fully prepared React 19 GA. ensure transition smooth possible, provided codemods automated tools help ease migration process. Read Next.js 15 upgrade guide, React 19 upgrade guide, watch React Conf Keynote learn more. Pages Router React 18 Next.js 15 maintains backward compatibility Pages Router React 18, allowing users continue using React 18 benefiting improvements Next.js 15. Since first Release Candidate (RC1), shifted focus include support React 18 based community feedback. flexibility enables adopt Next.js 15 using Pages Router React 18, giving greater control upgrade path. Note: possible run Pages Router React 18 App Router React 19 application, recommend setup. could result unpredictable behavior typings inconsistencies, underlying APIs rendering logic two versions may fully align. React Compiler (Experimental) React Compiler new experimental compiler created React team Meta. compiler understands code deep level understanding plain JavaScript semantics Rules React, allows add automatic optimizations code. compiler reduces amount manual memoization developers APIs useMemo useCallback - making code simpler, easier maintain, less error prone. Next.js 15, added support React Compiler. Learn React Compiler, available Next.js config options. Note: React Compiler currently available Babel plugin, result slower development build times. Hydration error improvements Next.js 14.1 made improvements error messages hydration errors. Next.js 15 continues build adding improved hydration error view. Hydration errors display source code error suggestions address issue. example, previous hydration error message Next.js 14.1: Next.js 15 improved to: Turbopack Dev happy announce next dev --turbo stable ready speed development experience. using iterate vercel.com, nextjs.org, v0, applications great results. example, vercel.com , large Next.js app, seen: - 76.7% faster local server startup. - 96.3% faster code updates Fast Refresh. - 45.8% faster initial route compile without caching (Turbopack disk caching yet). learn Turbopack Dev new blog post. Static Route Indicator Next.js displays Static Route Indicator development help identify routes static dynamic. visual cue makes easier optimize performance understanding pages rendered. also use next build output view rendering strategy routes. update part ongoing efforts enhance observability Next.js, making easier developers monitor, debug, optimize applications. also working dedicated developer tools, details come soon. Learn Static Route Indicator, disabled. Executing code response unstable_after (Experimental) processing user request, server typically performs tasks directly related computing response. However, may need perform tasks logging, analytics, external system synchronization. Since tasks directly related response, user wait complete. Deferring work responding user poses challenge serverless functions stop computation immediately response closed. after() new experimental API solves problem allowing schedule work processed response finished streaming, enabling secondary tasks run without blocking primary response. use it, add experimental.after next.config.js : const nextConfig = { experimental: { after: true, }, }; export default nextConfig; Then, import function Server Components, Server Actions, Route Handlers, Middleware. import { unstable_after } 'next/server'; import { log } '@/app/utils'; export default function Layout({ children }) { // Secondary task after(() => { log(); }); // Primary task return <>{children}</>; } Learn unstable_after . instrumentation.js (Stable) instrumentation file, register() API, allows users tap Next.js server lifecycle monitor performance, track source errors, deeply integrate observability libraries like OpenTelemetry. feature stable experimental.instrumentationHook config option removed. addition, collaborated Sentry designing new onRequestError hook used to: - Capture important context errors thrown server, including: - Router: Pages Router App Router - Server context: Server Component, Server Action, Route Handler, Middleware - Report errors favorite observability provider. export async function onRequestError(err, request, context) { await fetch('https://...', { method: 'POST', body: JSON.stringify({ message: err.message, request, context }), headers: { 'Content-Type': 'application/json' }, }); } export async function register() { // init favorite observability provider SDK } Learn onRequestError function. <Form> Component new <Form> component extends HTML <form> element prefetching, client-side navigation, progressive enhancement. useful forms navigate new page, search form leads results page. import Form 'next/form'; export default function Page() { return ( <Form action=\"/search\"> <input name=\"query\" /> <button type=\"submit\">Submit</button> </Form> ); } <Form> component comes with: - Prefetching: form view, layout loading UI prefetched, making navigation fast. - Client-side Navigation: submission, shared layouts client-side state preserved. - Progressive Enhancement: JavaScript loaded yet, form still works via full-page navigation. Previously, achieving features required lot manual boilerplate. example: Example // Note: abbreviated demonstration purposes. // recommended use production code. 'use client' import { useEffect } 'react' import { useRouter } 'next/navigation' export default function Form(props) { const action = props.action const router = useRouter() useEffect(() => { // form target URL, prefetch (typeof action === 'string') { router.prefetch(action) } }, [action, router]) function onSubmit(event) { event.preventDefault() // grab form fields trigger `router.push` data URL encoded const formData = new FormData(event.currentTarget) const data = new URLSearchParams() (const [name, value] formData) { data.append(name, value string) } router.push(`${action}?${data.toString()}`) } (typeof action === 'string') { return <form onSubmit={onSubmit} {...props} /> } return <form {...props} /> } Learn <Form> Component. Support next.config.ts Next.js supports TypeScript next.config.ts file type provides NextConfig type autocomplete type-safe options: import type { NextConfig } 'next'; const nextConfig: NextConfig = { /* config options */ }; export default nextConfig; Learn TypeScript support Next.js. Improvements self-hosting self-hosting applications, may need control Cache-Control directives. One common case controlling stale-while-revalidate period sent ISR pages. implemented two improvements: - configure expireTime value innext.config . previously theexperimental.swrDelta option. - Updated default value one year, ensuring CDNs fully apply stale-while-revalidate semantics intended. also longer override custom Cache-Control values default values, allowing full control ensuring compatibility CDN setup. Finally, improved image optimization self-hosting. Previously, recommended install sharp optimizing images Next.js server. recommendation sometimes missed. Next.js 15, longer need manually install sharp \u2014 Next.js use sharp automatically using next start running standalone output mode. learn more, see new demo tutorial video self-hosting Next.js. Enhanced Security Server Actions Server Actions server-side functions called client. defined adding 'use server' directive top file exporting async function. Even Server Action utility function imported elsewhere code, still publicly accessible HTTP endpoint. behavior technically correct, lead unintentional exposure functions. improve security, introduced following enhancements: - Dead code elimination: Unused Server Actions IDs exposed client-side JavaScript bundle, reducing bundle size improving performance. - Secure action IDs: Next.js creates unguessable, non-deterministic IDs allow client reference call Server Action. IDs periodically recalculated builds enhanced security. // app/actions.js 'use server'; // action **is** used application, Next.js // create secure ID allow client reference // call Server Action. export async function updateUserAction(formData) {} // action **is not** used application, Next.js // automatically remove code `next build` // create public endpoint. export async function deleteUserAction(formData) {} still treat Server Actions public HTTP endpoints. Learn securing Server Actions. Optimizing bundling external packages (Stable) Bundling external packages improve cold start performance application. App Router, external packages bundled default, opt-out specific packages using new serverExternalPackages config option. Pages Router, external packages bundled default, provide list packages bundle using existing transpilePackages option. configuration option, need specify package. unify configuration App Pages Router, introducing new option, bundlePagesRouterDependencies match default automatic bundling App Router. use serverExternalPackages opt-out specific packages, needed. const nextConfig = { // Automatically bundle external packages Pages Router: bundlePagesRouterDependencies: true, // Opt specific packages bundling App Pages Router: serverExternalPackages: ['package-name'], }; export default nextConfig; Learn optimizing external packages. ESLint 9 Support Next.js 15 also introduces support ESLint 9, following end-of-life ESLint 8 October 5, 2024. ensure smooth transition, Next.js remain backwards compatible, meaning continue using either ESLint 8 9. upgrade ESLint 9, detect yet adopted new config format, Next.js automatically apply ESLINT_USE_FLAT_CONFIG=false escape hatch ease migration. Additionally, deprecated options like \u2014ext \u2014ignore-path removed running next lint . Please note ESLint eventually disallow older configurations ESLint 10, recommend starting migration soon. details changes, check migration guide. part update, also upgraded eslint-plugin-react-hooks v5.0.0 , introduces new rules React Hooks usage. review changes changelog eslint-plugin-react-hooks@5.0.0. Development Build Improvements Server Components HMR development, Server components re-executed saved. means, fetch requests API endpoints third-party services also called. improve local development performance reduce potential costs billed API calls, ensure Hot Module Replacement (HMR) re-use fetch responses previous renders. Learn Server Components HMR Cache. Faster Static Generation App Router optimized static generation improve build times, especially pages slow network requests. Previously, static optimization process rendered pages twice\u2014once generate data client-side navigation second time render HTML initial page visit. Now, reuse first render, cutting second pass, reducing workload build times. Additionally, static generation workers share fetch cache across pages. fetch call opt caching, results reused pages handled worker. reduces number requests data. Advanced Static Generation Control (Experimental) added experimental support control static generation process advanced use cases would benefit greater control. recommend sticking current defaults unless specific requirements options lead increased resource usage potential out-of-memory errors due increased concurrency. const nextConfig = { experimental: { // many times Next.js retry failed page generation attempts // failing build staticGenerationRetryCount: 1 // many pages processed per worker staticGenerationMaxConcurrency: 8 // minimum number pages spinning new export worker staticGenerationMinPagesPerWorker: 25 }, } export default nextConfig; Learn Static Generation options. Changes - [Breaking] next/image: Removed squoosh favor ofsharp optional dependency (PR) - [Breaking] next/image: Changed default Content-Disposition toattachment (PR) - [Breaking] next/image: Error src leading trailing spaces (PR) - [Breaking] Middleware: Apply react-server condition limit unrecommended React API imports (PR) - [Breaking] next/font: Removed support external @next/font package (PR) - [Breaking] next/font: Removed font-family hashing (PR) - [Breaking] Caching: force-dynamic set ano-store default fetch cache (PR) - [Breaking] Config: Enable swcMinify (PR),missingSuspenseWithCSRBailout (PR), andoutputFileTracing (PR) behavior default remove deprecated options - [Breaking] Remove auto-instrumentation Speed Insights (must use dedicated @vercel/speed-insights package) (PR) - [Breaking] Remove .xml extension dynamic sitemap routes align sitemap URLs development production (PR) - [Breaking] deprecated exporting export const runtime = \"experimental-edge\" App Router. Users switch toexport const runtime = \"edge\" . added codemod perform (PR) - [Breaking] Calling revalidateTag andrevalidatePath render throw error (PR) - [Breaking] instrumentation.js andmiddleware.js files use vendored React packages (PR) - [Breaking] minimum required Node.js version updated 18.18.0 (PR) - [Breaking] next/dynamic : deprecatedsuspense prop removed component used App Router, insert empty Suspense boundary anymore (PR) - [Breaking] resolving modules Edge Runtime, worker module condition applied (PR) - [Breaking] Disallow using ssr: false option withnext/dynamic Server Components (PR) - [Improvement] Metadata: Updated environment variable fallbacks metadataBase hosted Vercel (PR) - [Improvement] Fix tree-shaking mixed namespace named imports optimizePackageImports (PR) - [Improvement] Parallel Routes: Provide unmatched catch-all routes known params (PR) - [Improvement] Config bundlePagesExternals stable renamed tobundlePagesRouterDependencies - [Improvement] Config serverComponentsExternalPackages stable renamed toserverExternalPackages - [Improvement] create-next-app: New projects ignore .env files default (PR) - [Improvement] outputFileTracingRoot ,outputFileTracingIncludes andoutputFileTracingExcludes upgraded experimental stable (PR) - [Improvement] Avoid merging global CSS files CSS module files deeper tree (PR) - [Improvement] cache handler specified via NEXT_CACHE_HANDLER_PATH environment variable (PR) - [Improvement] Pages Router supports React 18 React 19 (PR) - [Improvement] Error Overlay displays button copy Node.js Inspector URL inspector enabled (PR) - [Improvement] Client prefetches App Router use priority attribute (PR) - [Improvement] Next.js provides unstable_rethrow function rethrow Next.js internal errors App Router (PR) - [Improvement] unstable_after used static pages (PR) - [Improvement] next/dynamic component used SSR, chunk prefetched (PR) - [Improvement] esmExternals option supported App Router (PR) - [Improvement] experimental.allowDevelopmentBuild option used allowNODE_ENV=development withnext build debugging purposes (PR) - [Improvement] Server Action transforms disabled Pages Router (PR) - [Improvement] Build workers stop build hanging exit (PR) - [Improvement] redirecting Server Action, revalidations apply correctly (PR) - [Improvement] Dynamic params handled correctly parallel routes Edge Runtime (PR) - [Improvement] Static pages respect staleTime initial load (PR) - [Improvement] vercel/og updated memory leak fix (PR) - [Improvement] Patch timings updated allow usage packages like msw APIs mocking (PR) - [Improvement] Prerendered pages use static staleTime (PR) learn more, check upgrade guide. Contributors Next.js result combined work 3,000 individual developers, industry partners like Google Meta, core team Vercel. release brought by: - Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Wyatt, Zack. - Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, Will. - Next.js Docs team: Delba, Rich, Ismael, Lee. Huge thanks @AbhiShake1, @Aerilym, @AhmedBaset, @AnaTofuZ, @Arindam200, @Arinji2, @ArnaudFavier, @ArnoldVanN, @Auxdible, @B33fb0n3, @Bhavya031, @Bjornnyborg, @BunsDev, @CannonLock, @CrutchTheClutch, @DeepakBalaraman, @DerTimonius, @Develliot, @EffectDoplera, @Ehren12, @Ethan-Arrowood, @FluxCapacitor2, @ForsakenHarmony, @Francoscopic, @Gomah, @GyoHeon, @Hemanshu-Upadhyay, @HristovCodes, @HughHzyb, @IAmKushagraSharma, @IDNK2203, @IGassmann, @ImDR, @IncognitoTGT, @Jaaneek, @JamBalaya56562, @Jeffrey-Zutt, @JohnGemstone, @JoshuaKGoldberg, @Julian-Louis, @Juneezee, @KagamiChan, @Kahitar, @KeisukeNagakawa, @KentoMoriwaki, @Kikobeats, @KonkenBonken, @Kuboczoch, @Lada496, @LichuAcu, @LorisSigrist, @Lsnsh, @Luk-z, @Luluno01, @M-YasirGhaffar, @Maaz-Ahmed007, @Manoj-M-S, @ManuLpz4, @Marukome0743, @MaxLeiter, @MehfoozurRehman, @MildTomato, @MonstraG, @N2D4, @NavidNourani, @Nayeem-XTREME, @Netail, @NilsJacobsen, @Ocheretovich, @OlyaPolya, @PapatMayuri, @PaulAsjes, @PlagueFPS, @ProchaLu, @Pyr33x, @QiuranHu, @RiskyMH, @Sam-Phillemon9493, @Sayakie, @Shruthireddy04, @SouthLink, @Strift, @SukkaW, @Teddir, @Tim-Zj, @TrevorSayre, @Unsleeping, @Willem-Jaap, @a89529294, @abdull-haseeb, @abhi12299, @acdlite, @actopas, @adcichowski, @adiguno, @agadzik, @ah100101, @akazwz, @aktoriukas, @aldosch, @alessiomaffeis, @allanchau, @alpedia0, @amannn, @amikofalvy, @anatoliik-lyft, @anay-208, @andrii-bodnar, @anku255, @ankur-dwivedi, @aralroca, @archanaagivale30, @arlyon, @atik-persei, @avdeev, @baeharam, @balazsorban44, @bangseongbeom, @begalinsaf, @bennettdams, @bewinsnw, @bgw, @blvdmitry, @bobaaaaa, @boris-szl, @bosconian-dynamics, @brekk, @brianshano, @cfrank, @chandanpasunoori, @chentsulin, @chogyejin, @chrisjstott, @christian-bromann, @codeSTACKr, @coderfin, @coltonehrman, @controversial, @coopbri, @creativoma, @crebelskydico, @crutchcorn, @darthmaim, @datner, @davidsa03, @delbaoliveira, @devjiwonchoi, @devnyxie, @dhruv-kaushik, @dineshh-m, @diogocapela, @dnhn, @domdomegg, @domin-mnd, @dvoytenko, @ebCrypto, @ekremkenter, @emmerich, @flybayer, @floriangosse, @forsakenharmony, @francoscopic, @frys, @gabrielrolfsen, @gaojude, @gdborton, @greatvivek11, @gnoff, @guisehn, @GyoHeon, @hamirmahal, @hiro0218, @hirotomoyamada, @housseindjirdeh, @hungdoansy, @huozhi, @hwangstar156, @iampoul, @ianmacartney, @icyJoseph, @ijjk, @imddc, @imranolas, @iscekic, @jantimon, @jaredhan418, @jeanmax1me, @jericopulvera, @jjm2317, @jlbovenzo, @joelhooks, @joeshub, @jonathan-ingram, @jonluca, @jontewks, @joostmeijles, @jophy-ye, @jordienr, @jordyfontoura, @kahlstrm, @karlhorky, @karlkeefer, @kartheesan05, @kdy1, @kenji-webdev, @kevva, @khawajaJunaid, @kidonng, @kiner-tang, @kippmr, @kjac, @kjugi, @kshehadeh, @kutsan, @kwonoj, @kxlow, @leerob, @lforst, @li-jia-nan, @liby, @lonr, @lorensr, @lovell, @lubieowoce, @luciancah, @luismiramirez, @lukahartwig, @lumirlumir, @luojiyin1987, @mamuso, @manovotny, @marlier, @mauroaccornero, @maxhaomh, @mayank1513, @mcnaveen, @md-rejoyan-islam, @mehmetozguldev, @mert-duzgun, @mirasayon, @mischnic, @mknichel, @mobeigi, @molebox, @mratlamwala, @mud-ali, @n-ii-ma, @n1ckoates, @nattui, @nauvalazhar, @neila-a, @neoFinch, @niketchandivade, @nisabmohd, @none23, @notomo, @notrab, @nsams, @nurullah, @okoyecharles, @omahs, @paarthmadan, @pathliving, @pavelglac, @penicillin0, @phryneas, @pkiv, @pnutmath, @qqww08, @r34son, @raeyoung-kim, @remcohaszing, @remorses, @rezamauliadi, @rishabhpoddar, @ronanru, @royalfig, @rubyisrust, @ryan-nauman, @ryohidaka, @ryota-murakami, @s-ekai, @saltcod, @samcx, @samijaber, @sean-rallycry, @sebmarkbage, @shubh73, @shuding, @sirTangale, @sleevezip, @slimbde, @soedirgo, @sokra, @sommeeeer, @sopranopillow, @souporserious, @srkirkland, @steadily-worked, @steveluscher, @stipsan, @styfle, @stylessh, @syi0808, @symant233, @tariknh, @theoludwig, @timfish, @timfuhrmann, @timneutkens, @tknickman, @todor0v, @tokkiyaa, @torresgol10, @tranvanhieu01012002, @txxxxc, @typeofweb, @unflxw, @unstubbable, @versecafe, @vicb, @vkryachko, @wbinnssmith, @webtinax, @weicheng95, @wesbos, @whatisagi, @wiesson, @woutvanderploeg, @wyattjoh, @xiaohanyu, @xixixao, @xugetsu, @yosefbeder, @ypessoa, @ytori, @yunsii, @yurivangeffen, @z0n, @zce, @zhawtof, @zsh77, @ztanner helping!"},
{"source": "https://nextjs.org/blog/next-15-1", "title": "Next.js 15.1", "text": "Tuesday, December 10th 2024 Next.js 15.1 Posted byNext.js 15.1 brings core upgrades, new APIs, improvements developer experience. Key updates include: - React 19 (stable): Support React 19 officially available Pages Router & App Router. - Improved Error Debugging: Enhanced DX better source maps browser terminal. (stable): New API execute code response finished streaming.forbidden /unauthorized (experimental): New APIs enable granular authentication error handling. Upgrade today, get started with: # Use automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start new project npx create-next-app@latest React 19 (stable) Next.js 15.1 fully supports React 19: - Pages Router: use React 19 stable without needing Release Candidate Canary releases, alongside continued support React 18. - App Router: continue provide React Canary releases built-in. include stable React 19 changes, well newer features validated frameworks, prior new React release. Since Next.js 15 release, significant addition React 19 \u201csibling pre-warming\u201d. comprehensive overview React 19\u2019s updates, please refer official React 19 blog post. Improved Error Debugging We\u2019ve made improvements error debugging Next.js, ensuring quickly locate source issues, whether appear terminal, browser, attached debuggers. enhancements apply Webpack Turbopack (now stable Next.js 15). Source Maps Enhancements Errors easier trace back origin improved use source maps. We\u2019ve implemented ignoreList property source maps, allows Next.js hide stack frames external dependencies, making application code primary focus. slightly accurate source mapping method names, suggest adopting Turbopack (now stable), improved handling detection source maps Webpack. library authors: recommend populating ignoreList property sourcemaps publishing libraries, especially configured external (e.g. theserverExternalPackages config). Collapsed Stack Frames We\u2019ve improved logic collapsing stack frames highlight relevant parts code. - browser error overlay: Stack frames third-party dependencies hidden default, focusing application code. reveal hidden frames clicking \u201cShow ignored frames\u201d devtools overlay. - terminal: Third-party dependency frames also collapsed default, error formatting aligns browser output consistent debugging experience. Errors replayed browser ensure don\u2019t miss important information development need entire stack trace. Enhanced Profiling Ignored stack frames also recognized built-in browser profilers. makes profiling application easier, allowing pinpoint slow functions code without noise external libraries. Improved Edge Runtime using Edge runtime, errors displayed consistently across development environments, ensuring seamless debugging. Previously, logged errors would include message stack. Terminal Before: \u2a2f app/page.tsx (6:11) @ eval \u2a2f Error: boom eval (./app/page.tsx:12:15) Page (./app/page.tsx:11:74) AsyncLocalStorage.run (node:async_hooks:346:14) stringify (<anonymous>) AsyncLocalStorage.run (node:async_hooks:346:14) AsyncResource.runInAsyncScope (node:async_hooks:206:9) digest: \"380744807\" 4 | export default function Page() { 5 | const throwError = myCallback(() => { > 6 | throw new Error('boom') | ^ 7 | }, []) 8 | 9 | throwError() GET / 500 2354ms Terminal After: \u2a2f Error: boom eval (app/page.tsx:6:10) Page (app/page.tsx:5:32) 4 | export default function Page() { 5 | const throwError = myCallback(() => { > 6 | throw new Error('boom') | ^ 7 | }, []) 8 | 9 | throwError() { digest: '225828171' } Error Overlay Error Overlay improvements make errors clearer intuitive, allowing focus time building application rather debugging. We\u2019re also thrilled announce introduction redesigned UI error overlay, coming upcoming releases. (stable) after() API stable following introduction first Next.js 15 RC. after() provides way perform tasks logging, analytics, system synchronization response finished streaming user, without blocking primary response. Key changes Since introduction, we\u2019ve stabilized after() addressed feedback including: - Improved support self-hosted Next.js servers. - Bug fixes scenarios after() interacted Next.js features. - Enhanced extensibility, enabling platforms inject waitUntil() primitives powerafter() . - Support runtime APIs cookies() andheaders() Server Actions Route Handlers. import { } 'next/server'; import { log } '@/app/utils'; export default function Layout({ children }) { // Secondary task after(() => { log(); }); // Primary task return <>{children}</>; } Read API leverage documentation. forbidden unauthorized (experimental) Next.js 15.1 includes two experimental APIs, forbidden() unauthorized() , based community feedback. We\u2019d love feedback \u2014 please try development environments share thoughts discussion thread. Overview you\u2019re familiar App Router, you\u2019ve likely used notFound() trigger 404 behavior alongside customizable not-found.tsx file. version 15.1, we\u2019re extending approach authorization errors: \u2022 forbidden() triggers 403 error customizable UI via forbidden.tsx . \u2022 unauthorized() triggers 401 error customizable UI via unauthorized.tsx . Good know: notFound() errors, status code be200 error triggered initial response headers sent. Learn more. Enabling feature feature still experimental, you\u2019ll need enable next.config.ts file: import type { NextConfig } 'next'; const nextConfig: NextConfig = { experimental: { authInterrupts: true, }, }; export default nextConfig; Note: next.config.ts support introduced Next.js 15. Learn more. Using forbidden() unauthorized() use forbidden() unauthorized() Server Actions, Server Components, Client Components, Route Handlers. Here\u2019s example: import { verifySession } '@/app/lib/dal'; import { forbidden } 'next/navigation'; export default async function AdminPage() { const session = await verifySession(); // Check user 'admin' role (session.role !== 'admin') { forbidden(); } // Render admin page authorized users return <h1>Admin Page</h1>; } Creating custom error pages customize error pages, create following files: import Link 'next/link'; export default function Forbidden() { return ( <div> <h2>Forbidden</h2> <p>You authorized access resource.</p> <Link href=\"/\">Return Home</Link> </div> ); } import Link 'next/link'; export default function Unauthorized() { return ( <div> <h2>Unauthorized</h2> <p>Please log access page.</p> <Link href=\"/login\">Go Login</Link> </div> ); } like thank Clerk proposing feature PR assisting us prototyping API. stabilize feature 15.2, planning adding capabilities improvements APIs support wider range use cases. Read documentation unauthorized forbidden APIs details. Changes - [Feature] Use ESLint 9 create-next-app (PR) - [Feature] Increase max cache tags 128 (PR) - [Feature] Add option disable experimental CssChunkingPlugin (PR) - [Feature] Add experimental CSS inlining support (PR) - [Improvement] Silence Sass legacy-js-api warning (PR) - [Improvement] Fix unhandled rejection using rewrites (PR) - [Improvement] Ensure parent process exits webpack worker fails (PR) - [Improvement] Fixed route interception catch-all route (PR) - [Improvement] Fixed response cloning issue request deduping (PR) - [Improvement] Fixed Server Action redirects multiple root layouts (PR) - [Improvement] Support providing MDX plugins strings Turbopack compatibility (PR) Contributors Next.js result combined work 3,000 individual developers. release brought by: - Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, Zack. - Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, Will. - Next.js Docs team: Delba, Rich, Ismael, Lee. Huge thanks @sokra, @molebox, @delbaoliveira, @eps1lon, @wbinnssmith, @JamBalaya56562, @hyungjikim, @adrian-faustino, @mottox2, @lubieowoce, @bgw, @mknichel, @wyattjoh, @huozhi, @kdy1, @mischnic, @ijjk, @icyJoseph, @acdlite, @unstubbable, @gaojude, @devjiwonchoi, @cena-ko, @lforst, @devpla, @samcx, @styfle, @ztanner, @Marukome0743, @timneutkens, @JeremieDoctrine, @ductnn, @karlhorky, @reynaldichernando, @chogyejin, @y-yagi, @philparzer, @alfawal, @Rhynden, @arlyon, @MJez29, @Goodosky, @themattmayfield, @tobySolutions, @kevinmitch14, @leerob, @emmanuelgautier, @mrhrifat, @lid0a, @boar-is, @nisabmohd, @PapatMayuri, @ovogmap, @Reflex2468, @LioRael, @betterthanhajin, @HerringtonDarkholme, @bpb54321, @ahmoin, @Kikobeats, @abdelrahmanAbouelkheir, @lumirlumir, @yeeed711, @petter, @suu3 helping!"},
{"source": "https://nextjs.org/blog/next-15-2", "title": "Next.js 15.2", "text": "Wednesday, February 26th 2025 Next.js 15.2 Posted byNext.js 15.2 includes updates debugging errors, metadata, Turbopack, more: - Redesigned error UI improved stack traces: redesigned debugging experience - Streaming metadata: Async metadata longer block page rendering client-side page transitions - Turbopack performance improvements: Faster compile times reduced memory usage - React View Transitions (experimental): Experimental support React's new View Transitions API - Node.js Middleware (experimental): Experimental support using Node.js runtime Middleware Upgrade today, get started with: # Use automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start new project npx create-next-app@latest Redesigned error UI improved stack traces added visual quality improvements errors may encounter building application. Let's walk area improvements: Error overlay overhauled UI presentation error messages Next.js, making easier understand. new design highlights core details error\u2014such message, relevant code frame, call stack\u2014while reducing noise code libraries dependencies. means quickly get root went wrong start fixing faster. Leveraging newly introduced owner stacks feature React, able provide higher fidelity errors coming from. Next.js able surface subcomponent responsible throwing error, skipping intermediary elements responsible creating element caused error. also making easier customize indicator preferences without needing add additional configuration. added feedback section bottom error overlays lets rate helpful error message was. opinion helps us understand common pain points improve error messages make debugging easier. Dev indicator consolidated development information new, streamlined indicator shows details like rendering mode build status. compilation, notice dimmed, animated Next.js logo navigating routes. logo brightens compilation complete React begins rendering, providing visual cue application's state. Opening dev indicator displays: - current route's rendering mode (static/dynamic) - Turbopack compilation status - Active errors quick access error overlay Future updates expand menu include: - PPR (Partial Prerendering) debugging tools - Cache monitoring features - Additional developer tooling unified approach puts crucial development information one accessible location. continue refine expand feature future releases based feedback. Streaming metadata often necessary fetch dynamic data, perform async operation, generateMetadata . prior versions Next.js, metadata needed finish generating initial UI would sent could included document <head> . meant many pages fast initial UI available, initial paint still delayed data requirements affect user would see visually. improved 15.2 allowing initial UI sent browser even generateMetadata completed. However, maintain compatibility bots crawlers expect metadata available <head> document, continue delay sending HTML certain bot user agents. need fine-grained control bots receive treatment, customize regex used serve via htmlLimitedBots option next.config.js . Learn streaming metadata. Turbopack performance improvements Turbopack marked stable Next.js 15. working improving Turbopack's performance, particularly scenarios without persistent caching. part release, introduced following enhancements: - Faster compile times: Early adopters reported 57.6% faster compile times accessing routes compared Next.js 15.1. - Reduced memory usage: vercel.com application, observed 30% decrease memory usage local development. improvements, Turbopack faster Webpack virtually cases. encounter scenario true application, please reach out\u2014we want investigate these. also made progress persistent caching production builds. Although features ready experimental release yet, started testing real-world projects. share detailed metrics available broader use. React View Transitions (experimental) added feature flag enable new experimental View Transitions API React. new API allows animate different views components application. enable feature, add following next.config.js : module.exports = { experimental: { viewTransition: true, }, }; Note: feature highly experimental may change future releases. information use feature, please refer original View Transition pull request React repository. work builds native browser implementation View Transitions. publishing documentation examples stability progresses. Node.js Middleware (experimental) working new experimental flag allow using Node.js runtime Next.js Middleware. enable feature, add following next.config.js : module.exports = { experimental: { nodeMiddleware: true, }, }; specify Node.js runtime Middleware config export: import bcrypt 'bcrypt'; const API_KEY_HASH = process.env.API_KEY_HASH; // Pre-hashed API key env export default async function middleware(req) { const apiKey = req.headers.get('x-api-key'); (!apiKey || !(await bcrypt.compare(apiKey, API_KEY_HASH))) { return new Response('Forbidden', { status: 403 }); } console.log('API key validated'); } export const config = { runtime: 'nodejs', }; Note: feature yet recommended production use. Therefore, Next.js throw error unless using next@canary release instead stable release. planning take opportunity improve reshape Middleware API. suggestions requests, please let us know. Node.js Middleware top community request excited addressed. Coming soon - \"use cache\" (beta): working stabilizing \"use cache\" standalone feature. Stay tuned details coming releases. Learn about\"use cache\" . - Turbopack persistent caching (experimental): dogfooding persistent caching Vercel positive performance improvements. stabilized further, release behind feature flag additional feedback testing. Changes - [Feature] Add --api flag create headless API-only withcreate-next-app (PR) - [Feature] Add support images.qualities withnext/image (PR) - [Deprecation] Warn i18n configuration deprecation App Router (PR) - [Improvement] Improve lint performance no-html-link-for-pages (PR) - [Improvement] Emit build error \"use action\" directive incorrectly used (PR) - [Improvement] Display global-error alongside dev overlay development (PR) - [Improvement] Allow disabling HTTP request logs development server (PR) - [Improvement] Add pagination SEO link tags (PR) - [Improvement] Improve JSDocs metadata and<Link> components (PR) - [Improvement] Middleware match next/image requests (PR) - [Improvement] Add hostname default error boundary message (PR) - [Improvement] Send errors handled explicit error boundaries reportError (PR) Contributors Next.js result combined work 3,000 individual developers. release brought by: - Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, Zack. - Turbopack team: Benjamin, Donny, Maia, Niklas, Tim, Tobias, Will. - Next.js Docs team: Delba, Rich, Ismael, Lee. Huge thanks @mischnic, @Marukome0743, @JamBalaya56562, @creationix, @noreiller, @styfle, @abdonrd, @ollyw, @aymericzip, @davidhu2000, @attilarepka, @devpla, @dydals3440, @huozhi, @wbinnssmith, @suu3, @PapatMayuri, @Sahil4883, @abyii, @molebox, @sokra, @maciej-ka, @abvthecity, @damiensedgwick, @alitas, @RiskyMH, @ytreister, @sommeeeer, @n1ckoates, @yongholeeme, @spidersouris, @gurkerl83, @cassiossantos, @Netail, @tknickman, @eur00t, @cseas, @nnnnoel, @Manoj-M-S, @lfades, @matmannion, @mikeboensel, @nphmuller, @apostolos, @k15a, @pavelee, @locothedev, @vexcat, @Zach-Jaensch, @decepulis, @gadcam, @lukahartwig, @jsanford8, @RobinMalfait, @raunofreiberg, @mohsen1, @skushagra, @amannn, @HQidea, @jrandolf, @smit-err, @littledivy, @k35o, @martinsione, @CvX, @msereniti, @Timer, @Iftee97, @chibicode, @RobPruzan, @PlagueFPS, @bjunix, @maximevtush, @michaelven, @sedlukha, @johannpinson, @AxelUser, @Nayeem-XTREME, @IcaroG, @blurrah, @lachlanjc, @ashi009, @conico974, @raphaelcosta, @dulmandakh, @khuezy, @Knoa0405, @wangsijie, @stefanprobst, @wentsul, @loopy-lim, @bratvanov, @hedgeday, @cassian-goode helping!"},
{"source": "https://nextjs.org/blog/next-15-3", "title": "Next.js 15.3", "text": "Wednesday, April 9th 2025 Next.js 15.3 Posted byNext.js 15.3 includes Turbopack builds, new client instrumentation navigation hooks, more: - Turbopack builds (alpha): Faster production builds passing 8000+ tests (99%) - Community support Rspack (experimental): Alternative bundler Webpack compatibility - Client Instrumentation hook: Early monitoring analytics setup - Navigation hooks: Control routing onNavigate anduseLinkStatus - TypeScript plugin improvements: Improved support large codebases Upgrade today, get started with: # Use automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start new project npx create-next-app@latest Turbopack Builds (alpha) Following stable release next dev --turbopack , 50% development sessions Next.js 15 using Turbopack. release includes alpha release next build --turbopack , bringing performance improvements local development production builds. Try Turbopack production builds upgrading 15.3 running: next build --turbopack Functionality 99.3% integration tests next build already passing. track progress towards 100% areweturboyet.com. application already works Turbopack dev , work as-is build . Turbopack builds alpha. don\u2019t recommend using production mission-critical applications stage. Instead, try preview staging environment, run build locally observe differences bundle size performance. We\u2019re actively working close performance gaps scope hoisting, improved chunking, optimizations. Build performance We\u2019ve validating Turbopack Vercel\u2019s large internal monorepo early partner codebases. One advantage Turbopack\u2019s architecture versus previous Webpack implementation performance scales adding CPU cores: - 4 cores: 28% faster Webpack - 16 cores: 60% faster Webpack - 30 cores: 83% faster Webpack build times drop even experimental work persistent caching. share future release. Ecosystem We\u2019re working commonly used integrations like Sentry make sure they\u2019re compatible next build --turbopack stable release. Please reach @leerob X tool author would like work us ensure compatibility. Feedback Please share feedback, even goes smoothly, help us prepare stable release: - GitHub discussions general feedback - GitHub issues reproductions Turbopack configuration next.config.ts (stable) Turbopack configuration next.config.ts moved experimental.turbo top-level turbopack key: import type { NextConfig } 'next'; const nextConfig: NextConfig = { turbopack: { rules: { '*.svg': { loaders: ['@svgr/webpack'], as: '*.js', }, }, }, }; export default nextConfig; compatibility, experimental.turbo option continue supported next major release Next.js. complete list Turbopack configuration options, see Turbopack API Reference. Community support Rspack (experimental) Rspack team created community plugin Next.js. provides option Next.js users need near-exact Webpack API compatibility, cannot yet move Turbopack, improve local compilation build times. We\u2019re confident progress Turbopack continue provide incremental path forward Webpack users. official Next.js plugin, partnering Rspack team. teams collaborate shared foundations like SWC Lightning CSS, benefiting Next.js users broader ecosystem. want explore using Rspack Next.js, use next-rspack adapter. running adapter integration test suite. currently passes ~96% tests. View example learn Rspack docs. Client Instrumentation Hook instrumentation-client.js|ts file allows add monitoring analytics code runs application's frontend code starts executing. ideal setting performance tracking, error monitoring, client-side observability tools early possible lifecycle. // Set performance monitoring performance.mark('app-init'); // Initialize analytics console.log('Analytics initialized'); // Set error tracking window.addEventListener('error', (event) => { // Send error tracking service reportError(event.error); }); Place file root project similar server-side instrumentation. Learn instrumentation-client file documentation. Navigation Hooks introducing new navigation hooks enhance client-side routing capabilities Next.js 15.3, allowing easily develop localized loading states implement complex controls like navigation cancelation. onNavigate event handler new property Link component executes client-side navigations, giving precise control application's routing behavior. Unlike onClick event, fires clicks, onNavigate used Single-Page App (SPA) navigations, allowing execute code even cancel navigation preventDefault() . API used implement transition animations, navigation guards, analytics tracking run actual page transitions. Learn visiting onNavigate documentation. useLinkStatus useLinkStatus Client Component hook returns pending boolean indicates navigation progress, giving localized control loading states. API modeled useFormStatus React, helpful adding custom loading indicators page transitions, especially prefetching disabled linked routes dedicated loading states. placing component uses useLinkStatus descendant <Link> component, create responsive UI elements react navigation events real-time. Learn visiting useLinkStatus documentation. TypeScript Plugin Performance Improvements Next.js TypeScript language server plugin (LSP) faster. LSP provides inline Intellisense features server/client boundary validation, component prop hints, configuration autocompletion, error detection disallowed APIs React Server Components. large codebases, plugin could previously cause TypeScript language service hang crash. We\u2019ve made significant performance improvements resolve issues. internal testing, plugin response times improved ~60% freezing crashes. Changes - [Feature] Support new URL() inimages.remotePatterns (#77692) - [Feature] Viewport options separate metadata (#77427) - [Feature] Add unstable_dynamicOnHover option (#77866) - [Feature] Add support Pinterest Rich Pins (#76988) - [Improvement] Make revalidate work followed redirect Route Handlers (#77090) - [Improvement] Ensure strong consistency calling revalidate Server Actions (#76885) - [Improvement] Upgrade sharp faster PNG AVIF conversion (#77839) Contributors Next.js result combined work 3,000 individual developers. release brought by: - Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, Zack. - Turbopack team: Benjamin, Donny, Josh, Maia, Niklas, Tim, Tobias, Will. - Next.js Docs team: Delba, Rich, Ismael, Lee. Huge thanks @raunofreiberg, @huozhi, @ijjk, @timneutkens, @gaojude, @leerob, @mezotv, @bgw, @samcx, @ztanner, @sokra, @mischnic, @wbinnssmith, @kdy1, @unstubbable, @ahabhgk, @ScriptedAlchemy, @SukkaW, @wyattjoh, @eps1lon, @Amirroid, @Netail, @lubieowoce, @gnoff, @jackwilson323, @acdlite, @sbougerel, @kevva, @kasperpeulen, @Cy-Tek, @dvoytenko, @husseinraoouf, @isBatak, @iamkd, @delbaoliveira, @jantimon, @padmaia, @Bernardoow, @styfle, @devjiwonchoi, @JamBalaya56562, @Marukome0743 helping!"},
{"source": "https://nextjs.org/blog/next-15-rc", "title": "Next.js 15 RC", "text": "Thursday, May 23rd 2024 Next.js 15 RC Posted byThe Next.js 15 Release Candidate (RC) available. early version allows test latest features upcoming stable release. - React: Support React 19 RC, React Compiler (Experimental), hydration error improvements - Caching: fetch requests,GET Route Handlers, client navigations longer cached default - Partial Prerendering (Experimental): New Layout Page config option incremental adoption next/after (Experimental): New API execute code response finished streamingcreate-next-app : Updated design new flag enable Turbopack local development- Bundling external packages (Stable): New config options App Pages Router Try Next.js 15 RC today: npm install next@rc react@rc react-dom@rc React 19 RC Next.js App Router built React canary channel frameworks, allowed developers use provide feedback new React APIs v19 release. Next.js 15 RC supports React 19 RC, includes new features client server like Actions. Read Next.js 15 upgrade guide, React 19 upgrade guide, watch React Conf Keynote learn more. Note: third party libraries may compatible React 19 yet. React Compiler (Experimental) React Compiler new experimental compiler created React team Meta. compiler understands code deep level understanding plain JavaScript semantics Rules React, allows add automatic optimizations code. compiler reduces amount manual memoization developers APIs useMemo useCallback - making code simpler, easier maintain, less error prone. Next.js 15, added support React Compiler. Install babel-plugin-react-compiler : npm install babel-plugin-react-compiler Then, add experimental.reactCompiler option next.config.js : const nextConfig = { experimental: { reactCompiler: true, }, }; module.exports = nextConfig; Optionally, configure compiler run \"opt-in\" mode follows: const nextConfig = { experimental: { reactCompiler: { compilationMode: 'annotation', }, }, }; module.exports = nextConfig; Note: React Compiler currently possible use Next.js Babel plugin, could result slower build times. Learn React Compiler, available Next.js config options. Hydration error improvements Next.js 14.1 made improvements error messages hydration errors. Next.js 15 continues build adding improved hydration error view. Hydration errors display source code error suggestions address issue. example, previous hydration error message Next.js 14.1: Next.js 15 RC improved to: Caching updates Next.js App Router launched opinionated caching defaults. designed provide performant option default ability opt required. Based feedback, re-evaluated caching heuristics would interact projects like Partial Prerendering (PPR) third party libraries using fetch . Next.js 15, we\u2019re changing caching default fetch requests, GET Route Handlers, Client Router Cache cached default uncached default. want retain previous behavior, continue opt-into caching. continuing improve caching Next.js coming months share details Next.js 15 GA announcement. fetch Requests longer cached default Next.js uses Web fetch API cache option configure server-side fetch request interacts framework's persistent HTTP cache: fetch('https://...', { cache: 'force-cache' | 'no-store' }); no-store - fetch resource remote server every request update cacheforce-cache - fetch resource cache (if exists) remote server update cache Next.js 14, force-cache used default cache option provided, unless dynamic function dynamic config option used. Next.js 15, no-store used default cache option provided. means fetch requests cached default. still opt caching fetch requests by: - Setting cache option toforce-cache singlefetch call - Setting dynamic route config option to'force-static' single route - Setting fetchCache route config option to'default-cache' override allfetch requests Layout Page useforce-cache unless explicitly specify owncache option GET Route Handlers longer cached default Next 14, Route Handlers used GET HTTP method cached default unless used dynamic function dynamic config option. Next.js 15, GET functions cached default. still opt caching using static route config option export dynamic = 'force-static' . Special Route Handlers like sitemap.ts , opengraph-image.tsx , icon.tsx , metadata files remain static default unless use dynamic functions dynamic config options. Client Router Cache longer caches Page components default Next.js 14.2.0, introduced experimental staleTimes flag allow custom configuration Router Cache. Next.js 15, flag still remains accessible, changing default behavior staleTime 0 Page segments. means navigate around app, client always reflect latest data Page component(s) become active part navigation. However, still important behaviors remain unchanged: - Shared layout data refetched server continue support partial rendering. - Back/forward navigation still restore cache ensure browser restore scroll position. - Loading.js remain cached 5 minutes (or value staleTimes.static configuration). opt previous Client Router Cache behavior setting following configuration: const nextConfig = { experimental: { staleTimes: { dynamic: 30, }, }, }; module.exports = nextConfig; Incremental adoption Partial Prerendering (Experimental) Next.js 14, introduced Partial Prerendering (PPR) - optimization combines static dynamic rendering page. Next.js currently defaults static rendering unless use dynamic functions cookies() , headers() , uncached data requests. APIs opt entire route dynamic rendering. PPR, wrap dynamic UI Suspense boundary. new request comes in, Next.js immediately serve static HTML shell, render stream dynamic parts HTTP request. allow incremental adoption, we\u2019ve added experimental_ppr route config option opting specific Layouts Pages PPR: import { Suspense } \"react\" import { StaticComponent, DynamicComponent } \"@/app/ui\" export const experimental_ppr = true export default function Page() { return { <> <StaticComponent /> <Suspense fallback={...}> <DynamicComponent /> </Suspense> </> }; } use new option, you\u2019ll need set experimental.ppr config next.config.js file 'incremental' : const nextConfig = { experimental: { ppr: 'incremental', }, }; module.exports = nextConfig; segments PPR enabled, it\u2019ll considered safe set ppr value true , enable entire app future routes. share PPR roadmap Next.js 15 GA blog post. Learn Partial Prerendering. Executing code response next/after (Experimental) processing user request, server typically performs tasks directly related computing response. However, may need perform tasks logging, analytics, external system synchronization. Since tasks directly related response, user wait complete. Deferring work responding user poses challenge serverless functions stop computation immediately response closed. after() new experimental API solves problem allowing schedule work processed response finished streaming, enabling secondary tasks run without blocking primary response. use it, add experimental.after next.config.js : const nextConfig = { experimental: { after: true, }, }; module.exports = nextConfig; Then, import function Server Components, Server Actions, Route Handlers, Middleware. import { unstable_after } 'next/server'; import { log } '@/app/utils'; export default function Layout({ children }) { // Secondary task after(() => { log(); }); // Primary task return <>{children}</>; } Learn next/after . create-next-app updates Next.js 15, updated create-next-app new design. running create-next-app , new prompt asking want enable Turbopack local development (defaults ). \u2714 Would like use Turbopack next dev? \u2026 / Yes --turbo flag used enable Turbopack. npx create-next-app@rc --turbo make getting started new project even easier, new --empty flag added CLI. remove extraneous files styles, resulting minimal \"hello world\" page. npx create-next-app@rc --empty Optimizing bundling external packages (Stable) Bundling external packages improve cold start performance application. App Router, external packages bundled default, opt-out specific packages using new serverExternalPackages config option. Pages Router, external packages bundled default, provide list packages bundle using existing transpilePackages option. configuration option, need specify package. unify configuration App Pages Router, we\u2019re introducing new option, bundlePagesRouterDependencies match default automatic bundling App Router. use serverExternalPackages opt-out specific packages, needed. const nextConfig = { // Automatically bundle external packages Pages Router: bundlePagesRouterDependencies: true, // Opt specific packages bundling App Pages Router: serverExternalPackages: ['package-name'], }; module.exports = nextConfig; Learn optimizing external packages. Changes - [Breaking] Minimum React version 19 RC - [Breaking] next/image: Removed squoosh favor ofsharp optional dependency (PR) - [Breaking] next/image: Changed default Content-Disposition toattachment (PR) - [Breaking] next/image: Error src leading trailing spaces (PR) - [Breaking] Middleware: Apply react-server condition limit unrecommended react API imports (PR) - [Breaking] next/font: Removed support external @next/font package (PR) - [Breaking] next/font: Removed font-family hashing (PR) - [Breaking] Caching: force-dynamic set ano-store default fetch cache (PR) - [Breaking] Config: Enable swcMinify (PR),missingSuspenseWithCSRBailout (PR), andoutputFileTracing (PR) behavior default remove deprecated options - [Breaking] Remove auto-instrumentation Speed Insights (must use dedicated @vercel/speed-insights package) (PR) - [Breaking] Remove .xml extension dynamic sitemap routes align sitemap URLs development production (PR) - [Improvement] Metadata: Updated environmental variable fallbacks metadataBase hosted Vercel (PR) - [Improvement] Fix tree-shaking mixed namespace named imports optimizePackageImports (PR) - [Improvement] Parallel Routes: Provide unmatched catch-all routes known params (PR) - [Improvement] Config bundlePagesExternals stable renamed tobundlePagesRouterDependencies - [Improvement] Config serverComponentsExternalPackages stable renamed toserverExternalPackages - [Improvement] create-next-app: New projects ignore .env files default (PR) - [Docs] Improve auth documentation (PR) - [Docs] @next/env package (PR) learn more, check upgrade guide. Contributors Next.js result combined work 3,000 individual developers, industry partners like Google Meta, core team Vercel. release brought by: - Next.js team: Andrew, Balazs, Ethan, Janka, Jiachi, Jimmy, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Steven, Tim, Wyatt, Zack. - Turbopack team: Alex, Benjamin, Donny, Leah, Maia, OJ, Tobias, Will. - Next.js Docs: Delba, Steph, Michael, Anthony, Lee. Huge thanks @devjiwonchoi, @ijjk, @Ethan-Arrowood, @sokra, @kenji-webdev, @wbinnssmith, @huozhi, @domdomegg, @samcx, @Jaaneek, @evanwinter, @wyattjoh, @kdy1, @balazsorban44, @feedthejim, @ztanner, @ForsakenHarmony, @kwonoj, @delbaoliveira, @stipsan, @leerob, @shuding, @xiaohanyu, @timneutkens, @dvoytenko, @bobaaaaa, @bgw, @gaspar09, @souporserious, @unflxw, @kiner-tang, @Ehren12, @EffectDoplera, @IAmKushagraSharma, @Auxdible, @sean-rallycry, @Jeffrey-Zutt, @eps1lon, @jeanmax1me, @unstubbable, @NilsJacobsen, @PaulAsjes, @adiguno, @ryan-nauman, @zsh77, @KagamiChan, @steveluscher, @MehfoozurRehman, @vkryachko, @chentsulin, @samijaber, @begalinsaf, @FluxCapacitor2, @lukahartwig, @brianshano, @pavelglac, @styfle, @symant233, @HristovCodes, @karlhorky, @jonluca, @jonathan-ingram, @mknichel, @sopranopillow, @Gomah, @imddc, @notrab, @gabrielrolfsen, @remorses, @AbhiShake1, @agadzik, @ryota-murakami, @rishabhpoddar, @rezamauliadi, @IncognitoTGT, @webtinax, @BunsDev, @nisabmohd, @z0n, @bennettdams, @joeshub, @n1ckoates, @srkirkland, @RiskyMH, @coopbri, @okoyecharles, @diogocapela, @dnhn, @typeofweb, @davidsa03, @imranolas, @lubieowoce, @maxhaomh, @mirasayon, @blvdmitry, @hwangstar156, @lforst, @emmerich, @christian-bromann, @Lsnsh, @datner, @hiro0218, @flybayer, @ianmacartney, @ypessoa, @ryohidaka, @icyJoseph, @Arinji2, @lovell, @nsams, @Nayeem-XTREME, @JamBalaya56562, @Arindam200, @gaojude, @qqww08, @todor0v, @coltonehrman, @wiesson helping!"},
{"source": "https://nextjs.org/blog/next-15-rc2", "title": "Next.js 15 RC 2", "text": "Tuesday, October 15th 2024 Next.js 15 RC 2 Posted byFollowing announcement first Next.js 15 Release Candidate back May, we\u2019ve preparing second Release Candidate based feedback. Here\u2019s we\u2019ve working on: @next/codemod upgrade : Easily upgrade latest Next.js React versions.- Turbopack development: Performance improvements Next.js 15 stability target. - Async Request APIs (Breaking): Incremental step towards simplified rendering caching model. - Server Actions: Enhanced security unguessable endpoints removal unused actions. - Static Indicator: New visual indicator shows static routes development. next/form : Enhance HTML forms client-side navigation.next.config.ts : TypeScript support Next.js configuration file.instrumentation.js (Stable): New API server lifecycle observability.- Development Build improvements: Improved build times Faster Fast Refresh. - Self-hosting: control Cache-Control headers. - Linting: Added support ESLint 9. Try Next.js 15 Release Candidate (RC2) today: # Use new automated upgrade CLI npx @next/codemod@canary upgrade rc # ...or upgrade manually npm install next@rc react@rc react-dom@rc Note: Release Candidate includes changes previous RC. Smooth upgrades codemod CLI include codemods (automated code transformations) every major Next.js release help automate upgrading breaking changes. make upgrades even smoother, released enhanced codemod CLI: npx @next/codemod@canary upgrade rc tool helps upgrade codebase latest stable prerelease versions. CLI update dependencies, show available codemods, guide applying them. specified dist tag command line (@rc , @canary , etc.) determines version upgrade to. Learn Next.js codemods. Turbopack Development Turbopack local development become stable general release Next.js 15, remaining opt-in. try today running: next dev --turbo Thanks thousands developers participated testing, reporting issues, verifying fixes throughout Turbopack beta release candidate phases, resolved 54 GitHub issues since first Next.js 15 Release Candidate. Alongside community effort, internal testing vercel.com, v0.dev, nextjs.org helped identify numerous additional improvements. last three months, focused optimizing cold compilation performance. Compared previous release, seen: - 25\u201335% reduction memory usage. - 30\u201350% faster compilation large pages thousands modules. continue optimize areas future releases. Looking ahead, Turbopack team making significant progress persistent caching, memory usage reduction, Turbopack next build \u2014with 96% tests passing. Note: See supported unsupported features Turbopack. Async Request APIs (Breaking Change) traditional Server-Side Rendering, server waits request rendering content. However, components depend request-specific data, unnecessary wait request render them. Ideally, server would prepare much possible request arrives. enable this, set stage future optimizations, need know wait request. Therefore, transitioning APIs rely request-specific data\u2014such headers , cookies , params , searchParams \u2014to asynchronous. import { cookies } 'next/headers'; export async function AdminPanel() { const cookieStore = await cookies(); const token = cookieStore.get('token'); // ... } breaking change affects following APIs: cookies headers draftMode params inlayout.js ,page.js ,route.js ,default.js ,generateMetadata , andgenerateViewport searchParams inpage.js easier migration, APIs temporarily accessed synchronously, show warnings development production next major version. codemod available automate migration: npx @next/codemod@canary next-async-request-api . cases codemod can't fully migrate code, please read upgrade guide. also provided example migrate Next.js application new APIs. Enhanced Security Server Actions Server Actions server-side functions called client. defined adding 'use server' directive top file exporting async function. Even Server Action utility function imported elsewhere code, it\u2019s still publicly accessible HTTP endpoint. behavior technically correct, lead unintentional exposure functions. improve security, we\u2019ve introduced following enhancements: - Dead code elimination: Unused Server Actions won\u2019t IDs exposed client-side JavaScript bundle, reducing bundle size improving performance. - Secure action IDs: Next.js creates unguessable, non-deterministic IDs allow client reference call Server Action. IDs periodically recalculated builds enhanced security. // app/actions.js 'use server'; // action **is** used application, Next.js // create secure ID allow client reference // call Server Action. export async function updateUserAction(formData) {} // action **is not** used application, Next.js // automatically remove code `next build` // create public endpoint. export async function deleteUserAction(formData) {} still treat Server Actions public HTTP endpoints. Learn securing Server Actions. Static Route Indicator Next.js displays Static Route Indicator development help identify routes static dynamic. visual cue makes easier optimize performance understanding pages rendered. also use next build output view rendering strategy routes. update part ongoing efforts enhance observability Next.js, making easier developers monitor, debug, optimize applications. also working dedicated developer tools, details come soon. Learn Static Route Indicator, disabled. <Form> Component new <Form> component extends HTML <form> element prefetching, client-side navigation, progressive enhancement. useful forms navigate new page, search form leads results page. import Form 'next/form'; export default function Page() { return ( <Form action=\"/search\"> <input name=\"query\" /> <button type=\"submit\">Submit</button> </Form> ); } <Form> component comes with: - Prefetching: form view, layout loading UI prefetched, making navigation fast. - Client-side Navigation: submission, shared layouts client-side state preserved. - Progressive Enhancement: JavaScript hasn\u2019t loaded yet, form still works via full-page navigation. Previously, achieving features required lot manual boilerplate. example: Example // Note: abbreviated demonstration purposes. // recommended use production code. 'use client' import { useEffect } 'react' import { useRouter } 'next/navigation' export default function Form(props) { const action = props.action const router = useRouter() useEffect(() => { // form target URL, prefetch (typeof action === 'string') { router.prefetch(action) } }, [action, router]) function onSubmit(event) { event.preventDefault() // grab form fields trigger `router.push` data URL encoded const formData = new FormData(event.currentTarget) const data = new URLSearchParams() (const [name, value] formData) { data.append(name, value string) } router.push(`${action}?${data.toString()}`) } (typeof action === 'string') { return <form onSubmit={onSubmit} {...props} /> } return <form {...props} /> } Learn <Form> Component. Support next.config.ts Next.js supports TypeScript next.config.ts file type provides NextConfig type autocomplete type-safe options: import type { NextConfig } 'next'; const nextConfig: NextConfig = { /* config options */ }; export default nextConfig; Learn TypeScript support Next.js. instrumentation.js (Stable) instrumentation file, register() API, allows users tap Next.js server lifecycle monitor performance, track source errors, deeply integrate observability libraries like OpenTelemetry. feature stable experimental.instrumentationHook config option removed. addition, we\u2019ve collaborated Sentry designing new onRequestError hook used to: - Capture important context errors thrown server, including: - Router: Pages Router App Router - Server context: Server Component, Server Action, Route Handler, Middleware - Report errors favorite observability provider. export async function onRequestError(err, request, context) { await fetch('https://...', { method: 'POST', body: JSON.stringify({ message: err.message, request, context }), headers: { 'Content-Type': 'application/json' }, }); } export async function register() { // init favorite observability provider SDK } Learn onRequestError function. Development Build Improvements Server Components HMR development, Server components re-executed saved. means, fetch requests API endpoints third-party services also called. improve local development performance reduce potential costs billed API calls, ensure Hot Module Replacement (HMR) re-use fetch responses previous renders. Learn Server Components HMR Cache. Faster Static Generation App Router optimized static generation improve build times, especially pages slow network requests. Previously, static optimization process rendered pages twice\u2014once generate data client-side navigation second time render HTML initial page visit. Now, reuse first render, cutting second pass, reducing workload build times. Additionally, static generation workers share fetch cache across pages. fetch call doesn\u2019t opt caching, results reused pages handled worker. reduces number requests data. Advanced Static Generation Control (Experimental) We\u2019ve added experimental support control static generation process advanced use cases would benefit greater control. recommend sticking current defaults unless specific requirements options lead increased resource usage potential out-of-memory errors due increased concurrency. const nextConfig = { experimental: { // many times Next.js retry failed page generation attempts // failing build staticGenerationRetryCount: 1 // many pages processed per worker staticGenerationMaxConcurrency: 8 // minimum number pages spinning new export worker staticGenerationMinPagesPerWorker: 25 }, } export default nextConfig; Learn Static Generation options. Improvements self-hosting self-hosting applications, may need control Cache-Control directives. One common case controlling stale-while-revalidate period sent ISR pages. implemented two improvements: - configure expireTime value innext.config . previously theexperimental.swrDelta option. - Updated default value one year, ensuring CDNs fully apply stale-while-revalidate semantics intended. also longer override custom Cache-Control values default values, allowing full control ensuring compatibility CDN setup. Finally, improved image optimization self-hosting. Previously, recommended install sharp optimizing images Next.js server. recommendation sometimes missed. Next.js 15, longer need manually install sharp \u2014 Next.js use sharp automatically using next start running standalone output mode. learn more, see new demo tutorial video self-hosting Next.js. ESLint 9 Support Next.js 15 also introduces support ESLint 9, following end-of-life ESLint 8 October 5, 2024. ensure smooth transition, Next.js remain backwards compatible, meaning continue using either ESLint 8 9. upgrade ESLint 9, detect haven\u2019t yet adopted new config format, Next.js automatically apply ESLINT_USE_FLAT_CONFIG=false escape hatch ease migration. Additionally, deprecated options like \u2014ext \u2014ignore-path removed running next lint . Please note ESLint eventually disallow older configurations ESLint 10, recommend starting migration soon. details changes, check migration guide. part update, we\u2019ve also upgraded eslint-plugin-react-hooks v5.0.0 , introduces new rules React Hooks usage. review changes changelog eslint-plugin-react-hooks@5.0.0. Changes - changes previously described RC 1 blog post - [Breaking] We\u2019ve deprecated exporting export const runtime = \"experimental-edge\" App Router. Users switch toexport const runtime = \"edge\" . We\u2019ve added codemod perform (PR) - [Breaking] Calling revalidateTag andrevalidatePath render throw error (PR) - [Breaking] instrumentation.js andmiddleware.js files use vendored React packages (PR) - [Breaking] minimum required Node.js version updated 18.18.0 (PR) - [Breaking] next/dynamic : deprecatedsuspense prop removed component used App Router, insert empty Suspense boundary anymore (PR) - [Breaking] resolving modules Edge Runtime, worker module condition applied (PR) - [Breaking] Disallow using ssr: false option withnext/dynamic Server Components (PR) - [Improvement] outputFileTracingRoot ,outputFileTracingIncludes andoutputFileTracingExcludes upgraded experimental stable (PR) - [Improvement] Avoid merging global CSS files CSS module files deeper tree (PR) - [Improvement] cache handler specified via NEXT_CACHE_HANDLER_PATH environment variable (PR) - [Improvement] Pages Router supports React 18 React 19 (PR) - [Improvement] Error Overlay displays button copy Node.js Inspector URL inspector enabled (PR) - [Improvement] Client prefetches App Router use priority attribute (PR) - [Improvement] Next.js provides unstable_rethrow function rethrow Next.js internal errors App Router (PR) - [Improvement] unstable_after used static pages (PR) - [Improvement] next/dynamic component used SSR, chunk prefetched (PR) - [Improvement] esmExternals option supported App Router (PR) - [Improvement] experimental.allowDevelopmentBuild option used allowNODE_ENV=development withnext build debugging purposes (PR) - [Improvement] Server Action transforms disabled Pages Router (PR) - [Improvement] Build workers stop build hanging exit (PR) - [Improvement] redirecting Server Action, revalidations apply correctly (PR) - [Improvement] Dynamic params handled correctly parallel routes Edge Runtime (PR) - [Improvement] Static pages respect staleTime initial load (PR) - [Improvement] vercel/og updated memory leak fix (PR) - [Improvement] Patch timings updated allow usage packages like msw APIs mocking (PR) Contributors Next.js result combined work 3,000 individual developers, core team Vercel. release brought by: - Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Wyatt, Zack. - Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, Will. - Next.js Docs team: Delba, Rich, Ismael, Lee. Huge thanks @huozhi, @shuding, @wyattjoh, @PaulAsjes, @mcnaveen, @timneutkens, @stipsan, @aktoriukas, @sirTangale, @greatvivek11, @sokra, @anatoliik-lyft, @wbinnssmith, @coltonehrman, @hungdoansy, @kxlow, @ztanner, @manovotny, @leerob, @ryota-murakami, @ijjk, @pnutmath, @feugy, @Jeffrey-Zutt, @wiesson, @eps1lon, @devjiwonchoi, @Ethan-Arrowood, @kenji-webdev, @domdomegg, @samcx, @Jaaneek, @evanwinter, @kdy1, @balazsorban44, @feedthejim, @ForsakenHarmony, @kwonoj, @delbaoliveira, @xiaohanyu, @dvoytenko, @bobaaaaa, @bgw, @gaspar09, @souporserious, @unflxw, @kiner-tang, @Ehren12, @EffectDoplera, @IAmKushagraSharma, @Auxdible, @sean-rallycry, @jeanmax1me, @unstubbable, @NilsJacobsen, @adiguno, @ryan-nauman, @zsh77, @KagamiChan, @steveluscher, @MehfoozurRehman, @vkryachko, @chentsulin, @samijaber, @begalinsaf, @FluxCapacitor2, @lukahartwig, @brianshano, @pavelglac, @styfle, @symant233, @HristovCodes, @karlhorky, @jonluca, @jonathan-ingram, @mknichel, @sopranopillow, @Gomah, @imddc, @notrab, @gabrielrolfsen, @remorses, @AbhiShake1, @agadzik, @rishabhpoddar, @rezamauliadi, @IncognitoTGT, @webtinax, @BunsDev, @nisabmohd, @z0n, @bennettdams, @joeshub, @n1ckoates, @srkirkland, @RiskyMH, @coopbri, @okoyecharles, @diogocapela, @dnhn, @typeofweb, @davidsa03, @imranolas, @lubieowoce, @maxhaomh, @mirasayon, @blvdmitry, @hwangstar156, @lforst, @emmerich, @christian-bromann, @Lsnsh, @datner, @hiro0218, @flybayer, @ianmacartney, @ypessoa, @ryohidaka, @icyJoseph, @Arinji2, @lovell, @nsams, @Nayeem-XTREME, @JamBalaya56562, @Arindam200, @gaojude, @qqww08, @todor0v, @tokkiyaa, @arlyon, @lorensr, @Juneezee, @Sayakie, @IGassmann, @bosconian-dynamics, @phryneas, @akazwz, @atik-persei, @shubh73, @alpedia0, @chogyejin, @notomo, @ArnoldVanN, @dhruv-kaushik, @kevva, @Kahitar, @anay-208, @boris-szl, @devnyxie, @LorisSigrist, @M-YasirGhaffar, @Lada496, @kippmr, @torresgol10, @pkiv, @Netail, @jontewks, @ArnaudFavier, @chrisjstott, @mratlamwala, @mayank1513, @karlkeefer, @kshehadeh, @Marukome0743, @a89529294, @anku255, @KeisukeNagakawa, @andrii-bodnar, @aldosch, @versecafe, @steadily-worked, @cfrank, @QiuranHu, @farsabbutt, @joostmeijles, @saltcod, @archanaagivale30, @crutchcorn, @crebelskydico, @Maaz-Ahmed007, @jophy-ye, @remcohaszing, @JoshuaKGoldberg, @creativoma, @GyoHeon, @SukkaW, @MaxLeiter, @neila-a, @stylessh, @Teddir, @ManuLpz4, @Julian-Louis, @syi0808, @mert-duzgun, @amannn, @MonstraG, @hamirmahal, @tariknh, @Kikobeats, @LichuAcu, @Kuboczoch, @himself65, @Sam-Phillemon9493, @Shruthireddy04, @Hemanshu-Upadhyay, @timfuhrmann, @controversial, @pathliving, @mischnic, @mauroaccornero, @NavidNourani, @allanchau, @ekremkenter, @yurivangeffen, @gnoff, @darthmaim, @gdborton, @Willem-Jaap, @KentoMoriwaki, @TrevorSayre, @marlier, @Luluno01, @xixixao, @domin-mnd, @niketchandivade, @N2D4, @kjugi, @luciancah, @mud-ali, @codeSTACKr, @luojiyin1987, @mehmetozguldev, @ronanru, @tknickman, @joelhooks, @khawajaJunaid, @rubyisrust, @abdull-haseeb, @bewinsnw, @housseindjirdeh, @li-jia-nan, @aralroca, @s-ekai, @ah100101, @jantimon, @jordienr, @iscekic, @Strift, @slimbde, @nauvalazhar, @HughHzyb, @guisehn, @wesbos, @OlyaPolya, @paarthmadan, @AhmedBaset, @dineshh-m, @avdeev, @Bhavya031, @MildTomato, @Bjornnyborg, @amikofalvy, @yosefbeder, @kjac, @woutvanderploeg, @Ocheretovich, @ProchaLu, @luismiramirez, @omahs, @theoludwig, @abhi12299, @sommeeeer, @lumirlumir, @royalfig, @iampoul, @molebox, @txxxxc, @zce, @mamuso, @kahlstrm, @vercel-release-bot, @zhawtof, @PapatMayuri, @PlagueFPS, @IDNK2203, @jericopulvera, @liby, @CannonLock, @timfish, @whatisagi, @none23, @haouvw, @Pyr33x, @SouthLink, @frydj, @CrutchTheClutch, @sleevezip, @r34son, @yunsii, @md-rejoyan-islam, @kartheesan05, @nattui, @KonkenBonken, @weicheng95, @brekk, @Francoscopic, @B33fb0n3, @ImDR, @nurullah, @hdodov, @ebCrypto, @soedirgo, @floriangosse, @Tim-Zj, @raeyoung-kim, @erwannbst, @DerTimonius, @hirotomoyamada, @Develliot, @chandanpasunoori, @vicb, @ankur-dwivedi, @kidonng, @baeharam, @AnaTofuZ, @coderfin, @xugetsu, @alessiomaffeis, @kutsan, @jordyfontoura, @sebmarkbage, @tranvanhieu01012002, @jlbovenzo, @Luk-z, @jaredhan418, @bangseongbeom, @penicillin0, @neoFinch, @DeepakBalaraman, @Manoj-M-S, @Unsleeping, @lonr, @Aerilym, @ytori, @acdlite, @actopas, @n-ii-ma, @adcichowski, @mobeigi, @JohnGemstone, @jjm2317 helping!"}]