[{"source": "https://nextjs.org/blog/next-15", "title": "Next.js 15", "text": "Monday, October 21st 2024 Next.js 15 Posted byNext.js 15 is officially stable and ready for production. This release builds on the updates from both RC1 and RC2. We've focused heavily on stability while adding some exciting updates we think you'll love. Try Next.js 15 today: # Use the new automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@rc react-dom@rc We're also excited to share more about what's coming next at Next.js Conf this Thursday, October 24th. Here's what is new in Next.js 15: @next/codemod CLI: Easily upgrade to the latest Next.js and React versions.- Async Request APIs (Breaking): Incremental step towards a simplified rendering and caching model. - Caching Semantics (Breaking): fetch requests,GET Route Handlers, and client navigations are no longer cached by default. - React 19 Support: Support for React 19, React Compiler (Experimental), and hydration error improvements. - Turbopack Dev (Stable): Performance and stability improvements. - Static Indicator: New visual indicator shows static routes during development. unstable_after API (Experimental): Execute code after a response finishes streaming.instrumentation.js API (Stable): New API for server lifecycle observability.- Enhanced Forms ( next/form ): Enhance HTML forms with client-side navigation. next.config : TypeScript support fornext.config.ts .- Self-hosting Improvements: More control over Cache-Control headers. - Server Actions Security: Unguessable endpoints and removal of unused actions. - Bundling External Packages (Stable): New config options for App and Pages Router. - ESLint 9 Support: Added support for ESLint 9. - Development and Build Performance: Improved build times and Faster Fast Refresh. Smooth upgrades with @next/codemod CLI We include codemods (automated code transformations) with every major Next.js release to help automate upgrading breaking changes. To make upgrades even smoother, we've released an enhanced codemod CLI: npx @next/codemod@canary upgrade latest This tool helps you upgrade your codebase to the latest stable or prerelease versions. The CLI will update your dependencies, show available codemods, and guide you through applying them. The canary tag uses the latest version of the codemod while the latest specifies the Next.js version. We recommend using the canary version of the codemod even if you are upgrading to the latest Next.js version, as we plan to continue adding improvements to the tool based on your feedback. Learn more about Next.js codemod CLI. Async Request APIs (Breaking Change) In traditional Server-Side Rendering, the server waits for a request before rendering any content. However, not all components depend on request-specific data, so it's unnecessary to wait for the request to render them. Ideally, the server would prepare as much as possible before a request arrives. To enable this, and set the stage for future optimizations, we need to know when to wait for the request. Therefore, we are transitioning APIs that rely on request-specific data\u2014such as headers , cookies , params , and searchParams \u2014to be asynchronous. import { cookies } from 'next/headers'; export async function AdminPanel() { const cookieStore = await cookies(); const token = cookieStore.get('token'); // ... } This is a breaking change and affects the following APIs: cookies headers draftMode params inlayout.js ,page.js ,route.js ,default.js ,generateMetadata , andgenerateViewport searchParams inpage.js For an easier migration, these APIs can temporarily be accessed synchronously, but will show warnings in development and production until the next major version. A codemod is available to automate the migration: npx @next/codemod@canary next-async-request-api . For cases where the codemod can't fully migrate your code, please read the upgrade guide. We have also provided an example of how to migrate a Next.js application to the new APIs. Caching Semantics Next.js App Router launched with opinionated caching defaults. These were designed to provide the most performant option by default with the ability to opt out when required. Based on your feedback, we re-evaluated our caching heuristics and how they would interact with projects like Partial Prerendering (PPR) and with third party libraries using fetch . With Next.js 15, we're changing the caching default for GET Route Handlers and the Client Router Cache from cached by default to uncached by default. If you want to retain the previous behavior, you can continue to opt-into caching. We're continuing to improve caching in Next.js in the coming months and we'll share more details soon. GET Route Handlers are no longer cached by default In Next 14, Route Handlers that used the GET HTTP method were cached by default unless they used a dynamic function or dynamic config option. In Next.js 15, GET functions are not cached by default. You can still opt into caching using a static route config option such as export dynamic = 'force-static' . Special Route Handlers like sitemap.ts , opengraph-image.tsx , and icon.tsx , and other metadata files remain static by default unless they use dynamic functions or dynamic config options. Client Router Cache no longer caches Page components by default In Next.js 14.2.0, we introduced an experimental staleTimes flag to allow custom configuration of the Router Cache. In Next.js 15, this flag still remains accessible, but we are changing the default behavior to have a staleTime of 0 for Page segments. This means that as you navigate around your app, the client will always reflect the latest data from the Page component(s) that become active as part of the navigation. However, there are still important behaviors that remain unchanged: - Shared layout data won't be refetched from the server to continue to support partial rendering. - Back/forward navigation will still restore from cache to ensure the browser can restore scroll position. loading.js will remain cached for 5 minutes (or the value of thestaleTimes.static configuration). You can opt into the previous Client Router Cache behavior by setting the following configuration: const nextConfig = { experimental: { staleTimes: { dynamic: 30, }, }, }; export default nextConfig; React 19 As part of the Next.js 15 release, we've made the decision to align with the upcoming release of React 19. In version 15, the App Router uses React 19 RC, and we've also introduced backwards compatibility for React 18 with the Pages Router based on community feedback. If you're using the Pages Router, this allows you to upgrade to React 19 when ready. Although React 19 is still in the RC phase, our extensive testing across real-world applications and our close work with the React team have given us confidence in its stability. The core breaking changes have been well-tested and won't affect existing App Router users. Therefore, we've decided to release Next.js 15 as stable now, so your projects are fully prepared for React 19 GA. To ensure the transition is as smooth as possible, we've provided codemods and automated tools to help ease the migration process. Read the Next.js 15 upgrade guide, the React 19 upgrade guide, and watch the React Conf Keynote to learn more. Pages Router on React 18 Next.js 15 maintains backward compatibility for the Pages Router with React 18, allowing users to continue using React 18 while benefiting from improvements in Next.js 15. Since the first Release Candidate (RC1), we've shifted our focus to include support for React 18 based on community feedback. This flexibility enables you to adopt Next.js 15 while using the Pages Router with React 18, giving you greater control over your upgrade path. Note: While it is possible to run the Pages Router on React 18 and the App Router on React 19 in the same application, we don't recommend this setup. Doing so could result in unpredictable behavior and typings inconsistencies, as the underlying APIs and rendering logic between the two versions may not fully align. React Compiler (Experimental) The React Compiler is a new experimental compiler created by the React team at Meta. The compiler understands your code at a deep level through its understanding of plain JavaScript semantics and the Rules of React, which allows it to add automatic optimizations to your code. The compiler reduces the amount of manual memoization developers have to do through APIs such as useMemo and useCallback - making code simpler, easier to maintain, and less error prone. With Next.js 15, we've added support for the React Compiler. Learn more about the React Compiler, and the available Next.js config options. Note: The React Compiler is currently only available as a Babel plugin, which will result in slower development and build times. Hydration error improvements Next.js 14.1 made improvements to error messages and hydration errors. Next.js 15 continues to build on those by adding an improved hydration error view. Hydration errors now display the source code of the error with suggestions on how to address the issue. For example, this was a previous hydration error message in Next.js 14.1: Next.js 15 has improved this to: Turbopack Dev We are happy to announce that next dev --turbo is now stable and ready to speed up your development experience. We've been using it to iterate on vercel.com, nextjs.org, v0, and all of our other applications with great results. For example, with vercel.com , a large Next.js app, we've seen: - Up to 76.7% faster local server startup. - Up to 96.3% faster code updates with Fast Refresh. - Up to 45.8% faster initial route compile without caching (Turbopack does not have disk caching yet). You can learn more about Turbopack Dev in our new blog post. Static Route Indicator Next.js now displays a Static Route Indicator during development to help you identify which routes are static or dynamic. This visual cue makes it easier to optimize performance by understanding how your pages are rendered. You can also use the next build output to view the rendering strategy for all routes. This update is part of our ongoing efforts to enhance observability in Next.js, making it easier for developers to monitor, debug, and optimize their applications. We're also working on dedicated developer tools, with more details to come soon. Learn more about the Static Route Indicator, which can be disabled. Executing code after a response with unstable_after (Experimental) When processing a user request, the server typically performs tasks directly related to computing the response. However, you may need to perform tasks such as logging, analytics, and other external system synchronization. Since these tasks are not directly related to the response, the user should not have to wait for them to complete. Deferring the work after responding to the user poses a challenge because serverless functions stop computation immediately after the response is closed. after() is a new experimental API that solves this problem by allowing you to schedule work to be processed after the response has finished streaming, enabling secondary tasks to run without blocking the primary response. To use it, add experimental.after to next.config.js : const nextConfig = { experimental: { after: true, }, }; export default nextConfig; Then, import the function in Server Components, Server Actions, Route Handlers, or Middleware. import { unstable_after as after } from 'next/server'; import { log } from '@/app/utils'; export default function Layout({ children }) { // Secondary task after(() => { log(); }); // Primary task return <>{children}</>; } Learn more about unstable_after . instrumentation.js (Stable) The instrumentation file, with the register() API, allows users to tap into the Next.js server lifecycle to monitor performance, track the source of errors, and deeply integrate with observability libraries like OpenTelemetry. This feature is now stable and the experimental.instrumentationHook config option can be removed. In addition, we've collaborated with Sentry on designing a new onRequestError hook that can be used to: - Capture important context about all errors thrown on the server, including: - Router: Pages Router or App Router - Server context: Server Component, Server Action, Route Handler, or Middleware - Report the errors to your favorite observability provider. export async function onRequestError(err, request, context) { await fetch('https://...', { method: 'POST', body: JSON.stringify({ message: err.message, request, context }), headers: { 'Content-Type': 'application/json' }, }); } export async function register() { // init your favorite observability provider SDK } Learn more about the onRequestError function. <Form> Component The new <Form> component extends the HTML <form> element with prefetching, client-side navigation, and progressive enhancement. It is useful for forms that navigate to a new page, such as a search form that leads to a results page. import Form from 'next/form'; export default function Page() { return ( <Form action=\"/search\"> <input name=\"query\" /> <button type=\"submit\">Submit</button> </Form> ); } The <Form> component comes with: - Prefetching: When the form is in view, the layout and loading UI are prefetched, making navigation fast. - Client-side Navigation: On submission, shared layouts and client-side state are preserved. - Progressive Enhancement: If JavaScript hasn't loaded yet, the form still works via full-page navigation. Previously, achieving these features required a lot of manual boilerplate. For example: Example // Note: This is abbreviated for demonstration purposes. // Not recommended for use in production code. 'use client' import { useEffect } from 'react' import { useRouter } from 'next/navigation' export default function Form(props) { const action = props.action const router = useRouter() useEffect(() => { // if form target is a URL, prefetch it if (typeof action === 'string') { router.prefetch(action) } }, [action, router]) function onSubmit(event) { event.preventDefault() // grab all of the form fields and trigger a `router.push` with the data URL encoded const formData = new FormData(event.currentTarget) const data = new URLSearchParams() for (const [name, value] of formData) { data.append(name, value as string) } router.push(`${action}?${data.toString()}`) } if (typeof action === 'string') { return <form onSubmit={onSubmit} {...props} /> } return <form {...props} /> } Learn more about the <Form> Component. Support for next.config.ts Next.js now supports the TypeScript next.config.ts file type and provides a NextConfig type for autocomplete and type-safe options: import type { NextConfig } from 'next'; const nextConfig: NextConfig = { /* config options here */ }; export default nextConfig; Learn more about TypeScript support in Next.js. Improvements for self-hosting When self-hosting applications, you may need more control over Cache-Control directives. One common case is controlling the stale-while-revalidate period sent for ISR pages. We've implemented two improvements: - You can now configure the expireTime value innext.config . This was previously theexperimental.swrDelta option. - Updated the default value to one year, ensuring most CDNs can fully apply the stale-while-revalidate semantics as intended. We also no longer override custom Cache-Control values with our default values, allowing full control and ensuring compatibility with any CDN setup. Finally, we've improved image optimization when self-hosting. Previously, we recommended you install sharp for optimizing images on your Next.js server. This recommendation was sometimes missed. With Next.js 15, you no longer need to manually install sharp \u2014 Next.js will use sharp automatically when using next start or running with standalone output mode. To learn more, see our new demo and tutorial video on self-hosting Next.js. Enhanced Security for Server Actions Server Actions are server-side functions that can be called from the client. They are defined by adding the 'use server' directive at the top of a file and exporting an async function. Even if a Server Action or utility function is not imported elsewhere in your code, it's still a publicly accessible HTTP endpoint. While this behavior is technically correct, it can lead to unintentional exposure of such functions. To improve security, we've introduced the following enhancements: - Dead code elimination: Unused Server Actions won't have their IDs exposed to the client-side JavaScript bundle, reducing bundle size and improving performance. - Secure action IDs: Next.js now creates unguessable, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security. // app/actions.js 'use server'; // This action **is** used in our application, so Next.js // will create a secure ID to allow the client to reference // and call the Server Action. export async function updateUserAction(formData) {} // This action **is not** used in our application, so Next.js // will automatically remove this code during `next build` // and will not create a public endpoint. export async function deleteUserAction(formData) {} You should still treat Server Actions as public HTTP endpoints. Learn more about securing Server Actions. Optimizing bundling of external packages (Stable) Bundling external packages can improve the cold start performance of your application. In the App Router, external packages are bundled by default, and you can opt-out specific packages using the new serverExternalPackages config option. In the Pages Router, external packages are not bundled by default, but you can provide a list of packages to bundle using the existing transpilePackages option. With this configuration option, you need to specify each package. To unify configuration between App and Pages Router, we're introducing a new option, bundlePagesRouterDependencies to match the default automatic bundling of the App Router. You can then use serverExternalPackages to opt-out specific packages, if needed. const nextConfig = { // Automatically bundle external packages in the Pages Router: bundlePagesRouterDependencies: true, // Opt specific packages out of bundling for both App and Pages Router: serverExternalPackages: ['package-name'], }; export default nextConfig; Learn more about optimizing external packages. ESLint 9 Support Next.js 15 also introduces support for ESLint 9, following the end-of-life for ESLint 8 on October 5, 2024. To ensure a smooth transition, Next.js remain backwards compatible, meaning you can continue using either ESLint 8 or 9. If you upgrade to ESLint 9, and we detect that you haven't yet adopted the new config format, Next.js will automatically apply the ESLINT_USE_FLAT_CONFIG=false escape hatch to ease migration. Additionally, deprecated options like \u2014ext and \u2014ignore-path will be removed when running next lint . Please note that ESLint will eventually disallow these older configurations in ESLint 10, so we recommend starting your migration soon. For more details on these changes, check out the migration guide. As part of this update, we've also upgraded eslint-plugin-react-hooks to v5.0.0 , which introduces new rules for React Hooks usage. You can review all changes in the changelog for eslint-plugin-react-hooks@5.0.0. Development and Build Improvements Server Components HMR During development, Server components are re-executed when saved. This means, any fetch requests to your API endpoints or third-party services are also called. To improve local development performance and reduce potential costs for billed API calls, we now ensure Hot Module Replacement (HMR) can re-use fetch responses from previous renders. Learn more about the Server Components HMR Cache. Faster Static Generation for the App Router We've optimized static generation to improve build times, especially for pages with slow network requests. Previously, our static optimization process rendered pages twice\u2014once to generate data for client-side navigation and a second time to render the HTML for the initial page visit. Now, we reuse the first render, cutting out the second pass, reducing workload and build times. Additionally, static generation workers now share the fetch cache across pages. If a fetch call doesn't opt out of caching, its results are reused by other pages handled by the same worker. This reduces the number of requests for the same data. Advanced Static Generation Control (Experimental) We've added experimental support for more control over the static generation process for advanced use cases that would benefit from greater control. We recommend sticking to the current defaults unless you have specific requirements as these options can lead to increased resource usage and potential out-of-memory errors due to increased concurrency. const nextConfig = { experimental: { // how many times Next.js will retry failed page generation attempts // before failing the build staticGenerationRetryCount: 1 // how many pages will be processed per worker staticGenerationMaxConcurrency: 8 // the minimum number of pages before spinning up a new export worker staticGenerationMinPagesPerWorker: 25 }, } export default nextConfig; Learn more about the Static Generation options. Other Changes - [Breaking] next/image: Removed squoosh in favor ofsharp as an optional dependency (PR) - [Breaking] next/image: Changed default Content-Disposition toattachment (PR) - [Breaking] next/image: Error when src has leading or trailing spaces (PR) - [Breaking] Middleware: Apply react-server condition to limit unrecommended React API imports (PR) - [Breaking] next/font: Removed support for external @next/font package (PR) - [Breaking] next/font: Removed font-family hashing (PR) - [Breaking] Caching: force-dynamic will now set ano-store default to the fetch cache (PR) - [Breaking] Config: Enable swcMinify (PR),missingSuspenseWithCSRBailout (PR), andoutputFileTracing (PR) behavior by default and remove deprecated options - [Breaking] Remove auto-instrumentation for Speed Insights (must now use the dedicated @vercel/speed-insights package) (PR) - [Breaking] Remove .xml extension for dynamic sitemap routes and align sitemap URLs between development and production (PR) - [Breaking] We've deprecated exporting export const runtime = \"experimental-edge\" in the App Router. Users should now switch toexport const runtime = \"edge\" . We've added a codemod to perform this (PR) - [Breaking] Calling revalidateTag andrevalidatePath during render will now throw an error (PR) - [Breaking] The instrumentation.js andmiddleware.js files will now use the vendored React packages (PR) - [Breaking] The minimum required Node.js version has been updated to 18.18.0 (PR) - [Breaking] next/dynamic : the deprecatedsuspense prop has been removed and when the component is used in the App Router, it won't insert an empty Suspense boundary anymore (PR) - [Breaking] When resolving modules on the Edge Runtime, the worker module condition will not be applied (PR) - [Breaking] Disallow using ssr: false option withnext/dynamic in Server Components (PR) - [Improvement] Metadata: Updated environment variable fallbacks for metadataBase when hosted on Vercel (PR) - [Improvement] Fix tree-shaking with mixed namespace and named imports from optimizePackageImports (PR) - [Improvement] Parallel Routes: Provide unmatched catch-all routes with all known params (PR) - [Improvement] Config bundlePagesExternals is now stable and renamed tobundlePagesRouterDependencies - [Improvement] Config serverComponentsExternalPackages is now stable and renamed toserverExternalPackages - [Improvement] create-next-app: New projects ignore all .env files by default (PR) - [Improvement] The outputFileTracingRoot ,outputFileTracingIncludes andoutputFileTracingExcludes have been upgraded from experimental and are now stable (PR) - [Improvement] Avoid merging global CSS files with CSS module files deeper in the tree (PR) - [Improvement] The cache handler can be specified via the NEXT_CACHE_HANDLER_PATH environment variable (PR) - [Improvement] The Pages Router now supports both React 18 and React 19 (PR) - [Improvement] The Error Overlay now displays a button to copy the Node.js Inspector URL if the inspector is enabled (PR) - [Improvement] Client prefetches on the App Router now use the priority attribute (PR) - [Improvement] Next.js now provides an unstable_rethrow function to rethrow Next.js internal errors in the App Router (PR) - [Improvement] unstable_after can now be used in static pages (PR) - [Improvement] If a next/dynamic component is used during SSR, the chunk will be prefetched (PR) - [Improvement] The esmExternals option is now supported on the App Router (PR) - [Improvement] The experimental.allowDevelopmentBuild option can be used to allowNODE_ENV=development withnext build for debugging purposes (PR) - [Improvement] The Server Action transforms are now disabled in the Pages Router (PR) - [Improvement] Build workers will now stop the build from hanging when they exit (PR) - [Improvement] When redirecting from a Server Action, revalidations will now apply correctly (PR) - [Improvement] Dynamic params are now handled correctly for parallel routes on the Edge Runtime (PR) - [Improvement] Static pages will now respect staleTime after initial load (PR) - [Improvement] vercel/og updated with a memory leak fix (PR) - [Improvement] Patch timings updated to allow usage of packages like msw for APIs mocking (PR) - [Improvement] Prerendered pages should use static staleTime (PR) To learn more, check out the upgrade guide. Contributors Next.js is the result of the combined work of over 3,000 individual developers, industry partners like Google and Meta, and our core team at Vercel. This release was brought to you by: - The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Wyatt, and Zack. - The Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will. - The Next.js Docs team: Delba, Rich, Ismael, and Lee. Huge thanks to @AbhiShake1, @Aerilym, @AhmedBaset, @AnaTofuZ, @Arindam200, @Arinji2, @ArnaudFavier, @ArnoldVanN, @Auxdible, @B33fb0n3, @Bhavya031, @Bjornnyborg, @BunsDev, @CannonLock, @CrutchTheClutch, @DeepakBalaraman, @DerTimonius, @Develliot, @EffectDoplera, @Ehren12, @Ethan-Arrowood, @FluxCapacitor2, @ForsakenHarmony, @Francoscopic, @Gomah, @GyoHeon, @Hemanshu-Upadhyay, @HristovCodes, @HughHzyb, @IAmKushagraSharma, @IDNK2203, @IGassmann, @ImDR, @IncognitoTGT, @Jaaneek, @JamBalaya56562, @Jeffrey-Zutt, @JohnGemstone, @JoshuaKGoldberg, @Julian-Louis, @Juneezee, @KagamiChan, @Kahitar, @KeisukeNagakawa, @KentoMoriwaki, @Kikobeats, @KonkenBonken, @Kuboczoch, @Lada496, @LichuAcu, @LorisSigrist, @Lsnsh, @Luk-z, @Luluno01, @M-YasirGhaffar, @Maaz-Ahmed007, @Manoj-M-S, @ManuLpz4, @Marukome0743, @MaxLeiter, @MehfoozurRehman, @MildTomato, @MonstraG, @N2D4, @NavidNourani, @Nayeem-XTREME, @Netail, @NilsJacobsen, @Ocheretovich, @OlyaPolya, @PapatMayuri, @PaulAsjes, @PlagueFPS, @ProchaLu, @Pyr33x, @QiuranHu, @RiskyMH, @Sam-Phillemon9493, @Sayakie, @Shruthireddy04, @SouthLink, @Strift, @SukkaW, @Teddir, @Tim-Zj, @TrevorSayre, @Unsleeping, @Willem-Jaap, @a89529294, @abdull-haseeb, @abhi12299, @acdlite, @actopas, @adcichowski, @adiguno, @agadzik, @ah100101, @akazwz, @aktoriukas, @aldosch, @alessiomaffeis, @allanchau, @alpedia0, @amannn, @amikofalvy, @anatoliik-lyft, @anay-208, @andrii-bodnar, @anku255, @ankur-dwivedi, @aralroca, @archanaagivale30, @arlyon, @atik-persei, @avdeev, @baeharam, @balazsorban44, @bangseongbeom, @begalinsaf, @bennettdams, @bewinsnw, @bgw, @blvdmitry, @bobaaaaa, @boris-szl, @bosconian-dynamics, @brekk, @brianshano, @cfrank, @chandanpasunoori, @chentsulin, @chogyejin, @chrisjstott, @christian-bromann, @codeSTACKr, @coderfin, @coltonehrman, @controversial, @coopbri, @creativoma, @crebelskydico, @crutchcorn, @darthmaim, @datner, @davidsa03, @delbaoliveira, @devjiwonchoi, @devnyxie, @dhruv-kaushik, @dineshh-m, @diogocapela, @dnhn, @domdomegg, @domin-mnd, @dvoytenko, @ebCrypto, @ekremkenter, @emmerich, @flybayer, @floriangosse, @forsakenharmony, @francoscopic, @frys, @gabrielrolfsen, @gaojude, @gdborton, @greatvivek11, @gnoff, @guisehn, @GyoHeon, @hamirmahal, @hiro0218, @hirotomoyamada, @housseindjirdeh, @hungdoansy, @huozhi, @hwangstar156, @iampoul, @ianmacartney, @icyJoseph, @ijjk, @imddc, @imranolas, @iscekic, @jantimon, @jaredhan418, @jeanmax1me, @jericopulvera, @jjm2317, @jlbovenzo, @joelhooks, @joeshub, @jonathan-ingram, @jonluca, @jontewks, @joostmeijles, @jophy-ye, @jordienr, @jordyfontoura, @kahlstrm, @karlhorky, @karlkeefer, @kartheesan05, @kdy1, @kenji-webdev, @kevva, @khawajaJunaid, @kidonng, @kiner-tang, @kippmr, @kjac, @kjugi, @kshehadeh, @kutsan, @kwonoj, @kxlow, @leerob, @lforst, @li-jia-nan, @liby, @lonr, @lorensr, @lovell, @lubieowoce, @luciancah, @luismiramirez, @lukahartwig, @lumirlumir, @luojiyin1987, @mamuso, @manovotny, @marlier, @mauroaccornero, @maxhaomh, @mayank1513, @mcnaveen, @md-rejoyan-islam, @mehmetozguldev, @mert-duzgun, @mirasayon, @mischnic, @mknichel, @mobeigi, @molebox, @mratlamwala, @mud-ali, @n-ii-ma, @n1ckoates, @nattui, @nauvalazhar, @neila-a, @neoFinch, @niketchandivade, @nisabmohd, @none23, @notomo, @notrab, @nsams, @nurullah, @okoyecharles, @omahs, @paarthmadan, @pathliving, @pavelglac, @penicillin0, @phryneas, @pkiv, @pnutmath, @qqww08, @r34son, @raeyoung-kim, @remcohaszing, @remorses, @rezamauliadi, @rishabhpoddar, @ronanru, @royalfig, @rubyisrust, @ryan-nauman, @ryohidaka, @ryota-murakami, @s-ekai, @saltcod, @samcx, @samijaber, @sean-rallycry, @sebmarkbage, @shubh73, @shuding, @sirTangale, @sleevezip, @slimbde, @soedirgo, @sokra, @sommeeeer, @sopranopillow, @souporserious, @srkirkland, @steadily-worked, @steveluscher, @stipsan, @styfle, @stylessh, @syi0808, @symant233, @tariknh, @theoludwig, @timfish, @timfuhrmann, @timneutkens, @tknickman, @todor0v, @tokkiyaa, @torresgol10, @tranvanhieu01012002, @txxxxc, @typeofweb, @unflxw, @unstubbable, @versecafe, @vicb, @vkryachko, @wbinnssmith, @webtinax, @weicheng95, @wesbos, @whatisagi, @wiesson, @woutvanderploeg, @wyattjoh, @xiaohanyu, @xixixao, @xugetsu, @yosefbeder, @ypessoa, @ytori, @yunsii, @yurivangeffen, @z0n, @zce, @zhawtof, @zsh77, and @ztanner for helping!"},
{"source": "https://nextjs.org/blog/next-15-1", "title": "Next.js 15.1", "text": "Tuesday, December 10th 2024 Next.js 15.1 Posted byNext.js 15.1 brings core upgrades, new APIs, and improvements to the developer experience. Key updates include: - React 19 (stable): Support for React 19 is officially available in both Pages Router & App Router. - Improved Error Debugging: Enhanced DX and better source maps for the browser and the terminal. after (stable): New API to execute code after a response has finished streaming.forbidden /unauthorized (experimental): New APIs to enable more granular authentication error handling. Upgrade today, or get started with: # Use the automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start a new project npx create-next-app@latest React 19 (stable) Next.js 15.1 now fully supports React 19: - For the Pages Router: you can now use React 19 stable without needing the Release Candidate or Canary releases, alongside continued support for React 18. - For the App Router: we will continue to provide React Canary releases built-in. These include all the stable React 19 changes, as well as newer features being validated in frameworks, prior to a new React release. Since the Next.js 15 release, a significant addition to React 19 was \u201csibling pre-warming\u201d. For a comprehensive overview of React 19\u2019s updates, please refer to the official React 19 blog post. Improved Error Debugging We\u2019ve made improvements to error debugging in Next.js, ensuring you can quickly locate the source of issues, whether they appear in the terminal, browser, or attached debuggers. These enhancements apply to both Webpack and Turbopack (now stable with Next.js 15). Source Maps Enhancements Errors are now easier to trace back to their origin through the improved use of source maps. We\u2019ve implemented the ignoreList property of source maps, which allows Next.js to hide stack frames for external dependencies, making your application code the primary focus. For slightly more accurate source mapping of method names, we suggest adopting Turbopack (now stable), which has improved handling and detection of source maps over Webpack. For library authors: We recommend populating the ignoreList property in sourcemaps when publishing your libraries, especially if they are configured as external (e.g. in theserverExternalPackages config). Collapsed Stack Frames We\u2019ve improved the logic for collapsing stack frames to highlight the most relevant parts of your code. - In the browser and error overlay: Stack frames from third-party dependencies are hidden by default, focusing on your application code. You can reveal the hidden frames by clicking \u201cShow ignored frames\u201d in the devtools or the overlay. - In the terminal: Third-party dependency frames are also collapsed by default, and error formatting now aligns with the browser output for a consistent debugging experience. Errors are replayed in the browser to ensure you don\u2019t miss important information during development if you need the entire stack trace. Enhanced Profiling Ignored stack frames are also recognized by built-in browser profilers. This makes profiling your application easier, allowing you to pinpoint slow functions in your code without noise from external libraries. Improved with the Edge Runtime When using the Edge runtime, errors are now displayed consistently across development environments, ensuring seamless debugging. Previously, logged errors would only include the message and not the stack. Before and after Terminal Before: \u2a2f app/page.tsx (6:11) @ eval \u2a2f Error: boom at eval (./app/page.tsx:12:15) at Page (./app/page.tsx:11:74) at AsyncLocalStorage.run (node:async_hooks:346:14) at stringify (<anonymous>) at AsyncLocalStorage.run (node:async_hooks:346:14) at AsyncResource.runInAsyncScope (node:async_hooks:206:9) digest: \"380744807\" 4 | export default function Page() { 5 | const throwError = myCallback(() => { > 6 | throw new Error('boom') | ^ 7 | }, []) 8 | 9 | throwError() GET / 500 in 2354ms Terminal After: \u2a2f Error: boom at eval (app/page.tsx:6:10) at Page (app/page.tsx:5:32) 4 | export default function Page() { 5 | const throwError = myCallback(() => { > 6 | throw new Error('boom') | ^ 7 | }, []) 8 | 9 | throwError() { digest: '225828171' } Error Overlay Before Error Overlay After These improvements make errors clearer and more intuitive, allowing you to focus your time building your application rather than debugging. We\u2019re also thrilled to announce the introduction of a redesigned UI for the error overlay, coming in upcoming releases. after (stable) The after() API is now stable following its introduction in the first Next.js 15 RC. after() provides a way to perform tasks such as logging, analytics, and other system synchronization after the response has finished streaming to the user, without blocking the primary response. Key changes Since its introduction, we\u2019ve stabilized after() and addressed feedback including: - Improved support for self-hosted Next.js servers. - Bug fixes for scenarios where after() interacted with other Next.js features. - Enhanced extensibility, enabling other platforms to inject their own waitUntil() primitives to powerafter() . - Support for runtime APIs such as cookies() andheaders() in Server Actions and Route Handlers. import { after } from 'next/server'; import { log } from '@/app/utils'; export default function Layout({ children }) { // Secondary task after(() => { log(); }); // Primary task return <>{children}</>; } Read more about the after API and how to leverage it in the documentation. forbidden and unauthorized (experimental) Next.js 15.1 includes two experimental APIs, forbidden() and unauthorized() , based on community feedback. We\u2019d love your feedback \u2014 please try it in your development environments and share your thoughts in this discussion thread. Overview If you\u2019re familiar with the App Router, you\u2019ve likely used notFound() to trigger 404 behavior alongside the customizable not-found.tsx file. With version 15.1, we\u2019re extending this approach to authorization errors: \u2022 forbidden() triggers a 403 error with customizable UI via forbidden.tsx . \u2022 unauthorized() triggers a 401 error with customizable UI via unauthorized.tsx . Good to know: As with notFound() errors, the status code will be200 if the error is triggered after initial response headers have been sent. Learn more. Enabling the feature As this feature is still experimental, you\u2019ll need to enable it in your next.config.ts file: import type { NextConfig } from 'next'; const nextConfig: NextConfig = { experimental: { authInterrupts: true, }, }; export default nextConfig; Note: next.config.ts support was introduced in Next.js 15. Learn more. Using forbidden() and unauthorized() You can use forbidden() and unauthorized() in Server Actions, Server Components, Client Components, or Route Handlers. Here\u2019s an example: import { verifySession } from '@/app/lib/dal'; import { forbidden } from 'next/navigation'; export default async function AdminPage() { const session = await verifySession(); // Check if the user has the 'admin' role if (session.role !== 'admin') { forbidden(); } // Render the admin page for authorized users return <h1>Admin Page</h1>; } Creating custom error pages To customize the error pages, create the following files: import Link from 'next/link'; export default function Forbidden() { return ( <div> <h2>Forbidden</h2> <p>You are not authorized to access this resource.</p> <Link href=\"/\">Return Home</Link> </div> ); } import Link from 'next/link'; export default function Unauthorized() { return ( <div> <h2>Unauthorized</h2> <p>Please log in to access this page.</p> <Link href=\"/login\">Go to Login</Link> </div> ); } We'd like to thank Clerk for proposing this feature through a PR and assisting us in prototyping the API. Before we stabilize this feature in 15.2, we're planning on adding more capabilities and improvements to the APIs to support a wider range of use cases. Read the documentation for the unauthorized and forbidden APIs for more details. Other Changes - [Feature] Use ESLint 9 in create-next-app (PR) - [Feature] Increase max cache tags to 128 (PR) - [Feature] Add an option to disable experimental CssChunkingPlugin (PR) - [Feature] Add experimental CSS inlining support (PR) - [Improvement] Silence Sass legacy-js-api warning (PR) - [Improvement] Fix unhandled rejection when using rewrites (PR) - [Improvement] Ensure parent process exits when webpack worker fails (PR) - [Improvement] Fixed route interception on a catch-all route (PR) - [Improvement] Fixed response cloning issue in request deduping (PR) - [Improvement] Fixed Server Action redirects between multiple root layouts (PR) - [Improvement] Support providing MDX plugins as strings for Turbopack compatibility (PR) Contributors Next.js is the result of the combined work of over 3,000 individual developers. This release was brought to you by: - The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, and Zack. - The Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will. - The Next.js Docs team: Delba, Rich, Ismael, and Lee. Huge thanks to @sokra, @molebox, @delbaoliveira, @eps1lon, @wbinnssmith, @JamBalaya56562, @hyungjikim, @adrian-faustino, @mottox2, @lubieowoce, @bgw, @mknichel, @wyattjoh, @huozhi, @kdy1, @mischnic, @ijjk, @icyJoseph, @acdlite, @unstubbable, @gaojude, @devjiwonchoi, @cena-ko, @lforst, @devpla, @samcx, @styfle, @ztanner, @Marukome0743, @timneutkens, @JeremieDoctrine, @ductnn, @karlhorky, @reynaldichernando, @chogyejin, @y-yagi, @philparzer, @alfawal, @Rhynden, @arlyon, @MJez29, @Goodosky, @themattmayfield, @tobySolutions, @kevinmitch14, @leerob, @emmanuelgautier, @mrhrifat, @lid0a, @boar-is, @nisabmohd, @PapatMayuri, @ovogmap, @Reflex2468, @LioRael, @betterthanhajin, @HerringtonDarkholme, @bpb54321, @ahmoin, @Kikobeats, @abdelrahmanAbouelkheir, @lumirlumir, @yeeed711, @petter, and @suu3 for helping!"},
{"source": "https://nextjs.org/blog/next-15-2", "title": "Next.js 15.2", "text": "Wednesday, February 26th 2025 Next.js 15.2 Posted byNext.js 15.2 includes updates for debugging errors, metadata, Turbopack, and more: - Redesigned error UI and improved stack traces: A redesigned debugging experience - Streaming metadata: Async metadata will no longer block page rendering or client-side page transitions - Turbopack performance improvements: Faster compile times and reduced memory usage - React View Transitions (experimental): Experimental support for React's new View Transitions API - Node.js Middleware (experimental): Experimental support for using the Node.js runtime in Middleware Upgrade today, or get started with: # Use the automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start a new project npx create-next-app@latest Redesigned error UI and improved stack traces We've added both visual and quality improvements to errors you may encounter while building your application. Let's walk through each area of improvements: Error overlay We've overhauled the UI and presentation of error messages in Next.js, making them easier to understand. The new design highlights the core details of the error\u2014such as the message, the relevant code frame, and the call stack\u2014while reducing noise from code in libraries or dependencies. This means you can quickly get to the root of what went wrong and start fixing it faster. Leveraging the newly introduced owner stacks feature in React, we're now able to provide higher fidelity into where your errors are coming from. Next.js will now be able to surface the subcomponent responsible for throwing the error, skipping over intermediary elements that weren't responsible for creating the element that caused the error. We're also making it easier to customize your indicator preferences without needing to add additional configuration. We've added a feedback section at the bottom of error overlays that lets you rate how helpful the error message was. Your opinion helps us understand common pain points and improve error messages to make debugging easier. Dev indicator We've consolidated development information into a new, streamlined indicator that shows details like rendering mode and build status. During compilation, you'll notice a dimmed, animated Next.js logo when navigating between routes. The logo brightens once compilation is complete and React begins rendering, providing a visual cue of your application's state. Opening the dev indicator now displays: - Your current route's rendering mode (static/dynamic) - Turbopack compilation status - Active errors with quick access to the error overlay Future updates will expand this menu to include: - PPR (Partial Prerendering) debugging tools - Cache monitoring features - Additional developer tooling This unified approach puts all crucial development information in one accessible location. We'll continue to refine and expand this feature in future releases based on your feedback. Streaming metadata It can often be necessary to fetch dynamic data, or perform some async operation, in generateMetadata . In prior versions of Next.js, this metadata needed to finish generating before the initial UI would be sent so it could be included in the document <head> . This meant that for many pages where a fast initial UI was available, the initial paint was still delayed by data requirements that did not affect what the user would see visually. We've improved this in 15.2 by allowing the initial UI to be sent to the browser even before generateMetadata has completed. However, to maintain compatibility with bots and crawlers that expect metadata to be available in the <head> of the document, we continue to delay sending HTML to certain bot user agents. If you need more fine-grained control over which bots receive this treatment, you can customize the regex used to serve them via the htmlLimitedBots option in next.config.js . Learn more about streaming metadata. Turbopack performance improvements Turbopack was marked stable with Next.js 15. We've been working on improving Turbopack's performance, particularly in scenarios without persistent caching. As part of this release, we've introduced the following enhancements: - Faster compile times: Early adopters have reported up to 57.6% faster compile times when accessing routes compared to Next.js 15.1. - Reduced memory usage: For the vercel.com application, we observed a 30% decrease in memory usage during local development. With these improvements, Turbopack should now be faster than Webpack in virtually all cases. If you encounter a scenario where this isn't true for your application, please reach out\u2014we want to investigate these. We've also made progress on persistent caching and production builds. Although these features aren't ready for an experimental release yet, we've started testing them on real-world projects. We'll share more detailed metrics once they're available for broader use. React View Transitions (experimental) We've added a feature flag to enable the new experimental View Transitions API in React. This new API allows you to animate between different views and components in your application. To enable this feature, add the following to your next.config.js : module.exports = { experimental: { viewTransition: true, }, }; Note: This feature is highly experimental and may change in future releases. For more information on how to use this feature, please refer to the original View Transition pull request in the React repository. This work builds on the native browser implementation of View Transitions. We will be publishing more documentation and examples as stability progresses. Node.js Middleware (experimental) We've been working on a new experimental flag to allow using the Node.js runtime for the Next.js Middleware. To enable this feature, add the following to your next.config.js : module.exports = { experimental: { nodeMiddleware: true, }, }; You can then specify the Node.js runtime in your Middleware config export: import bcrypt from 'bcrypt'; const API_KEY_HASH = process.env.API_KEY_HASH; // Pre-hashed API key in env export default async function middleware(req) { const apiKey = req.headers.get('x-api-key'); if (!apiKey || !(await bcrypt.compare(apiKey, API_KEY_HASH))) { return new Response('Forbidden', { status: 403 }); } console.log('API key validated'); } export const config = { runtime: 'nodejs', }; Note: This feature is not yet recommended for production use. Therefore, Next.js will throw an error unless you are using the next@canary release instead of the stable release. We are planning to take this opportunity to improve and reshape the Middleware API. If you have any suggestions or requests, please let us know. Node.js Middleware was a top community request and we are excited to have this addressed. Coming soon - \"use cache\" (beta): We've been working on stabilizing \"use cache\" as a standalone feature. Stay tuned for more details in the coming releases. Learn more about\"use cache\" . - Turbopack persistent caching (experimental): We've been dogfooding persistent caching at Vercel with positive performance improvements. Once we've stabilized it further, we'll release it behind a feature flag for additional feedback and testing. Other Changes - [Feature] Add --api flag to create a headless API-only withcreate-next-app (PR) - [Feature] Add support for images.qualities withnext/image (PR) - [Deprecation] Warn about i18n configuration deprecation in App Router (PR) - [Improvement] Improve lint performance of no-html-link-for-pages (PR) - [Improvement] Emit build error if \"use action\" directive is incorrectly used (PR) - [Improvement] Display global-error alongside dev overlay during development (PR) - [Improvement] Allow disabling HTTP request logs in development server (PR) - [Improvement] Add pagination SEO link tags (PR) - [Improvement] Improve JSDocs for metadata and<Link> components (PR) - [Improvement] Middleware should match next/image requests (PR) - [Improvement] Add hostname to default error boundary message (PR) - [Improvement] Send errors not handled by explicit error boundaries through reportError (PR) Contributors Next.js is the result of the combined work of over 3,000 individual developers. This release was brought to you by: - The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, and Zack. - The Turbopack team: Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will. - The Next.js Docs team: Delba, Rich, Ismael, and Lee. Huge thanks to @mischnic, @Marukome0743, @JamBalaya56562, @creationix, @noreiller, @styfle, @abdonrd, @ollyw, @aymericzip, @davidhu2000, @attilarepka, @devpla, @dydals3440, @huozhi, @wbinnssmith, @suu3, @PapatMayuri, @Sahil4883, @abyii, @molebox, @sokra, @maciej-ka, @abvthecity, @damiensedgwick, @alitas, @RiskyMH, @ytreister, @sommeeeer, @n1ckoates, @yongholeeme, @spidersouris, @gurkerl83, @cassiossantos, @Netail, @tknickman, @eur00t, @cseas, @nnnnoel, @Manoj-M-S, @lfades, @matmannion, @mikeboensel, @nphmuller, @apostolos, @k15a, @pavelee, @locothedev, @vexcat, @Zach-Jaensch, @decepulis, @gadcam, @lukahartwig, @jsanford8, @RobinMalfait, @raunofreiberg, @mohsen1, @skushagra, @amannn, @HQidea, @jrandolf, @smit-err, @littledivy, @k35o, @martinsione, @CvX, @msereniti, @Timer, @Iftee97, @chibicode, @RobPruzan, @PlagueFPS, @bjunix, @maximevtush, @michaelven, @sedlukha, @johannpinson, @AxelUser, @Nayeem-XTREME, @IcaroG, @blurrah, @lachlanjc, @ashi009, @conico974, @raphaelcosta, @dulmandakh, @khuezy, @Knoa0405, @wangsijie, @stefanprobst, @wentsul, @loopy-lim, @bratvanov, @hedgeday, and @cassian-goode for helping!"},
{"source": "https://nextjs.org/blog/next-15-3", "title": "Next.js 15.3", "text": "Wednesday, April 9th 2025 Next.js 15.3 Posted byNext.js 15.3 includes Turbopack for builds, new client instrumentation and navigation hooks, and more: - Turbopack for builds (alpha): Faster production builds passing 8000+ tests (99%) - Community support for Rspack (experimental): Alternative bundler with Webpack compatibility - Client Instrumentation hook: Early monitoring and analytics setup - Navigation hooks: Control routing with onNavigate anduseLinkStatus - TypeScript plugin improvements: Improved support for large codebases Upgrade today, or get started with: # Use the automated upgrade CLI npx @next/codemod@canary upgrade latest # ...or upgrade manually npm install next@latest react@latest react-dom@latest # ...or start a new project npx create-next-app@latest Turbopack Builds (alpha) Following the stable release of next dev --turbopack , over 50% of development sessions on Next.js 15 are now using Turbopack. This release includes our alpha release of next build --turbopack , bringing the same performance improvements from local development to production builds. Try Turbopack for production builds by upgrading to 15.3 and running: next build --turbopack Functionality 99.3% of integration tests for next build are already passing. You can track our progress towards 100% at areweturboyet.com. If your application already works with Turbopack for dev , then it should work as-is with build . Turbopack builds are in alpha. We don\u2019t recommend using them in production for mission-critical applications at this stage. Instead, try them in a preview or staging environment, or run the build locally to observe differences in bundle size and performance. We\u2019re actively working to close these performance gaps through scope hoisting, improved chunking, and other optimizations. Build performance We\u2019ve been validating Turbopack on Vercel\u2019s large internal monorepo and early partner codebases. One advantage of Turbopack\u2019s architecture versus our previous Webpack implementation is that performance scales when adding CPU cores: - At 4 cores: 28% faster than Webpack - At 16 cores: 60% faster than Webpack - At 30 cores: 83% faster than Webpack These build times drop even further with our experimental work on persistent caching. We will share more on that in a future release. Ecosystem We\u2019re working with commonly used integrations like Sentry to make sure they\u2019re compatible with next build --turbopack before the stable release. Please reach out to @leerob on X if you are a tool author who would like to work with us to ensure compatibility. Feedback Please share your feedback, even if it goes smoothly, to help us prepare a stable release: - GitHub discussions for general feedback - GitHub issues for reproductions Turbopack configuration in next.config.ts (stable) Turbopack configuration in next.config.ts has moved from experimental.turbo to the top-level turbopack key: import type { NextConfig } from 'next'; const nextConfig: NextConfig = { turbopack: { rules: { '*.svg': { loaders: ['@svgr/webpack'], as: '*.js', }, }, }, }; export default nextConfig; For compatibility, the experimental.turbo option will continue to be supported until the next major release of Next.js. For a complete list of Turbopack configuration options, see the Turbopack API Reference. Community support for Rspack (experimental) The Rspack team has created a community plugin for Next.js. This provides an option for Next.js users who need near-exact Webpack API compatibility, but cannot yet move to Turbopack, to improve their local compilation and build times. We\u2019re confident in our progress with Turbopack and will continue to provide an incremental path forward for Webpack users. While this is not an official Next.js plugin, we are partnering with the Rspack team. Both teams will collaborate on shared foundations like SWC and Lightning CSS, benefiting all Next.js users and the broader ecosystem. If you want to explore using Rspack with Next.js, you can use the next-rspack adapter. We are running the adapter against our integration test suite. It currently passes ~96% of tests. View an example or learn more in the Rspack docs. Client Instrumentation Hook The instrumentation-client.js|ts file allows you to add monitoring and analytics code that runs before your application's frontend code starts executing. This is ideal for setting up performance tracking, error monitoring, or other client-side observability tools as early as possible in the lifecycle. // Set up performance monitoring performance.mark('app-init'); // Initialize analytics console.log('Analytics initialized'); // Set up error tracking window.addEventListener('error', (event) => { // Send to your error tracking service reportError(event.error); }); Place this file at the root of your project similar to server-side instrumentation. Learn more in the instrumentation-client file documentation. Navigation Hooks We're introducing new navigation hooks that enhance client-side routing capabilities in Next.js 15.3, allowing you to more easily develop localized loading states and implement complex controls like navigation cancelation. onNavigate This event handler is a new property of the Link component and executes during client-side navigations, giving you precise control over your application's routing behavior. Unlike the onClick event, which fires for all clicks, onNavigate can be used for Single-Page App (SPA) navigations, allowing you to execute code or even cancel navigation with preventDefault() . This API can be used to implement transition animations, navigation guards, or analytics tracking that should only run during actual page transitions. Learn more by visiting the onNavigate documentation. useLinkStatus The useLinkStatus Client Component hook returns a pending boolean that indicates when navigation is in progress, giving you localized control over loading states. This API is modeled after useFormStatus from React, and is helpful for adding custom loading indicators during page transitions, especially when prefetching is disabled or when your linked routes don't have dedicated loading states. By placing a component that uses useLinkStatus as a descendant of your <Link> component, you can create responsive UI elements that react to navigation events in real-time. Learn more by visiting the useLinkStatus documentation. TypeScript Plugin Performance Improvements The Next.js TypeScript language server plugin (LSP) is now faster. The LSP provides inline Intellisense features such as server/client boundary validation, component prop hints, configuration autocompletion, and error detection for disallowed APIs in React Server Components. In very large codebases, the plugin could previously cause the TypeScript language service to hang or crash. We\u2019ve made significant performance improvements to resolve these issues. In our internal testing, plugin response times have improved ~60% with no freezing or crashes. Other Changes - [Feature] Support new URL() inimages.remotePatterns (#77692) - [Feature] Viewport options are now separate from metadata (#77427) - [Feature] Add unstable_dynamicOnHover option (#77866) - [Feature] Add support for Pinterest Rich Pins (#76988) - [Improvement] Make revalidate work when followed by a redirect in Route Handlers (#77090) - [Improvement] Ensure strong consistency after calling revalidate in Server Actions (#76885) - [Improvement] Upgrade sharp for faster PNG to AVIF conversion (#77839) Contributors Next.js is the result of the combined work of over 3,000 individual developers. This release was brought to you by: - The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, and Zack. - The Turbopack team: Benjamin, Donny, Josh, Maia, Niklas, Tim, Tobias, and Will. - The Next.js Docs team: Delba, Rich, Ismael, and Lee. Huge thanks to @raunofreiberg, @huozhi, @ijjk, @timneutkens, @gaojude, @leerob, @mezotv, @bgw, @samcx, @ztanner, @sokra, @mischnic, @wbinnssmith, @kdy1, @unstubbable, @ahabhgk, @ScriptedAlchemy, @SukkaW, @wyattjoh, @eps1lon, @Amirroid, @Netail, @lubieowoce, @gnoff, @jackwilson323, @acdlite, @sbougerel, @kevva, @kasperpeulen, @Cy-Tek, @dvoytenko, @husseinraoouf, @isBatak, @iamkd, @delbaoliveira, @jantimon, @padmaia, @Bernardoow, @styfle, @devjiwonchoi, @JamBalaya56562, and @Marukome0743 for helping!"}]