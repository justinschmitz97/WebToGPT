[{"source": "https://nextjs.org/blog/next-14", "title": "Next.js 14", "text": "Thursday, October 26th 2023\nNext.js 14\nPosted byAs we announced at Next.js Conf, Next.js 14 is our most focused release with:\n- Turbopack: 5,000 tests passing for App & Pages Router\n- 53% faster local server startup\n- 94% faster code updates with Fast Refresh\n- Server Actions (Stable): Progressively enhanced mutations\n- Integrated with caching & revalidating\n- Simple function calls, or works natively with forms\n- Partial Prerendering (Preview): Fast initial static response + streaming dynamic content\n- Next.js Learn (New): Free course teaching the App Router, authentication, databases, and more.\nUpgrade today or get started with:\nnpx create-next-app@latest\nNext.js Compiler: Turbocharged\nSince Next.js 13, we've been working to improve local development performance in Next.js in both the Pages and App Router.\nPreviously, we were rewriting next dev\nand other parts of Next.js to support this effort. We have since changed our approach to be more incremental. This means our Rust-based compiler will reach stability soon, as we've refocused on supporting all Next.js features first.\n5,000 integration tests for next dev\nare now passing with Turbopack, our underlying Rust engine. These tests include 7 years of bug fixes and reproductions.\nWhile testing on vercel.com\n, a large Next.js application, we've seen:\n- Up to 53.3% faster local server startup\n- Up to 94.7% faster code updates with Fast Refresh\nThis benchmark is a practical result of performance improvements you should expect with a large application (and large module graph). With 90% of tests for next dev\nnow passing, you should see faster and more reliable performance consistently when using next dev --turbo\n.\nOnce we hit 100% of tests passing, we'll move Turbopack to stable in an upcoming minor release. We'll also continue to support using webpack for custom configurations and ecosystem plugins.\nYou can follow the percentage of tests passing at areweturboyet.com.\nForms and Mutations\nNext.js 9 introduced API Routes\u2014a way to quickly build backend endpoints alongside your frontend code.\nFor example, you would create a new file in the api/\ndirectory:\nimport type { NextApiRequest, NextApiResponse } from 'next';\nexport default async function handler(\nreq: NextApiRequest,\nres: NextApiResponse,\n) {\nconst data = req.body;\nconst id = await createItem(data);\nres.status(200).json({ id });\n}\nThen, on the client-side, you could use React and an event handler like onSubmit\nto make a fetch\nto your API Route.\nimport { FormEvent } from 'react';\nexport default function Page() {\nasync function onSubmit(event: FormEvent<HTMLFormElement>) {\nevent.preventDefault();\nconst formData = new FormData(event.currentTarget);\nconst response = await fetch('/api/submit', {\nmethod: 'POST',\nbody: formData,\n});\n// Handle response if necessary\nconst data = await response.json();\n// ...\n}\nreturn (\n<form onSubmit={onSubmit}>\n<input type=\"text\" name=\"name\" />\n<button type=\"submit\">Submit</button>\n</form>\n);\n}\nNow with Next.js 14, we want to simplify the developer experience of authoring data mutations. Further, we want to improve the user experience when the user has a slow network connection, or when submitting a form from a lower-powered device.\nServer Actions (Stable)\nWhat if you didn't need to manually create an API Route? Instead, you could define a function that runs securely on the server, called directly from your React components.\nThe App Router is built on the React canary\nchannel, which is stable for frameworks to adopt new features. As of v14, Next.js has upgraded to the latest React canary\n, which includes stable Server Actions.\nThe previous example from the Pages Router can be simplified to one file:\nexport default function Page() {\nasync function create(formData: FormData) {\n'use server';\nconst id = await createItem(formData);\n}\nreturn (\n<form action={create}>\n<input type=\"text\" name=\"name\" />\n<button type=\"submit\">Submit</button>\n</form>\n);\n}\nServer Actions should feel familiar for any developers who have previously used server-centric frameworks in the past. It's built on web fundamentals like forms and the FormData Web API.\nWhile using Server Actions through a form is helpful for progressive enhancement, it is not a requirement. You can also call them directly as a function, without a form. When using TypeScript, this gives you full end-to-end type-safety between the client and server.\nMutating data, re-rendering the page, or redirecting can happen in one network roundtrip, ensuring the correct data is displayed on the client, even if the upstream provider is slow. Further, you can compose and reuse different actions, including many different actions in the same route.\nCaching, Revalidating, Redirecting, and more\nServer Actions are deeply integrated into the entire App Router model. You can:\n- Revalidate cached data with\nrevalidatePath()\norrevalidateTag()\n- Redirect to different routes through\nredirect()\n- Set and read cookies through\ncookies()\n- Handle optimistic UI updates with\nuseOptimistic()\n- Catch and display errors from the server with\nuseFormState()\n- Display loading states on the client with\nuseFormStatus()\nLearn more about Forms and Mutations with Server Actions or about the security model and best practices for Server Components and Server Actions.\nPartial Prerendering (Preview)\nWe'd like to share a preview of Partial Prerendering \u2014 a compiler optimization for dynamic content with a fast initial static response \u2014 that we're working on for Next.js.\nPartial Prerendering builds on a decade of research and development into server-side rendering (SSR), static-site generation (SSG), and incremental static revalidation (ISR).\nMotivation\nWe've heard your feedback. There's currently too many runtimes, configuration options, and rendering methods to have to consider. You want the speed and reliability of static, while also supporting fully dynamic, personalized responses.\nHaving great performance globally and personalization shouldn't come at the cost of complexity.\nOur challenge was to create a better developer experience, simplifying the existing model without introducing new APIs for developers to learn. While partial caching of server-side content has existed, these approaches still need to meet the developer experience and composability goals we aim for.\nPartial Prerendering requires no new APIs to learn.\nBuilt on React Suspense\nPartial Prerendering is defined by your Suspense boundaries. Here's how it works. Consider the following ecommerce page:\nexport default function Page() {\nreturn (\n<main>\n<header>\n<h1>My Store</h1>\n<Suspense fallback={<CartSkeleton />}>\n<ShoppingCart />\n</Suspense>\n</header>\n<Banner />\n<Suspense fallback={<ProductListSkeleton />}>\n<Recommendations />\n</Suspense>\n<NewProducts />\n</main>\n);\n}\nWith Partial Prerendering enabled, this page generates a static shell based on your <Suspense />\nboundaries. The fallback\nfrom React Suspense is prerendered.\nSuspense fallbacks in the shell are then replaced with dynamic components, like reading cookies to determine the cart, or showing a banner based on the user.\nWhen a request is made, the static HTML shell is immediately served:\n<main>\n<header>\n<h1>My Store</h1>\n<div class=\"cart-skeleton\">\n<!-- Hole -->\n</div>\n</header>\n<div class=\"banner\" />\n<div class=\"product-list-skeleton\">\n<!-- Hole -->\n</div>\n<section class=\"new-products\" />\n</main>\nSince <ShoppingCart />\nreads from cookies\nto look at the user session, this component is then streamed in as part of the same HTTP request as the static shell. There are no extra network roundtrips needed.\nimport { cookies } from 'next/headers'\nexport default function ShoppingCart() {\nconst cookieStore = cookies()\nconst session = cookieStore.get('session')\nreturn ...\n}\nTo have the most granular static shell, this may require adding additional Suspense boundaries. However, if you're already using loading.js\ntoday, this is an implicit Suspense boundary, so no changes would be required to generate the static shell.\nComing soon\nPartial prerendering is under active development. We'll be sharing more updates in an upcoming minor release.\nMetadata Improvements\nBefore your page content can be streamed from the server, there's important metadata about the viewport, color scheme, and theme that need to be sent to the browser first.\nEnsuring these meta\ntags are sent with the initial page content helps a smooth user experience, preventing the page from flickering by changing the theme color, or shifting layout due to viewport changes.\nIn Next.js 14, we've decoupled blocking and non-blocking metadata. Only a small subset of metadata options are blocking, and we want to ensure non-blocking metadata will not prevent a partially prerendered page from serving the static shell.\nThe following metadata options are now deprecated and will be removed from metadata\nin a future major version:\nviewport\n: Sets the initial zoom and other properties of the viewportcolorScheme\n: Sets the support modes (light/dark) for the viewportthemeColor\n: Sets the color the chrome around the viewport should render with\nStarting with Next.js 14, there are new options viewport\nand generateViewport\nto replace these options. All other metadata\noptions remain the same.\nYou can start adopting these new APIs today. The existing metadata\noptions will continue to work.\nNext.js Learn Course\nToday we're releasing a brand new, free course on Next.js Learn. This course teaches:\n- The Next.js App Router\n- Styling and Tailwind CSS\n- Optimizing Fonts and Images\n- Creating Layouts and Pages\n- Navigating Between Pages\n- Setting Up Your Postgres Database\n- Fetching Data with Server Components\n- Static and Dynamic Rendering\n- Streaming\n- Partial Prerendering (Optional)\n- Adding Search and Pagination\n- Mutating Data\n- Handling Errors\n- Improving Accessibility\n- Adding Authentication\n- Adding Metadata\nNext.js Learn has taught millions of developers about the foundations of the framework, and we can't wait to hear your feedback on our new addition. Head to nextjs.org/learn to take the course.\nOther Changes\n- [Breaking] Minimum Node.js version is now\n18.17\n- [Breaking] Removes WASM target for\nnext-swc\nbuild (PR) - [Breaking] Dropped support for\n@next/font\nin favor ofnext/font\n(Codemod) - [Breaking] Changed\nImageResponse\nimport fromnext/server\ntonext/og\n(Codemod) - [Breaking]\nnext export\ncommand has been removed in favor ofoutput: 'export'\nconfig (Docs) - [Deprecation]\nonLoadingComplete\nfornext/image\nis deprecated in favor ofonLoad\n- [Deprecation]\ndomains\nfornext/image\nis deprecated in favor ofremotePatterns\n- [Feature] More verbose logging around\nfetch\ncaching can be enabled (Docs) - [Improvement] 80% smaller function size for a basic\ncreate-next-app\napplication - [Improvement] Enhanced memory management when using\nedge\nruntime in development\nContributors\nNext.js is the result of the combined work of over 2,900 individual developers, industry partners like Google and Meta, and our core team at Vercel. Join the community on GitHub Discussions, Reddit, and Discord.\nThis release was brought to you by:\n- The Next.js team: Andrew, Balazs, Jiachi, Jimmy, JJ, Josh, Sebastian, Shu, Steven, Tim, Wyatt, and Zack.\n- The Turbopack team: Donny, Justin, Leah, Maia, OJ, Tobias, and Will.\n- Next.js Learn: Delba, Steph, Emil, Balazs, Hector, and Amy.\nAnd the contributions of: @05lazy, @0xadada, @2-NOW, @aarnadlr, @aaronbrown-vercel, @aaronjy, @abayomi185, @abe1272001, @abhiyandhakal, @abstractvector, @acdlite, @adamjmcgrath, @AdamKatzDev, @adamrhunter, @ademilter, @adictonator, @adilansari, @adtc, @afonsojramos, @agadzik, @agrattan0820, @akd-io, @AkifumiSato, @akshaynox, @alainkaiser, @alantoa, @albertothedev, @AldeonMoriak, @aleksa-codes, @alexanderbluhm, @alexkirsz, @alfred-mountfield, @alpha-xek, @andarist, @Andarist, @andrii-bodnar, @andykenward, @angel1254mc, @anonrig, @anthonyshew, @AntoineBourin, @anujssstw, @apeltop, @aralroca, @aretrace, @artdevgame, @artechventure, @arturbien, @Aryan9592, @AviAvinav, @aziyatali, @BaffinLee, @Banbarashik, @bencmbrook, @benjie, @bennettdams, @bertho-zero, @bigyanse, @Bitbbot, @blue-devil1134, @bot08, @bottxiang, @Bowens20832, @bre30kra69cs, @BrennanColberg, @brkalow, @BrodaNoel, @Brooooooklyn, @brunoeduardodev, @brvnonascimento, @carlos-menezes, @cassidoo, @cattmote, @cesarkohl, @chanceaclark, @charkour, @charlesbdudley, @chibicode, @chrisipanaque, @ChristianIvicevic, @chriswdmr, @chunsch, @ciruz, @cjmling, @clive-h-townsend, @colinhacks, @colinking, @coreyleelarson, @Cow258, @cprussin, @craigwheeler, @cramforce, @cravend, @cristobaldominguez95, @ctjlewis, @cvolant, @cxa, @danger-ahead, @daniel-web-developer, @danmindru, @dante-robinson, @darshanjain-entrepreneur, @darshkpatel, @davecarlson, @David0z, @davidnx, @dciug, @delbaoliveira, @denchance, @DerTimonius, @devagrawal09, @DevEsteves, @devjiwonchoi, @devknoll, @DevLab2425, @devvspaces, @didemkkaslan, @dijonmusters, @dirheimerb, @djreillo, @dlehmhus, @doinki, @dpnolte, @Drblessing, @dtinth, @ducanhgh, @DuCanhGH, @ductnn, @duncanogle, @dunklesToast, @DustinsCode, @dvakatsiienko, @dvoytenko, @dylanjha, @ecklf, @EndangeredMassa, @eps1lon, @ericfennis, @escwxyz, @Ethan-Arrowood, @ethanmick, @ethomson, @fantaasm, @feikerwu, @ferdingler, @FernandVEYRIER, @feugy, @fgiuliani, @fomichroman, @Fonger, @ForsakenHarmony, @franktronics, @FSaldanha, @fsansalvadore, @furkanmavili, @g12i, @gabschne, @gaojude, @gdborton, @gergelyke, @gfgabrielfranca, @gidgudgod, @Gladowar, @Gnadhi, @gnoff, @goguda, @greatSumini, @gruz0, @Guilleo03, @gustavostz, @hanneslund, @HarshaVardhanReddyDuvvuru, @haschikeks, @Heidar-An, @heyitsuzair, @hiddenest, @hiro0218, @hotters, @hsrvms, @hu0p, @hughlilly, @HurSungYun, @hustLer2k, @iamarpitpatidar, @ianldgs, @ianmacartney, @iaurg, @ibash, @ibrahemid, @idoob, @iiegor, @ikryvorotenko, @imranbarbhuiya, @ingovals, @inokawa, @insik-han, @isaackatayev, @ishaqibrahimbot, @ismaelrumzan, @itsmingjie, @ivanhofer, @IvanKiral, @jacobsfletch, @jakemstar, @jamespearson, @JanCizmar, @janicklas-ralph, @jankaifer, @JanKaifer, @jantimon, @jaredpalmer, @javivelasco, @jayair, @jaykch, @Jeffrey-Zutt, @jenewland1999, @jeremydouglas, @JesseKoldewijn, @jessewarren-aa, @jimcresswell, @jiwooIncludeJeong, @jocarrd, @joefreeman, @JohnAdib, @JohnAlbin, @JohnDaly, @johnnyomair, @johnta0, @joliss, @jomeswang, @joostdecock, @Josehower, @josephcsoti, @josh, @joshuabaker, @JoshuaKGoldberg, @joshuaslate, @joulev, @jsteele-stripe, @JTaylor0196, @JuanM04, @jueungrace, @juliusmarminge, @Juneezee, @Just-Moh-it, @juzhiyuan, @jyunhanlin, @kaguya3222, @karlhorky, @kevinmitch14, @keyz, @kijikunnn, @kikobeats, @Kikobeats, @kleintorres, @koba04, @koenpunt, @koltong, @konomae, @kosai106, @krmeda, @kvnang, @kwonoj, @ky1ejs, @kylemcd, @labyrinthitis, @lachlanjc, @lacymorrow, @laityned, @Lantianyou, @leerob, @leodr, @leoortizz, @li-jia-nan, @loettz, @lorenzobloedow, @lubakravche, @lucasassisrosa, @lucasconstantino, @lucgagan, @LukeSchlangen, @LuudJanssen, @lycuid, @M3kH, @m7yue, @manovotny, @maranomynet, @marcus-rise, @MarDi66, @MarkAtOmniux, @martin-wahlberg, @masnormen, @matepapp, @matthew-heath, @mattpr, @maxleiter, @MaxLeiter, @maxproske, @meenie, @meesvandongen, @mhmdrioaf, @michaeloliverx, @mike-plummer, @MiLk, @milovangudelj, @Mingyu-Song, @mirismaili, @mkcy3, @mknichel, @mltsy, @mmaaaaz, @mnajdova, @moetazaneta, @mohanraj-r, @molebox, @morganfeeney, @motopods, @mPaella, @mrkldshv, @mrxbox98, @nabsul, @nathanhammond, @nbouvrette, @nekochantaiwan, @nfinished, @Nick-Mazuk, @nickmccurdy, @niedziolkamichal, @niko20, @nikolovlazar, @nivak-monarch, @nk980113, @nnnnoel, @nocell, @notrab, @nroland013, @nuta, @nutlope, @obusk, @okcoker, @oliviertassinari, @omarhoumz, @opnay, @orionmiz, @ossan-engineer, @patrick91, @pauek, @peraltafederico, @Phiction, @pn-code, @pyjun01, @pythagoras-yamamoto, @qrohlf, @raisedadead, @reconbot, @reshmi-sriram, @reyrodrigez, @ricardofiorani, @rightones, @riqwan, @rishabhpoddar, @rjsdnql123, @rodrigofeijao, @runjuu, @Ryan-Dia, @ryo-manba, @s0h311, @sagarpreet-xflowpay, @sairajchouhan, @samdenty, @samsisle, @sanjaiyan-dev, @saseungmin, @SCG82, @schehata, @Schniz, @sepiropht, @serkanbektas, @sferadev, @ShaunFerris, @shivanshubisht, @shozibabbas, @silvioprog, @simonswiss, @simPod, @sivtu, @SleeplessOne1917, @smaeda-ks, @sonam-serchan, @SonMooSans, @soonoo, @sophiebits, @souporserious, @sp00ls, @sqve, @sreetamdas, @stafyniaksacha, @starunaway, @steebchen, @stefanprobst, @steppefox, @steven-tey, @suhaotian, @sukkaw, @SukkaW, @superbahbi, @SuttonJack, @svarunid, @swaminator, @swarnava, @syedtaqi95, @taep96, @taylorbryant, @teobler, @Terro216, @theevilhead, @thepatrick00, @therealrinku, @thomasballinger, @thorwebdev, @tibi1220, @tim-hanssen, @timeyoutakeit, @tka5, @tknickman, @tomryanx, @trigaten, @tristndev, @tunamagur0, @tvthatsme, @tyhopp, @tyler-lutz, @UnknownMonk, @v1k1, @valentincostam, @valentinh, @valentinpolitov, @vamcs, @vasucp1207, @vicsantizo, @vinaykulk621, @vincenthongzy, @visshaljagtap, @vladikoff, @wherehows, @WhoAmIRUS, @WilderDev, @Willem-Jaap, @williamli, @wiredacorn, @wiscaksono, @wojtekolek, @ws-jm, @wxh06, @wyattfry, @wyattjoh, @xiaolou86, @y-tsubuku, @yagogmaisp, @yangshun, @yasath, @Yash-Singh1, @yigithanyucedag, @ykzts, @Yovach, @yutsuten, @yyuemii, @zek, @zekicaneksi, @zignis, and @zlrlyy"},
{"source": "https://nextjs.org/blog/next-14-1", "title": "Next.js 14.1", "text": "Thursday, January 18th 2024\nNext.js 14.1\nPosted byNext.js 14.1 includes developer experience improvements including:\n- Improved Self-Hosting: New documentation and custom cache handler\n- Turbopack Improvements: 5,600 tests passing for\nnext dev --turbo\n- DX Improvements: Improved error messages,\npushState\nandreplaceState\nsupport - Parallel & Intercepted Routes: 20 bug fixes based on your feedback\nnext/image\nImprovements:<picture>\n, art direction, and dark mode support\nUpgrade today or get started with:\nnpx create-next-app@latest\nImproved Self-Hosting\nWe've heard your feedback for improved clarity on how to self-host Next.js with a Node.js server, Docker container, or static export. We've overhauled our self-hosting documentation on:\n- Runtime environment variables\n- Custom cache configuration for ISR\n- Custom image optimization\n- Middleware\nWith Next.js 14.1, we've also stabilized providing custom cache handlers for Incremental Static Regeneration and the more granular Data Cache for the App Router:\nmodule.exports = {\ncacheHandler: require.resolve('./cache-handler.js'),\ncacheMaxMemorySize: 0, // disable default in-memory caching\n};\nUsing this configuration when self-hosting is important when using container orchestration platforms like Kubernetes, where each pod will have a copy of the cache. Using a custom cache handler will allow you to ensure consistency across all pods hosting your Next.js application.\nFor instance, you can save the cached values anywhere, like Redis or Memcached. We'd like to thank @neshca\nfor their Redis cache handler adapter and example.\nTurbopack Improvements\nWe're continuing to focus on the reliability and performance of local Next.js development:\n- Reliability: Turbopack passing the entire Next.js development test suite and dogfooding Vercel's applications\n- Performance: Improving Turbopack initial compile times and Fast Refresh times\n- Memory Usage: Improving Turbopack memory usage\nWe plan to stabilize next dev --turbo\nin an upcoming release with it still being opt-in.\nReliability\nNext.js with Turbopack now passes 5,600 development tests (94%), 600 more since the last update. You can follow the progress on areweturboyet.com.\nWe have continued dogfooding next dev --turbo\non all Vercel's Next.js applications, including vercel.com and v0.dev. All engineers working on these applications are using Turbopack daily.\nWe've found and fixed a number of issues for very large Next.js applications using Turbopack. For these fixes, we've added new tests to the existing development test suites in Next.js.\nPerformance\nFor vercel.com\n, a large Next.js application, we've seen:\n- Up to 76.7% faster local server startup\n- Up to 96.3% faster code updates with Fast Refresh\n- Up to 45.8% faster initial route compile without caching (Turbopack does not have disk caching yet)\nIn v0.dev, we identified an opportunity to optimize the way React Client Components are discovered and bundled in Turbopack - resulting in up to 61.5% faster initial compile time. This performance improvement was also observed in vercel.com.\nFuture Improvements\nTurbopack currently has in-memory caching, which improves incremental compilation times for Fast Refresh.\nHowever, the cache is currently not preserved when restarting the Next.js development server. The next big step for Turbopack performance is disk caching, which will allow the cache to be preserved when restating the development server.\nDeveloper Experience Improvements\nImproved Error Messages and Fast Refresh\nWe know how critical clear error messages are to your local development experience. We've made a number of fixes to improve the quality of stack traces and error messages you see when running next dev\n.\n- Errors that previously displayed bundler errors like\nwebpack-internal\nnow properly display the source code of the error and the affected file. - After seeing an error in a client component, and then fixing the error in your editor, the Fast Refresh did not clear the error screen. It required a hard reload. We've fixed a number of these instances. For example, trying to export\nmetadata\nfrom a Client Component.\nFor example, this was a previous error message:\nNext.js 14.1 has improved this to:\nwindow.history.pushState\nand window.history.replaceState\nThe App Router now allows the usage of the native pushState\nand replaceState\nmethods to update the browser's history stack without reloading the page.\npushState\nand replaceState\ncalls integrate into the Next.js App Router, allowing you to sync with usePathname\nand useSearchParams\n.\nThis is helpful when needing to immediately update the URL when saving state like filters, sort order, or other information desired to persist across reloads.\n'use client';\nimport { useSearchParams } from 'next/navigation';\nexport default function SortProducts() {\nconst searchParams = useSearchParams();\nfunction updateSorting(sortOrder: string) {\nconst params = new URLSearchParams(searchParams.toString());\nparams.set('sort', sortOrder);\nwindow.history.pushState(null, '', `?${params.toString()}`);\n}\nreturn (\n<>\n<button onClick={() => updateSorting('asc')}>Sort Ascending</button>\n<button onClick={() => updateSorting('desc')}>Sort Descending</button>\n</>\n);\n}\nLearn more about using the native History API with Next.js.\nData Cache Logging\nFor improved observability of your cached data in your Next.js application when running next dev\n, we've made a number of improvements to the logging\nconfiguration option.\nYou can now display whether there was a cache HIT\nor SKIP\nand the full URL requested:\nGET / 200 in 48ms\n\u2713 Compiled /fetch-cache in 117ms\nGET /fetch-cache 200 in 165ms\n\u2502 GET https://api.vercel.app/products/1 200 in 14ms (cache: HIT)\n\u2713 Compiled /fetch-no-store in 150ms\nGET /fetch-no-store 200 in 548ms\n\u2502 GET https://api.vercel.app/products/1 200 in 345ms (cache: SKIP)\n\u2502 \u2502 Cache missed reason: (cache: no-store)\nThis can be enabled through next.config.js\n:\nmodule.exports = {\nlogging: {\nfetches: {\nfullUrl: true,\n},\n},\n};\nnext/image\nsupport for <picture>\nand Art Direction\nThe Next.js Image component now supports more advanced use cases through getImageProps()\n(stable) which don't require using <Image>\ndirectly. This includes:\n- Working with\nbackground-image\norimage-set\n- Working with canvas\ncontext.drawImage()\nornew Image()\n- Working with\n<picture>\nmedia queries to implement Art Direction or Light/Dark Mode images\nimport { getImageProps } from 'next/image';\nexport default function Page() {\nconst common = { alt: 'Hero', width: 800, height: 400 };\nconst {\nprops: { srcSet: dark },\n} = getImageProps({ ...common, src: '/dark.png' });\nconst {\nprops: { srcSet: light, ...rest },\n} = getImageProps({ ...common, src: '/light.png' });\nreturn (\n<picture>\n<source media=\"(prefers-color-scheme: dark)\" srcSet={dark} />\n<source media=\"(prefers-color-scheme: light)\" srcSet={light} />\n<img {...rest} />\n</picture>\n);\n}\nLearn more about getImageProps()\n.\nParallel & Intercepted Routes\nIn Next.js 14.1, we've made 20 improvements to Parallel & Intercepted Routes.\nFor the past two releases, we've been focused on improving performance and reliability of Next.js. We've now been able to make many improvements to Parallel & Intercepted Routes based on your feedback. Notably, we've added support for catch-all routes and Server Actions.\n- Parallel Routes allow you to simultaneously or conditionally render one or more pages in the same layout. For highly dynamic sections of an app, such as dashboards and feeds on social sites, Parallel Routes can be used to implement complex routing patterns.\n- Intercepted Routes allow you to load a route from another part of your application within the current layout. For example, when clicking on a photo in a feed, you can display the photo in a modal, overlaying the feed. In this case, Next.js intercepts the\n/photo/123\nroute, masks the URL, and overlays it over/feed\n.\nLearn more about Parallel & Intercepted Routes or view an example.\nOther Improvements\nSince 14.0\n, we've fixed a number of highly upvoted bugs from the community.\nWe've also recently published videos explaining caching and some common mistakes with the App Router that you might find helpful.\n- [Docs] New documentation on Redirecting\n- [Docs] New documentation on Testing\n- [Docs] New documentation with a Production Checklist\n- [Feature] Add\n<GoogleAnalytics />\ncomponent tonext/third-parties\n(Docs) - [Improvement]\ncreate-next-app\nis now smaller and faster to install (PR) - [Improvement] Nested routes throwing errors can still be caught be\nglobal-error\n(PR) - [Improvement]\nredirect\nnow respectsbasePath\nwhen used in a server action (PR) - [Improvement] Fix\nnext/script\nandbeforeInteractive\nusage with App Router (PR) - [Improvement] Automatically transpile\n@aws-sdk\nandlodash\nfor faster route startup (PR) - [Improvement] Fix flash of unstyled content with\nnext dev\nandnext/font\n(PR) - [Improvement] Propagate\nnotFound\nerrors past a segment's error boundary (PR) - [Improvement] Fix serving public files from locale domains with Pages Router i18n (PR)\n- [Improvement] Error if an invalidate\nrevalidate\nvalue is passed (PR) - [Improvement] Fix path issues on linux machines when build created on windows (PR)\n- [Improvement] Fix Fast Refresh / HMR when using a multi-zone app with\nbasePath\n(PR) - [Improvement] Improve graceful shutdown from termination signals (PR)\n- [Improvement] Modal routes clash when intercepting from different routes (PR)\n- [Improvement] Fix intercepting routes when using\nbasePath\nconfig (PR) - [Improvement] Show warning when a missing parallel slot results in 404 (PR)\n- [Improvement] Improve intercepted routes when used with catch-all routes (PR)\n- [Improvement] Improve intercepted routes when used with\nrevalidatePath\n(PR) - [Improvement] Fix usage of\n@children\nslots with parallel routes (PR) - [Improvement] Fix Fix TypeError when using params with parallel routes (PR)\n- [Improvement] Fix catch-all route normalization for default parallel routes (PR)\n- [Improvement] Fix display of parallel routes in the\nnext build\nsummary (PR) - [Improvement] Fix for route parameters when using intercepted routes (PR)\n- [Improvement] Improve deeply nested parallel/intercepted routes (PR)\n- [Improvement] Fix 404 with intercepted routes paired with route groups (PR)\n- [Improvement] Fix parallel routes with server actions / revalidating router cache (PR)\n- [Improvement] Fix usage of\nrewrites\nwith an intercepted route (PR) - [Improvement] Server Actions now work from third-party libraries (PR)\n- [Improvement] Next.js can now be used within an ESM package (PR)\n- [Improvement] Barrel file optimizations for libraries like Material UI (PR)\n- [Improvement] Builds will now fail on incorrect usage of\nuseSearchParams\nwithoutSuspense\n(PR)\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers, industry partners like Google and Meta, and our core team at Vercel. Join the community on GitHub Discussions, Reddit, and Discord.\nThis release was brought to you by:\n- The Next.js team: Andrew, Balazs, Jiachi, Jimmy, JJ, Josh, Sebastian, Shu, Steven, Tim, Wyatt, and Zack.\n- The Turbopack team: Donny, Leah, Maia, OJ, Tobias, and Will.\n- Next.js Docs: Delba, Steph, Michael, and Lee.\nAnd the contributions of: @OlehDutchenko, @eps1lon, @ebidel, @janicklas-ralph, @JohnPhamous, @chentsulin, @akawalsky, @BlankParticle, @dvoytenko, @smaeda-ks, @kenji-webdev, @rv-david, @icyJoseph, @dijonmusters, @A7med3bdulBaset, @jenewland1999, @mknichel, @kdy1, @housseindjirdeh, @max-programming, @redbmk, @SSakibHossain10, @jamesmillerburgess, @minaelee, @officialrajdeepsingh, @LorisSigrist, @yesl-kim, @StevenKamwaza, @manovotny, @mcexit, @remcohaszing, @ryo-manba, @TranquilMarmot, @vinaykulk621, @haritssr, @divquan, @IgorVaryvoda, @LukeSchlangen, @RiskyMH, @ash2048, @ManuWeb3, @msgadi, @dhayab, @ShahriarKh, @jvandenaardweg, @DestroyerXyz, @SwitchBladeAK, @ianmacartney, @justinh00k, @tiborsaas, @ArianHamdi, @li-jia-nan, @aramikuto, @jquinc30, @samcx, @Haosik, @AkifumiSato, @arnabsen, @nfroidure, @clbn, @siddtheone, @zbauman3, @anthonyshew, @alexfradiani, @CalebBarnes, @adk96r, @pacexy, @hichemfantar, @michaldudak, @redonkulus, @k-taro56, @mhughdo, @tknickman, @shumakmanohar, @vordgi, @hamirmahal, @gaspar09, @JCharante, @sjoerdvanBommel, @mass2527, @N-Ziermann, @tordans, @davidthorand, @rmathew8-gh, @chriskrogh, @shogunsea, @auipga, @SukkaW, @agustints, @OXXD, @clarencepenz, @better-salmon, @808vita, @coltonehrman, @tksst, @hugo-syn, @JakobJingleheimer, @Willem-Jaap, @brandonnorsworthy, @jaehunn, @jridgewell, @gtjamesa, @mugi-uno, @kentobento, @vivianyentran, @empflow, @samennis1, @mkcy3, @suhaotian, @imevanc, @d3lm, @amannn, @hallatore, @Dylan700, @mpsq, @mdio, @christianvuerings, @karlhorky, @simonhaenisch, @olci34, @zce, @LavaToaster, @rishabhpoddar, @jirihofman, @codercor, @devjiwonchoi, @JackieLi565, @thoushif, @pkellner, @jpfifer, @quisido, @tomfa, @raphaelbadia, @j9141997, @hongaar, @MadCcc, @luismulinari, @dumb-programmer, @nonoakij, @franky47, @robbertstevens, @bryndyment, @marcosmartini, @functino, @Anisi, @AdonisAgelis, @seangray-dev, @prkagrawal, @heloineto, @kn327, @ihommani, @MrNiceRicee, @falsepopsky, @thomasballinger, @tmilewski, @Vadman97, @dnhn, @RodrigoTomeES, @sadikkuzu, @gffuma, @Schniz, @joulev, @Athrun-Judah, @rasvanjaya21, @rashidul0405, @nguyenbry, @Mwimwii, @molebox, @mrr11k, @philwolstenholme, @IgorKowalczyk, @Zoe-Bot, @HanCiHu, @JackHowa, @goncy, @hirotomoyamada, @pveyes, @yeskunall, @ChendayUP, @hmaesta, @ajz003, @its-kunal, @joelhooks, @blurrah, @tariknh, @Vinlock, @Nayeem-XTREME, @aziyatali, @aspehler, and @moka-ayumu."},
{"source": "https://nextjs.org/blog/next-14-2", "title": "Next.js 14.2", "text": "Thursday, April 11th 2024\nNext.js 14.2\nPosted byNext.js 14.2 includes development, production, and caching improvements.\n- Turbopack for Development (Release Candidate): 99.8% tests passing for\nnext dev --turbo\n. - Build and Production Improvements: Reduced build memory usage and CSS optimizations.\n- Caching Improvements: Configurable invalidation periods with\nstaleTimes\n. - Error DX Improvements: Better hydration mismatch errors and design updates.\nUpgrade today or get started with:\nnpx create-next-app@latest\nTurbopack for Development (Release Candidate)\nOver the past few months, we\u2019ve been working on improving local development performance with Turbopack. In version 14.2, the Turbopack Release Candidate is now available for local development:\n- 99.8% of integrations tests are now passing.\n- We\u2019ve verified the top 300\nnpm\npackages used in Next.js applications can compile with Turbopack. - All Next.js examples work with Turbopack.\n- We\u2019ve integrated Lightning CSS, a fast CSS bundler and minifier, written in Rust.\nWe\u2019ve been extensively dogfooding Turbopack with Vercel\u2019s applications. For example, with vercel.com\n, a large Next.js app, we've seen:\n- Up to 76.7% faster local server startup.\n- Up to 96.3% faster code updates with Fast Refresh.\n- Up to 45.8% faster initial route compile without caching (Turbopack does not have disk caching yet).\nTurbopack continues to be opt-in and you can try it out with:\nnext dev --turbo\nWe will now be focusing on improving memory usage, implementing persistent caching, and next build --turbo\n.\n- Memory Usage - We\u2019ve built low-level tools for investigating memory usage. You can now generate traces that include both performance metrics and broad memory usage information. These traces allows us to investigate performance and memory usage without needing access to your application\u2019s source code.\n- Persistent Caching - We\u2019re also exploring the best architecture options, and we\u2019re expecting to share more details in a future release.\nnext build\n- While Turbopack is not available for builds yet, 74.7% of tests are already passing. You can follow the progress at areweturboyet.com/build.\nTo see a list of supported and unsupported features in Turbopack, please refer to our documentation.\nBuild and Production Improvements\nIn addition to bundling improvements with Turbopack, we\u2019ve worked to improve overall build and production performance for all Next.js applications (both Pages and App Router).\nTree-shaking\nWe identified an optimization for the boundary between Server and Client Components that allows for tree-shaking unused exports. For example, importing a single Icon\ncomponent from a file that has \"use client\"\nno longer includes all the other icons from that package. This can largely reduce the production JavaScript bundle size.\nTesting this optimization on a popular library like react-aria-components\nreduced the final bundle size by -51.3%.\nNote: This optimization does not currently work with barrel files. In the meantime, you can use the\noptimizePackageImports\nconfig option:next.config.tsmodule.exports = { experimental: { optimizePackageImports: ['package-name'], }, };\nBuild Memory Usage\nFor extremely large-scale Next.js applications, we noticed out-of-memory crashes (OOMs) during production builds. After investigating user reports and reproductions, we identified the root issue was over-bundling and minification (Next.js created fewer, larger JavaScript files with duplication). We\u2019ve refactored the bundling logic and optimized the compiler for these cases.\nOur early tests show that on a minimal Next.js app, memory usage and cache file size decreased from 2.2GB to under 190MB on average.\nTo make it easier to debug memory performance, we\u2019ve introduced a --experimental-debug-memory-usage\nflag to next build\n. Learn more in our documentation.\nCSS\nWe updated how CSS is optimized during production Next.js builds by chunking CSS to avoid conflicting styles when you navigate between pages.\nThe order and merging of CSS chunks are now defined by the import order. For example, base-button.module.css\nwill be ordered before page.module.css\n:\nimport styles from './base-button.module.css';\nexport function BaseButton() {\nreturn <button className={styles.primary} />;\n}\nimport { BaseButton } from './base-button';\nimport styles from './page.module.css';\nexport function Page() {\nreturn <BaseButton className={styles.primary} />;\n}\nTo maintain the correct CSS order, we recommend:\n- Using CSS Modules over global styles.\n- Only import a CSS Module in a single JS/TS file.\n- If using global class names, import the global styles in the same JS/TS too.\nWe don\u2019t expect this change to negatively impact the majority of applications. However, if you see any unexpected styles when upgrading, please review your CSS import order as per the recommendations in our documentation.\nCaching Improvements\nCaching is a critical part of building fast and reliable web applications. When performing mutations, both users and developers expect the cache to be updated to reflect the latest changes. We've been exploring how to improve the Next.js caching experience in the App Router.\nstaleTimes\n(Experimental)\nThe Client-side Router Cache is a caching layer designed to provide a fast navigation experience by caching visited and prefetched routes on the client.\nBased on community feedback, we\u2019ve added an experimental staleTimes\noption to allow the client-side router cache invalidation period to be configured.\nBy default, prefetched routes (using the <Link>\ncomponent without the prefetch\nprop) will be cached for 30 seconds, and if the prefetch\nprop is set to true\n, 5 minutes. You can overwrite these default values by defining custom revalidation times in next.config.js\n:\nconst nextConfig = {\nexperimental: {\nstaleTimes: {\ndynamic: 30,\nstatic: 180,\n},\n},\n};\nmodule.exports = nextConfig;\nstaleTimes\naims to improve the current experience of users who want more control over caching heuristics, but it is not intended to be the complete solution. In upcoming releases, we will focus on improving the overall caching semantics and providing more flexible solutions.\nLearn more about staleTimes\nin our documentation.\nParallel and Intercepting Routes\nWe are continuing to iterate on on Parallel and Intercepting Routes, now improving the integration with the Client-side Router Cache.\n- Parallel and Intercepting routes that invoke Server Actions with\nrevalidatePath\norrevalidateTag\nwill revalidate the cache and refresh the visible slots while maintaining the user\u2019s current view. - Similarly, calling\nrouter.refresh\nnow correctly refreshes visible slots, maintaining the current view.\nErrors DX Improvements\nIn version 14.1, we started working on improving the readability of error messages and stack traces when running next dev\n. This work has continued into 14.2 to now include better error messages, overlay design improvements for both App Router and Pages Router, light and dark mode support, and clearer dev\nand build\nlogs.\nFor example, React Hydration errors are a common source of confusion in our community. While we made improvements to help users pinpoint the source of hydration mismatches (see below), we're working with the React team to improve the underlying error messages and show the file name where the error occurred.\nBefore:\nAfter:\nReact 19\nIn February, the React team announced the upcoming release of React 19. To prepare for React 19, we're working on integrating the latest features and improvements into Next.js, and plan on releasing a major version to orchestrate these changes.\nNew features like Actions and their related hooks, which have been available within Next.js from the React canary channel, will now all be available for all React applications (including client-only applications). We're excited to see wider adoption of these features in the React ecosystem.\nOther Improvements\n- [Docs] New documentation on Video Optimization (PR).\n- [Docs] New documentation on\ninstrumentation.ts\n(PR) - [Feature] New\noverrideSrc\nprop fornext/image\n(PR). - [Feature] New\nrevalidateReason\nargument togetStaticProps\n(PR). - [Improvement] Refactored streaming logic, reducing the time to stream pages in production (PR).\n- [Improvement] Support for nested Server Actions (PR).\n- [Improvement] Support for localization in generated Sitemaps (PR).\n- [Improvement] Visual improvements to dev and build logs (PR)\n- [Improvement] Skew protection is stable on Vercel (Docs).\n- [Improvement] Make\nuseSelectedLayoutSegment\ncompatible with the Pages Router (PR). - [Improvement] Skip\nmetadataBase\nwarnings when absolute URLs don\u2019t need to be resolved (PR). - [Improvement] Fix Server Actions not submitting without JavaScript enabled when deployed to Vercel (PR)\n- [Improvement] Fix error about a Server Action not being found in the actions manifest if triggered after navigating away from referring page, or if used inside of an inactive parallel route segment (PR)\n- [Improvement] Fix CSS imports in components loaded by\nnext/dynamic\n(PR). - [Improvement] Warn when animated image is missing\nunoptimized\nprop (PR). - [Improvement] Show an error message if\nimages.loaderFile\ndoesn't export a default function (PR)\nCommunity\nNext.js now has over 1 million monthly active developers. We're grateful for the community's support and contributions. Join the conversation on GitHub Discussions, Reddit, and Discord.\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers, industry partners like Google and Meta, and our core team at Vercel. This release was brought to you by:\n- The Next.js team: Andrew, Balazs, Ethan, Janka, Jiachi, Jimmy, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Steven, Tim, Wyatt, and Zack.\n- The Turbopack team: Donny, Leah, Maia, OJ, Tobias, and Will.\n- Next.js Docs: Delba, Steph, Michael, Anthony, and Lee.\nHuge thanks to @taishikato, @JesseKoldewijn, @Evavic44, @feugy, @liamlaverty, @dvoytenko, @SukkaW, @wbinnssmith, @rishabhpoddar, @better-salmon, @ziyafenn, @A7med3bdulBaset, @jasonuc, @yossydev, @Prachi-meon, @InfiniteCodeMonkeys, @ForsakenHarmony, @miketimmerman, @kwonoj, @williamli, @gnoff, @jsteele-stripe, @chungweileong94, @WITS, @sogoagain, @junioryono, @eisafaqiri, @yannbolliger, @aramikuto, @rocketman-21, @kenji-webdev, @michaelpeterswa, @Dannymx, @vpaflah, @zeevo, @chrisweb, @stefangeneralao, @tknickman, @Kikobeats, @ubinatus, @code-haseeb, @hmmChase, @byhow, @DanielRivers, @wojtekmaj, @paramoshkinandrew, @OMikkel, @theitaliandev, @oliviertassinari, @Ishaan2053, @Sandeep-Mani, @alyahmedaly, @Lezzio, @devjiwonchoi, @juliusmarminge, @szmazhr, @eddiejaoude, @itz-Me-Pj, @AndersDJohnson, @gentamura, @tills13, @dijonmusters, @SaiGanesh21, @vordgi, @ryota-murakami, @tszhong0411, @officialrajdeepsingh, @alexpuertasr, @AkifumiSato, @Jonas-PFX, @icyJoseph, @florian-lp, @pbzona, @erfanium, @remcohaszing, @bernardobelchior, @willashe, @kevinmitch14, @smakosh, @mnjongerius, @asobirov, @theoholl, @suu3, @ArianHamdi, @adrianha, @Sina-Abf, @kuzeykose, @meenie, @nphmuller, @javivelasco, @belgattitude, @Svetoslav99, @johnslemmer, @colbyfayock, @mehranmf31, @m-nakamura145, @ryo8000, @aryaemami59, @bestlyg, @jinsoul75, @petrovmiroslav, @nattui, @zhuyedev, @dongwonnn, @nhducit, @flotwig, @Schmavery, @abhinaypandey02, @rvetere, @coffeecupjapan, @cjimmy, @Soheiljafarnejad, @jantimon, @zengspr, @wesbos, @neomad1337, @MaxLeiter, and @devr77 for helping!"},
{"source": "https://nextjs.org/blog/next-15", "title": "Next.js 15", "text": "Monday, October 21st 2024\nNext.js 15\nPosted byNext.js 15 is officially stable and ready for production. This release builds on the updates from both RC1 and RC2. We've focused heavily on stability while adding some exciting updates we think you'll love. Try Next.js 15 today:\n# Use the new automated upgrade CLI\nnpx @next/codemod@canary upgrade latest\n# ...or upgrade manually\nnpm install next@latest react@rc react-dom@rc\nWe're also excited to share more about what's coming next at Next.js Conf this Thursday, October 24th.\nHere's what is new in Next.js 15:\n@next/codemod\nCLI: Easily upgrade to the latest Next.js and React versions.- Async Request APIs (Breaking): Incremental step towards a simplified rendering and caching model.\n- Caching Semantics (Breaking):\nfetch\nrequests,GET\nRoute Handlers, and client navigations are no longer cached by default. - React 19 Support: Support for React 19, React Compiler (Experimental), and hydration error improvements.\n- Turbopack Dev (Stable): Performance and stability improvements.\n- Static Indicator: New visual indicator shows static routes during development.\nunstable_after\nAPI (Experimental): Execute code after a response finishes streaming.instrumentation.js\nAPI (Stable): New API for server lifecycle observability.- Enhanced Forms (\nnext/form\n): Enhance HTML forms with client-side navigation. next.config\n: TypeScript support fornext.config.ts\n.- Self-hosting Improvements: More control over\nCache-Control\nheaders. - Server Actions Security: Unguessable endpoints and removal of unused actions.\n- Bundling External Packages (Stable): New config options for App and Pages Router.\n- ESLint 9 Support: Added support for ESLint 9.\n- Development and Build Performance: Improved build times and Faster Fast Refresh.\nSmooth upgrades with @next/codemod\nCLI\nWe include codemods (automated code transformations) with every major Next.js release to help automate upgrading breaking changes.\nTo make upgrades even smoother, we've released an enhanced codemod CLI:\nnpx @next/codemod@canary upgrade latest\nThis tool helps you upgrade your codebase to the latest stable or prerelease versions. The CLI will update your dependencies, show available codemods, and guide you through applying them.\nThe canary\ntag uses the latest version of the codemod while the latest specifies the Next.js version. We recommend using the canary version of the codemod even if you are upgrading to the latest Next.js version, as we plan to continue adding improvements to the tool based on your feedback.\nLearn more about Next.js codemod CLI.\nAsync Request APIs (Breaking Change)\nIn traditional Server-Side Rendering, the server waits for a request before rendering any content. However, not all components depend on request-specific data, so it's unnecessary to wait for the request to render them. Ideally, the server would prepare as much as possible before a request arrives. To enable this, and set the stage for future optimizations, we need to know when to wait for the request.\nTherefore, we are transitioning APIs that rely on request-specific data\u2014such as headers\n, cookies\n, params\n, and searchParams\n\u2014to be asynchronous.\nimport { cookies } from 'next/headers';\nexport async function AdminPanel() {\nconst cookieStore = await cookies();\nconst token = cookieStore.get('token');\n// ...\n}\nThis is a breaking change and affects the following APIs:\ncookies\nheaders\ndraftMode\nparams\ninlayout.js\n,page.js\n,route.js\n,default.js\n,generateMetadata\n, andgenerateViewport\nsearchParams\ninpage.js\nFor an easier migration, these APIs can temporarily be accessed synchronously, but will show warnings in development and production until the next major version. A codemod is available to automate the migration:\nnpx @next/codemod@canary next-async-request-api .\nFor cases where the codemod can't fully migrate your code, please read the upgrade guide. We have also provided an example of how to migrate a Next.js application to the new APIs.\nCaching Semantics\nNext.js App Router launched with opinionated caching defaults. These were designed to provide the most performant option by default with the ability to opt out when required.\nBased on your feedback, we re-evaluated our caching heuristics and how they would interact with projects like Partial Prerendering (PPR) and with third party libraries using fetch\n.\nWith Next.js 15, we're changing the caching default for GET\nRoute Handlers and the Client Router Cache from cached by default to uncached by default. If you want to retain the previous behavior, you can continue to opt-into caching.\nWe're continuing to improve caching in Next.js in the coming months and we'll share more details soon.\nGET\nRoute Handlers are no longer cached by default\nIn Next 14, Route Handlers that used the GET\nHTTP method were cached by default unless they used a dynamic function or dynamic config option. In Next.js 15, GET\nfunctions are not cached by default.\nYou can still opt into caching using a static route config option such as export dynamic = 'force-static'\n.\nSpecial Route Handlers like sitemap.ts\n, opengraph-image.tsx\n, and icon.tsx\n, and other metadata files remain static by default unless they use dynamic functions or dynamic config options.\nClient Router Cache no longer caches Page components by default\nIn Next.js 14.2.0, we introduced an experimental staleTimes\nflag to allow custom configuration of the Router Cache.\nIn Next.js 15, this flag still remains accessible, but we are changing the default behavior to have a staleTime\nof 0\nfor Page segments. This means that as you navigate around your app, the client will always reflect the latest data from the Page component(s) that become active as part of the navigation. However, there are still important behaviors that remain unchanged:\n- Shared layout data won't be refetched from the server to continue to support partial rendering.\n- Back/forward navigation will still restore from cache to ensure the browser can restore scroll position.\nloading.js\nwill remain cached for 5 minutes (or the value of thestaleTimes.static\nconfiguration).\nYou can opt into the previous Client Router Cache behavior by setting the following configuration:\nconst nextConfig = {\nexperimental: {\nstaleTimes: {\ndynamic: 30,\n},\n},\n};\nexport default nextConfig;\nReact 19\nAs part of the Next.js 15 release, we've made the decision to align with the upcoming release of React 19.\nIn version 15, the App Router uses React 19 RC, and we've also introduced backwards compatibility for React 18 with the Pages Router based on community feedback. If you're using the Pages Router, this allows you to upgrade to React 19 when ready.\nAlthough React 19 is still in the RC phase, our extensive testing across real-world applications and our close work with the React team have given us confidence in its stability. The core breaking changes have been well-tested and won't affect existing App Router users. Therefore, we've decided to release Next.js 15 as stable now, so your projects are fully prepared for React 19 GA.\nTo ensure the transition is as smooth as possible, we've provided codemods and automated tools to help ease the migration process.\nRead the Next.js 15 upgrade guide, the React 19 upgrade guide, and watch the React Conf Keynote to learn more.\nPages Router on React 18\nNext.js 15 maintains backward compatibility for the Pages Router with React 18, allowing users to continue using React 18 while benefiting from improvements in Next.js 15.\nSince the first Release Candidate (RC1), we've shifted our focus to include support for React 18 based on community feedback. This flexibility enables you to adopt Next.js 15 while using the Pages Router with React 18, giving you greater control over your upgrade path.\nNote: While it is possible to run the Pages Router on React 18 and the App Router on React 19 in the same application, we don't recommend this setup. Doing so could result in unpredictable behavior and typings inconsistencies, as the underlying APIs and rendering logic between the two versions may not fully align.\nReact Compiler (Experimental)\nThe React Compiler is a new experimental compiler created by the React team at Meta. The compiler understands your code at a deep level through its understanding of plain JavaScript semantics and the Rules of React, which allows it to add automatic optimizations to your code. The compiler reduces the amount of manual memoization developers have to do through APIs such as useMemo\nand useCallback\n- making code simpler, easier to maintain, and less error prone.\nWith Next.js 15, we've added support for the React Compiler. Learn more about the React Compiler, and the available Next.js config options.\nNote: The React Compiler is currently only available as a Babel plugin, which will result in slower development and build times.\nHydration error improvements\nNext.js 14.1 made improvements to error messages and hydration errors. Next.js 15 continues to build on those by adding an improved hydration error view. Hydration errors now display the source code of the error with suggestions on how to address the issue.\nFor example, this was a previous hydration error message in Next.js 14.1:\nNext.js 15 has improved this to:\nTurbopack Dev\nWe are happy to announce that next dev --turbo\nis now stable and ready to speed up your development experience. We've been using it to iterate on vercel.com, nextjs.org, v0, and all of our other applications with great results.\nFor example, with vercel.com\n, a large Next.js app, we've seen:\n- Up to 76.7% faster local server startup.\n- Up to 96.3% faster code updates with Fast Refresh.\n- Up to 45.8% faster initial route compile without caching (Turbopack does not have disk caching yet).\nYou can learn more about Turbopack Dev in our new blog post.\nStatic Route Indicator\nNext.js now displays a Static Route Indicator during development to help you identify which routes are static or dynamic. This visual cue makes it easier to optimize performance by understanding how your pages are rendered.\nYou can also use the next build output to view the rendering strategy for all routes.\nThis update is part of our ongoing efforts to enhance observability in Next.js, making it easier for developers to monitor, debug, and optimize their applications. We're also working on dedicated developer tools, with more details to come soon.\nLearn more about the Static Route Indicator, which can be disabled.\nExecuting code after a response with unstable_after\n(Experimental)\nWhen processing a user request, the server typically performs tasks directly related to computing the response. However, you may need to perform tasks such as logging, analytics, and other external system synchronization.\nSince these tasks are not directly related to the response, the user should not have to wait for them to complete. Deferring the work after responding to the user poses a challenge because serverless functions stop computation immediately after the response is closed.\nafter()\nis a new experimental API that solves this problem by allowing you to schedule work to be processed after the response has finished streaming, enabling secondary tasks to run without blocking the primary response.\nTo use it, add experimental.after\nto next.config.js\n:\nconst nextConfig = {\nexperimental: {\nafter: true,\n},\n};\nexport default nextConfig;\nThen, import the function in Server Components, Server Actions, Route Handlers, or Middleware.\nimport { unstable_after as after } from 'next/server';\nimport { log } from '@/app/utils';\nexport default function Layout({ children }) {\n// Secondary task\nafter(() => {\nlog();\n});\n// Primary task\nreturn <>{children}</>;\n}\nLearn more about unstable_after\n.\ninstrumentation.js\n(Stable)\nThe instrumentation\nfile, with the register()\nAPI, allows users to tap into the Next.js server lifecycle to monitor performance, track the source of errors, and deeply integrate with observability libraries like OpenTelemetry.\nThis feature is now stable and the experimental.instrumentationHook\nconfig option can be removed.\nIn addition, we've collaborated with Sentry on designing a new onRequestError\nhook that can be used to:\n- Capture important context about all errors thrown on the server, including:\n- Router: Pages Router or App Router\n- Server context: Server Component, Server Action, Route Handler, or Middleware\n- Report the errors to your favorite observability provider.\nexport async function onRequestError(err, request, context) {\nawait fetch('https://...', {\nmethod: 'POST',\nbody: JSON.stringify({ message: err.message, request, context }),\nheaders: { 'Content-Type': 'application/json' },\n});\n}\nexport async function register() {\n// init your favorite observability provider SDK\n}\nLearn more about the onRequestError\nfunction.\n<Form>\nComponent\nThe new <Form>\ncomponent extends the HTML <form>\nelement with prefetching, client-side navigation, and progressive enhancement.\nIt is useful for forms that navigate to a new page, such as a search form that leads to a results page.\nimport Form from 'next/form';\nexport default function Page() {\nreturn (\n<Form action=\"/search\">\n<input name=\"query\" />\n<button type=\"submit\">Submit</button>\n</Form>\n);\n}\nThe <Form>\ncomponent comes with:\n- Prefetching: When the form is in view, the layout and loading UI are prefetched, making navigation fast.\n- Client-side Navigation: On submission, shared layouts and client-side state are preserved.\n- Progressive Enhancement: If JavaScript hasn't loaded yet, the form still works via full-page navigation.\nPreviously, achieving these features required a lot of manual boilerplate. For example:\nExample\n// Note: This is abbreviated for demonstration purposes.\n// Not recommended for use in production code.\n'use client'\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nexport default function Form(props) {\nconst action = props.action\nconst router = useRouter()\nuseEffect(() => {\n// if form target is a URL, prefetch it\nif (typeof action === 'string') {\nrouter.prefetch(action)\n}\n}, [action, router])\nfunction onSubmit(event) {\nevent.preventDefault()\n// grab all of the form fields and trigger a `router.push` with the data URL encoded\nconst formData = new FormData(event.currentTarget)\nconst data = new URLSearchParams()\nfor (const [name, value] of formData) {\ndata.append(name, value as string)\n}\nrouter.push(`${action}?${data.toString()}`)\n}\nif (typeof action === 'string') {\nreturn <form onSubmit={onSubmit} {...props} />\n}\nreturn <form {...props} />\n}\nLearn more about the <Form>\nComponent.\nSupport for next.config.ts\nNext.js now supports the TypeScript next.config.ts\nfile type and provides a NextConfig\ntype for autocomplete and type-safe options:\nimport type { NextConfig } from 'next';\nconst nextConfig: NextConfig = {\n/* config options here */\n};\nexport default nextConfig;\nLearn more about TypeScript support in Next.js.\nImprovements for self-hosting\nWhen self-hosting applications, you may need more control over Cache-Control\ndirectives.\nOne common case is controlling the stale-while-revalidate\nperiod sent for ISR pages. We've implemented two improvements:\n- You can now configure the\nexpireTime\nvalue innext.config\n. This was previously theexperimental.swrDelta\noption. - Updated the default value to one year, ensuring most CDNs can fully apply the\nstale-while-revalidate\nsemantics as intended.\nWe also no longer override custom Cache-Control\nvalues with our default values, allowing full control and ensuring compatibility with any CDN setup.\nFinally, we've improved image optimization when self-hosting. Previously, we recommended you install sharp\nfor optimizing images on your Next.js server. This recommendation was sometimes missed. With Next.js 15, you no longer need to manually install sharp\n\u2014 Next.js will use sharp\nautomatically when using next start\nor running with standalone output mode.\nTo learn more, see our new demo and tutorial video on self-hosting Next.js.\nEnhanced Security for Server Actions\nServer Actions are server-side functions that can be called from the client. They are defined by adding the 'use server'\ndirective at the top of a file and exporting an async function.\nEven if a Server Action or utility function is not imported elsewhere in your code, it's still a publicly accessible HTTP endpoint. While this behavior is technically correct, it can lead to unintentional exposure of such functions.\nTo improve security, we've introduced the following enhancements:\n- Dead code elimination: Unused Server Actions won't have their IDs exposed to the client-side JavaScript bundle, reducing bundle size and improving performance.\n- Secure action IDs: Next.js now creates unguessable, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.\n// app/actions.js\n'use server';\n// This action **is** used in our application, so Next.js\n// will create a secure ID to allow the client to reference\n// and call the Server Action.\nexport async function updateUserAction(formData) {}\n// This action **is not** used in our application, so Next.js\n// will automatically remove this code during `next build`\n// and will not create a public endpoint.\nexport async function deleteUserAction(formData) {}\nYou should still treat Server Actions as public HTTP endpoints. Learn more about securing Server Actions.\nOptimizing bundling of external packages (Stable)\nBundling external packages can improve the cold start performance of your application. In the App Router, external packages are bundled by default, and you can opt-out specific packages using the new serverExternalPackages\nconfig option.\nIn the Pages Router, external packages are not bundled by default, but you can provide a list of packages to bundle using the existing transpilePackages\noption. With this configuration option, you need to specify each package.\nTo unify configuration between App and Pages Router, we're introducing a new option, bundlePagesRouterDependencies\nto match the default automatic bundling of the App Router. You can then use serverExternalPackages\nto opt-out specific packages, if needed.\nconst nextConfig = {\n// Automatically bundle external packages in the Pages Router:\nbundlePagesRouterDependencies: true,\n// Opt specific packages out of bundling for both App and Pages Router:\nserverExternalPackages: ['package-name'],\n};\nexport default nextConfig;\nLearn more about optimizing external packages.\nESLint 9 Support\nNext.js 15 also introduces support for ESLint 9, following the end-of-life for ESLint 8 on October 5, 2024.\nTo ensure a smooth transition, Next.js remain backwards compatible, meaning you can continue using either ESLint 8 or 9.\nIf you upgrade to ESLint 9, and we detect that you haven't yet adopted the new config format, Next.js will automatically apply the ESLINT_USE_FLAT_CONFIG=false\nescape hatch to ease migration.\nAdditionally, deprecated options like \u2014ext\nand \u2014ignore-path\nwill be removed when running next lint\n. Please note that ESLint will eventually disallow these older configurations in ESLint 10, so we recommend starting your migration soon.\nFor more details on these changes, check out the migration guide.\nAs part of this update, we've also upgraded eslint-plugin-react-hooks\nto v5.0.0\n, which introduces new rules for React Hooks usage. You can review all changes in the changelog for eslint-plugin-react-hooks@5.0.0.\nDevelopment and Build Improvements\nServer Components HMR\nDuring development, Server components are re-executed when saved. This means, any fetch\nrequests to your API endpoints or third-party services are also called.\nTo improve local development performance and reduce potential costs for billed API calls, we now ensure Hot Module Replacement (HMR) can re-use fetch\nresponses from previous renders.\nLearn more about the Server Components HMR Cache.\nFaster Static Generation for the App Router\nWe've optimized static generation to improve build times, especially for pages with slow network requests.\nPreviously, our static optimization process rendered pages twice\u2014once to generate data for client-side navigation and a second time to render the HTML for the initial page visit. Now, we reuse the first render, cutting out the second pass, reducing workload and build times.\nAdditionally, static generation workers now share the fetch\ncache across pages. If a fetch\ncall doesn't opt out of caching, its results are reused by other pages handled by the same worker. This reduces the number of requests for the same data.\nAdvanced Static Generation Control (Experimental)\nWe've added experimental support for more control over the static generation process for advanced use cases that would benefit from greater control.\nWe recommend sticking to the current defaults unless you have specific requirements as these options can lead to increased resource usage and potential out-of-memory errors due to increased concurrency.\nconst nextConfig = {\nexperimental: {\n// how many times Next.js will retry failed page generation attempts\n// before failing the build\nstaticGenerationRetryCount: 1\n// how many pages will be processed per worker\nstaticGenerationMaxConcurrency: 8\n// the minimum number of pages before spinning up a new export worker\nstaticGenerationMinPagesPerWorker: 25\n},\n}\nexport default nextConfig;\nLearn more about the Static Generation options.\nOther Changes\n- [Breaking] next/image: Removed\nsquoosh\nin favor ofsharp\nas an optional dependency (PR) - [Breaking] next/image: Changed default\nContent-Disposition\ntoattachment\n(PR) - [Breaking] next/image: Error when\nsrc\nhas leading or trailing spaces (PR) - [Breaking] Middleware: Apply\nreact-server\ncondition to limit unrecommended React API imports (PR) - [Breaking] next/font: Removed support for external\n@next/font\npackage (PR) - [Breaking] next/font: Removed\nfont-family\nhashing (PR) - [Breaking] Caching:\nforce-dynamic\nwill now set ano-store\ndefault to the fetch cache (PR) - [Breaking] Config: Enable\nswcMinify\n(PR),missingSuspenseWithCSRBailout\n(PR), andoutputFileTracing\n(PR) behavior by default and remove deprecated options - [Breaking] Remove auto-instrumentation for Speed Insights (must now use the dedicated @vercel/speed-insights package) (PR)\n- [Breaking] Remove\n.xml\nextension for dynamic sitemap routes and align sitemap URLs between development and production (PR) - [Breaking] We've deprecated exporting\nexport const runtime = \"experimental-edge\"\nin the App Router. Users should now switch toexport const runtime = \"edge\"\n. We've added a codemod to perform this (PR) - [Breaking] Calling\nrevalidateTag\nandrevalidatePath\nduring render will now throw an error (PR) - [Breaking] The\ninstrumentation.js\nandmiddleware.js\nfiles will now use the vendored React packages (PR) - [Breaking] The minimum required Node.js version has been updated to 18.18.0 (PR)\n- [Breaking]\nnext/dynamic\n: the deprecatedsuspense\nprop has been removed and when the component is used in the App Router, it won't insert an empty Suspense boundary anymore (PR) - [Breaking] When resolving modules on the Edge Runtime, the\nworker\nmodule condition will not be applied (PR) - [Breaking] Disallow using\nssr: false\noption withnext/dynamic\nin Server Components (PR) - [Improvement] Metadata: Updated environment variable fallbacks for\nmetadataBase\nwhen hosted on Vercel (PR) - [Improvement] Fix tree-shaking with mixed namespace and named imports from\noptimizePackageImports\n(PR) - [Improvement] Parallel Routes: Provide unmatched catch-all routes with all known params (PR)\n- [Improvement] Config\nbundlePagesExternals\nis now stable and renamed tobundlePagesRouterDependencies\n- [Improvement] Config\nserverComponentsExternalPackages\nis now stable and renamed toserverExternalPackages\n- [Improvement] create-next-app: New projects ignore all\n.env\nfiles by default (PR) - [Improvement] The\noutputFileTracingRoot\n,outputFileTracingIncludes\nandoutputFileTracingExcludes\nhave been upgraded from experimental and are now stable (PR) - [Improvement] Avoid merging global CSS files with CSS module files deeper in the tree (PR)\n- [Improvement] The cache handler can be specified via the\nNEXT_CACHE_HANDLER_PATH\nenvironment variable (PR) - [Improvement] The Pages Router now supports both React 18 and React 19 (PR)\n- [Improvement] The Error Overlay now displays a button to copy the Node.js Inspector URL if the inspector is enabled (PR)\n- [Improvement] Client prefetches on the App Router now use the\npriority\nattribute (PR) - [Improvement] Next.js now provides an\nunstable_rethrow\nfunction to rethrow Next.js internal errors in the App Router (PR) - [Improvement]\nunstable_after\ncan now be used in static pages (PR) - [Improvement] If a\nnext/dynamic\ncomponent is used during SSR, the chunk will be prefetched (PR) - [Improvement] The\nesmExternals\noption is now supported on the App Router (PR) - [Improvement] The\nexperimental.allowDevelopmentBuild\noption can be used to allowNODE_ENV=development\nwithnext build\nfor debugging purposes (PR) - [Improvement] The Server Action transforms are now disabled in the Pages Router (PR)\n- [Improvement] Build workers will now stop the build from hanging when they exit (PR)\n- [Improvement] When redirecting from a Server Action, revalidations will now apply correctly (PR)\n- [Improvement] Dynamic params are now handled correctly for parallel routes on the Edge Runtime (PR)\n- [Improvement] Static pages will now respect staleTime after initial load (PR)\n- [Improvement]\nvercel/og\nupdated with a memory leak fix (PR) - [Improvement] Patch timings updated to allow usage of packages like\nmsw\nfor APIs mocking (PR) - [Improvement] Prerendered pages should use static staleTime (PR)\nTo learn more, check out the upgrade guide.\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers, industry partners like Google and Meta, and our core team at Vercel. This release was brought to you by:\n- The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Wyatt, and Zack.\n- The Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will.\n- The Next.js Docs team: Delba, Rich, Ismael, and Lee.\nHuge thanks to @AbhiShake1, @Aerilym, @AhmedBaset, @AnaTofuZ, @Arindam200, @Arinji2, @ArnaudFavier, @ArnoldVanN, @Auxdible, @B33fb0n3, @Bhavya031, @Bjornnyborg, @BunsDev, @CannonLock, @CrutchTheClutch, @DeepakBalaraman, @DerTimonius, @Develliot, @EffectDoplera, @Ehren12, @Ethan-Arrowood, @FluxCapacitor2, @ForsakenHarmony, @Francoscopic, @Gomah, @GyoHeon, @Hemanshu-Upadhyay, @HristovCodes, @HughHzyb, @IAmKushagraSharma, @IDNK2203, @IGassmann, @ImDR, @IncognitoTGT, @Jaaneek, @JamBalaya56562, @Jeffrey-Zutt, @JohnGemstone, @JoshuaKGoldberg, @Julian-Louis, @Juneezee, @KagamiChan, @Kahitar, @KeisukeNagakawa, @KentoMoriwaki, @Kikobeats, @KonkenBonken, @Kuboczoch, @Lada496, @LichuAcu, @LorisSigrist, @Lsnsh, @Luk-z, @Luluno01, @M-YasirGhaffar, @Maaz-Ahmed007, @Manoj-M-S, @ManuLpz4, @Marukome0743, @MaxLeiter, @MehfoozurRehman, @MildTomato, @MonstraG, @N2D4, @NavidNourani, @Nayeem-XTREME, @Netail, @NilsJacobsen, @Ocheretovich, @OlyaPolya, @PapatMayuri, @PaulAsjes, @PlagueFPS, @ProchaLu, @Pyr33x, @QiuranHu, @RiskyMH, @Sam-Phillemon9493, @Sayakie, @Shruthireddy04, @SouthLink, @Strift, @SukkaW, @Teddir, @Tim-Zj, @TrevorSayre, @Unsleeping, @Willem-Jaap, @a89529294, @abdull-haseeb, @abhi12299, @acdlite, @actopas, @adcichowski, @adiguno, @agadzik, @ah100101, @akazwz, @aktoriukas, @aldosch, @alessiomaffeis, @allanchau, @alpedia0, @amannn, @amikofalvy, @anatoliik-lyft, @anay-208, @andrii-bodnar, @anku255, @ankur-dwivedi, @aralroca, @archanaagivale30, @arlyon, @atik-persei, @avdeev, @baeharam, @balazsorban44, @bangseongbeom, @begalinsaf, @bennettdams, @bewinsnw, @bgw, @blvdmitry, @bobaaaaa, @boris-szl, @bosconian-dynamics, @brekk, @brianshano, @cfrank, @chandanpasunoori, @chentsulin, @chogyejin, @chrisjstott, @christian-bromann, @codeSTACKr, @coderfin, @coltonehrman, @controversial, @coopbri, @creativoma, @crebelskydico, @crutchcorn, @darthmaim, @datner, @davidsa03, @delbaoliveira, @devjiwonchoi, @devnyxie, @dhruv-kaushik, @dineshh-m, @diogocapela, @dnhn, @domdomegg, @domin-mnd, @dvoytenko, @ebCrypto, @ekremkenter, @emmerich, @flybayer, @floriangosse, @forsakenharmony, @francoscopic, @frys, @gabrielrolfsen, @gaojude, @gdborton, @greatvivek11, @gnoff, @guisehn, @GyoHeon, @hamirmahal, @hiro0218, @hirotomoyamada, @housseindjirdeh, @hungdoansy, @huozhi, @hwangstar156, @iampoul, @ianmacartney, @icyJoseph, @ijjk, @imddc, @imranolas, @iscekic, @jantimon, @jaredhan418, @jeanmax1me, @jericopulvera, @jjm2317, @jlbovenzo, @joelhooks, @joeshub, @jonathan-ingram, @jonluca, @jontewks, @joostmeijles, @jophy-ye, @jordienr, @jordyfontoura, @kahlstrm, @karlhorky, @karlkeefer, @kartheesan05, @kdy1, @kenji-webdev, @kevva, @khawajaJunaid, @kidonng, @kiner-tang, @kippmr, @kjac, @kjugi, @kshehadeh, @kutsan, @kwonoj, @kxlow, @leerob, @lforst, @li-jia-nan, @liby, @lonr, @lorensr, @lovell, @lubieowoce, @luciancah, @luismiramirez, @lukahartwig, @lumirlumir, @luojiyin1987, @mamuso, @manovotny, @marlier, @mauroaccornero, @maxhaomh, @mayank1513, @mcnaveen, @md-rejoyan-islam, @mehmetozguldev, @mert-duzgun, @mirasayon, @mischnic, @mknichel, @mobeigi, @molebox, @mratlamwala, @mud-ali, @n-ii-ma, @n1ckoates, @nattui, @nauvalazhar, @neila-a, @neoFinch, @niketchandivade, @nisabmohd, @none23, @notomo, @notrab, @nsams, @nurullah, @okoyecharles, @omahs, @paarthmadan, @pathliving, @pavelglac, @penicillin0, @phryneas, @pkiv, @pnutmath, @qqww08, @r34son, @raeyoung-kim, @remcohaszing, @remorses, @rezamauliadi, @rishabhpoddar, @ronanru, @royalfig, @rubyisrust, @ryan-nauman, @ryohidaka, @ryota-murakami, @s-ekai, @saltcod, @samcx, @samijaber, @sean-rallycry, @sebmarkbage, @shubh73, @shuding, @sirTangale, @sleevezip, @slimbde, @soedirgo, @sokra, @sommeeeer, @sopranopillow, @souporserious, @srkirkland, @steadily-worked, @steveluscher, @stipsan, @styfle, @stylessh, @syi0808, @symant233, @tariknh, @theoludwig, @timfish, @timfuhrmann, @timneutkens, @tknickman, @todor0v, @tokkiyaa, @torresgol10, @tranvanhieu01012002, @txxxxc, @typeofweb, @unflxw, @unstubbable, @versecafe, @vicb, @vkryachko, @wbinnssmith, @webtinax, @weicheng95, @wesbos, @whatisagi, @wiesson, @woutvanderploeg, @wyattjoh, @xiaohanyu, @xixixao, @xugetsu, @yosefbeder, @ypessoa, @ytori, @yunsii, @yurivangeffen, @z0n, @zce, @zhawtof, @zsh77, and @ztanner for helping!"},
{"source": "https://nextjs.org/blog/next-15-1", "title": "Next.js 15.1", "text": "Tuesday, December 10th 2024\nNext.js 15.1\nPosted byNext.js 15.1 brings core upgrades, new APIs, and improvements to the developer experience. Key updates include:\n- React 19 (stable): Support for React 19 is officially available in both Pages Router & App Router.\n- Improved Error Debugging: Enhanced DX and better source maps for the browser and the terminal.\nafter\n(stable): New API to execute code after a response has finished streaming.forbidden\n/unauthorized\n(experimental): New APIs to enable more granular authentication error handling.\nUpgrade today, or get started with:\n# Use the automated upgrade CLI\nnpx @next/codemod@canary upgrade latest\n# ...or upgrade manually\nnpm install next@latest react@latest react-dom@latest\n# ...or start a new project\nnpx create-next-app@latest\nReact 19 (stable)\nNext.js 15.1 now fully supports React 19:\n- For the Pages Router: you can now use React 19 stable without needing the Release Candidate or Canary releases, alongside continued support for React 18.\n- For the App Router: we will continue to provide React Canary releases built-in. These include all the stable React 19 changes, as well as newer features being validated in frameworks, prior to a new React release.\nSince the Next.js 15 release, a significant addition to React 19 was \u201csibling pre-warming\u201d.\nFor a comprehensive overview of React 19\u2019s updates, please refer to the official React 19 blog post.\nImproved Error Debugging\nWe\u2019ve made improvements to error debugging in Next.js, ensuring you can quickly locate the source of issues, whether they appear in the terminal, browser, or attached debuggers. These enhancements apply to both Webpack and Turbopack (now stable with Next.js 15).\nSource Maps Enhancements\nErrors are now easier to trace back to their origin through the improved use of source maps. We\u2019ve implemented the ignoreList\nproperty of source maps, which allows Next.js to hide stack frames for external dependencies, making your application code the primary focus.\nFor slightly more accurate source mapping of method names, we suggest adopting Turbopack (now stable), which has improved handling and detection of source maps over Webpack.\nFor library authors: We recommend populating the\nignoreList\nproperty in sourcemaps when publishing your libraries, especially if they are configured as external (e.g. in theserverExternalPackages\nconfig).\nCollapsed Stack Frames\nWe\u2019ve improved the logic for collapsing stack frames to highlight the most relevant parts of your code.\n- In the browser and error overlay: Stack frames from third-party dependencies are hidden by default, focusing on your application code. You can reveal the hidden frames by clicking \u201cShow ignored frames\u201d in the devtools or the overlay.\n- In the terminal: Third-party dependency frames are also collapsed by default, and error formatting now aligns with the browser output for a consistent debugging experience. Errors are replayed in the browser to ensure you don\u2019t miss important information during development if you need the entire stack trace.\nEnhanced Profiling\nIgnored stack frames are also recognized by built-in browser profilers. This makes profiling your application easier, allowing you to pinpoint slow functions in your code without noise from external libraries.\nImproved with the Edge Runtime\nWhen using the Edge runtime, errors are now displayed consistently across development environments, ensuring seamless debugging. Previously, logged errors would only include the message and not the stack.\nBefore and after\nTerminal Before:\n\u2a2f app/page.tsx (6:11) @ eval\n\u2a2f Error: boom\nat eval (./app/page.tsx:12:15)\nat Page (./app/page.tsx:11:74)\nat AsyncLocalStorage.run (node:async_hooks:346:14)\nat stringify (<anonymous>)\nat AsyncLocalStorage.run (node:async_hooks:346:14)\nat AsyncResource.runInAsyncScope (node:async_hooks:206:9)\ndigest: \"380744807\"\n4 | export default function Page() {\n5 | const throwError = myCallback(() => {\n> 6 | throw new Error('boom')\n| ^\n7 | }, [])\n8 |\n9 | throwError()\nGET / 500 in 2354ms\nTerminal After:\n\u2a2f Error: boom\nat eval (app/page.tsx:6:10)\nat Page (app/page.tsx:5:32)\n4 | export default function Page() {\n5 | const throwError = myCallback(() => {\n> 6 | throw new Error('boom')\n| ^\n7 | }, [])\n8 |\n9 | throwError() {\ndigest: '225828171'\n}\nError Overlay Before\nError Overlay After\nThese improvements make errors clearer and more intuitive, allowing you to focus your time building your application rather than debugging.\nWe\u2019re also thrilled to announce the introduction of a redesigned UI for the error overlay, coming in upcoming releases.\nafter\n(stable)\nThe after()\nAPI is now stable following its introduction in the first Next.js 15 RC.\nafter()\nprovides a way to perform tasks such as logging, analytics, and other system synchronization after the response has finished streaming to the user, without blocking the primary response.\nKey changes\nSince its introduction, we\u2019ve stabilized after()\nand addressed feedback including:\n- Improved support for self-hosted Next.js servers.\n- Bug fixes for scenarios where\nafter()\ninteracted with other Next.js features. - Enhanced extensibility, enabling other platforms to inject their own\nwaitUntil()\nprimitives to powerafter()\n. - Support for runtime APIs such as\ncookies()\nandheaders()\nin Server Actions and Route Handlers.\nimport { after } from 'next/server';\nimport { log } from '@/app/utils';\nexport default function Layout({ children }) {\n// Secondary task\nafter(() => {\nlog();\n});\n// Primary task\nreturn <>{children}</>;\n}\nRead more about the after\nAPI and how to leverage it in the documentation.\nforbidden\nand unauthorized\n(experimental)\nNext.js 15.1 includes two experimental APIs, forbidden()\nand unauthorized()\n, based on community feedback.\nWe\u2019d love your feedback \u2014 please try it in your development environments and share your thoughts in this discussion thread.\nOverview\nIf you\u2019re familiar with the App Router, you\u2019ve likely used notFound()\nto trigger 404 behavior alongside the customizable not-found.tsx\nfile. With version 15.1, we\u2019re extending this approach to authorization errors:\n\u2022 forbidden()\ntriggers a 403 error with customizable UI via forbidden.tsx\n.\n\u2022 unauthorized()\ntriggers a 401 error with customizable UI via unauthorized.tsx\n.\nGood to know: As with\nnotFound()\nerrors, the status code will be200\nif the error is triggered after initial response headers have been sent. Learn more.\nEnabling the feature\nAs this feature is still experimental, you\u2019ll need to enable it in your next.config.ts\nfile:\nimport type { NextConfig } from 'next';\nconst nextConfig: NextConfig = {\nexperimental: {\nauthInterrupts: true,\n},\n};\nexport default nextConfig;\nNote:\nnext.config.ts\nsupport was introduced in Next.js 15. Learn more.\nUsing forbidden()\nand unauthorized()\nYou can use forbidden()\nand unauthorized()\nin Server Actions, Server Components, Client Components, or Route Handlers. Here\u2019s an example:\nimport { verifySession } from '@/app/lib/dal';\nimport { forbidden } from 'next/navigation';\nexport default async function AdminPage() {\nconst session = await verifySession();\n// Check if the user has the 'admin' role\nif (session.role !== 'admin') {\nforbidden();\n}\n// Render the admin page for authorized users\nreturn <h1>Admin Page</h1>;\n}\nCreating custom error pages\nTo customize the error pages, create the following files:\nimport Link from 'next/link';\nexport default function Forbidden() {\nreturn (\n<div>\n<h2>Forbidden</h2>\n<p>You are not authorized to access this resource.</p>\n<Link href=\"/\">Return Home</Link>\n</div>\n);\n}\nimport Link from 'next/link';\nexport default function Unauthorized() {\nreturn (\n<div>\n<h2>Unauthorized</h2>\n<p>Please log in to access this page.</p>\n<Link href=\"/login\">Go to Login</Link>\n</div>\n);\n}\nWe'd like to thank Clerk for proposing this feature through a PR and assisting us in prototyping the API. Before we stabilize this feature in 15.2, we're planning on adding more capabilities and improvements to the APIs to support a wider range of use cases.\nRead the documentation for the unauthorized\nand forbidden\nAPIs for more details.\nOther Changes\n- [Feature] Use ESLint 9 in\ncreate-next-app\n(PR) - [Feature] Increase max cache tags to 128 (PR)\n- [Feature] Add an option to disable experimental CssChunkingPlugin (PR)\n- [Feature] Add experimental CSS inlining support (PR)\n- [Improvement] Silence Sass\nlegacy-js-api\nwarning (PR) - [Improvement] Fix unhandled rejection when using rewrites (PR)\n- [Improvement] Ensure parent process exits when webpack worker fails (PR)\n- [Improvement] Fixed route interception on a catch-all route (PR)\n- [Improvement] Fixed response cloning issue in request deduping (PR)\n- [Improvement] Fixed Server Action redirects between multiple root layouts (PR)\n- [Improvement] Support providing MDX plugins as strings for Turbopack compatibility (PR)\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers. This release was brought to you by:\n- The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Jude, Sam, Sebastian, Sebbie, Wyatt, and Zack.\n- The Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will.\n- The Next.js Docs team: Delba, Rich, Ismael, and Lee.\nHuge thanks to @sokra, @molebox, @delbaoliveira, @eps1lon, @wbinnssmith, @JamBalaya56562, @hyungjikim, @adrian-faustino, @mottox2, @lubieowoce, @bgw, @mknichel, @wyattjoh, @huozhi, @kdy1, @mischnic, @ijjk, @icyJoseph, @acdlite, @unstubbable, @gaojude, @devjiwonchoi, @cena-ko, @lforst, @devpla, @samcx, @styfle, @ztanner, @Marukome0743, @timneutkens, @JeremieDoctrine, @ductnn, @karlhorky, @reynaldichernando, @chogyejin, @y-yagi, @philparzer, @alfawal, @Rhynden, @arlyon, @MJez29, @Goodosky, @themattmayfield, @tobySolutions, @kevinmitch14, @leerob, @emmanuelgautier, @mrhrifat, @lid0a, @boar-is, @nisabmohd, @PapatMayuri, @ovogmap, @Reflex2468, @LioRael, @betterthanhajin, @HerringtonDarkholme, @bpb54321, @ahmoin, @Kikobeats, @abdelrahmanAbouelkheir, @lumirlumir, @yeeed711, @petter, and @suu3 for helping!"},
{"source": "https://nextjs.org/blog/next-15-rc", "title": "Next.js 15 RC", "text": "Thursday, May 23rd 2024\nNext.js 15 RC\nPosted byThe Next.js 15 Release Candidate (RC) is now available. This early version allows you to test the latest features before the upcoming stable release.\n- React: Support for the React 19 RC, React Compiler (Experimental), and hydration error improvements\n- Caching:\nfetch\nrequests,GET\nRoute Handlers, and client navigations are no longer cached by default - Partial Prerendering (Experimental): New Layout and Page config option for incremental adoption\nnext/after\n(Experimental): New API to execute code after a response has finished streamingcreate-next-app\n: Updated design and a new flag to enable Turbopack in local development- Bundling external packages (Stable): New config options for App and Pages Router\nTry the Next.js 15 RC today:\nnpm install next@rc react@rc react-dom@rc\nReact 19 RC\nThe Next.js App Router is built on the React canary channel for frameworks, which has allowed developers to use and provide feedback on these new React APIs before the v19 release.\nNext.js 15 RC now supports React 19 RC, which includes new features for both the client and server like Actions.\nRead the Next.js 15 upgrade guide, the React 19 upgrade guide, and watch the React Conf Keynote to learn more.\nNote: Some third party libraries may not be compatible with React 19 yet.\nReact Compiler (Experimental)\nThe React Compiler is a new experimental compiler created by the React team at Meta. The compiler understands your code at a deep level through its understanding of plain JavaScript semantics and the Rules of React, which allows it to add automatic optimizations to your code. The compiler reduces the amount of manual memoization developers have to do through APIs such as useMemo\nand useCallback\n- making code simpler, easier to maintain, and less error prone.\nWith Next.js 15, we've added support for the React Compiler.\nInstall babel-plugin-react-compiler\n:\nnpm install babel-plugin-react-compiler\nThen, add experimental.reactCompiler\noption in next.config.js\n:\nconst nextConfig = {\nexperimental: {\nreactCompiler: true,\n},\n};\nmodule.exports = nextConfig;\nOptionally, you can configure the compiler to run in \"opt-in\" mode as follows:\nconst nextConfig = {\nexperimental: {\nreactCompiler: {\ncompilationMode: 'annotation',\n},\n},\n};\nmodule.exports = nextConfig;\nNote: The React Compiler is currently only possible to use in Next.js through a Babel plugin, which could result in slower build times.\nLearn more about the React Compiler, and the available Next.js config options.\nHydration error improvements\nNext.js 14.1 made improvements to error messages and hydration errors. Next.js 15 continues to build on those by adding an improved hydration error view. Hydration errors now display the source code of the error with suggestions on how to address the issue.\nFor example, this was a previous hydration error message in Next.js 14.1:\nNext.js 15 RC has improved this to:\nCaching updates\nNext.js App Router launched with opinionated caching defaults. These were designed to provide the most performant option by default with the ability to opt out when required.\nBased on your feedback, we re-evaluated our caching heuristics and how they would interact with projects like Partial Prerendering (PPR) and with third party libraries using fetch\n.\nWith Next.js 15, we\u2019re changing the caching default for fetch\nrequests, GET\nRoute Handlers, and Client Router Cache from cached by default to uncached by default. If you want to retain the previous behavior, you can continue to opt-into caching.\nWe're continuing to improve caching in Next.js in the coming months and we'll share more details in the Next.js 15 GA announcement.\nfetch\nRequests are no longer cached by default\nNext.js uses the Web fetch\nAPI cache option to configure how a server-side fetch request interacts with the framework's persistent HTTP cache:\nfetch('https://...', { cache: 'force-cache' | 'no-store' });\nno-store\n- fetch a resource from a remote server on every request and do not update the cacheforce-cache\n- fetch a resource from the cache (if it exists) or a remote server and update the cache\nIn Next.js 14, force-cache\nwas used by default if a cache\noption was not provided, unless a dynamic function or dynamic config option was used.\nIn Next.js 15, no-store\nis used by default if a cache\noption is not provided. This means fetch requests will not be cached by default.\nYou can still opt into caching fetch\nrequests by:\n- Setting the\ncache\noption toforce-cache\nin a singlefetch\ncall - Setting the\ndynamic\nroute config option to'force-static'\nfor a single route - Setting the\nfetchCache\nroute config option to'default-cache'\nto override allfetch\nrequests in a Layout or Page to useforce-cache\nunless they explicitly specify their owncache\noption\nGET\nRoute Handlers are no longer cached by default\nIn Next 14, Route Handlers that used the GET\nHTTP method were cached by default unless they used a dynamic function or dynamic config option. In Next.js 15, GET\nfunctions are not cached by default.\nYou can still opt into caching using a static route config option such as export dynamic = 'force-static'\n.\nSpecial Route Handlers like sitemap.ts\n, opengraph-image.tsx\n, and icon.tsx\n, and other metadata files remain static by default unless they use dynamic functions or dynamic config options.\nClient Router Cache no longer caches Page components by default\nIn Next.js 14.2.0, we introduced an experimental staleTimes\nflag to allow custom configuration of the Router Cache.\nIn Next.js 15, this flag still remains accessible, but we are changing the default behavior to have a staleTime\nof 0\nfor Page segments. This means that as you navigate around your app, the client will always reflect the latest data from the Page component(s) that become active as part of the navigation. However, there are still important behaviors that remain unchanged:\n- Shared layout data won't be refetched from the server to continue to support partial rendering.\n- Back/forward navigation will still restore from cache to ensure the browser can restore scroll position.\n- Loading.js will remain cached for 5 minutes (or the value of the\nstaleTimes.static\nconfiguration).\nYou can opt into the previous Client Router Cache behavior by setting the following configuration:\nconst nextConfig = {\nexperimental: {\nstaleTimes: {\ndynamic: 30,\n},\n},\n};\nmodule.exports = nextConfig;\nIncremental adoption of Partial Prerendering (Experimental)\nIn Next.js 14, we introduced Partial Prerendering (PPR) - an optimization that combines static and dynamic rendering on the same page.\nNext.js currently defaults to static rendering unless you use dynamic functions such as cookies()\n, headers()\n, and uncached data requests. These APIs opt an entire route into dynamic rendering. With PPR, you can wrap any dynamic UI in a Suspense boundary. When a new request comes in, Next.js will immediately serve a static HTML shell, then render and stream the dynamic parts in the same HTTP request.\nTo allow for incremental adoption, we\u2019ve added an experimental_ppr\nroute config option for opting specific Layouts and Pages into PPR:\nimport { Suspense } from \"react\"\nimport { StaticComponent, DynamicComponent } from \"@/app/ui\"\nexport const experimental_ppr = true\nexport default function Page() {\nreturn {\n<>\n<StaticComponent />\n<Suspense fallback={...}>\n<DynamicComponent />\n</Suspense>\n</>\n};\n}\nTo use the new option, you\u2019ll need to set the experimental.ppr\nconfig in your next.config.js\nfile to 'incremental'\n:\nconst nextConfig = {\nexperimental: {\nppr: 'incremental',\n},\n};\nmodule.exports = nextConfig;\nOnce all the segments have PPR enabled, it\u2019ll be considered safe for you to set the ppr\nvalue to true\n, and enable it for the entire app and all future routes.\nWe will share more about our PPR roadmap in our Next.js 15 GA blog post.\nLearn more about Partial Prerendering.\nExecuting code after a response with next/after\n(Experimental)\nWhen processing a user request, the server typically performs tasks directly related to computing the response. However, you may need to perform tasks such as logging, analytics, and other external system synchronization.\nSince these tasks are not directly related to the response, the user should not have to wait for them to complete. Deferring the work after responding to the user poses a challenge because serverless functions stop computation immediately after the response is closed.\nafter()\nis a new experimental API that solves this problem by allowing you to schedule work to be processed after the response has finished streaming, enabling secondary tasks to run without blocking the primary response.\nTo use it, add experimental.after\nto next.config.js\n:\nconst nextConfig = {\nexperimental: {\nafter: true,\n},\n};\nmodule.exports = nextConfig;\nThen, import the function in Server Components, Server Actions, Route Handlers, or Middleware.\nimport { unstable_after as after } from 'next/server';\nimport { log } from '@/app/utils';\nexport default function Layout({ children }) {\n// Secondary task\nafter(() => {\nlog();\n});\n// Primary task\nreturn <>{children}</>;\n}\nLearn more about next/after\n.\ncreate-next-app\nupdates\nFor Next.js 15, we've updated create-next-app\nwith a new design.\nWhen running create-next-app\n, there is a new prompt asking if you want to enable Turbopack for local development (defaults to No\n).\n\u2714 Would you like to use Turbopack for next dev? \u2026 No / Yes\nThe --turbo\nflag can be used to enable Turbopack.\nnpx create-next-app@rc --turbo\nTo make getting started on a new project even easier, a new --empty\nflag has been added to the CLI. This will remove any extraneous files and styles, resulting in a minimal \"hello world\" page.\nnpx create-next-app@rc --empty\nOptimizing bundling of external packages (Stable)\nBundling external packages can improve the cold start performance of your application. In the App Router, external packages are bundled by default, and you can opt-out specific packages using the new serverExternalPackages\nconfig option.\nIn the Pages Router, external packages are not bundled by default, but you can provide a list of packages to bundle using the existing transpilePackages\noption. With this configuration option, you need to specify each package.\nTo unify configuration between App and Pages Router, we\u2019re introducing a new option, bundlePagesRouterDependencies\nto match the default automatic bundling of the App Router. You can then use serverExternalPackages\nto opt-out specific packages, if needed.\nconst nextConfig = {\n// Automatically bundle external packages in the Pages Router:\nbundlePagesRouterDependencies: true,\n// Opt specific packages out of bundling for both App and Pages Router:\nserverExternalPackages: ['package-name'],\n};\nmodule.exports = nextConfig;\nLearn more about optimizing external packages.\nOther Changes\n- [Breaking] Minimum React version is now 19 RC\n- [Breaking] next/image: Removed\nsquoosh\nin favor ofsharp\nas an optional dependency (PR) - [Breaking] next/image: Changed default\nContent-Disposition\ntoattachment\n(PR) - [Breaking] next/image: Error when\nsrc\nhas leading or trailing spaces (PR) - [Breaking] Middleware: Apply\nreact-server\ncondition to limit unrecommended react API imports (PR) - [Breaking] next/font: Removed support for external\n@next/font\npackage (PR) - [Breaking] next/font: Removed\nfont-family\nhashing (PR) - [Breaking] Caching:\nforce-dynamic\nwill now set ano-store\ndefault to the fetch cache (PR) - [Breaking] Config: Enable\nswcMinify\n(PR),missingSuspenseWithCSRBailout\n(PR), andoutputFileTracing\n(PR) behavior by default and remove deprecated options - [Breaking] Remove auto-instrumentation for Speed Insights (must now use the dedicated @vercel/speed-insights package) (PR)\n- [Breaking] Remove\n.xml\nextension for dynamic sitemap routes and align sitemap URLs between development and production (PR) - [Improvement] Metadata: Updated environmental variable fallbacks for\nmetadataBase\nwhen hosted on Vercel (PR) - [Improvement] Fix tree-shaking with mixed namespace and named imports from\noptimizePackageImports\n(PR) - [Improvement] Parallel Routes: Provide unmatched catch-all routes with all known params (PR)\n- [Improvement] Config\nbundlePagesExternals\nis now stable and renamed tobundlePagesRouterDependencies\n- [Improvement] Config\nserverComponentsExternalPackages\nis now stable and renamed toserverExternalPackages\n- [Improvement] create-next-app: New projects ignore all\n.env\nfiles by default (PR) - [Docs] Improve auth documentation (PR)\n- [Docs]\n@next/env\npackage (PR)\nTo learn more, check out the upgrade guide.\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers, industry partners like Google and Meta, and our core team at Vercel. This release was brought to you by:\n- The Next.js team: Andrew, Balazs, Ethan, Janka, Jiachi, Jimmy, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Steven, Tim, Wyatt, and Zack.\n- The Turbopack team: Alex, Benjamin, Donny, Leah, Maia, OJ, Tobias, and Will.\n- Next.js Docs: Delba, Steph, Michael, Anthony, and Lee.\nHuge thanks to @devjiwonchoi, @ijjk, @Ethan-Arrowood, @sokra, @kenji-webdev, @wbinnssmith, @huozhi, @domdomegg, @samcx, @Jaaneek, @evanwinter, @wyattjoh, @kdy1, @balazsorban44, @feedthejim, @ztanner, @ForsakenHarmony, @kwonoj, @delbaoliveira, @stipsan, @leerob, @shuding, @xiaohanyu, @timneutkens, @dvoytenko, @bobaaaaa, @bgw, @gaspar09, @souporserious, @unflxw, @kiner-tang, @Ehren12, @EffectDoplera, @IAmKushagraSharma, @Auxdible, @sean-rallycry, @Jeffrey-Zutt, @eps1lon, @jeanmax1me, @unstubbable, @NilsJacobsen, @PaulAsjes, @adiguno, @ryan-nauman, @zsh77, @KagamiChan, @steveluscher, @MehfoozurRehman, @vkryachko, @chentsulin, @samijaber, @begalinsaf, @FluxCapacitor2, @lukahartwig, @brianshano, @pavelglac, @styfle, @symant233, @HristovCodes, @karlhorky, @jonluca, @jonathan-ingram, @mknichel, @sopranopillow, @Gomah, @imddc, @notrab, @gabrielrolfsen, @remorses, @AbhiShake1, @agadzik, @ryota-murakami, @rishabhpoddar, @rezamauliadi, @IncognitoTGT, @webtinax, @BunsDev, @nisabmohd, @z0n, @bennettdams, @joeshub, @n1ckoates, @srkirkland, @RiskyMH, @coopbri, @okoyecharles, @diogocapela, @dnhn, @typeofweb, @davidsa03, @imranolas, @lubieowoce, @maxhaomh, @mirasayon, @blvdmitry, @hwangstar156, @lforst, @emmerich, @christian-bromann, @Lsnsh, @datner, @hiro0218, @flybayer, @ianmacartney, @ypessoa, @ryohidaka, @icyJoseph, @Arinji2, @lovell, @nsams, @Nayeem-XTREME, @JamBalaya56562, @Arindam200, @gaojude, @qqww08, @todor0v, @coltonehrman, and @wiesson for helping!"},
{"source": "https://nextjs.org/blog/next-15-rc2", "title": "Next.js 15 RC 2", "text": "Tuesday, October 15th 2024\nNext.js 15 RC 2\nPosted byFollowing the announcement of the first Next.js 15 Release Candidate back in May, we\u2019ve been preparing a second Release Candidate based on your feedback. Here\u2019s what we\u2019ve been working on:\n@next/codemod upgrade\n: Easily upgrade to the latest Next.js and React versions.- Turbopack for development: Performance improvements and Next.js 15 stability target.\n- Async Request APIs (Breaking): Incremental step towards a simplified rendering and caching model.\n- Server Actions: Enhanced security with unguessable endpoints and removal of unused actions.\n- Static Indicator: New visual indicator shows static routes during development.\nnext/form\n: Enhance HTML forms with client-side navigation.next.config.ts\n: TypeScript support for the Next.js configuration file.instrumentation.js\n(Stable): New API for server lifecycle observability.- Development and Build improvements: Improved build times and Faster Fast Refresh.\n- Self-hosting: More control over\nCache-Control\nheaders. - Linting: Added support for ESLint 9.\nTry the Next.js 15 Release Candidate (RC2) today:\n# Use the new automated upgrade CLI\nnpx @next/codemod@canary upgrade rc\n# ...or upgrade manually\nnpm install next@rc react@rc react-dom@rc\nNote: This Release Candidate includes all changes from the previous RC.\nSmooth upgrades with codemod CLI\nWe include codemods (automated code transformations) with every major Next.js release to help automate upgrading breaking changes.\nTo make upgrades even smoother, we've released an enhanced codemod CLI:\nnpx @next/codemod@canary upgrade rc\nThis tool helps you upgrade your codebase to the latest stable or prerelease versions. The CLI will update your dependencies, show available codemods, and guide you through applying them. The specified dist tag on the command line (@rc\n, @canary\n, etc.) determines the version to upgrade to.\nLearn more about Next.js codemods.\nTurbopack for Development\nTurbopack for local development will become stable in the general release of Next.js 15, while remaining opt-in. You can try it today by running:\nnext dev --turbo\nThanks to the thousands of developers who participated in testing, reporting issues, and verifying fixes throughout the Turbopack beta and release candidate phases, we've resolved 54 GitHub issues since the first Next.js 15 Release Candidate. Alongside this community effort, our internal testing on vercel.com, v0.dev, and nextjs.org helped identify numerous additional improvements.\nIn the last three months, we've focused on optimizing cold compilation performance. Compared to the previous release, we've seen:\n- 25\u201335% reduction in memory usage.\n- 30\u201350% faster compilation for large pages with thousands of modules.\nWe will continue to optimize these areas in future releases.\nLooking ahead, the Turbopack team is making significant progress on persistent caching, memory usage reduction, and Turbopack for next build\n\u2014with 96% of tests passing.\nNote: See all of the supported and unsupported features of Turbopack.\nAsync Request APIs (Breaking Change)\nIn traditional Server-Side Rendering, the server waits for a request before rendering any content. However, not all components depend on request-specific data, so it's unnecessary to wait for the request to render them. Ideally, the server would prepare as much as possible before a request arrives. To enable this, and set the stage for future optimizations, we need to know when to wait for the request.\nTherefore, we are transitioning APIs that rely on request-specific data\u2014such as headers\n, cookies\n, params\n, and searchParams\n\u2014to be asynchronous.\nimport { cookies } from 'next/headers';\nexport async function AdminPanel() {\nconst cookieStore = await cookies();\nconst token = cookieStore.get('token');\n// ...\n}\nThis is a breaking change and affects the following APIs:\ncookies\nheaders\ndraftMode\nparams\ninlayout.js\n,page.js\n,route.js\n,default.js\n,generateMetadata\n, andgenerateViewport\nsearchParams\ninpage.js\nFor an easier migration, these APIs can temporarily be accessed synchronously, but will show warnings in development and production until the next major version. A codemod is available to automate the migration:\nnpx @next/codemod@canary next-async-request-api .\nFor cases where the codemod can't fully migrate your code, please read the upgrade guide. We have also provided an example of how to migrate a Next.js application to the new APIs.\nEnhanced Security for Server Actions\nServer Actions are server-side functions that can be called from the client. They are defined by adding the 'use server'\ndirective at the top of a file and exporting an async function.\nEven if a Server Action or utility function is not imported elsewhere in your code, it\u2019s still a publicly accessible HTTP endpoint. While this behavior is technically correct, it can lead to unintentional exposure of such functions.\nTo improve security, we\u2019ve introduced the following enhancements:\n- Dead code elimination: Unused Server Actions won\u2019t have their IDs exposed to the client-side JavaScript bundle, reducing bundle size and improving performance.\n- Secure action IDs: Next.js now creates unguessable, non-deterministic IDs to allow the client to reference and call the Server Action. These IDs are periodically recalculated between builds for enhanced security.\n// app/actions.js\n'use server';\n// This action **is** used in our application, so Next.js\n// will create a secure ID to allow the client to reference\n// and call the Server Action.\nexport async function updateUserAction(formData) {}\n// This action **is not** used in our application, so Next.js\n// will automatically remove this code during `next build`\n// and will not create a public endpoint.\nexport async function deleteUserAction(formData) {}\nYou should still treat Server Actions as public HTTP endpoints. Learn more about securing Server Actions.\nStatic Route Indicator\nNext.js now displays a Static Route Indicator during development to help you identify which routes are static or dynamic. This visual cue makes it easier to optimize performance by understanding how your pages are rendered.\nYou can also use the next build output to view the rendering strategy for all routes.\nThis update is part of our ongoing efforts to enhance observability in Next.js, making it easier for developers to monitor, debug, and optimize their applications. We're also working on dedicated developer tools, with more details to come soon.\nLearn more about the Static Route Indicator, which can be disabled.\n<Form>\nComponent\nThe new <Form>\ncomponent extends the HTML <form>\nelement with prefetching, client-side navigation, and progressive enhancement.\nIt is useful for forms that navigate to a new page, such as a search form that leads to a results page.\nimport Form from 'next/form';\nexport default function Page() {\nreturn (\n<Form action=\"/search\">\n<input name=\"query\" />\n<button type=\"submit\">Submit</button>\n</Form>\n);\n}\nThe <Form>\ncomponent comes with:\n- Prefetching: When the form is in view, the layout and loading UI are prefetched, making navigation fast.\n- Client-side Navigation: On submission, shared layouts and client-side state are preserved.\n- Progressive Enhancement: If JavaScript hasn\u2019t loaded yet, the form still works via full-page navigation.\nPreviously, achieving these features required a lot of manual boilerplate. For example:\nExample\n// Note: This is abbreviated for demonstration purposes.\n// Not recommended for use in production code.\n'use client'\nimport { useEffect } from 'react'\nimport { useRouter } from 'next/navigation'\nexport default function Form(props) {\nconst action = props.action\nconst router = useRouter()\nuseEffect(() => {\n// if form target is a URL, prefetch it\nif (typeof action === 'string') {\nrouter.prefetch(action)\n}\n}, [action, router])\nfunction onSubmit(event) {\nevent.preventDefault()\n// grab all of the form fields and trigger a `router.push` with the data URL encoded\nconst formData = new FormData(event.currentTarget)\nconst data = new URLSearchParams()\nfor (const [name, value] of formData) {\ndata.append(name, value as string)\n}\nrouter.push(`${action}?${data.toString()}`)\n}\nif (typeof action === 'string') {\nreturn <form onSubmit={onSubmit} {...props} />\n}\nreturn <form {...props} />\n}\nLearn more about the <Form>\nComponent.\nSupport for next.config.ts\nNext.js now supports the TypeScript next.config.ts\nfile type and provides a NextConfig\ntype for autocomplete and type-safe options:\nimport type { NextConfig } from 'next';\nconst nextConfig: NextConfig = {\n/* config options here */\n};\nexport default nextConfig;\nLearn more about TypeScript support in Next.js.\ninstrumentation.js\n(Stable)\nThe instrumentation\nfile, with the register()\nAPI, allows users to tap into the Next.js server lifecycle to monitor performance, track the source of errors, and deeply integrate with observability libraries like OpenTelemetry.\nThis feature is now stable and the experimental.instrumentationHook\nconfig option can be removed.\nIn addition, we\u2019ve collaborated with Sentry on designing a new onRequestError\nhook that can be used to:\n- Capture important context about all errors thrown on the server, including:\n- Router: Pages Router or App Router\n- Server context: Server Component, Server Action, Route Handler, or Middleware\n- Report the errors to your favorite observability provider.\nexport async function onRequestError(err, request, context) {\nawait fetch('https://...', {\nmethod: 'POST',\nbody: JSON.stringify({ message: err.message, request, context }),\nheaders: { 'Content-Type': 'application/json' },\n});\n}\nexport async function register() {\n// init your favorite observability provider SDK\n}\nLearn more about the onRequestError\nfunction.\nDevelopment and Build Improvements\nServer Components HMR\nDuring development, Server components are re-executed when saved. This means, any fetch\nrequests to your API endpoints or third-party services are also called.\nTo improve local development performance and reduce potential costs for billed API calls, we now ensure Hot Module Replacement (HMR) can re-use fetch\nresponses from previous renders.\nLearn more about the Server Components HMR Cache.\nFaster Static Generation for the App Router\nWe've optimized static generation to improve build times, especially for pages with slow network requests.\nPreviously, our static optimization process rendered pages twice\u2014once to generate data for client-side navigation and a second time to render the HTML for the initial page visit. Now, we reuse the first render, cutting out the second pass, reducing workload and build times.\nAdditionally, static generation workers now share the fetch\ncache across pages. If a fetch\ncall doesn\u2019t opt out of caching, its results are reused by other pages handled by the same worker. This reduces the number of requests for the same data.\nAdvanced Static Generation Control (Experimental)\nWe\u2019ve added experimental support for more control over static generation process for advanced use cases that would benefit from greater control.\nWe recommend sticking to the current defaults unless you have specific requirements as these options can lead to increased resource usage and potential out-of-memory errors due to increased concurrency.\nconst nextConfig = {\nexperimental: {\n// how many times Next.js will retry failed page generation attempts\n// before failing the build\nstaticGenerationRetryCount: 1\n// how many pages will be processed per worker\nstaticGenerationMaxConcurrency: 8\n// the minimum number of pages before spinning up a new export worker\nstaticGenerationMinPagesPerWorker: 25\n},\n}\nexport default nextConfig;\nLearn more about the Static Generation options.\nImprovements for self-hosting\nWhen self-hosting applications, you may need more control over Cache-Control\ndirectives.\nOne common case is controlling the stale-while-revalidate\nperiod sent for ISR pages. We've implemented two improvements:\n- You can now configure the\nexpireTime\nvalue innext.config\n. This was previously theexperimental.swrDelta\noption. - Updated the default value to one year, ensuring most CDNs can fully apply the\nstale-while-revalidate\nsemantics as intended.\nWe also no longer override custom Cache-Control\nvalues with our default values, allowing full control and ensuring compatibility with any CDN setup.\nFinally, we've improved image optimization when self-hosting. Previously, we recommended you install sharp\nfor optimizing images on your Next.js server. This recommendation was sometimes missed. With Next.js 15, you no longer need to manually install sharp\n\u2014 Next.js will use sharp\nautomatically when using next start\nor running with standalone output mode.\nTo learn more, see our new demo and tutorial video on self-hosting Next.js.\nESLint 9 Support\nNext.js 15 also introduces support for ESLint 9, following the end-of-life for ESLint 8 on October 5, 2024.\nTo ensure a smooth transition, Next.js remain backwards compatible, meaning you can continue using either ESLint 8 or 9.\nIf you upgrade to ESLint 9, and we detect that you haven\u2019t yet adopted the new config format, Next.js will automatically apply the ESLINT_USE_FLAT_CONFIG=false\nescape hatch to ease migration.\nAdditionally, deprecated options like \u2014ext\nand \u2014ignore-path\nwill be removed when running next lint\n. Please note that ESLint will eventually disallow these older configurations in ESLint 10, so we recommend starting your migration soon.\nFor more details on these changes, check out the migration guide.\nAs part of this update, we\u2019ve also upgraded eslint-plugin-react-hooks\nto v5.0.0\n, which introduces new rules for React Hooks usage. You can review all changes in the changelog for eslint-plugin-react-hooks@5.0.0.\nOther Changes\n- All of the changes previously described in the RC 1 blog post\n- [Breaking] We\u2019ve deprecated exporting\nexport const runtime = \"experimental-edge\"\nin the App Router. Users should now switch toexport const runtime = \"edge\"\n. We\u2019ve added a codemod to perform this (PR) - [Breaking] Calling\nrevalidateTag\nandrevalidatePath\nduring render will now throw an error (PR) - [Breaking] The\ninstrumentation.js\nandmiddleware.js\nfiles will now use the vendored React packages (PR) - [Breaking] The minimum required Node.js version has been updated to 18.18.0 (PR)\n- [Breaking]\nnext/dynamic\n: the deprecatedsuspense\nprop has been removed and when the component is used in the App Router, it won't insert an empty Suspense boundary anymore (PR) - [Breaking] When resolving modules on the Edge Runtime, the\nworker\nmodule condition will not be applied (PR) - [Breaking] Disallow using\nssr: false\noption withnext/dynamic\nin Server Components (PR) - [Improvement] The\noutputFileTracingRoot\n,outputFileTracingIncludes\nandoutputFileTracingExcludes\nhave been upgraded from experimental and are now stable (PR) - [Improvement] Avoid merging global CSS files with CSS module files deeper in the tree (PR)\n- [Improvement] The cache handler can be specified via the\nNEXT_CACHE_HANDLER_PATH\nenvironment variable (PR) - [Improvement] The Pages Router now supports both React 18 and React 19 (PR)\n- [Improvement] The Error Overlay now displays a button to copy the Node.js Inspector URL if the inspector is enabled (PR)\n- [Improvement] Client prefetches on the App Router now use the\npriority\nattribute (PR) - [Improvement] Next.js now provides an\nunstable_rethrow\nfunction to rethrow Next.js internal errors in the App Router (PR) - [Improvement]\nunstable_after\ncan now be used in static pages (PR) - [Improvement] If a\nnext/dynamic\ncomponent is used during SSR, the chunk will be prefetched (PR) - [Improvement] The\nesmExternals\noption is now supported on the App Router (PR) - [Improvement] The\nexperimental.allowDevelopmentBuild\noption can be used to allowNODE_ENV=development\nwithnext build\nfor debugging purposes (PR) - [Improvement] The Server Action transforms are now disabled in the Pages Router (PR)\n- [Improvement] Build workers will now stop the build from hanging when they exit (PR)\n- [Improvement] When redirecting from a Server Action, revalidations will now apply correctly (PR)\n- [Improvement] Dynamic params are now handled correctly for parallel routes on the Edge Runtime (PR)\n- [Improvement] Static pages will now respect staleTime after initial load (PR)\n- [Improvement]\nvercel/og\nupdated with a memory leak fix (PR) - [Improvement] Patch timings updated to allow usage of packages like\nmsw\nfor APIs mocking (PR)\nContributors\nNext.js is the result of the combined work of over 3,000 individual developers, and our core team at Vercel. This release was brought to you by:\n- The Next.js team: Andrew, Hendrik, Janka, Jiachi, Jimmy, Jiwon, JJ, Josh, Sam, Sebastian, Sebbie, Shu, Wyatt, and Zack.\n- The Turbopack team: Alex, Benjamin, Donny, Maia, Niklas, Tim, Tobias, and Will.\n- The Next.js Docs team: Delba, Rich, Ismael, and Lee.\nHuge thanks to @huozhi, @shuding, @wyattjoh, @PaulAsjes, @mcnaveen, @timneutkens, @stipsan, @aktoriukas, @sirTangale, @greatvivek11, @sokra, @anatoliik-lyft, @wbinnssmith, @coltonehrman, @hungdoansy, @kxlow, @ztanner, @manovotny, @leerob, @ryota-murakami, @ijjk, @pnutmath, @feugy, @Jeffrey-Zutt, @wiesson, @eps1lon, @devjiwonchoi, @Ethan-Arrowood, @kenji-webdev, @domdomegg, @samcx, @Jaaneek, @evanwinter, @kdy1, @balazsorban44, @feedthejim, @ForsakenHarmony, @kwonoj, @delbaoliveira, @xiaohanyu, @dvoytenko, @bobaaaaa, @bgw, @gaspar09, @souporserious, @unflxw, @kiner-tang, @Ehren12, @EffectDoplera, @IAmKushagraSharma, @Auxdible, @sean-rallycry, @jeanmax1me, @unstubbable, @NilsJacobsen, @adiguno, @ryan-nauman, @zsh77, @KagamiChan, @steveluscher, @MehfoozurRehman, @vkryachko, @chentsulin, @samijaber, @begalinsaf, @FluxCapacitor2, @lukahartwig, @brianshano, @pavelglac, @styfle, @symant233, @HristovCodes, @karlhorky, @jonluca, @jonathan-ingram, @mknichel, @sopranopillow, @Gomah, @imddc, @notrab, @gabrielrolfsen, @remorses, @AbhiShake1, @agadzik, @rishabhpoddar, @rezamauliadi, @IncognitoTGT, @webtinax, @BunsDev, @nisabmohd, @z0n, @bennettdams, @joeshub, @n1ckoates, @srkirkland, @RiskyMH, @coopbri, @okoyecharles, @diogocapela, @dnhn, @typeofweb, @davidsa03, @imranolas, @lubieowoce, @maxhaomh, @mirasayon, @blvdmitry, @hwangstar156, @lforst, @emmerich, @christian-bromann, @Lsnsh, @datner, @hiro0218, @flybayer, @ianmacartney, @ypessoa, @ryohidaka, @icyJoseph, @Arinji2, @lovell, @nsams, @Nayeem-XTREME, @JamBalaya56562, @Arindam200, @gaojude, @qqww08, @todor0v, @tokkiyaa, @arlyon, @lorensr, @Juneezee, @Sayakie, @IGassmann, @bosconian-dynamics, @phryneas, @akazwz, @atik-persei, @shubh73, @alpedia0, @chogyejin, @notomo, @ArnoldVanN, @dhruv-kaushik, @kevva, @Kahitar, @anay-208, @boris-szl, @devnyxie, @LorisSigrist, @M-YasirGhaffar, @Lada496, @kippmr, @torresgol10, @pkiv, @Netail, @jontewks, @ArnaudFavier, @chrisjstott, @mratlamwala, @mayank1513, @karlkeefer, @kshehadeh, @Marukome0743, @a89529294, @anku255, @KeisukeNagakawa, @andrii-bodnar, @aldosch, @versecafe, @steadily-worked, @cfrank, @QiuranHu, @farsabbutt, @joostmeijles, @saltcod, @archanaagivale30, @crutchcorn, @crebelskydico, @Maaz-Ahmed007, @jophy-ye, @remcohaszing, @JoshuaKGoldberg, @creativoma, @GyoHeon, @SukkaW, @MaxLeiter, @neila-a, @stylessh, @Teddir, @ManuLpz4, @Julian-Louis, @syi0808, @mert-duzgun, @amannn, @MonstraG, @hamirmahal, @tariknh, @Kikobeats, @LichuAcu, @Kuboczoch, @himself65, @Sam-Phillemon9493, @Shruthireddy04, @Hemanshu-Upadhyay, @timfuhrmann, @controversial, @pathliving, @mischnic, @mauroaccornero, @NavidNourani, @allanchau, @ekremkenter, @yurivangeffen, @gnoff, @darthmaim, @gdborton, @Willem-Jaap, @KentoMoriwaki, @TrevorSayre, @marlier, @Luluno01, @xixixao, @domin-mnd, @niketchandivade, @N2D4, @kjugi, @luciancah, @mud-ali, @codeSTACKr, @luojiyin1987, @mehmetozguldev, @ronanru, @tknickman, @joelhooks, @khawajaJunaid, @rubyisrust, @abdull-haseeb, @bewinsnw, @housseindjirdeh, @li-jia-nan, @aralroca, @s-ekai, @ah100101, @jantimon, @jordienr, @iscekic, @Strift, @slimbde, @nauvalazhar, @HughHzyb, @guisehn, @wesbos, @OlyaPolya, @paarthmadan, @AhmedBaset, @dineshh-m, @avdeev, @Bhavya031, @MildTomato, @Bjornnyborg, @amikofalvy, @yosefbeder, @kjac, @woutvanderploeg, @Ocheretovich, @ProchaLu, @luismiramirez, @omahs, @theoludwig, @abhi12299, @sommeeeer, @lumirlumir, @royalfig, @iampoul, @molebox, @txxxxc, @zce, @mamuso, @kahlstrm, @vercel-release-bot, @zhawtof, @PapatMayuri, @PlagueFPS, @IDNK2203, @jericopulvera, @liby, @CannonLock, @timfish, @whatisagi, @none23, @haouvw, @Pyr33x, @SouthLink, @frydj, @CrutchTheClutch, @sleevezip, @r34son, @yunsii, @md-rejoyan-islam, @kartheesan05, @nattui, @KonkenBonken, @weicheng95, @brekk, @Francoscopic, @B33fb0n3, @ImDR, @nurullah, @hdodov, @ebCrypto, @soedirgo, @floriangosse, @Tim-Zj, @raeyoung-kim, @erwannbst, @DerTimonius, @hirotomoyamada, @Develliot, @chandanpasunoori, @vicb, @ankur-dwivedi, @kidonng, @baeharam, @AnaTofuZ, @coderfin, @xugetsu, @alessiomaffeis, @kutsan, @jordyfontoura, @sebmarkbage, @tranvanhieu01012002, @jlbovenzo, @Luk-z, @jaredhan418, @bangseongbeom, @penicillin0, @neoFinch, @DeepakBalaraman, @Manoj-M-S, @Unsleeping, @lonr, @Aerilym, @ytori, @acdlite, @actopas, @n-ii-ma, @adcichowski, @mobeigi, @JohnGemstone, and @jjm2317 for helping!"}]