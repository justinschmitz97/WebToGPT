[{"source": "https://blog.vuejs.org/posts/vue-3-2", "title": "Vue 3.2 Released!", "text": "- Published Vue 3.2 Released! - Authors - Name - Evan - @youyuxi excited announce release Vue.js 3.2 \"Quintessential Quintuplets\"! release includes many significant new features performance improvements, contains breaking changes. New SFC Features Two new features Single File Components (SFCs, aka .vue files) graduated experimental status considered stable: <script setup> compile-time syntactic sugar greatly improves ergonomics using Composition API inside SFCs.<style> v-bind enables component state-driven dynamic CSS values SFC<style> tags. example component using two new features together: <script setup> import { ref } 'vue' const color = ref('red') </script> <template> <button @click=\"color = color === 'red' ? 'green' : 'red'\"> Color is: {{ color }} </button> </template> <style scoped> button { color: v-bind(color); } </style> Try SFC Playground, read respective documentations: Building top <script setup> , also new RFC improving ergonomics ref usage compiler-enabled sugar - please share feedback here. Web Components Vue 3.2 introduces new defineCustomElement method easily creating native custom elements using Vue component APIs: import { defineCustomElement } 'vue' const MyVueElement = defineCustomElement({ // normal Vue component options }) // Register custom element. // registration, `<my-vue-element>` tags // page upgraded. customElements.define('my-vue-element', MyVueElement) API allows developers create Vue-powered UI component libraries used framework, framework all. also added new section docs consuming creating Web Components Vue. Performance Improvements 3.2 includes significant performance improvements Vue's reactivity system, thanks great work @basvanmeurs. Specifically: - efficient ref implementation (~260% faster read / ~50% faster write) - ~40% faster dependency tracking - ~17% less memory usage template compiler also received number improvements: - ~200% faster creation plain element VNodes - aggressive constant hoisting [1] [2] Finally, new v-memo directive provides ability memoize part template tree. v-memo hit allows Vue skip Virtual DOM diffing, creation new VNodes altogether. Although rarely needed, provides escape hatch squeeze maximum performance certain scenarios, example large v-for lists. usage v-memo , one-line addition, places Vue among fastest mainstream frameworks js-framework-benchmark: Server-side Rendering @vue/server-renderer package 3.2 ships ES module build also decoupled Node.js built-ins. makes possible bundle leverage @vue/server-renderer use inside non-Node.js runtimes CloudFlare Workers Service Workers. also improved streaming render APIs, new methods rendering Web Streams API. Check documentation @vue/server-renderer details. Effect Scope API 3.2 introduces new Effect Scope API directly controlling disposal timing reactive effects (computed watchers). makes easier leverage Vue's reactivity API component context, also unlocks advanced use cases inside components. low-level API largely intended library authors, recommended read feature's RFC motivation use cases feature. detailed list changes 3.2, please refer full changelog."},
{"source": "https://blog.vuejs.org/posts/vue-3-3", "title": "Announcing Vue 3.3", "text": "- Published Announcing Vue 3.3 - Authors - Name - Evan - @youyuxi Today we're excited announce release Vue 3.3 \"Rurouni Kenshin\"! release focused developer experience improvements - particular, SFC <script setup> usage TypeScript. Together 1.6 release Vue Language Tools (previously known Volar), resolved many long-standing pain points using Vue TypeScript. post provides overview highlighted features 3.3. full list changes, please consult full changelog GitHub. Dependency Updates upgrading 3.3, recommended also update following dependencies: - volar / vue-tsc@^1.6.4 - vite@^4.3.5 - @vitejs/plugin-vue@^4.2.0 - vue-loader@^17.1.0 (if using webpack vue-cli) <script setup> + TypeScript DX Improvements Imported Complex Types Support Macros Previously, types used type parameter position defineProps defineEmits limited local types, supported type literals interfaces. Vue needs able analyze properties props interface order generate corresponding runtime options. limitation resolved 3.3. compiler resolve imported types, supports limited set complex types: <script setup lang=\"ts\"> import type { Props } './foo' // imported + intersection type defineProps<Props & { extraProp?: string }>() </script> note complex types support AST-based therefore 100% comprehensive. complex types require actual type analysis, e.g. conditional types, supported. use conditional types type single prop, entire props object. - Details: PR#8083 Generic Components Components using <script setup> accept generic type parameters via generic attribute: <script setup lang=\"ts\" generic=\"T\"> defineProps<{ items: T[] selected: }>() </script> value generic works exactly parameter list <...> TypeScript. example, use multiple parameters, extends constraints, default types, reference imported types: <script setup lang=\"ts\" generic=\"T extends string | number, U extends Item\"> import type { Item } './types' defineProps<{ id: list: U[] }>() </script> feature previously required explicit opt-in, enabled default latest version volar / vue-tsc. - Discussion: RFC#436 - Related: generic defineComponent() - PR#7963 Ergonomic defineEmits Previously, type parameter defineEmits supports call signature syntax: // const emit = defineEmits<{ (e: 'foo', id: number): void (e: 'bar', name: string, ...rest: any[]): void }>() type matches return type emit , bit verbose awkward write. 3.3 introduces ergonomic way declaring emits types: // const emit = defineEmits<{ foo: [id: number] bar: [name: string, ...rest: any[]] }>() type literal, key event name value array type specifying additional arguments. Although required, use labeled tuple elements explicitness, like example above. call signature syntax still supported. Typed Slots defineSlots new defineSlots macro used declare expected slots respective expected slot props: <script setup lang=\"ts\"> defineSlots<{ default?: (props: { msg: string }) => item?: (props: { id: number }) => }>() </script> defineSlots() accepts type parameter runtime arguments. type parameter type literal property key slot name, value slot function. first argument function props slot expects receive, type used slot props template. returning value defineSlots slots object returned useSlots . current limitations: - Required slots checking yet implemented volar / vue-tsc. - Slot function return type currently ignored , may leverage slot content checking future. also corresponding slots option defineComponent usage. APIs runtime implications serve purely type hints IDEs vue-tsc . - Details: PR#7982 Experimental Features Reactive Props Destructure Previously part now-dropped Reactivity Transform, reactive props destructure split separate feature. feature allows destructured props retain reactivity, provides ergonomic way declare props default values: <script setup> import { watchEffect } 'vue' const { msg = 'hello' } = defineProps(['msg']) watchEffect(() => { // accessing `msg` watchers computed getters // tracks dependency, like accessing `props.msg` console.log(`msg is: ${msg}`) }) </script> <template>{{ msg }}</template> feature experimental requires explicit opt-in. - Details: RFC#502 defineModel Previously, component support two-way binding v-model , needs (1) declare prop (2) emit corresponding update:propName event intends update prop: <!-- --> <script setup> const props = defineProps(['modelValue']) const emit = defineEmits(['update:modelValue']) console.log(props.modelValue) function onInput(e) { emit('update:modelValue', e.target.value) } </script> <template> <input :value=\"modelValue\" @input=\"onInput\" /> </template> 3.3 simplifies usage new defineModel macro. macro automatically registers prop, returns ref directly mutated: <!-- --> <script setup> const modelValue = defineModel() console.log(modelValue.value) </script> <template> <input v-model=\"modelValue\" /> </template> feature experimental requires explicit opt-in. - Details: RFC#503 Notable Features defineOptions new defineOptions macro allows declaring component options directly <script setup> , without requiring separate <script> block: <script setup> defineOptions({ inheritAttrs: false }) </script> Better Getter Support toRef toValue toRef enhanced support normalizing values / getters / existing refs refs: // equivalent ref(1) toRef(1) // creates readonly ref calls getter .value access toRef(() => props.foo) // returns existing refs as-is toRef(existingRef) Calling toRef getter similar computed , efficient getter performing property access expensive computations. new toValue utility method provides opposite, normalizing values / getters / refs values: toValue(1) // --> 1 toValue(ref(1)) // --> 1 toValue(() => 1) // --> 1 toValue used composables place unref composable accept getters reactive data sources: // before: allocating unnecessary intermediate refs useFeature(computed(() => props.foo)) useFeature(toRef(props, 'foo')) // after: efficient succinct useFeature(() => props.foo) relationship toRef toValue similar ref unref , main difference special handling getter functions. - Details: PR#7997 JSX Import Source Support Currently, Vue's types automatically registers global JSX typing. may cause conflict used together libraries needs JSX type inference, particular React. Starting 3.3, Vue supports specifying JSX namespace via TypeScript's jsxImportSource option. allows users choose global per-file opt-in based use case. backwards compatibility, 3.3 still registers JSX namespace globally. plan remove default global registration 3.4. using TSX Vue, add explicit jsxImportSource tsconfig.json upgrading 3.3 avoid breakage 3.4. Maintenance Infrastructure Improvements release builds upon many maintenance infrastructure improvements allow us move faster confidence: - 10x faster builds separating type checking rollup build moving rollup-plugin-typescript2 torollup-plugin-esbuild . - Faster tests moving Jest Vitest. - Faster types generation moving @microsoft/api-extractor torollup-plugin-dts . - Comprehensive regression tests via ecosystem-ci - catches regressions major ecosystem dependents releases! planned, aim start making smaller frequent feature releases 2023. Stay tuned!"},
{"source": "https://blog.vuejs.org/posts/vue-3-4", "title": "Announcing Vue 3.4", "text": "- Published Announcing Vue 3.4 - Authors - Name - Evan - @youyuxi Today we're excited announce release Vue 3.4 \"\ud83c\udfc0 Slam Dunk\"! release includes substantial internal improvements - notably rewritten template parser 2x faster, refactored reactivity system makes effect triggering accurate efficient. also packs number quality-of-life API improvements, including stabilization defineModel new same-name shorthand binding props. post provides overview highlighted features 3.4. full list changes, please consult full changelog GitHub. Potential Actions Needed fully leverage new features 3.4, recommended also update following dependencies upgrading 3.4: - Volar / vue-tsc@^1.8.27 (required) - @vitejs/plugin-vue@^5.0.0 (if using Vite) - nuxt@^3.9.0 (if using Nuxt) - vue-loader@^17.4.0 (if using webpack vue-cli) using TSX Vue, check actions needed Removed: Global JSX Namespace. Make sure longer using deprecated features (if are, warnings console telling so). may removed 3.4. Feature Highlights 2X Faster Parser Improved SFC Build Performance - Context: PR#9674 3.4, completely rewrote template parser. Previously, Vue used recursive descent parser relied many regular expressions look-ahead searches. new parser uses state-machine tokenizer based tokenizer htmlparser2, iterates entire template string once. result parser consistently twice fast templates sizes. Thanks extensive test cases ecosystem-ci, also 100% backwards compatible Vue end users. integrating new parser parts system, also discovered opportunities improve overall SFC compilation performance. benchmarks show ~44% improvement compiling script template parts Vue SFC generating source maps, 3.4 result faster builds projects using Vue SFCs. However, note Vue SFC compilation one part entire build process real world projects. final gain end-to-end build time likely much smaller compared isolated benchmarks. Outside Vue core, new parser also benefit performance Volar / vue-tsc, community plugins need parse Vue SFCs templates, e.g. Vue Macros. Efficient Reactivity System Context: PR#5912 3.4 also ships substantial refactor reactivity system, goal improving re-compute efficiency computed properties. illustrate improved, let's consider following scenario: const count = ref(0) const isEven = computed(() => count.value % 2 === 0) watchEffect(() => console.log(isEven.value)) // logs true count.value = 2 // logs true 3.4, callback watchEffect fire every time count.value changed, even computed result remains same. post-3.4 optimizations, callback fires computed result actually changed. addition, 3.4: - Multiple computed dep changes trigger sync effects once. - Array shift ,unshift ,splice methods trigger sync effects once. addition gains shown benchmarks, reduce unnecessary component re-renders many scenarios retaining full backwards compatibility. defineModel Stable Context: RFC#503 defineModel new <script setup> macro aims simplify implementation components support v-model . previously shipped 3.3 experimental feature, graduated stable status 3.4. also provides better support usage v-model modifiers. Relevant Documentation: v-bind Same-name Shorthand Context: PR#9451 shorten this: <img :id=\"id\" :src=\"src\" :alt=\"alt\"> this: <img :id :src :alt> feature frequently requested past. Originally, concerns usage confused boolean attributes. However, revisiting feature, think makes sense v-bind behave bit like JavaScript native attributes, considering dynamic nature. Improved Hydration Mismatch Errors Context: PR#5953 3.4 ships number improvements hydration mismatch error messages: - Improved clarity wording (rendered server vs. expected client). - message includes DOM node question quickly locate page elements panel. - Hydration mismatch checks also apply class, style, dynamically bound attributes. addition, 3.4 also adds new compile-time flag, __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ , used force hydration mismatch errors include full details even production. Error Code Compile-time Flag Reference reduce bundle size, Vue drops long error message strings production builds. However, means errors caught error handlers production receive short error codes difficult decipher without diving Vue's source code. improve this, added Production Error Reference Page documentation. error codes automatically generated latest version Vue stable release. also added Compile-Time Flags Reference instructions configure flags different build tools. Removed Deprecated Features Global JSX Namespace Starting 3.4, Vue longer registers global JSX namespace default. necessary avoid global namespace collision React TSX libs co-exist project. affect SFC-only users latest version Volar. using TSX, two options: Explicitly set jsxImportSource 'vue' intsconfig.json upgrading 3.4. also opt-in per file adding a/* @jsxImportSource vue */ comment top file.If code depends presence global JSX namespace, e.g. usage types likeJSX.Element etc., retain exact pre-3.4 global behavior explicitly referencingvue/jsx , registers globalJSX namespace. Note type-only breaking change minor release, adheres release policy. Removed Features - Reactivity Transform marked deprecated 3.3 removed 3.4. change require major due feature experimental. Users wish continue using feature via Vue Macros plugin. app.config.unwrapInjectedRef removed. deprecated enabled default 3.3. 3.4 longer possible disable behavior.@vnodeXXX event listeners templates compiler error instead deprecation warning. Use@vue:XXX listeners instead.v-is directive removed. deprecated 3.3. Use theis attribute withvue: prefix instead."},
{"source": "https://blog.vuejs.org/posts/vue-3-5", "title": "Announcing Vue 3.5", "text": "- Published Announcing Vue 3.5 - Authors - Name - Evan - @youyuxi Today excited announce release Vue 3.5 \"Tengen Toppa Gurren Lagann\"! minor release contains breaking changes includes internal improvements useful new features. cover highlights blog post - full list changes new features, please consult full changelog GitHub. Reactivity System Optimizations 3.5, Vue's reactivity system undergone another major refactor achieves better performance significantly improved memory usage (-56%) behavior changes. refactor also resolves stale computed values memory issues caused hanging computeds SSR. addition, 3.5 also optimizes reactivity tracking large, deeply reactive arrays, making operations 10x faster cases. Reactive Props Destructure Reactive Props Destructure stabilized 3.5. feature enabled default, variables destructured defineProps call <script setup> reactive. Notably, feature significantly simplifies declaring props default values leveraging JavaScript's native default value syntax: const props = withDefaults( defineProps<{ count?: number msg?: string }>(), { count: 0, msg: 'hello' } ) const { count = 0, msg = 'hello' } = defineProps<{ count?: number message?: string }>() Access destructured variable, e.g. count , automatically compiled props.count compiler, tracked access. Similar props.count , watching destructured prop variable passing composable retaining reactivity requires wrapping getter: watch(count /* ... */) // ^ results compile-time error watch(() => count /* ... */) // ^ wrap getter, works expected // composables normalize input `toValue()` useDynamicCount(() => count) prefer better distinguish destructured props normal variables, @vue/language-tools 2.1 shipped opt-in setting enable inlay hints them: Details: - See docs usage caveats. - See RFC#502 history design rationale behind feature. SSR Improvements 3.5 brings long-requested improvements server-side rendering (SSR). Lazy Hydration Async components control hydrated specifying strategy via hydrate option defineAsyncComponent() API. example, hydrate component becomes visible: import { defineAsyncComponent, hydrateOnVisible } 'vue' const AsyncComp = defineAsyncComponent({ loader: () => import('./Comp.vue'), hydrate: hydrateOnVisible() }) core API intentionally lower level Nuxt team already building higher-level syntax sugar top feature. Details: PR#11458 useId() useId() API used generate unique-per-application IDs guaranteed stable across server client renders. used generate IDs form elements accessibility attributes, used SSR applications without leading hydration mismatches: <script setup> import { useId } 'vue' const id = useId() </script> <template> <form> <label :for=\"id\">Name:</label> <input :id=\"id\" type=\"text\" /> </form> </template> Details: PR#11404 data-allow-mismatch cases client value inevitably different server counterpart (e.g. dates), suppress resulting hydration mismatch warnings data-allow-mismatch attributes: <span data-allow-mismatch>{{ data.toLocaleString() }}</span> also limit types mismatches allowed providing value attribute, possible values text , children , class , style , attribute . Custom Elements Improvements 3.5 fixes many long-standing issues related defineCustomElement() API, adds number new capabilities authoring custom elements Vue: - Support app configurations custom elements via configureApp option. - Add useHost() ,useShadowRoot() , andthis.$host APIs accessing host element shadow root custom element. - Support mounting custom elements without Shadow DOM passing shadowRoot: false . - Support providing nonce option, attached to<style> tags injected custom elements. new custom-element-only options passed defineCustomElement via second argument: import MyElement './MyElement.ce.vue' defineCustomElements(MyElement, { shadowRoot: false, nonce: 'xxx', configureApp(app) { app.config.errorHandler = ... } }) Notable Features useTemplateRef() 3.5 introduces new way obtaining Template Refs via useTemplateRef() API: <script setup> import { useTemplateRef } 'vue' const inputRef = useTemplateRef('input') </script> <template> <input ref=\"input\"> </template> Prior 3.5, recommended using plain refs variable names matching static ref attributes. old approach required ref attributes analyzable compiler thus limited static ref attributes. comparison, useTemplateRef() matches refs via runtime string IDs, therefore supporting dynamic ref bindings changing IDs. @vue/language-tools 2.1 also implemented special support new syntax, get auto-completion warnings using useTemplateRef() based presence ref attributes template: Deferred Teleport known constraint built-in <Teleport> component target element must exist time teleport component mounted. prevented users teleporting content elements rendered Vue teleport. 3.5, introduced defer prop <Teleport> mounts current render cycle, work: <Teleport defer target=\"#container\">...</Teleport> <div id=\"container\"></div> behavior requires defer prop default behavior needs backwards compatible. Details: PR#11387 onWatcherCleanup() 3.5 introduces globally imported API, onWatcherCleanup() , registering cleanup callbacks watchers: import { watch, onWatcherCleanup } 'vue' watch(id, (newId) => { const controller = new AbortController() fetch(`/api/${newId}`, { signal: controller.signal }).then(() => { // callback logic }) onWatcherCleanup(() => { // abort stale request controller.abort() }) }) - Related: new docs section Side Effect Cleanup comprehensive list changes features 3.5, check full changelog GitHub. Happy hacking!"},
{"source": "https://blog.vuejs.org/posts/vue-3-as-the-new-default", "title": "Vue 3 as the New Default", "text": "- Published Vue 3 New Default - Authors - Name - Evan - @youyuxi TL;DR: Vue 3 new default version Monday, February 7, 2022! Make sure read Potential Required Actions section see need make certain changes switch avoid breakage. Library Framework Vue first started, runtime library. years, evolved framework encompasses many sub projects: - core library, i.e. vue npm package - documentation, enough content considered book - build toolchain, i.e. Vue CLI, vue-loader supporting packages - Vue Router building SPA - Vuex state management - Browser devtools extension debugging profiling - Vetur, VSCode extension Single-File Component IDE support - ESLint plugin static style / error checking - Vue Test Utils component testing - Custom JSX transforms leverages Vue's runtime features - VuePress Vue-based static site generation possible Vue community-driven project. Many projects started community members later became Vue team members. rest originally started me, almost entirely maintained team (with exception core library). Soft Launch Vue 3 core releasing new major version, parts framework needed move forward together. also needed provide migration path Vue 2 users. massive undertaking community-drive team like Vue. Vue 3 core ready, parts framework either beta still awaiting update. decided go ahead release core early adopters, library authors higher-level frameworks start building worked rest framework. time, kept Vue 2 default documentation npm installs. knew many users, Vue 2 still provided coherent comprehensive experience parts Vue 3 refined. New Vue soft launch process took longer hoped, finally here: excited announce Vue 3 become new default version Monday, February 7, 2022. Outside Vue core, improved almost every aspect framework: - Blazing fast, Vite-powered build toolchain - ergonomic Composition API syntax via <script setup> - Improved TypeScript IDE support Single File Components via Volar - Command line type checking SFCs via vue-tsc - Simpler state management via Pinia - New devtools extension simultaneous Vue 2 / Vue 3 support plugin system allows community libraries hook devtools panels also completely reworked main documentation. new vuejs.org (currently staging) provide updated framework overview recommendations, flexible learning paths users different backgrounds, ability toggle Options API Composition API throughout guide examples, many new deep dive sections. also fast - discuss details separate blog post soon. Version Switch Details details mean \"the new default\". addition, please read Potential Required Actions section see need make certain changes switch avoid breakage. npm dist tags npm install vue installs Vue 3 default.The latest dist tag official npm packages point Vue 3 compatible versions, includingvue-router ,vuex ,vue-loader , and@vue/test-utils . Official docs sites documentation official sites default Vue 3 versions. include: - vuejs.org - router.vuejs.org - vuex.vuejs.org - vue-test-utils.vuejs.org (moved test-utils.vuejs.org) - template-explorer.vuejs.org current Vue 2 versions sites moved new addresses (the version prefixes indicate libraries' respective versions, Vue core's): - vuejs.org -> v2.vuejs.org (old v2 URLs auto redirect new address) - router.vuejs.org -> v3.router.vuejs.org - vuex.vuejs.org -> v3.vuex.vuejs.org - vue-test-utils.vuejs.org -> v1.test-utils.vuejs.org - template-explorer.vuejs.org -> v2.template-explorer.vuejs.org GitHub repos GitHub repos vuejs organization switched Vue 3 versions default branch. addition, renamed following repos remove next names: vuejs/vue-next ->vuejs/core vuejs/vue-router-next ->vuejs/router vuejs/docs-next ->vuejs/docs vuejs/vue-test-utils-next ->vuejs/test-utils vuejs/jsx-next ->vuejs/babel-plugin-jsx Translation repos main documentation moved vuejs-translations organization. GitHub handles repo directs automatically, previous links source code issues still work. Devtools extension Devtools v6, previously published beta channel Chrome Web Store, published stable channel. previous version devtools extension still available moved legacy channel. Potential Required Actions Unversioned CDN Usage using Vue 2 via CDN link without specifying version, make sure specify version range via @2 : - <script src=\"https://unpkg.com/vue\"></script> + <script src=\"https://unpkg.com/vue@2\"></script> - <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js\"></script> + <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js\"></script> Note: even using Vue 3, also always specify version range production avoid accidentally loading future major versions. NPM latest Tag installing Vue official libraries npm using latest tag * , please update explicitly use Vue 2 compatible versions: { \"dependencies\": { - \"vue\": \"latest\", + \"vue\": \"^2.6.14\", - \"vue-router\": \"latest\", + \"vue-router\": \"^3.5.3\", - \"vuex\": \"latest\" + \"vuex\": \"^3.6.2\" }, \"devDependencies\": { - \"vue-loader\": \"latest\", + \"vue-loader\": \"^15.9.8\", - \"@vue/test-utils\": \"latest\" + \"@vue/test-utils\": \"^1.3.0\" } }"},
{"source": "https://blog.vuejs.org/posts/vue-3-as-the-new-default.html", "title": "Vue 3 as the New Default", "text": "- Published Vue 3 New Default - Authors - Name - Evan - @youyuxi TL;DR: Vue 3 new default version Monday, February 7, 2022! Make sure read Potential Required Actions section see need make certain changes switch avoid breakage. Library Framework Vue first started, runtime library. years, evolved framework encompasses many sub projects: - core library, i.e. vue npm package - documentation, enough content considered book - build toolchain, i.e. Vue CLI, vue-loader supporting packages - Vue Router building SPA - Vuex state management - Browser devtools extension debugging profiling - Vetur, VSCode extension Single-File Component IDE support - ESLint plugin static style / error checking - Vue Test Utils component testing - Custom JSX transforms leverages Vue's runtime features - VuePress Vue-based static site generation possible Vue community-driven project. Many projects started community members later became Vue team members. rest originally started me, almost entirely maintained team (with exception core library). Soft Launch Vue 3 core releasing new major version, parts framework needed move forward together. also needed provide migration path Vue 2 users. massive undertaking community-drive team like Vue. Vue 3 core ready, parts framework either beta still awaiting update. decided go ahead release core early adopters, library authors higher-level frameworks start building worked rest framework. time, kept Vue 2 default documentation npm installs. knew many users, Vue 2 still provided coherent comprehensive experience parts Vue 3 refined. New Vue soft launch process took longer hoped, finally here: excited announce Vue 3 become new default version Monday, February 7, 2022. Outside Vue core, improved almost every aspect framework: - Blazing fast, Vite-powered build toolchain - ergonomic Composition API syntax via <script setup> - Improved TypeScript IDE support Single File Components via Volar - Command line type checking SFCs via vue-tsc - Simpler state management via Pinia - New devtools extension simultaneous Vue 2 / Vue 3 support plugin system allows community libraries hook devtools panels also completely reworked main documentation. new vuejs.org (currently staging) provide updated framework overview recommendations, flexible learning paths users different backgrounds, ability toggle Options API Composition API throughout guide examples, many new deep dive sections. also fast - discuss details separate blog post soon. Version Switch Details details mean \"the new default\". addition, please read Potential Required Actions section see need make certain changes switch avoid breakage. npm dist tags npm install vue installs Vue 3 default.The latest dist tag official npm packages point Vue 3 compatible versions, includingvue-router ,vuex ,vue-loader , and@vue/test-utils . Official docs sites documentation official sites default Vue 3 versions. include: - vuejs.org - router.vuejs.org - vuex.vuejs.org - vue-test-utils.vuejs.org (moved test-utils.vuejs.org) - template-explorer.vuejs.org current Vue 2 versions sites moved new addresses (the version prefixes indicate libraries' respective versions, Vue core's): - vuejs.org -> v2.vuejs.org (old v2 URLs auto redirect new address) - router.vuejs.org -> v3.router.vuejs.org - vuex.vuejs.org -> v3.vuex.vuejs.org - vue-test-utils.vuejs.org -> v1.test-utils.vuejs.org - template-explorer.vuejs.org -> v2.template-explorer.vuejs.org GitHub repos GitHub repos vuejs organization switched Vue 3 versions default branch. addition, renamed following repos remove next names: vuejs/vue-next ->vuejs/core vuejs/vue-router-next ->vuejs/router vuejs/docs-next ->vuejs/docs vuejs/vue-test-utils-next ->vuejs/test-utils vuejs/jsx-next ->vuejs/babel-plugin-jsx Translation repos main documentation moved vuejs-translations organization. GitHub handles repo directs automatically, previous links source code issues still work. Devtools extension Devtools v6, previously published beta channel Chrome Web Store, published stable channel. previous version devtools extension still available moved legacy channel. Potential Required Actions Unversioned CDN Usage using Vue 2 via CDN link without specifying version, make sure specify version range via @2 : - <script src=\"https://unpkg.com/vue\"></script> + <script src=\"https://unpkg.com/vue@2\"></script> - <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js\"></script> + <script src=\"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.min.js\"></script> Note: even using Vue 3, also always specify version range production avoid accidentally loading future major versions. NPM latest Tag installing Vue official libraries npm using latest tag * , please update explicitly use Vue 2 compatible versions: { \"dependencies\": { - \"vue\": \"latest\", + \"vue\": \"^2.6.14\", - \"vue-router\": \"latest\", + \"vue-router\": \"^3.5.3\", - \"vuex\": \"latest\" + \"vuex\": \"^3.6.2\" }, \"devDependencies\": { - \"vue-loader\": \"latest\", + \"vue-loader\": \"^15.9.8\", - \"@vue/test-utils\": \"latest\" + \"@vue/test-utils\": \"^1.3.0\" } }"},
{"source": "https://blog.vuejs.org/posts/vue-3-one-piece", "title": "Announcing Vue 3.0 \"One Piece\"", "text": "- Published Announcing Vue 3.0 \"One Piece\" - Authors - Name - Evan - @youyuxi Today proud announce official release Vue.js 3.0 \"One Piece\". new major version framework provides improved performance, smaller bundle sizes, better TypeScript integration, new APIs tackling large scale use cases, solid foundation long-term future iterations framework. 3.0 release represents 2 years development efforts, featuring 30+ RFCs, 2,600+ commits, 628 pull requests 99 contributors, plus tremendous amount development documentation work outside core repo. would like express deepest gratitude towards team members taking challenge, contributors pull requests, sponsors backers financial support, wider community participating design discussions providing feedback pre-release versions. Vue independent project created community sustained community, Vue 3.0 possible without consistent support. Taking \"Progressive Framework\" Concept Vue simple mission humble beginning: approachable framework anyone quickly learn. user base grew, framework also grew scope adapt increasing demands. time, evolved call \"Progressive Framework\": framework learned adopted incrementally, providing continued support user tackles demanding scenarios. Today, 1.3 million users worldwide*, seeing Vue used wildly diverse range scenarios, sprinkling interactivity traditional server-rendered pages, full-blown single page applications hundreds components. Vue 3 takes flexibility even further. Layered internal modules Vue 3.0 core still used via simple <script> tag, internals re-written ground collection decoupled modules. new architecture provides better maintainability, allows end users shave half runtime size via tree-shaking. modules also exposes lower-level APIs unlocks many advanced use cases: - compiler supports custom AST transforms build-time customizations (e.g. build-time i18n) - core runtime provides first-class API creating custom renderers targeting different render targets (e.g. native mobile, WebGL terminals). default DOM renderer built using API. - @vue/reactivity module exports functions provide direct access Vue's reactivity system, used standalone package. used pair templating solutions (e.g. lit-html) even non-UI scenarios. New APIs tackling scale 2.x Object-based API largely intact Vue 3. However, 3.0 also introduces Composition API - new set APIs aimed addressing pain points Vue usage large scale applications. Composition API builds top reactivity API enables logic composition reuse similar React hooks, flexible code organization patterns, reliable type inference 2.x Object-based API. Composition API also used Vue 2.x via @vue/composition-api plugin, already Composition API utility libraries work Vue 2 3 (e.g. vueuse, vue-composable). Performance Improvements Vue 3 demonstrated significant performance improvements Vue 2 terms bundle size (up 41% lighter tree-shaking), initial render (up 55% faster), updates (up 133% faster), memory usage (up 54% less). Vue 3, taken approach \"compiler-informed Virtual DOM\": template compiler performs aggressive optimizations generates render function code hoists static content, leaves runtime hints binding types, importantly, flattens dynamic nodes inside template reduce cost runtime traversal. user therefore gets best worlds: compiler-optimized performance templates, direct control via manual render functions use case demands. Improved TypeScript integration Vue 3's codebase written TypeScript, automatically generated, tested, bundled type definitions always up-to-date. Composition API works great type inference. Vetur, official VSCode extension, supports template expression props type checking leveraging Vue 3's improved internal typing. Oh, Vue 3's typing fully supports TSX that's preference. Experimental Features proposed two new features Singe-File Components (SFC, aka .vue files): <script setup> : syntactic sugar using Composition API inside SFCs<style vars> : state-driven CSS variables inside SFCs features already implemented available Vue 3.0, provided purpose gathering feedback. remain experimental RFCs merged. also implemented currently undocumented <Suspense> component, allows waiting nested async dependencies (async components component async setup() ) initial render branch switch. testing iterating feature Nuxt.js team (Nuxt 3 way) likely solidify 3.1. Phased Release Process release Vue 3.0 marks general readiness framework. frameworks sub projects may still need work reach stable status (specifically router Vuex integration devtools), believe suitable start new, green-field projects Vue 3 today. also encourage library authors start upgrading projects support Vue 3. Check Vue 3 Libraries Guide details framework sub projects. Migration IE11 Support pushed back migration build (v3 build v2 compatible behavior + migration warnings) IE11 build due time constraints, aiming focus Q4 2020. Therefore, users planning migrate existing v2 app require IE11 support aware limitations time. Next Steps near term release, focus on: - Migration build - IE11 support - Router Vuex integration new devtools - improvements template type inference Vetur time being, documentation websites, GitHub branches, npm dist tags Vue 3 v3-targeting projects remain next -denoted status. means npm install vue still install Vue 2.x npm install vue@next install Vue 3. planning switch doc links, branches dist tags default 3.0 early 2021. time, started planning 2.7, last planned minor release 2.x release line. 2.7 backporting compatible improvements v3, emit warnings usage APIs removed/changed v3 help potential migration. planning work 2.7 Q1 2021, directly become LTS upon release 18 months maintenance lifespan. Trying learn Vue 3.0, check new documentation website. existing Vue 2.x user, go directly Migration Guide. - *based Vue Devtools Chrome extension weekly active users reported Google."}]