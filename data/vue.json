{
    "name": "https://vuejs.org/guide",
    "url": "https://https://vuejs.org/guide",
    "pages": [
        {
            "url": "https://vuejs.org",
            "title": "Vue.js - The Progressive JavaScript Framework | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "TheProgressiveJavaScript Framework"
                },
                {
                    "type": "p",
                    "text": "An approachable, performant and versatile framework for building web user interfaces."
                },
                {
                    "type": "p",
                    "text": "Play iconWhy VueGet StartedInstallGet Security Updates for Vue 2"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Approachable"
                },
                {
                    "type": "p",
                    "text": "Builds on top of standard HTML, CSS and JavaScript with intuitive API and world-class documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Performant"
                },
                {
                    "type": "p",
                    "text": "Truly reactive, compiler-optimized rendering system that rarely requires manual optimization."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Versatile"
                },
                {
                    "type": "p",
                    "text": "A rich, incrementally adoptable ecosystem that scales between a library and a full-featured framework."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Platinum Sponsors"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Gold Sponsors"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Docs"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide",
                        "Tutorial",
                        "Examples",
                        "Quick Start",
                        "Glossary",
                        "Error Reference",
                        "Vue 2 Docs",
                        "Migration from Vue 2"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "About"
                },
                {
                    "type": "list",
                    "items": [
                        "FAQ",
                        "Team",
                        "Releases",
                        "Community Guide",
                        "Code of Conduct",
                        "Privacy Policy",
                        "The Documentary"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Experts"
                },
                {
                    "type": "list",
                    "items": [
                        "Partners",
                        "Developers"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Resources"
                },
                {
                    "type": "list",
                    "items": [
                        "Partners",
                        "Developers",
                        "Themes",
                        "UI Components",
                        "Certification",
                        "Jobs",
                        "T-Shirt Shop"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Official Libraries"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue Router",
                        "Pinia",
                        "Tooling Guide"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Video Courses"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue Mastery",
                        "Vue School"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Help"
                },
                {
                    "type": "list",
                    "items": [
                        "Discord Chat",
                        "GitHub Discussions",
                        "DEV Community"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "News"
                },
                {
                    "type": "list",
                    "items": [
                        "Blog",
                        "Twitter",
                        "Events",
                        "Newsletters"
                    ]
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/coc",
            "title": "Code Of Conduct | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Code Of Conduct​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Our Pledge​"
                },
                {
                    "type": "p",
                    "text": "In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, political party, or sexual identity and orientation. Note, however, that religion, political party, or other ideological affiliation provide no exemptions for the behavior we outline as unacceptable in this Code of Conduct."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Our Standards​"
                },
                {
                    "type": "p",
                    "text": "Examples of behavior that contributes to creating a positive environment include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using welcoming and inclusive language",
                        "Being respectful of differing viewpoints and experiences",
                        "Gracefully accepting constructive criticism",
                        "Focusing on what is best for the community",
                        "Showing empathy towards other community members"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of unacceptable behavior by participants include:"
                },
                {
                    "type": "list",
                    "items": [
                        "The use of sexualized language or imagery and unwelcome sexual attention or advances",
                        "Trolling, insulting/derogatory comments, and personal or political attacks",
                        "Public or private harassment",
                        "Publishing others' private information, such as a physical or electronic address, without explicit permission",
                        "Other conduct which could reasonably be considered inappropriate in a professional setting"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Our Responsibilities​"
                },
                {
                    "type": "p",
                    "text": "Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior."
                },
                {
                    "type": "p",
                    "text": "Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Scope​"
                },
                {
                    "type": "p",
                    "text": "This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enforcement​"
                },
                {
                    "type": "p",
                    "text": "Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team atcommunity@vuejs.org. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately."
                },
                {
                    "type": "p",
                    "text": "Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Attribution​"
                },
                {
                    "type": "p",
                    "text": "This Code of Conduct is adapted from theContributor Covenant, version 1.4, available athttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html"
                },
                {
                    "type": "p",
                    "text": "For answers to common questions about this code of conduct, seehttps://www.contributor-covenant.org/faq"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/community-guide",
            "title": "Community Guide | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Community Guide​"
                },
                {
                    "type": "p",
                    "text": "Vue's community is growing incredibly fast and if you're reading this, there's a good chance you're ready to join it. So... welcome!"
                },
                {
                    "type": "p",
                    "text": "Now we'll answer both what the community can do for you and what you can do for the community."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resources​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Code of Conduct​"
                },
                {
                    "type": "p",
                    "text": "OurCode of Conductis a guide to make it easier to enrich all of us and the technical communities in which we participate."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Stay in the Know​"
                },
                {
                    "type": "list",
                    "items": [
                        "Follow ourofficial Twitter account.",
                        "Follow ourteam memberson Twitter or GitHub.",
                        "Follow theRFC discussions.",
                        "Subscribe to theofficial blog."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Get Support​"
                },
                {
                    "type": "list",
                    "items": [
                        "Discord Chat: A place for Vue devs to meet and chat in real time.",
                        "Forum: The best place to ask questions and get answers about Vue and its ecosystem.",
                        "DEV Community: Share and discuss Vue related topics on Dev.to.",
                        "Meetups: Want to find local Vue enthusiasts like yourself? Interested in becoming a community leader? We have the help and support you need right here!",
                        "GitHub: If you have a bug to report or feature to request, that's what the GitHub issues are for. Please respect the rules specified in each repository's issue template.",
                        "Twitter Community (unofficial): A Twitter community, where you can meet other Vue enthusiasts, get help, or just chat about Vue."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Explore the Ecosystem​"
                },
                {
                    "type": "list",
                    "items": [
                        "The Awesome Vue Page: See what other awesome resources have been published by other awesome people.",
                        "Vue Telescope Explorer: Explore websites made with Vue, with insights on what framework / libraries they use.",
                        "Made with Vue.js: showcases of projects and libraries made with Vue.",
                        "The \"Show and Tell\" Subforum: Another great place to check out what others have built with and for the growing Vue ecosystem."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What You Can Do​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Help Fellow Users​"
                },
                {
                    "type": "p",
                    "text": "Code contribution is not the only form of contribution to the Vue community. Answering a question for a fellow Vue user on Discord or the forum is also considered a valuable contribution."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Help Triage Issues​"
                },
                {
                    "type": "p",
                    "text": "Triaging an issue means gathering missing information, running the reproduction, verifying the issue's validity, and investigating the cause of the issue."
                },
                {
                    "type": "p",
                    "text": "We receive many issues inour repositories on GitHubevery single day. Our bandwidth is limited compared to the amount of users we have, so issue triaging alone can take an enormous amount of effort from the team. By helping us triage the issues, you are helping us become more efficient, allowing us to spend time on higher priority work."
                },
                {
                    "type": "p",
                    "text": "You don't have to triage an issue with the goal of fixing it (although that would be nice too). Sharing the result of your investigation, for example the commit that led to the bug, can already save us a ton of time."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Contribute Code​"
                },
                {
                    "type": "p",
                    "text": "Contributing bug fixes or new features is the most direct form of contribution you can make."
                },
                {
                    "type": "p",
                    "text": "The Vue core repository provides acontributing guide, which contains pull request guidelines and information regarding build setup and high-level architecture. Other sub-project repositories may also contain its own contribution guide - please make sure to read them before submitting pull requests."
                },
                {
                    "type": "p",
                    "text": "Bug fixes are welcome at any time. For new features, it is best to discuss the use case and implementation details first in theRFC repo."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Share (and Build) Your Experience​"
                },
                {
                    "type": "p",
                    "text": "Apart from answering questions and sharing resources in the forum and chat, there are a few other less obvious ways to share and expand what you know:"
                },
                {
                    "type": "list",
                    "items": [
                        "Develop learning materials.It's often said that the best way to learn is to teach. If there's something interesting you're doing with Vue, strengthen your expertise by writing a blog post, developing a workshop, or even publishing a gist that you share on social media.",
                        "Watch a repo you care about.This will send you notifications whenever there's activity in that repository, giving you insider knowledge about ongoing discussions and upcoming features. It's a fantastic way to build expertise so that you're eventually able to help address issues and pull requests."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Translate Docs​"
                },
                {
                    "type": "p",
                    "text": "I hope that right now, you're reading this sentence in your preferred language. If not, would you like to help us get there?"
                },
                {
                    "type": "p",
                    "text": "See theTranslations guidefor more details on how you can get involved."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Become a Community Leader​"
                },
                {
                    "type": "p",
                    "text": "There's a lot you can do to help Vue grow in your community:"
                },
                {
                    "type": "list",
                    "items": [
                        "Present at your local meetup.Whether it's giving a talk or running a workshop, you can bring a lot of value to your community by helping both new and experienced Vue developers continue to grow.",
                        "Start your own meetup.If there's not already a Vue meetup in your area, you can start your own! Use theresources at events.vuejs.orgto help you succeed!",
                        "Help meetup organizers.There can never be too much help when it comes to running an event, so offer a hand to help out local organizers to help make every event a success."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you have any questions on how you can get more involved with your local Vue community, reach out on Twitter at@vuejs_events!"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/faq",
            "title": "Frequently Asked Questions | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Frequently Asked Questions​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Who maintains Vue?​"
                },
                {
                    "type": "p",
                    "text": "Vue is an independent, community-driven project. It was created byEvan Youin 2014 as a personal side project. Today, Vue is actively maintained bya team of both full-time and volunteer members from all around the world, where Evan serves as the project lead. You can learn more about the story of Vue in thisdocumentary."
                },
                {
                    "type": "p",
                    "text": "Vue's development is primarily funded through sponsorships and we have been financially sustainable since 2016. If you or your business benefit from Vue, considersponsoring usto support Vue's development!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What's the difference between Vue 2 and Vue 3?​"
                },
                {
                    "type": "p",
                    "text": "Vue 3 is the current, latest major version of Vue. It contains new features that are not present in Vue 2, such as Teleport, Suspense, and multiple root elements per template. It also contains breaking changes that make it incompatible with Vue 2. Full details are documented in theVue 3 Migration Guide."
                },
                {
                    "type": "p",
                    "text": "Despite the differences, the majority of Vue APIs are shared between the two major versions, so most of your Vue 2 knowledge will continue to work in Vue 3. Notably, Composition API was originally a Vue-3-only feature, but has now been backported to Vue 2 and is available inVue 2.7."
                },
                {
                    "type": "p",
                    "text": "In general, Vue 3 provides smaller bundle sizes, better performance, better scalability, and better TypeScript / IDE support. If you are starting a new project today, Vue 3 is the recommended choice. There are only a few reasons for you to consider Vue 2 as of now:"
                },
                {
                    "type": "list",
                    "items": [
                        "You need to support IE11. Vue 3 leverages modern JavaScript features and does not support IE11."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you intend to migrate an existing Vue 2 app to Vue 3, consult themigration guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Is Vue 2 Still Supported?​"
                },
                {
                    "type": "p",
                    "text": "Vue 2.7, which was shipped in July 2022, is the final minor release of the Vue 2 version range. Vue 2 has now entered maintenance mode: it will no longer ship new features, but will continue to receive critical bug fixes and security updates for 18 months starting from the 2.7 release date. This meansVue 2 will reach End of Life on December 31st, 2023."
                },
                {
                    "type": "p",
                    "text": "We believe this should provide plenty of time for most of the ecosystem to migrate over to Vue 3. However, we also understand that there could be teams or projects that cannot upgrade by this timeline while still needing to fulfill security and compliance requirements. We are partnering with industry experts to provide extended support for Vue 2 for teams with such needs - if your team expects to be using Vue 2 beyond the end of 2023, make sure to plan ahead and learn more aboutVue 2 Extended LTS."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What license does Vue use?​"
                },
                {
                    "type": "p",
                    "text": "Vue is a free and open source project released under theMIT License."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What browsers does Vue support?​"
                },
                {
                    "type": "p",
                    "text": "The latest version of Vue (3.x) only supportsbrowsers with native ES2015 support. This excludes IE11. Vue 3.x uses ES2015 features that cannot be polyfilled in legacy browsers, so if you need to support legacy browsers, you will need to use Vue 2.x instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Is Vue reliable?​"
                },
                {
                    "type": "p",
                    "text": "Vue is a mature and battle-tested framework. It is one of the most widely used JavaScript frameworks in production today, with over 1.5 million users worldwide, and is downloaded close to 10 million times a month on npm."
                },
                {
                    "type": "p",
                    "text": "Vue is used in production by renowned organizations in varying capacities all around the world, including Wikimedia Foundation, NASA, Apple, Google, Microsoft, GitLab, Zoom, Tencent, Weibo, Bilibili, Kuaishou, and many more."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Is Vue fast?​"
                },
                {
                    "type": "p",
                    "text": "Vue 3 is one of the most performant mainstream frontend frameworks, and handles most web application use cases with ease, without the need for manual optimizations."
                },
                {
                    "type": "p",
                    "text": "In stress-testing scenarios, Vue outperforms React and Angular by a decent margin in thejs-framework-benchmark. It also goes neck-and-neck against some of the fastest production-level non-Virtual-DOM frameworks in the benchmark."
                },
                {
                    "type": "p",
                    "text": "Do note that synthetic benchmarks like the above focus on raw rendering performance with dedicated optimizations and may not be fully representative of real-world performance results. If you care more about page load performance, you are welcome to audit this very website usingWebPageTestorPageSpeed Insights. This website is powered by Vue itself, with SSG pre-rendering, full page hydration and SPA client-side navigation. It scores 100 in performance on an emulated Moto G4 with 4x CPU throttling over slow 4G networks."
                },
                {
                    "type": "p",
                    "text": "You can learn more about how Vue automatically optimizes runtime performance in theRendering Mechanismsection, and how to optimize a Vue app in particularly demanding cases in thePerformance Optimization Guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Is Vue lightweight?​"
                },
                {
                    "type": "p",
                    "text": "When you use a build tool, many of Vue's APIs are\"tree-shakable\". For example, if you don't use the built-in<Transition>component, it won't be included in the final production bundle."
                },
                {
                    "type": "p",
                    "text": "A hello world Vue app that only uses the absolutely minimal APIs has a baseline size of only around16kb, with minification and brotli compression. The actual size of the application will depend on how many optional features you use from the framework. In the unlikely case where an app uses every single feature that Vue provides, the total runtime size is around27kb."
                },
                {
                    "type": "p",
                    "text": "When using Vue without a build tool, we not only lose tree-shaking, but also have to ship the template compiler to the browser. This bloats up the size to around41kb. Therefore, if you are using Vue primarily for progressive enhancement without a build step, consider usingpetite-vue(only6kb) instead."
                },
                {
                    "type": "p",
                    "text": "Some frameworks, such as Svelte, use a compilation strategy that produces extremely lightweight output in single-component scenarios. However,our researchshows that the size difference heavily depends on the number of components in the application. While Vue has a heavier baseline size, it generates less code per component. In real-world scenarios, a Vue app may very well end up being lighter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Does Vue scale?​"
                },
                {
                    "type": "p",
                    "text": "Yes. Despite a common misconception that Vue is only suitable for simple use cases, Vue is perfectly capable of handling large scale applications:"
                },
                {
                    "type": "list",
                    "items": [
                        "Single-File Componentsprovide a modularized development model that allows different parts of an application to be developed in isolation.",
                        "Composition APIprovides first-class TypeScript integration and enables clean patterns for organizing, extracting and reusing complex logic.",
                        "Comprehensive tooling supportensures a smooth development experience as the application grows.",
                        "Lower barrier to entry and excellent documentation translate to lower onboarding and training costs for new developers."
                    ]
                },
                {
                    "type": "p",
                    "text": "Single-File Componentsprovide a modularized development model that allows different parts of an application to be developed in isolation."
                },
                {
                    "type": "p",
                    "text": "Composition APIprovides first-class TypeScript integration and enables clean patterns for organizing, extracting and reusing complex logic."
                },
                {
                    "type": "p",
                    "text": "Comprehensive tooling supportensures a smooth development experience as the application grows."
                },
                {
                    "type": "p",
                    "text": "Lower barrier to entry and excellent documentation translate to lower onboarding and training costs for new developers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How do I contribute to Vue?​"
                },
                {
                    "type": "p",
                    "text": "We appreciate your interest! Please check out ourCommunity Guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Should I use Options API or Composition API?​"
                },
                {
                    "type": "p",
                    "text": "If you are new to Vue, we provide a high-level comparison between the two styleshere."
                },
                {
                    "type": "p",
                    "text": "If you have previously used Options API and are currently evaluating Composition API, check outthis FAQ."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Should I use JavaScript or TypeScript with Vue?​"
                },
                {
                    "type": "p",
                    "text": "While Vue itself is implemented in TypeScript and provides first-class TypeScript support, it does not enforce an opinion on whether you should use TypeScript as a user."
                },
                {
                    "type": "p",
                    "text": "TypeScript support is an important consideration when new features are added to Vue. APIs that are designed with TypeScript in mind are typically easier for IDEs and linters to understand, even if you aren't using TypeScript yourself. Everybody wins. Vue APIs are also designed to work the same way in both JavaScript and TypeScript as much as possible."
                },
                {
                    "type": "p",
                    "text": "Adopting TypeScript involves a trade-off between onboarding complexity and long-term maintainability gains. Whether such a trade-off can be justified can vary depending on your team's background and project scale, but Vue isn't really an influencing factor in making that decision."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How does Vue compare to Web Components?​"
                },
                {
                    "type": "p",
                    "text": "Vue was created before Web Components were natively available, and some aspects of Vue's design (e.g. slots) were inspired by the Web Components model."
                },
                {
                    "type": "p",
                    "text": "The Web Components specs are relatively low-level, as they are centered around defining custom elements. As a framework, Vue addresses additional higher-level concerns such as efficient DOM rendering, reactive state management, tooling, client-side routing, and server-side rendering."
                },
                {
                    "type": "p",
                    "text": "Vue also fully supports consuming or exporting to native custom elements - check out theVue and Web Components Guidefor more details."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/privacy",
            "title": "Vue.js Privacy Policy | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue.js Privacy Policy​"
                },
                {
                    "type": "p",
                    "text": "Effective Date: May 3, 2024"
                },
                {
                    "type": "p",
                    "text": "This Privacy Policy describes the Vue.js organization (\"Vue\", \"we\", \"us\" or \"our\") practices for handling your information in connection with this website (https://vuejs.org) and our open source-related websites (\"Websites\") and any content, related documentation, information and services (e.g. tutorials, tools to support the developer workflow, access to resources, etc.) made available to you on this website (collectively, the \"Services\"). This Privacy Policy describes the personal information we process to support our Services."
                },
                {
                    "type": "p",
                    "text": "For clarity, this Privacy Policy does not apply to any:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use of open source code, documentation or specifications made available on GitHub (https://github.com/), which are governed by the terms of the applicable open source license;",
                        "Pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or",
                        "Usage statistics of our published packages on NPM (https://npmjs.com/), which are governed by NPM's terms and conditions; or",
                        "Usage statistics of our published browser / IDE extensions collected by the browser / IDE vendors. Such statistics are governed by the vendors' respective terms and conditions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use of open source code, documentation or specifications made available on GitHub (https://github.com/), which are governed by the terms of the applicable open source license;"
                },
                {
                    "type": "p",
                    "text": "Pull requests, issues and any other interactions or features related to participation in open source projects on GitHub, which are governed by GitHub's terms and conditions; or"
                },
                {
                    "type": "p",
                    "text": "Usage statistics of our published packages on NPM (https://npmjs.com/), which are governed by NPM's terms and conditions; or"
                },
                {
                    "type": "p",
                    "text": "Usage statistics of our published browser / IDE extensions collected by the browser / IDE vendors. Such statistics are governed by the vendors' respective terms and conditions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What Kinds of Information Do We Collect?​"
                },
                {
                    "type": "p",
                    "text": "We donotcollect or store any type of personal data, whether through our websites or through our published npm packages or browser / IDE extensions."
                },
                {
                    "type": "p",
                    "text": "We may collect anonymized data via 3rd party services integrated in our websites:"
                },
                {
                    "type": "list",
                    "items": [
                        "Visitor data to our websites.Our website analytics is powered byFathom Analytics, which doesn't use cookies and complies with the GDPR, ePrivacy (including PECR), COPPA and CCPA. Using this privacy-friendly website analytics software, your IP address is only briefly processed, and we (running this website) have no way of identifying you. As per the CCPA, your personal information is de-identified. You can read more about this on Fathom Analytics' website.Fathom Analytics' Privacy Policy:https://usefathom.com/legal/privacy",
                        "Fathom Analytics' Privacy Policy:https://usefathom.com/legal/privacy",
                        "Usage data of the search functionality.Our search functionality is powered byAlgolia DocSearch, which does not perform any type of user tracking or fingerprinting, and does not use cookies. Algolia services are GPDR compliant, CCPA compliant, and TRUSTe Certified.Algolia's privacy policy:https://www.algolia.com/policies/privacy/Algolia's security and privacy compliance:https://www.algolia.com/distributed-secure/security-compliance/",
                        "Algolia's privacy policy:https://www.algolia.com/policies/privacy/",
                        "Algolia's security and privacy compliance:https://www.algolia.com/distributed-secure/security-compliance/"
                    ]
                },
                {
                    "type": "p",
                    "text": "Visitor data to our websites.Our website analytics is powered byFathom Analytics, which doesn't use cookies and complies with the GDPR, ePrivacy (including PECR), COPPA and CCPA. Using this privacy-friendly website analytics software, your IP address is only briefly processed, and we (running this website) have no way of identifying you. As per the CCPA, your personal information is de-identified. You can read more about this on Fathom Analytics' website."
                },
                {
                    "type": "list",
                    "items": [
                        "Fathom Analytics' Privacy Policy:https://usefathom.com/legal/privacy"
                    ]
                },
                {
                    "type": "p",
                    "text": "Usage data of the search functionality.Our search functionality is powered byAlgolia DocSearch, which does not perform any type of user tracking or fingerprinting, and does not use cookies. Algolia services are GPDR compliant, CCPA compliant, and TRUSTe Certified."
                },
                {
                    "type": "list",
                    "items": [
                        "Algolia's privacy policy:https://www.algolia.com/policies/privacy/",
                        "Algolia's security and privacy compliance:https://www.algolia.com/distributed-secure/security-compliance/"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How Do We Use Information?​"
                },
                {
                    "type": "p",
                    "text": "The sole purpose of collecting the aforementioned data is to understand our website traffic and usage in the most privacy-friendly way possible so that we can continually improve our website and documentation quality. The lawful basis as per the GDPR is \"Article 6(1)(f); where our legitimate interests are to improve our website and business continually.\" As per the explanation, no personal data is stored over time."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Data Retention​"
                },
                {
                    "type": "p",
                    "text": "All data collected are stored on aforementioned 3rd party services and are subject to the services' respective data retention policies."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Questions​"
                },
                {
                    "type": "p",
                    "text": "If you have any questions about this Privacy Policy or our practices, please contact us via email athello@vuejs.org."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/releases",
            "title": "Releases | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Releases​"
                },
                {
                    "type": "p",
                    "text": "Checking latest version..."
                },
                {
                    "type": "p",
                    "text": "A full changelog of past releases is available onGitHub."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Release Cycle​"
                },
                {
                    "type": "p",
                    "text": "Vue does not have a fixed release cycle."
                },
                {
                    "type": "list",
                    "items": [
                        "Patch releases are released as needed.",
                        "Minor releases always contain new features, with a typical time frame of 3~6 months in between. Minor releases always go through a beta pre-release phase.",
                        "Major releases will be announced ahead of time, and will go through an early discussion phase and alpha / beta pre-release phases."
                    ]
                },
                {
                    "type": "p",
                    "text": "Patch releases are released as needed."
                },
                {
                    "type": "p",
                    "text": "Minor releases always contain new features, with a typical time frame of 3~6 months in between. Minor releases always go through a beta pre-release phase."
                },
                {
                    "type": "p",
                    "text": "Major releases will be announced ahead of time, and will go through an early discussion phase and alpha / beta pre-release phases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Semantic Versioning Edge Cases​"
                },
                {
                    "type": "p",
                    "text": "Vue releases followSemantic Versioningwith a few edge cases."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript Definitions​"
                },
                {
                    "type": "p",
                    "text": "We may ship incompatible changes to TypeScript definitions betweenminorversions. This is because:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sometimes TypeScript itself ships incompatible changes between minor versions, and we may have to adjust types to support newer versions of TypeScript.",
                        "Occasionally we may need to adopt features that are only available in a newer version of TypeScript, raising the minimum required version of TypeScript."
                    ]
                },
                {
                    "type": "p",
                    "text": "Sometimes TypeScript itself ships incompatible changes between minor versions, and we may have to adjust types to support newer versions of TypeScript."
                },
                {
                    "type": "p",
                    "text": "Occasionally we may need to adopt features that are only available in a newer version of TypeScript, raising the minimum required version of TypeScript."
                },
                {
                    "type": "p",
                    "text": "If you are using TypeScript, you can use a semver range that locks the current minor and manually upgrade when a new minor version of Vue is released."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Compiled Code Compatibility with Older Runtime​"
                },
                {
                    "type": "p",
                    "text": "A newerminorversion of Vue compiler may generate code that isn't compatible with the Vue runtime from an older minor version. For example, code generated by Vue 3.2 compiler may not be fully compatible if consumed by the runtime from Vue 3.1."
                },
                {
                    "type": "p",
                    "text": "This is only a concern for library authors, because in applications, the compiler version and the runtime version is always the same. A version mismatch can only happen if you ship pre-compiled Vue component code as a package, and a consumer uses it in a project using an older version of Vue. As a result, your package may need to explicitly declare a minimum required minor version of Vue."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre Releases​"
                },
                {
                    "type": "p",
                    "text": "Minor releases typically go through a non-fixed number of beta releases. Major releases will go through an alpha phase and a beta phase."
                },
                {
                    "type": "p",
                    "text": "Additionally, we publish canary releases every week from themainandminorbranches on GitHub. They are published as different packages to avoid bloating the npm metadata of the stable channel. You can install them vianpx install-vue@canaryornpx install-vue@canary-minor, respectively."
                },
                {
                    "type": "p",
                    "text": "Pre-releases are meant for integration / stability testing, and for early adopters to provide feedback for unstable features. Do not use pre-releases in production. All pre-releases are considered unstable and may ship breaking changes in between, so always pin to exact versions when using pre-releases."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deprecations​"
                },
                {
                    "type": "p",
                    "text": "We may periodically deprecate features that have new, better replacements in minor releases. Deprecated features will continue to work, and will be removed in the next major release after it entered deprecated status."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "RFCs​"
                },
                {
                    "type": "p",
                    "text": "New features with substantial API surface and major changes to Vue will go through theRequest for Comments(RFC) process. The RFC process is intended to provide a consistent and controlled path for new features to enter the framework, and give the users an opportunity to participate and offer feedback in the design process."
                },
                {
                    "type": "p",
                    "text": "The RFC process is conducted in thevuejs/rfcsrepo on GitHub."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Experimental Features​"
                },
                {
                    "type": "p",
                    "text": "Some features are shipped and documented in a stable version of Vue, but marked as experimental. Experimental features are typically features that have an associated RFC discussion with most of the design problems resolved on paper, but still lacking feedback from real-world usage."
                },
                {
                    "type": "p",
                    "text": "The goal of experimental features is to allow users to provide feedback for them by testing them in a production setting, without having to use an unstable version of Vue. Experimental features themselves are considered unstable, and should only be used in a controlled manner, with the expectation that the feature may change between any release types."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/about/team",
            "title": "Meet the Team | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Meet the Team"
                },
                {
                    "type": "p",
                    "text": "The development of Vue and its ecosystem is guided by an international team, some of whom have chosen to befeatured below."
                },
                {
                    "type": "p",
                    "text": "Learn more about teams"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Team Members"
                },
                {
                    "type": "p",
                    "text": "Core team members are those who are actively involved in the maintenance of one or more core projects. They have made significant contributions to the Vue ecosystem, with a long term commitment to the success of the project and its users."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Core Team Emeriti"
                },
                {
                    "type": "p",
                    "text": "Here we honor some no-longer-active core team members who have made valuable contributions in the past."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Community Partners"
                },
                {
                    "type": "p",
                    "text": "Some members of the Vue community have so enriched it, that they deserve special mention. We've developed a more intimate relationship with these key partners, often coordinating with them on upcoming features and news."
                }
            ]
        },
        {
            "url": "https://vuejs.org/api",
            "title": "API Reference | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "API Reference"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Global API"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Application"
                },
                {
                    "type": "list",
                    "items": [
                        "createApp()",
                        "createSSRApp()",
                        "app.mount()",
                        "app.unmount()",
                        "app.onUnmount()",
                        "app.component()",
                        "app.directive()",
                        "app.use()",
                        "app.mixin()",
                        "app.provide()",
                        "app.runWithContext()",
                        "app.version",
                        "app.config",
                        "app.config.errorHandler",
                        "app.config.warnHandler",
                        "app.config.performance",
                        "app.config.compilerOptions",
                        "app.config.globalProperties",
                        "app.config.optionMergeStrategies",
                        "app.config.idPrefix",
                        "app.config.throwUnhandledErrorInProduction"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "General"
                },
                {
                    "type": "list",
                    "items": [
                        "version",
                        "nextTick()",
                        "defineComponent()",
                        "defineAsyncComponent()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Composition API"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "setup()"
                },
                {
                    "type": "list",
                    "items": [
                        "Basic Usage",
                        "Accessing Props",
                        "Setup Context",
                        "Usage with Render Functions"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactivity: Core"
                },
                {
                    "type": "list",
                    "items": [
                        "ref()",
                        "computed()",
                        "reactive()",
                        "readonly()",
                        "watchEffect()",
                        "watchPostEffect()",
                        "watchSyncEffect()",
                        "watch()",
                        "onWatcherCleanup()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactivity: Utilities"
                },
                {
                    "type": "list",
                    "items": [
                        "isRef()",
                        "unref()",
                        "toRef()",
                        "toValue()",
                        "toRefs()",
                        "isProxy()",
                        "isReactive()",
                        "isReadonly()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactivity: Advanced"
                },
                {
                    "type": "list",
                    "items": [
                        "shallowRef()",
                        "triggerRef()",
                        "customRef()",
                        "shallowReactive()",
                        "shallowReadonly()",
                        "toRaw()",
                        "markRaw()",
                        "effectScope()",
                        "getCurrentScope()",
                        "onScopeDispose()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Lifecycle Hooks"
                },
                {
                    "type": "list",
                    "items": [
                        "onMounted()",
                        "onUpdated()",
                        "onUnmounted()",
                        "onBeforeMount()",
                        "onBeforeUpdate()",
                        "onBeforeUnmount()",
                        "onErrorCaptured()",
                        "onRenderTracked()",
                        "onRenderTriggered()",
                        "onActivated()",
                        "onDeactivated()",
                        "onServerPrefetch()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dependency Injection"
                },
                {
                    "type": "list",
                    "items": [
                        "provide()",
                        "inject()",
                        "hasInjectionContext()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Helpers"
                },
                {
                    "type": "list",
                    "items": [
                        "useAttrs()",
                        "useSlots()",
                        "useModel()",
                        "useTemplateRef()",
                        "useId()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Options API"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options: State"
                },
                {
                    "type": "list",
                    "items": [
                        "data",
                        "props",
                        "computed",
                        "methods",
                        "watch",
                        "emits",
                        "expose"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options: Rendering"
                },
                {
                    "type": "list",
                    "items": [
                        "template",
                        "render",
                        "compilerOptions",
                        "slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options: Lifecycle"
                },
                {
                    "type": "list",
                    "items": [
                        "beforeCreate",
                        "created",
                        "beforeMount",
                        "mounted",
                        "beforeUpdate",
                        "updated",
                        "beforeUnmount",
                        "unmounted",
                        "errorCaptured",
                        "renderTracked",
                        "renderTriggered",
                        "activated",
                        "deactivated",
                        "serverPrefetch"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options: Composition"
                },
                {
                    "type": "list",
                    "items": [
                        "provide",
                        "inject",
                        "mixins",
                        "extends"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options: Misc"
                },
                {
                    "type": "list",
                    "items": [
                        "name",
                        "inheritAttrs",
                        "components",
                        "directives"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Component Instance"
                },
                {
                    "type": "list",
                    "items": [
                        "$data",
                        "$props",
                        "$el",
                        "$options",
                        "$parent",
                        "$root",
                        "$slots",
                        "$refs",
                        "$attrs",
                        "$watch()",
                        "$emit()",
                        "$forceUpdate()",
                        "$nextTick()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Built-ins"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Directives"
                },
                {
                    "type": "list",
                    "items": [
                        "v-text",
                        "v-html",
                        "v-show",
                        "v-if",
                        "v-else",
                        "v-else-if",
                        "v-for",
                        "v-on",
                        "v-bind",
                        "v-model",
                        "v-slot",
                        "v-pre",
                        "v-once",
                        "v-memo",
                        "v-cloak"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Components"
                },
                {
                    "type": "list",
                    "items": [
                        "<Transition>",
                        "<TransitionGroup>",
                        "<KeepAlive>",
                        "<Teleport>",
                        "<Suspense>"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Special Elements"
                },
                {
                    "type": "list",
                    "items": [
                        "<component>",
                        "<slot>",
                        "<template>"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Special Attributes"
                },
                {
                    "type": "list",
                    "items": [
                        "key",
                        "ref",
                        "is"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-File Component"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Syntax Specification"
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "Language Blocks",
                        "Automatic Name Inference",
                        "Pre-Processors",
                        "src Imports",
                        "Comments"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<script setup>"
                },
                {
                    "type": "list",
                    "items": [
                        "Basic Syntax",
                        "Reactivity",
                        "Using Components",
                        "Using Custom Directives",
                        "defineProps() & defineEmits()",
                        "defineModel()",
                        "defineExpose()",
                        "defineOptions()",
                        "defineSlots()",
                        "useSlots() & useAttrs()",
                        "Usage alongside normal <script>",
                        "Top-level await",
                        "Import Statements",
                        "Generics",
                        "Restrictions"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Features"
                },
                {
                    "type": "list",
                    "items": [
                        "Scoped CSS",
                        "CSS Modules",
                        "v-bind() in CSS"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Advanced APIs"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Elements"
                },
                {
                    "type": "list",
                    "items": [
                        "defineCustomElement()",
                        "useHost()",
                        "useShadowRoot()",
                        "this.$host"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Render Function"
                },
                {
                    "type": "list",
                    "items": [
                        "h()",
                        "mergeProps()",
                        "cloneVNode()",
                        "isVNode()",
                        "resolveComponent()",
                        "resolveDirective()",
                        "withDirectives()",
                        "withModifiers()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Server-Side Rendering"
                },
                {
                    "type": "list",
                    "items": [
                        "renderToString()",
                        "renderToNodeStream()",
                        "pipeToNodeWritable()",
                        "renderToWebStream()",
                        "pipeToWebWritable()",
                        "renderToSimpleStream()",
                        "useSSRContext()",
                        "data-allow-mismatch"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript Utility Types"
                },
                {
                    "type": "list",
                    "items": [
                        "PropType<T>",
                        "MaybeRef<T>",
                        "MaybeRefOrGetter<T>",
                        "ExtractPropTypes<T>",
                        "ExtractPublicPropTypes<T>",
                        "ComponentCustomProperties",
                        "ComponentCustomOptions",
                        "ComponentCustomProps",
                        "CSSProperties"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Renderer"
                },
                {
                    "type": "list",
                    "items": [
                        "createRenderer()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Compile-Time Flags"
                },
                {
                    "type": "list",
                    "items": [
                        "__VUE_OPTIONS_API__",
                        "__VUE_PROD_DEVTOOLS__",
                        "__VUE_PROD_HYDRATION_MISMATCH_DETAILS__",
                        "Configuration Guides"
                    ]
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/application#app-config-errorhandler",
            "title": "Application API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Application API​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "createApp()​"
                },
                {
                    "type": "p",
                    "text": "Creates an application instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctioncreateApp(rootComponent:Component,rootProps?:object):App",
                        "DetailsThe first argument is the root component. The second optional argument is the props to be passed to the root component.",
                        "ExampleWith inline root component:jsimport{ createApp }from'vue'constapp=createApp({/* root component options */})With imported component:jsimport{ createApp }from'vue'importAppfrom'./App.vue'constapp=createApp(App)",
                        "See alsoGuide - Creating a Vue Application"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functioncreateApp(rootComponent:Component,rootProps?:object):App"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument is the root component. The second optional argument is the props to be passed to the root component."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "With inline root component:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({/* root component options */})"
                },
                {
                    "type": "p",
                    "text": "With imported component:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'importAppfrom'./App.vue'constapp=createApp(App)"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Creating a Vue Application"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "createSSRApp()​"
                },
                {
                    "type": "p",
                    "text": "Creates an application instance inSSR Hydrationmode. Usage is exactly the same ascreateApp()."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.mount()​"
                },
                {
                    "type": "p",
                    "text": "Mounts the application instance in a container element."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{mount(rootContainer:Element|string):ComponentPublicInstance}",
                        "DetailsThe argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance.If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, theinnerHTMLof the container will be used as the template.In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there aremismatches, the existing DOM nodes will be morphed to match the expected output.For each app instance,mount()can only be called once.",
                        "Examplejsimport{ createApp }from'vue'constapp=createApp(/* ... */)app.mount('#app')Can also mount to an actual DOM element:jsapp.mount(document.body.firstChild)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{mount(rootContainer:Element|string):ComponentPublicInstance}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The argument can either be an actual DOM element or a CSS selector (the first matched element will be used). Returns the root component instance."
                },
                {
                    "type": "p",
                    "text": "If the component has a template or a render function defined, it will replace any existing DOM nodes inside the container. Otherwise, if the runtime compiler is available, theinnerHTMLof the container will be used as the template."
                },
                {
                    "type": "p",
                    "text": "In SSR hydration mode, it will hydrate the existing DOM nodes inside the container. If there aremismatches, the existing DOM nodes will be morphed to match the expected output."
                },
                {
                    "type": "p",
                    "text": "For each app instance,mount()can only be called once."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp(/* ... */)app.mount('#app')"
                },
                {
                    "type": "p",
                    "text": "Can also mount to an actual DOM element:"
                },
                {
                    "type": "code",
                    "code": "app.mount(document.body.firstChild)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.unmount()​"
                },
                {
                    "type": "p",
                    "text": "Unmounts a mounted application instance, triggering the unmount lifecycle hooks for all components in the application's component tree."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{unmount():void}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{unmount():void}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.onUnmount()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called when the app is unmounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{onUnmount(callback:()=>any):void}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{onUnmount(callback:()=>any):void}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.component()​"
                },
                {
                    "type": "p",
                    "text": "Registers a global component if passing both a name string and a component definition, or retrieves an already registered one if only the name is passed."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{component(name:string):Component|undefinedcomponent(name:string,component:Component):this}",
                        "Examplejsimport{ createApp }from'vue'constapp=createApp({})// register an options objectapp.component('my-component', {/* ... */})// retrieve a registered componentconstMyComponent=app.component('my-component')",
                        "See alsoComponent Registration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{component(name:string):Component|undefinedcomponent(name:string,component:Component):this}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({})// register an options objectapp.component('my-component', {/* ... */})// retrieve a registered componentconstMyComponent=app.component('my-component')"
                },
                {
                    "type": "p",
                    "text": "See alsoComponent Registration"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.directive()​"
                },
                {
                    "type": "p",
                    "text": "Registers a global custom directive if passing both a name string and a directive definition, or retrieves an already registered one if only the name is passed."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{directive(name:string):Directive|undefineddirective(name:string,directive:Directive):this}",
                        "Examplejsimport{ createApp }from'vue'constapp=createApp({/* ... */})// register (object directive)app.directive('my-directive', {/* custom directive hooks */})// register (function directive shorthand)app.directive('my-directive', ()=>{/* ... */})// retrieve a registered directiveconstmyDirective=app.directive('my-directive')",
                        "See alsoCustom Directives"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{directive(name:string):Directive|undefineddirective(name:string,directive:Directive):this}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({/* ... */})// register (object directive)app.directive('my-directive', {/* custom directive hooks */})// register (function directive shorthand)app.directive('my-directive', ()=>{/* ... */})// retrieve a registered directiveconstmyDirective=app.directive('my-directive')"
                },
                {
                    "type": "p",
                    "text": "See alsoCustom Directives"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.use()​"
                },
                {
                    "type": "p",
                    "text": "Installs aplugin."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{use(plugin:Plugin,...options:any[]):this}",
                        "DetailsExpects the plugin as the first argument, and optional plugin options as the second argument.The plugin can either be an object with aninstall()method, or just a function that will be used as theinstall()method. The options (second argument ofapp.use()) will be passed along to the plugin'sinstall()method.Whenapp.use()is called on the same plugin multiple times, the plugin will be installed only once.",
                        "Examplejsimport{ createApp }from'vue'importMyPluginfrom'./plugins/MyPlugin'constapp=createApp({/* ... */})app.use(MyPlugin)",
                        "See alsoPlugins"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{use(plugin:Plugin,...options:any[]):this}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Expects the plugin as the first argument, and optional plugin options as the second argument."
                },
                {
                    "type": "p",
                    "text": "The plugin can either be an object with aninstall()method, or just a function that will be used as theinstall()method. The options (second argument ofapp.use()) will be passed along to the plugin'sinstall()method."
                },
                {
                    "type": "p",
                    "text": "Whenapp.use()is called on the same plugin multiple times, the plugin will be installed only once."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'importMyPluginfrom'./plugins/MyPlugin'constapp=createApp({/* ... */})app.use(MyPlugin)"
                },
                {
                    "type": "p",
                    "text": "See alsoPlugins"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.mixin()​"
                },
                {
                    "type": "p",
                    "text": "Applies a global mixin (scoped to the application). A global mixin applies its included options to every component instance in the application."
                },
                {
                    "type": "p",
                    "text": "Not Recommended"
                },
                {
                    "type": "p",
                    "text": "Mixins are supported in Vue 3 mainly for backwards compatibility, due to their widespread use in ecosystem libraries. Use of mixins, especially global mixins, should be avoided in application code."
                },
                {
                    "type": "p",
                    "text": "For logic reuse, preferComposablesinstead."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{mixin(mixin:ComponentOptions):this}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{mixin(mixin:ComponentOptions):this}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.provide()​"
                },
                {
                    "type": "p",
                    "text": "Provide a value that can be injected in all descendant components within the application."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{provide<T>(key:InjectionKey<T>|symbol|string,value:T):this}",
                        "DetailsExpects the injection key as the first argument, and the provided value as the second. Returns the application instance itself.",
                        "Examplejsimport{ createApp }from'vue'constapp=createApp(/* ... */)app.provide('message','hello')Inside a component in the application:jsimport{ inject }from'vue'exportdefault{setup() {console.log(inject('message'))// 'hello'}}jsexportdefault{inject: ['message'],created() {console.log(this.message)// 'hello'}}",
                        "See alsoProvide / InjectApp-level Provideapp.runWithContext()",
                        "Provide / Inject",
                        "App-level Provide",
                        "app.runWithContext()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{provide<T>(key:InjectionKey<T>|symbol|string,value:T):this}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Expects the injection key as the first argument, and the provided value as the second. Returns the application instance itself."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp(/* ... */)app.provide('message','hello')"
                },
                {
                    "type": "p",
                    "text": "Inside a component in the application:"
                },
                {
                    "type": "code",
                    "code": "import{ inject }from'vue'exportdefault{setup() {console.log(inject('message'))// 'hello'}}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: ['message'],created() {console.log(this.message)// 'hello'}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Provide / Inject",
                        "App-level Provide",
                        "app.runWithContext()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.runWithContext()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Execute a callback with the current app as injection context."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{runWithContext<T>(fn:()=>T):T}",
                        "DetailsExpects a callback function and runs the callback immediately. During the synchronous call of the callback,inject()calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned.",
                        "Examplejsimport{ inject }from'vue'app.provide('id',1)constinjected=app.runWithContext(()=>{returninject('id')})console.log(injected)// 1"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{runWithContext<T>(fn:()=>T):T}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Expects a callback function and runs the callback immediately. During the synchronous call of the callback,inject()calls are able to look up injections from the values provided by the current app, even when there is no current active component instance. The return value of the callback will also be returned."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ inject }from'vue'app.provide('id',1)constinjected=app.runWithContext(()=>{returninject('id')})console.log(injected)// 1"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.version​"
                },
                {
                    "type": "p",
                    "text": "Provides the version of Vue that the application was created with. This is useful insideplugins, where you might need conditional logic based on different Vue versions."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceApp{version:string}",
                        "ExamplePerforming a version check inside a plugin:jsexportdefault{install(app) {constversion=Number(app.version.split('.')[0])if(version<3) {console.warn('This plugin requires Vue 3')}}}",
                        "See alsoGlobal API - version"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceApp{version:string}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Performing a version check inside a plugin:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{install(app) {constversion=Number(app.version.split('.')[0])if(version<3) {console.warn('This plugin requires Vue 3')}}}"
                },
                {
                    "type": "p",
                    "text": "See alsoGlobal API - version"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config​"
                },
                {
                    "type": "p",
                    "text": "Every application instance exposes aconfigobject that contains the configuration settings for that application. You can modify its properties (documented below) before mounting your application."
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp(/* ... */)console.log(app.config)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.errorHandler​"
                },
                {
                    "type": "p",
                    "text": "Assign a global handler for uncaught errors propagating from within the application."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceAppConfig{errorHandler?:(err:unknown,instance:ComponentPublicInstance|null,// `info` is a Vue-specific error info,// e.g. which lifecycle hook the error was thrown ininfo:string)=>void}",
                        "DetailsThe error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.It can capture errors from the following sources:Component rendersEvent handlersLifecycle hookssetup()functionWatchersCustom directive hooksTransition hooksTIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference.",
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks",
                        "Examplejsapp.config.errorHandler=(err,instance,info)=>{// handle error, e.g. report to a service}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceAppConfig{errorHandler?:(err:unknown,instance:ComponentPublicInstance|null,// `info` is a Vue-specific error info,// e.g. which lifecycle hook the error was thrown ininfo:string)=>void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The error handler receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type."
                },
                {
                    "type": "p",
                    "text": "It can capture errors from the following sources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks"
                    ]
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "In production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "app.config.errorHandler=(err,instance,info)=>{// handle error, e.g. report to a service}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.warnHandler​"
                },
                {
                    "type": "p",
                    "text": "Assign a custom handler for runtime warnings from Vue."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceAppConfig{warnHandler?:(msg:string,instance:ComponentPublicInstance|null,trace:string)=>void}",
                        "DetailsThe warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third.It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done.TIPWarnings only work during development, so this config is ignored in production mode.",
                        "Examplejsapp.config.warnHandler=(msg,instance,trace)=>{// `trace` is the component hierarchy trace}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceAppConfig{warnHandler?:(msg:string,instance:ComponentPublicInstance|null,trace:string)=>void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The warning handler receives the warning message as the first argument, the source component instance as the second argument, and a component trace string as the third."
                },
                {
                    "type": "p",
                    "text": "It can be used to filter out specific warnings to reduce console verbosity. All Vue warnings should be addressed during development, so this is only recommended during debug sessions to focus on specific warnings among many, and should be removed once the debugging is done."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Warnings only work during development, so this config is ignored in production mode."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "app.config.warnHandler=(msg,instance,trace)=>{// `trace` is the component hierarchy trace}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.performance​"
                },
                {
                    "type": "p",
                    "text": "Set this totrueto enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support theperformance.markAPI."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:boolean",
                        "See alsoGuide - Performance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:boolean"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Performance"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.compilerOptions​"
                },
                {
                    "type": "p",
                    "text": "Configure runtime compiler options. Values set on this object will be passed to the in-browser template compiler and affect every component in the configured app. Note you can also override these options on a per-component basis using thecompilerOptionsoption."
                },
                {
                    "type": "p",
                    "text": "Important"
                },
                {
                    "type": "p",
                    "text": "This config option is only respected when using the full build (i.e. the standalonevue.jsthat can compile templates in the browser). If you are using the runtime-only build with a build setup, compiler options must be passed to@vue/compiler-domvia build tool configurations instead."
                },
                {
                    "type": "list",
                    "items": [
                        "Forvue-loader:pass via thecompilerOptionsloader option. Also seehow to configure it invue-cli.",
                        "Forvite:pass via@vitejs/plugin-vueoptions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Forvue-loader:pass via thecompilerOptionsloader option. Also seehow to configure it invue-cli."
                },
                {
                    "type": "p",
                    "text": "Forvite:pass via@vitejs/plugin-vueoptions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "app.config.compilerOptions.isCustomElement​"
                },
                {
                    "type": "p",
                    "text": "Specifies a check method to recognize native custom elements."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:(tag: string) => boolean",
                        "DetailsShould returntrueif the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component.Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically.",
                        "Examplejs// treat all tags starting with 'ion-' as custom elementsapp.config.compilerOptions.isCustomElement=(tag)=>{returntag.startsWith('ion-')}",
                        "See alsoVue and Web Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:(tag: string) => boolean"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Should returntrueif the tag should be treated as a native custom element. For a matched tag, Vue will render it as a native element instead of attempting to resolve it as a Vue component."
                },
                {
                    "type": "p",
                    "text": "Native HTML and SVG tags don't need to be matched in this function - Vue's parser recognizes them automatically."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "// treat all tags starting with 'ion-' as custom elementsapp.config.compilerOptions.isCustomElement=(tag)=>{returntag.startsWith('ion-')}"
                },
                {
                    "type": "p",
                    "text": "See alsoVue and Web Components"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "app.config.compilerOptions.whitespace​"
                },
                {
                    "type": "p",
                    "text": "Adjusts template whitespace handling behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:'condense' | 'preserve'",
                        "Default:'condense'",
                        "DetailsVue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:Leading / ending whitespace characters inside an element are condensed into a single space.Whitespace characters between elements that contain newlines are removed.Consecutive whitespace characters in text nodes are condensed into a single space.Setting this option to'preserve'will disable (2) and (3).",
                        "Leading / ending whitespace characters inside an element are condensed into a single space.",
                        "Whitespace characters between elements that contain newlines are removed.",
                        "Consecutive whitespace characters in text nodes are condensed into a single space.",
                        "Examplejsapp.config.compilerOptions.whitespace='preserve'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:'condense' | 'preserve'"
                },
                {
                    "type": "p",
                    "text": "Default:'condense'"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Vue removes / condenses whitespace characters in templates to produce more efficient compiled output. The default strategy is \"condense\", with the following behavior:"
                },
                {
                    "type": "list",
                    "items": [
                        "Leading / ending whitespace characters inside an element are condensed into a single space.",
                        "Whitespace characters between elements that contain newlines are removed.",
                        "Consecutive whitespace characters in text nodes are condensed into a single space."
                    ]
                },
                {
                    "type": "p",
                    "text": "Setting this option to'preserve'will disable (2) and (3)."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "app.config.compilerOptions.whitespace='preserve'"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "app.config.compilerOptions.delimiters​"
                },
                {
                    "type": "p",
                    "text": "Adjusts the delimiters used for text interpolation within the template."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:[string, string]",
                        "Default:['{{', '}}']",
                        "DetailsThis is typically used to avoid conflicting with server-side frameworks that also use mustache syntax.",
                        "Examplejs// Delimiters changed to ES6 template string styleapp.config.compilerOptions.delimiters=['${','}']"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:[string, string]"
                },
                {
                    "type": "p",
                    "text": "Default:['{{', '}}']"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This is typically used to avoid conflicting with server-side frameworks that also use mustache syntax."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "// Delimiters changed to ES6 template string styleapp.config.compilerOptions.delimiters=['${','}']"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "app.config.compilerOptions.comments​"
                },
                {
                    "type": "p",
                    "text": "Adjusts treatment of HTML comments in templates."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:boolean",
                        "Default:false",
                        "DetailsBy default, Vue will remove the comments in production. Setting this option totruewill force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments.",
                        "Examplejsapp.config.compilerOptions.comments=true"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:boolean"
                },
                {
                    "type": "p",
                    "text": "Default:false"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "By default, Vue will remove the comments in production. Setting this option totruewill force Vue to preserve comments even in production. Comments are always preserved during development. This option is typically used when Vue is used with other libraries that rely on HTML comments."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "app.config.compilerOptions.comments=true"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.globalProperties​"
                },
                {
                    "type": "p",
                    "text": "An object that can be used to register global properties that can be accessed on any component instance inside the application."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceAppConfig{globalProperties:Record<string,any>}",
                        "DetailsThis is a replacement of Vue 2'sVue.prototypewhich is no longer present in Vue 3. As with anything global, this should be used sparingly.If a global property conflicts with a component’s own property, the component's own property will have higher priority.",
                        "Usagejsapp.config.globalProperties.msg='hello'This makesmsgavailable inside any component template in the application, and also onthisof any component instance:jsexportdefault{mounted() {console.log(this.msg)// 'hello'}}",
                        "See alsoGuide - Augmenting Global Properties"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceAppConfig{globalProperties:Record<string,any>}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This is a replacement of Vue 2'sVue.prototypewhich is no longer present in Vue 3. As with anything global, this should be used sparingly."
                },
                {
                    "type": "p",
                    "text": "If a global property conflicts with a component’s own property, the component's own property will have higher priority."
                },
                {
                    "type": "p",
                    "text": "Usage"
                },
                {
                    "type": "code",
                    "code": "app.config.globalProperties.msg='hello'"
                },
                {
                    "type": "p",
                    "text": "This makesmsgavailable inside any component template in the application, and also onthisof any component instance:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{mounted() {console.log(this.msg)// 'hello'}}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Augmenting Global Properties"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.optionMergeStrategies​"
                },
                {
                    "type": "p",
                    "text": "An object for defining merging strategies for custom component options."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceAppConfig{optionMergeStrategies:Record<string,OptionMergeFunction>}typeOptionMergeFunction=(to:unknown,from:unknown)=>any",
                        "DetailsSome plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance).A merge strategy function can be registered for a custom option by assigning it on theapp.config.optionMergeStrategiesobject using the option's name as the key.The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively.",
                        "Examplejsconstapp=createApp({// option from selfmsg:'Vue',// option from a mixinmixins: [{msg:'Hello '}],mounted() {// merged options exposed on this.$optionsconsole.log(this.$options.msg)}})// define a custom merge strategy for `msg`app.config.optionMergeStrategies.msg=(parent,child)=>{return(parent||'')+(child||'')}app.mount('#app')// logs 'Hello Vue'",
                        "See alsoComponent Instance -$options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceAppConfig{optionMergeStrategies:Record<string,OptionMergeFunction>}typeOptionMergeFunction=(to:unknown,from:unknown)=>any"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Some plugins / libraries add support for custom component options (by injecting global mixins). These options may require special merging logic when the same option needs to be \"merged\" from multiple sources (e.g. mixins or component inheritance)."
                },
                {
                    "type": "p",
                    "text": "A merge strategy function can be registered for a custom option by assigning it on theapp.config.optionMergeStrategiesobject using the option's name as the key."
                },
                {
                    "type": "p",
                    "text": "The merge strategy function receives the value of that option defined on the parent and child instances as the first and second arguments, respectively."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constapp=createApp({// option from selfmsg:'Vue',// option from a mixinmixins: [{msg:'Hello '}],mounted() {// merged options exposed on this.$optionsconsole.log(this.$options.msg)}})// define a custom merge strategy for `msg`app.config.optionMergeStrategies.msg=(parent,child)=>{return(parent||'')+(child||'')}app.mount('#app')// logs 'Hello Vue'"
                },
                {
                    "type": "p",
                    "text": "See alsoComponent Instance -$options"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.idPrefix​"
                },
                {
                    "type": "p",
                    "text": "Configure a prefix for all IDs generated viauseId()inside this application."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:string",
                        "Default:undefined",
                        "Examplejsapp.config.idPrefix='my-app'js// in a component:constid1=useId()// 'my-app:0'constid2=useId()// 'my-app:1'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:string"
                },
                {
                    "type": "p",
                    "text": "Default:undefined"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "app.config.idPrefix='my-app'"
                },
                {
                    "type": "code",
                    "code": "// in a component:constid1=useId()// 'my-app:0'constid2=useId()// 'my-app:1'"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "app.config.throwUnhandledErrorInProduction​"
                },
                {
                    "type": "p",
                    "text": "Force unhandled errors to be thrown in production mode."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:boolean",
                        "Default:false",
                        "DetailsBy default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services.By settingapp.config.throwUnhandledErrorInProductiontotrue, unhandled errors will be thrown even in production mode.",
                        "In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.",
                        "In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:boolean"
                },
                {
                    "type": "p",
                    "text": "Default:false"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "By default, errors thrown inside a Vue application but not explicitly handled have different behavior between development and production modes:"
                },
                {
                    "type": "list",
                    "items": [
                        "In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development.",
                        "In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services."
                    ]
                },
                {
                    "type": "p",
                    "text": "In development, the error is thrown and can possibly crash the application. This is to make the error more prominent so that it can be noticed and fixed during development."
                },
                {
                    "type": "p",
                    "text": "In production, the error will only be logged to the console to minimize the impact to end users. However, this may prevent errors that only happen in production from being caught by error monitoring services."
                },
                {
                    "type": "p",
                    "text": "By settingapp.config.throwUnhandledErrorInProductiontotrue, unhandled errors will be thrown even in production mode."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/built-in-components#transition",
            "title": "Built-in Components | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Built-in Components​"
                },
                {
                    "type": "p",
                    "text": "Registration and Usage"
                },
                {
                    "type": "p",
                    "text": "Built-in components can be used directly in templates without needing to be registered. They are also tree-shakeable: they are only included in the build when they are used."
                },
                {
                    "type": "p",
                    "text": "When using them inrender functions, they need to be imported explicitly. For example:"
                },
                {
                    "type": "code",
                    "code": "import{ h, Transition }from'vue'h(Transition, {/* props */})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<Transition>​"
                },
                {
                    "type": "p",
                    "text": "Provides animated transition effects to asingleelement or component."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceTransitionProps{/*** Used to automatically generate transition CSS class names.* e.g. `name: 'fade'` will auto expand to `.fade-enter`,* `.fade-enter-active`, etc.*/name?:string/*** Whether to apply CSS transition classes.* Default: true*/css?:boolean/*** Specifies the type of transition events to wait for to* determine transition end timing.* Default behavior is auto detecting the type that has* longer duration.*/type?:'transition'|'animation'/*** Specifies explicit durations of the transition.* Default behavior is wait for the first `transitionend`* or `animationend` event on the root transition element.*/duration?:number|{enter:number;leave:number}/*** Controls the timing sequence of leaving/entering transitions.* Default behavior is simultaneous.*/mode?:'in-out'|'out-in'|'default'/*** Whether to apply transition on initial render.* Default: false*/appear?:boolean/*** Props for customizing transition classes.* Use kebab-case in templates, e.g. enter-from-class=\"xxx\"*/enterFromClass?:stringenterActiveClass?:stringenterToClass?:stringappearFromClass?:stringappearActiveClass?:stringappearToClass?:stringleaveFromClass?:stringleaveActiveClass?:stringleaveToClass?:string}",
                        "Events@before-enter@before-leave@enter@leave@appear@after-enter@after-leave@after-appear@enter-cancelled@leave-cancelled(v-showonly)@appear-cancelled",
                        "@before-enter",
                        "@before-leave",
                        "@enter",
                        "@leave",
                        "@appear",
                        "@after-enter",
                        "@after-leave",
                        "@after-appear",
                        "@enter-cancelled",
                        "@leave-cancelled(v-showonly)",
                        "@appear-cancelled",
                        "ExampleSimple element:template<Transition><divv-if=\"ok\">toggled content</div></Transition>Forcing a transition by changing thekeyattribute:template<Transition><div:key=\"text\">{{ text }}</div></Transition>Dynamic component, with transition mode + animate on appear:template<Transitionname=\"fade\"mode=\"out-in\"appear><component:is=\"view\"></component></Transition>Listening to transition events:template<Transition@after-enter=\"onTransitionComplete\"><divv-show=\"ok\">toggled content</div></Transition>",
                        "See alsoGuide - Transition"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceTransitionProps{/*** Used to automatically generate transition CSS class names.* e.g. `name: 'fade'` will auto expand to `.fade-enter`,* `.fade-enter-active`, etc.*/name?:string/*** Whether to apply CSS transition classes.* Default: true*/css?:boolean/*** Specifies the type of transition events to wait for to* determine transition end timing.* Default behavior is auto detecting the type that has* longer duration.*/type?:'transition'|'animation'/*** Specifies explicit durations of the transition.* Default behavior is wait for the first `transitionend`* or `animationend` event on the root transition element.*/duration?:number|{enter:number;leave:number}/*** Controls the timing sequence of leaving/entering transitions.* Default behavior is simultaneous.*/mode?:'in-out'|'out-in'|'default'/*** Whether to apply transition on initial render.* Default: false*/appear?:boolean/*** Props for customizing transition classes.* Use kebab-case in templates, e.g. enter-from-class=\"xxx\"*/enterFromClass?:stringenterActiveClass?:stringenterToClass?:stringappearFromClass?:stringappearActiveClass?:stringappearToClass?:stringleaveFromClass?:stringleaveActiveClass?:stringleaveToClass?:string}"
                },
                {
                    "type": "p",
                    "text": "Events"
                },
                {
                    "type": "list",
                    "items": [
                        "@before-enter",
                        "@before-leave",
                        "@enter",
                        "@leave",
                        "@appear",
                        "@after-enter",
                        "@after-leave",
                        "@after-appear",
                        "@enter-cancelled",
                        "@leave-cancelled(v-showonly)",
                        "@appear-cancelled"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Simple element:"
                },
                {
                    "type": "code",
                    "code": "<Transition><divv-if=\"ok\">toggled content</div></Transition>"
                },
                {
                    "type": "p",
                    "text": "Forcing a transition by changing thekeyattribute:"
                },
                {
                    "type": "code",
                    "code": "<Transition><div:key=\"text\">{{ text }}</div></Transition>"
                },
                {
                    "type": "p",
                    "text": "Dynamic component, with transition mode + animate on appear:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"fade\"mode=\"out-in\"appear><component:is=\"view\"></component></Transition>"
                },
                {
                    "type": "p",
                    "text": "Listening to transition events:"
                },
                {
                    "type": "code",
                    "code": "<Transition@after-enter=\"onTransitionComplete\"><divv-show=\"ok\">toggled content</div></Transition>"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Transition"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<TransitionGroup>​"
                },
                {
                    "type": "p",
                    "text": "Provides transition effects formultipleelements or components in a list."
                },
                {
                    "type": "list",
                    "items": [
                        "Props<TransitionGroup>accepts the same props as<Transition>exceptmode, plus two additional props:tsinterfaceTransitionGroupPropsextendsOmit<TransitionProps,'mode'> {/*** If not defined, renders as a fragment.*/tag?:string/*** For customizing the CSS class applied during move transitions.* Use kebab-case in templates, e.g. move-class=\"xxx\"*/moveClass?:string}",
                        "Events<TransitionGroup>emits the same events as<Transition>.",
                        "DetailsBy default,<TransitionGroup>doesn't render a wrapper DOM element, but one can be defined via thetagprop.Note that every child in a<transition-group>must beuniquely keyedfor the animations to work properly.<TransitionGroup>supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from thenameattribute or configured with themove-classprop). If the CSStransformproperty is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using theFLIP technique.",
                        "Exampletemplate<TransitionGrouptag=\"ul\"name=\"slide\"><liv-for=\"iteminitems\":key=\"item.id\">{{ item.text }}</li></TransitionGroup>",
                        "See alsoGuide - TransitionGroup"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>accepts the same props as<Transition>exceptmode, plus two additional props:"
                },
                {
                    "type": "code",
                    "code": "interfaceTransitionGroupPropsextendsOmit<TransitionProps,'mode'> {/*** If not defined, renders as a fragment.*/tag?:string/*** For customizing the CSS class applied during move transitions.* Use kebab-case in templates, e.g. move-class=\"xxx\"*/moveClass?:string}"
                },
                {
                    "type": "p",
                    "text": "Events"
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>emits the same events as<Transition>."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "By default,<TransitionGroup>doesn't render a wrapper DOM element, but one can be defined via thetagprop."
                },
                {
                    "type": "p",
                    "text": "Note that every child in a<transition-group>must beuniquely keyedfor the animations to work properly."
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>supports moving transitions via CSS transform. When a child's position on screen has changed after an update, it will get applied a moving CSS class (auto generated from thenameattribute or configured with themove-classprop). If the CSStransformproperty is \"transition-able\" when the moving class is applied, the element will be smoothly animated to its destination using theFLIP technique."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<TransitionGrouptag=\"ul\"name=\"slide\"><liv-for=\"iteminitems\":key=\"item.id\">{{ item.text }}</li></TransitionGroup>"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - TransitionGroup"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<KeepAlive>​"
                },
                {
                    "type": "p",
                    "text": "Caches dynamically toggled components wrapped inside."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceKeepAliveProps{/*** If specified, only components with names matched by* `include` will be cached.*/include?:MatchPattern/*** Any component with a name matched by `exclude` will* not be cached.*/exclude?:MatchPattern/*** The maximum number of component instances to cache.*/max?:number|string}typeMatchPattern=string|RegExp|(string|RegExp)[]",
                        "DetailsWhen wrapped around a dynamic component,<KeepAlive>caches the inactive component instances without destroying them.There can only be one active component instance as the direct child of<KeepAlive>at any time.When a component is toggled inside<KeepAlive>, itsactivatedanddeactivatedlifecycle hooks will be invoked accordingly, providing an alternative tomountedandunmounted, which are not called. This applies to the direct child of<KeepAlive>as well as to all of its descendants.",
                        "ExampleBasic usage:template<KeepAlive><component:is=\"view\"></component></KeepAlive>When used withv-if/v-elsebranches, there must be only one component rendered at a time:template<KeepAlive><comp-av-if=\"a>1\"></comp-a><comp-bv-else></comp-b></KeepAlive>Used together with<Transition>:template<Transition><KeepAlive><component:is=\"view\"></component></KeepAlive></Transition>Usinginclude/exclude:template<!-- comma-delimited string --><KeepAliveinclude=\"a,b\"><component:is=\"view\"></component></KeepAlive><!-- regex (use `v-bind`) --><KeepAlive:include=\"/a|b/\"><component:is=\"view\"></component></KeepAlive><!-- Array (use `v-bind`) --><KeepAlive:include=\"['a','b']\"><component:is=\"view\"></component></KeepAlive>Usage withmax:template<KeepAlive:max=\"10\"><component:is=\"view\"></component></KeepAlive>",
                        "See alsoGuide - KeepAlive"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceKeepAliveProps{/*** If specified, only components with names matched by* `include` will be cached.*/include?:MatchPattern/*** Any component with a name matched by `exclude` will* not be cached.*/exclude?:MatchPattern/*** The maximum number of component instances to cache.*/max?:number|string}typeMatchPattern=string|RegExp|(string|RegExp)[]"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When wrapped around a dynamic component,<KeepAlive>caches the inactive component instances without destroying them."
                },
                {
                    "type": "p",
                    "text": "There can only be one active component instance as the direct child of<KeepAlive>at any time."
                },
                {
                    "type": "p",
                    "text": "When a component is toggled inside<KeepAlive>, itsactivatedanddeactivatedlifecycle hooks will be invoked accordingly, providing an alternative tomountedandunmounted, which are not called. This applies to the direct child of<KeepAlive>as well as to all of its descendants."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "<KeepAlive><component:is=\"view\"></component></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "When used withv-if/v-elsebranches, there must be only one component rendered at a time:"
                },
                {
                    "type": "code",
                    "code": "<KeepAlive><comp-av-if=\"a>1\"></comp-a><comp-bv-else></comp-b></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "Used together with<Transition>:"
                },
                {
                    "type": "code",
                    "code": "<Transition><KeepAlive><component:is=\"view\"></component></KeepAlive></Transition>"
                },
                {
                    "type": "p",
                    "text": "Usinginclude/exclude:"
                },
                {
                    "type": "code",
                    "code": "<!-- comma-delimited string --><KeepAliveinclude=\"a,b\"><component:is=\"view\"></component></KeepAlive><!-- regex (use `v-bind`) --><KeepAlive:include=\"/a|b/\"><component:is=\"view\"></component></KeepAlive><!-- Array (use `v-bind`) --><KeepAlive:include=\"['a','b']\"><component:is=\"view\"></component></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "Usage withmax:"
                },
                {
                    "type": "code",
                    "code": "<KeepAlive:max=\"10\"><component:is=\"view\"></component></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - KeepAlive"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<Teleport>​"
                },
                {
                    "type": "p",
                    "text": "Renders its slot content to another part of the DOM."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceTeleportProps{/*** Required. Specify target container.* Can either be a selector or an actual element.*/to:string|HTMLElement/*** When `true`, the content will remain in its original* location instead of moved into the target container.* Can be changed dynamically.*/disabled?:boolean/*** When `true`, the Teleport will defer until other* parts of the application have been mounted before* resolving its target. (3.5+)*/defer?:boolean}",
                        "ExampleSpecifying target container:template<Teleportto=\"#some-id\"/><Teleportto=\".some-class\"/><Teleportto=\"[data-teleport]\"/>Conditionally disabling:template<Teleportto=\"#popup\":disabled=\"displayVideoInline\"><videosrc=\"./my-movie.mp4\"></Teleport>Defer target resolution:template<Teleportdeferto=\"#late-div\">...</Teleport><!-- somewhere later in the template --><divid=\"late-div\"></div>",
                        "See alsoGuide - Teleport"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceTeleportProps{/*** Required. Specify target container.* Can either be a selector or an actual element.*/to:string|HTMLElement/*** When `true`, the content will remain in its original* location instead of moved into the target container.* Can be changed dynamically.*/disabled?:boolean/*** When `true`, the Teleport will defer until other* parts of the application have been mounted before* resolving its target. (3.5+)*/defer?:boolean}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Specifying target container:"
                },
                {
                    "type": "code",
                    "code": "<Teleportto=\"#some-id\"/><Teleportto=\".some-class\"/><Teleportto=\"[data-teleport]\"/>"
                },
                {
                    "type": "p",
                    "text": "Conditionally disabling:"
                },
                {
                    "type": "code",
                    "code": "<Teleportto=\"#popup\":disabled=\"displayVideoInline\"><videosrc=\"./my-movie.mp4\"></Teleport>"
                },
                {
                    "type": "p",
                    "text": "Defer target resolution:"
                },
                {
                    "type": "code",
                    "code": "<Teleportdeferto=\"#late-div\">...</Teleport><!-- somewhere later in the template --><divid=\"late-div\"></div>"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Teleport"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<Suspense>​"
                },
                {
                    "type": "p",
                    "text": "Used for orchestrating nested async dependencies in a component tree."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceSuspenseProps{timeout?:string|numbersuspensible?:boolean}",
                        "Events@resolve@pending@fallback",
                        "@resolve",
                        "@pending",
                        "@fallback",
                        "Details<Suspense>accepts two slots: the#defaultslot and the#fallbackslot. It will display the content of the fallback slot while rendering the default slot in memory.If it encounters async dependencies (Async Componentsand components withasync setup()) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot.By setting the Suspense assuspensible, all the async dependency handling will be handled by the parent Suspense. Seeimplementation details",
                        "See alsoGuide - Suspense"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceSuspenseProps{timeout?:string|numbersuspensible?:boolean}"
                },
                {
                    "type": "p",
                    "text": "Events"
                },
                {
                    "type": "list",
                    "items": [
                        "@resolve",
                        "@pending",
                        "@fallback"
                    ]
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "<Suspense>accepts two slots: the#defaultslot and the#fallbackslot. It will display the content of the fallback slot while rendering the default slot in memory."
                },
                {
                    "type": "p",
                    "text": "If it encounters async dependencies (Async Componentsand components withasync setup()) while rendering the default slot, it will wait until all of them are resolved before displaying the default slot."
                },
                {
                    "type": "p",
                    "text": "By setting the Suspense assuspensible, all the async dependency handling will be handled by the parent Suspense. Seeimplementation details"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Suspense"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/built-in-directives#v-text",
            "title": "Built-in Directives | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Built-in Directives​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-text​"
                },
                {
                    "type": "p",
                    "text": "Update the element's text content."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:string",
                        "Detailsv-textworks by setting the element'stextContentproperty, so it will overwrite any existing content inside the element. If you need to update the part oftextContent, you should usemustache interpolationsinstead.",
                        "Exampletemplate<spanv-text=\"msg\"></span><!-- same as --><span>{{msg}}</span>",
                        "See alsoTemplate Syntax - Text Interpolation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:string"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "v-textworks by setting the element'stextContentproperty, so it will overwrite any existing content inside the element. If you need to update the part oftextContent, you should usemustache interpolationsinstead."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<spanv-text=\"msg\"></span><!-- same as --><span>{{msg}}</span>"
                },
                {
                    "type": "p",
                    "text": "See alsoTemplate Syntax - Text Interpolation"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-html​"
                },
                {
                    "type": "p",
                    "text": "Update the element'sinnerHTML."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:string",
                        "DetailsContents ofv-htmlare inserted as plain HTML - Vue template syntax will not be processed. If you find yourself trying to compose templates usingv-html, try to rethink the solution by using components instead.Security NoteDynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead toXSS attacks. Only usev-htmlon trusted content andneveron user-provided content.InSingle-File Components,scopedstyles will not apply to content insidev-html, because that HTML is not processed by Vue's template compiler. If you want to targetv-htmlcontent with scoped CSS, you can instead useCSS modulesor an additional, global<style>element with a manual scoping strategy such as BEM.",
                        "Exampletemplate<divv-html=\"html\"></div>",
                        "See alsoTemplate Syntax - Raw HTML"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:string"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Contents ofv-htmlare inserted as plain HTML - Vue template syntax will not be processed. If you find yourself trying to compose templates usingv-html, try to rethink the solution by using components instead."
                },
                {
                    "type": "p",
                    "text": "Security Note"
                },
                {
                    "type": "p",
                    "text": "Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead toXSS attacks. Only usev-htmlon trusted content andneveron user-provided content."
                },
                {
                    "type": "p",
                    "text": "InSingle-File Components,scopedstyles will not apply to content insidev-html, because that HTML is not processed by Vue's template compiler. If you want to targetv-htmlcontent with scoped CSS, you can instead useCSS modulesor an additional, global<style>element with a manual scoping strategy such as BEM."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<divv-html=\"html\"></div>"
                },
                {
                    "type": "p",
                    "text": "See alsoTemplate Syntax - Raw HTML"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-show​"
                },
                {
                    "type": "p",
                    "text": "Toggle the element's visibility based on the truthy-ness of the expression value."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:any",
                        "Detailsv-showworks by setting thedisplayCSS property via inline styles, and will try to respect the initialdisplayvalue when the element is visible. It also triggers transitions when its condition changes.",
                        "See alsoConditional Rendering - v-show"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:any"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "v-showworks by setting thedisplayCSS property via inline styles, and will try to respect the initialdisplayvalue when the element is visible. It also triggers transitions when its condition changes."
                },
                {
                    "type": "p",
                    "text": "See alsoConditional Rendering - v-show"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-if​"
                },
                {
                    "type": "p",
                    "text": "Conditionally render an element or a template fragment based on the truthy-ness of the expression value."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:any",
                        "DetailsWhen av-ifelement is toggled, the element and its contained directives / components are destroyed and re-constructed. If the initial condition is falsy, then the inner content won't be rendered at all.Can be used on<template>to denote a conditional block containing only text or multiple elements.This directive triggers transitions when its condition changes.When used together,v-ifhas a higher priority thanv-for. We don't recommend using these two directives together on one element — see thelist rendering guidefor details.",
                        "See alsoConditional Rendering - v-if"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:any"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When av-ifelement is toggled, the element and its contained directives / components are destroyed and re-constructed. If the initial condition is falsy, then the inner content won't be rendered at all."
                },
                {
                    "type": "p",
                    "text": "Can be used on<template>to denote a conditional block containing only text or multiple elements."
                },
                {
                    "type": "p",
                    "text": "This directive triggers transitions when its condition changes."
                },
                {
                    "type": "p",
                    "text": "When used together,v-ifhas a higher priority thanv-for. We don't recommend using these two directives together on one element — see thelist rendering guidefor details."
                },
                {
                    "type": "p",
                    "text": "See alsoConditional Rendering - v-if"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-else​"
                },
                {
                    "type": "p",
                    "text": "Denote the \"else block\" forv-ifor av-if/v-else-ifchain."
                },
                {
                    "type": "list",
                    "items": [
                        "Does not expect expression",
                        "DetailsRestriction: previous sibling element must havev-iforv-else-if.Can be used on<template>to denote a conditional block containing only text or multiple elements.",
                        "Restriction: previous sibling element must havev-iforv-else-if.",
                        "Can be used on<template>to denote a conditional block containing only text or multiple elements.",
                        "Exampletemplate<divv-if=\"Math.random()>0.5\">Now you see me</div><divv-else>Now you don't</div>",
                        "See alsoConditional Rendering - v-else"
                    ]
                },
                {
                    "type": "p",
                    "text": "Does not expect expression"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "list",
                    "items": [
                        "Restriction: previous sibling element must havev-iforv-else-if.",
                        "Can be used on<template>to denote a conditional block containing only text or multiple elements."
                    ]
                },
                {
                    "type": "p",
                    "text": "Restriction: previous sibling element must havev-iforv-else-if."
                },
                {
                    "type": "p",
                    "text": "Can be used on<template>to denote a conditional block containing only text or multiple elements."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<divv-if=\"Math.random()>0.5\">Now you see me</div><divv-else>Now you don't</div>"
                },
                {
                    "type": "p",
                    "text": "See alsoConditional Rendering - v-else"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-else-if​"
                },
                {
                    "type": "p",
                    "text": "Denote the \"else if block\" forv-if. Can be chained."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:any",
                        "DetailsRestriction: previous sibling element must havev-iforv-else-if.Can be used on<template>to denote a conditional block containing only text or multiple elements.",
                        "Restriction: previous sibling element must havev-iforv-else-if.",
                        "Can be used on<template>to denote a conditional block containing only text or multiple elements.",
                        "Exampletemplate<divv-if=\"type==='A'\">A</div><divv-else-if=\"type==='B'\">B</div><divv-else-if=\"type==='C'\">C</div><divv-else>Not A/B/C</div>",
                        "See alsoConditional Rendering - v-else-if"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:any"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "list",
                    "items": [
                        "Restriction: previous sibling element must havev-iforv-else-if.",
                        "Can be used on<template>to denote a conditional block containing only text or multiple elements."
                    ]
                },
                {
                    "type": "p",
                    "text": "Restriction: previous sibling element must havev-iforv-else-if."
                },
                {
                    "type": "p",
                    "text": "Can be used on<template>to denote a conditional block containing only text or multiple elements."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<divv-if=\"type==='A'\">A</div><divv-else-if=\"type==='B'\">B</div><divv-else-if=\"type==='C'\">C</div><divv-else>Not A/B/C</div>"
                },
                {
                    "type": "p",
                    "text": "See alsoConditional Rendering - v-else-if"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-for​"
                },
                {
                    "type": "p",
                    "text": "Render the element or template block multiple times based on the source data."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:Array | Object | number | string | Iterable",
                        "DetailsThe directive's value must use the special syntaxalias in expressionto provide an alias for the current element being iterated on:template<divv-for=\"iteminitems\">{{ item.text }}</div>Alternatively, you can also specify an alias for the index (or the key if used on an Object):template<divv-for=\"(item, index)initems\"></div><divv-for=\"(value, key)inobject\"></div><divv-for=\"(value, name, index)inobject\"></div>The default behavior ofv-forwill try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with thekeyspecial attribute:template<divv-for=\"iteminitems\":key=\"item.id\">{{ item.text }}</div>v-forcan also work on values that implement theIterable Protocol, including nativeMapandSet.",
                        "See alsoList Rendering",
                        "List Rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:Array | Object | number | string | Iterable"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The directive's value must use the special syntaxalias in expressionto provide an alias for the current element being iterated on:"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"iteminitems\">{{ item.text }}</div>"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can also specify an alias for the index (or the key if used on an Object):"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"(item, index)initems\"></div><divv-for=\"(value, key)inobject\"></div><divv-for=\"(value, name, index)inobject\"></div>"
                },
                {
                    "type": "p",
                    "text": "The default behavior ofv-forwill try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with thekeyspecial attribute:"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"iteminitems\":key=\"item.id\">{{ item.text }}</div>"
                },
                {
                    "type": "p",
                    "text": "v-forcan also work on values that implement theIterable Protocol, including nativeMapandSet."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "List Rendering"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-on​"
                },
                {
                    "type": "p",
                    "text": "Attach an event listener to the element."
                },
                {
                    "type": "list",
                    "items": [
                        "Shorthand:@",
                        "Expects:Function | Inline Statement | Object (without argument)",
                        "Argument:event(optional if using Object syntax)",
                        "Modifiers.stop- callevent.stopPropagation()..prevent- callevent.preventDefault()..capture- add event listener in capture mode..self- only trigger handler if event was dispatched from this element..{keyAlias}- only trigger handler on certain keys..once- trigger handler at most once..left- only trigger handler for left button mouse events..right- only trigger handler for right button mouse events..middle- only trigger handler for middle button mouse events..passive- attaches a DOM event with{ passive: true }.",
                        ".stop- callevent.stopPropagation().",
                        ".prevent- callevent.preventDefault().",
                        ".capture- add event listener in capture mode.",
                        ".self- only trigger handler if event was dispatched from this element.",
                        ".{keyAlias}- only trigger handler on certain keys.",
                        ".once- trigger handler at most once.",
                        ".left- only trigger handler for left button mouse events.",
                        ".right- only trigger handler for right button mouse events.",
                        ".middle- only trigger handler for middle button mouse events.",
                        ".passive- attaches a DOM event with{ passive: true }.",
                        "DetailsThe event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present.When used on a normal element, it listens tonative DOM eventsonly. When used on a custom element component, it listens tocustom eventsemitted on that child component.When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special$eventproperty:v-on:click=\"handle('ok', $event)\".v-onalso supports binding to an object of event / listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.",
                        "Exampletemplate<!-- method handler --><buttonv-on:click=\"doThis\"></button><!-- dynamic event --><buttonv-on:[event]=\"doThis\"></button><!-- inline statement --><buttonv-on:click=\"doThat('hello', $event)\"></button><!-- shorthand --><button@click=\"doThis\"></button><!-- shorthand dynamic event --><button@[event]=\"doThis\"></button><!-- stop propagation --><button@click.stop=\"doThis\"></button><!-- prevent default --><button@click.prevent=\"doThis\"></button><!-- prevent default without expression --><form@submit.prevent></form><!-- chain modifiers --><button@click.stop.prevent=\"doThis\"></button><!-- key modifier using keyAlias --><input@keyup.enter=\"onEnter\"/><!-- the click event will be triggered at most once --><buttonv-on:click.once=\"doThis\"></button><!-- object syntax --><buttonv-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):template<MyComponent@my-event=\"handleThis\"/><!-- inline statement --><MyComponent@my-event=\"handleThis(123, $event)\"/>",
                        "See alsoEvent HandlingComponents - Custom Events",
                        "Event Handling",
                        "Components - Custom Events"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shorthand:@"
                },
                {
                    "type": "p",
                    "text": "Expects:Function | Inline Statement | Object (without argument)"
                },
                {
                    "type": "p",
                    "text": "Argument:event(optional if using Object syntax)"
                },
                {
                    "type": "p",
                    "text": "Modifiers"
                },
                {
                    "type": "list",
                    "items": [
                        ".stop- callevent.stopPropagation().",
                        ".prevent- callevent.preventDefault().",
                        ".capture- add event listener in capture mode.",
                        ".self- only trigger handler if event was dispatched from this element.",
                        ".{keyAlias}- only trigger handler on certain keys.",
                        ".once- trigger handler at most once.",
                        ".left- only trigger handler for left button mouse events.",
                        ".right- only trigger handler for right button mouse events.",
                        ".middle- only trigger handler for middle button mouse events.",
                        ".passive- attaches a DOM event with{ passive: true }."
                    ]
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The event type is denoted by the argument. The expression can be a method name, an inline statement, or omitted if there are modifiers present."
                },
                {
                    "type": "p",
                    "text": "When used on a normal element, it listens tonative DOM eventsonly. When used on a custom element component, it listens tocustom eventsemitted on that child component."
                },
                {
                    "type": "p",
                    "text": "When listening to native DOM events, the method receives the native event as the only argument. If using inline statement, the statement has access to the special$eventproperty:v-on:click=\"handle('ok', $event)\"."
                },
                {
                    "type": "p",
                    "text": "v-onalso supports binding to an object of event / listener pairs without an argument. Note when using the object syntax, it does not support any modifiers."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<!-- method handler --><buttonv-on:click=\"doThis\"></button><!-- dynamic event --><buttonv-on:[event]=\"doThis\"></button><!-- inline statement --><buttonv-on:click=\"doThat('hello', $event)\"></button><!-- shorthand --><button@click=\"doThis\"></button><!-- shorthand dynamic event --><button@[event]=\"doThis\"></button><!-- stop propagation --><button@click.stop=\"doThis\"></button><!-- prevent default --><button@click.prevent=\"doThis\"></button><!-- prevent default without expression --><form@submit.prevent></form><!-- chain modifiers --><button@click.stop.prevent=\"doThis\"></button><!-- key modifier using keyAlias --><input@keyup.enter=\"onEnter\"/><!-- the click event will be triggered at most once --><buttonv-on:click.once=\"doThis\"></button><!-- object syntax --><buttonv-on=\"{ mousedown: doThis, mouseup: doThat }\"></button>"
                },
                {
                    "type": "p",
                    "text": "Listening to custom events on a child component (the handler is called when \"my-event\" is emitted on the child):"
                },
                {
                    "type": "code",
                    "code": "<MyComponent@my-event=\"handleThis\"/><!-- inline statement --><MyComponent@my-event=\"handleThis(123, $event)\"/>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Event Handling",
                        "Components - Custom Events"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-bind​"
                },
                {
                    "type": "p",
                    "text": "Dynamically bind one or more attributes, or a component prop to an expression."
                },
                {
                    "type": "list",
                    "items": [
                        "Shorthand::or.(when using.propmodifier)Omitting value (when attribute and bound value has the same name, requires 3.4+)",
                        ":or.(when using.propmodifier)",
                        "Omitting value (when attribute and bound value has the same name, requires 3.4+)",
                        "Expects:any (with argument) | Object (without argument)",
                        "Argument:attrOrProp (optional)",
                        "Modifiers.camel- transform the kebab-case attribute name into camelCase..prop- force a binding to be set as a DOM property (3.2+)..attr- force a binding to be set as a DOM attribute (3.2+).",
                        ".camel- transform the kebab-case attribute name into camelCase.",
                        ".prop- force a binding to be set as a DOM property (3.2+).",
                        ".attr- force a binding to be set as a DOM attribute (3.2+).",
                        "UsageWhen used to bind theclassorstyleattribute,v-bindsupports additional value types such as Array or Objects. See linked guide section below for more details.When setting a binding on an element, Vue by default checks whether the element has the key defined as a property using aninoperator check. If the property is defined, Vue will set the value as a DOM property instead of an attribute. This should work in most cases, but you can override this behavior by explicitly using.propor.attrmodifiers. This is sometimes necessary, especially whenworking with custom elements.When used for component prop binding, the prop must be properly declared in the child component.When used without an argument, can be used to bind an object containing attribute name-value pairs.",
                        "Exampletemplate<!-- bind an attribute --><imgv-bind:src=\"imageSrc\"/><!-- dynamic attribute name --><buttonv-bind:[key]=\"value\"></button><!-- shorthand --><img:src=\"imageSrc\"/><!-- same-name shorthand (3.4+), expands to :src=\"src\" --><img:src/><!-- shorthand dynamic attribute name --><button:[key]=\"value\"></button><!-- with inline string concatenation --><img:src=\"'/path/to/images/'+fileName\"/><!-- class binding --><div:class=\"{ red: isRed }\"></div><div:class=\"[classA, classB]\"></div><div:class=\"[classA, { classB: isB, classC: isC }]\"></div><!-- style binding --><div:style=\"{ fontSize: size+'px'}\"></div><div:style=\"[styleObjectA, styleObjectB]\"></div><!-- binding an object of attributes --><divv-bind=\"{ id: someProp,'other-attr': otherProp }\"></div><!-- prop binding. \"prop\" must be declared in the child component. --><MyComponent:prop=\"someThing\"/><!-- pass down parent props in common with a child component --><MyComponentv-bind=\"$props\"/><!-- XLink --><svg><a:xlink:special=\"foo\"></a></svg>The.propmodifier also has a dedicated shorthand,.:template<div:someProperty.prop=\"someObject\"></div><!-- equivalent to --><div.someProperty=\"someObject\"></div>The.camelmodifier allows camelizing av-bindattribute name when using in-DOM templates, e.g. the SVGviewBoxattribute:template<svg:view-box.camel=\"viewBox\"></svg>.camelis not needed if you are using string templates, or pre-compiling the template with a build step.",
                        "See alsoClass and Style BindingsComponents - Prop Passing Details",
                        "Class and Style Bindings",
                        "Components - Prop Passing Details"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shorthand:"
                },
                {
                    "type": "list",
                    "items": [
                        ":or.(when using.propmodifier)",
                        "Omitting value (when attribute and bound value has the same name, requires 3.4+)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:any (with argument) | Object (without argument)"
                },
                {
                    "type": "p",
                    "text": "Argument:attrOrProp (optional)"
                },
                {
                    "type": "p",
                    "text": "Modifiers"
                },
                {
                    "type": "list",
                    "items": [
                        ".camel- transform the kebab-case attribute name into camelCase.",
                        ".prop- force a binding to be set as a DOM property (3.2+).",
                        ".attr- force a binding to be set as a DOM attribute (3.2+)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Usage"
                },
                {
                    "type": "p",
                    "text": "When used to bind theclassorstyleattribute,v-bindsupports additional value types such as Array or Objects. See linked guide section below for more details."
                },
                {
                    "type": "p",
                    "text": "When setting a binding on an element, Vue by default checks whether the element has the key defined as a property using aninoperator check. If the property is defined, Vue will set the value as a DOM property instead of an attribute. This should work in most cases, but you can override this behavior by explicitly using.propor.attrmodifiers. This is sometimes necessary, especially whenworking with custom elements."
                },
                {
                    "type": "p",
                    "text": "When used for component prop binding, the prop must be properly declared in the child component."
                },
                {
                    "type": "p",
                    "text": "When used without an argument, can be used to bind an object containing attribute name-value pairs."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<!-- bind an attribute --><imgv-bind:src=\"imageSrc\"/><!-- dynamic attribute name --><buttonv-bind:[key]=\"value\"></button><!-- shorthand --><img:src=\"imageSrc\"/><!-- same-name shorthand (3.4+), expands to :src=\"src\" --><img:src/><!-- shorthand dynamic attribute name --><button:[key]=\"value\"></button><!-- with inline string concatenation --><img:src=\"'/path/to/images/'+fileName\"/><!-- class binding --><div:class=\"{ red: isRed }\"></div><div:class=\"[classA, classB]\"></div><div:class=\"[classA, { classB: isB, classC: isC }]\"></div><!-- style binding --><div:style=\"{ fontSize: size+'px'}\"></div><div:style=\"[styleObjectA, styleObjectB]\"></div><!-- binding an object of attributes --><divv-bind=\"{ id: someProp,'other-attr': otherProp }\"></div><!-- prop binding. \"prop\" must be declared in the child component. --><MyComponent:prop=\"someThing\"/><!-- pass down parent props in common with a child component --><MyComponentv-bind=\"$props\"/><!-- XLink --><svg><a:xlink:special=\"foo\"></a></svg>"
                },
                {
                    "type": "p",
                    "text": "The.propmodifier also has a dedicated shorthand,.:"
                },
                {
                    "type": "code",
                    "code": "<div:someProperty.prop=\"someObject\"></div><!-- equivalent to --><div.someProperty=\"someObject\"></div>"
                },
                {
                    "type": "p",
                    "text": "The.camelmodifier allows camelizing av-bindattribute name when using in-DOM templates, e.g. the SVGviewBoxattribute:"
                },
                {
                    "type": "code",
                    "code": "<svg:view-box.camel=\"viewBox\"></svg>"
                },
                {
                    "type": "p",
                    "text": ".camelis not needed if you are using string templates, or pre-compiling the template with a build step."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Class and Style Bindings",
                        "Components - Prop Passing Details"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-model​"
                },
                {
                    "type": "p",
                    "text": "Create a two-way binding on a form input element or a component."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:varies based on value of form inputs element or output of components",
                        "Limited to:<input><select><textarea>components",
                        "<input>",
                        "<select>",
                        "<textarea>",
                        "components",
                        "Modifiers.lazy- listen tochangeevents instead ofinput.number- cast valid input string to numbers.trim- trim input",
                        ".lazy- listen tochangeevents instead ofinput",
                        ".number- cast valid input string to numbers",
                        ".trim- trim input",
                        "See alsoForm Input BindingsComponent Events - Usage withv-model",
                        "Form Input Bindings",
                        "Component Events - Usage withv-model"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:varies based on value of form inputs element or output of components"
                },
                {
                    "type": "p",
                    "text": "Limited to:"
                },
                {
                    "type": "list",
                    "items": [
                        "<input>",
                        "<select>",
                        "<textarea>",
                        "components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Modifiers"
                },
                {
                    "type": "list",
                    "items": [
                        ".lazy- listen tochangeevents instead ofinput",
                        ".number- cast valid input string to numbers",
                        ".trim- trim input"
                    ]
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Form Input Bindings",
                        "Component Events - Usage withv-model"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-slot​"
                },
                {
                    "type": "p",
                    "text": "Denote named slots or scoped slots that expect to receive props."
                },
                {
                    "type": "list",
                    "items": [
                        "Shorthand:#",
                        "Expects:JavaScript expression that is valid in a function argument position, including support for destructuring. Optional - only needed if expecting props to be passed to the slot.",
                        "Argument:slot name (optional, defaults todefault)",
                        "Limited to:<template>components(for a lone default slot with props)",
                        "<template>",
                        "components(for a lone default slot with props)",
                        "Exampletemplate<!-- Named slots --><BaseLayout><templatev-slot:header>Header content</template><templatev-slot:default>Default slot content</template><templatev-slot:footer>Footer content</template></BaseLayout><!-- Named slot that receives props --><InfiniteScroll><templatev-slot:item=\"slotProps\"><divclass=\"item\">{{ slotProps.item.text }}</div></template></InfiniteScroll><!-- Default slot that receive props, with destructuring --><Mousev-slot=\"{ x, y }\">Mouse position: {{ x }}, {{ y }}</Mouse>",
                        "See alsoComponents - Slots",
                        "Components - Slots"
                    ]
                },
                {
                    "type": "p",
                    "text": "Shorthand:#"
                },
                {
                    "type": "p",
                    "text": "Expects:JavaScript expression that is valid in a function argument position, including support for destructuring. Optional - only needed if expecting props to be passed to the slot."
                },
                {
                    "type": "p",
                    "text": "Argument:slot name (optional, defaults todefault)"
                },
                {
                    "type": "p",
                    "text": "Limited to:"
                },
                {
                    "type": "list",
                    "items": [
                        "<template>",
                        "components(for a lone default slot with props)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<!-- Named slots --><BaseLayout><templatev-slot:header>Header content</template><templatev-slot:default>Default slot content</template><templatev-slot:footer>Footer content</template></BaseLayout><!-- Named slot that receives props --><InfiniteScroll><templatev-slot:item=\"slotProps\"><divclass=\"item\">{{ slotProps.item.text }}</div></template></InfiniteScroll><!-- Default slot that receive props, with destructuring --><Mousev-slot=\"{ x, y }\">Mouse position: {{ x }}, {{ y }}</Mouse>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Components - Slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-pre​"
                },
                {
                    "type": "p",
                    "text": "Skip compilation for this element and all its children."
                },
                {
                    "type": "list",
                    "items": [
                        "Does not expect expression",
                        "DetailsInside the element withv-pre, all Vue template syntax will be preserved and rendered as-is. The most common use case of this is displaying raw mustache tags.",
                        "Exampletemplate<spanv-pre>{{thiswill not be compiled }}</span>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Does not expect expression"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Inside the element withv-pre, all Vue template syntax will be preserved and rendered as-is. The most common use case of this is displaying raw mustache tags."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<spanv-pre>{{thiswill not be compiled }}</span>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-once​"
                },
                {
                    "type": "p",
                    "text": "Render the element and component once only, and skip future updates."
                },
                {
                    "type": "list",
                    "items": [
                        "Does not expect expression",
                        "DetailsOn subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.template<!-- single element --><spanv-once>This will never change: {{msg}}</span><!-- the element have children --><divv-once><h1>Comment</h1><p>{{msg}}</p></div><!-- component --><MyComponentv-once:comment=\"msg\"></MyComponent><!-- `v-for` directive --><ul><liv-for=\"iinlist\"v-once>{{i}}</li></ul>Since 3.2, you can also memoize part of the template with invalidation conditions usingv-memo.",
                        "See alsoData Binding Syntax - interpolationsv-memo",
                        "Data Binding Syntax - interpolations",
                        "v-memo"
                    ]
                },
                {
                    "type": "p",
                    "text": "Does not expect expression"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance."
                },
                {
                    "type": "code",
                    "code": "<!-- single element --><spanv-once>This will never change: {{msg}}</span><!-- the element have children --><divv-once><h1>Comment</h1><p>{{msg}}</p></div><!-- component --><MyComponentv-once:comment=\"msg\"></MyComponent><!-- `v-for` directive --><ul><liv-for=\"iinlist\"v-once>{{i}}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "Since 3.2, you can also memoize part of the template with invalidation conditions usingv-memo."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Data Binding Syntax - interpolations",
                        "v-memo"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-memo​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.2+",
                        "Expects:any[]",
                        "DetailsMemoize a sub-tree of the template. Can be used on both elements and components. The directive expects a fixed-length array of dependency values to compare for the memoization. If every value in the array was the same as last render, then updates for the entire sub-tree will be skipped. For example:template<divv-memo=\"[valueA, valueB]\">...</div>When the component re-renders, if bothvalueAandvalueBremain the same, all updates for this<div>and its children will be skipped. In fact, even the Virtual DOM VNode creation will also be skipped since the memoized copy of the sub-tree can be reused.It is important to specify the memoization array correctly, otherwise we may skip updates that should indeed be applied.v-memowith an empty dependency array (v-memo=\"[]\") would be functionally equivalent tov-once.Usage withv-forv-memois provided solely for micro optimizations in performance-critical scenarios and should be rarely needed. The most common case where this may prove helpful is when rendering largev-forlists (wherelength > 1000):template<divv-for=\"iteminlist\":key=\"item.id\"v-memo=\"[item.id===selected]\"><p>ID: {{ item.id }} - selected: {{ item.id===selected }}</p><p>...more child nodes</p></div>When the component'sselectedstate changes, a large amount of VNodes will be created even though most of the items remained exactly the same. Thev-memousage here is essentially saying \"only update this item if it went from non-selected to selected, or the other way around\". This allows every unaffected item to reuse its previous VNode and skip diffing entirely. Note we don't need to includeitem.idin the memo dependency array here since Vue automatically infers it from the item's:key.WARNINGWhen usingv-memowithv-for, make sure they are used on the same element.v-memodoes not work insidev-for.v-memocan also be used on components to manually prevent unwanted updates in certain edge cases where the child component update check has been de-optimized. But again, it is the developer's responsibility to specify correct dependency arrays to avoid skipping necessary updates.",
                        "See alsov-once",
                        "v-once"
                    ]
                },
                {
                    "type": "p",
                    "text": "Only supported in 3.2+"
                },
                {
                    "type": "p",
                    "text": "Expects:any[]"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Memoize a sub-tree of the template. Can be used on both elements and components. The directive expects a fixed-length array of dependency values to compare for the memoization. If every value in the array was the same as last render, then updates for the entire sub-tree will be skipped. For example:"
                },
                {
                    "type": "code",
                    "code": "<divv-memo=\"[valueA, valueB]\">...</div>"
                },
                {
                    "type": "p",
                    "text": "When the component re-renders, if bothvalueAandvalueBremain the same, all updates for this<div>and its children will be skipped. In fact, even the Virtual DOM VNode creation will also be skipped since the memoized copy of the sub-tree can be reused."
                },
                {
                    "type": "p",
                    "text": "It is important to specify the memoization array correctly, otherwise we may skip updates that should indeed be applied.v-memowith an empty dependency array (v-memo=\"[]\") would be functionally equivalent tov-once."
                },
                {
                    "type": "p",
                    "text": "Usage withv-for"
                },
                {
                    "type": "p",
                    "text": "v-memois provided solely for micro optimizations in performance-critical scenarios and should be rarely needed. The most common case where this may prove helpful is when rendering largev-forlists (wherelength > 1000):"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"iteminlist\":key=\"item.id\"v-memo=\"[item.id===selected]\"><p>ID: {{ item.id }} - selected: {{ item.id===selected }}</p><p>...more child nodes</p></div>"
                },
                {
                    "type": "p",
                    "text": "When the component'sselectedstate changes, a large amount of VNodes will be created even though most of the items remained exactly the same. Thev-memousage here is essentially saying \"only update this item if it went from non-selected to selected, or the other way around\". This allows every unaffected item to reuse its previous VNode and skip diffing entirely. Note we don't need to includeitem.idin the memo dependency array here since Vue automatically infers it from the item's:key."
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "When usingv-memowithv-for, make sure they are used on the same element.v-memodoes not work insidev-for."
                },
                {
                    "type": "p",
                    "text": "v-memocan also be used on components to manually prevent unwanted updates in certain edge cases where the child component update check has been de-optimized. But again, it is the developer's responsibility to specify correct dependency arrays to avoid skipping necessary updates."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "v-once"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-cloak​"
                },
                {
                    "type": "p",
                    "text": "Used to hide un-compiled template until it is ready."
                },
                {
                    "type": "list",
                    "items": [
                        "Does not expect expression",
                        "DetailsThis directive is only needed in no-build-step setups.When using in-DOM templates, there can be a \"flash of un-compiled templates\": the user may see raw mustache tags until the mounted component replaces them with rendered content.v-cloakwill remain on the element until the associated component instance is mounted. Combined with CSS rules such as[v-cloak] { display: none }, it can be used to hide the raw templates until the component is ready.",
                        "Examplecss[v-cloak] {display:none;}template<divv-cloak>{{ message }}</div>The<div>will not be visible until the compilation is done."
                    ]
                },
                {
                    "type": "p",
                    "text": "Does not expect expression"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This directive is only needed in no-build-step setups."
                },
                {
                    "type": "p",
                    "text": "When using in-DOM templates, there can be a \"flash of un-compiled templates\": the user may see raw mustache tags until the mounted component replaces them with rendered content."
                },
                {
                    "type": "p",
                    "text": "v-cloakwill remain on the element until the associated component instance is mounted. Combined with CSS rules such as[v-cloak] { display: none }, it can be used to hide the raw templates until the component is ready."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "[v-cloak] {display:none;}"
                },
                {
                    "type": "code",
                    "code": "<divv-cloak>{{ message }}</div>"
                },
                {
                    "type": "p",
                    "text": "The<div>will not be visible until the compilation is done."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/built-in-special-attributes#key",
            "title": "Built-in Special Attributes | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Built-in Special Attributes​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "key​"
                },
                {
                    "type": "p",
                    "text": "Thekeyspecial attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify vnodes when diffing the new list of nodes against the old list."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:number | string | symbol",
                        "DetailsWithout keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed / destroyed.Children of the same common parent must haveunique keys. Duplicate keys will cause render errors.The most common use case is combined withv-for:template<ul><liv-for=\"iteminitems\":key=\"item.id\">...</li></ul>It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:Properly trigger lifecycle hooks of a componentTrigger transitionsFor example:template<transition><span:key=\"text\">{{ text }}</span></transition>Whentextchanges, the<span>will always be replaced instead of patched, so a transition will be triggered.",
                        "Properly trigger lifecycle hooks of a component",
                        "Trigger transitions",
                        "See alsoGuide - List Rendering - Maintaining State withkey"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:number | string | symbol"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed / destroyed."
                },
                {
                    "type": "p",
                    "text": "Children of the same common parent must haveunique keys. Duplicate keys will cause render errors."
                },
                {
                    "type": "p",
                    "text": "The most common use case is combined withv-for:"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"iteminitems\":key=\"item.id\">...</li></ul>"
                },
                {
                    "type": "p",
                    "text": "It can also be used to force replacement of an element/component instead of reusing it. This can be useful when you want to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Properly trigger lifecycle hooks of a component",
                        "Trigger transitions"
                    ]
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "<transition><span:key=\"text\">{{ text }}</span></transition>"
                },
                {
                    "type": "p",
                    "text": "Whentextchanges, the<span>will always be replaced instead of patched, so a transition will be triggered."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - List Rendering - Maintaining State withkey"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ref​"
                },
                {
                    "type": "p",
                    "text": "Denotes atemplate ref."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:string | Function",
                        "Detailsrefis used to register a reference to an element or a child component.In Options API, the reference will be registered under the component'sthis.$refsobject:template<!-- stored as this.$refs.p --><pref=\"p\">hello</p>In Composition API, the reference will be stored in a ref with matching name:vue<scriptsetup>import{ useTemplateRef }from'vue'constpRef=useTemplateRef('p')</script><template><pref=\"p\">hello</p></template>If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be the child component instance.Alternativelyrefcan accept a function value which provides full control over where to store the reference:template<ChildComponent:ref=\"(el)=>child=el\"/>An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you must wait until the component is mounted before accessing them.this.$refsis also non-reactive, therefore you should not attempt to use it in templates for data-binding.",
                        "See alsoGuide - Template RefsGuide - Typing Template RefsGuide - Typing Component Template Refs",
                        "Guide - Template Refs",
                        "Guide - Typing Template Refs",
                        "Guide - Typing Component Template Refs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:string | Function"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "refis used to register a reference to an element or a child component."
                },
                {
                    "type": "p",
                    "text": "In Options API, the reference will be registered under the component'sthis.$refsobject:"
                },
                {
                    "type": "code",
                    "code": "<!-- stored as this.$refs.p --><pref=\"p\">hello</p>"
                },
                {
                    "type": "p",
                    "text": "In Composition API, the reference will be stored in a ref with matching name:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useTemplateRef }from'vue'constpRef=useTemplateRef('p')</script><template><pref=\"p\">hello</p></template>"
                },
                {
                    "type": "p",
                    "text": "If used on a plain DOM element, the reference will be that element; if used on a child component, the reference will be the child component instance."
                },
                {
                    "type": "p",
                    "text": "Alternativelyrefcan accept a function value which provides full control over where to store the reference:"
                },
                {
                    "type": "code",
                    "code": "<ChildComponent:ref=\"(el)=>child=el\"/>"
                },
                {
                    "type": "p",
                    "text": "An important note about the ref registration timing: because the refs themselves are created as a result of the render function, you must wait until the component is mounted before accessing them."
                },
                {
                    "type": "p",
                    "text": "this.$refsis also non-reactive, therefore you should not attempt to use it in templates for data-binding."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Template Refs",
                        "Guide - Typing Template Refs",
                        "Guide - Typing Component Template Refs"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "is​"
                },
                {
                    "type": "p",
                    "text": "Used for bindingdynamic components."
                },
                {
                    "type": "list",
                    "items": [
                        "Expects:string | Component",
                        "Usage on native elementsOnly supported in 3.1+When theisattribute is used on a native HTML element, it will be interpreted as aCustomized built-in element, which is a native web platform feature.There is, however, a use case where you may need Vue to replace a native element with a Vue component, as explained inin-DOM Template Parsing Caveats. You can prefix the value of theisattribute withvue:so that Vue will render the element as a Vue component instead:template<table><tris=\"vue:my-row-component\"></tr></table>",
                        "Only supported in 3.1+",
                        "See alsoBuilt-in Special Element -<component>Dynamic Components",
                        "Built-in Special Element -<component>",
                        "Dynamic Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Expects:string | Component"
                },
                {
                    "type": "p",
                    "text": "Usage on native elements"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.1+"
                    ]
                },
                {
                    "type": "p",
                    "text": "When theisattribute is used on a native HTML element, it will be interpreted as aCustomized built-in element, which is a native web platform feature."
                },
                {
                    "type": "p",
                    "text": "There is, however, a use case where you may need Vue to replace a native element with a Vue component, as explained inin-DOM Template Parsing Caveats. You can prefix the value of theisattribute withvue:so that Vue will render the element as a Vue component instead:"
                },
                {
                    "type": "code",
                    "code": "<table><tris=\"vue:my-row-component\"></tr></table>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Built-in Special Element -<component>",
                        "Dynamic Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/built-in-special-elements#component",
            "title": "Built-in Special Elements | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Built-in Special Elements​"
                },
                {
                    "type": "p",
                    "text": "Not Components"
                },
                {
                    "type": "p",
                    "text": "<component>,<slot>and<template>are component-like features and part of the template syntax. They are not true components and are compiled away during template compilation. As such, they are conventionally written with lowercase in templates."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<component>​"
                },
                {
                    "type": "p",
                    "text": "A \"meta component\" for rendering dynamic components or elements."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceDynamicComponentProps{is:string|Component}",
                        "DetailsThe actual component to render is determined by theisprop.Whenisis a string, it could be either an HTML tag name or a component's registered name.Alternatively,iscan also be directly bound to the definition of a component.",
                        "Whenisis a string, it could be either an HTML tag name or a component's registered name.",
                        "Alternatively,iscan also be directly bound to the definition of a component.",
                        "ExampleRendering components by registered name (Options API):vue<script>importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'exportdefault{components: { Foo, Bar },data() {return{view:'Foo'}}}</script><template><component:is=\"view\"/></template>Rendering components by definition (Composition API with<script setup>):vue<scriptsetup>importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'</script><template><component:is=\"Math.random() > 0.5 ? Foo : Bar\"/></template>Rendering HTML elements:template<component:is=\"href?'a':'span'\"></component>Thebuilt-in componentscan all be passed tois, but you must register them if you want to pass them by name. For example:vue<script>import{ Transition, TransitionGroup }from'vue'exportdefault{components: {Transition,TransitionGroup}}</script><template><component:is=\"isGroup ? 'TransitionGroup' : 'Transition'\">...</component></template>Registration is not required if you pass the component itself toisrather than its name, e.g. in<script setup>.Ifv-modelis used on a<component>tag, the template compiler will expand it to amodelValueprop andupdate:modelValueevent listener, much like it would for any other component. However, this won't be compatible with native HTML elements, such as<input>or<select>. As a result, usingv-modelwith a dynamically created native element won't work:vue<scriptsetup>import{ ref }from'vue'consttag=ref('input')constusername=ref('')</script><template><!-- This won't work as 'input' is a native HTML element --><component:is=\"tag\"v-model=\"username\"/></template>In practice, this edge case isn't common as native form fields are typically wrapped in components in real applications. If you do need to use a native element directly then you can split thev-modelinto an attribute and event manually.",
                        "See alsoDynamic Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceDynamicComponentProps{is:string|Component}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The actual component to render is determined by theisprop."
                },
                {
                    "type": "list",
                    "items": [
                        "Whenisis a string, it could be either an HTML tag name or a component's registered name.",
                        "Alternatively,iscan also be directly bound to the definition of a component."
                    ]
                },
                {
                    "type": "p",
                    "text": "Whenisis a string, it could be either an HTML tag name or a component's registered name."
                },
                {
                    "type": "p",
                    "text": "Alternatively,iscan also be directly bound to the definition of a component."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Rendering components by registered name (Options API):"
                },
                {
                    "type": "code",
                    "code": "<script>importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'exportdefault{components: { Foo, Bar },data() {return{view:'Foo'}}}</script><template><component:is=\"view\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Rendering components by definition (Composition API with<script setup>):"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'</script><template><component:is=\"Math.random() > 0.5 ? Foo : Bar\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Rendering HTML elements:"
                },
                {
                    "type": "code",
                    "code": "<component:is=\"href?'a':'span'\"></component>"
                },
                {
                    "type": "p",
                    "text": "Thebuilt-in componentscan all be passed tois, but you must register them if you want to pass them by name. For example:"
                },
                {
                    "type": "code",
                    "code": "<script>import{ Transition, TransitionGroup }from'vue'exportdefault{components: {Transition,TransitionGroup}}</script><template><component:is=\"isGroup ? 'TransitionGroup' : 'Transition'\">...</component></template>"
                },
                {
                    "type": "p",
                    "text": "Registration is not required if you pass the component itself toisrather than its name, e.g. in<script setup>."
                },
                {
                    "type": "p",
                    "text": "Ifv-modelis used on a<component>tag, the template compiler will expand it to amodelValueprop andupdate:modelValueevent listener, much like it would for any other component. However, this won't be compatible with native HTML elements, such as<input>or<select>. As a result, usingv-modelwith a dynamically created native element won't work:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'consttag=ref('input')constusername=ref('')</script><template><!-- This won't work as 'input' is a native HTML element --><component:is=\"tag\"v-model=\"username\"/></template>"
                },
                {
                    "type": "p",
                    "text": "In practice, this edge case isn't common as native form fields are typically wrapped in components in real applications. If you do need to use a native element directly then you can split thev-modelinto an attribute and event manually."
                },
                {
                    "type": "p",
                    "text": "See alsoDynamic Components"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<slot>​"
                },
                {
                    "type": "p",
                    "text": "Denotes slot content outlets in templates."
                },
                {
                    "type": "list",
                    "items": [
                        "PropstsinterfaceSlotProps{/*** Any props passed to <slot> to passed as arguments* for scoped slots*/[key:string]:any/*** Reserved for specifying slot name.*/name?:string}",
                        "DetailsThe<slot>element can use thenameattribute to specify a slot name. When nonameis specified, it will render the default slot. Additional attributes passed to the slot element will be passed as slot props to the scoped slot defined in the parent.The element itself will be replaced by its matched slot content.<slot>elements in Vue templates are compiled into JavaScript, so they are not to be confused withnative<slot>elements.",
                        "See alsoComponent - Slots"
                    ]
                },
                {
                    "type": "p",
                    "text": "Props"
                },
                {
                    "type": "code",
                    "code": "interfaceSlotProps{/*** Any props passed to <slot> to passed as arguments* for scoped slots*/[key:string]:any/*** Reserved for specifying slot name.*/name?:string}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The<slot>element can use thenameattribute to specify a slot name. When nonameis specified, it will render the default slot. Additional attributes passed to the slot element will be passed as slot props to the scoped slot defined in the parent."
                },
                {
                    "type": "p",
                    "text": "The element itself will be replaced by its matched slot content."
                },
                {
                    "type": "p",
                    "text": "<slot>elements in Vue templates are compiled into JavaScript, so they are not to be confused withnative<slot>elements."
                },
                {
                    "type": "p",
                    "text": "See alsoComponent - Slots"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "<template>​"
                },
                {
                    "type": "p",
                    "text": "The<template>tag is used as a placeholder when we want to use a built-in directive without rendering an element in the DOM."
                },
                {
                    "type": "list",
                    "items": [
                        "DetailsThe special handling for<template>is only triggered if it is used with one of these directives:v-if,v-else-if, orv-elsev-forv-slotIf none of those directives are present then it will be rendered as anative<template>elementinstead.A<template>with av-forcan also have akeyattribute. All other attributes and directives will be discarded, as they aren't meaningful without a corresponding element.Single-file components use atop-level<template>tagto wrap the entire template. That usage is separate from the use of<template>described above. That top-level tag is not part of the template itself and doesn't support template syntax, such as directives.",
                        "v-if,v-else-if, orv-else",
                        "v-for",
                        "v-slot",
                        "See alsoGuide -v-ifon<template>Guide -v-foron<template>Guide - Named slots",
                        "Guide -v-ifon<template>",
                        "Guide -v-foron<template>",
                        "Guide - Named slots"
                    ]
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The special handling for<template>is only triggered if it is used with one of these directives:"
                },
                {
                    "type": "list",
                    "items": [
                        "v-if,v-else-if, orv-else",
                        "v-for",
                        "v-slot"
                    ]
                },
                {
                    "type": "p",
                    "text": "If none of those directives are present then it will be rendered as anative<template>elementinstead."
                },
                {
                    "type": "p",
                    "text": "A<template>with av-forcan also have akeyattribute. All other attributes and directives will be discarded, as they aren't meaningful without a corresponding element."
                },
                {
                    "type": "p",
                    "text": "Single-file components use atop-level<template>tagto wrap the entire template. That usage is separate from the use of<template>described above. That top-level tag is not part of the template itself and doesn't support template syntax, such as directives."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide -v-ifon<template>",
                        "Guide -v-foron<template>",
                        "Guide - Named slots"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/compile-time-flags#VUE_OPTIONS_API",
            "title": "Compile-Time Flags | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Compile-Time Flags​"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Compile-time flags only apply when using theesm-bundlerbuild of Vue (i.e.vue/dist/vue.esm-bundler.js)."
                },
                {
                    "type": "p",
                    "text": "When using Vue with a build step, it is possible to configure a number of compile-time flags to enable / disable certain features. The benefit of using compile-time flags is that features disabled this way can be removed from the final bundle via tree-shaking."
                },
                {
                    "type": "p",
                    "text": "Vue will work even if these flags are not explicitly configured. However, it is recommended to always configure them so that the relevant features can be properly removed when possible."
                },
                {
                    "type": "p",
                    "text": "SeeConfiguration Guideson how to configure them depending on your build tool."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "__VUE_OPTIONS_API__​"
                },
                {
                    "type": "list",
                    "items": [
                        "Default:trueEnable / disable Options API support. Disabling this will result in smaller bundles, but may affect compatibility with 3rd party libraries if they rely on Options API."
                    ]
                },
                {
                    "type": "p",
                    "text": "Default:true"
                },
                {
                    "type": "p",
                    "text": "Enable / disable Options API support. Disabling this will result in smaller bundles, but may affect compatibility with 3rd party libraries if they rely on Options API."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "__VUE_PROD_DEVTOOLS__​"
                },
                {
                    "type": "list",
                    "items": [
                        "Default:falseEnable / disable devtools support in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Default:false"
                },
                {
                    "type": "p",
                    "text": "Enable / disable devtools support in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "__VUE_PROD_HYDRATION_MISMATCH_DETAILS__​"
                },
                {
                    "type": "list",
                    "items": [
                        "Default:falseEnable/disable detailed warnings for hydration mismatches in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes.",
                        "Only available in 3.4+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Default:false"
                },
                {
                    "type": "p",
                    "text": "Enable/disable detailed warnings for hydration mismatches in production builds. This will result in more code included in the bundle, so it is recommended to only enable this for debugging purposes."
                },
                {
                    "type": "p",
                    "text": "Only available in 3.4+"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Configuration Guides​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vite​"
                },
                {
                    "type": "p",
                    "text": "@vitejs/plugin-vueautomatically provides default values for these flags. To change the default values, use Vite'sdefineconfig option:"
                },
                {
                    "type": "code",
                    "code": "// vite.config.jsimport{ defineConfig }from'vite'exportdefaultdefineConfig({define: {// enable hydration mismatch details in production build__VUE_PROD_HYDRATION_MISMATCH_DETAILS__:'true'}})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vue-cli​"
                },
                {
                    "type": "p",
                    "text": "@vue/cli-serviceautomatically provides default values for some of these flags. To configure /change the values:"
                },
                {
                    "type": "code",
                    "code": "// vue.config.jsmodule.exports={chainWebpack: (config)=>{config.plugin('define').tap((definitions)=>{Object.assign(definitions[0], {__VUE_OPTIONS_API__:'true',__VUE_PROD_DEVTOOLS__:'false',__VUE_PROD_HYDRATION_MISMATCH_DETAILS__:'false'})returndefinitions})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "webpack​"
                },
                {
                    "type": "p",
                    "text": "Flags should be defined using webpack'sDefinePlugin:"
                },
                {
                    "type": "code",
                    "code": "// webpack.config.jsmodule.exports={// ...plugins: [newwebpack.DefinePlugin({__VUE_OPTIONS_API__:'true',__VUE_PROD_DEVTOOLS__:'false',__VUE_PROD_HYDRATION_MISMATCH_DETAILS__:'false'})]}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rollup​"
                },
                {
                    "type": "p",
                    "text": "Flags should be defined using@rollup/plugin-replace:"
                },
                {
                    "type": "code",
                    "code": "// rollup.config.jsimportreplacefrom'@rollup/plugin-replace'exportdefault{plugins: [replace({__VUE_OPTIONS_API__:'true',__VUE_PROD_DEVTOOLS__:'false',__VUE_PROD_HYDRATION_MISMATCH_DETAILS__:'false'})]}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/component-instance#data",
            "title": "Component Instance | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Component Instance​"
                },
                {
                    "type": "p",
                    "text": "INFO"
                },
                {
                    "type": "p",
                    "text": "This page documents the built-in properties and methods exposed on the component public instance, i.e.this."
                },
                {
                    "type": "p",
                    "text": "All properties listed on this page are readonly (except nested properties in$data)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$data​"
                },
                {
                    "type": "p",
                    "text": "The object returned from thedataoption, made reactive by the component. The component instance proxies access to the properties on its data object."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$data:object}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$data:object}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$props​"
                },
                {
                    "type": "p",
                    "text": "An object representing the component's current, resolved props."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$props:object}",
                        "DetailsOnly props declared via thepropsoption will be included. The component instance proxies access to the properties on its props object."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$props:object}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Only props declared via thepropsoption will be included. The component instance proxies access to the properties on its props object."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$el​"
                },
                {
                    "type": "p",
                    "text": "The root DOM node that the component instance is managing."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$el:Node|undefined}",
                        "Details$elwill beundefineduntil the component ismounted.For components with a single root element,$elwill point to that element.For components with text root,$elwill point to the text node.For components with multiple root nodes,$elwill be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM (a text node, or a comment node in SSR hydration mode).TIPFor consistency, it is recommended to usetemplate refsfor direct access to elements instead of relying on$el.",
                        "For components with a single root element,$elwill point to that element.",
                        "For components with text root,$elwill point to the text node.",
                        "For components with multiple root nodes,$elwill be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM (a text node, or a comment node in SSR hydration mode)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$el:Node|undefined}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "$elwill beundefineduntil the component ismounted."
                },
                {
                    "type": "list",
                    "items": [
                        "For components with a single root element,$elwill point to that element.",
                        "For components with text root,$elwill point to the text node.",
                        "For components with multiple root nodes,$elwill be the placeholder DOM node that Vue uses to keep track of the component's position in the DOM (a text node, or a comment node in SSR hydration mode)."
                    ]
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "For consistency, it is recommended to usetemplate refsfor direct access to elements instead of relying on$el."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$options​"
                },
                {
                    "type": "p",
                    "text": "The resolved component options used for instantiating the current component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$options:ComponentOptions}",
                        "DetailsThe$optionsobject exposes the resolved options for the current component and is the merge result of these possible sources:Global mixinsComponentextendsbaseComponent mixinsIt is typically used to support custom component options:jsconstapp=createApp({customOption:'foo',created() {console.log(this.$options.customOption)// => 'foo'}})",
                        "Global mixins",
                        "Componentextendsbase",
                        "Component mixins",
                        "See alsoapp.config.optionMergeStrategies"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$options:ComponentOptions}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The$optionsobject exposes the resolved options for the current component and is the merge result of these possible sources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global mixins",
                        "Componentextendsbase",
                        "Component mixins"
                    ]
                },
                {
                    "type": "p",
                    "text": "It is typically used to support custom component options:"
                },
                {
                    "type": "code",
                    "code": "constapp=createApp({customOption:'foo',created() {console.log(this.$options.customOption)// => 'foo'}})"
                },
                {
                    "type": "p",
                    "text": "See alsoapp.config.optionMergeStrategies"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$parent​"
                },
                {
                    "type": "p",
                    "text": "The parent instance, if the current instance has one. It will benullfor the root instance itself."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$parent:ComponentPublicInstance|null}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$parent:ComponentPublicInstance|null}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$root​"
                },
                {
                    "type": "p",
                    "text": "The root component instance of the current component tree. If the current instance has no parents this value will be itself."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$root:ComponentPublicInstance}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$root:ComponentPublicInstance}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$slots​"
                },
                {
                    "type": "p",
                    "text": "An object representing theslotspassed by the parent component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$slots:{ [name:string]:Slot}}typeSlot=(...args:any[])=>VNode[]",
                        "DetailsTypically used when manually authoringrender functions, but can also be used to detect whether a slot is present.Each slot is exposed onthis.$slotsas a function that returns an array of vnodes under the key corresponding to that slot's name. The default slot is exposed asthis.$slots.default.If a slot is ascoped slot, arguments passed to the slot functions are available to the slot as its slot props.",
                        "See alsoRender Functions - Rendering Slots"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$slots:{ [name:string]:Slot}}typeSlot=(...args:any[])=>VNode[]"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Typically used when manually authoringrender functions, but can also be used to detect whether a slot is present."
                },
                {
                    "type": "p",
                    "text": "Each slot is exposed onthis.$slotsas a function that returns an array of vnodes under the key corresponding to that slot's name. The default slot is exposed asthis.$slots.default."
                },
                {
                    "type": "p",
                    "text": "If a slot is ascoped slot, arguments passed to the slot functions are available to the slot as its slot props."
                },
                {
                    "type": "p",
                    "text": "See alsoRender Functions - Rendering Slots"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$refs​"
                },
                {
                    "type": "p",
                    "text": "An object of DOM elements and component instances, registered viatemplate refs."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$refs:{ [name:string]:Element|ComponentPublicInstance|null}}",
                        "See alsoTemplate refsSpecial Attributes - ref",
                        "Template refs",
                        "Special Attributes - ref"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$refs:{ [name:string]:Element|ComponentPublicInstance|null}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Template refs",
                        "Special Attributes - ref"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$attrs​"
                },
                {
                    "type": "p",
                    "text": "An object that contains the component's fallthrough attributes."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$attrs:object}",
                        "DetailsFallthrough Attributesare attributes and event handlers passed by the parent component, but not declared as a prop or an emitted event by the child.By default, everything in$attrswill be automatically inherited on the component's root element if there is only a single root element. This behavior is disabled if the component has multiple root nodes, and can be explicitly disabled with theinheritAttrsoption.",
                        "See alsoFallthrough Attributes",
                        "Fallthrough Attributes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$attrs:object}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Fallthrough Attributesare attributes and event handlers passed by the parent component, but not declared as a prop or an emitted event by the child."
                },
                {
                    "type": "p",
                    "text": "By default, everything in$attrswill be automatically inherited on the component's root element if there is only a single root element. This behavior is disabled if the component has multiple root nodes, and can be explicitly disabled with theinheritAttrsoption."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Fallthrough Attributes"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$watch()​"
                },
                {
                    "type": "p",
                    "text": "Imperative API for creating watchers."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$watch(source:string|(()=>any),callback:WatchCallback,options?:WatchOptions):StopHandle}typeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidinterfaceWatchOptions{immediate?:boolean// default: falsedeep?:boolean// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}typeStopHandle=()=>void",
                        "DetailsThe first argument is the watch source. It can be a component property name string, a simple dot-delimited path string, or agetter function.The second argument is the callback function. The callback receives the new value and the old value of the watched source.immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. SeeDeep Watchers.flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.",
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.",
                        "ExampleWatch a property name:jsthis.$watch('a', (newVal,oldVal)=>{})Watch a dot-delimited path:jsthis.$watch('a.b', (newVal,oldVal)=>{})Using getter for more complex expressions:jsthis.$watch(// every time the expression `this.a + this.b` yields// a different result, the handler will be called.// It's as if we were watching a computed property// without defining the computed property itself.()=>this.a+this.b,(newVal,oldVal)=>{})Stopping the watcher:jsconstunwatch=this.$watch('a', cb)// later...unwatch()",
                        "See alsoOptions -watchGuide - Watchers",
                        "Options -watch",
                        "Guide - Watchers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$watch(source:string|(()=>any),callback:WatchCallback,options?:WatchOptions):StopHandle}typeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidinterfaceWatchOptions{immediate?:boolean// default: falsedeep?:boolean// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}typeStopHandle=()=>void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument is the watch source. It can be a component property name string, a simple dot-delimited path string, or agetter function."
                },
                {
                    "type": "p",
                    "text": "The second argument is the callback function. The callback receives the new value and the old value of the watched source."
                },
                {
                    "type": "list",
                    "items": [
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging."
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Watch a property name:"
                },
                {
                    "type": "code",
                    "code": "this.$watch('a', (newVal,oldVal)=>{})"
                },
                {
                    "type": "p",
                    "text": "Watch a dot-delimited path:"
                },
                {
                    "type": "code",
                    "code": "this.$watch('a.b', (newVal,oldVal)=>{})"
                },
                {
                    "type": "p",
                    "text": "Using getter for more complex expressions:"
                },
                {
                    "type": "code",
                    "code": "this.$watch(// every time the expression `this.a + this.b` yields// a different result, the handler will be called.// It's as if we were watching a computed property// without defining the computed property itself.()=>this.a+this.b,(newVal,oldVal)=>{})"
                },
                {
                    "type": "p",
                    "text": "Stopping the watcher:"
                },
                {
                    "type": "code",
                    "code": "constunwatch=this.$watch('a', cb)// later...unwatch()"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Options -watch",
                        "Guide - Watchers"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$emit()​"
                },
                {
                    "type": "p",
                    "text": "Trigger a custom event on the current instance. Any additional arguments will be passed into the listener's callback function."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$emit(event:string,...args:any[]):void}",
                        "Examplejsexportdefault{created() {// only eventthis.$emit('foo')// with additional argumentsthis.$emit('bar',1,2,3)}}",
                        "See alsoComponent - Eventsemitsoption",
                        "Component - Events",
                        "emitsoption"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$emit(event:string,...args:any[]):void}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{created() {// only eventthis.$emit('foo')// with additional argumentsthis.$emit('bar',1,2,3)}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Component - Events",
                        "emitsoption"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$forceUpdate()​"
                },
                {
                    "type": "p",
                    "text": "Force the component instance to re-render."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$forceUpdate():void}",
                        "DetailsThis should be rarely needed given Vue's fully automatic reactivity system. The only cases where you may need it is when you have explicitly created non-reactive component state using advanced reactivity APIs."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$forceUpdate():void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This should be rarely needed given Vue's fully automatic reactivity system. The only cases where you may need it is when you have explicitly created non-reactive component state using advanced reactivity APIs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "$nextTick()​"
                },
                {
                    "type": "p",
                    "text": "Instance-bound version of the globalnextTick()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentPublicInstance{$nextTick(callback?:(this:ComponentPublicInstance)=>void):Promise<void>}",
                        "DetailsThe only difference from the global version ofnextTick()is that the callback passed tothis.$nextTick()will have itsthiscontext bound to the current component instance.",
                        "See alsonextTick()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentPublicInstance{$nextTick(callback?:(this:ComponentPublicInstance)=>void):Promise<void>}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The only difference from the global version ofnextTick()is that the callback passed tothis.$nextTick()will have itsthiscontext bound to the current component instance."
                },
                {
                    "type": "p",
                    "text": "See alsonextTick()"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/composition-api-dependency-injection#provide",
            "title": "Composition API: Dependency Injection | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composition API:Dependency Injection​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "provide()​"
                },
                {
                    "type": "p",
                    "text": "Provides a value that can be injected by descendant components."
                },
                {
                    "type": "list",
                    "items": [
                        "Typetsfunctionprovide<T>(key:InjectionKey<T>|string,value:T):void",
                        "Detailsprovide()takes two arguments: the key, which can be a string or a symbol, and the value to be injected.When using TypeScript, the key can be a symbol casted asInjectionKey- a Vue provided utility type that extendsSymbol, which can be used to sync the value type betweenprovide()andinject().Similar to lifecycle hook registration APIs,provide()must be called synchronously during a component'ssetup()phase.",
                        "Examplevue<scriptsetup>import{ ref, provide }from'vue'import{ countSymbol }from'./injectionSymbols'// provide static valueprovide('path','/project/')// provide reactive valueconstcount=ref(0)provide('count', count)// provide with Symbol keysprovide(countSymbol, count)</script>",
                        "See alsoGuide - Provide / InjectGuide - Typing Provide / Inject",
                        "Guide - Provide / Inject",
                        "Guide - Typing Provide / Inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionprovide<T>(key:InjectionKey<T>|string,value:T):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "provide()takes two arguments: the key, which can be a string or a symbol, and the value to be injected."
                },
                {
                    "type": "p",
                    "text": "When using TypeScript, the key can be a symbol casted asInjectionKey- a Vue provided utility type that extendsSymbol, which can be used to sync the value type betweenprovide()andinject()."
                },
                {
                    "type": "p",
                    "text": "Similar to lifecycle hook registration APIs,provide()must be called synchronously during a component'ssetup()phase."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, provide }from'vue'import{ countSymbol }from'./injectionSymbols'// provide static valueprovide('path','/project/')// provide reactive valueconstcount=ref(0)provide('count', count)// provide with Symbol keysprovide(countSymbol, count)</script>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Provide / Inject",
                        "Guide - Typing Provide / Inject"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "inject()​"
                },
                {
                    "type": "p",
                    "text": "Injects a value provided by an ancestor component or the application (viaapp.provide())."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// without default valuefunctioninject<T>(key:InjectionKey<T>|string):T|undefined// with default valuefunctioninject<T>(key:InjectionKey<T>|string,defaultValue:T):T// with factoryfunctioninject<T>(key:InjectionKey<T>|string,defaultValue:()=>T,treatDefaultAsFactory:true):T",
                        "DetailsThe first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will \"shadow\" those higher up the chain. If no value with matching key was found,inject()returnsundefinedunless a default value is provided.The second argument is optional and is the default value to be used when no matching value was found.The second argument can also be a factory function that returns values that are expensive to create. In this case,truemust be passed as the third argument to indicate that the function should be used as a factory instead of the value itself.Similar to lifecycle hook registration APIs,inject()must be called synchronously during a component'ssetup()phase.When using TypeScript, the key can be of type ofInjectionKey- a Vue-provided utility type that extendsSymbol, which can be used to sync the value type betweenprovide()andinject().",
                        "ExampleAssuming a parent component has provided values as shown in the previousprovide()example:vue<scriptsetup>import{ inject }from'vue'import{ countSymbol }from'./injectionSymbols'// inject static value without defaultconstpath=inject('path')// inject reactive valueconstcount=inject('count')// inject with Symbol keysconstcount2=inject(countSymbol)// inject with default valueconstbar=inject('path','/default-path')// inject with function default valueconstfn=inject('function', ()=>{})// inject with default value factoryconstbaz=inject('factory', ()=>newExpensiveObject(),true)</script>",
                        "See alsoGuide - Provide / InjectGuide - Typing Provide / Inject",
                        "Guide - Provide / Inject",
                        "Guide - Typing Provide / Inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// without default valuefunctioninject<T>(key:InjectionKey<T>|string):T|undefined// with default valuefunctioninject<T>(key:InjectionKey<T>|string,defaultValue:T):T// with factoryfunctioninject<T>(key:InjectionKey<T>|string,defaultValue:()=>T,treatDefaultAsFactory:true):T"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument is the injection key. Vue will walk up the parent chain to locate a provided value with a matching key. If multiple components in the parent chain provides the same key, the one closest to the injecting component will \"shadow\" those higher up the chain. If no value with matching key was found,inject()returnsundefinedunless a default value is provided."
                },
                {
                    "type": "p",
                    "text": "The second argument is optional and is the default value to be used when no matching value was found."
                },
                {
                    "type": "p",
                    "text": "The second argument can also be a factory function that returns values that are expensive to create. In this case,truemust be passed as the third argument to indicate that the function should be used as a factory instead of the value itself."
                },
                {
                    "type": "p",
                    "text": "Similar to lifecycle hook registration APIs,inject()must be called synchronously during a component'ssetup()phase."
                },
                {
                    "type": "p",
                    "text": "When using TypeScript, the key can be of type ofInjectionKey- a Vue-provided utility type that extendsSymbol, which can be used to sync the value type betweenprovide()andinject()."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Assuming a parent component has provided values as shown in the previousprovide()example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ inject }from'vue'import{ countSymbol }from'./injectionSymbols'// inject static value without defaultconstpath=inject('path')// inject reactive valueconstcount=inject('count')// inject with Symbol keysconstcount2=inject(countSymbol)// inject with default valueconstbar=inject('path','/default-path')// inject with function default valueconstfn=inject('function', ()=>{})// inject with default value factoryconstbaz=inject('factory', ()=>newExpensiveObject(),true)</script>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Provide / Inject",
                        "Guide - Typing Provide / Inject"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "hasInjectionContext()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Returns true ifinject()can be used without warning about being called in the wrong place (e.g. outside ofsetup()). This method is designed to be used by libraries that want to useinject()internally without triggering a warning to the end user."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionhasInjectionContext():boolean"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionhasInjectionContext():boolean"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/composition-api-helpers#useattrs",
            "title": "Composition API: Helpers | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composition API: Helpers​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useAttrs()​"
                },
                {
                    "type": "p",
                    "text": "Returns theattrsobject from theSetup Context, which includes thefallthrough attributesof the current component. This is intended to be used in<script setup>where the setup context object is not available."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionuseAttrs():Record<string,unknown>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseAttrs():Record<string,unknown>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useSlots()​"
                },
                {
                    "type": "p",
                    "text": "Returns theslotsobject from theSetup Context, which includes parent passed slots as callable functions that return Virtual DOM nodes. This is intended to be used in<script setup>where the setup context object is not available."
                },
                {
                    "type": "p",
                    "text": "If using TypeScript,defineSlots()should be preferred instead."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionuseSlots():Record<string, (...args:any[])=>VNode[]>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseSlots():Record<string, (...args:any[])=>VNode[]>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useModel()​"
                },
                {
                    "type": "p",
                    "text": "This is the underlying helper that powersdefineModel(). If using<script setup>,defineModel()should be preferred instead."
                },
                {
                    "type": "list",
                    "items": [
                        "Only available in 3.4+",
                        "TypetsfunctionuseModel(props:Record<string,any>,key:string,options?:DefineModelOptions):ModelReftypeDefineModelOptions<T=any>={get?:(v:T)=>anyset?:(v:T)=>any}typeModelRef<T,MextendsPropertyKey=string,G=T,S=T>=Ref<G,S>&[ModelRef<T,M,G,S>,Record<M,true|undefined>]",
                        "Examplejsexportdefault{props: ['count'],emits: ['update:count'],setup(props) {constmsg=useModel(props,'count')msg.value=1}}",
                        "DetailsuseModel()can be used in non-SFC components, e.g. when using rawsetup()function. It expects thepropsobject as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlikedefineModel(), you are responsible for declaring the props and emits yourself."
                    ]
                },
                {
                    "type": "p",
                    "text": "Only available in 3.4+"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseModel(props:Record<string,any>,key:string,options?:DefineModelOptions):ModelReftypeDefineModelOptions<T=any>={get?:(v:T)=>anyset?:(v:T)=>any}typeModelRef<T,MextendsPropertyKey=string,G=T,S=T>=Ref<G,S>&[ModelRef<T,M,G,S>,Record<M,true|undefined>]"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['count'],emits: ['update:count'],setup(props) {constmsg=useModel(props,'count')msg.value=1}}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "useModel()can be used in non-SFC components, e.g. when using rawsetup()function. It expects thepropsobject as the first argument, and the model name as the second argument. The optional third argument can be used to declare custom getter and setter for the resulting model ref. Note that unlikedefineModel(), you are responsible for declaring the props and emits yourself."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useTemplateRef()​"
                },
                {
                    "type": "p",
                    "text": "Returns a shallow ref whose value will be synced with the template element or component with a matching ref attribute."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionuseTemplateRef<T>(key:string):Readonly<ShallowRef<T|null>>",
                        "Examplevue<scriptsetup>import{ useTemplateRef, onMounted }from'vue'constinputRef=useTemplateRef('input')onMounted(()=>{inputRef.value.focus()})</script><template><inputref=\"input\"/></template>",
                        "See alsoGuide - Template RefsGuide - Typing Template RefsGuide - Typing Component Template Refs",
                        "Guide - Template Refs",
                        "Guide - Typing Template Refs",
                        "Guide - Typing Component Template Refs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseTemplateRef<T>(key:string):Readonly<ShallowRef<T|null>>"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useTemplateRef, onMounted }from'vue'constinputRef=useTemplateRef('input')onMounted(()=>{inputRef.value.focus()})</script><template><inputref=\"input\"/></template>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Template Refs",
                        "Guide - Typing Template Refs",
                        "Guide - Typing Component Template Refs"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useId()​"
                },
                {
                    "type": "p",
                    "text": "Used to generate unique-per-application IDs for accessibility attributes or form elements."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionuseId():string",
                        "Examplevue<scriptsetup>import{ useId }from'vue'constid=useId()</script><template><form><label:for=\"id\">Name:</label><input:id=\"id\"type=\"text\"/></form></template>",
                        "DetailsIDs generated byuseId()are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component callinguseId()will also have different IDs.IDs generated byuseId()are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches.If you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix viaapp.config.idPrefix."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseId():string"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useId }from'vue'constid=useId()</script><template><form><label:for=\"id\">Name:</label><input:id=\"id\"type=\"text\"/></form></template>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "IDs generated byuseId()are unique-per-application. It can be used to generate IDs for form elements and accessibility attributes. Multiple calls in the same component will generate different IDs; multiple instances of the same component callinguseId()will also have different IDs."
                },
                {
                    "type": "p",
                    "text": "IDs generated byuseId()are also guaranteed to be stable across the server and client renders, so they can be used in SSR applications without leading to hydration mismatches."
                },
                {
                    "type": "p",
                    "text": "If you have more than one Vue application instance of the same page, you can avoid ID conflicts by giving each app an ID prefix viaapp.config.idPrefix."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/composition-api-lifecycle#onerrorcaptured",
            "title": "Composition API: Lifecycle Hooks | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composition API: Lifecycle Hooks​"
                },
                {
                    "type": "p",
                    "text": "Usage Note"
                },
                {
                    "type": "p",
                    "text": "All APIs listed on this page must be called synchronously during thesetup()phase of a component. SeeGuide - Lifecycle Hooksfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onMounted()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called after the component has been mounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononMounted(callback:()=>void):void",
                        "DetailsA component is considered mounted after:All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.This hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in aserver-rendered application.This hook is not called during server-side rendering.",
                        "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).",
                        "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.",
                        "ExampleAccessing an element via template ref:vue<scriptsetup>import{ ref, onMounted }from'vue'constel=ref()onMounted(()=>{el.value// <div>})</script><template><divref=\"el\"></div></template>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononMounted(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A component is considered mounted after:"
                },
                {
                    "type": "list",
                    "items": [
                        "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).",
                        "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document."
                    ]
                },
                {
                    "type": "p",
                    "text": "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees)."
                },
                {
                    "type": "p",
                    "text": "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document."
                },
                {
                    "type": "p",
                    "text": "This hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in aserver-rendered application."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Accessing an element via template ref:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'constel=ref()onMounted(()=>{el.value// <div>})</script><template><divref=\"el\"></div></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onUpdated()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called after the component has updated its DOM tree due to a reactive state change."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononUpdated(callback:()=>void):void",
                        "DetailsA parent component's updated hook is called after that of its child components.This hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, usenextTick()instead.This hook is not called during server-side rendering.WARNINGDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!",
                        "ExampleAccessing updated DOM:vue<scriptsetup>import{ ref, onUpdated }from'vue'constcount=ref(0)onUpdated(()=>{// text content should be the same as current `count.value`console.log(document.getElementById('count').textContent)})</script><template><buttonid=\"count\"@click=\"count++\">{{ count }}</button></template>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononUpdated(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A parent component's updated hook is called after that of its child components."
                },
                {
                    "type": "p",
                    "text": "This hook is called after any DOM update of the component, which can be caused by different state changes, because multiple state changes can be batched into a single render cycle for performance reasons. If you need to access the updated DOM after a specific state change, usenextTick()instead."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "Do not mutate component state in the updated hook - this will likely lead to an infinite update loop!"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Accessing updated DOM:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onUpdated }from'vue'constcount=ref(0)onUpdated(()=>{// text content should be the same as current `count.value`console.log(document.getElementById('count').textContent)})</script><template><buttonid=\"count\"@click=\"count++\">{{ count }}</button></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onUnmounted()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called after the component has been unmounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononUnmounted(callback:()=>void):void",
                        "DetailsA component is considered unmounted after:All of its child components have been unmounted.All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped.Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.This hook is not called during server-side rendering.",
                        "All of its child components have been unmounted.",
                        "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped.",
                        "Examplevue<scriptsetup>import{ onMounted, onUnmounted }from'vue'letintervalIdonMounted(()=>{intervalId=setInterval(()=>{// ...})})onUnmounted(()=>clearInterval(intervalId))</script>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononUnmounted(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A component is considered unmounted after:"
                },
                {
                    "type": "list",
                    "items": [
                        "All of its child components have been unmounted.",
                        "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped."
                    ]
                },
                {
                    "type": "p",
                    "text": "All of its child components have been unmounted."
                },
                {
                    "type": "p",
                    "text": "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped."
                },
                {
                    "type": "p",
                    "text": "Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ onMounted, onUnmounted }from'vue'letintervalIdonMounted(()=>{intervalId=setInterval(()=>{// ...})})onUnmounted(()=>clearInterval(intervalId))</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onBeforeMount()​"
                },
                {
                    "type": "p",
                    "text": "Registers a hook to be called right before the component is to be mounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononBeforeMount(callback:()=>void):void",
                        "DetailsWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononBeforeMount(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onBeforeUpdate()​"
                },
                {
                    "type": "p",
                    "text": "Registers a hook to be called right before the component is about to update its DOM tree due to a reactive state change."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononBeforeUpdate(callback:()=>void):void",
                        "DetailsThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononBeforeUpdate(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onBeforeUnmount()​"
                },
                {
                    "type": "p",
                    "text": "Registers a hook to be called right before a component instance is to be unmounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononBeforeUnmount(callback:()=>void):void",
                        "DetailsWhen this hook is called, the component instance is still fully functional.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononBeforeUnmount(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When this hook is called, the component instance is still fully functional."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onErrorCaptured()​"
                },
                {
                    "type": "p",
                    "text": "Registers a hook to be called when an error propagating from a descendant component has been captured."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononErrorCaptured(callback:ErrorCapturedHook):voidtypeErrorCapturedHook=(err:unknown,instance:ComponentPublicInstance|null,info:string)=>boolean|void",
                        "DetailsErrors can be captured from the following sources:Component rendersEvent handlersLifecycle hookssetup()functionWatchersCustom directive hooksTransition hooksThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.TIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference.You can modify component state inerrorCaptured()to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.The hook can returnfalseto stop the error from propagating further. See error propagation details below.Error Propagation RulesBy default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error.",
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks",
                        "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.",
                        "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.",
                        "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.",
                        "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononErrorCaptured(callback:ErrorCapturedHook):voidtypeErrorCapturedHook=(err:unknown,instance:ComponentPublicInstance|null,info:string)=>boolean|void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Errors can be captured from the following sources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks"
                    ]
                },
                {
                    "type": "p",
                    "text": "The hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "In production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference."
                },
                {
                    "type": "p",
                    "text": "You can modify component state inerrorCaptured()to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop."
                },
                {
                    "type": "p",
                    "text": "The hook can returnfalseto stop the error from propagating further. See error propagation details below."
                },
                {
                    "type": "p",
                    "text": "Error Propagation Rules"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.",
                        "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.",
                        "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.",
                        "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place."
                },
                {
                    "type": "p",
                    "text": "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events."
                },
                {
                    "type": "p",
                    "text": "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler."
                },
                {
                    "type": "p",
                    "text": "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onRenderTracked()​"
                },
                {
                    "type": "p",
                    "text": "Registers a debug hook to be called when a reactive dependency has been tracked by the component's render effect."
                },
                {
                    "type": "p",
                    "text": "This hook is development-mode-only and not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononRenderTracked(callback:DebuggerHook):voidtypeDebuggerHook=(e:DebuggerEvent)=>voidtypeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TrackOpTypes/* 'get' | 'has' | 'iterate' */key:any}",
                        "See alsoReactivity in Depth"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononRenderTracked(callback:DebuggerHook):voidtypeDebuggerHook=(e:DebuggerEvent)=>voidtypeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TrackOpTypes/* 'get' | 'has' | 'iterate' */key:any}"
                },
                {
                    "type": "p",
                    "text": "See alsoReactivity in Depth"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onRenderTriggered()​"
                },
                {
                    "type": "p",
                    "text": "Registers a debug hook to be called when a reactive dependency triggers the component's render effect to be re-run."
                },
                {
                    "type": "p",
                    "text": "This hook is development-mode-only and not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononRenderTriggered(callback:DebuggerHook):voidtypeDebuggerHook=(e:DebuggerEvent)=>voidtypeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TriggerOpTypes/* 'set' | 'add' | 'delete' | 'clear' */key:anynewValue?:anyoldValue?:anyoldTarget?:Map<any,any>|Set<any>}",
                        "See alsoReactivity in Depth"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononRenderTriggered(callback:DebuggerHook):voidtypeDebuggerHook=(e:DebuggerEvent)=>voidtypeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TriggerOpTypes/* 'set' | 'add' | 'delete' | 'clear' */key:anynewValue?:anyoldValue?:anyoldTarget?:Map<any,any>|Set<any>}"
                },
                {
                    "type": "p",
                    "text": "See alsoReactivity in Depth"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onActivated()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called after the component instance is inserted into the DOM as part of a tree cached by<KeepAlive>."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononActivated(callback:()=>void):void",
                        "See alsoGuide - Lifecycle of Cached Instance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononActivated(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Lifecycle of Cached Instance"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onDeactivated()​"
                },
                {
                    "type": "p",
                    "text": "Registers a callback to be called after the component instance is removed from the DOM as part of a tree cached by<KeepAlive>."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononDeactivated(callback:()=>void):void",
                        "See alsoGuide - Lifecycle of Cached Instance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononDeactivated(callback:()=>void):void"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Lifecycle of Cached Instance"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onServerPrefetch()​"
                },
                {
                    "type": "p",
                    "text": "Registers an async function to be resolved before the component instance is to be rendered on the server."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononServerPrefetch(callback:()=>Promise<any>):void",
                        "DetailsIf the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.This hook is only called during server-side rendering can be used to perform server-only data fetching.",
                        "Examplevue<scriptsetup>import{ ref, onServerPrefetch, onMounted }from'vue'constdata=ref(null)onServerPrefetch(async()=>{// component is rendered as part of the initial request// pre-fetch data on server as it is faster than on the clientdata.value=awaitfetchOnServer(/* ... */)})onMounted(async()=>{if(!data.value) {// if data is null on mount, it means the component// is dynamically rendered on the client. Perform a// client-side fetch instead.data.value=awaitfetchOnClient(/* ... */)}})</script>",
                        "See alsoServer-Side Rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononServerPrefetch(callback:()=>Promise<any>):void"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "If the callback returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component."
                },
                {
                    "type": "p",
                    "text": "This hook is only called during server-side rendering can be used to perform server-only data fetching."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onServerPrefetch, onMounted }from'vue'constdata=ref(null)onServerPrefetch(async()=>{// component is rendered as part of the initial request// pre-fetch data on server as it is faster than on the clientdata.value=awaitfetchOnServer(/* ... */)})onMounted(async()=>{if(!data.value) {// if data is null on mount, it means the component// is dynamically rendered on the client. Perform a// client-side fetch instead.data.value=awaitfetchOnClient(/* ... */)}})</script>"
                },
                {
                    "type": "p",
                    "text": "See alsoServer-Side Rendering"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/composition-api-setup",
            "title": "Composition API: setup() | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composition API: setup()​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "p",
                    "text": "Thesetup()hook serves as the entry point for Composition API usage in components in the following cases:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using Composition API without a build step;",
                        "Integrating with Composition-API-based code in an Options API component."
                    ]
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "If you are using Composition API with Single-File Components,<script setup>is strongly recommended for a more succinct and ergonomic syntax."
                },
                {
                    "type": "p",
                    "text": "We can declare reactive state usingReactivity APIsand expose them to the template by returning an object fromsetup(). The properties on the returned object will also be made available on the component instance (if other options are used):"
                },
                {
                    "type": "code",
                    "code": "<script>import{ ref }from'vue'exportdefault{setup() {constcount=ref(0)// expose to template and other options API hooksreturn{count}},mounted() {console.log(this.count)// 0}}</script><template><button@click=\"count++\">{{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "refsreturned fromsetupareautomatically shallow unwrappedwhen accessed in the template so you do not need to use.valuewhen accessing them. They are also unwrapped in the same way when accessed onthis."
                },
                {
                    "type": "p",
                    "text": "setup()itself does not have access to the component instance -thiswill have a value ofundefinedinsidesetup(). You can access Composition-API-exposed values from Options API, but not the other way around."
                },
                {
                    "type": "p",
                    "text": "setup()should return an objectsynchronously. The only case whenasync setup()can be used is when the component is a descendant of aSuspensecomponent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessing Props​"
                },
                {
                    "type": "p",
                    "text": "The first argument in thesetupfunction is thepropsargument. Just as you would expect in a standard component,propsinside of asetupfunction are reactive and will be updated when new props are passed in."
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {title: String},setup(props) {console.log(props.title)}}"
                },
                {
                    "type": "p",
                    "text": "Note that if you destructure thepropsobject, the destructured variables will lose reactivity. It is therefore recommended to always access props in the form ofprops.xxx."
                },
                {
                    "type": "p",
                    "text": "If you really need to destructure the props, or need to pass a prop into an external function while retaining reactivity, you can do so with thetoRefs()andtoRef()utility APIs:"
                },
                {
                    "type": "code",
                    "code": "import{ toRefs, toRef }from'vue'exportdefault{setup(props) {// turn `props` into an object of refs, then destructureconst{title}=toRefs(props)// `title` is a ref that tracks `props.title`console.log(title.value)// OR, turn a single property on `props` into a refconsttitle=toRef(props,'title')}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Setup Context​"
                },
                {
                    "type": "p",
                    "text": "The second argument passed to thesetupfunction is aSetup Contextobject. The context object exposes other values that may be useful insidesetup:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup(props,context) {// Attributes (Non-reactive object, equivalent to $attrs)console.log(context.attrs)// Slots (Non-reactive object, equivalent to $slots)console.log(context.slots)// Emit events (Function, equivalent to $emit)console.log(context.emit)// Expose public properties (Function)console.log(context.expose)}}"
                },
                {
                    "type": "p",
                    "text": "The context object is not reactive and can be safely destructured:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup(props, {attrs,slots,emit,expose}) {...}}"
                },
                {
                    "type": "p",
                    "text": "attrsandslotsare stateful objects that are always updated when the component itself is updated. This means you should avoid destructuring them and always reference properties asattrs.xorslots.x. Also note that, unlikeprops, the properties ofattrsandslotsarenotreactive. If you intend to apply side effects based on changes toattrsorslots, you should do so inside anonBeforeUpdatelifecycle hook."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Exposing Public Properties​"
                },
                {
                    "type": "p",
                    "text": "exposeis a function that can be used to explicitly limit the properties exposed when the component instance is accessed by a parent component viatemplate refs:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup(props, {expose}) {// make the instance \"closed\" -// i.e. do not expose anything to the parentexpose()constpublicCount=ref(0)constprivateCount=ref(0)// selectively expose local stateexpose({ count: publicCount })}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage with Render Functions​"
                },
                {
                    "type": "p",
                    "text": "setupcan also return arender functionwhich can directly make use of the reactive state declared in the same scope:"
                },
                {
                    "type": "code",
                    "code": "import{ h, ref }from'vue'exportdefault{setup() {constcount=ref(0)return()=>h('div', count.value)}}"
                },
                {
                    "type": "p",
                    "text": "Returning a render function prevents us from returning anything else. Internally that shouldn't be a problem, but it can be problematic if we want to expose methods of this component to the parent component via template refs."
                },
                {
                    "type": "p",
                    "text": "We can solve this problem by callingexpose():"
                },
                {
                    "type": "code",
                    "code": "import{ h, ref }from'vue'exportdefault{setup(props, {expose}) {constcount=ref(0)constincrement=()=>++count.valueexpose({increment})return()=>h('div', count.value)}}"
                },
                {
                    "type": "p",
                    "text": "Theincrementmethod would then be available in the parent component via a template ref."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/custom-elements#definecustomelement",
            "title": "Custom Elements API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom Elements API​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineCustomElement()​"
                },
                {
                    "type": "p",
                    "text": "This method accepts the same argument asdefineComponent, but instead returns a nativeCustom Elementclass constructor."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiondefineCustomElement(component:|(ComponentOptions&CustomElementsOptions)|ComponentOptions['setup'],options?:CustomElementsOptions):{new(props?:object):HTMLElement}interfaceCustomElementsOptions{styles?:string[]// the following options are 3.5+configureApp?:(app:App)=>voidshadowRoot?:booleannonce?:string}Type is simplified for readability.",
                        "DetailsIn addition to normal component options,defineCustomElement()also supports a number of options that are custom-elements-specific:styles: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root.configureApp: a function that can be used to configure the Vue app instance for the custom element.shadowRoot:boolean, defaults totrue. Set tofalseto render the custom element without a shadow root. This means<style>in custom element SFCs will no longer be encapsulated.nonce:string, if provided, will be set as thenonceattribute on style tags injected to the shadow root.Note that instead of being passed as part of the component itself, these options can also be passed via a second argument:jsimportElementfrom'./MyElement.ce.vue'defineCustomElement(Element, {configureApp(app) {// ...}})The return value is a custom element constructor that can be registered usingcustomElements.define().",
                        "styles: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root.",
                        "configureApp: a function that can be used to configure the Vue app instance for the custom element.",
                        "shadowRoot:boolean, defaults totrue. Set tofalseto render the custom element without a shadow root. This means<style>in custom element SFCs will no longer be encapsulated.",
                        "nonce:string, if provided, will be set as thenonceattribute on style tags injected to the shadow root.",
                        "Examplejsimport{ defineCustomElement }from'vue'constMyVueElement=defineCustomElement({/* component options */})// Register the custom element.customElements.define('my-vue-element', MyVueElement)",
                        "See alsoGuide - Building Custom Elements with VueAlso note thatdefineCustomElement()requiresspecial configwhen used with Single-File Components.",
                        "Guide - Building Custom Elements with Vue",
                        "Also note thatdefineCustomElement()requiresspecial configwhen used with Single-File Components."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiondefineCustomElement(component:|(ComponentOptions&CustomElementsOptions)|ComponentOptions['setup'],options?:CustomElementsOptions):{new(props?:object):HTMLElement}interfaceCustomElementsOptions{styles?:string[]// the following options are 3.5+configureApp?:(app:App)=>voidshadowRoot?:booleannonce?:string}"
                },
                {
                    "type": "p",
                    "text": "Type is simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "In addition to normal component options,defineCustomElement()also supports a number of options that are custom-elements-specific:"
                },
                {
                    "type": "list",
                    "items": [
                        "styles: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root.",
                        "configureApp: a function that can be used to configure the Vue app instance for the custom element.",
                        "shadowRoot:boolean, defaults totrue. Set tofalseto render the custom element without a shadow root. This means<style>in custom element SFCs will no longer be encapsulated.",
                        "nonce:string, if provided, will be set as thenonceattribute on style tags injected to the shadow root."
                    ]
                },
                {
                    "type": "p",
                    "text": "styles: an array of inlined CSS strings for providing CSS that should be injected into the element's shadow root."
                },
                {
                    "type": "p",
                    "text": "configureApp: a function that can be used to configure the Vue app instance for the custom element."
                },
                {
                    "type": "p",
                    "text": "shadowRoot:boolean, defaults totrue. Set tofalseto render the custom element without a shadow root. This means<style>in custom element SFCs will no longer be encapsulated."
                },
                {
                    "type": "p",
                    "text": "nonce:string, if provided, will be set as thenonceattribute on style tags injected to the shadow root."
                },
                {
                    "type": "p",
                    "text": "Note that instead of being passed as part of the component itself, these options can also be passed via a second argument:"
                },
                {
                    "type": "code",
                    "code": "importElementfrom'./MyElement.ce.vue'defineCustomElement(Element, {configureApp(app) {// ...}})"
                },
                {
                    "type": "p",
                    "text": "The return value is a custom element constructor that can be registered usingcustomElements.define()."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ defineCustomElement }from'vue'constMyVueElement=defineCustomElement({/* component options */})// Register the custom element.customElements.define('my-vue-element', MyVueElement)"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Building Custom Elements with Vue",
                        "Also note thatdefineCustomElement()requiresspecial configwhen used with Single-File Components."
                    ]
                },
                {
                    "type": "p",
                    "text": "Guide - Building Custom Elements with Vue"
                },
                {
                    "type": "p",
                    "text": "Also note thatdefineCustomElement()requiresspecial configwhen used with Single-File Components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useHost()​"
                },
                {
                    "type": "p",
                    "text": "A Composition API helper that returns the host element of the current Vue custom element."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useShadowRoot()​"
                },
                {
                    "type": "p",
                    "text": "A Composition API helper that returns the shadow root of the current Vue custom element."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "this.$host​"
                },
                {
                    "type": "p",
                    "text": "An Options API property that exposes the host element of the current Vue custom element."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/custom-renderer#createrenderer",
            "title": "Custom Renderer API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom Renderer API​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "createRenderer()​"
                },
                {
                    "type": "p",
                    "text": "Creates a custom renderer. By providing platform-specific node creation and manipulation APIs, you can leverage Vue's core runtime to target non-DOM environments."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctioncreateRenderer<HostNode,HostElement>(options:RendererOptions<HostNode,HostElement>):Renderer<HostElement>interfaceRenderer<HostElement> {render:RootRenderFunction<HostElement>createApp:CreateAppFunction<HostElement>}interfaceRendererOptions<HostNode,HostElement> {patchProp(el:HostElement,key:string,prevValue:any,nextValue:any,// the rest is unused for most custom renderersisSVG?:boolean,prevChildren?:VNode<HostNode,HostElement>[],parentComponent?:ComponentInternalInstance|null,parentSuspense?:SuspenseBoundary|null,unmountChildren?:UnmountChildrenFn):voidinsert(el:HostNode,parent:HostElement,anchor?:HostNode|null):voidremove(el:HostNode):voidcreateElement(type:string,isSVG?:boolean,isCustomizedBuiltIn?:string,vnodeProps?:(VNodeProps&{ [key:string]:any})|null):HostElementcreateText(text:string):HostNodecreateComment(text:string):HostNodesetText(node:HostNode,text:string):voidsetElementText(node:HostElement,text:string):voidparentNode(node:HostNode):HostElement|nullnextSibling(node:HostNode):HostNode|null// optional, DOM-specificquerySelector?(selector:string):HostElement|nullsetScopeId?(el:HostElement,id:string):voidcloneNode?(node:HostNode):HostNodeinsertStaticContent?(content:string,parent:HostElement,anchor:HostNode|null,isSVG:boolean):[HostNode,HostNode]}",
                        "Examplejsimport{ createRenderer }from'@vue/runtime-core'const{render,createApp}=createRenderer({patchProp,insert,remove,createElement// ...})// `render` is the low-level API// `createApp` returns an app instanceexport{ render, createApp }// re-export Vue core APIsexport*from'@vue/runtime-core'Vue's own@vue/runtime-domisimplemented using the same API. For a simpler implementation, check out@vue/runtime-testwhich is a private package for Vue's own unit testing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functioncreateRenderer<HostNode,HostElement>(options:RendererOptions<HostNode,HostElement>):Renderer<HostElement>interfaceRenderer<HostElement> {render:RootRenderFunction<HostElement>createApp:CreateAppFunction<HostElement>}interfaceRendererOptions<HostNode,HostElement> {patchProp(el:HostElement,key:string,prevValue:any,nextValue:any,// the rest is unused for most custom renderersisSVG?:boolean,prevChildren?:VNode<HostNode,HostElement>[],parentComponent?:ComponentInternalInstance|null,parentSuspense?:SuspenseBoundary|null,unmountChildren?:UnmountChildrenFn):voidinsert(el:HostNode,parent:HostElement,anchor?:HostNode|null):voidremove(el:HostNode):voidcreateElement(type:string,isSVG?:boolean,isCustomizedBuiltIn?:string,vnodeProps?:(VNodeProps&{ [key:string]:any})|null):HostElementcreateText(text:string):HostNodecreateComment(text:string):HostNodesetText(node:HostNode,text:string):voidsetElementText(node:HostElement,text:string):voidparentNode(node:HostNode):HostElement|nullnextSibling(node:HostNode):HostNode|null// optional, DOM-specificquerySelector?(selector:string):HostElement|nullsetScopeId?(el:HostElement,id:string):voidcloneNode?(node:HostNode):HostNodeinsertStaticContent?(content:string,parent:HostElement,anchor:HostNode|null,isSVG:boolean):[HostNode,HostNode]}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createRenderer }from'@vue/runtime-core'const{render,createApp}=createRenderer({patchProp,insert,remove,createElement// ...})// `render` is the low-level API// `createApp` returns an app instanceexport{ render, createApp }// re-export Vue core APIsexport*from'@vue/runtime-core'"
                },
                {
                    "type": "p",
                    "text": "Vue's own@vue/runtime-domisimplemented using the same API. For a simpler implementation, check out@vue/runtime-testwhich is a private package for Vue's own unit testing."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/general#version",
            "title": "Global API: General | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Global API: General​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "version​"
                },
                {
                    "type": "p",
                    "text": "Exposes the current version of Vue."
                },
                {
                    "type": "list",
                    "items": [
                        "Type:string",
                        "Examplejsimport{ version }from'vue'console.log(version)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type:string"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ version }from'vue'console.log(version)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "nextTick()​"
                },
                {
                    "type": "p",
                    "text": "A utility for waiting for the next DOM update flush."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionnextTick(callback?:()=>void):Promise<void>",
                        "DetailsWhen you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made.nextTick()can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise.",
                        "Examplevue<scriptsetup>import{ ref, nextTick }from'vue'constcount=ref(0)asyncfunctionincrement() {count.value++// DOM not yet updatedconsole.log(document.getElementById('counter').textContent)// 0awaitnextTick()// DOM is now updatedconsole.log(document.getElementById('counter').textContent)// 1}</script><template><buttonid=\"counter\"@click=\"increment\">{{ count }}</button></template>vue<script>import{ nextTick }from'vue'exportdefault{data() {return{count:0}},methods: {asyncincrement() {this.count++// DOM not yet updatedconsole.log(document.getElementById('counter').textContent)// 0awaitnextTick()// DOM is now updatedconsole.log(document.getElementById('counter').textContent)// 1}}}</script><template><buttonid=\"counter\"@click=\"increment\">{{ count }}</button></template>",
                        "See alsothis.$nextTick()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionnextTick(callback?:()=>void):Promise<void>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When you mutate reactive state in Vue, the resulting DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" to ensure that each component updates only once no matter how many state changes you have made."
                },
                {
                    "type": "p",
                    "text": "nextTick()can be used immediately after a state change to wait for the DOM updates to complete. You can either pass a callback as an argument, or await the returned Promise."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, nextTick }from'vue'constcount=ref(0)asyncfunctionincrement() {count.value++// DOM not yet updatedconsole.log(document.getElementById('counter').textContent)// 0awaitnextTick()// DOM is now updatedconsole.log(document.getElementById('counter').textContent)// 1}</script><template><buttonid=\"counter\"@click=\"increment\">{{ count }}</button></template>"
                },
                {
                    "type": "code",
                    "code": "<script>import{ nextTick }from'vue'exportdefault{data() {return{count:0}},methods: {asyncincrement() {this.count++// DOM not yet updatedconsole.log(document.getElementById('counter').textContent)// 0awaitnextTick()// DOM is now updatedconsole.log(document.getElementById('counter').textContent)// 1}}}</script><template><buttonid=\"counter\"@click=\"increment\">{{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "See alsothis.$nextTick()"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineComponent()​"
                },
                {
                    "type": "p",
                    "text": "A type helper for defining a Vue component with type inference."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// options syntaxfunctiondefineComponent(component:ComponentOptions):ComponentConstructor// function syntax (requires 3.3+)functiondefineComponent(setup:ComponentOptions['setup'],extraOptions?:ComponentOptions):()=>anyType is simplified for readability.",
                        "DetailsThe first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only.Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX.You can extract the instance type of a component (equivalent to the type ofthisin its options) from the return type ofdefineComponent()like this:tsconstFoo=defineComponent(/* ... */)typeFooInstance=InstanceType<typeofFoo>Function Signature​Only supported in 3.3+defineComponent()also has an alternative signature that is meant to be used with Composition API andrender functions or JSX.Instead of passing in an options object, a function is expected instead. This function works the same as the Composition APIsetup()function: it receives the props and the setup context. The return value should be a render function - bothh()and JSX are supported:jsimport{ ref, h }from'vue'constComp=defineComponent((props)=>{// use Composition API here like in <script setup>constcount=ref(0)return()=>{// render function or JSXreturnh('div', count.value)}},// extra options, e.g. declare props and emits{props: {/* ... */}})The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:tsxconstComp=defineComponent(<Textendsstring|number>(props:{msg:T;list:T[] })=>{// use Composition API here like in <script setup>constcount=ref(0)return()=>{// render function or JSXreturn<div>{count.value}</div>}},// manual runtime props declaration is currently still needed.{props: ['msg','list']})In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like fordefinePropsin SFCs) so that the runtime props declaration can be omitted.Note on webpack Treeshaking​BecausedefineComponent()is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used.To tell webpack that this function call is safe to be tree-shaken, you can add a/*#__PURE__*/comment notation before the function call:jsexportdefault/*#__PURE__*/defineComponent(/* ... */)Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine thatdefineComponent()is in fact side-effect-free without the need for manual annotations.",
                        "Only supported in 3.3+",
                        "See alsoGuide - Using Vue with TypeScript"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// options syntaxfunctiondefineComponent(component:ComponentOptions):ComponentConstructor// function syntax (requires 3.3+)functiondefineComponent(setup:ComponentOptions['setup'],extraOptions?:ComponentOptions):()=>any"
                },
                {
                    "type": "p",
                    "text": "Type is simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument expects a component options object. The return value will be the same options object, since the function is essentially a runtime no-op for type inference purposes only."
                },
                {
                    "type": "p",
                    "text": "Note that the return type is a bit special: it will be a constructor type whose instance type is the inferred component instance type based on the options. This is used for type inference when the returned type is used as a tag in TSX."
                },
                {
                    "type": "p",
                    "text": "You can extract the instance type of a component (equivalent to the type ofthisin its options) from the return type ofdefineComponent()like this:"
                },
                {
                    "type": "code",
                    "code": "constFoo=defineComponent(/* ... */)typeFooInstance=InstanceType<typeofFoo>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Function Signature​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "defineComponent()also has an alternative signature that is meant to be used with Composition API andrender functions or JSX."
                },
                {
                    "type": "p",
                    "text": "Instead of passing in an options object, a function is expected instead. This function works the same as the Composition APIsetup()function: it receives the props and the setup context. The return value should be a render function - bothh()and JSX are supported:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, h }from'vue'constComp=defineComponent((props)=>{// use Composition API here like in <script setup>constcount=ref(0)return()=>{// render function or JSXreturnh('div', count.value)}},// extra options, e.g. declare props and emits{props: {/* ... */}})"
                },
                {
                    "type": "p",
                    "text": "The main use case for this signature is with TypeScript (and in particular with TSX), as it supports generics:"
                },
                {
                    "type": "code",
                    "code": "constComp=defineComponent(<Textendsstring|number>(props:{msg:T;list:T[] })=>{// use Composition API here like in <script setup>constcount=ref(0)return()=>{// render function or JSXreturn<div>{count.value}</div>}},// manual runtime props declaration is currently still needed.{props: ['msg','list']})"
                },
                {
                    "type": "p",
                    "text": "In the future, we plan to provide a Babel plugin that automatically infers and injects the runtime props (like fordefinePropsin SFCs) so that the runtime props declaration can be omitted."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Note on webpack Treeshaking​"
                },
                {
                    "type": "p",
                    "text": "BecausedefineComponent()is a function call, it could look like it would produce side-effects to some build tools, e.g. webpack. This will prevent the component from being tree-shaken even when the component is never used."
                },
                {
                    "type": "p",
                    "text": "To tell webpack that this function call is safe to be tree-shaken, you can add a/*#__PURE__*/comment notation before the function call:"
                },
                {
                    "type": "code",
                    "code": "exportdefault/*#__PURE__*/defineComponent(/* ... */)"
                },
                {
                    "type": "p",
                    "text": "Note this is not necessary if you are using Vite, because Rollup (the underlying production bundler used by Vite) is smart enough to determine thatdefineComponent()is in fact side-effect-free without the need for manual annotations."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Using Vue with TypeScript"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineAsyncComponent()​"
                },
                {
                    "type": "p",
                    "text": "Define an async component which is lazy loaded only when it is rendered. The argument can either be a loader function, or an options object for more advanced control of the loading behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiondefineAsyncComponent(source:AsyncComponentLoader|AsyncComponentOptions):ComponenttypeAsyncComponentLoader=()=>Promise<Component>interfaceAsyncComponentOptions{loader:AsyncComponentLoaderloadingComponent?:ComponenterrorComponent?:Componentdelay?:numbertimeout?:numbersuspensible?:booleanonError?:(error:Error,retry:()=>void,fail:()=>void,attempts:number)=>any}",
                        "See alsoGuide - Async Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiondefineAsyncComponent(source:AsyncComponentLoader|AsyncComponentOptions):ComponenttypeAsyncComponentLoader=()=>Promise<Component>interfaceAsyncComponentOptions{loader:AsyncComponentLoaderloadingComponent?:ComponenterrorComponent?:Componentdelay?:numbertimeout?:numbersuspensible?:booleanonError?:(error:Error,retry:()=>void,fail:()=>void,attempts:number)=>any}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Async Components"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/options-composition#provide",
            "title": "Options: Composition | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Options: Composition​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "provide​"
                },
                {
                    "type": "p",
                    "text": "Provide values that can be injected by descendant components."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{provide?:object|((this:ComponentPublicInstance)=>object)}",
                        "Detailsprovideandinjectare used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain.Theprovideoption should be either an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use Symbols as keys in this object.",
                        "ExampleBasic usage:jsconsts=Symbol()exportdefault{provide: {foo:'foo',[s]:'bar'}}Using a function to provide per-component state:jsexportdefault{data() {return{msg:'foo'}}provide() {return{msg:this.msg}}}Note in the above example, the providedmsgwill NOT be reactive. SeeWorking with Reactivityfor more details.",
                        "See alsoProvide / Inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{provide?:object|((this:ComponentPublicInstance)=>object)}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "provideandinjectare used together to allow an ancestor component to serve as a dependency injector for all its descendants, regardless of how deep the component hierarchy is, as long as they are in the same parent chain."
                },
                {
                    "type": "p",
                    "text": "Theprovideoption should be either an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use Symbols as keys in this object."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "consts=Symbol()exportdefault{provide: {foo:'foo',[s]:'bar'}}"
                },
                {
                    "type": "p",
                    "text": "Using a function to provide per-component state:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{msg:'foo'}}provide() {return{msg:this.msg}}}"
                },
                {
                    "type": "p",
                    "text": "Note in the above example, the providedmsgwill NOT be reactive. SeeWorking with Reactivityfor more details."
                },
                {
                    "type": "p",
                    "text": "See alsoProvide / Inject"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "inject​"
                },
                {
                    "type": "p",
                    "text": "Declare properties to inject into the current component by locating them from ancestor providers."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{inject?:ArrayInjectOptions|ObjectInjectOptions}typeArrayInjectOptions=string[]typeObjectInjectOptions={[key:string|symbol]:|string|symbol|{from?:string|symbol;default?:any}}",
                        "DetailsTheinjectoption should be either:An array of strings, orAn object where the keys are the local binding name and the value is either:The key (string or Symbol) to search for in available injections, orAn object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.An injected property will beundefinedif neither a matching property nor a default value was provided.Note that injected bindings are NOT reactive. This is intentional. However, if the injected value is a reactive object, properties on that object do remain reactive. SeeWorking with Reactivityfor more details.",
                        "An array of strings, or",
                        "An object where the keys are the local binding name and the value is either:The key (string or Symbol) to search for in available injections, orAn object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "The key (string or Symbol) to search for in available injections, or",
                        "An object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "Thefromproperty is the key (string or Symbol) to search for in available injections, and",
                        "Thedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "ExampleBasic usage:jsexportdefault{inject: ['foo'],created() {console.log(this.foo)}}Using an injected value as the default for a prop:jsconstChild={inject: ['foo'],props: {bar: {default() {returnthis.foo}}}}Using an injected value as data entry:jsconstChild={inject: ['foo'],data() {return{bar:this.foo}}}Injections can be optional with default value:jsconstChild={inject: {foo: { default:'foo'}}}If it needs to be injected from a property with a different name, usefromto denote the source property:jsconstChild={inject: {foo: {from:'bar',default:'foo'}}}Similar to prop defaults, you need to use a factory function for non-primitive values:jsconstChild={inject: {foo: {from:'bar',default: ()=>[1,2,3]}}}",
                        "See alsoProvide / Inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{inject?:ArrayInjectOptions|ObjectInjectOptions}typeArrayInjectOptions=string[]typeObjectInjectOptions={[key:string|symbol]:|string|symbol|{from?:string|symbol;default?:any}}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Theinjectoption should be either:"
                },
                {
                    "type": "list",
                    "items": [
                        "An array of strings, or",
                        "An object where the keys are the local binding name and the value is either:The key (string or Symbol) to search for in available injections, orAn object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "The key (string or Symbol) to search for in available injections, or",
                        "An object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "Thefromproperty is the key (string or Symbol) to search for in available injections, and",
                        "Thedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "The key (string or Symbol) to search for in available injections, or",
                        "An object where:Thefromproperty is the key (string or Symbol) to search for in available injections, andThedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances.",
                        "Thefromproperty is the key (string or Symbol) to search for in available injections, and",
                        "Thedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Thefromproperty is the key (string or Symbol) to search for in available injections, and",
                        "Thedefaultproperty is used as fallback value. Similar to props default values, a factory function is needed for object types to avoid value sharing between multiple component instances."
                    ]
                },
                {
                    "type": "p",
                    "text": "An injected property will beundefinedif neither a matching property nor a default value was provided."
                },
                {
                    "type": "p",
                    "text": "Note that injected bindings are NOT reactive. This is intentional. However, if the injected value is a reactive object, properties on that object do remain reactive. SeeWorking with Reactivityfor more details."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Basic usage:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: ['foo'],created() {console.log(this.foo)}}"
                },
                {
                    "type": "p",
                    "text": "Using an injected value as the default for a prop:"
                },
                {
                    "type": "code",
                    "code": "constChild={inject: ['foo'],props: {bar: {default() {returnthis.foo}}}}"
                },
                {
                    "type": "p",
                    "text": "Using an injected value as data entry:"
                },
                {
                    "type": "code",
                    "code": "constChild={inject: ['foo'],data() {return{bar:this.foo}}}"
                },
                {
                    "type": "p",
                    "text": "Injections can be optional with default value:"
                },
                {
                    "type": "code",
                    "code": "constChild={inject: {foo: { default:'foo'}}}"
                },
                {
                    "type": "p",
                    "text": "If it needs to be injected from a property with a different name, usefromto denote the source property:"
                },
                {
                    "type": "code",
                    "code": "constChild={inject: {foo: {from:'bar',default:'foo'}}}"
                },
                {
                    "type": "p",
                    "text": "Similar to prop defaults, you need to use a factory function for non-primitive values:"
                },
                {
                    "type": "code",
                    "code": "constChild={inject: {foo: {from:'bar',default: ()=>[1,2,3]}}}"
                },
                {
                    "type": "p",
                    "text": "See alsoProvide / Inject"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "mixins​"
                },
                {
                    "type": "p",
                    "text": "An array of option objects to be mixed into the current component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{mixins?:ComponentOptions[]}",
                        "DetailsThemixinsoption accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains acreatedhook and the component itself also has one, both functions will be called.Mixin hooks are called in the order they are provided, and called before the component's own hooks.No Longer RecommendedIn Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3,Composable functions using Composition APIis now the preferred approach for code reuse between components.",
                        "Examplejsconstmixin={created() {console.log(1)}}createApp({created() {console.log(2)},mixins: [mixin]})// => 1// => 2"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{mixins?:ComponentOptions[]}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Themixinsoption accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains acreatedhook and the component itself also has one, both functions will be called."
                },
                {
                    "type": "p",
                    "text": "Mixin hooks are called in the order they are provided, and called before the component's own hooks."
                },
                {
                    "type": "p",
                    "text": "No Longer Recommended"
                },
                {
                    "type": "p",
                    "text": "In Vue 2, mixins were the primary mechanism for creating reusable chunks of component logic. While mixins continue to be supported in Vue 3,Composable functions using Composition APIis now the preferred approach for code reuse between components."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constmixin={created() {console.log(1)}}createApp({created() {console.log(2)},mixins: [mixin]})// => 1// => 2"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "extends​"
                },
                {
                    "type": "p",
                    "text": "A \"base class\" component to extend from."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{extends?:ComponentOptions}",
                        "DetailsAllows one component to extend another, inheriting its component options.From an implementation perspective,extendsis almost identical tomixins. The component specified byextendswill be treated as though it were the first mixin.However,extendsandmixinsexpress different intents. Themixinsoption is primarily used to compose chunks of functionality, whereasextendsis primarily concerned with inheritance.As withmixins, any options (except forsetup()) will be merged using the relevant merge strategy.",
                        "ExamplejsconstCompA={...}constCompB={extends: CompA,...}Not Recommended for Composition APIextendsis designed for Options API and does not handle the merging of thesetup()hook.In Composition API, the preferred mental model for logic reuse is \"compose\" over \"inheritance\". If you have logic from a component that needs to be reused in another one, consider extracting the relevant logic into aComposable.If you still intend to \"extend\" a component using Composition API, you can call the base component'ssetup()in the extending component'ssetup():jsimportBasefrom'./Base.js'exportdefault{extends: Base,setup(props,ctx) {return{...Base.setup(props, ctx),// local bindings}}}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{extends?:ComponentOptions}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Allows one component to extend another, inheriting its component options."
                },
                {
                    "type": "p",
                    "text": "From an implementation perspective,extendsis almost identical tomixins. The component specified byextendswill be treated as though it were the first mixin."
                },
                {
                    "type": "p",
                    "text": "However,extendsandmixinsexpress different intents. Themixinsoption is primarily used to compose chunks of functionality, whereasextendsis primarily concerned with inheritance."
                },
                {
                    "type": "p",
                    "text": "As withmixins, any options (except forsetup()) will be merged using the relevant merge strategy."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constCompA={...}constCompB={extends: CompA,...}"
                },
                {
                    "type": "p",
                    "text": "Not Recommended for Composition API"
                },
                {
                    "type": "p",
                    "text": "extendsis designed for Options API and does not handle the merging of thesetup()hook."
                },
                {
                    "type": "p",
                    "text": "In Composition API, the preferred mental model for logic reuse is \"compose\" over \"inheritance\". If you have logic from a component that needs to be reused in another one, consider extracting the relevant logic into aComposable."
                },
                {
                    "type": "p",
                    "text": "If you still intend to \"extend\" a component using Composition API, you can call the base component'ssetup()in the extending component'ssetup():"
                },
                {
                    "type": "code",
                    "code": "importBasefrom'./Base.js'exportdefault{extends: Base,setup(props,ctx) {return{...Base.setup(props, ctx),// local bindings}}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/options-lifecycle#errorcaptured",
            "title": "Options: Lifecycle | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Options: Lifecycle​"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "p",
                    "text": "For shared usage of lifecycle hooks, seeGuide - Lifecycle Hooks"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "beforeCreate​"
                },
                {
                    "type": "p",
                    "text": "Called when the instance is initialized."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{beforeCreate?(this:ComponentPublicInstance):void}",
                        "DetailsCalled immediately when the instance is initialized and props are resolved.Then the props will be defined as reactive properties and the state such asdata()orcomputedwill be set up.Note that thesetup()hook of Composition API is called before any Options API hooks, evenbeforeCreate()."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{beforeCreate?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Called immediately when the instance is initialized and props are resolved."
                },
                {
                    "type": "p",
                    "text": "Then the props will be defined as reactive properties and the state such asdata()orcomputedwill be set up."
                },
                {
                    "type": "p",
                    "text": "Note that thesetup()hook of Composition API is called before any Options API hooks, evenbeforeCreate()."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "created​"
                },
                {
                    "type": "p",
                    "text": "Called after the instance has finished processing all state-related options."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{created?(this:ComponentPublicInstance):void}",
                        "DetailsWhen this hook is called, the following have been set up: reactive data, computed properties, methods, and watchers. However, the mounting phase has not been started, and the$elproperty will not be available yet."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{created?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When this hook is called, the following have been set up: reactive data, computed properties, methods, and watchers. However, the mounting phase has not been started, and the$elproperty will not be available yet."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "beforeMount​"
                },
                {
                    "type": "p",
                    "text": "Called right before the component is to be mounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{beforeMount?(this:ComponentPublicInstance):void}",
                        "DetailsWhen this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{beforeMount?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When this hook is called, the component has finished setting up its reactive state, but no DOM nodes have been created yet. It is about to execute its DOM render effect for the first time."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "mounted​"
                },
                {
                    "type": "p",
                    "text": "Called after the component has been mounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{mounted?(this:ComponentPublicInstance):void}",
                        "DetailsA component is considered mounted after:All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document.This hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in aserver-rendered application.This hook is not called during server-side rendering.",
                        "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).",
                        "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{mounted?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A component is considered mounted after:"
                },
                {
                    "type": "list",
                    "items": [
                        "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees).",
                        "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document."
                    ]
                },
                {
                    "type": "p",
                    "text": "All of its synchronous child components have been mounted (does not include async components or components inside<Suspense>trees)."
                },
                {
                    "type": "p",
                    "text": "Its own DOM tree has been created and inserted into the parent container. Note it only guarantees that the component's DOM tree is in-document if the application's root container is also in-document."
                },
                {
                    "type": "p",
                    "text": "This hook is typically used for performing side effects that need access to the component's rendered DOM, or for limiting DOM-related code to the client in aserver-rendered application."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "beforeUpdate​"
                },
                {
                    "type": "p",
                    "text": "Called right before the component is about to update its DOM tree due to a reactive state change."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{beforeUpdate?(this:ComponentPublicInstance):void}",
                        "DetailsThis hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{beforeUpdate?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This hook can be used to access the DOM state before Vue updates the DOM. It is also safe to modify component state inside this hook."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "updated​"
                },
                {
                    "type": "p",
                    "text": "Called after the component has updated its DOM tree due to a reactive state change."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{updated?(this:ComponentPublicInstance):void}",
                        "DetailsA parent component's updated hook is called after that of its child components.This hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, usenextTick()instead.This hook is not called during server-side rendering.WARNINGDo not mutate component state in the updated hook - this will likely lead to an infinite update loop!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{updated?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A parent component's updated hook is called after that of its child components."
                },
                {
                    "type": "p",
                    "text": "This hook is called after any DOM update of the component, which can be caused by different state changes. If you need to access the updated DOM after a specific state change, usenextTick()instead."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "Do not mutate component state in the updated hook - this will likely lead to an infinite update loop!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "beforeUnmount​"
                },
                {
                    "type": "p",
                    "text": "Called right before a component instance is to be unmounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{beforeUnmount?(this:ComponentPublicInstance):void}",
                        "DetailsWhen this hook is called, the component instance is still fully functional.This hook is not called during server-side rendering."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{beforeUnmount?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "When this hook is called, the component instance is still fully functional."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "unmounted​"
                },
                {
                    "type": "p",
                    "text": "Called after the component has been unmounted."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{unmounted?(this:ComponentPublicInstance):void}",
                        "DetailsA component is considered unmounted after:All of its child components have been unmounted.All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped.Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections.This hook is not called during server-side rendering.",
                        "All of its child components have been unmounted.",
                        "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{unmounted?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A component is considered unmounted after:"
                },
                {
                    "type": "list",
                    "items": [
                        "All of its child components have been unmounted.",
                        "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped."
                    ]
                },
                {
                    "type": "p",
                    "text": "All of its child components have been unmounted."
                },
                {
                    "type": "p",
                    "text": "All of its associated reactive effects (render effect and computed / watchers created duringsetup()) have been stopped."
                },
                {
                    "type": "p",
                    "text": "Use this hook to clean up manually created side effects such as timers, DOM event listeners or server connections."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "errorCaptured​"
                },
                {
                    "type": "p",
                    "text": "Called when an error propagating from a descendant component has been captured."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{errorCaptured?(this:ComponentPublicInstance,err:unknown,instance:ComponentPublicInstance|null,info:string):boolean|void}",
                        "DetailsErrors can be captured from the following sources:Component rendersEvent handlersLifecycle hookssetup()functionWatchersCustom directive hooksTransition hooksThe hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type.TIPIn production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference.You can modify component state inerrorCaptured()to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop.The hook can returnfalseto stop the error from propagating further. See error propagation details below.Error Propagation RulesBy default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error.",
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks",
                        "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.",
                        "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.",
                        "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.",
                        "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{errorCaptured?(this:ComponentPublicInstance,err:unknown,instance:ComponentPublicInstance|null,info:string):boolean|void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Errors can be captured from the following sources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Component renders",
                        "Event handlers",
                        "Lifecycle hooks",
                        "setup()function",
                        "Watchers",
                        "Custom directive hooks",
                        "Transition hooks"
                    ]
                },
                {
                    "type": "p",
                    "text": "The hook receives three arguments: the error, the component instance that triggered the error, and an information string specifying the error source type."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "In production, the 3rd argument (info) will be a shortened code instead of the full information string. You can find the code to string mapping in theProduction Error Code Reference."
                },
                {
                    "type": "p",
                    "text": "You can modify component state inerrorCaptured()to display an error state to the user. However, it is important that the error state should not render the original content that caused the error; otherwise the component will be thrown into an infinite render loop."
                },
                {
                    "type": "p",
                    "text": "The hook can returnfalseto stop the error from propagating further. See error propagation details below."
                },
                {
                    "type": "p",
                    "text": "Error Propagation Rules"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place.",
                        "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events.",
                        "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler.",
                        "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, all errors are still sent to the application-levelapp.config.errorHandlerif it is defined, so that these errors can still be reported to an analytics service in a single place."
                },
                {
                    "type": "p",
                    "text": "If multipleerrorCapturedhooks exist on a component's inheritance chain or parent chain, all of them will be invoked on the same error, in the order of bottom to top. This is similar to the bubbling mechanism of native DOM events."
                },
                {
                    "type": "p",
                    "text": "If theerrorCapturedhook itself throws an error, both this error and the original captured error are sent toapp.config.errorHandler."
                },
                {
                    "type": "p",
                    "text": "AnerrorCapturedhook can returnfalseto prevent the error from propagating further. This is essentially saying \"this error has been handled and should be ignored.\" It will prevent any additionalerrorCapturedhooks orapp.config.errorHandlerfrom being invoked for this error."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderTracked​"
                },
                {
                    "type": "p",
                    "text": "Called when a reactive dependency has been tracked by the component's render effect."
                },
                {
                    "type": "p",
                    "text": "This hook is development-mode-only and not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{renderTracked?(this:ComponentPublicInstance,e:DebuggerEvent):void}typeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TrackOpTypes/* 'get' | 'has' | 'iterate' */key:any}",
                        "See alsoReactivity in Depth"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{renderTracked?(this:ComponentPublicInstance,e:DebuggerEvent):void}typeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TrackOpTypes/* 'get' | 'has' | 'iterate' */key:any}"
                },
                {
                    "type": "p",
                    "text": "See alsoReactivity in Depth"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderTriggered​"
                },
                {
                    "type": "p",
                    "text": "Called when a reactive dependency triggers the component's render effect to be re-run."
                },
                {
                    "type": "p",
                    "text": "This hook is development-mode-only and not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{renderTriggered?(this:ComponentPublicInstance,e:DebuggerEvent):void}typeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TriggerOpTypes/* 'set' | 'add' | 'delete' | 'clear' */key:anynewValue?:anyoldValue?:anyoldTarget?:Map<any,any>|Set<any>}",
                        "See alsoReactivity in Depth"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{renderTriggered?(this:ComponentPublicInstance,e:DebuggerEvent):void}typeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:TriggerOpTypes/* 'set' | 'add' | 'delete' | 'clear' */key:anynewValue?:anyoldValue?:anyoldTarget?:Map<any,any>|Set<any>}"
                },
                {
                    "type": "p",
                    "text": "See alsoReactivity in Depth"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "activated​"
                },
                {
                    "type": "p",
                    "text": "Called after the component instance is inserted into the DOM as part of a tree cached by<KeepAlive>."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{activated?(this:ComponentPublicInstance):void}",
                        "See alsoGuide - Lifecycle of Cached Instance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{activated?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Lifecycle of Cached Instance"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "deactivated​"
                },
                {
                    "type": "p",
                    "text": "Called after the component instance is removed from the DOM as part of a tree cached by<KeepAlive>."
                },
                {
                    "type": "p",
                    "text": "This hook is not called during server-side rendering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{deactivated?(this:ComponentPublicInstance):void}",
                        "See alsoGuide - Lifecycle of Cached Instance"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{deactivated?(this:ComponentPublicInstance):void}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Lifecycle of Cached Instance"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "serverPrefetch​"
                },
                {
                    "type": "p",
                    "text": "Async function to be resolved before the component instance is to be rendered on the server."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{serverPrefetch?(this:ComponentPublicInstance):Promise<any>}",
                        "DetailsIf the hook returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component.This hook is only called during server-side rendering can be used to perform server-only data fetching.",
                        "Examplejsexportdefault{data() {return{data:null}},asyncserverPrefetch() {// component is rendered as part of the initial request// pre-fetch data on server as it is faster than on the clientthis.data=awaitfetchOnServer(/* ... */)},asyncmounted() {if(!this.data) {// if data is null on mount, it means the component// is dynamically rendered on the client. Perform a// client-side fetch instead.this.data=awaitfetchOnClient(/* ... */)}}}",
                        "See alsoServer-Side Rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{serverPrefetch?(this:ComponentPublicInstance):Promise<any>}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "If the hook returns a Promise, the server renderer will wait until the Promise is resolved before rendering the component."
                },
                {
                    "type": "p",
                    "text": "This hook is only called during server-side rendering can be used to perform server-only data fetching."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{data:null}},asyncserverPrefetch() {// component is rendered as part of the initial request// pre-fetch data on server as it is faster than on the clientthis.data=awaitfetchOnServer(/* ... */)},asyncmounted() {if(!this.data) {// if data is null on mount, it means the component// is dynamically rendered on the client. Perform a// client-side fetch instead.this.data=awaitfetchOnClient(/* ... */)}}}"
                },
                {
                    "type": "p",
                    "text": "See alsoServer-Side Rendering"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/options-misc#name",
            "title": "Options: Misc | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Options: Misc​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "name​"
                },
                {
                    "type": "p",
                    "text": "Explicitly declare a display name for the component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{name?:string}",
                        "DetailsThe name of a component is used for the following:Recursive self-reference in the component's own templateDisplay in Vue DevTools' component inspection treeDisplay in warning component tracesWhen you use Single-File Components, the component already infers its own name from the filename. For example, a file namedMyComponent.vuewill have the inferred display name \"MyComponent\".Another case is that when a component is registered globally withapp.component, the global ID is automatically set as its name.Thenameoption allows you to override the inferred name, or to explicitly provide a name when no name can be inferred (e.g. when not using build tools, or an inlined non-SFC component).There is one case wherenameis explicitly necessary: when matching against cacheable components in<KeepAlive>via itsinclude / excludeprops.TIPSince version 3.2.34, a single-file component using<script setup>will automatically infer itsnameoption based on the filename, removing the need to manually declare the name even when used with<KeepAlive>.",
                        "Recursive self-reference in the component's own template",
                        "Display in Vue DevTools' component inspection tree",
                        "Display in warning component traces"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{name?:string}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The name of a component is used for the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Recursive self-reference in the component's own template",
                        "Display in Vue DevTools' component inspection tree",
                        "Display in warning component traces"
                    ]
                },
                {
                    "type": "p",
                    "text": "When you use Single-File Components, the component already infers its own name from the filename. For example, a file namedMyComponent.vuewill have the inferred display name \"MyComponent\"."
                },
                {
                    "type": "p",
                    "text": "Another case is that when a component is registered globally withapp.component, the global ID is automatically set as its name."
                },
                {
                    "type": "p",
                    "text": "Thenameoption allows you to override the inferred name, or to explicitly provide a name when no name can be inferred (e.g. when not using build tools, or an inlined non-SFC component)."
                },
                {
                    "type": "p",
                    "text": "There is one case wherenameis explicitly necessary: when matching against cacheable components in<KeepAlive>via itsinclude / excludeprops."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Since version 3.2.34, a single-file component using<script setup>will automatically infer itsnameoption based on the filename, removing the need to manually declare the name even when used with<KeepAlive>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "inheritAttrs​"
                },
                {
                    "type": "p",
                    "text": "Controls whether the default component attribute fallthrough behavior should be enabled."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{inheritAttrs?:boolean// default: true}",
                        "DetailsBy default, parent scope attribute bindings that are not recognized as props will \"fallthrough\". This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By settinginheritAttrstofalse, this default behavior can be disabled. The attributes are available via the$attrsinstance property and can be explicitly bound to a non-root element usingv-bind.",
                        "Examplevue<script>exportdefault{inheritAttrs:false,props: ['label','value'],emits: ['input']}</script><template><label>{{ label }}<inputv-bind=\"$attrs\"v-bind:value=\"value\"v-on:input=\"$emit('input', $event.target.value)\"/></label></template>When declaring this option in a component that uses<script setup>, you can use thedefineOptionsmacro:vue<scriptsetup>defineProps(['label','value'])defineEmits(['input'])defineOptions({inheritAttrs:false})</script><template><label>{{ label }}<inputv-bind=\"$attrs\"v-bind:value=\"value\"v-on:input=\"$emit('input', $event.target.value)\"/></label></template>",
                        "See alsoFallthrough AttributesUsinginheritAttrsin normal<script>",
                        "Fallthrough Attributes",
                        "UsinginheritAttrsin normal<script>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{inheritAttrs?:boolean// default: true}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "By default, parent scope attribute bindings that are not recognized as props will \"fallthrough\". This means that when we have a single-root component, these bindings will be applied to the root element of the child component as normal HTML attributes. When authoring a component that wraps a target element or another component, this may not always be the desired behavior. By settinginheritAttrstofalse, this default behavior can be disabled. The attributes are available via the$attrsinstance property and can be explicitly bound to a non-root element usingv-bind."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{inheritAttrs:false,props: ['label','value'],emits: ['input']}</script><template><label>{{ label }}<inputv-bind=\"$attrs\"v-bind:value=\"value\"v-on:input=\"$emit('input', $event.target.value)\"/></label></template>"
                },
                {
                    "type": "p",
                    "text": "When declaring this option in a component that uses<script setup>, you can use thedefineOptionsmacro:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineProps(['label','value'])defineEmits(['input'])defineOptions({inheritAttrs:false})</script><template><label>{{ label }}<inputv-bind=\"$attrs\"v-bind:value=\"value\"v-on:input=\"$emit('input', $event.target.value)\"/></label></template>"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Fallthrough Attributes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "UsinginheritAttrsin normal<script>"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "components​"
                },
                {
                    "type": "p",
                    "text": "An object that registers components to be made available to the component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{components?:{ [key:string]:Component}}",
                        "ExamplejsimportFoofrom'./Foo.vue'importBarfrom'./Bar.vue'exportdefault{components: {// shorthandFoo,// register under a different nameRenamedBar: Bar}}",
                        "See alsoComponent Registration"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{components?:{ [key:string]:Component}}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'exportdefault{components: {// shorthandFoo,// register under a different nameRenamedBar: Bar}}"
                },
                {
                    "type": "p",
                    "text": "See alsoComponent Registration"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "directives​"
                },
                {
                    "type": "p",
                    "text": "An object that registers directives to be made available to the component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{directives?:{ [key:string]:Directive}}",
                        "Examplejsexportdefault{directives: {// enables v-focus in templatefocus: {mounted(el) {el.focus()}}}}template<inputv-focus>",
                        "See alsoCustom Directives"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{directives?:{ [key:string]:Directive}}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{directives: {// enables v-focus in templatefocus: {mounted(el) {el.focus()}}}}"
                },
                {
                    "type": "code",
                    "code": "<inputv-focus>"
                },
                {
                    "type": "p",
                    "text": "See alsoCustom Directives"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/options-rendering#template",
            "title": "Options: Rendering | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Options: Rendering​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "template​"
                },
                {
                    "type": "p",
                    "text": "A string template for the component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{template?:string}",
                        "DetailsA template provided via thetemplateoption will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler isNOTincluded in Vue builds that have the wordruntimein their names, e.g.vue.runtime.esm-bundler.js. Consult thedist file guidefor more details about the different builds.If the string starts with#it will be used as aquerySelectorand use the selected element'sinnerHTMLas the template string. This allows the source template to be authored using native<template>elements.If therenderoption is also present in the same component,templatewill be ignored.If the root component of your application doesn't have atemplateorrenderoption specified, Vue will try to use theinnerHTMLof the mounted element as the template instead.Security NoteOnly use template sources that you can trust. Do not use user-provided content as your template. SeeSecurity Guidefor more details."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{template?:string}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A template provided via thetemplateoption will be compiled on-the-fly at runtime. It is only supported when using a build of Vue that includes the template compiler. The template compiler isNOTincluded in Vue builds that have the wordruntimein their names, e.g.vue.runtime.esm-bundler.js. Consult thedist file guidefor more details about the different builds."
                },
                {
                    "type": "p",
                    "text": "If the string starts with#it will be used as aquerySelectorand use the selected element'sinnerHTMLas the template string. This allows the source template to be authored using native<template>elements."
                },
                {
                    "type": "p",
                    "text": "If therenderoption is also present in the same component,templatewill be ignored."
                },
                {
                    "type": "p",
                    "text": "If the root component of your application doesn't have atemplateorrenderoption specified, Vue will try to use theinnerHTMLof the mounted element as the template instead."
                },
                {
                    "type": "p",
                    "text": "Security Note"
                },
                {
                    "type": "p",
                    "text": "Only use template sources that you can trust. Do not use user-provided content as your template. SeeSecurity Guidefor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "render​"
                },
                {
                    "type": "p",
                    "text": "A function that programmatically returns the virtual DOM tree of the component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{render?(this:ComponentPublicInstance)=>VNodeChild}typeVNodeChild=VNodeChildAtom|VNodeArrayChildrentypeVNodeChildAtom=|VNode|string|number|boolean|null|undefined|voidtypeVNodeArrayChildren=(VNodeArrayChildren|VNodeChildAtom)[]",
                        "Detailsrenderis an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component.Pre-compiled templates, for example those in Single-File Components, are compiled into therenderoption at build time. If bothrenderandtemplateare present in a component,renderwill take higher priority.",
                        "See alsoRendering MechanismRender Functions",
                        "Rendering Mechanism",
                        "Render Functions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{render?(this:ComponentPublicInstance)=>VNodeChild}typeVNodeChild=VNodeChildAtom|VNodeArrayChildrentypeVNodeChildAtom=|VNode|string|number|boolean|null|undefined|voidtypeVNodeArrayChildren=(VNodeArrayChildren|VNodeChildAtom)[]"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "renderis an alternative to string templates that allows you to leverage the full programmatic power of JavaScript to declare the render output of the component."
                },
                {
                    "type": "p",
                    "text": "Pre-compiled templates, for example those in Single-File Components, are compiled into therenderoption at build time. If bothrenderandtemplateare present in a component,renderwill take higher priority."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Rendering Mechanism",
                        "Render Functions"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "compilerOptions​"
                },
                {
                    "type": "p",
                    "text": "Configure runtime compiler options for the component's template."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{compilerOptions?:{isCustomElement?:(tag:string)=>booleanwhitespace?:'condense'|'preserve'// default: 'condense'delimiters?:[string,string]// default: ['{{', '}}']comments?:boolean// default: false}}",
                        "DetailsThis config option is only respected when using the full build (i.e. the standalonevue.jsthat can compile templates in the browser). It supports the same options as the app-levelapp.config.compilerOptions, and has higher priority for the current component.",
                        "See alsoapp.config.compilerOptions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{compilerOptions?:{isCustomElement?:(tag:string)=>booleanwhitespace?:'condense'|'preserve'// default: 'condense'delimiters?:[string,string]// default: ['{{', '}}']comments?:boolean// default: false}}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This config option is only respected when using the full build (i.e. the standalonevue.jsthat can compile templates in the browser). It supports the same options as the app-levelapp.config.compilerOptions, and has higher priority for the current component."
                },
                {
                    "type": "p",
                    "text": "See alsoapp.config.compilerOptions"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "slots​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "An option to assist with type inference when using slots programmatically in render functions."
                },
                {
                    "type": "list",
                    "items": [
                        "DetailsThis option's runtime value is not used. The actual types should be declared via type casting using theSlotsTypetype helper:tsimport{ SlotsType }from'vue'defineComponent({slots: ObjectasSlotsType<{default:{foo:string;bar:number}item:{data:number}}>,setup(props, {slots}) {expectType<undefined|((scope:{foo:string;bar:number})=>any)>(slots.default)expectType<undefined|((scope:{data:number})=>any)>(slots.item)}})"
                    ]
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "This option's runtime value is not used. The actual types should be declared via type casting using theSlotsTypetype helper:"
                },
                {
                    "type": "code",
                    "code": "import{ SlotsType }from'vue'defineComponent({slots: ObjectasSlotsType<{default:{foo:string;bar:number}item:{data:number}}>,setup(props, {slots}) {expectType<undefined|((scope:{foo:string;bar:number})=>any)>(slots.default)expectType<undefined|((scope:{data:number})=>any)>(slots.item)}})"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/options-state#data",
            "title": "Options: State | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Options: State​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "data​"
                },
                {
                    "type": "p",
                    "text": "A function that returns the initial reactive state for the component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{data?(this:ComponentPublicInstance,vm:ComponentPublicInstance):object}",
                        "DetailsThe function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed asthis.$data. The component instance also proxies all the properties found on the data object, sothis.awill be equivalent tothis.$data.a.All top-level data properties must be included in the returned data object. Adding new properties tothis.$datais possible, but it isnotrecommended. If the desired value of a property is not yet available then an empty value such asundefinedornullshould be included as a placeholder to ensure that Vue knows that the property exists.Properties that start with_or$willnotbe proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them asthis.$data._property.It isnotrecommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component.",
                        "Examplejsexportdefault{data() {return{ a:1}},created() {console.log(this.a)// 1console.log(this.$data)// { a: 1 }}}Note that if you use an arrow function with thedataproperty,thiswon't be the component's instance, but you can still access the instance as the function's first argument:jsdata: (vm)=>({ a: vm.myProp })",
                        "See alsoReactivity in Depth"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{data?(this:ComponentPublicInstance,vm:ComponentPublicInstance):object}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The function is expected to return a plain JavaScript object, which will be made reactive by Vue. After the instance is created, the reactive data object can be accessed asthis.$data. The component instance also proxies all the properties found on the data object, sothis.awill be equivalent tothis.$data.a."
                },
                {
                    "type": "p",
                    "text": "All top-level data properties must be included in the returned data object. Adding new properties tothis.$datais possible, but it isnotrecommended. If the desired value of a property is not yet available then an empty value such asundefinedornullshould be included as a placeholder to ensure that Vue knows that the property exists."
                },
                {
                    "type": "p",
                    "text": "Properties that start with_or$willnotbe proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them asthis.$data._property."
                },
                {
                    "type": "p",
                    "text": "It isnotrecommended to return objects with their own stateful behavior like browser API objects and prototype properties. The returned object should ideally be a plain object that only represents the state of the component."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{ a:1}},created() {console.log(this.a)// 1console.log(this.$data)// { a: 1 }}}"
                },
                {
                    "type": "p",
                    "text": "Note that if you use an arrow function with thedataproperty,thiswon't be the component's instance, but you can still access the instance as the function's first argument:"
                },
                {
                    "type": "code",
                    "code": "data: (vm)=>({ a: vm.myProp })"
                },
                {
                    "type": "p",
                    "text": "See alsoReactivity in Depth"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "props​"
                },
                {
                    "type": "p",
                    "text": "Declare the props of a component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{props?:ArrayPropsOptions|ObjectPropsOptions}typeArrayPropsOptions=string[]typeObjectPropsOptions={ [key:string]:Prop}typeProp<T=any>=PropOptions<T>|PropType<T>|nullinterfacePropOptions<T> {type?:PropType<T>required?:booleandefault?:T|((rawProps:object)=>T)validator?:(value:unknown,rawProps:object)=>boolean}typePropType<T>={new():T}|{new():T}[]Types are simplified for readability.",
                        "DetailsIn Vue, all component props need to be explicitly declared. Component props can be declared in two forms:Simple form using an array of stringsFull form using an object where each property key is the name of the prop, and the value is the prop's type (a constructor function) or advanced options.With object-based syntax, each prop can further define the following options:type: Can be one of the following native constructors:String,Number,Boolean,Array,Object,Date,Function,Symbol, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. SeeProp Validationfor more details.Also note that a prop withBooleantype affects its value casting behavior in both development and production. SeeBoolean Castingfor more details.default: Specifies a default value for the prop when it is not passed by the parent or hasundefinedvalue. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.required: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.validator: Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).",
                        "Simple form using an array of strings",
                        "Full form using an object where each property key is the name of the prop, and the value is the prop's type (a constructor function) or advanced options.",
                        "type: Can be one of the following native constructors:String,Number,Boolean,Array,Object,Date,Function,Symbol, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. SeeProp Validationfor more details.Also note that a prop withBooleantype affects its value casting behavior in both development and production. SeeBoolean Castingfor more details.",
                        "default: Specifies a default value for the prop when it is not passed by the parent or hasundefinedvalue. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.",
                        "required: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.",
                        "validator: Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails).",
                        "ExampleSimple declaration:jsexportdefault{props: ['size','myMessage']}Object declaration with validations:jsexportdefault{props: {// type checkheight: Number,// type check plus other validationsage: {type: Number,default:0,required:true,validator: (value)=>{returnvalue>=0}}}}",
                        "See alsoGuide - PropsGuide - Typing Component Props",
                        "Guide - Props",
                        "Guide - Typing Component Props"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{props?:ArrayPropsOptions|ObjectPropsOptions}typeArrayPropsOptions=string[]typeObjectPropsOptions={ [key:string]:Prop}typeProp<T=any>=PropOptions<T>|PropType<T>|nullinterfacePropOptions<T> {type?:PropType<T>required?:booleandefault?:T|((rawProps:object)=>T)validator?:(value:unknown,rawProps:object)=>boolean}typePropType<T>={new():T}|{new():T}[]"
                },
                {
                    "type": "p",
                    "text": "Types are simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "In Vue, all component props need to be explicitly declared. Component props can be declared in two forms:"
                },
                {
                    "type": "list",
                    "items": [
                        "Simple form using an array of strings",
                        "Full form using an object where each property key is the name of the prop, and the value is the prop's type (a constructor function) or advanced options."
                    ]
                },
                {
                    "type": "p",
                    "text": "With object-based syntax, each prop can further define the following options:"
                },
                {
                    "type": "list",
                    "items": [
                        "type: Can be one of the following native constructors:String,Number,Boolean,Array,Object,Date,Function,Symbol, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. SeeProp Validationfor more details.Also note that a prop withBooleantype affects its value casting behavior in both development and production. SeeBoolean Castingfor more details.",
                        "default: Specifies a default value for the prop when it is not passed by the parent or hasundefinedvalue. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument.",
                        "required: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed.",
                        "validator: Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails)."
                    ]
                },
                {
                    "type": "p",
                    "text": "type: Can be one of the following native constructors:String,Number,Boolean,Array,Object,Date,Function,Symbol, any custom constructor function or an array of those. In development mode, Vue will check if a prop's value matches the declared type, and will throw a warning if it doesn't. SeeProp Validationfor more details."
                },
                {
                    "type": "p",
                    "text": "Also note that a prop withBooleantype affects its value casting behavior in both development and production. SeeBoolean Castingfor more details."
                },
                {
                    "type": "p",
                    "text": "default: Specifies a default value for the prop when it is not passed by the parent or hasundefinedvalue. Object or array defaults must be returned using a factory function. The factory function also receives the raw props object as the argument."
                },
                {
                    "type": "p",
                    "text": "required: Defines if the prop is required. In a non-production environment, a console warning will be thrown if this value is truthy and the prop is not passed."
                },
                {
                    "type": "p",
                    "text": "validator: Custom validator function that takes the prop value as the sole argument. In development mode, a console warning will be thrown if this function returns a falsy value (i.e. the validation fails)."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Simple declaration:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['size','myMessage']}"
                },
                {
                    "type": "p",
                    "text": "Object declaration with validations:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {// type checkheight: Number,// type check plus other validationsage: {type: Number,default:0,required:true,validator: (value)=>{returnvalue>=0}}}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Props",
                        "Guide - Typing Component Props"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "computed​"
                },
                {
                    "type": "p",
                    "text": "Declare computed properties to be exposed on the component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{computed?:{[key:string]:ComputedGetter<any>|WritableComputedOptions<any>}}typeComputedGetter<T>=(this:ComponentPublicInstance,vm:ComponentPublicInstance)=>TtypeComputedSetter<T>=(this:ComponentPublicInstance,value:T)=>voidtypeWritableComputedOptions<T>={get:ComputedGetter<T>set:ComputedSetter<T>}",
                        "DetailsThe option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object withgetandsetmethods (for writable computed properties).All getters and setters have theirthiscontext automatically bound to the component instance.Note that if you use an arrow function with a computed property,thiswon't point to the component's instance, but you can still access the instance as the function's first argument:jsexportdefault{computed: {aDouble: (vm)=>vm.a*2}}",
                        "Examplejsexportdefault{data() {return{ a:1}},computed: {// readonlyaDouble() {returnthis.a*2},// writableaPlus: {get() {returnthis.a+1},set(v) {this.a=v-1}}},created() {console.log(this.aDouble)// => 2console.log(this.aPlus)// => 2this.aPlus=3console.log(this.a)// => 2console.log(this.aDouble)// => 4}}",
                        "See alsoGuide - Computed PropertiesGuide - Typing Computed Properties",
                        "Guide - Computed Properties",
                        "Guide - Typing Computed Properties"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{computed?:{[key:string]:ComputedGetter<any>|WritableComputedOptions<any>}}typeComputedGetter<T>=(this:ComponentPublicInstance,vm:ComponentPublicInstance)=>TtypeComputedSetter<T>=(this:ComponentPublicInstance,value:T)=>voidtypeWritableComputedOptions<T>={get:ComputedGetter<T>set:ComputedSetter<T>}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The option accepts an object where the key is the name of the computed property, and the value is either a computed getter, or an object withgetandsetmethods (for writable computed properties)."
                },
                {
                    "type": "p",
                    "text": "All getters and setters have theirthiscontext automatically bound to the component instance."
                },
                {
                    "type": "p",
                    "text": "Note that if you use an arrow function with a computed property,thiswon't point to the component's instance, but you can still access the instance as the function's first argument:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{computed: {aDouble: (vm)=>vm.a*2}}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{ a:1}},computed: {// readonlyaDouble() {returnthis.a*2},// writableaPlus: {get() {returnthis.a+1},set(v) {this.a=v-1}}},created() {console.log(this.aDouble)// => 2console.log(this.aPlus)// => 2this.aPlus=3console.log(this.a)// => 2console.log(this.aDouble)// => 4}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Computed Properties",
                        "Guide - Typing Computed Properties"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "methods​"
                },
                {
                    "type": "p",
                    "text": "Declare methods to be mixed into the component instance."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{methods?:{[key:string]:(this:ComponentPublicInstance,...args:any[])=>any}}",
                        "DetailsDeclared methods can be directly accessed on the component instance, or used in template expressions. All methods have theirthiscontext automatically bound to the component instance, even when passed around.Avoid using arrow functions when declaring methods, as they will not have access to the component instance viathis.",
                        "Examplejsexportdefault{data() {return{ a:1}},methods: {plus() {this.a++}},created() {this.plus()console.log(this.a)// => 2}}",
                        "See alsoEvent Handling"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{methods?:{[key:string]:(this:ComponentPublicInstance,...args:any[])=>any}}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Declared methods can be directly accessed on the component instance, or used in template expressions. All methods have theirthiscontext automatically bound to the component instance, even when passed around."
                },
                {
                    "type": "p",
                    "text": "Avoid using arrow functions when declaring methods, as they will not have access to the component instance viathis."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{ a:1}},methods: {plus() {this.a++}},created() {this.plus()console.log(this.a)// => 2}}"
                },
                {
                    "type": "p",
                    "text": "See alsoEvent Handling"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watch​"
                },
                {
                    "type": "p",
                    "text": "Declare watch callbacks to be invoked on data change."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{watch?:{[key:string]:WatchOptionItem|WatchOptionItem[]}}typeWatchOptionItem=string|WatchCallback|ObjectWatchOptionItemtypeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidtypeObjectWatchOptionItem={handler:WatchCallback|stringimmediate?:boolean// default: falsedeep?:boolean// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}Types are simplified for readability.",
                        "DetailsThewatchoption expects an object where keys are the reactive component instance properties to watch (e.g. properties declared viadataorcomputed) — and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source.In addition to a root-level property, the key can also be a simple dot-delimited path, e.g.a.b.c. Note that this usage doesnotsupport complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative$watch()API instead.The value can also be a string of a method name (declared viamethods), or an object that contains additional options. When using the object syntax, the callback should be declared under thehandlerfield. Additional options include:immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.deep: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. SeeDeep Watchers.flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.Avoid using arrow functions when declaring watch callbacks as they will not have access to the component instance viathis.",
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.",
                        "Examplejsexportdefault{data() {return{a:1,b:2,c: {d:4},e:5,f:6}},watch: {// watching top-level propertya(val,oldVal) {console.log(`new: ${val}, old: ${oldVal}`)},// string method nameb:'someMethod',// the callback will be called whenever any of the watched object properties change regardless of their nested depthc: {handler(val,oldVal) {console.log('c changed')},deep:true},// watching a single nested property:'c.d':function(val,oldVal) {// do something},// the callback will be called immediately after the start of the observatione: {handler(val,oldVal) {console.log('e changed')},immediate:true},// you can pass array of callbacks, they will be called one-by-onef: ['handle1',functionhandle2(val,oldVal) {console.log('handle2 triggered')},{handler:functionhandle3(val,oldVal) {console.log('handle3 triggered')}/* ... */}]},methods: {someMethod() {console.log('b changed')},handle1() {console.log('handle 1 triggered')}},created() {this.a=3// => new: 3, old: 1}}",
                        "See alsoWatchers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{watch?:{[key:string]:WatchOptionItem|WatchOptionItem[]}}typeWatchOptionItem=string|WatchCallback|ObjectWatchOptionItemtypeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidtypeObjectWatchOptionItem={handler:WatchCallback|stringimmediate?:boolean// default: falsedeep?:boolean// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}"
                },
                {
                    "type": "p",
                    "text": "Types are simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Thewatchoption expects an object where keys are the reactive component instance properties to watch (e.g. properties declared viadataorcomputed) — and values are the corresponding callbacks. The callback receives the new value and the old value of the watched source."
                },
                {
                    "type": "p",
                    "text": "In addition to a root-level property, the key can also be a simple dot-delimited path, e.g.a.b.c. Note that this usage doesnotsupport complex expressions - only dot-delimited paths are supported. If you need to watch complex data sources, use the imperative$watch()API instead."
                },
                {
                    "type": "p",
                    "text": "The value can also be a string of a method name (declared viamethods), or an object that contains additional options. When using the object syntax, the callback should be declared under thehandlerfield. Additional options include:"
                },
                {
                    "type": "list",
                    "items": [
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object or an array, so that the callback fires on deep mutations. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging."
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using arrow functions when declaring watch callbacks as they will not have access to the component instance viathis."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{a:1,b:2,c: {d:4},e:5,f:6}},watch: {// watching top-level propertya(val,oldVal) {console.log(`new: ${val}, old: ${oldVal}`)},// string method nameb:'someMethod',// the callback will be called whenever any of the watched object properties change regardless of their nested depthc: {handler(val,oldVal) {console.log('c changed')},deep:true},// watching a single nested property:'c.d':function(val,oldVal) {// do something},// the callback will be called immediately after the start of the observatione: {handler(val,oldVal) {console.log('e changed')},immediate:true},// you can pass array of callbacks, they will be called one-by-onef: ['handle1',functionhandle2(val,oldVal) {console.log('handle2 triggered')},{handler:functionhandle3(val,oldVal) {console.log('handle3 triggered')}/* ... */}]},methods: {someMethod() {console.log('b changed')},handle1() {console.log('handle 1 triggered')}},created() {this.a=3// => new: 3, old: 1}}"
                },
                {
                    "type": "p",
                    "text": "See alsoWatchers"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "emits​"
                },
                {
                    "type": "p",
                    "text": "Declare the custom events emitted by the component."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{emits?:ArrayEmitsOptions|ObjectEmitsOptions}typeArrayEmitsOptions=string[]typeObjectEmitsOptions={ [key:string]:EmitValidator|null}typeEmitValidator=(...args:unknown[])=>boolean",
                        "DetailsEmitted events can be declared in two forms:Simple form using an array of stringsFull form using an object where each property key is the name of the event, and the value is eithernullor a validator function.The validation function will receive the additional arguments passed to the component's$emitcall. For example, ifthis.$emit('foo', 1)is called, the corresponding validator forfoowill receive the argument1. The validator function should return a boolean to indicate whether the event arguments are valid.Note that theemitsoption affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component's$attrsobject, so they will not be passed through to the component's root element. SeeFallthrough Attributesfor more details.",
                        "Simple form using an array of strings",
                        "Full form using an object where each property key is the name of the event, and the value is eithernullor a validator function.",
                        "ExampleArray syntax:jsexportdefault{emits: ['check'],created() {this.$emit('check')}}Object syntax:jsexportdefault{emits: {// no validationclick:null,// with validationsubmit: (payload)=>{if(payload.email&&payload.password) {returntrue}else{console.warn(`Invalid submit event payload!`)returnfalse}}}}",
                        "See alsoGuide - Fallthrough AttributesGuide - Typing Component Emits",
                        "Guide - Fallthrough Attributes",
                        "Guide - Typing Component Emits"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{emits?:ArrayEmitsOptions|ObjectEmitsOptions}typeArrayEmitsOptions=string[]typeObjectEmitsOptions={ [key:string]:EmitValidator|null}typeEmitValidator=(...args:unknown[])=>boolean"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Emitted events can be declared in two forms:"
                },
                {
                    "type": "list",
                    "items": [
                        "Simple form using an array of strings",
                        "Full form using an object where each property key is the name of the event, and the value is eithernullor a validator function."
                    ]
                },
                {
                    "type": "p",
                    "text": "The validation function will receive the additional arguments passed to the component's$emitcall. For example, ifthis.$emit('foo', 1)is called, the corresponding validator forfoowill receive the argument1. The validator function should return a boolean to indicate whether the event arguments are valid."
                },
                {
                    "type": "p",
                    "text": "Note that theemitsoption affects which event listeners are considered component event listeners, rather than native DOM event listeners. The listeners for declared events will be removed from the component's$attrsobject, so they will not be passed through to the component's root element. SeeFallthrough Attributesfor more details."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Array syntax:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: ['check'],created() {this.$emit('check')}}"
                },
                {
                    "type": "p",
                    "text": "Object syntax:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: {// no validationclick:null,// with validationsubmit: (payload)=>{if(payload.email&&payload.password) {returntrue}else{console.warn(`Invalid submit event payload!`)returnfalse}}}}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Fallthrough Attributes",
                        "Guide - Typing Component Emits"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "expose​"
                },
                {
                    "type": "p",
                    "text": "Declare exposed public properties when the component instance is accessed by a parent via template refs."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsinterfaceComponentOptions{expose?:string[]}",
                        "DetailsBy default, a component instance exposes all instance properties to the parent when accessed via$parent,$root, or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling.Theexposeoption expects a list of property name strings. Whenexposeis used, only the properties explicitly listed will be exposed on the component's public instance.exposeonly affects user-defined properties - it does not filter out built-in component instance properties.",
                        "Examplejsexportdefault{// only `publicMethod` will be available on the public instanceexpose: ['publicMethod'],methods: {publicMethod() {// ...},privateMethod() {// ...}}}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "interfaceComponentOptions{expose?:string[]}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "By default, a component instance exposes all instance properties to the parent when accessed via$parent,$root, or template refs. This can be undesirable, since a component most likely has internal state or methods that should be kept private to avoid tight coupling."
                },
                {
                    "type": "p",
                    "text": "Theexposeoption expects a list of property name strings. Whenexposeis used, only the properties explicitly listed will be exposed on the component's public instance."
                },
                {
                    "type": "p",
                    "text": "exposeonly affects user-defined properties - it does not filter out built-in component instance properties."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// only `publicMethod` will be available on the public instanceexpose: ['publicMethod'],methods: {publicMethod() {// ...},privateMethod() {// ...}}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/reactivity-advanced",
            "title": "Reactivity API: Advanced | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity API: Advanced​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "shallowRef()​"
                },
                {
                    "type": "p",
                    "text": "Shallow version ofref()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionshallowRef<T>(value:T):ShallowRef<T>interfaceShallowRef<T> {value:T}",
                        "DetailsUnlikeref(), the inner value of a shallow ref is stored and exposed as-is, and will not be made deeply reactive. Only the.valueaccess is reactive.shallowRef()is typically used for performance optimizations of large data structures, or integration with external state management systems.",
                        "Examplejsconststate=shallowRef({ count:1})// does NOT trigger changestate.value.count=2// does trigger changestate.value={ count:2}",
                        "See alsoGuide - Reduce Reactivity Overhead for Large Immutable StructuresGuide - Integration with External State Systems",
                        "Guide - Reduce Reactivity Overhead for Large Immutable Structures",
                        "Guide - Integration with External State Systems"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionshallowRef<T>(value:T):ShallowRef<T>interfaceShallowRef<T> {value:T}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Unlikeref(), the inner value of a shallow ref is stored and exposed as-is, and will not be made deeply reactive. Only the.valueaccess is reactive."
                },
                {
                    "type": "p",
                    "text": "shallowRef()is typically used for performance optimizations of large data structures, or integration with external state management systems."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "conststate=shallowRef({ count:1})// does NOT trigger changestate.value.count=2// does trigger changestate.value={ count:2}"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reduce Reactivity Overhead for Large Immutable Structures",
                        "Guide - Integration with External State Systems"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "triggerRef()​"
                },
                {
                    "type": "p",
                    "text": "Force trigger effects that depends on ashallow ref. This is typically used after making deep mutations to the inner value of a shallow ref."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiontriggerRef(ref:ShallowRef):void",
                        "Examplejsconstshallow=shallowRef({greet:'Hello, world'})// Logs \"Hello, world\" once for the first run-throughwatchEffect(()=>{console.log(shallow.value.greet)})// This won't trigger the effect because the ref is shallowshallow.value.greet='Hello, universe'// Logs \"Hello, universe\"triggerRef(shallow)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiontriggerRef(ref:ShallowRef):void"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constshallow=shallowRef({greet:'Hello, world'})// Logs \"Hello, world\" once for the first run-throughwatchEffect(()=>{console.log(shallow.value.greet)})// This won't trigger the effect because the ref is shallowshallow.value.greet='Hello, universe'// Logs \"Hello, universe\"triggerRef(shallow)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "customRef()​"
                },
                {
                    "type": "p",
                    "text": "Creates a customized ref with explicit control over its dependency tracking and updates triggering."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctioncustomRef<T>(factory:CustomRefFactory<T>):Ref<T>typeCustomRefFactory<T>=(track:()=>void,trigger:()=>void)=>{get:()=>Tset:(value:T)=>void}",
                        "DetailscustomRef()expects a factory function, which receivestrackandtriggerfunctions as arguments and should return an object withgetandsetmethods.In general,track()should be called insideget(), andtrigger()should be called insideset(). However, you have full control over when they should be called, or whether they should be called at all.",
                        "ExampleCreating a debounced ref that only updates the value after a certain timeout after the latest set call:jsimport{ customRef }from'vue'exportfunctionuseDebouncedRef(value,delay=200) {lettimeoutreturncustomRef((track,trigger)=>{return{get() {track()returnvalue},set(newValue) {clearTimeout(timeout)timeout=setTimeout(()=>{value=newValuetrigger()}, delay)}}})}Usage in component:vue<scriptsetup>import{ useDebouncedRef }from'./debouncedRef'consttext=useDebouncedRef('hello')</script><template><inputv-model=\"text\"/></template>Try it in the PlaygroundUse with cautionWhen using customRef, we should be cautious about the return value of its getter, particularly when generating new object datatypes each time the getter is run. This affects the relationship between parent and child components, where such a customRef has been passed as a prop.The parent component's render function could be triggered by changes to a different reactive state. During rerender, the value of our customRef is reevaluated, returning a new object datatype as a prop to a child component. This prop is compared with its last value in the child component, and since they are different, the reactive dependencies of the customRef are triggered in the child component. Meanwhile, the reactive dependencies in the parent component do not run because the customRef's setter was not called, and its dependencies were not triggered as a result.See it in the Playground"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functioncustomRef<T>(factory:CustomRefFactory<T>):Ref<T>typeCustomRefFactory<T>=(track:()=>void,trigger:()=>void)=>{get:()=>Tset:(value:T)=>void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "customRef()expects a factory function, which receivestrackandtriggerfunctions as arguments and should return an object withgetandsetmethods."
                },
                {
                    "type": "p",
                    "text": "In general,track()should be called insideget(), andtrigger()should be called insideset(). However, you have full control over when they should be called, or whether they should be called at all."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Creating a debounced ref that only updates the value after a certain timeout after the latest set call:"
                },
                {
                    "type": "code",
                    "code": "import{ customRef }from'vue'exportfunctionuseDebouncedRef(value,delay=200) {lettimeoutreturncustomRef((track,trigger)=>{return{get() {track()returnvalue},set(newValue) {clearTimeout(timeout)timeout=setTimeout(()=>{value=newValuetrigger()}, delay)}}})}"
                },
                {
                    "type": "p",
                    "text": "Usage in component:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useDebouncedRef }from'./debouncedRef'consttext=useDebouncedRef('hello')</script><template><inputv-model=\"text\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Use with caution"
                },
                {
                    "type": "p",
                    "text": "When using customRef, we should be cautious about the return value of its getter, particularly when generating new object datatypes each time the getter is run. This affects the relationship between parent and child components, where such a customRef has been passed as a prop."
                },
                {
                    "type": "p",
                    "text": "The parent component's render function could be triggered by changes to a different reactive state. During rerender, the value of our customRef is reevaluated, returning a new object datatype as a prop to a child component. This prop is compared with its last value in the child component, and since they are different, the reactive dependencies of the customRef are triggered in the child component. Meanwhile, the reactive dependencies in the parent component do not run because the customRef's setter was not called, and its dependencies were not triggered as a result."
                },
                {
                    "type": "p",
                    "text": "See it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "shallowReactive()​"
                },
                {
                    "type": "p",
                    "text": "Shallow version ofreactive()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionshallowReactive<Textendsobject>(target:T):T",
                        "DetailsUnlikereactive(), there is no deep conversion: only root-level properties are reactive for a shallow reactive object. Property values are stored and exposed as-is - this also means properties with ref values willnotbe automatically unwrapped.Use with CautionShallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug.",
                        "Examplejsconststate=shallowReactive({foo:1,nested: {bar:2}})// mutating state's own properties is reactivestate.foo++// ...but does not convert nested objectsisReactive(state.nested)// false// NOT reactivestate.nested.bar++"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionshallowReactive<Textendsobject>(target:T):T"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Unlikereactive(), there is no deep conversion: only root-level properties are reactive for a shallow reactive object. Property values are stored and exposed as-is - this also means properties with ref values willnotbe automatically unwrapped."
                },
                {
                    "type": "p",
                    "text": "Use with Caution"
                },
                {
                    "type": "p",
                    "text": "Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "conststate=shallowReactive({foo:1,nested: {bar:2}})// mutating state's own properties is reactivestate.foo++// ...but does not convert nested objectsisReactive(state.nested)// false// NOT reactivestate.nested.bar++"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "shallowReadonly()​"
                },
                {
                    "type": "p",
                    "text": "Shallow version ofreadonly()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionshallowReadonly<Textendsobject>(target:T):Readonly<T>",
                        "DetailsUnlikereadonly(), there is no deep conversion: only root-level properties are made readonly. Property values are stored and exposed as-is - this also means properties with ref values willnotbe automatically unwrapped.Use with CautionShallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug.",
                        "Examplejsconststate=shallowReadonly({foo:1,nested: {bar:2}})// mutating state's own properties will failstate.foo++// ...but works on nested objectsisReadonly(state.nested)// false// worksstate.nested.bar++"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionshallowReadonly<Textendsobject>(target:T):Readonly<T>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Unlikereadonly(), there is no deep conversion: only root-level properties are made readonly. Property values are stored and exposed as-is - this also means properties with ref values willnotbe automatically unwrapped."
                },
                {
                    "type": "p",
                    "text": "Use with Caution"
                },
                {
                    "type": "p",
                    "text": "Shallow data structures should only be used for root level state in a component. Avoid nesting it inside a deep reactive object as it creates a tree with inconsistent reactivity behavior which can be difficult to understand and debug."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "conststate=shallowReadonly({foo:1,nested: {bar:2}})// mutating state's own properties will failstate.foo++// ...but works on nested objectsisReadonly(state.nested)// false// worksstate.nested.bar++"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "toRaw()​"
                },
                {
                    "type": "p",
                    "text": "Returns the raw, original object of a Vue-created proxy."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiontoRaw<T>(proxy:T):T",
                        "DetailstoRaw()can return the original object from proxies created byreactive(),readonly(),shallowReactive()orshallowReadonly().This is an escape hatch that can be used to temporarily read without incurring proxy access / tracking overhead or write without triggering changes. It isnotrecommended to hold a persistent reference to the original object. Use with caution.",
                        "Examplejsconstfoo={}constreactiveFoo=reactive(foo)console.log(toRaw(reactiveFoo)===foo)// true"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiontoRaw<T>(proxy:T):T"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "toRaw()can return the original object from proxies created byreactive(),readonly(),shallowReactive()orshallowReadonly()."
                },
                {
                    "type": "p",
                    "text": "This is an escape hatch that can be used to temporarily read without incurring proxy access / tracking overhead or write without triggering changes. It isnotrecommended to hold a persistent reference to the original object. Use with caution."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constfoo={}constreactiveFoo=reactive(foo)console.log(toRaw(reactiveFoo)===foo)// true"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "markRaw()​"
                },
                {
                    "type": "p",
                    "text": "Marks an object so that it will never be converted to a proxy. Returns the object itself."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionmarkRaw<Textendsobject>(value:T):T",
                        "Examplejsconstfoo=markRaw({})console.log(isReactive(reactive(foo)))// false// also works when nested inside other reactive objectsconstbar=reactive({ foo })console.log(isReactive(bar.foo))// falseUse with CautionmarkRaw()and shallow APIs such asshallowReactive()allow you to selectively opt-out of the default deep reactive/readonly conversion and embed raw, non-proxied objects in your state graph. They can be used for various reasons:Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources.They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead toidentity hazards- i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:jsconstfoo=markRaw({nested: {}})constbar=reactive({// although `foo` is marked as raw, foo.nested is not.nested: foo.nested})console.log(foo.nested===bar.nested)// falseIdentity hazards are in general rare. However, to properly utilize these APIs while safely avoiding identity hazards requires a solid understanding of how the reactivity system works.",
                        "Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.",
                        "Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionmarkRaw<Textendsobject>(value:T):T"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constfoo=markRaw({})console.log(isReactive(reactive(foo)))// false// also works when nested inside other reactive objectsconstbar=reactive({ foo })console.log(isReactive(bar.foo))// false"
                },
                {
                    "type": "p",
                    "text": "Use with Caution"
                },
                {
                    "type": "p",
                    "text": "markRaw()and shallow APIs such asshallowReactive()allow you to selectively opt-out of the default deep reactive/readonly conversion and embed raw, non-proxied objects in your state graph. They can be used for various reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.",
                        "Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources."
                    ]
                },
                {
                    "type": "p",
                    "text": "Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object."
                },
                {
                    "type": "p",
                    "text": "Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources."
                },
                {
                    "type": "p",
                    "text": "They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead toidentity hazards- i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:"
                },
                {
                    "type": "code",
                    "code": "constfoo=markRaw({nested: {}})constbar=reactive({// although `foo` is marked as raw, foo.nested is not.nested: foo.nested})console.log(foo.nested===bar.nested)// false"
                },
                {
                    "type": "p",
                    "text": "Identity hazards are in general rare. However, to properly utilize these APIs while safely avoiding identity hazards requires a solid understanding of how the reactivity system works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "effectScope()​"
                },
                {
                    "type": "p",
                    "text": "Creates an effect scope object which can capture the reactive effects (i.e. computed and watchers) created within it so that these effects can be disposed together. For detailed use cases of this API, please consult its correspondingRFC."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctioneffectScope(detached?:boolean):EffectScopeinterfaceEffectScope{run<T>(fn:()=>T):T|undefined// undefined if scope is inactivestop():void}",
                        "Examplejsconstscope=effectScope()scope.run(()=>{constdoubled=computed(()=>counter.value*2)watch(doubled, ()=>console.log(doubled.value))watchEffect(()=>console.log('Count: ', doubled.value))})// to dispose all effects in the scopescope.stop()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functioneffectScope(detached?:boolean):EffectScopeinterfaceEffectScope{run<T>(fn:()=>T):T|undefined// undefined if scope is inactivestop():void}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constscope=effectScope()scope.run(()=>{constdoubled=computed(()=>counter.value*2)watch(doubled, ()=>console.log(doubled.value))watchEffect(()=>console.log('Count: ', doubled.value))})// to dispose all effects in the scopescope.stop()"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "getCurrentScope()​"
                },
                {
                    "type": "p",
                    "text": "Returns the current activeeffect scopeif there is one."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiongetCurrentScope():EffectScope|undefined"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiongetCurrentScope():EffectScope|undefined"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onScopeDispose()​"
                },
                {
                    "type": "p",
                    "text": "Registers a dispose callback on the current activeeffect scope. The callback will be invoked when the associated effect scope is stopped."
                },
                {
                    "type": "p",
                    "text": "This method can be used as a non-component-coupled replacement ofonUnmountedin reusable composition functions, since each Vue component'ssetup()function is also invoked in an effect scope."
                },
                {
                    "type": "p",
                    "text": "A warning will be thrown if this function is called without an active effect scope. In 3.5+, this warning can be suppressed by passingtrueas the second argument."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononScopeDispose(fn:()=>void,failSilently?:boolean):void"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononScopeDispose(fn:()=>void,failSilently?:boolean):void"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/reactivity-core",
            "title": "Reactivity API: Core | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity API: Core​"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "p",
                    "text": "To better understand the Reactivity APIs, it is recommended to read the following chapters in the guide:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reactivity Fundamentals(with the API preference set to Composition API)",
                        "Reactivity in Depth"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ref()​"
                },
                {
                    "type": "p",
                    "text": "Takes an inner value and returns a reactive and mutable ref object, which has a single property.valuethat points to the inner value."
                },
                {
                    "type": "list",
                    "items": [
                        "Typetsfunctionref<T>(value:T):Ref<UnwrapRef<T>>interfaceRef<T> {value:T}",
                        "DetailsThe ref object is mutable - i.e. you can assign new values to.value. It is also reactive - i.e. any read operations to.valueare tracked, and write operations will trigger associated effects.If an object is assigned as a ref's value, the object is made deeply reactive withreactive(). This also means if the object contains nested refs, they will be deeply unwrapped.To avoid the deep conversion, useshallowRef()instead.",
                        "Examplejsconstcount=ref(0)console.log(count.value)// 0count.value=1console.log(count.value)// 1",
                        "See alsoGuide - Reactivity Fundamentals withref()Guide - Typingref()",
                        "Guide - Reactivity Fundamentals withref()",
                        "Guide - Typingref()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionref<T>(value:T):Ref<UnwrapRef<T>>interfaceRef<T> {value:T}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The ref object is mutable - i.e. you can assign new values to.value. It is also reactive - i.e. any read operations to.valueare tracked, and write operations will trigger associated effects."
                },
                {
                    "type": "p",
                    "text": "If an object is assigned as a ref's value, the object is made deeply reactive withreactive(). This also means if the object contains nested refs, they will be deeply unwrapped."
                },
                {
                    "type": "p",
                    "text": "To avoid the deep conversion, useshallowRef()instead."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)console.log(count.value)// 0count.value=1console.log(count.value)// 1"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reactivity Fundamentals withref()",
                        "Guide - Typingref()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "computed()​"
                },
                {
                    "type": "p",
                    "text": "Takes agetter functionand returns a readonly reactiverefobject for the returned value from the getter. It can also take an object withgetandsetfunctions to create a writable ref object."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// read-onlyfunctioncomputed<T>(getter:(oldValue:T|undefined)=>T,// see \"Computed Debugging\" link belowdebuggerOptions?:DebuggerOptions):Readonly<Ref<Readonly<T>>>// writablefunctioncomputed<T>(options:{get:(oldValue:T|undefined)=>Tset:(value:T)=>void},debuggerOptions?:DebuggerOptions):Ref<T>",
                        "ExampleCreating a readonly computed ref:jsconstcount=ref(1)constplusOne=computed(()=>count.value+1)console.log(plusOne.value)// 2plusOne.value++// errorCreating a writable computed ref:jsconstcount=ref(1)constplusOne=computed({get: ()=>count.value+1,set: (val)=>{count.value=val-1}})plusOne.value=1console.log(count.value)// 0Debugging:jsconstplusOne=computed(()=>count.value+1, {onTrack(e) {debugger},onTrigger(e) {debugger}})",
                        "See alsoGuide - Computed PropertiesGuide - Computed DebuggingGuide - Typingcomputed()Guide - Performance - Computed Stability",
                        "Guide - Computed Properties",
                        "Guide - Computed Debugging",
                        "Guide - Typingcomputed()",
                        "Guide - Performance - Computed Stability"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// read-onlyfunctioncomputed<T>(getter:(oldValue:T|undefined)=>T,// see \"Computed Debugging\" link belowdebuggerOptions?:DebuggerOptions):Readonly<Ref<Readonly<T>>>// writablefunctioncomputed<T>(options:{get:(oldValue:T|undefined)=>Tset:(value:T)=>void},debuggerOptions?:DebuggerOptions):Ref<T>"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Creating a readonly computed ref:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(1)constplusOne=computed(()=>count.value+1)console.log(plusOne.value)// 2plusOne.value++// error"
                },
                {
                    "type": "p",
                    "text": "Creating a writable computed ref:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(1)constplusOne=computed({get: ()=>count.value+1,set: (val)=>{count.value=val-1}})plusOne.value=1console.log(count.value)// 0"
                },
                {
                    "type": "p",
                    "text": "Debugging:"
                },
                {
                    "type": "code",
                    "code": "constplusOne=computed(()=>count.value+1, {onTrack(e) {debugger},onTrigger(e) {debugger}})"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Computed Properties",
                        "Guide - Computed Debugging",
                        "Guide - Typingcomputed()",
                        "Guide - Performance - Computed Stability"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "reactive()​"
                },
                {
                    "type": "p",
                    "text": "Returns a reactive proxy of the object."
                },
                {
                    "type": "list",
                    "items": [
                        "Typetsfunctionreactive<Textendsobject>(target:T):UnwrapNestedRefs<T>",
                        "DetailsThe reactive conversion is \"deep\": it affects all nested properties. A reactive object also deeply unwraps any properties that arerefswhile maintaining reactivity.It should also be noted that there is no ref unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type likeMap.To avoid the deep conversion and only retain reactivity at the root level, useshallowReactive()instead.The returned object and its nested objects are wrapped withES Proxyandnotequal to the original objects. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.",
                        "ExampleCreating a reactive object:jsconstobj=reactive({ count:0})obj.count++Ref unwrapping:tsconstcount=ref(1)constobj=reactive({ count })// ref will be unwrappedconsole.log(obj.count===count.value)// true// it will update `obj.count`count.value++console.log(count.value)// 2console.log(obj.count)// 2// it will also update `count` refobj.count++console.log(obj.count)// 3console.log(count.value)// 3Note that refs arenotunwrapped when accessed as array or collection elements:jsconstbooks=reactive([ref('Vue 3 Guide')])// need .value hereconsole.log(books[0].value)constmap=reactive(newMap([['count',ref(0)]]))// need .value hereconsole.log(map.get('count').value)When assigning arefto areactiveproperty, that ref will also be automatically unwrapped:tsconstcount=ref(1)constobj=reactive({})obj.count=countconsole.log(obj.count)// 1console.log(obj.count===count.value)// true",
                        "See alsoGuide - Reactivity FundamentalsGuide - Typingreactive()",
                        "Guide - Reactivity Fundamentals",
                        "Guide - Typingreactive()"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionreactive<Textendsobject>(target:T):UnwrapNestedRefs<T>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The reactive conversion is \"deep\": it affects all nested properties. A reactive object also deeply unwraps any properties that arerefswhile maintaining reactivity."
                },
                {
                    "type": "p",
                    "text": "It should also be noted that there is no ref unwrapping performed when the ref is accessed as an element of a reactive array or a native collection type likeMap."
                },
                {
                    "type": "p",
                    "text": "To avoid the deep conversion and only retain reactivity at the root level, useshallowReactive()instead."
                },
                {
                    "type": "p",
                    "text": "The returned object and its nested objects are wrapped withES Proxyandnotequal to the original objects. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Creating a reactive object:"
                },
                {
                    "type": "code",
                    "code": "constobj=reactive({ count:0})obj.count++"
                },
                {
                    "type": "p",
                    "text": "Ref unwrapping:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(1)constobj=reactive({ count })// ref will be unwrappedconsole.log(obj.count===count.value)// true// it will update `obj.count`count.value++console.log(count.value)// 2console.log(obj.count)// 2// it will also update `count` refobj.count++console.log(obj.count)// 3console.log(count.value)// 3"
                },
                {
                    "type": "p",
                    "text": "Note that refs arenotunwrapped when accessed as array or collection elements:"
                },
                {
                    "type": "code",
                    "code": "constbooks=reactive([ref('Vue 3 Guide')])// need .value hereconsole.log(books[0].value)constmap=reactive(newMap([['count',ref(0)]]))// need .value hereconsole.log(map.get('count').value)"
                },
                {
                    "type": "p",
                    "text": "When assigning arefto areactiveproperty, that ref will also be automatically unwrapped:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(1)constobj=reactive({})obj.count=countconsole.log(obj.count)// 1console.log(obj.count===count.value)// true"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reactivity Fundamentals",
                        "Guide - Typingreactive()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "readonly()​"
                },
                {
                    "type": "p",
                    "text": "Takes an object (reactive or plain) or arefand returns a readonly proxy to the original."
                },
                {
                    "type": "list",
                    "items": [
                        "Typetsfunctionreadonly<Textendsobject>(target:T):DeepReadonly<UnwrapNestedRefs<T>>",
                        "DetailsA readonly proxy is deep: any nested property accessed will be readonly as well. It also has the same ref-unwrapping behavior asreactive(), except the unwrapped values will also be made readonly.To avoid the deep conversion, useshallowReadonly()instead.",
                        "Examplejsconstoriginal=reactive({ count:0})constcopy=readonly(original)watchEffect(()=>{// works for reactivity trackingconsole.log(copy.count)})// mutating original will trigger watchers relying on the copyoriginal.count++// mutating the copy will fail and result in a warningcopy.count++// warning!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionreadonly<Textendsobject>(target:T):DeepReadonly<UnwrapNestedRefs<T>>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "A readonly proxy is deep: any nested property accessed will be readonly as well. It also has the same ref-unwrapping behavior asreactive(), except the unwrapped values will also be made readonly."
                },
                {
                    "type": "p",
                    "text": "To avoid the deep conversion, useshallowReadonly()instead."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constoriginal=reactive({ count:0})constcopy=readonly(original)watchEffect(()=>{// works for reactivity trackingconsole.log(copy.count)})// mutating original will trigger watchers relying on the copyoriginal.count++// mutating the copy will fail and result in a warningcopy.count++// warning!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watchEffect()​"
                },
                {
                    "type": "p",
                    "text": "Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionwatchEffect(effect:(onCleanup:OnCleanup)=>void,options?:WatchEffectOptions):WatchHandletypeOnCleanup=(cleanupFn:()=>void)=>voidinterfaceWatchEffectOptions{flush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}interfaceWatchHandle{():void// callable, same as `stop`pause:()=>voidresume:()=>voidstop:()=>void}",
                        "DetailsThe first argument is the effect function to be run. The effect function receives a function that can be used to register a cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request (see example below).The second argument is an optional options object that can be used to adjust the effect's flush timing or to debug the effect's dependencies.By default, watchers will run just prior to component rendering. Settingflush: 'post'will defer the watcher until after component rendering. SeeCallback Flush Timingfor more information. In rare cases, it might be necessary to trigger a watcher immediately when a reactive dependency changes, e.g. to invalidate a cache. This can be achieved usingflush: 'sync'. However, this setting should be used with caution, as it can lead to problems with performance and data consistency if multiple properties are being updated at the same time.The return value is a handle function that can be called to stop the effect from running again.",
                        "Examplejsconstcount=ref(0)watchEffect(()=>console.log(count.value))// -> logs 0count.value++// -> logs 1Stopping the watcher:jsconststop=watchEffect(()=>{})// when the watcher is no longer needed:stop()Pausing / resuming the watcher:jsconst{stop,pause,resume}=watchEffect(()=>{})// temporarily pause the watcherpause()// resume laterresume()// stopstop()Side effect cleanup:jswatchEffect(async(onCleanup)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonCleanup(cancel)data.value=awaitresponse})Side effect cleanup in 3.5+:jsimport{ onWatcherCleanup }from'vue'watchEffect(async()=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonWatcherCleanup(cancel)data.value=awaitresponse})Options:jswatchEffect(()=>{}, {flush:'post',onTrack(e) {debugger},onTrigger(e) {debugger}})",
                        "See alsoGuide - WatchersGuide - Watcher Debugging",
                        "Guide - Watchers",
                        "Guide - Watcher Debugging"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionwatchEffect(effect:(onCleanup:OnCleanup)=>void,options?:WatchEffectOptions):WatchHandletypeOnCleanup=(cleanupFn:()=>void)=>voidinterfaceWatchEffectOptions{flush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>void}interfaceWatchHandle{():void// callable, same as `stop`pause:()=>voidresume:()=>voidstop:()=>void}"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument is the effect function to be run. The effect function receives a function that can be used to register a cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request (see example below)."
                },
                {
                    "type": "p",
                    "text": "The second argument is an optional options object that can be used to adjust the effect's flush timing or to debug the effect's dependencies."
                },
                {
                    "type": "p",
                    "text": "By default, watchers will run just prior to component rendering. Settingflush: 'post'will defer the watcher until after component rendering. SeeCallback Flush Timingfor more information. In rare cases, it might be necessary to trigger a watcher immediately when a reactive dependency changes, e.g. to invalidate a cache. This can be achieved usingflush: 'sync'. However, this setting should be used with caution, as it can lead to problems with performance and data consistency if multiple properties are being updated at the same time."
                },
                {
                    "type": "p",
                    "text": "The return value is a handle function that can be called to stop the effect from running again."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)watchEffect(()=>console.log(count.value))// -> logs 0count.value++// -> logs 1"
                },
                {
                    "type": "p",
                    "text": "Stopping the watcher:"
                },
                {
                    "type": "code",
                    "code": "conststop=watchEffect(()=>{})// when the watcher is no longer needed:stop()"
                },
                {
                    "type": "p",
                    "text": "Pausing / resuming the watcher:"
                },
                {
                    "type": "code",
                    "code": "const{stop,pause,resume}=watchEffect(()=>{})// temporarily pause the watcherpause()// resume laterresume()// stopstop()"
                },
                {
                    "type": "p",
                    "text": "Side effect cleanup:"
                },
                {
                    "type": "code",
                    "code": "watchEffect(async(onCleanup)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonCleanup(cancel)data.value=awaitresponse})"
                },
                {
                    "type": "p",
                    "text": "Side effect cleanup in 3.5+:"
                },
                {
                    "type": "code",
                    "code": "import{ onWatcherCleanup }from'vue'watchEffect(async()=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonWatcherCleanup(cancel)data.value=awaitresponse})"
                },
                {
                    "type": "p",
                    "text": "Options:"
                },
                {
                    "type": "code",
                    "code": "watchEffect(()=>{}, {flush:'post',onTrack(e) {debugger},onTrigger(e) {debugger}})"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Watchers",
                        "Guide - Watcher Debugging"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watchPostEffect()​"
                },
                {
                    "type": "p",
                    "text": "Alias ofwatchEffect()withflush: 'post'option."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watchSyncEffect()​"
                },
                {
                    "type": "p",
                    "text": "Alias ofwatchEffect()withflush: 'sync'option."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watch()​"
                },
                {
                    "type": "p",
                    "text": "Watches one or more reactive data sources and invokes a callback function when the sources change."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// watching single sourcefunctionwatch<T>(source:WatchSource<T>,callback:WatchCallback<T>,options?:WatchOptions):WatchHandle// watching multiple sourcesfunctionwatch<T>(sources:WatchSource<T>[],callback:WatchCallback<T[]>,options?:WatchOptions):WatchHandletypeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidtypeWatchSource<T>=|Ref<T>// ref|(()=>T)// getter|(Textendsobject?T:never)// reactive objectinterfaceWatchOptionsextendsWatchEffectOptions{immediate?:boolean// default: falsedeep?:boolean|number// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>voidonce?:boolean// default: false (3.4+)}interfaceWatchHandle{():void// callable, same as `stop`pause:()=>voidresume:()=>voidstop:()=>void}Types are simplified for readability.",
                        "Detailswatch()is lazy by default - i.e. the callback is only called when the watched source has changed.The first argument is the watcher'ssource. The source can be one of the following:A getter function that returns a valueA refA reactive object...or an array of the above.The second argument is the callback that will be called when the source changes. The callback receives three arguments: the new value, the old value, and a function for registering a side effect cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request.When watching multiple sources, the callback receives two arrays containing new / old values corresponding to the source array.The third optional argument is an options object that supports the following options:immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. In 3.5+, this can also be a number indicating the max traversal depth. SeeDeep Watchers.flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.once: (3.4+) run the callback only once. The watcher is automatically stopped after the first callback run.Compared towatchEffect(),watch()allows us to:Perform the side effect lazily;Be more specific about what state should trigger the watcher to re-run;Access both the previous and current value of the watched state.",
                        "A getter function that returns a value",
                        "A ref",
                        "A reactive object",
                        "...or an array of the above.",
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. In 3.5+, this can also be a number indicating the max traversal depth. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.",
                        "once: (3.4+) run the callback only once. The watcher is automatically stopped after the first callback run.",
                        "Perform the side effect lazily;",
                        "Be more specific about what state should trigger the watcher to re-run;",
                        "Access both the previous and current value of the watched state.",
                        "ExampleWatching a getter:jsconststate=reactive({ count:0})watch(()=>state.count,(count,prevCount)=>{/* ... */})Watching a ref:jsconstcount=ref(0)watch(count, (count,prevCount)=>{/* ... */})When watching multiple sources, the callback receives arrays containing new / old values corresponding to the source array:jswatch([fooRef, barRef], ([foo,bar], [prevFoo,prevBar])=>{/* ... */})When using a getter source, the watcher only fires if the getter's return value has changed. If you want the callback to fire even on deep mutations, you need to explicitly force the watcher into deep mode with{ deep: true }. Note in deep mode, the new value and the old will be the same object if the callback was triggered by a deep mutation:jsconststate=reactive({ count:0})watch(()=>state,(newValue,oldValue)=>{// newValue === oldValue},{ deep:true})When directly watching a reactive object, the watcher is automatically in deep mode:jsconststate=reactive({ count:0})watch(state, ()=>{/* triggers on deep mutation to state */})watch()shares the same flush timing and debugging options withwatchEffect():jswatch(source, callback, {flush:'post',onTrack(e) {debugger},onTrigger(e) {debugger}})Stopping the watcher:jsconststop=watch(source, callback)// when the watcher is no longer needed:stop()Pausing / resuming the watcher:jsconst{stop,pause,resume}=watch(()=>{})// temporarily pause the watcherpause()// resume laterresume()// stopstop()Side effect cleanup:jswatch(id,async(newId,oldId,onCleanup)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonCleanup(cancel)data.value=awaitresponse})Side effect cleanup in 3.5+:jsimport{ onWatcherCleanup }from'vue'watch(id,async(newId)=>{const{response,cancel}=doAsyncWork(newId)onWatcherCleanup(cancel)data.value=awaitresponse})",
                        "See alsoGuide - WatchersGuide - Watcher Debugging",
                        "Guide - Watchers",
                        "Guide - Watcher Debugging"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// watching single sourcefunctionwatch<T>(source:WatchSource<T>,callback:WatchCallback<T>,options?:WatchOptions):WatchHandle// watching multiple sourcesfunctionwatch<T>(sources:WatchSource<T>[],callback:WatchCallback<T[]>,options?:WatchOptions):WatchHandletypeWatchCallback<T>=(value:T,oldValue:T,onCleanup:(cleanupFn:()=>void)=>void)=>voidtypeWatchSource<T>=|Ref<T>// ref|(()=>T)// getter|(Textendsobject?T:never)// reactive objectinterfaceWatchOptionsextendsWatchEffectOptions{immediate?:boolean// default: falsedeep?:boolean|number// default: falseflush?:'pre'|'post'|'sync'// default: 'pre'onTrack?:(event:DebuggerEvent)=>voidonTrigger?:(event:DebuggerEvent)=>voidonce?:boolean// default: false (3.4+)}interfaceWatchHandle{():void// callable, same as `stop`pause:()=>voidresume:()=>voidstop:()=>void}"
                },
                {
                    "type": "p",
                    "text": "Types are simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "watch()is lazy by default - i.e. the callback is only called when the watched source has changed."
                },
                {
                    "type": "p",
                    "text": "The first argument is the watcher'ssource. The source can be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "A getter function that returns a value",
                        "A ref",
                        "A reactive object",
                        "...or an array of the above."
                    ]
                },
                {
                    "type": "p",
                    "text": "The second argument is the callback that will be called when the source changes. The callback receives three arguments: the new value, the old value, and a function for registering a side effect cleanup callback. The cleanup callback will be called right before the next time the effect is re-run, and can be used to clean up invalidated side effects, e.g. a pending async request."
                },
                {
                    "type": "p",
                    "text": "When watching multiple sources, the callback receives two arrays containing new / old values corresponding to the source array."
                },
                {
                    "type": "p",
                    "text": "The third optional argument is an options object that supports the following options:"
                },
                {
                    "type": "list",
                    "items": [
                        "immediate: trigger the callback immediately on watcher creation. Old value will beundefinedon the first call.",
                        "deep: force deep traversal of the source if it is an object, so that the callback fires on deep mutations. In 3.5+, this can also be a number indicating the max traversal depth. SeeDeep Watchers.",
                        "flush: adjust the callback's flush timing. SeeCallback Flush TimingandwatchEffect().",
                        "onTrack / onTrigger: debug the watcher's dependencies. SeeWatcher Debugging.",
                        "once: (3.4+) run the callback only once. The watcher is automatically stopped after the first callback run."
                    ]
                },
                {
                    "type": "p",
                    "text": "Compared towatchEffect(),watch()allows us to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Perform the side effect lazily;",
                        "Be more specific about what state should trigger the watcher to re-run;",
                        "Access both the previous and current value of the watched state."
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Watching a getter:"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({ count:0})watch(()=>state.count,(count,prevCount)=>{/* ... */})"
                },
                {
                    "type": "p",
                    "text": "Watching a ref:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)watch(count, (count,prevCount)=>{/* ... */})"
                },
                {
                    "type": "p",
                    "text": "When watching multiple sources, the callback receives arrays containing new / old values corresponding to the source array:"
                },
                {
                    "type": "code",
                    "code": "watch([fooRef, barRef], ([foo,bar], [prevFoo,prevBar])=>{/* ... */})"
                },
                {
                    "type": "p",
                    "text": "When using a getter source, the watcher only fires if the getter's return value has changed. If you want the callback to fire even on deep mutations, you need to explicitly force the watcher into deep mode with{ deep: true }. Note in deep mode, the new value and the old will be the same object if the callback was triggered by a deep mutation:"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({ count:0})watch(()=>state,(newValue,oldValue)=>{// newValue === oldValue},{ deep:true})"
                },
                {
                    "type": "p",
                    "text": "When directly watching a reactive object, the watcher is automatically in deep mode:"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({ count:0})watch(state, ()=>{/* triggers on deep mutation to state */})"
                },
                {
                    "type": "p",
                    "text": "watch()shares the same flush timing and debugging options withwatchEffect():"
                },
                {
                    "type": "code",
                    "code": "watch(source, callback, {flush:'post',onTrack(e) {debugger},onTrigger(e) {debugger}})"
                },
                {
                    "type": "p",
                    "text": "Stopping the watcher:"
                },
                {
                    "type": "code",
                    "code": "conststop=watch(source, callback)// when the watcher is no longer needed:stop()"
                },
                {
                    "type": "p",
                    "text": "Pausing / resuming the watcher:"
                },
                {
                    "type": "code",
                    "code": "const{stop,pause,resume}=watch(()=>{})// temporarily pause the watcherpause()// resume laterresume()// stopstop()"
                },
                {
                    "type": "p",
                    "text": "Side effect cleanup:"
                },
                {
                    "type": "code",
                    "code": "watch(id,async(newId,oldId,onCleanup)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonCleanup(cancel)data.value=awaitresponse})"
                },
                {
                    "type": "p",
                    "text": "Side effect cleanup in 3.5+:"
                },
                {
                    "type": "code",
                    "code": "import{ onWatcherCleanup }from'vue'watch(id,async(newId)=>{const{response,cancel}=doAsyncWork(newId)onWatcherCleanup(cancel)data.value=awaitresponse})"
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Watchers",
                        "Guide - Watcher Debugging"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "onWatcherCleanup()​"
                },
                {
                    "type": "p",
                    "text": "Register a cleanup function to be executed when the current watcher is about to re-run. Can only be called during the synchronous execution of awatchEffecteffect function orwatchcallback function (i.e. it cannot be called after anawaitstatement in an async function.)"
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiononWatcherCleanup(cleanupFn:()=>void,failSilently?:boolean):void",
                        "Exampletsimport{ watch, onWatcherCleanup }from'vue'watch(id, (newId)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonWatcherCleanup(cancel)})"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiononWatcherCleanup(cleanupFn:()=>void,failSilently?:boolean):void"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ watch, onWatcherCleanup }from'vue'watch(id, (newId)=>{const{response,cancel}=doAsyncWork(newId)// `cancel` will be called if `id` changes, cancelling// the previous request if it hasn't completed yetonWatcherCleanup(cancel)})"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/reactivity-utilities",
            "title": "Reactivity API: Utilities | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity API: Utilities​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isRef()​"
                },
                {
                    "type": "p",
                    "text": "Checks if a value is a ref object."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionisRef<T>(r:Ref<T>|unknown):risRef<T>Note the return type is atype predicate, which meansisRefcan be used as a type guard:tsletfoo:unknownif(isRef(foo)) {// foo's type is narrowed to Ref<unknown>foo.value}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionisRef<T>(r:Ref<T>|unknown):risRef<T>"
                },
                {
                    "type": "p",
                    "text": "Note the return type is atype predicate, which meansisRefcan be used as a type guard:"
                },
                {
                    "type": "code",
                    "code": "letfoo:unknownif(isRef(foo)) {// foo's type is narrowed to Ref<unknown>foo.value}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "unref()​"
                },
                {
                    "type": "p",
                    "text": "Returns the inner value if the argument is a ref, otherwise return the argument itself. This is a sugar function forval = isRef(val) ? val.value : val."
                },
                {
                    "type": "list",
                    "items": [
                        "Typetsfunctionunref<T>(ref:T|Ref<T>):T",
                        "ExampletsfunctionuseFoo(x:number|Ref<number>) {constunwrapped=unref(x)// unwrapped is guaranteed to be number now}"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionunref<T>(ref:T|Ref<T>):T"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "functionuseFoo(x:number|Ref<number>) {constunwrapped=unref(x)// unwrapped is guaranteed to be number now}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "toRef()​"
                },
                {
                    "type": "p",
                    "text": "Can be used to normalize values / refs / getters into refs (3.3+)."
                },
                {
                    "type": "p",
                    "text": "Can also be used to create a ref for a property on a source reactive object. The created ref is synced with its source property: mutating the source property will update the ref, and vice-versa."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// normalization signature (3.3+)functiontoRef<T>(value:T):Textends()=>inferR?Readonly<Ref<R>>:TextendsRef?T:Ref<UnwrapRef<T>>// object property signaturefunctiontoRef<Textendsobject,KextendskeyofT>(object:T,key:K,defaultValue?:T[K]):ToRef<T[K]>typeToRef<T>=TextendsRef?T:Ref<T>",
                        "ExampleNormalization signature (3.3+):js// returns existing refs as-istoRef(existingRef)// creates a readonly ref that calls the getter on .value accesstoRef(()=>props.foo)// creates normal refs from non-function values// equivalent to ref(1)toRef(1)Object property signature:jsconststate=reactive({foo:1,bar:2})// a two-way ref that syncs with the original propertyconstfooRef=toRef(state,'foo')// mutating the ref updates the originalfooRef.value++console.log(state.foo)// 2// mutating the original also updates the refstate.foo++console.log(fooRef.value)// 3Note this is different from:jsconstfooRef=ref(state.foo)The above ref isnotsynced withstate.foo, because theref()receives a plain number value.toRef()is useful when you want to pass the ref of a prop to a composable function:vue<scriptsetup>import{ toRef }from'vue'constprops=defineProps(/* ... */)// convert `props.foo` into a ref, then pass into// a composableuseSomeFeature(toRef(props,'foo'))// getter syntax - recommended in 3.3+useSomeFeature(toRef(()=>props.foo))</script>WhentoRefis used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider usingcomputedwithgetandsetinstead. See the guide tousingv-modelwith componentsfor more information.When using the object property signature,toRef()will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up bytoRefs."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// normalization signature (3.3+)functiontoRef<T>(value:T):Textends()=>inferR?Readonly<Ref<R>>:TextendsRef?T:Ref<UnwrapRef<T>>// object property signaturefunctiontoRef<Textendsobject,KextendskeyofT>(object:T,key:K,defaultValue?:T[K]):ToRef<T[K]>typeToRef<T>=TextendsRef?T:Ref<T>"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Normalization signature (3.3+):"
                },
                {
                    "type": "code",
                    "code": "// returns existing refs as-istoRef(existingRef)// creates a readonly ref that calls the getter on .value accesstoRef(()=>props.foo)// creates normal refs from non-function values// equivalent to ref(1)toRef(1)"
                },
                {
                    "type": "p",
                    "text": "Object property signature:"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({foo:1,bar:2})// a two-way ref that syncs with the original propertyconstfooRef=toRef(state,'foo')// mutating the ref updates the originalfooRef.value++console.log(state.foo)// 2// mutating the original also updates the refstate.foo++console.log(fooRef.value)// 3"
                },
                {
                    "type": "p",
                    "text": "Note this is different from:"
                },
                {
                    "type": "code",
                    "code": "constfooRef=ref(state.foo)"
                },
                {
                    "type": "p",
                    "text": "The above ref isnotsynced withstate.foo, because theref()receives a plain number value."
                },
                {
                    "type": "p",
                    "text": "toRef()is useful when you want to pass the ref of a prop to a composable function:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ toRef }from'vue'constprops=defineProps(/* ... */)// convert `props.foo` into a ref, then pass into// a composableuseSomeFeature(toRef(props,'foo'))// getter syntax - recommended in 3.3+useSomeFeature(toRef(()=>props.foo))</script>"
                },
                {
                    "type": "p",
                    "text": "WhentoRefis used with component props, the usual restrictions around mutating the props still apply. Attempting to assign a new value to the ref is equivalent to trying to modify the prop directly and is not allowed. In that scenario you may want to consider usingcomputedwithgetandsetinstead. See the guide tousingv-modelwith componentsfor more information."
                },
                {
                    "type": "p",
                    "text": "When using the object property signature,toRef()will return a usable ref even if the source property doesn't currently exist. This makes it possible to work with optional properties, which wouldn't be picked up bytoRefs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "toValue()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Normalizes values / refs / getters to values. This is similar tounref(), except that it also normalizes getters. If the argument is a getter, it will be invoked and its return value will be returned."
                },
                {
                    "type": "p",
                    "text": "This can be used inComposablesto normalize an argument that can be either a value, a ref, or a getter."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiontoValue<T>(source:T|Ref<T>|(()=>T)):T",
                        "ExamplejstoValue(1)//       --> 1toValue(ref(1))//  --> 1toValue(()=>1)// --> 1Normalizing arguments in composables:tsimporttype{ MaybeRefOrGetter }from'vue'functionuseFeature(id:MaybeRefOrGetter<number>) {watch(()=>toValue(id),id=>{// react to id changes})}// this composable supports any of the following:useFeature(1)useFeature(ref(1))useFeature(()=>1)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiontoValue<T>(source:T|Ref<T>|(()=>T)):T"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "toValue(1)//       --> 1toValue(ref(1))//  --> 1toValue(()=>1)// --> 1"
                },
                {
                    "type": "p",
                    "text": "Normalizing arguments in composables:"
                },
                {
                    "type": "code",
                    "code": "importtype{ MaybeRefOrGetter }from'vue'functionuseFeature(id:MaybeRefOrGetter<number>) {watch(()=>toValue(id),id=>{// react to id changes})}// this composable supports any of the following:useFeature(1)useFeature(ref(1))useFeature(()=>1)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "toRefs()​"
                },
                {
                    "type": "p",
                    "text": "Converts a reactive object to a plain object where each property of the resulting object is a ref pointing to the corresponding property of the original object. Each individual ref is created usingtoRef()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctiontoRefs<Textendsobject>(object:T):{[KinkeyofT]:ToRef<T[K]>}typeToRef=TextendsRef?T:Ref<T>",
                        "Examplejsconststate=reactive({foo:1,bar:2})conststateAsRefs=toRefs(state)/*Type of stateAsRefs: {foo: Ref<number>,bar: Ref<number>}*/// The ref and the original property is \"linked\"state.foo++console.log(stateAsRefs.foo.value)// 2stateAsRefs.foo.value++console.log(state.foo)// 3toRefsis useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:jsfunctionuseFeatureX() {conststate=reactive({foo:1,bar:2})// ...logic operating on state// convert to refs when returningreturntoRefs(state)}// can destructure without losing reactivityconst{foo,bar}=useFeatureX()toRefswill only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, usetoRefinstead."
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functiontoRefs<Textendsobject>(object:T):{[KinkeyofT]:ToRef<T[K]>}typeToRef=TextendsRef?T:Ref<T>"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({foo:1,bar:2})conststateAsRefs=toRefs(state)/*Type of stateAsRefs: {foo: Ref<number>,bar: Ref<number>}*/// The ref and the original property is \"linked\"state.foo++console.log(stateAsRefs.foo.value)// 2stateAsRefs.foo.value++console.log(state.foo)// 3"
                },
                {
                    "type": "p",
                    "text": "toRefsis useful when returning a reactive object from a composable function so that the consuming component can destructure/spread the returned object without losing reactivity:"
                },
                {
                    "type": "code",
                    "code": "functionuseFeatureX() {conststate=reactive({foo:1,bar:2})// ...logic operating on state// convert to refs when returningreturntoRefs(state)}// can destructure without losing reactivityconst{foo,bar}=useFeatureX()"
                },
                {
                    "type": "p",
                    "text": "toRefswill only generate refs for properties that are enumerable on the source object at call time. To create a ref for a property that may not exist yet, usetoRefinstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isProxy()​"
                },
                {
                    "type": "p",
                    "text": "Checks if an object is a proxy created byreactive(),readonly(),shallowReactive()orshallowReadonly()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionisProxy(value:any):boolean"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionisProxy(value:any):boolean"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isReactive()​"
                },
                {
                    "type": "p",
                    "text": "Checks if an object is a proxy created byreactive()orshallowReactive()."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionisReactive(value:unknown):boolean"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionisReactive(value:unknown):boolean"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isReadonly()​"
                },
                {
                    "type": "p",
                    "text": "Checks whether the passed value is a readonly object. The properties of a readonly object can change, but they can't be assigned directly via the passed object."
                },
                {
                    "type": "p",
                    "text": "The proxies created byreadonly()andshallowReadonly()are both considered readonly, as is acomputed()ref without asetfunction."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionisReadonly(value:unknown):boolean"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionisReadonly(value:unknown):boolean"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/render-function#h",
            "title": "Render Function APIs | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Render Function APIs​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "h()​"
                },
                {
                    "type": "p",
                    "text": "Creates virtual DOM nodes (vnodes)."
                },
                {
                    "type": "list",
                    "items": [
                        "Typets// full signaturefunctionh(type:string|Component,props?:object|null,children?:Children|Slot|Slots):VNode// omitting propsfunctionh(type:string|Component,children?:Children|Slot):VNodetypeChildren=string|number|boolean|VNode|null|Children[]typeSlot=()=>ChildrentypeSlots={ [name:string]:Slot}Types are simplified for readability.",
                        "DetailsThe first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children.When creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions.For convenience, the props argument can be omitted when the children is not a slots object.",
                        "ExampleCreating native elements:jsimport{ h }from'vue'// all arguments except the type are optionalh('div')h('div', { id:'foo'})// both attributes and properties can be used in props// Vue automatically picks the right way to assign ith('div', { class:'bar', innerHTML:'hello'})// class and style have the same object / array// value support like in templatesh('div', { class: [foo, { bar }], style: { color:'red'} })// event listeners should be passed as onXxxh('div', {onClick: ()=>{} })// children can be a stringh('div', { id:'foo'},'hello')// props can be omitted when there are no propsh('div','hello')h('div', [h('span','hello')])// children array can contain mixed vnodes and stringsh('div', ['hello',h('span','hello')])Creating components:jsimportFoofrom'./Foo.vue'// passing propsh(Foo, {// equivalent of some-prop=\"hello\"someProp:'hello',// equivalent of @update=\"() => {}\"onUpdate: ()=>{}})// passing single default sloth(Foo, ()=>'default slot')// passing named slots// notice the `null` is required to avoid// slots object being treated as propsh(MyComponent,null, {default: ()=>'default slot',foo: ()=>h('div','foo'),bar: ()=>[h('span','one'),h('span','two')]})",
                        "See alsoGuide - Render Functions - Creating VNodes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "// full signaturefunctionh(type:string|Component,props?:object|null,children?:Children|Slot|Slots):VNode// omitting propsfunctionh(type:string|Component,children?:Children|Slot):VNodetypeChildren=string|number|boolean|VNode|null|Children[]typeSlot=()=>ChildrentypeSlots={ [name:string]:Slot}"
                },
                {
                    "type": "p",
                    "text": "Types are simplified for readability."
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "The first argument can either be a string (for native elements) or a Vue component definition. The second argument is the props to be passed, and the third argument is the children."
                },
                {
                    "type": "p",
                    "text": "When creating a component vnode, the children must be passed as slot functions. A single slot function can be passed if the component expects only the default slot. Otherwise, the slots must be passed as an object of slot functions."
                },
                {
                    "type": "p",
                    "text": "For convenience, the props argument can be omitted when the children is not a slots object."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Creating native elements:"
                },
                {
                    "type": "code",
                    "code": "import{ h }from'vue'// all arguments except the type are optionalh('div')h('div', { id:'foo'})// both attributes and properties can be used in props// Vue automatically picks the right way to assign ith('div', { class:'bar', innerHTML:'hello'})// class and style have the same object / array// value support like in templatesh('div', { class: [foo, { bar }], style: { color:'red'} })// event listeners should be passed as onXxxh('div', {onClick: ()=>{} })// children can be a stringh('div', { id:'foo'},'hello')// props can be omitted when there are no propsh('div','hello')h('div', [h('span','hello')])// children array can contain mixed vnodes and stringsh('div', ['hello',h('span','hello')])"
                },
                {
                    "type": "p",
                    "text": "Creating components:"
                },
                {
                    "type": "code",
                    "code": "importFoofrom'./Foo.vue'// passing propsh(Foo, {// equivalent of some-prop=\"hello\"someProp:'hello',// equivalent of @update=\"() => {}\"onUpdate: ()=>{}})// passing single default sloth(Foo, ()=>'default slot')// passing named slots// notice the `null` is required to avoid// slots object being treated as propsh(MyComponent,null, {default: ()=>'default slot',foo: ()=>h('div','foo'),bar: ()=>[h('span','one'),h('span','two')]})"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Render Functions - Creating VNodes"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "mergeProps()​"
                },
                {
                    "type": "p",
                    "text": "Merge multiple props objects with special handling for certain props."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionmergeProps(...args:object[]):object",
                        "DetailsmergeProps()supports merging multiple props objects with special handling for the following props:classstyleonXxxevent listeners - multiple listeners with the same name will be merged into an array.If you do not need the merge behavior and want simple overwrites, native object spread can be used instead.",
                        "class",
                        "style",
                        "onXxxevent listeners - multiple listeners with the same name will be merged into an array.",
                        "Examplejsimport{ mergeProps }from'vue'constone={class:'foo',onClick: handlerA}consttwo={class: { bar:true},onClick: handlerB}constmerged=mergeProps(one, two)/**{class: 'foo bar',onClick: [handlerA, handlerB]}*/"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionmergeProps(...args:object[]):object"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "mergeProps()supports merging multiple props objects with special handling for the following props:"
                },
                {
                    "type": "list",
                    "items": [
                        "class",
                        "style",
                        "onXxxevent listeners - multiple listeners with the same name will be merged into an array."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you do not need the merge behavior and want simple overwrites, native object spread can be used instead."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ mergeProps }from'vue'constone={class:'foo',onClick: handlerA}consttwo={class: { bar:true},onClick: handlerB}constmerged=mergeProps(one, two)/**{class: 'foo bar',onClick: [handlerA, handlerB]}*/"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "cloneVNode()​"
                },
                {
                    "type": "p",
                    "text": "Clones a vnode."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctioncloneVNode(vnode:VNode,extraProps?:object):VNode",
                        "DetailsReturns a cloned vnode, optionally with extra props to merge with the original.Vnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props.Vnodes have special internal properties, so cloning them is not as simple as an object spread.cloneVNode()handles most of the internal logic.",
                        "Examplejsimport{ h, cloneVNode }from'vue'constoriginal=h('div')constcloned=cloneVNode(original, { id:'foo'})"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functioncloneVNode(vnode:VNode,extraProps?:object):VNode"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Returns a cloned vnode, optionally with extra props to merge with the original."
                },
                {
                    "type": "p",
                    "text": "Vnodes should be considered immutable once created, and you should not mutate the props of an existing vnode. Instead, clone it with different / extra props."
                },
                {
                    "type": "p",
                    "text": "Vnodes have special internal properties, so cloning them is not as simple as an object spread.cloneVNode()handles most of the internal logic."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ h, cloneVNode }from'vue'constoriginal=h('div')constcloned=cloneVNode(original, { id:'foo'})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "isVNode()​"
                },
                {
                    "type": "p",
                    "text": "Checks if a value is a vnode."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionisVNode(value:unknown):boolean"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionisVNode(value:unknown):boolean"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "resolveComponent()​"
                },
                {
                    "type": "p",
                    "text": "For manually resolving a registered component by name."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionresolveComponent(name:string):Component|string",
                        "DetailsNote: you do not need this if you can import the component directly.resolveComponent()must be called insideeithersetup()orthe render function in order to resolve from the correct component context.If the component is not found, a runtime warning will be emitted, and the name string is returned.",
                        "Examplejsimport{ h, resolveComponent }from'vue'exportdefault{setup() {constButtonCounter=resolveComponent('ButtonCounter')return()=>{returnh(ButtonCounter)}}}jsimport{ h, resolveComponent }from'vue'exportdefault{render() {constButtonCounter=resolveComponent('ButtonCounter')returnh(ButtonCounter)}}",
                        "See alsoGuide - Render Functions - Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionresolveComponent(name:string):Component|string"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Note: you do not need this if you can import the component directly."
                },
                {
                    "type": "p",
                    "text": "resolveComponent()must be called insideeithersetup()orthe render function in order to resolve from the correct component context."
                },
                {
                    "type": "p",
                    "text": "If the component is not found, a runtime warning will be emitted, and the name string is returned."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ h, resolveComponent }from'vue'exportdefault{setup() {constButtonCounter=resolveComponent('ButtonCounter')return()=>{returnh(ButtonCounter)}}}"
                },
                {
                    "type": "code",
                    "code": "import{ h, resolveComponent }from'vue'exportdefault{render() {constButtonCounter=resolveComponent('ButtonCounter')returnh(ButtonCounter)}}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Render Functions - Components"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "resolveDirective()​"
                },
                {
                    "type": "p",
                    "text": "For manually resolving a registered directive by name."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionresolveDirective(name:string):Directive|undefined",
                        "DetailsNote: you do not need this if you can import the directive directly.resolveDirective()must be called insideeithersetup()orthe render function in order to resolve from the correct component context.If the directive is not found, a runtime warning will be emitted, and the function returnsundefined.",
                        "See alsoGuide - Render Functions - Custom Directives"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionresolveDirective(name:string):Directive|undefined"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Note: you do not need this if you can import the directive directly."
                },
                {
                    "type": "p",
                    "text": "resolveDirective()must be called insideeithersetup()orthe render function in order to resolve from the correct component context."
                },
                {
                    "type": "p",
                    "text": "If the directive is not found, a runtime warning will be emitted, and the function returnsundefined."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Render Functions - Custom Directives"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "withDirectives()​"
                },
                {
                    "type": "p",
                    "text": "For adding custom directives to vnodes."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionwithDirectives(vnode:VNode,directives:DirectiveArguments):VNode// [Directive, value, argument, modifiers]typeDirectiveArguments=Array<|[Directive]|[Directive,any]|[Directive,any,string]|[Directive,any,string,DirectiveModifiers]>",
                        "DetailsWraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of[Directive, value, argument, modifiers]. Tailing elements of the array can be omitted if not needed.",
                        "Examplejsimport{ h, withDirectives }from'vue'// a custom directiveconstpin={mounted() {/* ... */},updated() {/* ... */}}// <div v-pin:top.animate=\"200\"></div>constvnode=withDirectives(h('div'), [[pin,200,'top', { animate:true}]])",
                        "See alsoGuide - Render Functions - Custom Directives"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionwithDirectives(vnode:VNode,directives:DirectiveArguments):VNode// [Directive, value, argument, modifiers]typeDirectiveArguments=Array<|[Directive]|[Directive,any]|[Directive,any,string]|[Directive,any,string,DirectiveModifiers]>"
                },
                {
                    "type": "p",
                    "text": "Details"
                },
                {
                    "type": "p",
                    "text": "Wraps an existing vnode with custom directives. The second argument is an array of custom directives. Each custom directive is also represented as an array in the form of[Directive, value, argument, modifiers]. Tailing elements of the array can be omitted if not needed."
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ h, withDirectives }from'vue'// a custom directiveconstpin={mounted() {/* ... */},updated() {/* ... */}}// <div v-pin:top.animate=\"200\"></div>constvnode=withDirectives(h('div'), [[pin,200,'top', { animate:true}]])"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Render Functions - Custom Directives"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "withModifiers()​"
                },
                {
                    "type": "p",
                    "text": "For adding built-inv-onmodifiersto an event handler function."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionwithModifiers(fn:Function,modifiers:ModifierGuardsKeys[]):Function",
                        "Examplejsimport{ h, withModifiers }from'vue'constvnode=h('button', {// equivalent of v-on:click.stop.preventonClick:withModifiers(()=>{// ...}, ['stop','prevent'])})",
                        "See alsoGuide - Render Functions - Event Modifiers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionwithModifiers(fn:Function,modifiers:ModifierGuardsKeys[]):Function"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ h, withModifiers }from'vue'constvnode=h('button', {// equivalent of v-on:click.stop.preventonClick:withModifiers(()=>{// ...}, ['stop','prevent'])})"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Render Functions - Event Modifiers"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/sfc-css-features#scoped-css",
            "title": "SFC CSS Features | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "SFC CSS Features​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Scoped CSS​"
                },
                {
                    "type": "p",
                    "text": "When a<style>tag has thescopedattribute, its CSS will apply to elements of the current component only. This is similar to the style encapsulation found in Shadow DOM. It comes with some caveats, but doesn't require any polyfills. It is achieved by using PostCSS to transform the following:"
                },
                {
                    "type": "code",
                    "code": "<stylescoped>.example{color:red;}</style><template><divclass=\"example\">hi</div></template>"
                },
                {
                    "type": "p",
                    "text": "Into the following:"
                },
                {
                    "type": "code",
                    "code": "<style>.example[data-v-f3f3eg9] {color:red;}</style><template><divclass=\"example\"data-v-f3f3eg9>hi</div></template>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Child Component Root Elements​"
                },
                {
                    "type": "p",
                    "text": "Withscoped, the parent component's styles will not leak into child components. However, a child component's root node will be affected by both the parent's scoped CSS and the child's scoped CSS. This is by design so that the parent can style the child root element for layout purposes."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Deep Selectors​"
                },
                {
                    "type": "p",
                    "text": "If you want a selector inscopedstyles to be \"deep\", i.e. affecting child components, you can use the:deep()pseudo-class:"
                },
                {
                    "type": "code",
                    "code": "<stylescoped>.a:deep(.b) {/* ... */}</style>"
                },
                {
                    "type": "p",
                    "text": "The above will be compiled into:"
                },
                {
                    "type": "code",
                    "code": ".a[data-v-f3f3eg9].b{/* ... */}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "DOM content created withv-htmlare not affected by scoped styles, but you can still style them using deep selectors."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Slotted Selectors​"
                },
                {
                    "type": "p",
                    "text": "By default, scoped styles do not affect contents rendered by<slot/>, as they are considered to be owned by the parent component passing them in. To explicitly target slot content, use the:slottedpseudo-class:"
                },
                {
                    "type": "code",
                    "code": "<stylescoped>:slotted(div) {color:red;}</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Global Selectors​"
                },
                {
                    "type": "p",
                    "text": "If you want just one rule to apply globally, you can use the:globalpseudo-class rather than creating another<style>(see below):"
                },
                {
                    "type": "code",
                    "code": "<stylescoped>:global(.red) {color:red;}</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Mixing Local and Global Styles​"
                },
                {
                    "type": "p",
                    "text": "You can also include both scoped and non-scoped styles in the same component:"
                },
                {
                    "type": "code",
                    "code": "<style>/* global styles */</style><stylescoped>/* local styles */</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Scoped Style Tips​"
                },
                {
                    "type": "list",
                    "items": [
                        "Scoped styles do not eliminate the need for classes. Due to the way browsers render various CSS selectors,p { color: red }will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in.example { color: red }, then you virtually eliminate that performance hit.",
                        "Be careful with descendant selectors in recursive components!For a CSS rule with the selector.a .b, if the element that matches.acontains a recursive child component, then all.bin that child component will be matched by the rule."
                    ]
                },
                {
                    "type": "p",
                    "text": "Scoped styles do not eliminate the need for classes. Due to the way browsers render various CSS selectors,p { color: red }will be many times slower when scoped (i.e. when combined with an attribute selector). If you use classes or ids instead, such as in.example { color: red }, then you virtually eliminate that performance hit."
                },
                {
                    "type": "p",
                    "text": "Be careful with descendant selectors in recursive components!For a CSS rule with the selector.a .b, if the element that matches.acontains a recursive child component, then all.bin that child component will be matched by the rule."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSS Modules​"
                },
                {
                    "type": "p",
                    "text": "A<style module>tag is compiled asCSS Modulesand exposes the resulting CSS classes to the component as an object under the key of$style:"
                },
                {
                    "type": "code",
                    "code": "<template><p:class=\"$style.red\">This should be red</p></template><stylemodule>.red{color:red;}</style>"
                },
                {
                    "type": "p",
                    "text": "The resulting classes are hashed to avoid collision, achieving the same effect of scoping the CSS to the current component only."
                },
                {
                    "type": "p",
                    "text": "Refer to theCSS Modules specfor more details such asglobal exceptionsandcomposition."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Inject Name​"
                },
                {
                    "type": "p",
                    "text": "You can customize the property key of the injected classes object by giving themoduleattribute a value:"
                },
                {
                    "type": "code",
                    "code": "<template><p:class=\"classes.red\">red</p></template><stylemodule=\"classes\">.red{color:red;}</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usage with Composition API​"
                },
                {
                    "type": "p",
                    "text": "The injected classes can be accessed insetup()and<script setup>via theuseCssModuleAPI. For<style module>blocks with custom injection names,useCssModuleaccepts the matchingmoduleattribute value as the first argument:"
                },
                {
                    "type": "code",
                    "code": "import{ useCssModule }from'vue'// inside setup() scope...// default, returns classes for <style module>useCssModule()// named, returns classes for <style module=\"classes\">useCssModule('classes')"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-bind()in CSS​"
                },
                {
                    "type": "p",
                    "text": "SFC<style>tags support linking CSS values to dynamic component state using thev-bindCSS function:"
                },
                {
                    "type": "code",
                    "code": "<template><divclass=\"text\">hello</div></template><script>exportdefault{data() {return{color:'red'}}}</script><style>.text{color: v-bind(color);}</style>"
                },
                {
                    "type": "p",
                    "text": "The syntax works with<script setup>, and supports JavaScript expressions (must be wrapped in quotes):"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'consttheme=ref({color:'red',})</script><template><p>hello</p></template><stylescoped>p{color: v-bind('theme.color');}</style>"
                },
                {
                    "type": "p",
                    "text": "The actual value will be compiled into a hashed CSS custom property, so the CSS is still static. The custom property will be applied to the component's root element via inline styles and reactively updated if the source value changes."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/sfc-script-setup",
            "title": "<script setup> | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "<script setup>​"
                },
                {
                    "type": "p",
                    "text": "<script setup>is a compile-time syntactic sugar for using Composition API inside Single-File Components (SFCs). It is the recommended syntax if you are using both SFCs and Composition API. It provides a number of advantages over the normal<script>syntax:"
                },
                {
                    "type": "list",
                    "items": [
                        "More succinct code with less boilerplate",
                        "Ability to declare props and emitted events using pure TypeScript",
                        "Better runtime performance (the template is compiled into a render function in the same scope, without an intermediate proxy)",
                        "Better IDE type-inference performance (less work for the language server to extract types from code)"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Syntax​"
                },
                {
                    "type": "p",
                    "text": "To opt-in to the syntax, add thesetupattribute to the<script>block:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>console.log('hello script setup')</script>"
                },
                {
                    "type": "p",
                    "text": "The code inside is compiled as the content of the component'ssetup()function. This means that unlike normal<script>, which only executes once when the component is first imported, code inside<script setup>willexecute every time an instance of the component is created."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Top-level bindings are exposed to template​"
                },
                {
                    "type": "p",
                    "text": "When using<script setup>, any top-level bindings (including variables, function declarations, and imports) declared inside<script setup>are directly usable in the template:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>// variableconstmsg='Hello!'// functionsfunctionlog() {console.log(msg)}</script><template><button@click=\"log\">{{ msg }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Imports are exposed in the same fashion. This means you can directly use an imported helper function in template expressions without having to expose it via themethodsoption:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ capitalize }from'./helpers'</script><template><div>{{ capitalize('hello') }}</div></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reactivity​"
                },
                {
                    "type": "p",
                    "text": "Reactive state needs to be explicitly created usingReactivity APIs. Similar to values returned from asetup()function, refs are automatically unwrapped when referenced in templates:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)</script><template><button@click=\"count++\">{{ count }}</button></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Components​"
                },
                {
                    "type": "p",
                    "text": "Values in the scope of<script setup>can also be used directly as custom component tag names:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>importMyComponentfrom'./MyComponent.vue'</script><template><MyComponent/></template>"
                },
                {
                    "type": "p",
                    "text": "Think ofMyComponentas being referenced as a variable. If you have used JSX, the mental model is similar here. The kebab-case equivalent<my-component>also works in the template - however PascalCase component tags are strongly recommended for consistency. It also helps differentiating from native custom elements."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Components​"
                },
                {
                    "type": "p",
                    "text": "Since components are referenced as variables instead of registered under string keys, we should use dynamic:isbinding when using dynamic components inside<script setup>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'</script><template><component:is=\"Foo\"/><component:is=\"someCondition ? Foo : Bar\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Note how the components can be used as variables in a ternary expression."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recursive Components​"
                },
                {
                    "type": "p",
                    "text": "An SFC can implicitly refer to itself via its filename. E.g. a file namedFooBar.vuecan refer to itself as<FooBar/>in its template."
                },
                {
                    "type": "p",
                    "text": "Note this has lower priority than imported components. If you have a named import that conflicts with the component's inferred name, you can alias the import:"
                },
                {
                    "type": "code",
                    "code": "import{ FooBarasFooBarChild }from'./components'"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Namespaced Components​"
                },
                {
                    "type": "p",
                    "text": "You can use component tags with dots like<Foo.Bar>to refer to components nested under object properties. This is useful when you import multiple components from a single file:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import*asFormfrom'./form-components'</script><template><Form.Input><Form.Label>label</Form.Label></Form.Input></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Custom Directives​"
                },
                {
                    "type": "p",
                    "text": "Globally registered custom directives just work as normal. Local custom directives don't need to be explicitly registered with<script setup>, but they must follow the naming schemevNameOfDirective:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constvMyDirective={beforeMount: (el)=>{// do something with the element}}</script><template><h1v-my-directive>This is a Heading</h1></template>"
                },
                {
                    "type": "p",
                    "text": "If you're importing a directive from elsewhere, it can be renamed to fit the required naming scheme:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ myDirectiveasvMyDirective }from'./MyDirective.js'</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineProps() & defineEmits()​"
                },
                {
                    "type": "p",
                    "text": "To declare options likepropsandemitswith full type inference support, we can use thedefinePropsanddefineEmitsAPIs, which are automatically available inside<script setup>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constprops=defineProps({foo: String})constemit=defineEmits(['change','delete'])// setup code</script>"
                },
                {
                    "type": "list",
                    "items": [
                        "definePropsanddefineEmitsarecompiler macrosonly usable inside<script setup>. They do not need to be imported, and are compiled away when<script setup>is processed.",
                        "definePropsaccepts the same value as thepropsoption, whiledefineEmitsaccepts the same value as theemitsoption.",
                        "definePropsanddefineEmitsprovide proper type inference based on the options passed.",
                        "The options passed todefinePropsanddefineEmitswill be hoisted out of setup into module scope. Therefore, the options cannot reference local variables declared in setup scope. Doing so will result in a compile error. However, itcanreference imported bindings since they are in the module scope as well."
                    ]
                },
                {
                    "type": "p",
                    "text": "definePropsanddefineEmitsarecompiler macrosonly usable inside<script setup>. They do not need to be imported, and are compiled away when<script setup>is processed."
                },
                {
                    "type": "p",
                    "text": "definePropsaccepts the same value as thepropsoption, whiledefineEmitsaccepts the same value as theemitsoption."
                },
                {
                    "type": "p",
                    "text": "definePropsanddefineEmitsprovide proper type inference based on the options passed."
                },
                {
                    "type": "p",
                    "text": "The options passed todefinePropsanddefineEmitswill be hoisted out of setup into module scope. Therefore, the options cannot reference local variables declared in setup scope. Doing so will result in a compile error. However, itcanreference imported bindings since they are in the module scope as well."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Type-only props/emit declarations​"
                },
                {
                    "type": "p",
                    "text": "Props and emits can also be declared using pure-type syntax by passing a literal type argument todefinePropsordefineEmits:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps<{foo:stringbar?:number}>()constemit=defineEmits<{(e:'change',id:number):void(e:'update',value:string):void}>()// 3.3+: alternative, more succinct syntaxconstemit=defineEmits<{change:[id:number]// named tuple syntaxupdate:[value:string]}>()"
                },
                {
                    "type": "list",
                    "items": [
                        "definePropsordefineEmitscan only use either runtime declaration OR type declaration. Using both at the same time will result in a compile error.",
                        "When using type declaration, the equivalent runtime declaration is automatically generated from static analysis to remove the need for double declaration and still ensure correct runtime behavior.In dev mode, the compiler will try to infer corresponding runtime validation from the types. For example herefoo: Stringis inferred from thefoo: stringtype. If the type is a reference to an imported type, the inferred result will befoo: null(equal toanytype) since the compiler does not have information of external files.In prod mode, the compiler will generate the array format declaration to reduce bundle size (the props here will be compiled into['foo', 'bar'])",
                        "In dev mode, the compiler will try to infer corresponding runtime validation from the types. For example herefoo: Stringis inferred from thefoo: stringtype. If the type is a reference to an imported type, the inferred result will befoo: null(equal toanytype) since the compiler does not have information of external files.",
                        "In prod mode, the compiler will generate the array format declaration to reduce bundle size (the props here will be compiled into['foo', 'bar'])",
                        "In version 3.2 and below, the generic type parameter fordefineProps()were limited to a type literal or a reference to a local interface.This limitation has been resolved in 3.3. The latest version of Vue supports referencing imported and a limited set of complex types in the type parameter position. However, because the type to runtime conversion is still AST-based, some complex types that require actual type analysis, e.g. conditional types, are not supported. You can use conditional types for the type of a single prop, but not the entire props object."
                    ]
                },
                {
                    "type": "p",
                    "text": "definePropsordefineEmitscan only use either runtime declaration OR type declaration. Using both at the same time will result in a compile error."
                },
                {
                    "type": "p",
                    "text": "When using type declaration, the equivalent runtime declaration is automatically generated from static analysis to remove the need for double declaration and still ensure correct runtime behavior."
                },
                {
                    "type": "list",
                    "items": [
                        "In dev mode, the compiler will try to infer corresponding runtime validation from the types. For example herefoo: Stringis inferred from thefoo: stringtype. If the type is a reference to an imported type, the inferred result will befoo: null(equal toanytype) since the compiler does not have information of external files.",
                        "In prod mode, the compiler will generate the array format declaration to reduce bundle size (the props here will be compiled into['foo', 'bar'])"
                    ]
                },
                {
                    "type": "p",
                    "text": "In dev mode, the compiler will try to infer corresponding runtime validation from the types. For example herefoo: Stringis inferred from thefoo: stringtype. If the type is a reference to an imported type, the inferred result will befoo: null(equal toanytype) since the compiler does not have information of external files."
                },
                {
                    "type": "p",
                    "text": "In prod mode, the compiler will generate the array format declaration to reduce bundle size (the props here will be compiled into['foo', 'bar'])"
                },
                {
                    "type": "p",
                    "text": "In version 3.2 and below, the generic type parameter fordefineProps()were limited to a type literal or a reference to a local interface."
                },
                {
                    "type": "p",
                    "text": "This limitation has been resolved in 3.3. The latest version of Vue supports referencing imported and a limited set of complex types in the type parameter position. However, because the type to runtime conversion is still AST-based, some complex types that require actual type analysis, e.g. conditional types, are not supported. You can use conditional types for the type of a single prop, but not the entire props object."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactive Props Destructure​"
                },
                {
                    "type": "p",
                    "text": "In Vue 3.5 and above, variables destructured from the return value ofdefinePropsare reactive. Vue's compiler automatically prependsprops.when code in the same<script setup>block accesses variables destructured fromdefineProps:"
                },
                {
                    "type": "code",
                    "code": "const{foo}=defineProps(['foo'])watchEffect(()=>{// runs only once before 3.5// re-runs when the \"foo\" prop changes in 3.5+console.log(foo)})"
                },
                {
                    "type": "p",
                    "text": "The above is compiled to the following equivalent:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['foo'])watchEffect(()=>{// `foo` transformed to `props.foo` by the compilerconsole.log(props.foo)})"
                },
                {
                    "type": "p",
                    "text": "In addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:"
                },
                {
                    "type": "code",
                    "code": "interfaceProps{msg?:stringlabels?:string[]}const{msg='hello',labels=['one','two'] }=defineProps<Props>()"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Default props values when using type declaration​"
                },
                {
                    "type": "p",
                    "text": "In 3.5 and above, default values can be naturally declared when using Reactive Props Destructure. But in 3.4 and below, Reactive Props Destructure is not enabled by default. In order to declare props default values with type-based declaration, thewithDefaultscompiler macro is needed:"
                },
                {
                    "type": "code",
                    "code": "interfaceProps{msg?:stringlabels?:string[]}constprops=withDefaults(defineProps<Props>(), {msg:'hello',labels: ()=>['one','two']})"
                },
                {
                    "type": "p",
                    "text": "This will be compiled to equivalent runtime propsdefaultoptions. In addition, thewithDefaultshelper provides type checks for the default values, and ensures the returnedpropstype has the optional flags removed for properties that do have default values declared."
                },
                {
                    "type": "p",
                    "text": "INFO"
                },
                {
                    "type": "p",
                    "text": "Note that default values for mutable reference types (like arrays or objects) should be wrapped in functions when usingwithDefaultsto avoid accidental modification and external side effects. This ensures each component instance gets its own copy of the default value. This isnotnecessary when using default values with destructure."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineModel()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only available in 3.4+"
                    ]
                },
                {
                    "type": "p",
                    "text": "This macro can be used to declare a two-way binding prop that can be consumed viav-modelfrom the parent component. Example usage is also discussed in theComponentv-modelguide."
                },
                {
                    "type": "p",
                    "text": "Under the hood, this macro declares a model prop and a corresponding value update event. If the first argument is a literal string, it will be used as the prop name; Otherwise the prop name will default to\"modelValue\". In both cases, you can also pass an additional object which can include the prop's options and the model ref's value transform options."
                },
                {
                    "type": "code",
                    "code": "// declares \"modelValue\" prop, consumed by parent via v-modelconstmodel=defineModel()// OR: declares \"modelValue\" prop with optionsconstmodel=defineModel({ type: String })// emits \"update:modelValue\" when mutatedmodel.value='hello'// declares \"count\" prop, consumed by parent via v-model:countconstcount=defineModel('count')// OR: declares \"count\" prop with optionsconstcount=defineModel('count', { type: Number, default:0})functioninc() {// emits \"update:count\" when mutatedcount.value++}"
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "If you have adefaultvalue fordefineModelprop and you don't provide any value for this prop from the parent component, it can cause a de-synchronization between parent and child components. In the example below, the parent'smyRefis undefined, but the child'smodelis 1:"
                },
                {
                    "type": "code",
                    "code": "// child component:constmodel=defineModel({ default:1})// parent component:constmyRef=ref()"
                },
                {
                    "type": "code",
                    "code": "<Childv-model=\"myRef\"></Child>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modifiers and Transformers​"
                },
                {
                    "type": "p",
                    "text": "To access modifiers used with thev-modeldirective, we can destructure the return value ofdefineModel()like this:"
                },
                {
                    "type": "code",
                    "code": "const[modelValue,modelModifiers]=defineModel()// corresponds to v-model.trimif(modelModifiers.trim) {// ...}"
                },
                {
                    "type": "p",
                    "text": "When a modifier is present, we likely need to transform the value when reading or syncing it back to the parent. We can achieve this by using thegetandsettransformer options:"
                },
                {
                    "type": "code",
                    "code": "const[modelValue,modelModifiers]=defineModel({// get() omitted as it is not needed hereset(value) {// if the .trim modifier is used, return trimmed valueif(modelModifiers.trim) {returnvalue.trim()}// otherwise, return the value as-isreturnvalue}})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usage with TypeScript​"
                },
                {
                    "type": "p",
                    "text": "LikedefinePropsanddefineEmits,defineModelcan also receive type arguments to specify the types of the model value and the modifiers:"
                },
                {
                    "type": "code",
                    "code": "constmodelValue=defineModel<string>()//    ^? Ref<string | undefined>// default model with options, required removes possible undefined valuesconstmodelValue=defineModel<string>({ required:true})//    ^? Ref<string>const[modelValue,modifiers]=defineModel<string,'trim'|'uppercase'>()//                 ^? Record<'trim' | 'uppercase', true | undefined>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineExpose()​"
                },
                {
                    "type": "p",
                    "text": "Components using<script setup>areclosed by default- i.e. the public instance of the component, which is retrieved via template refs or$parentchains, willnotexpose any of the bindings declared inside<script setup>."
                },
                {
                    "type": "p",
                    "text": "To explicitly expose properties in a<script setup>component, use thedefineExposecompiler macro:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'consta=1constb=ref(2)defineExpose({a,b})</script>"
                },
                {
                    "type": "p",
                    "text": "When a parent gets an instance of this component via template refs, the retrieved instance will be of the shape{ a: number, b: number }(refs are automatically unwrapped just like on normal instances)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineOptions()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "This macro can be used to declare component options directly inside<script setup>without having to use a separate<script>block:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineOptions({inheritAttrs:false,customOptions: {/* ... */}})</script>"
                },
                {
                    "type": "list",
                    "items": [
                        "This is a macro. The options will be hoisted to module scope and cannot access local variables in<script setup>that are not literal constants."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "defineSlots()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "This macro can be used to provide type hints to IDEs for slot name and props type checking."
                },
                {
                    "type": "p",
                    "text": "defineSlots()only accepts a type parameter and no runtime arguments. The type parameter should be a type literal where the property key is the slot name, and the value type is the slot function. The first argument of the function is the props the slot expects to receive, and its type will be used for slot props in the template. The return type is currently ignored and can beany, but we may leverage it for slot content checking in the future."
                },
                {
                    "type": "p",
                    "text": "It also returns theslotsobject, which is equivalent to theslotsobject exposed on the setup context or returned byuseSlots()."
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">constslots=defineSlots<{default(props:{msg:string}):any}>()</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useSlots()&useAttrs()​"
                },
                {
                    "type": "p",
                    "text": "Usage ofslotsandattrsinside<script setup>should be relatively rare, since you can access them directly as$slotsand$attrsin the template. In the rare case where you do need them, use theuseSlotsanduseAttrshelpers respectively:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useSlots, useAttrs }from'vue'constslots=useSlots()constattrs=useAttrs()</script>"
                },
                {
                    "type": "p",
                    "text": "useSlotsanduseAttrsare actual runtime functions that return the equivalent ofsetupContext.slotsandsetupContext.attrs. They can be used in normal composition API functions as well."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage alongside normal<script>​"
                },
                {
                    "type": "p",
                    "text": "<script setup>can be used alongside normal<script>. A normal<script>may be needed in cases where we need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Declare options that cannot be expressed in<script setup>, for exampleinheritAttrsor custom options enabled via plugins (Can be replaced bydefineOptionsin 3.3+).",
                        "Declaring named exports.",
                        "Run side effects or create objects that should only execute once."
                    ]
                },
                {
                    "type": "code",
                    "code": "<script>// normal <script>, executed in module scope (only once)runSideEffectOnce()// declare additional optionsexportdefault{inheritAttrs:false,customOptions: {}}</script><scriptsetup>// executed in setup() scope (for each instance)</script>"
                },
                {
                    "type": "p",
                    "text": "Support for combining<script setup>and<script>in the same component is limited to the scenarios described above. Specifically:"
                },
                {
                    "type": "list",
                    "items": [
                        "DoNOTuse a separate<script>section for options that can already be defined using<script setup>, such aspropsandemits.",
                        "Variables created inside<script setup>are not added as properties to the component instance, making them inaccessible from the Options API. Mixing APIs in this way is strongly discouraged."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you find yourself in one of the scenarios that is not supported then you should consider switching to an explicitsetup()function, instead of using<script setup>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Top-levelawait​"
                },
                {
                    "type": "p",
                    "text": "Top-levelawaitcan be used inside<script setup>. The resulting code will be compiled asasync setup():"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constpost=awaitfetch(`/api/post/1`).then((r)=>r.json())</script>"
                },
                {
                    "type": "p",
                    "text": "In addition, the awaited expression will be automatically compiled in a format that preserves the current component instance context after theawait."
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "async setup()must be used in combination withSuspense, which is currently still an experimental feature. We plan to finalize and document it in a future release - but if you are curious now, you can refer to itsteststo see how it works."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Import Statements​"
                },
                {
                    "type": "p",
                    "text": "Import statements in vue followECMAScript module specification. In addition, you can use aliases defined in your build tool configuration:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'import{ componentA }from'./Components'import{ componentB }from'@/Components'import{ componentC }from'~/Components'</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generics​"
                },
                {
                    "type": "p",
                    "text": "Generic type parameters can be declared using thegenericattribute on the<script>tag:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\"generic=\"T\">defineProps<{items:T[]selected:T}>()</script>"
                },
                {
                    "type": "p",
                    "text": "The value ofgenericworks exactly the same as the parameter list between<...>in TypeScript. For example, you can use multiple parameters,extendsconstraints, default types, and reference imported types:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\"generic=\"Textendsstring|number,UextendsItem\">importtype{ Item }from'./types'defineProps<{id:Tlist:U[]}>()</script>"
                },
                {
                    "type": "p",
                    "text": "In order to use a reference to a generic component in arefyou need to use thevue-component-type-helperslibrary asInstanceTypewon't work."
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">importcomponentWithoutGenericsfrom'../component-without-generics.vue';importgenericComponentfrom'../generic-component.vue';importtype{ ComponentExposed }from'vue-component-type-helpers';// Works for a component without genericsref<InstanceType<typeofcomponentWithoutGenerics>>();ref<ComponentExposed<typeofgenericComponent>>();"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Restrictions​"
                },
                {
                    "type": "list",
                    "items": [
                        "Due to the difference in module execution semantics, code inside<script setup>relies on the context of an SFC. When moved into external.jsor.tsfiles, it may lead to confusion for both developers and tools. Therefore,<script setup>cannot be used with thesrcattribute.",
                        "<script setup>does not support In-DOM Root Component Template.(Related Discussion)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/sfc-spec",
            "title": "SFC Syntax Specification | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "SFC Syntax Specification​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview​"
                },
                {
                    "type": "p",
                    "text": "A Vue Single-File Component (SFC), conventionally using the*.vuefile extension, is a custom file format that uses an HTML-like syntax to describe a Vue component. A Vue SFC is syntactically compatible with HTML."
                },
                {
                    "type": "p",
                    "text": "Each*.vuefile consists of three types of top-level language blocks:<template>,<script>, and<style>, and optionally additional custom blocks:"
                },
                {
                    "type": "code",
                    "code": "<template><divclass=\"example\">{{ msg }}</div></template><script>exportdefault{data() {return{msg:'Hello world!'}}}</script><style>.example{color:red;}</style><custom1>This could be e.g. documentation for the component.</custom1>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Language Blocks​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<template>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Each*.vuefile can contain at most one top-level<template>block.",
                        "Contents will be extracted and passed on to@vue/compiler-dom, pre-compiled into JavaScript render functions, and attached to the exported component as itsrenderoption."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each*.vuefile can contain at most one top-level<template>block."
                },
                {
                    "type": "p",
                    "text": "Contents will be extracted and passed on to@vue/compiler-dom, pre-compiled into JavaScript render functions, and attached to the exported component as itsrenderoption."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<script>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Each*.vuefile can contain at most one<script>block (excluding<script setup>).",
                        "The script is executed as an ES Module.",
                        "Thedefault exportshould be a Vue component options object, either as a plain object or as the return value ofdefineComponent."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each*.vuefile can contain at most one<script>block (excluding<script setup>)."
                },
                {
                    "type": "p",
                    "text": "The script is executed as an ES Module."
                },
                {
                    "type": "p",
                    "text": "Thedefault exportshould be a Vue component options object, either as a plain object or as the return value ofdefineComponent."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<script setup>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Each*.vuefile can contain at most one<script setup>block (excluding normal<script>).",
                        "The script is pre-processed and used as the component'ssetup()function, which means it will be executedfor each instance of the component. Top-level bindings in<script setup>are automatically exposed to the template. For more details, seededicated documentation on<script setup>."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each*.vuefile can contain at most one<script setup>block (excluding normal<script>)."
                },
                {
                    "type": "p",
                    "text": "The script is pre-processed and used as the component'ssetup()function, which means it will be executedfor each instance of the component. Top-level bindings in<script setup>are automatically exposed to the template. For more details, seededicated documentation on<script setup>."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<style>​"
                },
                {
                    "type": "list",
                    "items": [
                        "A single*.vuefile can contain multiple<style>tags.",
                        "A<style>tag can havescopedormoduleattributes (seeSFC Style Featuresfor more details) to help encapsulate the styles to the current component. Multiple<style>tags with different encapsulation modes can be mixed in the same component."
                    ]
                },
                {
                    "type": "p",
                    "text": "A single*.vuefile can contain multiple<style>tags."
                },
                {
                    "type": "p",
                    "text": "A<style>tag can havescopedormoduleattributes (seeSFC Style Featuresfor more details) to help encapsulate the styles to the current component. Multiple<style>tags with different encapsulation modes can be mixed in the same component."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Blocks​"
                },
                {
                    "type": "p",
                    "text": "Additional custom blocks can be included in a*.vuefile for any project-specific needs, for example a<docs>block. Some real-world examples of custom blocks include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Gridsome:<page-query>",
                        "vite-plugin-vue-gql:<gql>",
                        "vue-i18n:<i18n>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Handling of Custom Blocks will depend on tooling - if you want to build your own custom block integrations, see theSFC custom block integrations tooling sectionfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Automatic Name Inference​"
                },
                {
                    "type": "p",
                    "text": "An SFC automatically infers the component's name from itsfilenamein the following cases:"
                },
                {
                    "type": "list",
                    "items": [
                        "Dev warning formatting",
                        "DevTools inspection",
                        "Recursive self-reference, e.g. a file namedFooBar.vuecan refer to itself as<FooBar/>in its template. This has lower priority than explicitly registered/imported components."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pre-Processors​"
                },
                {
                    "type": "p",
                    "text": "Blocks can declare pre-processor languages using thelangattribute. The most common case is using TypeScript for the<script>block:"
                },
                {
                    "type": "code",
                    "code": "<scriptlang=\"ts\">// use TypeScript</script>"
                },
                {
                    "type": "p",
                    "text": "langcan be applied to any block - for example we can use<style>withSassand<template>withPug:"
                },
                {
                    "type": "code",
                    "code": "<templatelang=\"pug\">p {{ msg }}</template><stylelang=\"scss\">$primary-color: #333;body {color: $primary-color;}</style>"
                },
                {
                    "type": "p",
                    "text": "Note that integration with various pre-processors may differ by toolchain. Check out the respective documentation for examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vite",
                        "Vue CLI",
                        "webpack + vue-loader"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "srcImports​"
                },
                {
                    "type": "p",
                    "text": "If you prefer splitting up your*.vuecomponents into multiple files, you can use thesrcattribute to import an external file for a language block:"
                },
                {
                    "type": "code",
                    "code": "<templatesrc=\"./template.html\"></template><stylesrc=\"./style.css\"></style><scriptsrc=\"./script.js\"></script>"
                },
                {
                    "type": "p",
                    "text": "Beware thatsrcimports follow the same path resolution rules as webpack module requests, which means:"
                },
                {
                    "type": "list",
                    "items": [
                        "Relative paths need to start with./",
                        "You can import resources from npm dependencies:"
                    ]
                },
                {
                    "type": "code",
                    "code": "<!-- import a file from the installed \"todomvc-app-css\" npm package --><stylesrc=\"todomvc-app-css/index.css\"/>"
                },
                {
                    "type": "p",
                    "text": "srcimports also work with custom blocks, e.g.:"
                },
                {
                    "type": "code",
                    "code": "<unit-testsrc=\"./unit-test.js\"></unit-test>"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "While using aliases insrc, don't start with~, anything after it is interpreted as a module request. This means you can reference assets inside node modules:"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"~some-npm-package/foo.png\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Comments​"
                },
                {
                    "type": "p",
                    "text": "Inside each block you shall use the comment syntax of the language being used (HTML, CSS, JavaScript, Pug, etc.). For top-level comments, use HTML comment syntax:<!-- comment contents here -->"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/ssr#rendertostring",
            "title": "Server-Side Rendering API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server-Side Rendering API​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderToString()​"
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionrenderToString(input:App|VNode,context?:SSRContext):Promise<string>",
                        "Examplejsimport{ createSSRApp }from'vue'import{ renderToString }from'vue/server-renderer'constapp=createSSRApp({data: ()=>({ msg:'hello'}),template:`<div>{{ msg }}</div>`});(async()=>{consthtml=awaitrenderToString(app)console.log(html)})()SSR Context​You can pass an optional context object, which can be used to record additional data during the render, for exampleaccessing content of Teleports:jsconstctx={}consthtml=awaitrenderToString(app, ctx)console.log(ctx.teleports)// { '#teleported': 'teleported content' }Most other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via theuseSSRContexthelper.",
                        "See alsoGuide - Server-Side Rendering"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionrenderToString(input:App|VNode,context?:SSRContext):Promise<string>"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ createSSRApp }from'vue'import{ renderToString }from'vue/server-renderer'constapp=createSSRApp({data: ()=>({ msg:'hello'}),template:`<div>{{ msg }}</div>`});(async()=>{consthtml=awaitrenderToString(app)console.log(html)})()"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SSR Context​"
                },
                {
                    "type": "p",
                    "text": "You can pass an optional context object, which can be used to record additional data during the render, for exampleaccessing content of Teleports:"
                },
                {
                    "type": "code",
                    "code": "constctx={}consthtml=awaitrenderToString(app, ctx)console.log(ctx.teleports)// { '#teleported': 'teleported content' }"
                },
                {
                    "type": "p",
                    "text": "Most other SSR APIs on this page also optionally accept a context object. The context object can be accessed in component code via theuseSSRContexthelper."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Server-Side Rendering"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderToNodeStream()​"
                },
                {
                    "type": "p",
                    "text": "Renders input as aNode.js Readable stream."
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionrenderToNodeStream(input:App|VNode,context?:SSRContext):Readable",
                        "Examplejs// inside a Node.js http handlerrenderToNodeStream(app).pipe(res)NoteThis method is not supported in the ESM build ofvue/server-renderer, which is decoupled from Node.js environments. UsepipeToNodeWritableinstead."
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionrenderToNodeStream(input:App|VNode,context?:SSRContext):Readable"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "// inside a Node.js http handlerrenderToNodeStream(app).pipe(res)"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "This method is not supported in the ESM build ofvue/server-renderer, which is decoupled from Node.js environments. UsepipeToNodeWritableinstead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "pipeToNodeWritable()​"
                },
                {
                    "type": "p",
                    "text": "Render and pipe to an existingNode.js Writable streaminstance."
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionpipeToNodeWritable(input:App|VNode,context:SSRContext={},writable:Writable):void",
                        "Examplejs// inside a Node.js http handlerpipeToNodeWritable(app, {}, res)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionpipeToNodeWritable(input:App|VNode,context:SSRContext={},writable:Writable):void"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "// inside a Node.js http handlerpipeToNodeWritable(app, {}, res)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderToWebStream()​"
                },
                {
                    "type": "p",
                    "text": "Renders input as aWeb ReadableStream."
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionrenderToWebStream(input:App|VNode,context?:SSRContext):ReadableStream",
                        "Examplejs// inside an environment with ReadableStream supportreturnnewResponse(renderToWebStream(app))NoteIn environments that do not exposeReadableStreamconstructor in the global scope,pipeToWebWritable()should be used instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionrenderToWebStream(input:App|VNode,context?:SSRContext):ReadableStream"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "// inside an environment with ReadableStream supportreturnnewResponse(renderToWebStream(app))"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "In environments that do not exposeReadableStreamconstructor in the global scope,pipeToWebWritable()should be used instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "pipeToWebWritable()​"
                },
                {
                    "type": "p",
                    "text": "Render and pipe to an existingWeb WritableStreaminstance."
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionpipeToWebWritable(input:App|VNode,context:SSRContext={},writable:WritableStream):void",
                        "ExampleThis is typically used in combination withTransformStream:js// TransformStream is available in environments such as CloudFlare workers.// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'const{readable,writable}=newTransformStream()pipeToWebWritable(app, {}, writable)returnnewResponse(readable)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionpipeToWebWritable(input:App|VNode,context:SSRContext={},writable:WritableStream):void"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "This is typically used in combination withTransformStream:"
                },
                {
                    "type": "code",
                    "code": "// TransformStream is available in environments such as CloudFlare workers.// in Node.js, TransformStream needs to be explicitly imported from 'stream/web'const{readable,writable}=newTransformStream()pipeToWebWritable(app, {}, writable)returnnewResponse(readable)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "renderToSimpleStream()​"
                },
                {
                    "type": "p",
                    "text": "Renders input in streaming mode using a simple readable interface."
                },
                {
                    "type": "list",
                    "items": [
                        "Exported fromvue/server-renderer",
                        "TypetsfunctionrenderToSimpleStream(input:App|VNode,context:SSRContext,options:SimpleReadable):SimpleReadableinterfaceSimpleReadable{push(content:string|null):voiddestroy(err:any):void}",
                        "Examplejsletres=''renderToSimpleStream(app,{},{push(chunk) {if(chunk===null) {// doneconsole(`render complete: ${res}`)}else{res+=chunk}},destroy(err) {// error encountered}})"
                    ]
                },
                {
                    "type": "p",
                    "text": "Exported fromvue/server-renderer"
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionrenderToSimpleStream(input:App|VNode,context:SSRContext,options:SimpleReadable):SimpleReadableinterfaceSimpleReadable{push(content:string|null):voiddestroy(err:any):void}"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "letres=''renderToSimpleStream(app,{},{push(chunk) {if(chunk===null) {// doneconsole(`render complete: ${res}`)}else{res+=chunk}},destroy(err) {// error encountered}})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "useSSRContext()​"
                },
                {
                    "type": "p",
                    "text": "A runtime API used to retrieve the context object passed torenderToString()or other server render APIs."
                },
                {
                    "type": "list",
                    "items": [
                        "TypetsfunctionuseSSRContext<T=Record<string,any>>():T|undefined",
                        "ExampleThe retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata).vue<scriptsetup>import{ useSSRContext }from'vue'// make sure to only call it during SSR// https://vitejs.dev/guide/ssr.html#conditional-logicif(import.meta.env.SSR) {constctx=useSSRContext()// ...attach properties to the context}</script>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Type"
                },
                {
                    "type": "code",
                    "code": "functionuseSSRContext<T=Record<string,any>>():T|undefined"
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "The retrieved context can be used to attach information that is needed for rendering the final HTML (e.g. head metadata)."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useSSRContext }from'vue'// make sure to only call it during SSR// https://vitejs.dev/guide/ssr.html#conditional-logicif(import.meta.env.SSR) {constctx=useSSRContext()// ...attach properties to the context}</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "data-allow-mismatch​"
                },
                {
                    "type": "p",
                    "text": "A special attribute that can be used to suppresshydration mismatchwarnings."
                },
                {
                    "type": "list",
                    "items": [
                        "Examplehtml<divdata-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>The value can limit the allowed mismatch to a specific type. Allowed values are:textchildren(only allows mismatch for direct children)classstyleattributeIf no value is provided, all types of mismatches will be allowed.",
                        "text",
                        "children(only allows mismatch for direct children)",
                        "class",
                        "style",
                        "attribute"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "<divdata-allow-mismatch=\"text\">{{ data.toLocaleString() }}</div>"
                },
                {
                    "type": "p",
                    "text": "The value can limit the allowed mismatch to a specific type. Allowed values are:"
                },
                {
                    "type": "list",
                    "items": [
                        "text",
                        "children(only allows mismatch for direct children)",
                        "class",
                        "style",
                        "attribute"
                    ]
                },
                {
                    "type": "p",
                    "text": "If no value is provided, all types of mismatches will be allowed."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/api/utility-types#proptype-t",
            "title": "Utility Types | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Utility Types​"
                },
                {
                    "type": "p",
                    "text": "INFO"
                },
                {
                    "type": "p",
                    "text": "This page only lists a few commonly used utility types that may need explanation for their usage. For a full list of exported types, consult thesource code."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "PropType<T>​"
                },
                {
                    "type": "p",
                    "text": "Used to annotate a prop with more advanced types when using runtime props declarations."
                },
                {
                    "type": "list",
                    "items": [
                        "Exampletsimporttype{ PropType }from'vue'interfaceBook{title:stringauthor:stringyear:number}exportdefault{props: {book: {// provide more specific type to `Object`type: ObjectasPropType<Book>,required:true}}}",
                        "See alsoGuide - Typing Component Props"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "importtype{ PropType }from'vue'interfaceBook{title:stringauthor:stringyear:number}exportdefault{props: {book: {// provide more specific type to `Object`type: ObjectasPropType<Book>,required:true}}}"
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Typing Component Props"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "MaybeRef<T>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Alias forT | Ref<T>. Useful for annotating arguments ofComposables."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "MaybeRefOrGetter<T>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Alias forT | Ref<T> | (() => T). Useful for annotating arguments ofComposables."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ExtractPropTypes<T>​"
                },
                {
                    "type": "p",
                    "text": "Extract prop types from a runtime props options object. The extracted types are internal facing - i.e. the resolved props received by the component. This means boolean props and props with default values are always defined, even if they are not required."
                },
                {
                    "type": "p",
                    "text": "To extract public facing props, i.e. props that the parent is allowed to pass, useExtractPublicPropTypes."
                },
                {
                    "type": "list",
                    "items": [
                        "ExampletsconstpropsOptions={foo: String,bar: Boolean,baz: {type: Number,required:true},qux: {type: Number,default:1}}asconsttypeProps=ExtractPropTypes<typeofpropsOptions>// {//   foo?: string,//   bar: boolean,//   baz: number,//   qux: number// }"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constpropsOptions={foo: String,bar: Boolean,baz: {type: Number,required:true},qux: {type: Number,default:1}}asconsttypeProps=ExtractPropTypes<typeofpropsOptions>// {//   foo?: string,//   bar: boolean,//   baz: number,//   qux: number// }"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ExtractPublicPropTypes<T>​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Extract prop types from a runtime props options object. The extracted types are public facing - i.e. the props that the parent is allowed to pass."
                },
                {
                    "type": "list",
                    "items": [
                        "ExampletsconstpropsOptions={foo: String,bar: Boolean,baz: {type: Number,required:true},qux: {type: Number,default:1}}asconsttypeProps=ExtractPublicPropTypes<typeofpropsOptions>// {//   foo?: string,//   bar?: boolean,//   baz: number,//   qux?: number// }"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "constpropsOptions={foo: String,bar: Boolean,baz: {type: Number,required:true},qux: {type: Number,default:1}}asconsttypeProps=ExtractPublicPropTypes<typeofpropsOptions>// {//   foo?: string,//   bar?: boolean,//   baz: number,//   qux?: number// }"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ComponentCustomProperties​"
                },
                {
                    "type": "p",
                    "text": "Used to augment the component instance type to support custom global properties."
                },
                {
                    "type": "list",
                    "items": [
                        "Exampletsimportaxiosfrom'axios'declaremodule'vue'{interfaceComponentCustomProperties{$http:typeofaxios$translate:(key:string)=>string}}TIPAugmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details.",
                        "See alsoGuide - Augmenting Global Properties"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "importaxiosfrom'axios'declaremodule'vue'{interfaceComponentCustomProperties{$http:typeofaxios$translate:(key:string)=>string}}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Augmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Augmenting Global Properties"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ComponentCustomOptions​"
                },
                {
                    "type": "p",
                    "text": "Used to augment the component options type to support custom options."
                },
                {
                    "type": "list",
                    "items": [
                        "Exampletsimport{ Route }from'vue-router'declaremodule'vue'{interfaceComponentCustomOptions{beforeRouteEnter?(to:any,from:any,next:()=>void):void}}TIPAugmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details.",
                        "See alsoGuide - Augmenting Custom Options"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "import{ Route }from'vue-router'declaremodule'vue'{interfaceComponentCustomOptions{beforeRouteEnter?(to:any,from:any,next:()=>void):void}}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Augmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details."
                },
                {
                    "type": "p",
                    "text": "See alsoGuide - Augmenting Custom Options"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ComponentCustomProps​"
                },
                {
                    "type": "p",
                    "text": "Used to augment allowed TSX props in order to use non-declared props on TSX elements."
                },
                {
                    "type": "list",
                    "items": [
                        "Exampletsdeclaremodule'vue'{interfaceComponentCustomProps{hello?:string}}export{}tsx// now works even if hello is not a declared prop<MyComponenthello=\"world\"/>TIPAugmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details."
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "code",
                    "code": "declaremodule'vue'{interfaceComponentCustomProps{hello?:string}}export{}"
                },
                {
                    "type": "code",
                    "code": "// now works even if hello is not a declared prop<MyComponenthello=\"world\"/>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Augmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSSProperties​"
                },
                {
                    "type": "p",
                    "text": "Used to augment allowed values in style property bindings."
                },
                {
                    "type": "list",
                    "items": [
                        "ExampleAllow any custom CSS propertytsdeclaremodule'vue'{interfaceCSSProperties{[key:`--${string}`]:string}}tsx<divstyle={ {'--bg-color':'blue'} }>html<div:style=\"{ '--bg-color': 'blue' }\"></div>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Example"
                },
                {
                    "type": "p",
                    "text": "Allow any custom CSS property"
                },
                {
                    "type": "code",
                    "code": "declaremodule'vue'{interfaceCSSProperties{[key:`--${string}`]:string}}"
                },
                {
                    "type": "code",
                    "code": "<divstyle={ {'--bg-color':'blue'} }>"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"{ '--bg-color': 'blue' }\"></div>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Augmentations must be placed in a module.tsor.d.tsfile. SeeType Augmentation Placementfor more details."
                },
                {
                    "type": "p",
                    "text": "See also"
                },
                {
                    "type": "p",
                    "text": "SFC<style>tags support linking CSS values to dynamic component state using thev-bindCSS function. This allows for custom properties without type augmentation."
                },
                {
                    "type": "list",
                    "items": [
                        "v-bind() in CSS"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers",
            "title": "Vue Developers | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Developers"
                },
                {
                    "type": "p",
                    "text": "Vue Developers are certified individual freelancers. Payments, compliance and vetting are administrated by our partner Proxify. Interested to join the list?Apply here."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Spotlight"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Vue.js Certified developers"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Become a listed developer"
                },
                {
                    "type": "p",
                    "text": "Get a long-term part-time or full-time position at company looking for a Vue.js developer."
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/abdusaid-html-css-vue-typescript-frontend-dev.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Abdusaid Umarov"
                },
                {
                    "type": "p",
                    "text": "Uzbekistan"
                },
                {
                    "type": "p",
                    "text": "Though he focuses on frontend work, Abdusaid isn’t just limited to that—he’s also jumped in to help with backend tasks using Laravel."
                },
                {
                    "type": "p",
                    "text": "His experience across identity management, fintech, eCommerce, and other tech sectors shows his ability to adapt and thrive in different environments."
                },
                {
                    "type": "p",
                    "text": "What makes Abdusaid stand out is not just his technical skills but his knack for understanding the bigger picture and delivering work that truly meets the needs of each project he takes on."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Got experience creating custom web plugins: i18n localization plugin and automated docker runner plugin using Vite.",
                        "Configured project settings with prettierrc and vite.config, postcss.config, tsup.config, ts.config.",
                        "Developed Tablet and Mobile views by applying PostCSS."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Got experience in building web apps using Modular Architecture.",
                        "Took full responsibility for complex tasks (such as authentication and fixing merge conflicts).",
                        "Got experience in using Turbo repo in projects that are based on mono repo architecture.",
                        "Did releases into the PROD environment.",
                        "Integrated localization using i18n-vue package."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Software Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Implemented new features using Vue.js/NUXT.js.",
                        "Conducted Code reviews.",
                        "Bug fixing.",
                        "Refactored the code to make it cleaner.",
                        "Made documented reports about commits using Gitlab's MergeRequests and Spikes.",
                        "Learnt new Prismic CMS.",
                        "Got experience with Magnolia CMS to work with the classic version of the project.",
                        "Worked in a Scrum environment and understood all of the features and terminologies of the methodology, including sprints, sprint plannings, retrospectives, and daily meetings/Stand-Ups."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Created components/UI according to Figma design.",
                        "Connected APIs to UI using Axios.",
                        "Provided token authorizations, silent authentication method, and refreshed token/ JWT token.",
                        "Connected charts using Apex charts.",
                        "Created Vue Routers.",
                        "Used i18n internal language localization.",
                        "Widely used 'Vuex' module-based structure.",
                        "Created Designs using Element UI."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Worked in a team to build the Uzbekistan Banking System.",
                        "Improved System’s performance, stability Querying, indexing, writing procedures, and functions to make the backend section of the system.",
                        "Created sophisticated JSP pages with JavaScript language for the frontend logic of the banking system.",
                        "Made Java services for exchanging information with the Government Custom Center in XML and JSON formats with key exchange techniques for providing such potential REST APIs."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Worked in a team to build a real-world system for the technology industry.",
                        "Improved UI/frontend interface.",
                        "Built an Analytical section of the System with graphic analysis, according to the industry's provided Excel sheets, using logic to extract data.",
                        "Implemented frontend structures/components of the Internal Document Exchange System."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Science and Software Engineering"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/eduard-miskov-vue-frontend-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Eduard Miskov"
                },
                {
                    "type": "p",
                    "text": "Ukraine"
                },
                {
                    "type": "p",
                    "text": "Eduard is a frontend developer with over seven years of commercial experience. His primary expertise is crafting visually appealing and user-friendly web applications using Vue.js."
                },
                {
                    "type": "p",
                    "text": "Eduard's positivity and high motivation set him apart in the fast-evolving field of frontend development. His outstanding code quality highlights his technical expertise and commitment to excellence."
                },
                {
                    "type": "p",
                    "text": "He has successfully collaborated with Proxify clients, consistently delivering timely results and maintaining high-quality standards. Eduard's ability to focus on engagement goals and deliver outstanding results makes him a valuable team member."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Led frontend development efforts in creating the online clothing store network for a leading German market player.",
                        "Focused on designing and implementing user panels, product listing pages, and search functionalities to enhance user experience.",
                        "Developed reusable components for Storybook, featuring diverse themes, to ensure consistent design elements across all online stores with unique visual identities.",
                        "Employed Nuxt 3 for its performance optimization and server-side rendering capabilities, enhancing overall website speed and responsiveness.",
                        "Demonstrated proficiency in Storybook, Vue, Nuxt, and Shopware to meet project requirements effectively."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Developed a web application for a subsidiary of Elop specializing in smart concrete scanning solutions for architectural and bridge building firms.",
                        "Designed and implemented reusable UI components to enhance the application's usability and maintainability.",
                        "Utilized TypeScript to write clean and maintainable code, ensuring codebase quality and reliability.",
                        "Leveraged the Three.js library to create interactive 3D visualizations of concrete structures, enhancing the user experience.",
                        "Demonstrated expertise in Vue.js, JavaScript, Vuetify, and TypeScript to meet the project's technical requirements effectively.",
                        "Contributed to the advancement of smart concrete scanning solutions, supporting architectural and bridge-building companies in their projects."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Spearheaded the development of a robust web calendar as an integral module within the Recman platform.",
                        "Employed Vanilla.js extensively to implement core features, including routing, MVC architecture, state management, and view rendering, all crafted from scratch.",
                        "Designed and built a calendar system akin to Google Calendar, seamlessly integrated into the organization's internal infrastructure.",
                        "Demonstrated proficiency in Vue.js, JavaScript, and SASS, ensuring the successful completion of the project.",
                        "Contributed significantly to enhancing the Recman platform's functionality by adding a feature-rich, internally focused web calendar module."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Played a key role in a substantial analytical project aimed at enhancing the hotel and restaurant industry.",
                        "Led the migration process of an Angular.js application to Angular, ensuring the seamless transition while preserving the existing design system guidelines.",
                        "Successfully implemented new features within the Angular framework to enhance the functionality and capabilities of the application.",
                        "Demonstrated proficiency in Vue.js, JavaScript, SASS, and Angular to meet project requirements effectively.",
                        "Contributed significantly to the project's success, improving the analytical tools and capabilities available to the hotel and restaurant business."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Medior Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Developed custom WordPress templates from scratch within the educational sector, paying close attention to design aesthetics, SEO best practices, and alignment with the business's core values.",
                        "Demonstrated proficiency in JavaScript, WordPress, PHP, and Angular to successfully create bespoke templates tailored to educational needs.",
                        "Played a crucial role in enhancing the online presence and functionality of educational websites, catering to both user experience and search engine optimization.",
                        "Contributed to the growth and success of educational institutions by providing them with tailored WordPress solutions that aligned with their unique requirements and goals."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Medior Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Crafted customized templates to meet clients' unique design and functionality demands during my tenure at a web agency.",
                        "Delivered tailored solutions for various projects, including basic corporate websites and expansive online cosmetics stores, all built from the ground up.",
                        "Demonstrated expertise in WordPress, PHP, and MySQL to develop templates that catered to the specific needs and goals of each client.",
                        "Played a pivotal role in the agency's ability to provide clients with highly individualized web solutions, contributing to the success of various online ventures."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Development Mentor"
                },
                {
                    "type": "list",
                    "items": [
                        "Offered valuable guidance and mentorship to students, focusing on contemporary website creation techniques, Adobe Creative Cloud (CC) tools, and navigating the job search process.",
                        "Equipped students with the necessary skills and knowledge to excel in website development within the dynamic IT industry.",
                        "Facilitated students' journeys toward securing their first positions in the IT field by providing essential insights and practical advice.",
                        "Acted as a supportive and knowledgeable resource for aspiring professionals, contributing to their career development and growth."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Designer"
                },
                {
                    "type": "list",
                    "items": [
                        "Held the position of lead web designer, with primary responsibilities encompassing the creation of visually captivating and impactful promotional websites.",
                        "Designed banners and engaging printed materials tailored to clients' distinct requirements within our digital marketing agency.",
                        "Leveraged skills in Adobe Photoshop and Adobe Illustrator to ensure the delivery of high-quality design work that effectively communicated our clients' messages and brand identities.",
                        "Played a pivotal role in enhancing the online presence and marketing collateral of various clients, contributing to their success in the digital landscape."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Designer"
                },
                {
                    "type": "list",
                    "items": [
                        "Designed and developed commercial websites and promotional materials catering to the needs of small to mid-sized businesses.",
                        "Prioritized user-friendliness, responsiveness, and visual appeal in all web projects to enhance the online presence and customer engagement for clients.",
                        "Generated blueprints and wireframes for websites, establishing clear and concise plans before the development phase.",
                        "Ensured that the end products were not only interactive but also engaging for users, enhancing the overall user experience and client satisfaction."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Junior PHP Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Actively explored and applied Drupal's API to enhance the functionality and interactivity of web applications, contributing to the mastery of this versatile content management system.",
                        "Acquired knowledge and expertise in leveraging Drupal's capabilities to build dynamic and feature-rich web applications.",
                        "Kept abreast of the latest trends and best practices in Drupal web development, ensuring the ability to create robust and efficient solutions."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Science and Information Technologies"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Sc. Software Development"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/emre-vue-frontend-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Emre Demir"
                },
                {
                    "type": "p",
                    "text": "Turkey"
                },
                {
                    "type": "p",
                    "text": "Emre is a talented frontend developer with over six years of commercial experience in IT services & solutions and design. Throughout his career, Emre has worked in various industries, including FinTech, banking, gaming, marketing automation, defense, and cybersecurity."
                },
                {
                    "type": "p",
                    "text": "He is the most skilled in frontend programming languages like JS framework Vue.js, React.js, Typescript, and RxJs. Specializing in collaborating with product managers and designers to gather requirements, produce plans and improve designs for usability and functionality."
                },
                {
                    "type": "p",
                    "text": "Emre is goal-oriented and brings a strong commitment to collaboration. He uses various web design packages to develop custom-crafted, customer-focused websites and designs."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Front-end Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Worked as a Front End Developer in the Back Office project of the WPTO Poker application. This project is responsible for CRUD operations such as reading BOT Detection results, locking accounts, locking withdrawal/deposit, etc...",
                        "Responsible for creating GraphQL contracts, and integrating them with the backend (GraphQL, Rest, Websocket).",
                        "Created UI library using MaterialUI.",
                        "Scheduled meetings with the designer and product manager to handle edge cases, improvements, and requirements."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Consultant"
                },
                {
                    "type": "p",
                    "text": "Worked as a Senior Consultant in banking and finance projects as a member of international Agile teams - (Delivery Hub - Remote) Vue.js, Amazon AWS"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Front-end Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Insider—one platform for individualized, cross-channel experiences—enables enterprise marketers to connect customer data across channels and systems, predict their future behavior with an AI intent engine and individualize customer experiences. Marketers use Insider’s platform to deliver experiences across channels like Web, App, Web Push, Email, SMS, and Messaging Apps (WhatsApp, Facebook Messenger, RCS).",
                        "Worked as a Lead Senior Frontend Developer, implemented the frontend part of a dashboard using Vue.js."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Expert Software Developer"
                },
                {
                    "type": "p",
                    "text": "Worked in DNS-based Web filtering project, Dome Shield, and also worked in sub-projects, Dome Analytics, Comodo Threat Analysis, and NuEDUSec. Worked as a full-stack developer in all of the projects -  Dome Shield, Dome Analytics ,Comodo Threat Analysis and NuEDUSec"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Software Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "He quit his job because he accepted a master's degree at Berlin Technical University. He started freelance work to make some money before he went to Berlin. Some medical issues occurred, and he canceled his master's degree.",
                        "Worked in development, design, deployment, and ASO for Android and iOS games using Unity.",
                        "Created SPA using Vue.js and Node.js for customers that found me on upwork.com"
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Research and Development Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Designed and implemented Geographic Information System in Java and Android.",
                        "Built and managed a database system for both Java and Android versions of GIS using PostgreSql and Java.",
                        "Designed RabbitMQ messaging infrastructure for communicating with all system devices.",
                        "Integrated Radar, Sonars, Cameras, Cabins, and UPS to GIS using both RabbitMQ and PostgreSQL.",
                        "Displayed both live and recorded cameras using video encoder and decoder libraries.",
                        "This project is shown by Havelsan Teknoloji Radar A.Ş. at IDEF17 International Defence Industry Fair in İstanbul."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Engineering"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Engineering"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/harshit-vue-frontend-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Harshit Sangani"
                },
                {
                    "type": "p",
                    "text": "India"
                },
                {
                    "type": "p",
                    "text": "Harshit is a frontend engineer with over six years of commercial experience, specializing in Vue.js. He has been integral to various stages of the software development lifecycle, from ideation to deployment, ensuring top-notch user experiences and scalable applications."
                },
                {
                    "type": "p",
                    "text": "His expertise extends to modern frontend technologies and proficiency in DevOps practices. Notably, he has led the development of a CO2 Calculator for cost-splitting emissions and a community application targeting a 15M+ user base."
                },
                {
                    "type": "p",
                    "text": "His strong background in building complex, modular frontend solutions and managing deployment cycles and state management tools like Vuex and Apollo further solidifies his capability to deliver high-quality, user-centric applications."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Sr. Software Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Single-handedly worked on a CO2 Calculator, which helped easily calculate the cost split for CO2 emission between landlords and tenants.",
                        "Created the base project setup, leveraging TypeScript to speed up the development in the long run.",
                        "Generated many modular base components to be used throughout the project.",
                        "Helped setting up deployment cycles and environments using Vercel."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Founder and Engineering Manager"
                },
                {
                    "type": "list",
                    "items": [
                        "Managed a team of 15+ members actively collaborating on non-profit community projects.",
                        "Connected communities across divided regions on a single platform to perform integrated businesses, find matrimonial matches, engage in advanced discussions, and much more."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Sr. Software Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Worked with a great team to build advanced real-estate brokerage software.",
                        "Solved many user-centric issues and helped the team transition to TypeScript.",
                        "Created real-time compilation of GraphQL schemas to be directly used in the Frontend codebase, reducing the related bug reports by ~40% and enhancing Developer Experience."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Co-Founder and Sr. Software Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Fulfilled requirements of 20+ clients.",
                        "Developed 25+ projects.",
                        "Helped the team grow with an overall experience in the SDLC process.",
                        "Managed a team of 8+ members.",
                        "Provided technical support to two successful startups, uplifting their profits by more than 250% and still counting."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Science"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/kostiantyn-vue-frontend-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Kostiantyn Draliuk"
                },
                {
                    "type": "p",
                    "text": "Ukraine"
                },
                {
                    "type": "p",
                    "text": "Kostiantyn is a frontend developer with eight years of commercial experience. His primary expertise lies in Vue.js, where he has demonstrated exceptional proficiency in building robust and scalable web applications."
                },
                {
                    "type": "p",
                    "text": "On top of his development skills, he has a great eye for design and works alongside the designers in his teams using Figma."
                },
                {
                    "type": "p",
                    "text": "He has a proven track record of working with Proxify clients, delivering outstanding results with both high output and high code quality."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Software Engineer (Frontend Developer / VueJs Developer / Svelte Developer)"
                },
                {
                    "type": "list",
                    "items": [
                        "Developed high-performance micro-frontends using cutting-edge technologies like VueJS, Svelte, and TypeScript, resulting in improved application performance and scalability.",
                        "Played a key role in designing and implementing a micro-frontend applications, component libraries, and routing, which allowed for faster development, easier maintenance, and consistent user experiences across multiple applications.",
                        "Collaborated with cross-functional teams, including UX/UI designers, backend developers, and product managers, in an Agile environment to ensure smooth communication, timely delivery of features, and overall project success.",
                        "Actively participated in code reviews, ensuring adherence to best practices and high-quality code standards.",
                        "Implemented and maintained unit and integration tests, resulting in increased application stability and reduced time spent on bug fixes.",
                        "Demonstrated commitment to continuous learning and professional development by staying up-to-date with the latest frontend technologies and industry trends, leading to adopting new tools and practices that improved team efficiency and product quality."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Full-stack Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Successfully delivered a wide range of projects for diverse clients, including the development of websites from scratch, enhancements to existing frontends, and the creation of custom web applications, showcasing adaptability and versatility in addressing varied client needs.",
                        "Achieved outstanding results in speed optimization, SEO optimization, and quality audits, leading to increased client satisfaction, improved site rankings, and reduced page load times.",
                        "Expertly utilized a diverse range of frontend and backend technologies, including VueJS, Laravel, NodeJS, AdonisJs, and ExpressJS, to develop tailor-made solutions that met client requirements and exceeded expectations.",
                        "Developed and maintained component libraries and design systems in VueJS, ensuring a seamless user experience, improved maintainability, and efficient UI development across multiple projects.",
                        "Collaborated with clients to gather requirements, provide estimates, and offer technical guidance, ensuring clear communication, timely delivery, and alignment with project goals.",
                        "Effectively managed projects using tools like Jira, Azure, and YouTrack, prioritizing tasks, tracking progress, and providing regular status updates to clients.",
                        "Proactively identified and addressed performance bottlenecks, security vulnerabilities, and code maintainability issues, resulting in the delivery of robust, secure, and maintainable web applications.",
                        "Kept up-to-date with the latest industry trends, best practices, and emerging technologies, incorporating them into projects when appropriate to deliver cutting-edge solutions and stay competitive in the market."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Developed high-quality frontend solutions for Magento and OpenCart e-commerce platforms, consistently meeting project deadlines and exceeding client expectations with visually appealing and user-friendly designs.",
                        "Leveraged expertise in Git, Docker, and Linux to optimize development workflows, enhance collaboration among team members, and ensure efficient deployment and maintenance of applications.",
                        "Mentored colleagues in frontend development best practices, fostering a collaborative and supportive team environment that encouraged skill development and knowledge sharing.",
                        "Acted as a key contributor in the planning and execution of projects, working closely with project managers and other team members to gather requirements, estimate timelines, and allocate resources effectively.",
                        "Implemented responsive design principles, ensuring seamless and consistent user experiences across various devices and browsers, resulting in increased customer engagement and reduced bounce rates.",
                        "Proactively identified and resolved performance issues, bugs, and usability concerns, leading to improved site stability, increased conversion rates, and overall enhanced user satisfaction.",
                        "Participated in regular code reviews, providing constructive feedback and suggestions for improvement, leading to higher quality code and reduced technical debt.",
                        "Stayed up-to-date with the latest industry trends and frontend technologies, incorporating new tools and best practices to improve team efficiency, product quality, and client satisfaction."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Frontend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Crafted visually stunning and responsive frontend designs for a variety of CMS-based websites using Photoshop and Zeplin mockups, resulting in increased client satisfaction and enhanced user experiences.",
                        "Developed responsive email templates that significantly improved client engagement, open rates, and click-through rates by optimizing for various devices and email clients.",
                        "Demonstrated proficiency in CSS, HTML, JavaScript, PHP, Angular, and Git to deliver exceptional results, showcasing adaptability and a strong foundation in frontend development technologies.",
                        "Collaborated with cross-functional teams, including designers, developers, and project managers, to ensure clear communication, efficient workflows, and alignment with project goals.",
                        "Implemented web accessibility best practices, ensuring that websites were usable and inclusive for a diverse range of users, leading to increased site traffic and improved brand reputation.",
                        "Actively participated in code reviews and knowledge sharing sessions, contributing to the continuous improvement of the team's coding standards and practices.",
                        "Worked with various CMS platforms, gaining valuable experience in customizing and extending their functionality to meet unique client requirements.",
                        "Kept up-to-date with the latest industry trends, best practices, and emerging frontend technologies, applying new knowledge and techniques to projects as appropriate."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Engineering and Systems Programming"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/nicolas-vue-php-fullstack-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Nicolas Tellez"
                },
                {
                    "type": "p",
                    "text": "Argentina"
                },
                {
                    "type": "p",
                    "text": "Nicolas is a Fullstack and Integrations Developer with seven years of experience working in industries like education, government, transportation, and consulting in both Argentina and the US. He has gained strong technical skills and knows how to adapt to different business needs."
                },
                {
                    "type": "p",
                    "text": "Along with his technical work, Nicolas has been responsible for technical hiring, choosing staff, and helping with internal technical training. His leadership has helped build solid development teams and improve technical knowledge within the companies he's worked for."
                },
                {
                    "type": "p",
                    "text": "Nicolas is skilled in integrating systems with Hubspot and Mercadopago using APIs and webhooks. He has also worked with Mulesoft products to create solutions for both on-premise and cloud-based systems. He is experienced in designing data integration solutions and building Firebase-based projects."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Principal Technical Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Customer-facing position providing solutions on Mulesoft products and services for integrated solutions for on-premise and cloud.",
                        "Member of the Core Runtime team."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Software Engineer"
                },
                {
                    "type": "list",
                    "items": [
                        "Design and development of communication solutions for the organization.",
                        "Involved and responsible for the delivery process as a sysadmin but also self-carry projects as a Full Stack developer."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "NodeJS Backend Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Backend development for Edutech using typescript, NestJs, typeORM.",
                        "Worked on the Integration with Hubspot and Mercadopago by API and webhooks."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Fullstack Developer"
                },
                {
                    "type": "p",
                    "text": "Development of an educational site, ruins VueJs and Nuxt, based on the Firebase suite (Auth, Firestore, Storage, Hosting, and Functions) and custom integration with Stripe and Vimeo."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Development/Operations Lead"
                },
                {
                    "type": "list",
                    "items": [
                        "Development and infrastructure lead of the company. Involved and responsible for the delivery process.",
                        "Responsible for technical hiring and staff selection. Self-carried critical projects as Full Stack developer. (PHP/Laravel/JS/Vue) Internal technical training."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Product Owner / FullStack Developer"
                },
                {
                    "type": "p",
                    "text": "Led the development of a system to enable artists to submit information and data to run contests for not only visibility/exposure but also potentially earn financial support from the government."
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Independent Information Technology Consultant"
                },
                {
                    "type": "list",
                    "items": [
                        "Custom application and product development as a fullstack developer using PHP/Laravel, VueJS, and mongoDB/MySQL.",
                        "Unix sysadmin working with AWS/Azure/GoogleCloud. Provided project management services. Infrastructure support and strategy planning Unix Security assessment and hardening."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Web Middleware Specialist"
                },
                {
                    "type": "list",
                    "items": [
                        "L3/L4 support the most widely used web-serving product types and brands. Performed the environment build-outs.",
                        "Provided coordination, assessment, and fixes for PCI security compliance rules involving access control, data protection, encryption, and best practices to allow systems to handle credit card transactions.",
                        "In charge of the offshore’s web middleware team to act as work queue manager and region SME. Management of thousands of SSL certificates across many platforms."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Sc. Certified MuleSoft Developer"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Sc. Certified Websphere Network Deployment Administration"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/santiago-anaya-vue-ruby-fullstack-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Santiago Anaya"
                },
                {
                    "type": "p",
                    "text": "Argentina"
                },
                {
                    "type": "p",
                    "text": "Santiago is a fullstack engineer with over six years of commercial experience, focusing on frontend development. He is an expert in Vue.js. On the backend, he uses Ruby on Rails and various relational databases, particularly PostgreSQL."
                },
                {
                    "type": "p",
                    "text": "He is adept at increasing app performance and enhancing user experience, significantly contributing to every engagement he undertakes. His experience as a Tech and Engineering Lead highlights his leadership capabilities and ability to drive technical initiatives."
                },
                {
                    "type": "p",
                    "text": "Santiago's combination of technical expertise, leadership skills, and dedication to improving application performance makes him a valuable asset to any development team."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Engineer Manager"
                },
                {
                    "type": "list",
                    "items": [
                        "GROUP TECH LEAD & DEVELOPER ENGINEER MANAGER.",
                        "APP DEVELOPMENT - WISBOO.COM / A dynamic application tailored for content creators, enabling them to craft and sell courses through personalized websites.",
                        "Responsible for the roles of Engineer Manager and Tech Lead.",
                        "Helped the team with contributing significantly to a dedicated working cell focused on a specific component of the app."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Full Stack Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "APP DEVELOPMENT - KEEPCON.COM / An innovative application for large corporations, aggregating messages from various social media platforms for efficient operator response.",
                        "Responsible for a strategic migration to Vue.js.",
                        "Helped the team with enhancing the app's performance and user experience."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Full Stack Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "APP DEVELOPMENT - XUBIO.COM / A specialized application for accountants, designed to manage client or company accounts with features tailored to different countries.",
                        "Responsible for providing a robust and user-friendly platform for accounting needs."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Full Stack Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "WEB APPLICATIONS DEVELOPMENT.",
                        "Responsible for user-friendly and efficient platforms."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Systems Engeneering"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/stelios-vue-node-fullstack-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Stelios Kitziris"
                },
                {
                    "type": "p",
                    "text": "Greece"
                },
                {
                    "type": "p",
                    "text": "Stelios is a fullstack developer with over six years of commercial experience, specializing in the MEVN stack."
                },
                {
                    "type": "p",
                    "text": "He is skilled in building scalable software solutions and has successfully led the development of several large-scale and business-critical systems. Also, he is interested in emerging technologies such as Web3 and AI."
                },
                {
                    "type": "p",
                    "text": "Stelios holds a Master’s Degree in Computing, equipping him with a thorough understanding of the tech landscape. His perfectionist approach is ideal for projects that benefit from meticulous attention to detail."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Senior Frontend Engineer"
                },
                {
                    "type": "p",
                    "text": "White Hat Gaming is a casino game provider company in Malta:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using Vue.js version 3 with composition API for front end development Software Architecture;",
                        "Planning and Development for in-house Web Apps; Unit testing."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Lead Node.js Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Provided effective troubleshooting and remediation for web applications;",
                        "Interfaced with clients to identify business requirements;",
                        "Utilized the latest software development tools, techniques, and approaches. Using Node.js, Express.js, Vue.js, React.js, MongoDB, PostgreSQL. Brought forth a passion and dedication to software development;",
                        "Utilized the latest software development tools, techniques, and approaches."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Lead Software Engineer"
                },
                {
                    "type": "p",
                    "text": "Draxis was a company that created applications for European unions, with a focus on agricultural applications:"
                },
                {
                    "type": "list",
                    "items": [
                        "Performed software architecture, planning, and development for web apps, and mobile apps;",
                        "Designed and developed large-scale ICT systems, funded by international donors, the Horizon 2020 program, and the European Commission."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Full-Stack Developer"
                },
                {
                    "type": "p",
                    "text": "Archirodon Group N.V. was a construction company focused on building artificial lakes and skyscrapers."
                },
                {
                    "type": "list",
                    "items": [
                        "Developed web applications;",
                        "Created, communicated, and managed project plans."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "p",
                    "text": "It was an internship. 24 Media Digital Media Group is a big journal company in Greece."
                },
                {
                    "type": "list",
                    "items": [
                        "Created websites and web applications."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "p",
                    "text": "It was an ads company, and Stelios was creating websites."
                },
                {
                    "type": "list",
                    "items": [
                        "Developed and supported the website;",
                        "Performed SEO of the platform."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "MSc. Computing"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Computer Science"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/tomek-vue-node-fullstack-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tomek Jankowski"
                },
                {
                    "type": "p",
                    "text": "Poland"
                },
                {
                    "type": "p",
                    "text": "Tomek is a fullstack developer with over 17 years of commercial experience. Over the years, he has transitioned from using PHP to mastering modern tech stacks, focusing on Vue.js and Node.js in the last six years. His expertise in these technologies has driven the development and support of robust, high-traffic systems."
                },
                {
                    "type": "p",
                    "text": "As the Technical Director at a web development agency for over a decade, he has successfully managed a team of 12 to 17 people and overseen projects for high-profile clients across various sectors."
                },
                {
                    "type": "p",
                    "text": "Tomek has consistently received high appreciation from Proxify clients for his outstanding contributions and leadership."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Technical Director"
                },
                {
                    "type": "list",
                    "items": [
                        "Feature design, requirements for the dev team.",
                        "Development of more advanced or mission-critical features.",
                        "Code reviews + support for the other dev/front-end.",
                        "Technical meetings with clients.",
                        "Infrastructure design and maintenance/automation (GCP last 10 years).",
                        "Time & cost estimates."
                    ]
                },
                {
                    "type": "p",
                    "text": "Systems That Built"
                },
                {
                    "type": "list",
                    "items": [
                        "Multi-channel (eBay, Amazon + web front) eCommerce solution with advanced modules to calculate optimal selling prices, complex product definitions & shipping rules, promotions, and integrations with couriers & warehousing solutions.",
                        "Public sector CMS with content versioning, advanced access control, publishing flows, widget-based content editor, dynamic forms module with manageable logic, validation, and payments; eventually used by councils for most citizen-council interactions (about 80 forms per website, i.e., bus passes, reporting issues, bins).",
                        "Charity donation platform - used to this date by a number of medium to large charities in the UK, integrated with MS Dynamics and other CRM solutions, also integrated with Gov.UK.",
                        "Project management - dedicated for media agencies, used internally for about 4 years. Too many features to list, definitely more than Basecamp/TeamWork (leaders at the time).",
                        "SEO campaign management - dedicated to marketing agencies, integrated into all relevant tools in the world of online marketing, report generation, prospect negotiations, content writing, time tracking, campaign schedule planning, task lists, etc.",
                        "Many bespoke websites: penny auctions, online poster design, search directories of various sorts, award applications, recruitment...the list goes on."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer, then Lead Developer"
                },
                {
                    "type": "p",
                    "text": "i3MEDIA was a small agency building websites for local businesses."
                },
                {
                    "type": "list",
                    "items": [
                        "Developed the first bespoke CMS, which became the core product, the second version of which was implemented on some nationally recognized websites in 2010."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "p",
                    "text": "Managed to complete 3 commercial projects."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "MSc. Computer Science"
                }
            ]
        },
        {
            "url": "https://vuejs.org/developers/vardan-vue-node-fullstack-developer.html",
            "title": "Vue Developer | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 2,
                    "text": "Vardan Hayrapetyan"
                },
                {
                    "type": "p",
                    "text": "Armenia"
                },
                {
                    "type": "p",
                    "text": "Vardan is a frontend-heavy fullstack developer with expertise in Vue.js, and Node.js. With six years of experience, he has worked on several large-scale web applications, particularly excelling in the real estate sector."
                },
                {
                    "type": "p",
                    "text": "He is known for his leadership skills, guiding development teams toward completing high-quality projects that often exceed expectations. His problem-solving and management abilities ensure successful project outcomes."
                },
                {
                    "type": "p",
                    "text": "Beyond his technical proficiency, Vardan's analytical skills are enhanced by his Master’s in International Relations, adding a unique perspective to his approach in technology projects."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Compensation"
                },
                {
                    "type": "p",
                    "text": "No other costs."
                },
                {
                    "type": "p",
                    "text": "One month trial period, thereafter, one month notice period."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Selected experience"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Tech Lead"
                },
                {
                    "type": "list",
                    "items": [
                        "Led the development of the HR Help Desk, Ticketing, Inventory, Documents Management and Performance Reviews projects.",
                        "Participated in code reviews and provided constructive feedback to colleagues to ensure best practices and high-quality code.",
                        "Led post-project evaluations to identify areas for improvement and implemented process improvements for future projects."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Tech Lead"
                },
                {
                    "type": "list",
                    "items": [
                        "Effectively communicated project progress, risks, and issues to stakeholders, ensuring that all parties were informed and aligned throughout the project.",
                        "Conducted a thorough analysis of existing processes and identified areas for improvement, using this knowledge to develop and implement new processes that better aligned with business needs and objectives.",
                        "Switched the MVP version by defining the project structure and revisiting the architecture."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Web Developer"
                },
                {
                    "type": "list",
                    "items": [
                        "Developed the Remix official website's user interface and core functionalities, ensuring mobile responsiveness;",
                        "Utilized GitHub Pages to deploy the React application;",
                        "Implemented a custom section scroller for enhanced user experience."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Tech Lead"
                },
                {
                    "type": "list",
                    "items": [
                        "Mentored 4 junior frontend developers, enhancing their proficiency in JavaScript and Vue.js;",
                        "Collaborated closely with the PM to ensure alignment with project plans, timelines, and billing;",
                        "Developed and constructed dynamic user interfaces within Agile environments for enterprise clients with valuations of up to $3 billion;",
                        "Participated actively in all development phases, from conceptualization and functional design to detailed implementation, debugging, and software solution deployment;",
                        "Supervised and coordinated a team of six employees, overseeing multiple critical business processes;",
                        "Led the design of the project's frontend architecture, leading weekly team meetings and formulating and executing strategies and plans;",
                        "Provided 24/7 technical support to maintain the seamless operation of the website;",
                        "Generated wireframes, mockups, and prototypes to communicate design concepts visually;",
                        "Implemented responsive design techniques, ensuring optimal user interface performance across various devices and screen sizes;",
                        "Contributed to enhancing the software development by proposing new tools and implementing best practices;",
                        "Conducted user research and usability testing, gathering feedback and pinpointing areas for improvement;",
                        "Played a key role in documenting project requirements, technical specifications, and development procedures."
                    ]
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "Tech Lead"
                },
                {
                    "type": "list",
                    "items": [
                        "Supervised a web development team, which included contract and off-shore developers, and held supervisory responsibilities over employees;",
                        "Established team-wide standards for quality processes and methodologies, ensuring that all applications met the highest quality benchmarks;",
                        "Provided mentorship and support to fellow team members, functioning as a team leader and in client interactions;",
                        "Led team meetings and organized task prioritization to ensure the punctual delivery of projects met required standards;",
                        "Maintained vigilant oversight across all facets of application development to guarantee alignment with quality standards;",
                        "Created comprehensive documentation for development tasks and Product Requirement Documents (PRD), ensuring clarity for team members and stakeholders;",
                        "Orchestrated software release planning and execution, encompassing testing, deployment, and documentation processes;",
                        "Conducted code reviews of team members' work, offering constructive feedback and guidance to enhance code quality."
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Education"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "MSc. International Relations and Affairs"
                },
                {
                    "type": "header",
                    "level": 5,
                    "text": "BSc. Caucasian Studies"
                }
            ]
        },
        {
            "url": "https://vuejs.org/ecosystem/newsletters",
            "title": "Community Newsletters | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Community Newsletters​"
                },
                {
                    "type": "p",
                    "text": "There are many great newsletters / Vue-dedicated blogs from the community bringing you latest news and happenings in the Vue ecosystem. Here is a non-exhaustive list of active ones that we have come across:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue.js Feed",
                        "Michael Thiessen",
                        "Jakub Andrzejewski",
                        "Weekly Vue News",
                        "Vue.js Developers Newsletter"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you know a great one that isn't already included, please submit a pull request using the link below!"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/ecosystem/themes",
            "title": "Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Themes"
                },
                {
                    "type": "p",
                    "text": "Check out the themes, UI Kits, and plugins. You can see how a real-world application is built with Vue by our partners."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creative Tim"
                },
                {
                    "type": "p",
                    "text": "With the examples below built by our partners fromCreative Timyou can see how a real-world application is built, the technology stack behind it and how most of the concepts you've learned so far apply in a real-world application."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Argon Design System"
                },
                {
                    "type": "p",
                    "text": "Free Vue.js Design System"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Black Dashboard Pro"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js Admin Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Paper Dashboard 2 Pro"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js Admin Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Material Kit"
                },
                {
                    "type": "p",
                    "text": "Free Vue.js UI Kit"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Black Dashboard"
                },
                {
                    "type": "p",
                    "text": "Free Vue.js Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Now UI Kit Pro"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js UI Kit"
                },
                {
                    "type": "p",
                    "text": "$79"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "MDBootstrap"
                },
                {
                    "type": "p",
                    "text": "Check out the themes, UI Kits and plugins below built by our partners fromMDBootstrap. Learn how to use Vue in professional projects along such technologies as Bootstrap. Templates & ready components make your development faster and more efficient."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Material Bootstrap Pro"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js UI Kit"
                },
                {
                    "type": "p",
                    "text": "$199"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Material Bootstrap Kit"
                },
                {
                    "type": "p",
                    "text": "Free Vue.js UI Kit"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Admin Bootstrap Pro"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js Templates Pack"
                },
                {
                    "type": "p",
                    "text": "$199"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Admin Bootstrap"
                },
                {
                    "type": "p",
                    "text": "Free Vue.js Templates Pack"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Calendar Bootstrap"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js Plugin"
                },
                {
                    "type": "p",
                    "text": "$199"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Color Picker Bootstrap"
                },
                {
                    "type": "p",
                    "text": "Premium Vue.js Plugin"
                },
                {
                    "type": "p",
                    "text": "$199"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "PrimeVue"
                },
                {
                    "type": "p",
                    "text": "The open-source UI component libraryPrimeVueoffers over 90 flexible components to build your apps with! They have a ton of different component themes and application templates available to get the look & feel that suits you best."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sakai"
                },
                {
                    "type": "p",
                    "text": "Free Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Apollo"
                },
                {
                    "type": "p",
                    "text": "Next-Gen Application Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Atlantis"
                },
                {
                    "type": "p",
                    "text": "Premium Admin Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Freya"
                },
                {
                    "type": "p",
                    "text": "Premium Admin Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Ultima"
                },
                {
                    "type": "p",
                    "text": "Material Design Admin Template"
                },
                {
                    "type": "p",
                    "text": "$79"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Diamond"
                },
                {
                    "type": "p",
                    "text": "PrimeOne Design Admin Template"
                },
                {
                    "type": "p",
                    "text": "$59"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Flatlogic"
                },
                {
                    "type": "p",
                    "text": "Check out the admin dashboard templates built by our partners fromFlatlogic. With these themes you can see how real applications are built. Additionally, these templates will help you to start a new application and save you time and money."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sing App Vue"
                },
                {
                    "type": "p",
                    "text": "Vue Admin Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "$99"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sing App Vue Node.js"
                },
                {
                    "type": "p",
                    "text": "Vue Admin Dashboard Template with Node.JS Backend"
                },
                {
                    "type": "p",
                    "text": "$149"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Light Blue Vue"
                },
                {
                    "type": "p",
                    "text": "Vue Admin Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "$99"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Light Blue Vue Admin"
                },
                {
                    "type": "p",
                    "text": "Free and Open Source Vue JS Template for Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sing App Vue Dashboard"
                },
                {
                    "type": "p",
                    "text": "Free and Open Source Vue.js Admin Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Light Blue Vue Node.js"
                },
                {
                    "type": "p",
                    "text": "Vue Admin Template with Node.JS Backend"
                },
                {
                    "type": "p",
                    "text": "$149"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "WrapPixel"
                },
                {
                    "type": "p",
                    "text": "Check out topdashboard templatesbuilt by our partners fromWrapPixel. Download highly customizableVue templatesto start building your real time web application quickly to save hundreds of hours in development and design."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Spike Free VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Spike Vue3 Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Powerful Vue3 Dashboard Theme"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "MaterialPro Vue3 Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Vue 3 + Vuetify 3 + Vite + Typescript"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Free MaterialPro Vuetify Admin"
                },
                {
                    "type": "p",
                    "text": "Free Vuetify Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Free AdminPro VueJs Lite"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "AdminPro Vue3 + Vuetify Dashboard"
                },
                {
                    "type": "p",
                    "text": "Vue3 + Vite + Vuetify + Typescript"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CodedThemes"
                },
                {
                    "type": "p",
                    "text": "Explore Vue.js admin dashboard templates crafted with developers in mind by our partners atCodedThemes. Download now to expedite the development of your real-time web applications, saving you countless hours in design and development."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Free Berry Vuetify VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJs Admin Template with well known desing of Berry"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Berry Vue3 Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Discover our visually captivating Vue 3 Dashboard Theme!"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Mantis Vue3 Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Simple yet rebust to start any development with latest VueJs and Vuetify"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Free Mantis Vuetify VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "Free Vuetify Dashboard Template with simplest design and code"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Free Able Pro VueJs"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source Able pro VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Able Pro Vue3 + Vuetify Dashboard"
                },
                {
                    "type": "p",
                    "text": "Vue3 + Vite + Vuetify + Typescript"
                },
                {
                    "type": "p",
                    "text": "$11"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ThemeSelection"
                },
                {
                    "type": "p",
                    "text": "Check out the admindashboard templatesbuilt by our partners from ThemeSelection.\n\nThey provide production-ready and highly customizable Free & PremiumVue Admin Template, Vue + Laravel & NuxtJS Admin Templates to build modern web applications in no time!"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Materio - Vue Admin Template"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJS Admin inspired by Material Design"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Materio - Vue Admin Template"
                },
                {
                    "type": "p",
                    "text": "Most Powerful & Comprehensive VueJS Admin built for developers"
                },
                {
                    "type": "p",
                    "text": "$69"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sneat - Vue Laravel Admin"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJS Laravel Admin using Sneat Design System"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Sneat - Vue Laravel Admin"
                },
                {
                    "type": "p",
                    "text": "Production Ready, Carefully Crafted VueJS Laravel Dashboard"
                },
                {
                    "type": "p",
                    "text": "$79"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Materio - NuxtJS Dashboard"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source NuxtJS Admin inspired by Material Design"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Materio - NuxtJS Dashboard"
                },
                {
                    "type": "p",
                    "text": "Incredibly versatile, flexible and powerful NuxtJS Admin Template"
                },
                {
                    "type": "p",
                    "text": "$79"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "AdminMart"
                },
                {
                    "type": "p",
                    "text": "Check out topVue dashboard templatesbuilt by our partners fromAdminMart. Download them to speed up your web development process and build top class web applications."
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Matdash Free Vuejs Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Matdash Vuejs Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Empowering Developers with Unmatched Flexibility and Power"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Modernize Vuetify 3 & Vue 3 Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Developer Friendly & Most Powerful Vue Admin Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "$49"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Modernize Free Vuetify + Vue js Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Free & Open Source VueJs Admin Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Modernize Free NuxtJs Admin Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "Free NuxtJs Dashboard Template"
                },
                {
                    "type": "p",
                    "text": "FREE"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Modernize Nuxt Js Admin Dashboard"
                },
                {
                    "type": "p",
                    "text": "Rapidly Build Powerful Dashboards with NuxtJs - Vuetify: A Developer's Dream"
                },
                {
                    "type": "p",
                    "text": "$49"
                }
            ]
        },
        {
            "url": "https://vuejs.org/error-reference",
            "title": "Production Error Code Reference | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Production Error Code Reference​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runtime Errors​"
                },
                {
                    "type": "p",
                    "text": "In production builds, the 3rd argument passed to the following error handler APIs will be a short code instead of the full information string:"
                },
                {
                    "type": "list",
                    "items": [
                        "app.config.errorHandler",
                        "onErrorCaptured(Composition API)",
                        "errorCaptured(Options API)"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following table maps the codes to their original full information strings."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Compiler Errors​"
                },
                {
                    "type": "p",
                    "text": "The following table provides a mapping of the production compiler error codes to their original messages."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/examples",
            "title": "Examples | Vue.js",
            "content": []
        },
        {
            "url": "https://vuejs.org/glossary",
            "title": "Glossary | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Glossary​"
                },
                {
                    "type": "p",
                    "text": "This glossary is intended to provide some guidance about the meanings of technical terms that are in common usage when talking about Vue. It is intended to bedescriptiveof how terms are commonly used, not aprescriptivespecification of how they must be used. Some terms may have slightly different meanings or nuances depending on the surrounding context."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "async component​"
                },
                {
                    "type": "p",
                    "text": "Anasync componentis a wrapper around another component that allows for the wrapped component to be lazy loaded. This is typically used as a way to reduce the size of the built.jsfiles, allowing them to be split into smaller chunks that are loaded only when required."
                },
                {
                    "type": "p",
                    "text": "Vue Router has a similar feature for thelazy loading of route components, though this does not use Vue's async components feature."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Async Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "compiler macro​"
                },
                {
                    "type": "p",
                    "text": "Acompiler macrois special code that is processed by a compiler and converted into something else. They are effectively a clever form of string replacement."
                },
                {
                    "type": "p",
                    "text": "Vue'sSFCcompiler supports various macros, such asdefineProps(),defineEmits()anddefineExpose(). These macros are intentionally designed to look like normal JavaScript functions so that they can leverage the same parser and type inference tooling around JavaScript / TypeScript. However, they are not actual functions that are run in the browser. These are special strings that the compiler detects and replaces with the real JavaScript code that will actually be run."
                },
                {
                    "type": "p",
                    "text": "Macros have limitations on their use that don't apply to normal JavaScript code. For example, you might think thatconst dp = definePropswould allow you to create an alias fordefineProps, but it'll actually result in an error. There are also limitations on what values can be passed todefineProps(), as the 'arguments' have to be processed by the compiler and not at runtime."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "<script setup>-defineProps()&defineEmits()",
                        "<script setup>-defineExpose()"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "component​"
                },
                {
                    "type": "p",
                    "text": "The termcomponentis not unique to Vue. It is common to many UI frameworks. It describes a chunk of the UI, such as a button or checkbox. Components can also be combined to form larger components."
                },
                {
                    "type": "p",
                    "text": "Components are the primary mechanism provided by Vue to split a UI into smaller pieces, both to improve maintainability and to allow for code reuse."
                },
                {
                    "type": "p",
                    "text": "A Vue component is an object. All properties are optional, but either a template or render function is required for the component to render. For example, the following object would be a valid component:"
                },
                {
                    "type": "code",
                    "code": "constHelloWorldComponent={render() {return'Hello world!'}}"
                },
                {
                    "type": "p",
                    "text": "In practice, most Vue applications are written usingSingle-File Components(.vuefiles). While these components may not appear to be objects at first glance, the SFC compiler will convert them into an object, which is used as the default export for the file. From an external perspective, a.vuefile is just an ES module that exports a component object."
                },
                {
                    "type": "p",
                    "text": "The properties of a component object are usually referred to asoptions. This is where theOptions APIgets its name."
                },
                {
                    "type": "p",
                    "text": "The options for a component define how instances of that component should be created. Components are conceptually similar to classes, though Vue doesn't use actual JavaScript classes to define them."
                },
                {
                    "type": "p",
                    "text": "The term component can also be used more loosely to refer to component instances."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Component Basics"
                    ]
                },
                {
                    "type": "p",
                    "text": "The word 'component' also features in several other terms:"
                },
                {
                    "type": "list",
                    "items": [
                        "async component",
                        "dynamic component",
                        "functional component",
                        "Web Component"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "composable​"
                },
                {
                    "type": "p",
                    "text": "The termcomposabledescribes a common usage pattern in Vue. It isn't a separate feature of Vue, it's just a way of using the framework'sComposition API."
                },
                {
                    "type": "list",
                    "items": [
                        "A composable is a function.",
                        "Composables are used to encapsulate and reuse stateful logic.",
                        "The function name usually begins withuse, so that other developers know it's a composable.",
                        "The function is typically expected to be called during the synchronous execution of a component'ssetup()function (or, equivalently, during the execution of a<script setup>block). This ties the invocation of the composable to the current component context, e.g. via calls toprovide(),inject()oronMounted().",
                        "Composables typically return a plain object, not a reactive object. This object usually contains refs and functions and is expected to be destructured within the calling code."
                    ]
                },
                {
                    "type": "p",
                    "text": "As with many patterns, there can be some disagreement about whether specific code qualifies for the label. Not all JavaScript utility functions are composables. If a function doesn't use the Composition API then it probably isn't a composable. If it doesn't expect to be called during the synchronous execution ofsetup()then it probably isn't a composable. Composables are specifically used to encapsulate stateful logic, they are not just a naming convention for functions."
                },
                {
                    "type": "p",
                    "text": "SeeGuide - Composablesfor more details about writing composables."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Composition API​"
                },
                {
                    "type": "p",
                    "text": "TheComposition APIis a collection of functions used to write components and composables in Vue."
                },
                {
                    "type": "p",
                    "text": "The term is also used to describe one of the two main styles used to write components, the other being theOptions API. Components written using the Composition API use either<script setup>or an explicitsetup()function."
                },
                {
                    "type": "p",
                    "text": "See theComposition API FAQfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "custom element​"
                },
                {
                    "type": "p",
                    "text": "Acustom elementis a feature of theWeb Componentsstandard, which is implemented in modern web browsers. It refers to the ability to use a custom HTML element in your HTML markup to include a Web Component at that point in the page."
                },
                {
                    "type": "p",
                    "text": "Vue has built-in support for rendering custom elements and allows them to be used directly in Vue component templates."
                },
                {
                    "type": "p",
                    "text": "Custom elements should not be confused with the ability to include Vue components as tags within another Vue component's template. Custom elements are used to create Web Components, not Vue components."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Vue and Web Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "directive​"
                },
                {
                    "type": "p",
                    "text": "The termdirectiverefers to template attributes beginning with thev-prefix, or their equivalent shorthands."
                },
                {
                    "type": "p",
                    "text": "Built-in directives includev-if,v-for,v-bind,v-onandv-slot."
                },
                {
                    "type": "p",
                    "text": "Vue also supports creating custom directives, though they are typically only used as an 'escape hatch' for manipulating DOM nodes directly. Custom directives generally can't be used to recreate the functionality of the built-in directives."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Template Syntax - Directives",
                        "Guide - Custom Directives"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "dynamic component​"
                },
                {
                    "type": "p",
                    "text": "The termdynamic componentis used to describe cases where the choice of which child component to render needs to be made dynamically. Typically, this is achieved using<component :is=\"type\">."
                },
                {
                    "type": "p",
                    "text": "A dynamic component is not a special type of component. Any component can be used as a dynamic component. It is the choice of component that is dynamic, rather than the component itself."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Components Basics - Dynamic Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "effect​"
                },
                {
                    "type": "p",
                    "text": "Seereactive effectandside effect."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "event​"
                },
                {
                    "type": "p",
                    "text": "The use of events for communicating between different parts of a program is common to many different areas of programming. Within Vue, the term is commonly applied to both native HTML element events and Vue component events. Thev-ondirective is used in templates to listen for both types of event."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Event Handling",
                        "Guide - Component Events"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "fragment​"
                },
                {
                    "type": "p",
                    "text": "The termfragmentrefers to a special type ofVNodethat is used as a parent for other VNodes, but which doesn't render any elements itself."
                },
                {
                    "type": "p",
                    "text": "The name comes from the similar concept of aDocumentFragmentin the native DOM API."
                },
                {
                    "type": "p",
                    "text": "Fragments are used to support components with multiple root nodes. While such components might appear to have multiple roots, behind the scenes they use a fragment node as a single root, as a parent of the 'root' nodes."
                },
                {
                    "type": "p",
                    "text": "Fragments are also used by the template compiler as a way to wrap multiple dynamic nodes, e.g. those created viav-fororv-if. This allows for extra hints to be passed to theVDOMpatching algorithm. Much of this is handled internally, but one place you may encounter this directly is using akeyon a<template>tag withv-for. In that scenario, thekeyis added as apropto the fragment VNode."
                },
                {
                    "type": "p",
                    "text": "Fragment nodes are currently rendered to the DOM as empty text nodes, though that is an implementation detail. You may encounter those text nodes if you use$elor attempt to walk the DOM with built-in browser APIs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "functional component​"
                },
                {
                    "type": "p",
                    "text": "A component definition is usually an object containing options. It may not appear that way if you're using<script setup>, but the component exported from the.vuefile will still be an object."
                },
                {
                    "type": "p",
                    "text": "Afunctional componentis an alternative form of component that is declared using a function instead. That function acts as therender functionfor the component."
                },
                {
                    "type": "p",
                    "text": "A functional component cannot have any state of its own. It also doesn't go through the usual component lifecycle, so lifecycle hooks can't be used. This makes them slightly lighter than normal, stateful components."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Render Functions & JSX - Functional Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "hoisting​"
                },
                {
                    "type": "p",
                    "text": "The termhoistingis used to describe running a section of code before it is reached, ahead of other code. The execution is 'pulled up' to an earlier point."
                },
                {
                    "type": "p",
                    "text": "JavaScript uses hoisting for some constructs, such asvar,importand function declarations."
                },
                {
                    "type": "p",
                    "text": "In a Vue context, the template compiler appliesstatic hoistingto improve performance. When converting a template to a render function, VNodes that correspond to static content can be created once and then reused. These static VNodes are described as hoisted because they are created outside the render function, before it runs. A similar form of hoisting is applied to static objects or arrays that are generated by the template compiler."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Rendering Mechanism - Static Hoisting"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "in-DOM template​"
                },
                {
                    "type": "p",
                    "text": "There are various ways to specify a template for a component. In most cases the template is provided as a string."
                },
                {
                    "type": "p",
                    "text": "The termin-DOM templaterefers to the scenario where the template is provided in the form of DOM nodes, instead of a string. Vue then converts the DOM nodes into a template string usinginnerHTML."
                },
                {
                    "type": "p",
                    "text": "Typically, an in-DOM template starts off as HTML markup written directly in the HTML of the page. The browser then parses this into DOM nodes, which Vue then uses to read off theinnerHTML."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Creating an Application - In-DOM Root Component Template",
                        "Guide - Component Basics - in-DOM Template Parsing Caveats",
                        "Options: Rendering - template"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "inject​"
                },
                {
                    "type": "p",
                    "text": "Seeprovide / inject."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "lifecycle hooks​"
                },
                {
                    "type": "p",
                    "text": "A Vue component instance goes through a lifecycle. For example, it is created, mounted, updated, and unmounted."
                },
                {
                    "type": "p",
                    "text": "Thelifecycle hooksare a way to listen for these lifecycle events."
                },
                {
                    "type": "p",
                    "text": "With the Options API, each hook is provided as a separate option, e.g.mounted. The Composition API uses functions instead, such asonMounted()."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Lifecycle Hooks"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "macro​"
                },
                {
                    "type": "p",
                    "text": "Seecompiler macro."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "named slot​"
                },
                {
                    "type": "p",
                    "text": "A component can have multiple slots, differentiated by name. Slots other than the default slot are referred to asnamed slots."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Slots - Named Slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Options API​"
                },
                {
                    "type": "p",
                    "text": "Vue components are defined using objects. The properties of these component objects are known asoptions."
                },
                {
                    "type": "p",
                    "text": "Components can be written in two styles. One style uses theComposition APIin conjunction withsetup(either via asetup()option or<script setup>). The other style makes very little direct use of the Composition API, instead using various component options to achieve a similar result. The component options that are used in this way are referred to as theOptions API."
                },
                {
                    "type": "p",
                    "text": "The Options API includes options such asdata(),computed,methodsandcreated()."
                },
                {
                    "type": "p",
                    "text": "Some options, such asprops,emitsandinheritAttrs, can be used when authoring components with either API. As they are component options, they could be considered part of the Options API. However, as these options are also used in conjunction withsetup(), it is usually more useful to think of them as shared between the two component styles."
                },
                {
                    "type": "p",
                    "text": "Thesetup()function itself is a component option, so itcouldbe described as part of the Options API. However, this is not how the term 'Options API' is normally used. Instead, thesetup()function is considered to be part of Composition API."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "plugin​"
                },
                {
                    "type": "p",
                    "text": "While the termplugincan be used in a wide variety of contexts, Vue has a specific concept of a plugin as a way to add functionality to an application."
                },
                {
                    "type": "p",
                    "text": "Plugins are added to an application by callingapp.use(plugin). The plugin itself is either a function or an object with aninstallfunction. That function will be passed the application instance and can then do whatever it needs to do."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Plugins"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "prop​"
                },
                {
                    "type": "p",
                    "text": "There are three common uses of the termpropin Vue:"
                },
                {
                    "type": "list",
                    "items": [
                        "Component props",
                        "VNode props",
                        "Slot props"
                    ]
                },
                {
                    "type": "p",
                    "text": "Component propsare what most people think of as props. These are explicitly defined by a component using eitherdefineProps()or thepropsoption."
                },
                {
                    "type": "p",
                    "text": "The termVNode propsrefers to the properties of the object passed as the second argument toh(). These can include component props, but they can also include component events, DOM events, DOM attributes and DOM properties. You'd usually only encounter VNode props if you're working with render functions to manipulate VNodes directly."
                },
                {
                    "type": "p",
                    "text": "Slot propsare the properties passed to a scoped slot."
                },
                {
                    "type": "p",
                    "text": "In all cases, props are properties that are passed in from elsewhere."
                },
                {
                    "type": "p",
                    "text": "While the word props is derived from the wordproperties, the term props has a much more specific meaning in the context of Vue. You should avoid using it as an abbreviation of properties."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Props",
                        "Guide - Render Functions & JSX",
                        "Guide - Slots - Scoped Slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "provide / inject​"
                },
                {
                    "type": "p",
                    "text": "provideandinjectare a form of inter-component communication."
                },
                {
                    "type": "p",
                    "text": "When a componentprovidesa value, all descendants of that component can then choose to grab that value, usinginject. Unlike with props, the providing component doesn't know precisely which component is receiving the value."
                },
                {
                    "type": "p",
                    "text": "provideandinjectare sometimes used to avoidprop drilling. They can also be used as an implicit way for a component to communicate with its slot contents."
                },
                {
                    "type": "p",
                    "text": "providecan also be used at the application level, making a value available to all components within that application."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - provide / inject"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "reactive effect​"
                },
                {
                    "type": "p",
                    "text": "Areactive effectis part of Vue's reactivity system. It refers to the process of tracking the dependencies of a function and re-running that function when the values of those dependencies change."
                },
                {
                    "type": "p",
                    "text": "watchEffect()is the most direct way to create an effect. Various other parts of Vue use effects internally. e.g. component rendering updates,computed()andwatch()."
                },
                {
                    "type": "p",
                    "text": "Vue can only track reactive dependencies within a reactive effect. If a property's value is read outside a reactive effect it'll 'lose' reactivity, in the sense that Vue won't know what to do if that property subsequently changes."
                },
                {
                    "type": "p",
                    "text": "The term is derived from 'side effect'. Calling the effect function is a side effect of the property value being changed."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reactivity in Depth"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "reactivity​"
                },
                {
                    "type": "p",
                    "text": "In general,reactivityrefers to the ability to automatically perform actions in response to data changes. For example, updating the DOM or making a network request when a data value changes."
                },
                {
                    "type": "p",
                    "text": "In a Vue context, reactivity is used to describe a collection of features. Those features combine to form areactivity system, which is exposed via theReactivity API."
                },
                {
                    "type": "p",
                    "text": "There are various different ways that a reactivity system could be implemented. For example, it could be done by static analysis of code to determine its dependencies. However, Vue doesn't employ that form of reactivity system."
                },
                {
                    "type": "p",
                    "text": "Instead, Vue's reactivity system tracks property access at runtime. It does this using both Proxy wrappers andgetter/setterfunctions for properties."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reactivity Fundamentals",
                        "Guide - Reactivity in Depth"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reactivity API​"
                },
                {
                    "type": "p",
                    "text": "TheReactivity APIis a collection of core Vue functions related toreactivity. These can be used independently of components. It includes functions such asref(),reactive(),computed(),watch()andwatchEffect()."
                },
                {
                    "type": "p",
                    "text": "The Reactivity API is a subset of the Composition API."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reactivity API: Core",
                        "Reactivity API: Utilities",
                        "Reactivity API: Advanced"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "ref​"
                },
                {
                    "type": "p",
                    "text": "This entry is about the use ofreffor reactivity. For therefattribute used in templates, seetemplate refinstead."
                },
                {
                    "type": "p",
                    "text": "Arefis part of Vue's reactivity system. It is an object with a single reactive property, calledvalue."
                },
                {
                    "type": "p",
                    "text": "There are various different types of ref. For example, refs can be created usingref(),shallowRef(),computed(), andcustomRef(). The functionisRef()can be used to check whether an object is a ref, andisReadonly()can be used to check whether the ref allows the direct reassignment of its value."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Reactivity Fundamentals",
                        "Reactivity API: Core",
                        "Reactivity API: Utilities",
                        "Reactivity API: Advanced"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "render function​"
                },
                {
                    "type": "p",
                    "text": "Arender functionis the part of a component that generates the VNodes used during rendering. Templates are compiled down into render functions."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Render Functions & JSX"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "scheduler​"
                },
                {
                    "type": "p",
                    "text": "Thescheduleris the part of Vue's internals that controls the timing of whenreactive effectsare run."
                },
                {
                    "type": "p",
                    "text": "When reactive state changes, Vue doesn't immediately trigger rendering updates. Instead, it batches them together using a queue. This ensures that a component only re-renders once, even if multiple changes are made to the underlying data."
                },
                {
                    "type": "p",
                    "text": "Watchersare also batched using the scheduler queue. Watchers withflush: 'pre'(the default) will run before component rendering, whereas those withflush: 'post'will run after component rendering."
                },
                {
                    "type": "p",
                    "text": "Jobs in the scheduler are also used to perform various other internal tasks, such as triggering somelifecycle hooksand updatingtemplate refs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "scoped slot​"
                },
                {
                    "type": "p",
                    "text": "The termscoped slotis used to refer to aslotthat receivesprops."
                },
                {
                    "type": "p",
                    "text": "Historically, Vue made a much greater distinction between scoped and non-scoped slots. To some extent they could be regarded as two separate features, unified behind a common template syntax."
                },
                {
                    "type": "p",
                    "text": "In Vue 3, the slot APIs were simplified to make all slots behave like scoped slots. However, the use cases for scoped and non-scoped slots often differ, so the term still proves useful as a way to refer to slots with props."
                },
                {
                    "type": "p",
                    "text": "The props passed to a slot can only be used within a specific region of the parent template, responsible for defining the slot's contents. This region of the template behaves as a variable scope for the props, hence the name 'scoped slot'."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Slots - Scoped Slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "SFC​"
                },
                {
                    "type": "p",
                    "text": "SeeSingle-File Component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "side effect​"
                },
                {
                    "type": "p",
                    "text": "The termside effectis not specific to Vue. It is used to describe operations or functions that do something beyond their local scope."
                },
                {
                    "type": "p",
                    "text": "For example, in the context of setting a property likeuser.name = null, it is expected that this will change the value ofuser.name. If it also does something else, like triggering Vue's reactivity system, then this would be described as a side effect. This is the origin of the termreactive effectwithin Vue."
                },
                {
                    "type": "p",
                    "text": "When a function is described as having side effects, it means that the function performs some sort of action that is observable outside the function, aside from just returning a value. This might mean that it updates a value in state, or triggers a network request."
                },
                {
                    "type": "p",
                    "text": "The term is often used when describing rendering or computed properties. It is considered best practice for rendering to have no side effects. Likewise, the getter function for a computed property should have no side effects."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-File Component​"
                },
                {
                    "type": "p",
                    "text": "The termSingle-File Component, or SFC, refers to the.vuefile format that is commonly used for Vue components."
                },
                {
                    "type": "p",
                    "text": "See also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Single-File Components",
                        "SFC Syntax Specification"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "slot​"
                },
                {
                    "type": "p",
                    "text": "Slots are used to pass content to child components. Whereas props are used to pass data values, slots are used to pass richer content consisting of HTML elements and other Vue components."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Slots"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "template ref​"
                },
                {
                    "type": "p",
                    "text": "The termtemplate refrefers to using arefattribute on a tag within a template. After the component renders, this attribute is used to populate a corresponding property with either the HTML element or the component instance that corresponds to the tag in the template."
                },
                {
                    "type": "p",
                    "text": "If you are using the Options API then the refs are exposed via properties of the$refsobject."
                },
                {
                    "type": "p",
                    "text": "With the Composition API, template refs populate a reactiverefwith the same name."
                },
                {
                    "type": "p",
                    "text": "Template refs should not be confused with the reactive refs found in Vue's reactivity system."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Template Refs"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "VDOM​"
                },
                {
                    "type": "p",
                    "text": "Seevirtual DOM."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "virtual DOM​"
                },
                {
                    "type": "p",
                    "text": "The termvirtual DOM(VDOM) is not unique to Vue. It is a common approach used by several web frameworks for managing updates to the UI."
                },
                {
                    "type": "p",
                    "text": "Browsers use a tree of nodes to represent the current state of the page. That tree, and the JavaScript APIs used to interact with it, are referred to as thedocument object model, orDOM."
                },
                {
                    "type": "p",
                    "text": "Manipulating the DOM is a major performance bottleneck. The virtual DOM provides one strategy for managing that."
                },
                {
                    "type": "p",
                    "text": "Rather than creating DOM nodes directly, Vue components generate a description of what DOM nodes they would like. These descriptors are plain JavaScript objects, known as VNodes (virtual DOM nodes). Creating VNodes is relatively cheap."
                },
                {
                    "type": "p",
                    "text": "Every time a component re-renders, the new tree of VNodes is compared to the previous tree of VNodes and any differences are then applied to the real DOM. If nothing has changed then the DOM doesn't need to be touched."
                },
                {
                    "type": "p",
                    "text": "Vue uses a hybrid approach that we callCompiler-Informed Virtual DOM. Vue's template compiler is able to apply performance optimizations based on static analysis of the template. Rather than performing a full comparison of a component's old and new VNode trees at runtime, Vue can use information extracted by the compiler to reduce the comparison to just the parts of the tree that can actually change."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Rendering Mechanism",
                        "Guide - Render Functions & JSX"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "VNode​"
                },
                {
                    "type": "p",
                    "text": "AVNodeis avirtual DOM node. They can be created using theh()function."
                },
                {
                    "type": "p",
                    "text": "Seevirtual DOMfor more information."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Component​"
                },
                {
                    "type": "p",
                    "text": "TheWeb Componentsstandard is a collection of features implemented in modern web browsers."
                },
                {
                    "type": "p",
                    "text": "Vue components are not Web Components, butdefineCustomElement()can be used to create acustom elementfrom a Vue component. Vue also supports the use of custom elements inside Vue components."
                },
                {
                    "type": "p",
                    "text": "For more details see:"
                },
                {
                    "type": "list",
                    "items": [
                        "Guide - Vue and Web Components"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide",
            "title": "Introduction | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "You are reading the documentation for Vue 3!"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue 2 support has ended onDec 31, 2023. Learn more aboutVue 2 EOL.",
                        "Upgrading from Vue 2? Check out theMigration Guide."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn Vue with video tutorials onVueMastery.com"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Vue?​"
                },
                {
                    "type": "p",
                    "text": "Vue (pronounced /vjuː/, likeview) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity."
                },
                {
                    "type": "p",
                    "text": "Here is a minimal example:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'createApp({data() {return{count:0}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "import{ createApp, ref }from'vue'createApp({setup() {return{count:ref(0)}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\"><button@click=\"count++\">Count is: {{ count }}</button></div>"
                },
                {
                    "type": "p",
                    "text": "Result"
                },
                {
                    "type": "p",
                    "text": "The above example demonstrates the two core features of Vue:"
                },
                {
                    "type": "list",
                    "items": [
                        "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.",
                        "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                    ]
                },
                {
                    "type": "p",
                    "text": "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state."
                },
                {
                    "type": "p",
                    "text": "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                },
                {
                    "type": "p",
                    "text": "You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers."
                },
                {
                    "type": "p",
                    "text": "Prerequisites"
                },
                {
                    "type": "p",
                    "text": "The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews forJavaScript,HTMLandCSSif needed. Prior experience with other frameworks helps, but is not required."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The Progressive Framework​"
                },
                {
                    "type": "p",
                    "text": "Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Enhancing static HTML without a build step",
                        "Embedding as Web Components on any page",
                        "Single-Page Application (SPA)",
                        "Fullstack / Server-Side Rendering (SSR)",
                        "Jamstack / Static Site Generation (SSG)",
                        "Targeting desktop, mobile, WebGL, and even the terminal"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these."
                },
                {
                    "type": "p",
                    "text": "If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail inWays of Using Vue."
                },
                {
                    "type": "p",
                    "text": "Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-File Components​"
                },
                {
                    "type": "p",
                    "text": "In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format calledSingle-File Component(also known as*.vuefiles, abbreviated asSFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{count:0}}}</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "p",
                    "text": "SFC is a defining feature of Vue and is the recommended way to author Vue componentsifyour use case warrants a build setup. You can learn more about thehow and why of SFCin its dedicated section - but for now, just know that Vue will handle all the build tools setup for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Styles​"
                },
                {
                    "type": "p",
                    "text": "Vue components can be authored in two different API styles:Options APIandComposition API."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options API​"
                },
                {
                    "type": "p",
                    "text": "With Options API, we define a component's logic using an object of options such asdata,methods, andmounted. Properties defined by options are exposed onthisinside functions, which points to the component instance:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{// Properties returned from data() become reactive state// and will be exposed on `this`.data() {return{count:0}},// Methods are functions that mutate state and trigger updates.// They can be bound as event handlers in templates.methods: {increment() {this.count++}},// Lifecycle hooks are called at different stages// of a component's lifecycle.// This function will be called when the component is mounted.mounted() {console.log(`The initial count is ${this.count}.`)}}</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composition API​"
                },
                {
                    "type": "p",
                    "text": "With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with<script setup>. Thesetupattribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in<script setup>are directly usable in the template."
                },
                {
                    "type": "p",
                    "text": "Here is the same component, with the exact same template, but using Composition API and<script setup>instead:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'// reactive stateconstcount=ref(0)// functions that mutate state and trigger updatesfunctionincrement() {count.value++}// lifecycle hooksonMounted(()=>{console.log(`The initial count is ${count.value}.`)})</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Which to Choose?​"
                },
                {
                    "type": "p",
                    "text": "Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles."
                },
                {
                    "type": "p",
                    "text": "The Options API is centered around the concept of a \"component instance\" (thisas seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups."
                },
                {
                    "type": "p",
                    "text": "The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic."
                },
                {
                    "type": "p",
                    "text": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in theComposition API FAQ."
                },
                {
                    "type": "p",
                    "text": "If you are new to Vue, here's our general recommendation:"
                },
                {
                    "type": "list",
                    "items": [
                        "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.",
                        "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.",
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later."
                },
                {
                    "type": "p",
                    "text": "For production use:"
                },
                {
                    "type": "list",
                    "items": [
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement."
                },
                {
                    "type": "p",
                    "text": "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                },
                {
                    "type": "p",
                    "text": "You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using theAPI Preference switchesat the top of the left sidebar."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Still Got Questions?​"
                },
                {
                    "type": "p",
                    "text": "Check out ourFAQ."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pick Your Learning Path​"
                },
                {
                    "type": "p",
                    "text": "Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!"
                },
                {
                    "type": "p",
                    "text": "Try the Tutorial"
                },
                {
                    "type": "p",
                    "text": "For those who prefer learning things hands-on."
                },
                {
                    "type": "p",
                    "text": "Read the Guide"
                },
                {
                    "type": "p",
                    "text": "The guide walks you through every aspect of the framework in full detail."
                },
                {
                    "type": "p",
                    "text": "Check out the Examples"
                },
                {
                    "type": "p",
                    "text": "Explore examples of core features and common UI tasks."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/best-practices/accessibility",
            "title": "Accessibility | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Accessibility​"
                },
                {
                    "type": "p",
                    "text": "Web accessibility (also known as a11y) refers to the practice of creating websites that can be used by anyone — be that a person with a disability, a slow connection, outdated or broken hardware or simply someone in an unfavorable environment. For example, adding subtitles to a video would help both your deaf and hard-of-hearing users and your users who are in a loud environment and can't hear their phone. Similarly, making sure your text isn't too low contrast will help both your low-vision users and your users who are trying to use their phone in bright sunlight."
                },
                {
                    "type": "p",
                    "text": "Ready to start but aren’t sure where?"
                },
                {
                    "type": "p",
                    "text": "Checkout thePlanning and managing web accessibility guideprovided byWorld Wide Web Consortium (W3C)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Skip link​"
                },
                {
                    "type": "p",
                    "text": "You should add a link at the top of each page that goes directly to the main content area so users can skip content that is repeated on multiple Web pages."
                },
                {
                    "type": "p",
                    "text": "Typically this is done on the top ofApp.vueas it will be the first focusable element on all your pages:"
                },
                {
                    "type": "code",
                    "code": "<ulclass=\"skip-links\"><li><ahref=\"#main\"ref=\"skipLink\"class=\"skip-link\">Skip to main content</a></li></ul>"
                },
                {
                    "type": "p",
                    "text": "To hide the link unless it is focused, you can add the following style:"
                },
                {
                    "type": "code",
                    "code": ".skip-link{white-space:nowrap;margin:1emauto;top:0;position:fixed;left:50%;margin-left:-72px;opacity:0;}.skip-link:focus{opacity:1;background-color:white;padding:0.5em;border:1pxsolidblack;}"
                },
                {
                    "type": "p",
                    "text": "Once a user changes route, bring focus back to the skip link. This can be achieved by calling focus on the skip link's template ref (assuming usage ofvue-router):"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{watch: {$route() {this.$refs.skipLink.focus()}}}</script>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, watch }from'vue'import{ useRoute }from'vue-router'constroute=useRoute()constskipLink=ref()watch(()=>route.path,()=>{skipLink.value.focus()})</script>"
                },
                {
                    "type": "p",
                    "text": "Read documentation on skip link to main content"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Content Structure​"
                },
                {
                    "type": "p",
                    "text": "One of the most important pieces of accessibility is making sure that design can support accessible implementation. Design should consider not only color contrast, font selection, text sizing, and language, but also how the content is structured in the application."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Headings​"
                },
                {
                    "type": "p",
                    "text": "Users can navigate an application through headings. Having descriptive headings for every section of your application makes it easier for users to predict the content of each section. When it comes to headings, there are a couple of recommended accessibility practices:"
                },
                {
                    "type": "list",
                    "items": [
                        "Nest headings in their ranking order:<h1>-<h6>",
                        "Don’t skip headings within a section",
                        "Use actual heading tags instead of styling text to give the visual appearance of headings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Read more about headings"
                },
                {
                    "type": "code",
                    "code": "<mainrole=\"main\"aria-labelledby=\"main-title\"><h1id=\"main-title\">Main title</h1><sectionaria-labelledby=\"section-title-1\"><h2id=\"section-title-1\"> Section Title </h2><h3>Section Subtitle</h3><!-- Content --></section><sectionaria-labelledby=\"section-title-2\"><h2id=\"section-title-2\"> Section Title </h2><h3>Section Subtitle</h3><!-- Content --><h3>Section Subtitle</h3><!-- Content --></section></main>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Landmarks​"
                },
                {
                    "type": "p",
                    "text": "Landmarksprovide programmatic access to sections within an application. Users who rely on assistive technology can navigate to each section of the application and skip over content. You can useARIA rolesto help you achieve this."
                },
                {
                    "type": "p",
                    "text": "Read more about landmarks"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Semantic Forms​"
                },
                {
                    "type": "p",
                    "text": "When creating a form, you can use the following elements:<form>,<label>,<input>,<textarea>, and<button>"
                },
                {
                    "type": "p",
                    "text": "Labels are typically placed on top or to the left of the form fields:"
                },
                {
                    "type": "code",
                    "code": "<formaction=\"/dataCollectionLocation\"method=\"post\"autocomplete=\"on\"><divv-for=\"iteminformItems\":key=\"item.id\"class=\"form-item\"><label:for=\"item.id\">{{ item.label }}: </label><input:type=\"item.type\":id=\"item.id\":name=\"item.id\"v-model=\"item.value\"/></div><buttontype=\"submit\">Submit</button></form>"
                },
                {
                    "type": "p",
                    "text": "Notice how you can includeautocomplete='on'on the form element and it will apply to all inputs in your form. You can also set differentvalues for autocomplete attributefor each input."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Labels​"
                },
                {
                    "type": "p",
                    "text": "Provide labels to describe the purpose of all form control; linkingforandid:"
                },
                {
                    "type": "code",
                    "code": "<labelfor=\"name\">Name: </label><inputtype=\"text\"name=\"name\"id=\"name\"v-model=\"name\"/>"
                },
                {
                    "type": "p",
                    "text": "If you inspect this element in your Chrome DevTools and open the Accessibility tab inside the Elements tab, you will see how the input gets its name from the label:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Warning:"
                },
                {
                    "type": "p",
                    "text": "Though you might have seen labels wrapping the input fields like this:"
                },
                {
                    "type": "code",
                    "code": "<label>Name:<inputtype=\"text\"name=\"name\"id=\"name\"v-model=\"name\"/></label>"
                },
                {
                    "type": "p",
                    "text": "Explicitly setting the labels with a matching id is better supported by assistive technology."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "aria-label​"
                },
                {
                    "type": "p",
                    "text": "You can also give the input an accessible name witharia-label."
                },
                {
                    "type": "code",
                    "code": "<labelfor=\"name\">Name: </label><inputtype=\"text\"name=\"name\"id=\"name\"v-model=\"name\":aria-label=\"nameLabel\"/>"
                },
                {
                    "type": "p",
                    "text": "Feel free to inspect this element in Chrome DevTools to see how the accessible name has changed:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "aria-labelledby​"
                },
                {
                    "type": "p",
                    "text": "Usingaria-labelledbyis similar toaria-labelexcept it is used if the label text is visible on screen. It is paired to other elements by theiridand you can link multipleids:"
                },
                {
                    "type": "code",
                    "code": "<formclass=\"demo\"action=\"/dataCollectionLocation\"method=\"post\"autocomplete=\"on\"><h1id=\"billing\">Billing</h1><divclass=\"form-item\"><labelfor=\"name\">Name: </label><inputtype=\"text\"name=\"name\"id=\"name\"v-model=\"name\"aria-labelledby=\"billing name\"/></div><buttontype=\"submit\">Submit</button></form>"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "aria-describedby​"
                },
                {
                    "type": "p",
                    "text": "aria-describedbyis used the same way asaria-labelledbyexcept provides a description with additional information that the user might need. This can be used to describe the criteria for any input:"
                },
                {
                    "type": "code",
                    "code": "<formclass=\"demo\"action=\"/dataCollectionLocation\"method=\"post\"autocomplete=\"on\"><h1id=\"billing\">Billing</h1><divclass=\"form-item\"><labelfor=\"name\">Full Name: </label><inputtype=\"text\"name=\"name\"id=\"name\"v-model=\"name\"aria-labelledby=\"billing name\"aria-describedby=\"nameDescription\"/><pid=\"nameDescription\">Please provide first and last name.</p></div><buttontype=\"submit\">Submit</button></form>"
                },
                {
                    "type": "p",
                    "text": "You can see the description by inspecting Chrome DevTools:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Placeholder​"
                },
                {
                    "type": "p",
                    "text": "Avoid using placeholders as they can confuse many users."
                },
                {
                    "type": "p",
                    "text": "One of the issues with placeholders is that they don't meet thecolor contrast criteriaby default; fixing the color contrast makes the placeholder look like pre-populated data in the input fields. Looking at the following example, you can see that the Last Name placeholder which meets the color contrast criteria looks like pre-populated data:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "code",
                    "code": "<formclass=\"demo\"action=\"/dataCollectionLocation\"method=\"post\"autocomplete=\"on\"><divv-for=\"iteminformItems\":key=\"item.id\"class=\"form-item\"><label:for=\"item.id\">{{ item.label }}: </label><inputtype=\"text\":id=\"item.id\":name=\"item.id\"v-model=\"item.value\":placeholder=\"item.placeholder\"/></div><buttontype=\"submit\">Submit</button></form>"
                },
                {
                    "type": "code",
                    "code": "/* https://www.w3schools.com/howto/howto_css_placeholder.asp */#lastName::placeholder{/* Chrome, Firefox, Opera, Safari 10.1+ */color:black;opacity:1;/* Firefox */}#lastName:-ms-input-placeholder{/* Internet Explorer 10-11 */color:black;}#lastName::-ms-input-placeholder{/* Microsoft Edge */color:black;}"
                },
                {
                    "type": "p",
                    "text": "It is best to provide all the information the user needs to fill out forms outside any inputs."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Instructions​"
                },
                {
                    "type": "p",
                    "text": "When adding instructions for your input fields, make sure to link it correctly to the input. You can provide additional instructions and bind multiple ids inside anaria-labelledby. This allows for more flexible design."
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Using aria-labelledby</legend><labelid=\"date-label\"for=\"date\">Current Date: </label><inputtype=\"date\"name=\"date\"id=\"date\"aria-labelledby=\"date-label date-instructions\"/><pid=\"date-instructions\">MM/DD/YYYY</p></fieldset>"
                },
                {
                    "type": "p",
                    "text": "Alternatively, you can attach the instructions to the input witharia-describedby:"
                },
                {
                    "type": "code",
                    "code": "<fieldset><legend>Using aria-describedby</legend><labelid=\"dob\"for=\"dob\">Date of Birth: </label><inputtype=\"date\"name=\"dob\"id=\"dob\"aria-describedby=\"dob-instructions\"/><pid=\"dob-instructions\">MM/DD/YYYY</p></fieldset>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hiding Content​"
                },
                {
                    "type": "p",
                    "text": "Usually it is not recommended to visually hide labels, even if the input has an accessible name. However, if the functionality of the input can be understood with surrounding content, then we can hide the visual label."
                },
                {
                    "type": "p",
                    "text": "Let's look at this search field:"
                },
                {
                    "type": "code",
                    "code": "<formrole=\"search\"><labelfor=\"search\"class=\"hidden-visually\">Search: </label><inputtype=\"text\"name=\"search\"id=\"search\"v-model=\"search\"/><buttontype=\"submit\">Search</button></form>"
                },
                {
                    "type": "p",
                    "text": "We can do this because the search button will help visual users identify the purpose of the input field."
                },
                {
                    "type": "p",
                    "text": "We can use CSS to visually hide elements but keep them available for assistive technology:"
                },
                {
                    "type": "code",
                    "code": ".hidden-visually{position:absolute;overflow:hidden;white-space:nowrap;margin:0;padding:0;height:1px;width:1px;clip:rect(0000);clip-path:inset(100%);}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "aria-hidden=\"true\"​"
                },
                {
                    "type": "p",
                    "text": "Addingaria-hidden=\"true\"will hide the element from assistive technology but leave it visually available for other users. Do not use it on focusable elements, purely on decorative, duplicated or offscreen content."
                },
                {
                    "type": "code",
                    "code": "<p>This is not hidden from screen readers.</p><paria-hidden=\"true\">This is hidden from screen readers.</p>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Buttons​"
                },
                {
                    "type": "p",
                    "text": "When using buttons inside a form, you must set the type to prevent submitting the form. You can also use an input to create buttons:"
                },
                {
                    "type": "code",
                    "code": "<formaction=\"/dataCollectionLocation\"method=\"post\"autocomplete=\"on\"><!-- Buttons --><buttontype=\"button\">Cancel</button><buttontype=\"submit\">Submit</button><!-- Input buttons --><inputtype=\"button\"value=\"Cancel\"/><inputtype=\"submit\"value=\"Submit\"/></form>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Functional Images​"
                },
                {
                    "type": "p",
                    "text": "You can use this technique to create functional images."
                },
                {
                    "type": "list",
                    "items": [
                        "Input fieldsThese images will act as a submit type button on formstemplate<formrole=\"search\"><labelfor=\"search\"class=\"hidden-visually\">Search: </label><inputtype=\"text\"name=\"search\"id=\"search\"v-model=\"search\"/><inputtype=\"image\"class=\"btnImg\"src=\"https://img.icons8.com/search\"alt=\"Search\"/></form>",
                        "These images will act as a submit type button on forms",
                        "Icons"
                    ]
                },
                {
                    "type": "p",
                    "text": "Input fields"
                },
                {
                    "type": "list",
                    "items": [
                        "These images will act as a submit type button on forms"
                    ]
                },
                {
                    "type": "code",
                    "code": "<formrole=\"search\"><labelfor=\"search\"class=\"hidden-visually\">Search: </label><inputtype=\"text\"name=\"search\"id=\"search\"v-model=\"search\"/><inputtype=\"image\"class=\"btnImg\"src=\"https://img.icons8.com/search\"alt=\"Search\"/></form>"
                },
                {
                    "type": "p",
                    "text": "Icons"
                },
                {
                    "type": "code",
                    "code": "<formrole=\"search\"><labelfor=\"searchIcon\"class=\"hidden-visually\">Search: </label><inputtype=\"text\"name=\"searchIcon\"id=\"searchIcon\"v-model=\"searchIcon\"/><buttontype=\"submit\"><iclass=\"fas fa-search\"aria-hidden=\"true\"></i><spanclass=\"hidden-visually\">Search</span></button></form>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Standards​"
                },
                {
                    "type": "p",
                    "text": "The World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) develops web accessibility standards for the different components:"
                },
                {
                    "type": "list",
                    "items": [
                        "User Agent Accessibility Guidelines (UAAG)web browsers and media players, including some aspects of assistive technologies",
                        "web browsers and media players, including some aspects of assistive technologies",
                        "Authoring Tool Accessibility Guidelines (ATAG)authoring tools",
                        "authoring tools",
                        "Web Content Accessibility Guidelines (WCAG)web content - used by developers, authoring tools, and accessibility evaluation tools",
                        "web content - used by developers, authoring tools, and accessibility evaluation tools"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "web browsers and media players, including some aspects of assistive technologies"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "authoring tools"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "web content - used by developers, authoring tools, and accessibility evaluation tools"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Web Content Accessibility Guidelines (WCAG)​"
                },
                {
                    "type": "p",
                    "text": "WCAG 2.1extends onWCAG 2.0and allows implementation of new technologies by addressing changes to the web. The W3C encourages use of the most current version of WCAG when developing or updating Web accessibility policies."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "WCAG 2.1 Four Main Guiding Principles (abbreviated as POUR):​"
                },
                {
                    "type": "list",
                    "items": [
                        "PerceivableUsers must be able to perceive the information being presented",
                        "Users must be able to perceive the information being presented",
                        "OperableInterface forms, controls, and navigation are operable",
                        "Interface forms, controls, and navigation are operable",
                        "UnderstandableInformation and the operation of user interface must be understandable to all users",
                        "Information and the operation of user interface must be understandable to all users",
                        "RobustUsers must be able to access the content as technologies advance",
                        "Users must be able to access the content as technologies advance"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Users must be able to perceive the information being presented"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Interface forms, controls, and navigation are operable"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Information and the operation of user interface must be understandable to all users"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Users must be able to access the content as technologies advance"
                    ]
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Web Accessibility Initiative – Accessible Rich Internet Applications (WAI-ARIA)​"
                },
                {
                    "type": "p",
                    "text": "W3C's WAI-ARIA provides guidance on how to build dynamic content and advanced user interface controls."
                },
                {
                    "type": "list",
                    "items": [
                        "Accessible Rich Internet Applications (WAI-ARIA) 1.2",
                        "WAI-ARIA Authoring Practices 1.2"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Resources​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Documentation​"
                },
                {
                    "type": "list",
                    "items": [
                        "WCAG 2.0",
                        "WCAG 2.1",
                        "Accessible Rich Internet Applications (WAI-ARIA) 1.2",
                        "WAI-ARIA Authoring Practices 1.2"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Assistive Technologies​"
                },
                {
                    "type": "list",
                    "items": [
                        "Screen ReadersNVDAVoiceOverJAWSChromeVox",
                        "NVDA",
                        "VoiceOver",
                        "JAWS",
                        "ChromeVox",
                        "Zooming ToolsMAGicZoomTextMagnifier",
                        "MAGic",
                        "ZoomText",
                        "Magnifier"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "NVDA",
                        "VoiceOver",
                        "JAWS",
                        "ChromeVox"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "MAGic",
                        "ZoomText",
                        "Magnifier"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Testing​"
                },
                {
                    "type": "list",
                    "items": [
                        "Automated ToolsLighthouseWAVEARC Toolkit",
                        "Lighthouse",
                        "WAVE",
                        "ARC Toolkit",
                        "Color ToolsWebAim Color ContrastWebAim Link Color Contrast",
                        "WebAim Color Contrast",
                        "WebAim Link Color Contrast",
                        "Other Helpful ToolsHeadingMapColor OracleNerdeFocusVisual AriaSilktide Website Accessibility Simulator",
                        "HeadingMap",
                        "Color Oracle",
                        "NerdeFocus",
                        "Visual Aria",
                        "Silktide Website Accessibility Simulator"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Lighthouse",
                        "WAVE",
                        "ARC Toolkit"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "WebAim Color Contrast",
                        "WebAim Link Color Contrast"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "HeadingMap",
                        "Color Oracle",
                        "NerdeFocus",
                        "Visual Aria",
                        "Silktide Website Accessibility Simulator"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Users​"
                },
                {
                    "type": "p",
                    "text": "The World Health Organization estimates that 15% of the world's population has some form of disability, 2-4% of them severely so. That is an estimated 1 billion people worldwide; making people with disabilities the largest minority group in the world."
                },
                {
                    "type": "p",
                    "text": "There are a huge range of disabilities, which can be divided roughly into four categories:"
                },
                {
                    "type": "list",
                    "items": [
                        "Visual- These users can benefit from the use of screen readers, screen magnification, controlling screen contrast, or braille display.",
                        "Auditory- These users can benefit from captioning, transcripts or sign language video.",
                        "Motor- These users can benefit from a range ofassistive technologies for motor impairments: voice recognition software, eye tracking, single-switch access, head wand, sip and puff switch, oversized trackball mouse, adaptive keyboard or other assistive technologies.",
                        "Cognitive- These users can benefit from supplemental media, structural organization of content, clear and simple writing."
                    ]
                },
                {
                    "type": "p",
                    "text": "Check out the following links from WebAim to understand from users:"
                },
                {
                    "type": "list",
                    "items": [
                        "Web Accessibility Perspectives: Explore the Impact and Benefits for Everyone",
                        "Stories of Web Users"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/best-practices/performance",
            "title": "Performance | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Performance​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview​"
                },
                {
                    "type": "p",
                    "text": "Vue is designed to be performant for most common use cases without much need for manual optimizations. However, there are always challenging scenarios where extra fine-tuning is needed. In this section, we will discuss what you should pay attention to when it comes to performance in a Vue application."
                },
                {
                    "type": "p",
                    "text": "First, let's discuss the two major aspects of web performance:"
                },
                {
                    "type": "list",
                    "items": [
                        "Page Load Performance: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics likeLargest Contentful Paint (LCP)andFirst Input Delay (FID).",
                        "Update Performance: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Page Load Performance: how fast the application shows content and becomes interactive on the initial visit. This is usually measured using web vital metrics likeLargest Contentful Paint (LCP)andFirst Input Delay (FID)."
                },
                {
                    "type": "p",
                    "text": "Update Performance: how fast the application updates in response to user input. For example, how fast a list updates when the user types in a search box, or how fast the page switches when the user clicks a navigation link in a Single-Page Application (SPA)."
                },
                {
                    "type": "p",
                    "text": "While it would be ideal to maximize both, different frontend architectures tend to affect how easy it is to attain desired performance in these aspects. In addition, the type of application you are building greatly influences what you should prioritize in terms of performance. Therefore, the first step of ensuring optimal performance is picking the right architecture for the type of application you are building:"
                },
                {
                    "type": "list",
                    "items": [
                        "ConsultWays of Using Vueto see how you can leverage Vue in different ways.",
                        "Jason Miller discusses the types of web applications and their respective ideal implementation / delivery inApplication Holotypes."
                    ]
                },
                {
                    "type": "p",
                    "text": "ConsultWays of Using Vueto see how you can leverage Vue in different ways."
                },
                {
                    "type": "p",
                    "text": "Jason Miller discusses the types of web applications and their respective ideal implementation / delivery inApplication Holotypes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Profiling Options​"
                },
                {
                    "type": "p",
                    "text": "To improve performance, we need to first know how to measure it. There are a number of great tools that can help in this regard:"
                },
                {
                    "type": "p",
                    "text": "For profiling load performance of production deployments:"
                },
                {
                    "type": "list",
                    "items": [
                        "PageSpeed Insights",
                        "WebPageTest"
                    ]
                },
                {
                    "type": "p",
                    "text": "For profiling performance during local development:"
                },
                {
                    "type": "list",
                    "items": [
                        "Chrome DevTools Performance Panelapp.config.performanceenables Vue-specific performance markers in Chrome DevTools' performance timeline.",
                        "app.config.performanceenables Vue-specific performance markers in Chrome DevTools' performance timeline.",
                        "Vue DevTools Extensionalso provides a performance profiling feature."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "app.config.performanceenables Vue-specific performance markers in Chrome DevTools' performance timeline."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Page Load Optimizations​"
                },
                {
                    "type": "p",
                    "text": "There are many framework-agnostic aspects for optimizing page load performance - check outthis web.dev guidefor a comprehensive round up. Here, we will primarily focus on techniques that are specific to Vue."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choosing the Right Architecture​"
                },
                {
                    "type": "p",
                    "text": "If your use case is sensitive to page load performance, avoid shipping it as a pure client-side SPA. You want your server to be directly sending HTML containing the content the users want to see. Pure client-side rendering suffers from slow time-to-content. This can be mitigated withServer-Side Rendering (SSR)orStatic Site Generation (SSG). Check out theSSR Guideto learn about performing SSR with Vue. If your app doesn't have rich interactivity requirements, you can also use a traditional backend server to render the HTML and enhance it with Vue on the client."
                },
                {
                    "type": "p",
                    "text": "If your main application has to be an SPA, but has marketing pages (landing, about, blog), ship them separately! Your marketing pages should ideally be deployed as static HTML with minimal JS, by using SSG."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bundle Size and Tree-shaking​"
                },
                {
                    "type": "p",
                    "text": "One of the most effective ways to improve page load performance is shipping smaller JavaScript bundles. Here are a few ways to reduce bundle size when using Vue:"
                },
                {
                    "type": "list",
                    "items": [
                        "Use a build step if possible.Many of Vue's APIs are\"tree-shakable\"if bundled via a modern build tool. For example, if you don't use the built-in<Transition>component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves14kbmin+gzipped JavaScript and avoids the runtime compilation cost.",
                        "Many of Vue's APIs are\"tree-shakable\"if bundled via a modern build tool. For example, if you don't use the built-in<Transition>component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.",
                        "When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves14kbmin+gzipped JavaScript and avoids the runtime compilation cost.",
                        "Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it.If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, preferlodash-esoverlodash.Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools likebundlejs.comcan be used for quick checks, but measuring with your actual build setup will always be the most accurate.",
                        "If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, preferlodash-esoverlodash.",
                        "Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools likebundlejs.comcan be used for quick checks, but measuring with your actual build setup will always be the most accurate.",
                        "If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider usingpetite-vue(only6kb) instead."
                    ]
                },
                {
                    "type": "p",
                    "text": "Use a build step if possible."
                },
                {
                    "type": "list",
                    "items": [
                        "Many of Vue's APIs are\"tree-shakable\"if bundled via a modern build tool. For example, if you don't use the built-in<Transition>component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code.",
                        "When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves14kbmin+gzipped JavaScript and avoids the runtime compilation cost."
                    ]
                },
                {
                    "type": "p",
                    "text": "Many of Vue's APIs are\"tree-shakable\"if bundled via a modern build tool. For example, if you don't use the built-in<Transition>component, it won't be included in the final production bundle. Tree-shaking can also remove other unused modules in your source code."
                },
                {
                    "type": "p",
                    "text": "When using a build step, templates are pre-compiled so we don't need to ship the Vue compiler to the browser. This saves14kbmin+gzipped JavaScript and avoids the runtime compilation cost."
                },
                {
                    "type": "p",
                    "text": "Be cautious of size when introducing new dependencies! In real-world applications, bloated bundles are most often a result of introducing heavy dependencies without realizing it."
                },
                {
                    "type": "list",
                    "items": [
                        "If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, preferlodash-esoverlodash.",
                        "Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools likebundlejs.comcan be used for quick checks, but measuring with your actual build setup will always be the most accurate."
                    ]
                },
                {
                    "type": "p",
                    "text": "If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, preferlodash-esoverlodash."
                },
                {
                    "type": "p",
                    "text": "Check a dependency's size and evaluate whether it is worth the functionality it provides. Note if the dependency is tree-shaking friendly, the actual size increase will depend on the APIs you actually import from it. Tools likebundlejs.comcan be used for quick checks, but measuring with your actual build setup will always be the most accurate."
                },
                {
                    "type": "p",
                    "text": "If you are using Vue primarily for progressive enhancement and prefer to avoid a build step, consider usingpetite-vue(only6kb) instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Code Splitting​"
                },
                {
                    "type": "p",
                    "text": "Code splitting is where a build tool splits the application bundle into multiple smaller chunks, which can then be loaded on demand or in parallel. With proper code splitting, features required at page load can be downloaded immediately, with additional chunks being lazy loaded only when needed, thus improving performance."
                },
                {
                    "type": "p",
                    "text": "Bundlers like Rollup (which Vite is based upon) or webpack can automatically create split chunks by detecting the ESM dynamic import syntax:"
                },
                {
                    "type": "code",
                    "code": "// lazy.js and its dependencies will be split into a separate chunk// and only loaded when `loadLazy()` is called.functionloadLazy() {returnimport('./lazy.js')}"
                },
                {
                    "type": "p",
                    "text": "Lazy loading is best used on features that are not immediately needed after initial page load. In Vue applications, this can be used in combination with Vue'sAsync Componentfeature to create split chunks for component trees:"
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent }from'vue'// a separate chunk is created for Foo.vue and its dependencies.// it is only fetched on demand when the async component is// rendered on the page.constFoo=defineAsyncComponent(()=>import('./Foo.vue'))"
                },
                {
                    "type": "p",
                    "text": "For applications using Vue Router, it is strongly recommended to use lazy loading for route components. Vue Router has explicit support for lazy loading, separate fromdefineAsyncComponent. SeeLazy Loading Routesfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Update Optimizations​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Props Stability​"
                },
                {
                    "type": "p",
                    "text": "In Vue, a child component only updates when at least one of its received props has changed. Consider the following example:"
                },
                {
                    "type": "code",
                    "code": "<ListItemv-for=\"iteminlist\":id=\"item.id\":active-id=\"activeId\"/>"
                },
                {
                    "type": "p",
                    "text": "Inside the<ListItem>component, it uses itsidandactiveIdprops to determine whether it is the currently active item. While this works, the problem is that wheneveractiveIdchanges,every<ListItem>in the list has to update!"
                },
                {
                    "type": "p",
                    "text": "Ideally, only the items whose active status changed should update. We can achieve that by moving the active status computation into the parent, and make<ListItem>directly accept anactiveprop instead:"
                },
                {
                    "type": "code",
                    "code": "<ListItemv-for=\"iteminlist\":id=\"item.id\":active=\"item.id===activeId\"/>"
                },
                {
                    "type": "p",
                    "text": "Now, for most components theactiveprop will remain the same whenactiveIdchanges, so they no longer need to update. In general, the idea is keeping the props passed to child components as stable as possible."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-once​"
                },
                {
                    "type": "p",
                    "text": "v-onceis a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates. Consult itsAPI referencefor more details."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-memo​"
                },
                {
                    "type": "p",
                    "text": "v-memois a built-in directive that can be used to conditionally skip the update of large sub-trees orv-forlists. Consult itsAPI referencefor more details."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Computed Stability​"
                },
                {
                    "type": "p",
                    "text": "In Vue 3.4 and above, a computed property will only trigger effects when its computed value has changed from the previous one. For example, the followingisEvencomputed only triggers effects if the returned value has changed fromtruetofalse, or vice-versa:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)constisEven=computed(()=>count.value%2===0)watchEffect(()=>console.log(isEven.value))// true// will not trigger new logs because the computed value stays `true`count.value=2count.value=4"
                },
                {
                    "type": "p",
                    "text": "This reduces unnecessary effect triggers, but unfortunately doesn't work if the computed creates a new object on each compute:"
                },
                {
                    "type": "code",
                    "code": "constcomputedObj=computed(()=>{return{isEven: count.value%2===0}})"
                },
                {
                    "type": "p",
                    "text": "Because a new object is created each time, the new value is technically always different from the old value. Even if theisEvenproperty remains the same, Vue won't be able to know unless it performs a deep comparison of the old value and the new value. Such comparison could be expensive and likely not worth it."
                },
                {
                    "type": "p",
                    "text": "Instead, we can optimize this by manually comparing the new value with the old value, and conditionally returning the old value if we know nothing has changed:"
                },
                {
                    "type": "code",
                    "code": "constcomputedObj=computed((oldValue)=>{constnewValue={isEven: count.value%2===0}if(oldValue&&oldValue.isEven===newValue.isEven) {returnoldValue}returnnewValue})"
                },
                {
                    "type": "p",
                    "text": "Try it in the playground"
                },
                {
                    "type": "p",
                    "text": "Note that you should always perform the full computation before comparing and returning the old value, so that the same dependencies can be collected on every run."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "General Optimizations​"
                },
                {
                    "type": "p",
                    "text": "The following tips affect both page load and update performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Virtualize Large Lists​"
                },
                {
                    "type": "p",
                    "text": "One of the most common performance issues in all frontend applications is rendering large lists. No matter how performant a framework is, rendering a list with thousands of itemswillbe slow due to the sheer number of DOM nodes that the browser needs to handle."
                },
                {
                    "type": "p",
                    "text": "However, we don't necessarily have to render all these nodes upfront. In most cases, the user's screen size can display only a small subset of our large list. We can greatly improve the performance withlist virtualization, the technique of only rendering the items that are currently in or close to the viewport in a large list."
                },
                {
                    "type": "p",
                    "text": "Implementing list virtualization isn't easy, luckily there are existing community libraries that you can directly use:"
                },
                {
                    "type": "list",
                    "items": [
                        "vue-virtual-scroller",
                        "vue-virtual-scroll-grid",
                        "vueuc/VVirtualList"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reduce Reactivity Overhead for Large Immutable Structures​"
                },
                {
                    "type": "p",
                    "text": "Vue's reactivity system is deep by default. While this makes state management intuitive, it does create a certain level of overhead when the data size is large, because every property access triggers proxy traps that perform dependency tracking. This typically becomes noticeable when dealing with large arrays of deeply nested objects, where a single render needs to access 100,000+ properties, so it should only affect very specific use cases."
                },
                {
                    "type": "p",
                    "text": "Vue does provide an escape hatch to opt-out of deep reactivity by usingshallowRef()andshallowReactive(). Shallow APIs create state that is reactive only at the root level, and exposes all nested objects untouched. This keeps nested property access fast, with the trade-off being that we must now treat all nested objects as immutable, and updates can only be triggered by replacing the root state:"
                },
                {
                    "type": "code",
                    "code": "constshallowArray=shallowRef([/* big list of deep objects */])// this won't trigger updates...shallowArray.value.push(newObject)// this does:shallowArray.value=[...shallowArray.value, newObject]// this won't trigger updates...shallowArray.value[0].foo=1// this does:shallowArray.value=[{...shallowArray.value[0],foo:1},...shallowArray.value.slice(1)]"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Avoid Unnecessary Component Abstractions​"
                },
                {
                    "type": "p",
                    "text": "Sometimes we may createrenderless componentsor higher-order components (i.e. components that render other components with extra props) for better abstraction or code organization. While there is nothing wrong with this, do keep in mind that component instances are much more expensive than plain DOM nodes, and creating too many of them due to abstraction patterns will incur performance costs."
                },
                {
                    "type": "p",
                    "text": "Note that reducing only a few instances won't have noticeable effect, so don't sweat it if the component is rendered only a few times in the app. The best scenario to consider this optimization is again in large lists. Imagine a list of 100 items where each item component contains many child components. Removing one unnecessary component abstraction here could result in a reduction of hundreds of component instances."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/best-practices/production-deployment",
            "title": "Production Deployment | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Production Deployment​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Development vs. Production​"
                },
                {
                    "type": "p",
                    "text": "During development, Vue provides a number of features to improve the development experience:"
                },
                {
                    "type": "list",
                    "items": [
                        "Warning for common errors and pitfalls",
                        "Props / events validation",
                        "Reactivity debugging hooks",
                        "Devtools integration"
                    ]
                },
                {
                    "type": "p",
                    "text": "However, these features become useless in production. Some of the warning checks can also incur a small amount of performance overhead. When deploying to production, we should drop all the unused, development-only code branches for smaller payload size and better performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Without Build Tools​"
                },
                {
                    "type": "p",
                    "text": "If you are using Vue without a build tool by loading it from a CDN or self-hosted script, make sure to use the production build (dist files that end in.prod.js) when deploying to production. Production builds are pre-minified with all development-only code branches removed."
                },
                {
                    "type": "list",
                    "items": [
                        "If using global build (accessing via theVueglobal): usevue.global.prod.js.",
                        "If using ESM build (accessing via native ESM imports): usevue.esm-browser.prod.js."
                    ]
                },
                {
                    "type": "p",
                    "text": "Consult thedist file guidefor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "With Build Tools​"
                },
                {
                    "type": "p",
                    "text": "Projects scaffolded viacreate-vue(based on Vite) or Vue CLI (based on webpack) are pre-configured for production builds."
                },
                {
                    "type": "p",
                    "text": "If using a custom setup, make sure that:"
                },
                {
                    "type": "list",
                    "items": [
                        "vueresolves tovue.runtime.esm-bundler.js.",
                        "Thecompile time feature flagsare properly configured.",
                        "process.env.NODE_ENVis replaced with\"production\"during build."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additional references:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vite production build guide",
                        "Vite deployment guide",
                        "Vue CLI deployment guide"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tracking Runtime Errors​"
                },
                {
                    "type": "p",
                    "text": "Theapp-level error handlercan be used to report errors to tracking services:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp(...)app.config.errorHandler=(err,instance,info)=>{// report error to tracking services}"
                },
                {
                    "type": "p",
                    "text": "Services such asSentryandBugsnagalso provide official integrations for Vue."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/best-practices/security",
            "title": "Security | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Security​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reporting Vulnerabilities​"
                },
                {
                    "type": "p",
                    "text": "When a vulnerability is reported, it immediately becomes our top concern, with a full-time contributor dropping everything to work on it. To report a vulnerability, please emailsecurity@vuejs.org."
                },
                {
                    "type": "p",
                    "text": "While the discovery of new vulnerabilities is rare, we also recommend always using the latest versions of Vue and its official companion libraries to ensure your application remains as secure as possible."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rule No.1: Never Use Non-trusted Templates​"
                },
                {
                    "type": "p",
                    "text": "The most fundamental security rule when using Vue isnever use non-trusted content as your component template. Doing so is equivalent to allowing arbitrary JavaScript execution in your application - and worse, could lead to server breaches if the code is executed during server-side rendering. An example of such usage:"
                },
                {
                    "type": "code",
                    "code": "Vue.createApp({template:`<div>`+userProvidedString+`</div>`// NEVER DO THIS}).mount('#app')"
                },
                {
                    "type": "p",
                    "text": "Vue templates are compiled into JavaScript, and expressions inside templates will be executed as part of the rendering process. Although the expressions are evaluated against a specific rendering context, due to the complexity of potential global execution environments, it is impractical for a framework like Vue to completely shield you from potential malicious code execution without incurring unrealistic performance overhead. The most straightforward way to avoid this category of problems altogether is to make sure the contents of your Vue templates are always trusted and entirely controlled by you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What Vue Does to Protect You​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "HTML content​"
                },
                {
                    "type": "p",
                    "text": "Whether using templates or render functions, content is automatically escaped. That means in this template:"
                },
                {
                    "type": "code",
                    "code": "<h1>{{ userProvidedString }}</h1>"
                },
                {
                    "type": "p",
                    "text": "ifuserProvidedStringcontained:"
                },
                {
                    "type": "code",
                    "code": "'<script>alert(\"hi\")</script>'"
                },
                {
                    "type": "p",
                    "text": "then it would be escaped to the following HTML:"
                },
                {
                    "type": "code",
                    "code": "&lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;"
                },
                {
                    "type": "p",
                    "text": "thus preventing the script injection. This escaping is done using native browser APIs, liketextContent, so a vulnerability can only exist if the browser itself is vulnerable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Attribute bindings​"
                },
                {
                    "type": "p",
                    "text": "Similarly, dynamic attribute bindings are also automatically escaped. That means in this template:"
                },
                {
                    "type": "code",
                    "code": "<h1:title=\"userProvidedString\">hello</h1>"
                },
                {
                    "type": "p",
                    "text": "ifuserProvidedStringcontained:"
                },
                {
                    "type": "code",
                    "code": "'\" onclick=\"alert(\\'hi\\')'"
                },
                {
                    "type": "p",
                    "text": "then it would be escaped to the following HTML:"
                },
                {
                    "type": "code",
                    "code": "&quot;onclick=&quot;alert('hi')"
                },
                {
                    "type": "p",
                    "text": "thus preventing the close of thetitleattribute to inject new, arbitrary HTML. This escaping is done using native browser APIs, likesetAttribute, so a vulnerability can only exist if the browser itself is vulnerable."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Potential Dangers​"
                },
                {
                    "type": "p",
                    "text": "In any web application, allowing unsanitized, user-provided content to be executed as HTML, CSS, or JavaScript is potentially dangerous, so it should be avoided wherever possible. There are times when some risk may be acceptable, though."
                },
                {
                    "type": "p",
                    "text": "For example, services like CodePen and JSFiddle allow user-provided content to be executed, but it's in a context where this is expected and sandboxed to some extent inside iframes. In the cases when an important feature inherently requires some level of vulnerability, it's up to your team to weigh the importance of the feature against the worst-case scenarios the vulnerability enables."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "HTML Injection​"
                },
                {
                    "type": "p",
                    "text": "As you learned earlier, Vue automatically escapes HTML content, preventing you from accidentally injecting executable HTML into your application. However,in cases where you know the HTML is safe, you can explicitly render HTML content:"
                },
                {
                    "type": "list",
                    "items": [
                        "Using a template:template<divv-html=\"userProvidedHtml\"></div>",
                        "Using a render function:jsh('div', {innerHTML:this.userProvidedHtml})",
                        "Using a render function with JSX:jsx<divinnerHTML={this.userProvidedHtml}></div>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Using a template:"
                },
                {
                    "type": "code",
                    "code": "<divv-html=\"userProvidedHtml\"></div>"
                },
                {
                    "type": "p",
                    "text": "Using a render function:"
                },
                {
                    "type": "code",
                    "code": "h('div', {innerHTML:this.userProvidedHtml})"
                },
                {
                    "type": "p",
                    "text": "Using a render function with JSX:"
                },
                {
                    "type": "code",
                    "code": "<divinnerHTML={this.userProvidedHtml}></div>"
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "User-provided HTML can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that HTML can ever be exposed to it. Additionally, allowing users to write their own Vue templates brings similar dangers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "URL Injection​"
                },
                {
                    "type": "p",
                    "text": "In a URL like this:"
                },
                {
                    "type": "code",
                    "code": "<a:href=\"userProvidedUrl\">click me</a>"
                },
                {
                    "type": "p",
                    "text": "There's a potential security issue if the URL has not been \"sanitized\" to prevent JavaScript execution usingjavascript:. There are libraries such assanitize-urlto help with this, but note: if you're ever doing URL sanitization on the frontend, you already have a security issue.User-provided URLs should always be sanitized by your backend before even being saved to a database.Then the problem is avoided foreveryclient connecting to your API, including native mobile apps. Also note that even with sanitized URLs, Vue cannot help you guarantee that they lead to safe destinations."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Style Injection​"
                },
                {
                    "type": "p",
                    "text": "Looking at this example:"
                },
                {
                    "type": "code",
                    "code": "<a:href=\"sanitizedUrl\":style=\"userProvidedStyles\">click me</a>"
                },
                {
                    "type": "p",
                    "text": "Let's assume thatsanitizedUrlhas been sanitized, so that it's definitely a real URL and not JavaScript. With theuserProvidedStyles, malicious users could still provide CSS to \"click jack\", e.g. styling the link into a transparent box over the \"Log in\" button. Then ifhttps://user-controlled-website.com/is built to resemble the login page of your application, they might have just captured a user's real login information."
                },
                {
                    "type": "p",
                    "text": "You may be able to imagine how allowing user-provided content for a<style>element would create an even greater vulnerability, giving that user full control over how to style the entire page. That's why Vue prevents rendering of style tags inside templates, such as:"
                },
                {
                    "type": "code",
                    "code": "<style>{{ userProvidedStyles }}</style>"
                },
                {
                    "type": "p",
                    "text": "To keep your users fully safe from clickjacking, we recommend only allowing full control over CSS inside a sandboxed iframe. Alternatively, when providing user control through a style binding, we recommend using itsobject syntaxand only allowing users to provide values for specific properties it's safe for them to control, like this:"
                },
                {
                    "type": "code",
                    "code": "<a:href=\"sanitizedUrl\":style=\"{color: userProvidedColor,background: userProvidedBackground}\">click me</a>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "JavaScript Injection​"
                },
                {
                    "type": "p",
                    "text": "We strongly discourage ever rendering a<script>element with Vue, since templates and render functions should never have side effects. However, this isn't the only way to include strings that would be evaluated as JavaScript at runtime."
                },
                {
                    "type": "p",
                    "text": "Every HTML element has attributes with values accepting strings of JavaScript, such asonclick,onfocus, andonmouseenter. Binding user-provided JavaScript to any of these event attributes is a potential security risk, so it should be avoided."
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "User-provided JavaScript can never be considered 100% safe unless it's in a sandboxed iframe or in a part of the app where only the user who wrote that JavaScript can ever be exposed to it."
                },
                {
                    "type": "p",
                    "text": "Sometimes we receive vulnerability reports on how it's possible to do cross-site scripting (XSS) in Vue templates. In general, we do not consider such cases to be actual vulnerabilities because there's no practical way to protect developers from the two scenarios that would allow XSS:"
                },
                {
                    "type": "list",
                    "items": [
                        "The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin.",
                        "The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is tonever mount Vue on nodes that may contain server-rendered and user-provided content."
                    ]
                },
                {
                    "type": "p",
                    "text": "The developer is explicitly asking Vue to render user-provided, unsanitized content as Vue templates. This is inherently unsafe, and there's no way for Vue to know the origin."
                },
                {
                    "type": "p",
                    "text": "The developer is mounting Vue to an entire HTML page which happens to contain server-rendered and user-provided content. This is fundamentally the same problem as #1, but sometimes devs may do it without realizing it. This can lead to possible vulnerabilities where the attacker provides HTML which is safe as plain HTML but unsafe as a Vue template. The best practice is tonever mount Vue on nodes that may contain server-rendered and user-provided content."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Best Practices​"
                },
                {
                    "type": "p",
                    "text": "The general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might open yourself up to attacks. This advice actually holds true whether using Vue, another framework, or even no framework."
                },
                {
                    "type": "p",
                    "text": "Beyond the recommendations made above forPotential Dangers, we also recommend familiarizing yourself with these resources:"
                },
                {
                    "type": "list",
                    "items": [
                        "HTML5 Security Cheat Sheet",
                        "OWASP's Cross Site Scripting (XSS) Prevention Cheat Sheet"
                    ]
                },
                {
                    "type": "p",
                    "text": "Then use what you learn to also review the source code of your dependencies for potentially dangerous patterns, if any of them include 3rd-party components or otherwise influence what's rendered to the DOM."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Backend Coordination​"
                },
                {
                    "type": "p",
                    "text": "HTTP security vulnerabilities, such as cross-site request forgery (CSRF/XSRF) and cross-site script inclusion (XSSI), are primarily addressed on the backend, so they aren't a concern of Vue's. However, it's still a good idea to communicate with your backend team to learn how to best interact with their API, e.g., by submitting CSRF tokens with form submissions."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Server-Side Rendering (SSR)​"
                },
                {
                    "type": "p",
                    "text": "There are some additional security concerns when using SSR, so make sure to follow the best practices outlined throughoutour SSR documentationto avoid vulnerabilities."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/built-ins/keep-alive",
            "title": "KeepAlive | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "KeepAlive​"
                },
                {
                    "type": "p",
                    "text": "<KeepAlive>is a built-in component that allows us to conditionally cache component instances when dynamically switching between multiple components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "p",
                    "text": "In the Component Basics chapter, we introduced the syntax forDynamic Components, using the<component>special element:"
                },
                {
                    "type": "code",
                    "code": "<component:is=\"activeComponent\"/>"
                },
                {
                    "type": "p",
                    "text": "By default, an active component instance will be unmounted when switching away from it. This will cause any changed state it holds to be lost. When this component is displayed again, a new instance will be created with only the initial state."
                },
                {
                    "type": "p",
                    "text": "In the example below, we have two stateful components - A contains a counter, while B contains a message synced with an input viav-model. Try updating the state of one of them, switch away, and then switch back to it:"
                },
                {
                    "type": "p",
                    "text": "Current component: A"
                },
                {
                    "type": "p",
                    "text": "You'll notice that when switched back, the previous changed state would have been reset."
                },
                {
                    "type": "p",
                    "text": "Creating fresh component instance on switch is normally useful behavior, but in this case, we'd really like the two component instances to be preserved even when they are inactive. To solve this problem, we can wrap our dynamic component with the<KeepAlive>built-in component:"
                },
                {
                    "type": "code",
                    "code": "<!-- Inactive components will be cached! --><KeepAlive><component:is=\"activeComponent\"/></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "Now, the state will be persisted across component switches:"
                },
                {
                    "type": "p",
                    "text": "Current component: A"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "When used inin-DOM templates, it should be referenced as<keep-alive>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Include / Exclude​"
                },
                {
                    "type": "p",
                    "text": "By default,<KeepAlive>will cache any component instance inside. We can customize this behavior via theincludeandexcludeprops. Both props can be a comma-delimited string, aRegExp, or an array containing either types:"
                },
                {
                    "type": "code",
                    "code": "<!-- comma-delimited string --><KeepAliveinclude=\"a,b\"><component:is=\"view\"/></KeepAlive><!-- regex (use `v-bind`) --><KeepAlive:include=\"/a|b/\"><component:is=\"view\"/></KeepAlive><!-- Array (use `v-bind`) --><KeepAlive:include=\"['a','b']\"><component:is=\"view\"/></KeepAlive>"
                },
                {
                    "type": "p",
                    "text": "The match is checked against the component'snameoption, so components that need to be conditionally cached byKeepAlivemust explicitly declare anameoption."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Since version 3.2.34, a single-file component using<script setup>will automatically infer itsnameoption based on the filename, removing the need to manually declare the name."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Max Cached Instances​"
                },
                {
                    "type": "p",
                    "text": "We can limit the maximum number of component instances that can be cached via themaxprop. Whenmaxis specified,<KeepAlive>behaves like anLRU cache: if the number of cached instances is about to exceed the specified max count, the least recently accessed cached instance will be destroyed to make room for the new one."
                },
                {
                    "type": "code",
                    "code": "<KeepAlive:max=\"10\"><component:is=\"activeComponent\"/></KeepAlive>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lifecycle of Cached Instance​"
                },
                {
                    "type": "p",
                    "text": "When a component instance is removed from the DOM but is part of a component tree cached by<KeepAlive>, it goes into adeactivatedstate instead of being unmounted. When a component instance is inserted into the DOM as part of a cached tree, it isactivated."
                },
                {
                    "type": "p",
                    "text": "A kept-alive component can register lifecycle hooks for these two states usingonActivated()andonDeactivated():"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ onActivated, onDeactivated }from'vue'onActivated(()=>{// called on initial mount// and every time it is re-inserted from the cache})onDeactivated(()=>{// called when removed from the DOM into the cache// and also when unmounted})</script>"
                },
                {
                    "type": "p",
                    "text": "A kept-alive component can register lifecycle hooks for these two states usingactivatedanddeactivatedhooks:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{activated() {// called on initial mount// and every time it is re-inserted from the cache},deactivated() {// called when removed from the DOM into the cache// and also when unmounted}}"
                },
                {
                    "type": "p",
                    "text": "Note that:"
                },
                {
                    "type": "list",
                    "items": [
                        "onActivatedactivatedis also called on mount, andonDeactivateddeactivatedon unmount.",
                        "Both hooks work for not only the root component cached by<KeepAlive>, but also the descendant components in the cached tree."
                    ]
                },
                {
                    "type": "p",
                    "text": "onActivatedactivatedis also called on mount, andonDeactivateddeactivatedon unmount."
                },
                {
                    "type": "p",
                    "text": "Both hooks work for not only the root component cached by<KeepAlive>, but also the descendant components in the cached tree."
                },
                {
                    "type": "p",
                    "text": "Related"
                },
                {
                    "type": "list",
                    "items": [
                        "<KeepAlive>API reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/built-ins/suspense",
            "title": "Suspense | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Suspense​"
                },
                {
                    "type": "p",
                    "text": "Experimental Feature"
                },
                {
                    "type": "p",
                    "text": "<Suspense>is an experimental feature. It is not guaranteed to reach stable status and the API may change before it does."
                },
                {
                    "type": "p",
                    "text": "<Suspense>is a built-in component for orchestrating async dependencies in a component tree. It can render a loading state while waiting for multiple nested async dependencies down the component tree to be resolved."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Async Dependencies​"
                },
                {
                    "type": "p",
                    "text": "To explain the problem<Suspense>is trying to solve and how it interacts with these async dependencies, let's imagine a component hierarchy like the following:"
                },
                {
                    "type": "code",
                    "code": "<Suspense>└─ <Dashboard>├─ <Profile>│  └─ <FriendStatus> (component with async setup())└─ <Content>├─ <ActivityFeed> (async component)└─ <Stats> (async component)"
                },
                {
                    "type": "p",
                    "text": "In the component tree there are multiple nested components whose rendering depends on some async resource to be resolved first. Without<Suspense>, each of them will need to handle its own loading / error and loaded states. In the worst case scenario, we may see three loading spinners on the page, with content displayed at different times."
                },
                {
                    "type": "p",
                    "text": "The<Suspense>component gives us the ability to display top-level loading / error states while we wait on these nested async dependencies to be resolved."
                },
                {
                    "type": "p",
                    "text": "There are two types of async dependencies that<Suspense>can wait on:"
                },
                {
                    "type": "list",
                    "items": [
                        "Components with an asyncsetup()hook. This includes components using<script setup>with top-levelawaitexpressions.",
                        "Async Components."
                    ]
                },
                {
                    "type": "p",
                    "text": "Components with an asyncsetup()hook. This includes components using<script setup>with top-levelawaitexpressions."
                },
                {
                    "type": "p",
                    "text": "Async Components."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "async setup()​"
                },
                {
                    "type": "p",
                    "text": "A Composition API component'ssetup()hook can be async:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{asyncsetup() {constres=awaitfetch(...)constposts=awaitres.json()return{posts}}}"
                },
                {
                    "type": "p",
                    "text": "If using<script setup>, the presence of top-levelawaitexpressions automatically makes the component an async dependency:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constres=awaitfetch(...)constposts=awaitres.json()</script><template>{{ posts }}</template>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Async Components​"
                },
                {
                    "type": "p",
                    "text": "Async components are\"suspensible\"by default. This means that if it has a<Suspense>in the parent chain, it will be treated as an async dependency of that<Suspense>. In this case, the loading state will be controlled by the<Suspense>, and the component's own loading, error, delay and timeout options will be ignored."
                },
                {
                    "type": "p",
                    "text": "The async component can opt-out ofSuspensecontrol and let the component always control its own loading state by specifyingsuspensible: falsein its options."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Loading State​"
                },
                {
                    "type": "p",
                    "text": "The<Suspense>component has two slots:#defaultand#fallback. Both slots only allow foroneimmediate child node. The node in the default slot is shown if possible. If not, the node in the fallback slot will be shown instead."
                },
                {
                    "type": "code",
                    "code": "<Suspense><!-- component with nested async dependencies --><Dashboard/><!-- loading state via #fallback slot --><template#fallback>Loading...</template></Suspense>"
                },
                {
                    "type": "p",
                    "text": "On initial render,<Suspense>will render its default slot content in memory. If any async dependencies are encountered during the process, it will enter apendingstate. During the pending state, the fallback content will be displayed. When all encountered async dependencies have been resolved,<Suspense>enters aresolvedstate and the resolved default slot content is displayed."
                },
                {
                    "type": "p",
                    "text": "If no async dependencies were encountered during the initial render,<Suspense>will directly go into a resolved state."
                },
                {
                    "type": "p",
                    "text": "Once in a resolved state,<Suspense>will only revert to a pending state if the root node of the#defaultslot is replaced. New async dependencies nested deeper in the tree willnotcause the<Suspense>to revert to a pending state."
                },
                {
                    "type": "p",
                    "text": "When a revert happens, fallback content will not be immediately displayed. Instead,<Suspense>will display the previous#defaultcontent while waiting for the new content and its async dependencies to be resolved. This behavior can be configured with thetimeoutprop:<Suspense>will switch to fallback content if it takes longer thantimeoutto render the new default content. Atimeoutvalue of0will cause the fallback content to be displayed immediately when default content is replaced."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Events​"
                },
                {
                    "type": "p",
                    "text": "The<Suspense>component emits 3 events:pending,resolveandfallback. Thependingevent occurs when entering a pending state. Theresolveevent is emitted when new content has finished resolving in thedefaultslot. Thefallbackevent is fired when the contents of thefallbackslot are shown."
                },
                {
                    "type": "p",
                    "text": "The events could be used, for example, to show a loading indicator in front of the old DOM while new components are loading."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Error Handling​"
                },
                {
                    "type": "p",
                    "text": "<Suspense>currently does not provide error handling via the component itself - however, you can use theerrorCapturedoption or theonErrorCaptured()hook to capture and handle async errors in the parent component of<Suspense>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Combining with Other Components​"
                },
                {
                    "type": "p",
                    "text": "It is common to want to use<Suspense>in combination with the<Transition>and<KeepAlive>components. The nesting order of these components is important to get them all working correctly."
                },
                {
                    "type": "p",
                    "text": "In addition, these components are often used in conjunction with the<RouterView>component fromVue Router."
                },
                {
                    "type": "p",
                    "text": "The following example shows how to nest these components so that they all behave as expected. For simpler combinations you can remove the components that you don't need:"
                },
                {
                    "type": "code",
                    "code": "<RouterViewv-slot=\"{ Component }\"><templatev-if=\"Component\"><Transitionmode=\"out-in\"><KeepAlive><Suspense><!-- main content --><component:is=\"Component\"></component><!-- loading state --><template#fallback>Loading...</template></Suspense></KeepAlive></Transition></template></RouterView>"
                },
                {
                    "type": "p",
                    "text": "Vue Router has built-in support forlazily loading componentsusing dynamic imports. These are distinct from async components and currently they will not trigger<Suspense>. However, they can still have async components as descendants and those can trigger<Suspense>in the usual way."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Nested Suspense​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.3+"
                    ]
                },
                {
                    "type": "p",
                    "text": "When we have multiple async components (common for nested or layout-based routes) like this:"
                },
                {
                    "type": "code",
                    "code": "<Suspense><component:is=\"DynamicAsyncOuter\"><component:is=\"DynamicAsyncInner\"/></component></Suspense>"
                },
                {
                    "type": "p",
                    "text": "<Suspense>creates a boundary that will resolve all the async components down the tree, as expected. However, when we changeDynamicAsyncOuter,<Suspense>awaits it correctly, but when we changeDynamicAsyncInner, the nestedDynamicAsyncInnerrenders an empty node until it has been resolved (instead of the previous one or fallback slot)."
                },
                {
                    "type": "p",
                    "text": "In order to solve that, we could have a nested suspense to handle the patch for the nested component, like:"
                },
                {
                    "type": "code",
                    "code": "<Suspense><component:is=\"DynamicAsyncOuter\"><Suspensesuspensible><!-- this --><component:is=\"DynamicAsyncInner\"/></Suspense></component></Suspense>"
                },
                {
                    "type": "p",
                    "text": "If you don't set thesuspensibleprop, the inner<Suspense>will be treated like a sync component by the parent<Suspense>. That means that it has its own fallback slot and if bothDynamiccomponents change at the same time, there might be empty nodes and multiple patching cycles while the child<Suspense>is loading its own dependency tree, which might not be desirable. When it's set, all the async dependency handling is given to the parent<Suspense>(including the events emitted) and the inner<Suspense>serves solely as another boundary for the dependency resolution and patching."
                },
                {
                    "type": "p",
                    "text": "Related"
                },
                {
                    "type": "list",
                    "items": [
                        "<Suspense>API reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/built-ins/teleport",
            "title": "Teleport | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Teleport​"
                },
                {
                    "type": "p",
                    "text": "<Teleport>is a built-in component that allows us to \"teleport\" a part of a component's template into a DOM node that exists outside the DOM hierarchy of that component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "p",
                    "text": "Sometimes we may run into the following scenario: a part of a component's template belongs to it logically, but from a visual standpoint, it should be displayed somewhere else in the DOM, outside of the Vue application."
                },
                {
                    "type": "p",
                    "text": "The most common example of this is when building a full-screen modal. Ideally, we want the modal's button and the modal itself to live within the same component, since they are both related to the open / close state of the modal. But that means the modal will be rendered alongside the button, deeply nested in the application's DOM hierarchy. This can create some tricky issues when positioning the modal via CSS."
                },
                {
                    "type": "p",
                    "text": "Consider the following HTML structure."
                },
                {
                    "type": "code",
                    "code": "<divclass=\"outer\"><h3>Vue Teleport Example</h3><div><MyModal/></div></div>"
                },
                {
                    "type": "p",
                    "text": "And here is the implementation of<MyModal>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constopen=ref(false)</script><template><button@click=\"open = true\">Open Modal</button><divv-if=\"open\"class=\"modal\"><p>Hello from the modal!</p><button@click=\"open = false\">Close</button></div></template><stylescoped>.modal{position:fixed;z-index:999;top:20%;left:50%;width:300px;margin-left:-150px;}</style>"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{open:false}}}</script><template><button@click=\"open = true\">Open Modal</button><divv-if=\"open\"class=\"modal\"><p>Hello from the modal!</p><button@click=\"open = false\">Close</button></div></template><stylescoped>.modal{position:fixed;z-index:999;top:20%;left:50%;width:300px;margin-left:-150px;}</style>"
                },
                {
                    "type": "p",
                    "text": "The component contains a<button>to trigger the opening of the modal, and a<div>with a class of.modal, which will contain the modal's content and a button to self-close."
                },
                {
                    "type": "p",
                    "text": "When using this component inside the initial HTML structure, there are a number of potential issues:"
                },
                {
                    "type": "list",
                    "items": [
                        "position: fixedonly places the element relative to the viewport when no ancestor element hastransform,perspectiveorfilterproperty set. If, for example, we intend to animate the ancestor<div class=\"outer\">with a CSS transform, it would break the modal layout!",
                        "The modal'sz-indexis constrained by its containing elements. If there is another element that overlaps with<div class=\"outer\">and has a higherz-index, it would cover our modal."
                    ]
                },
                {
                    "type": "p",
                    "text": "position: fixedonly places the element relative to the viewport when no ancestor element hastransform,perspectiveorfilterproperty set. If, for example, we intend to animate the ancestor<div class=\"outer\">with a CSS transform, it would break the modal layout!"
                },
                {
                    "type": "p",
                    "text": "The modal'sz-indexis constrained by its containing elements. If there is another element that overlaps with<div class=\"outer\">and has a higherz-index, it would cover our modal."
                },
                {
                    "type": "p",
                    "text": "<Teleport>provides a clean way to work around these, by allowing us to break out of the nested DOM structure. Let's modify<MyModal>to use<Teleport>:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"open=true\">Open Modal</button><Teleportto=\"body\"><divv-if=\"open\"class=\"modal\"><p>Hello from the modal!</p><button@click=\"open=false\">Close</button></div></Teleport>"
                },
                {
                    "type": "p",
                    "text": "Thetotarget of<Teleport>expects a CSS selector string or an actual DOM node. Here, we are essentially telling Vue to \"teleportthis template fragmenttothebodytag\"."
                },
                {
                    "type": "p",
                    "text": "You can click the button below and inspect the<body>tag via your browser's devtools:"
                },
                {
                    "type": "p",
                    "text": "You can combine<Teleport>with<Transition>to create animated modals - seeExample here."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "The teleporttotarget must be already in the DOM when the<Teleport>component is mounted. Ideally, this should be an element outside the entire Vue application. If targeting another element rendered by Vue, you need to make sure that element is mounted before the<Teleport>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using with Components​"
                },
                {
                    "type": "p",
                    "text": "<Teleport>only alters the rendered DOM structure - it does not affect the logical hierarchy of the components. That is to say, if<Teleport>contains a component, that component will remain a logical child of the parent component containing the<Teleport>. Props passing and event emitting will continue to work the same way."
                },
                {
                    "type": "p",
                    "text": "This also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disabling Teleport​"
                },
                {
                    "type": "p",
                    "text": "In some cases, we may want to conditionally disable<Teleport>. For example, we may want to render a component as an overlay for desktop, but inline on mobile.<Teleport>supports thedisabledprop which can be dynamically toggled:"
                },
                {
                    "type": "code",
                    "code": "<Teleport:disabled=\"isMobile\">...</Teleport>"
                },
                {
                    "type": "p",
                    "text": "Where theisMobilestate can be dynamically updated by detecting media query changes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Multiple Teleports on the Same Target​"
                },
                {
                    "type": "p",
                    "text": "A common use case would be a reusable<Modal>component, with the potential for multiple instances to be active at the same time. For this kind of scenario, multiple<Teleport>components can mount their content to the same target element. The order will be a simple append - later mounts will be located after earlier ones within the target element."
                },
                {
                    "type": "p",
                    "text": "Given the following usage:"
                },
                {
                    "type": "code",
                    "code": "<Teleportto=\"#modals\"><div>A</div></Teleport><Teleportto=\"#modals\"><div>B</div></Teleport>"
                },
                {
                    "type": "p",
                    "text": "The rendered result would be:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"modals\"><div>A</div><div>B</div></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deferred Teleport​"
                },
                {
                    "type": "p",
                    "text": "In Vue 3.5 and above, we can use thedeferprop to defer the target resolving of a Teleport until other parts of the application have mounted. This allows the Teleport to target a container element that is rendered by Vue, but in a later part of the component tree:"
                },
                {
                    "type": "code",
                    "code": "<Teleportdeferto=\"#late-div\">...</Teleport><!-- somewhere later in the template --><divid=\"late-div\"></div>"
                },
                {
                    "type": "p",
                    "text": "Note that the target element must be rendered in the same mount / update tick with the Teleport - i.e. if the<div>is only mounted a second later, the Teleport will still report an error. The defer works similarly to themountedlifecycle hook."
                },
                {
                    "type": "p",
                    "text": "Related"
                },
                {
                    "type": "list",
                    "items": [
                        "<Teleport>API reference",
                        "Handling Teleports in SSR"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/built-ins/transition",
            "title": "Transition | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Transition​"
                },
                {
                    "type": "p",
                    "text": "Vue offers two built-in components that can help work with transitions and animations in response to changing state:"
                },
                {
                    "type": "list",
                    "items": [
                        "<Transition>for applying animations when an element or component is entering and leaving the DOM. This is covered on this page.",
                        "<TransitionGroup>for applying animations when an element or component is inserted into, removed from, or moved within av-forlist. This is covered inthe next chapter."
                    ]
                },
                {
                    "type": "p",
                    "text": "<Transition>for applying animations when an element or component is entering and leaving the DOM. This is covered on this page."
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>for applying animations when an element or component is inserted into, removed from, or moved within av-forlist. This is covered inthe next chapter."
                },
                {
                    "type": "p",
                    "text": "Aside from these two components, we can also apply animations in Vue using other techniques such as toggling CSS classes or state-driven animations via style bindings. These additional techniques are covered in theAnimation Techniqueschapter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The<Transition>Component​"
                },
                {
                    "type": "p",
                    "text": "<Transition>is a built-in component: this means it is available in any component's template without having to register it. It can be used to apply enter and leave animations on elements or components passed to it via its default slot. The enter or leave can be triggered by one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Conditional rendering viav-if",
                        "Conditional display viav-show",
                        "Dynamic components toggling via the<component>special element",
                        "Changing the specialkeyattribute"
                    ]
                },
                {
                    "type": "p",
                    "text": "This is an example of the most basic usage:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"show=!show\">Toggle</button><Transition><pv-if=\"show\">hello</p></Transition>"
                },
                {
                    "type": "code",
                    "code": "/* we will explain what these classes do next! */.v-enter-active,.v-leave-active{transition: opacity0.5sease;}.v-enter-from,.v-leave-to{opacity:0;}"
                },
                {
                    "type": "p",
                    "text": "hello"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "<Transition>only supports a single element or component as its slot content. If the content is a component, the component must also have only one single root element."
                },
                {
                    "type": "p",
                    "text": "When an element in a<Transition>component is inserted or removed, this is what happens:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number ofCSS transition classeswill be added / removed at appropriate timings.",
                        "If there are listeners forJavaScript hooks, these hooks will be called at appropriate timings.",
                        "If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue will automatically sniff whether the target element has CSS transitions or animations applied. If it does, a number ofCSS transition classeswill be added / removed at appropriate timings."
                },
                {
                    "type": "p",
                    "text": "If there are listeners forJavaScript hooks, these hooks will be called at appropriate timings."
                },
                {
                    "type": "p",
                    "text": "If no CSS transitions / animations are detected and no JavaScript hooks are provided, the DOM operations for insertion and/or removal will be executed on the browser's next animation frame."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "CSS-Based Transitions​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Transition Classes​"
                },
                {
                    "type": "p",
                    "text": "There are six classes applied for enter / leave transitions."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "list",
                    "items": [
                        "v-enter-from: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted.",
                        "v-enter-active: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.",
                        "v-enter-to: Ending state for enter. Added one frame after the element is inserted (at the same timev-enter-fromis removed), removed when the transition/animation finishes.",
                        "v-leave-from: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.",
                        "v-leave-active: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.",
                        "v-leave-to: Ending state for leave. Added one frame after a leaving transition is triggered (at the same timev-leave-fromis removed), removed when the transition/animation finishes."
                    ]
                },
                {
                    "type": "p",
                    "text": "v-enter-from: Starting state for enter. Added before the element is inserted, removed one frame after the element is inserted."
                },
                {
                    "type": "p",
                    "text": "v-enter-active: Active state for enter. Applied during the entire entering phase. Added before the element is inserted, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition."
                },
                {
                    "type": "p",
                    "text": "v-enter-to: Ending state for enter. Added one frame after the element is inserted (at the same timev-enter-fromis removed), removed when the transition/animation finishes."
                },
                {
                    "type": "p",
                    "text": "v-leave-from: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame."
                },
                {
                    "type": "p",
                    "text": "v-leave-active: Active state for leave. Applied during the entire leaving phase. Added immediately when a leaving transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition."
                },
                {
                    "type": "p",
                    "text": "v-leave-to: Ending state for leave. Added one frame after a leaving transition is triggered (at the same timev-leave-fromis removed), removed when the transition/animation finishes."
                },
                {
                    "type": "p",
                    "text": "v-enter-activeandv-leave-activegive us the ability to specify different easing curves for enter / leave transitions, which we'll see an example of in the following sections."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Named Transitions​"
                },
                {
                    "type": "p",
                    "text": "A transition can be named via thenameprop:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"fade\">...</Transition>"
                },
                {
                    "type": "p",
                    "text": "For a named transition, its transition classes will be prefixed with its name instead ofv. For example, the applied class for the above transition will befade-enter-activeinstead ofv-enter-active. The CSS for the fade transition should look like this:"
                },
                {
                    "type": "code",
                    "code": ".fade-enter-active,.fade-leave-active{transition: opacity0.5sease;}.fade-enter-from,.fade-leave-to{opacity:0;}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Transitions​"
                },
                {
                    "type": "p",
                    "text": "<Transition>is most commonly used in combination withnative CSS transitions, as seen in the basic example above. ThetransitionCSS property is a shorthand that allows us to specify multiple aspects of a transition, including properties that should be animated, duration of the transition, andeasing curves."
                },
                {
                    "type": "p",
                    "text": "Here is a more advanced example that transitions multiple properties, with different durations and easing curves for enter and leave:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"slide-fade\"><pv-if=\"show\">hello</p></Transition>"
                },
                {
                    "type": "code",
                    "code": "/*Enter and leave animations can use differentdurations and timing functions.*/.slide-fade-enter-active{transition:all0.3sease-out;}.slide-fade-leave-active{transition:all0.8scubic-bezier(1,0.5,0.8,1);}.slide-fade-enter-from,.slide-fade-leave-to{transform:translateX(20px);opacity:0;}"
                },
                {
                    "type": "p",
                    "text": "hello"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "CSS Animations​"
                },
                {
                    "type": "p",
                    "text": "Native CSS animationsare applied in the same way as CSS transitions, with the difference being that*-enter-fromis not removed immediately after the element is inserted, but on ananimationendevent."
                },
                {
                    "type": "p",
                    "text": "For most CSS animations, we can simply declare them under the*-enter-activeand*-leave-activeclasses. Here's an example:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"bounce\"><pv-if=\"show\"style=\"text-align: center;\">Hello here is some bouncy text!</p></Transition>"
                },
                {
                    "type": "code",
                    "code": ".bounce-enter-active{animation: bounce-in0.5s;}.bounce-leave-active{animation: bounce-in0.5sreverse;}@keyframesbounce-in{0%{transform:scale(0);}50%{transform:scale(1.25);}100%{transform:scale(1);}}"
                },
                {
                    "type": "p",
                    "text": "Hello here is some bouncy text!"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Transition Classes​"
                },
                {
                    "type": "p",
                    "text": "You can also specify custom transition classes by passing the following props to<Transition>:"
                },
                {
                    "type": "list",
                    "items": [
                        "enter-from-class",
                        "enter-active-class",
                        "enter-to-class",
                        "leave-from-class",
                        "leave-active-class",
                        "leave-to-class"
                    ]
                },
                {
                    "type": "p",
                    "text": "These will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such asAnimate.css:"
                },
                {
                    "type": "code",
                    "code": "<!-- assuming Animate.css is included on the page --><Transitionname=\"custom-classes\"enter-active-class=\"animate__animated animate__tada\"leave-active-class=\"animate__animated animate__bounceOutRight\"><pv-if=\"show\">hello</p></Transition>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using Transitions and Animations Together​"
                },
                {
                    "type": "p",
                    "text": "Vue needs to attach event listeners in order to know when a transition has ended. It can either betransitionendoranimationend, depending on the type of CSS rules applied. If you are only using one or the other, Vue can automatically detect the correct type."
                },
                {
                    "type": "p",
                    "text": "However, in some cases you may want to have both on the same element, for example having a CSS animation triggered by Vue, along with a CSS transition effect on hover. In these cases, you will have to explicitly declare the type you want Vue to care about by passing thetypeprop, with a value of eitheranimationortransition:"
                },
                {
                    "type": "code",
                    "code": "<Transitiontype=\"animation\">...</Transition>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nested Transitions and Explicit Transition Durations​"
                },
                {
                    "type": "p",
                    "text": "Although the transition classes are only applied to the direct child element in<Transition>, we can transition nested elements using nested CSS selectors:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"nested\"><divv-if=\"show\"class=\"outer\"><divclass=\"inner\">Hello</div></div></Transition>"
                },
                {
                    "type": "code",
                    "code": "/* rules that target nested elements */.nested-enter-active.inner,.nested-leave-active.inner{transition:all0.3sease-in-out;}.nested-enter-from.inner,.nested-leave-to.inner{transform:translateX(30px);opacity:0;}/* ... other necessary CSS omitted */"
                },
                {
                    "type": "p",
                    "text": "We can even add a transition delay to the nested element on enter, which creates a staggered enter animation sequence:"
                },
                {
                    "type": "code",
                    "code": "/* delay enter of nested element for staggered effect */.nested-enter-active.inner{transition-delay:0.25s;}"
                },
                {
                    "type": "p",
                    "text": "However, this creates a small issue. By default, the<Transition>component attempts to automatically figure out when the transition has finished by listening to thefirsttransitionendoranimationendevent on the root transition element. With a nested transition, the desired behavior should be waiting until the transitions of all inner elements have finished."
                },
                {
                    "type": "p",
                    "text": "In such cases you can specify an explicit transition duration (in milliseconds) using thedurationprop on the<transition>component. The total duration should match the delay plus transition duration of the inner element:"
                },
                {
                    "type": "code",
                    "code": "<Transition:duration=\"550\">...</Transition>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "If necessary, you can also specify separate values for enter and leave durations using an object:"
                },
                {
                    "type": "code",
                    "code": "<Transition:duration=\"{ enter:500, leave:800}\">...</Transition>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Performance Considerations​"
                },
                {
                    "type": "p",
                    "text": "You may notice that the animations shown above are mostly using properties liketransformandopacity. These properties are efficient to animate because:"
                },
                {
                    "type": "list",
                    "items": [
                        "They do not affect the document layout during the animation, so they do not trigger expensive CSS layout calculation on every animation frame.",
                        "Most modern browsers can leverage GPU hardware acceleration when animatingtransform."
                    ]
                },
                {
                    "type": "p",
                    "text": "They do not affect the document layout during the animation, so they do not trigger expensive CSS layout calculation on every animation frame."
                },
                {
                    "type": "p",
                    "text": "Most modern browsers can leverage GPU hardware acceleration when animatingtransform."
                },
                {
                    "type": "p",
                    "text": "In comparison, properties likeheightormarginwill trigger CSS layout, so they are much more expensive to animate, and should be used with caution."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "JavaScript Hooks​"
                },
                {
                    "type": "p",
                    "text": "You can hook into the transition process with JavaScript by listening to events on the<Transition>component:"
                },
                {
                    "type": "code",
                    "code": "<Transition@before-enter=\"onBeforeEnter\"@enter=\"onEnter\"@after-enter=\"onAfterEnter\"@enter-cancelled=\"onEnterCancelled\"@before-leave=\"onBeforeLeave\"@leave=\"onLeave\"@after-leave=\"onAfterLeave\"@leave-cancelled=\"onLeaveCancelled\"><!-- ... --></Transition>"
                },
                {
                    "type": "code",
                    "code": "// called before the element is inserted into the DOM.// use this to set the \"enter-from\" state of the elementfunctiononBeforeEnter(el) {}// called one frame after the element is inserted.// use this to start the entering animation.functiononEnter(el,done) {// call the done callback to indicate transition end// optional if used in combination with CSSdone()}// called when the enter transition has finished.functiononAfterEnter(el) {}// called when the enter transition is cancelled before completion.functiononEnterCancelled(el) {}// called before the leave hook.// Most of the time, you should just use the leave hookfunctiononBeforeLeave(el) {}// called when the leave transition starts.// use this to start the leaving animation.functiononLeave(el,done) {// call the done callback to indicate transition end// optional if used in combination with CSSdone()}// called when the leave transition has finished and the// element has been removed from the DOM.functiononAfterLeave(el) {}// only available with v-show transitionsfunctiononLeaveCancelled(el) {}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// ...methods: {// called before the element is inserted into the DOM.// use this to set the \"enter-from\" state of the elementonBeforeEnter(el) {},// called one frame after the element is inserted.// use this to start the animation.onEnter(el,done) {// call the done callback to indicate transition end// optional if used in combination with CSSdone()},// called when the enter transition has finished.onAfterEnter(el) {},// called when the enter transition is cancelled before completion.onEnterCancelled(el) {},// called before the leave hook.// Most of the time, you should just use the leave hook.onBeforeLeave(el) {},// called when the leave transition starts.// use this to start the leaving animation.onLeave(el,done) {// call the done callback to indicate transition end// optional if used in combination with CSSdone()},// called when the leave transition has finished and the// element has been removed from the DOM.onAfterLeave(el) {},// only available with v-show transitionsonLeaveCancelled(el) {}}}"
                },
                {
                    "type": "p",
                    "text": "These hooks can be used in combination with CSS transitions / animations or on their own."
                },
                {
                    "type": "p",
                    "text": "When using JavaScript-only transitions, it is usually a good idea to add the:css=\"false\"prop. This explicitly tells Vue to skip auto CSS transition detection. Aside from being slightly more performant, this also prevents CSS rules from accidentally interfering with the transition:"
                },
                {
                    "type": "code",
                    "code": "<Transition...:css=\"false\">...</Transition>"
                },
                {
                    "type": "p",
                    "text": "With:css=\"false\", we are also fully responsible for controlling when the transition ends. In this case, thedonecallbacks are required for the@enterand@leavehooks. Otherwise, the hooks will be called synchronously and the transition will finish immediately."
                },
                {
                    "type": "p",
                    "text": "Here's a demo using theGSAP libraryto perform the animations. You can, of course, use any other animation library you want, for exampleAnime.jsorMotion One:"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reusable Transitions​"
                },
                {
                    "type": "p",
                    "text": "Transitions can be reused through Vue's component system. To create a reusable transition, we can create a component that wraps the<Transition>component and passes down the slot content:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyTransition.vue --><script>// JavaScript hooks logic...</script><template><!-- wrap the built-in Transition component --><Transitionname=\"my-transition\"@enter=\"onEnter\"@leave=\"onLeave\"><slot></slot><!-- pass down slot content --></Transition></template><style>/*Necessary CSS...Note: avoid using <style scoped> here since itdoes not apply to slot content.*/</style>"
                },
                {
                    "type": "p",
                    "text": "NowMyTransitioncan be imported and used just like the built-in version:"
                },
                {
                    "type": "code",
                    "code": "<MyTransition><divv-if=\"show\">Hello</div></MyTransition>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Transition on Appear​"
                },
                {
                    "type": "p",
                    "text": "If you also want to apply a transition on the initial render of a node, you can add theappearprop:"
                },
                {
                    "type": "code",
                    "code": "<Transitionappear>...</Transition>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Transition Between Elements​"
                },
                {
                    "type": "p",
                    "text": "In addition to toggling an element withv-if/v-show, we can also transition between two elements usingv-if/v-else/v-else-if, as long as we make sure that there is only one element being shown at any given moment:"
                },
                {
                    "type": "code",
                    "code": "<Transition><buttonv-if=\"docState==='saved'\">Edit</button><buttonv-else-if=\"docState==='edited'\">Save</button><buttonv-else-if=\"docState==='editing'\">Cancel</button></Transition>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Transition Modes​"
                },
                {
                    "type": "p",
                    "text": "In the previous example, the entering and leaving elements are animated at the same time, and we had to make themposition: absoluteto avoid the layout issue when both elements are present in the DOM."
                },
                {
                    "type": "p",
                    "text": "However, in some cases this isn't an option, or simply isn't the desired behavior. We may want the leaving element to be animated out first, and for the entering element to only be insertedafterthe leaving animation has finished. Orchestrating such animations manually would be very complicated - luckily, we can enable this behavior by passing<Transition>amodeprop:"
                },
                {
                    "type": "code",
                    "code": "<Transitionmode=\"out-in\">...</Transition>"
                },
                {
                    "type": "p",
                    "text": "Here's the previous demo withmode=\"out-in\":"
                },
                {
                    "type": "p",
                    "text": "<Transition>also supportsmode=\"in-out\", although it's much less frequently used."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Transition Between Components​"
                },
                {
                    "type": "p",
                    "text": "<Transition>can also be used arounddynamic components:"
                },
                {
                    "type": "code",
                    "code": "<Transitionname=\"fade\"mode=\"out-in\"><component:is=\"activeComponent\"></component></Transition>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Transitions​"
                },
                {
                    "type": "p",
                    "text": "<Transition>props likenamecan also be dynamic! It allows us to dynamically apply different transitions based on state change:"
                },
                {
                    "type": "code",
                    "code": "<Transition:name=\"transitionName\"><!-- ... --></Transition>"
                },
                {
                    "type": "p",
                    "text": "This can be useful when you've defined CSS transitions / animations using Vue's transition class conventions and want to switch between them."
                },
                {
                    "type": "p",
                    "text": "You can also apply different behavior in JavaScript transition hooks based on the current state of your component. Finally, the ultimate way of creating dynamic transitions is throughreusable transition componentsthat accept props to change the nature of the transition(s) to be used. It may sound cheesy, but the only limit really is your imagination."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Transitions with the Key Attribute​"
                },
                {
                    "type": "p",
                    "text": "Sometimes you need to force the re-render of a DOM element in order for a transition to occur."
                },
                {
                    "type": "p",
                    "text": "Take this counter component for example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue';constcount=ref(0);setInterval(()=>count.value++,1000);</script><template><Transition><span:key=\"count\">{{ count }}</span></Transition></template>"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{count:1,interval:null}},mounted() {this.interval=setInterval(()=>{this.count++;},1000)},beforeDestroy() {clearInterval(this.interval)}}</script><template><Transition><span:key=\"count\">{{ count }}</span></Transition></template>"
                },
                {
                    "type": "p",
                    "text": "If we had excluded thekeyattribute, only the text node would be updated and thus no transition would occur. However, with thekeyattribute in place, Vue knows to create a newspanelement whenevercountchanges and thus theTransitioncomponent has 2 different elements to transition between."
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Related"
                },
                {
                    "type": "list",
                    "items": [
                        "<Transition>API reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/built-ins/transition-group",
            "title": "TransitionGroup | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "TransitionGroup​"
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>is a built-in component designed for animating the insertion, removal, and order change of elements or components that are rendered in a list."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Differences from<Transition>​"
                },
                {
                    "type": "p",
                    "text": "<TransitionGroup>supports the same props, CSS transition classes, and JavaScript hook listeners as<Transition>, with the following differences:"
                },
                {
                    "type": "list",
                    "items": [
                        "By default, it doesn't render a wrapper element. But you can specify an element to be rendered with thetagprop.",
                        "Transition modesare not available, because we are no longer alternating between mutually exclusive elements.",
                        "Elements inside arealways requiredto have a uniquekeyattribute.",
                        "CSS transition classes will be applied to individual elements in the list,notto the group / container itself."
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, it doesn't render a wrapper element. But you can specify an element to be rendered with thetagprop."
                },
                {
                    "type": "p",
                    "text": "Transition modesare not available, because we are no longer alternating between mutually exclusive elements."
                },
                {
                    "type": "p",
                    "text": "Elements inside arealways requiredto have a uniquekeyattribute."
                },
                {
                    "type": "p",
                    "text": "CSS transition classes will be applied to individual elements in the list,notto the group / container itself."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "When used inin-DOM templates, it should be referenced as<transition-group>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Enter / Leave Transitions​"
                },
                {
                    "type": "p",
                    "text": "Here is an example of applying enter / leave transitions to av-forlist using<TransitionGroup>:"
                },
                {
                    "type": "code",
                    "code": "<TransitionGroupname=\"list\"tag=\"ul\"><liv-for=\"iteminitems\":key=\"item\">{{ item }}</li></TransitionGroup>"
                },
                {
                    "type": "code",
                    "code": ".list-enter-active,.list-leave-active{transition:all0.5sease;}.list-enter-from,.list-leave-to{opacity:0;transform:translateX(30px);}"
                },
                {
                    "type": "list",
                    "items": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Move Transitions​"
                },
                {
                    "type": "p",
                    "text": "The above demo has some obvious flaws: when an item is inserted or removed, its surrounding items instantly \"jump\" into place instead of moving smoothly. We can fix this by adding a few additional CSS rules:"
                },
                {
                    "type": "code",
                    "code": ".list-move,/* apply transition to moving elements */.list-enter-active,.list-leave-active{transition:all0.5sease;}.list-enter-from,.list-leave-to{opacity:0;transform:translateX(30px);}/* ensure leaving items are taken out of layout flow so that movinganimations can be calculated correctly. */.list-leave-active{position:absolute;}"
                },
                {
                    "type": "p",
                    "text": "Now it looks much better - even animating smoothly when the whole list is shuffled:"
                },
                {
                    "type": "list",
                    "items": [
                        "1",
                        "2",
                        "3",
                        "4",
                        "5"
                    ]
                },
                {
                    "type": "p",
                    "text": "Full Example"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Staggering List Transitions​"
                },
                {
                    "type": "p",
                    "text": "By communicating with JavaScript transitions through data attributes, it's also possible to stagger transitions in a list. First, we render the index of an item as a data attribute on the DOM element:"
                },
                {
                    "type": "code",
                    "code": "<TransitionGrouptag=\"ul\":css=\"false\"@before-enter=\"onBeforeEnter\"@enter=\"onEnter\"@leave=\"onLeave\"><liv-for=\"(item, index)incomputedList\":key=\"item.msg\":data-index=\"index\">{{ item.msg }}</li></TransitionGroup>"
                },
                {
                    "type": "p",
                    "text": "Then, in JavaScript hooks, we animate the element with a delay based on the data attribute. This example is using theGSAP libraryto perform the animation:"
                },
                {
                    "type": "code",
                    "code": "functiononEnter(el,done) {gsap.to(el, {opacity:1,height:'1.6em',delay: el.dataset.index*0.15,onComplete: done})}"
                },
                {
                    "type": "list",
                    "items": [
                        "Bruce Lee",
                        "Jackie Chan",
                        "Chuck Norris",
                        "Jet Li",
                        "Kung Fury"
                    ]
                },
                {
                    "type": "p",
                    "text": "Full Example in the Playground"
                },
                {
                    "type": "p",
                    "text": "Full Example in the Playground"
                },
                {
                    "type": "p",
                    "text": "Related"
                },
                {
                    "type": "list",
                    "items": [
                        "<TransitionGroup>API reference"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/async",
            "title": "Async Components | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Async Components​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "p",
                    "text": "In large applications, we may need to divide the app into smaller chunks and only load a component from the server when it's needed. To make that possible, Vue has adefineAsyncComponentfunction:"
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent }from'vue'constAsyncComp=defineAsyncComponent(()=>{returnnewPromise((resolve,reject)=>{// ...load component from serverresolve(/* loaded component */)})})// ... use `AsyncComp` like a normal component"
                },
                {
                    "type": "p",
                    "text": "As you can see,defineAsyncComponentaccepts a loader function that returns a Promise. The Promise'sresolvecallback should be called when you have retrieved your component definition from the server. You can also callreject(reason)to indicate the load has failed."
                },
                {
                    "type": "p",
                    "text": "ES module dynamic importalso returns a Promise, so most of the time we will use it in combination withdefineAsyncComponent. Bundlers like Vite and webpack also support the syntax (and will use it as bundle split points), so we can use it to import Vue SFCs:"
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent }from'vue'constAsyncComp=defineAsyncComponent(()=>import('./components/MyComponent.vue'))"
                },
                {
                    "type": "p",
                    "text": "The resultingAsyncCompis a wrapper component that only calls the loader function when it is actually rendered on the page. In addition, it will pass along any props and slots to the inner component, so you can use the async wrapper to seamlessly replace the original component while achieving lazy loading."
                },
                {
                    "type": "p",
                    "text": "As with normal components, async components can beregistered globallyusingapp.component():"
                },
                {
                    "type": "code",
                    "code": "app.component('MyComponent',defineAsyncComponent(()=>import('./components/MyComponent.vue')))"
                },
                {
                    "type": "p",
                    "text": "You can also usedefineAsyncComponentwhenregistering a component locally:"
                },
                {
                    "type": "code",
                    "code": "<script>import{ defineAsyncComponent }from'vue'exportdefault{components: {AdminPage:defineAsyncComponent(()=>import('./components/AdminPageComponent.vue'))}}</script><template><AdminPage/></template>"
                },
                {
                    "type": "p",
                    "text": "They can also be defined directly inside their parent component:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ defineAsyncComponent }from'vue'constAdminPage=defineAsyncComponent(()=>import('./components/AdminPageComponent.vue'))</script><template><AdminPage/></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Loading and Error States​"
                },
                {
                    "type": "p",
                    "text": "Asynchronous operations inevitably involve loading and error states -defineAsyncComponent()supports handling these states via advanced options:"
                },
                {
                    "type": "code",
                    "code": "constAsyncComp=defineAsyncComponent({// the loader functionloader: ()=>import('./Foo.vue'),// A component to use while the async component is loadingloadingComponent: LoadingComponent,// Delay before showing the loading component. Default: 200ms.delay:200,// A component to use if the load failserrorComponent: ErrorComponent,// The error component will be displayed if a timeout is// provided and exceeded. Default: Infinity.timeout:3000})"
                },
                {
                    "type": "p",
                    "text": "If a loading component is provided, it will be displayed first while the inner component is being loaded. There is a default 200ms delay before the loading component is shown - this is because on fast networks, an instant loading state may get replaced too fast and end up looking like a flicker."
                },
                {
                    "type": "p",
                    "text": "If an error component is provided, it will be displayed when the Promise returned by the loader function is rejected. You can also specify a timeout to show the error component when the request is taking too long."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lazy Hydration​"
                },
                {
                    "type": "p",
                    "text": "This section only applies if you are usingServer-Side Rendering."
                },
                {
                    "type": "p",
                    "text": "In Vue 3.5+, async components can control when they are hydrated by providing a hydration strategy."
                },
                {
                    "type": "list",
                    "items": [
                        "Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used.",
                        "The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue provides a number of built-in hydration strategies. These built-in strategies need to be individually imported so they can be tree-shaken if not used."
                },
                {
                    "type": "p",
                    "text": "The design is intentionally low-level for flexibility. Compiler syntax sugar can potentially be built on top of this in the future either in core or in higher level solutions (e.g. Nuxt)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hydrate on Idle​"
                },
                {
                    "type": "p",
                    "text": "Hydrates viarequestIdleCallback:"
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent, hydrateOnIdle }from'vue'constAsyncComp=defineAsyncComponent({loader: ()=>import('./Comp.vue'),hydrate:hydrateOnIdle(/* optionally pass a max timeout */)})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hydrate on Visible​"
                },
                {
                    "type": "p",
                    "text": "Hydrate when element(s) become visible viaIntersectionObserver."
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent, hydrateOnVisible }from'vue'constAsyncComp=defineAsyncComponent({loader: ()=>import('./Comp.vue'),hydrate:hydrateOnVisible()})"
                },
                {
                    "type": "p",
                    "text": "Can optionally pass in an options object value for the observer:"
                },
                {
                    "type": "code",
                    "code": "hydrateOnVisible({ rootMargin:'100px'})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hydrate on Media Query​"
                },
                {
                    "type": "p",
                    "text": "Hydrates when the specified media query matches."
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent, hydrateOnMediaQuery }from'vue'constAsyncComp=defineAsyncComponent({loader: ()=>import('./Comp.vue'),hydrate:hydrateOnMediaQuery('(max-width:500px)')})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hydrate on Interaction​"
                },
                {
                    "type": "p",
                    "text": "Hydrates when specified event(s) are triggered on the component element(s). The event that triggered the hydration will also be replayed once hydration is complete."
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent, hydrateOnInteraction }from'vue'constAsyncComp=defineAsyncComponent({loader: ()=>import('./Comp.vue'),hydrate:hydrateOnInteraction('click')})"
                },
                {
                    "type": "p",
                    "text": "Can also be a list of multiple event types:"
                },
                {
                    "type": "code",
                    "code": "hydrateOnInteraction(['wheel','mouseover'])"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Strategy​"
                },
                {
                    "type": "code",
                    "code": "import{ defineAsyncComponent,typeHydrationStrategy }from'vue'constmyStrategy:HydrationStrategy=(hydrate,forEachElement)=>{// forEachElement is a helper to iterate through all the root elements// in the component's non-hydrated DOM, since the root can be a fragment// instead of a single elementforEachElement(el=>{// ...})// call `hydrate` when readyhydrate()return()=>{// return a teardown function if needed}}constAsyncComp=defineAsyncComponent({loader: ()=>import('./Comp.vue'),hydrate: myStrategy})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using with Suspense​"
                },
                {
                    "type": "p",
                    "text": "Async components can be used with the<Suspense>built-in component. The interaction between<Suspense>and async components is documented in thededicated chapter for<Suspense>."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/attrs",
            "title": "Fallthrough Attributes | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Fallthrough Attributes​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Attribute Inheritance​"
                },
                {
                    "type": "p",
                    "text": "A \"fallthrough attribute\" is an attribute orv-onevent listener that is passed to a component, but is not explicitly declared in the receiving component'spropsoremits. Common examples of this includeclass,style, andidattributes."
                },
                {
                    "type": "p",
                    "text": "When a component renders a single root element, fallthrough attributes will be automatically added to the root element's attributes. For example, given a<MyButton>component with the following template:"
                },
                {
                    "type": "code",
                    "code": "<!-- template of <MyButton> --><button>Click Me</button>"
                },
                {
                    "type": "p",
                    "text": "And a parent using this component with:"
                },
                {
                    "type": "code",
                    "code": "<MyButtonclass=\"large\"/>"
                },
                {
                    "type": "p",
                    "text": "The final rendered DOM would be:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"large\">Click Me</button>"
                },
                {
                    "type": "p",
                    "text": "Here,<MyButton>did not declareclassas an accepted prop. Therefore,classis treated as a fallthrough attribute and automatically added to<MyButton>'s root element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "classandstyleMerging​"
                },
                {
                    "type": "p",
                    "text": "If the child component's root element already has existingclassorstyleattributes, it will be merged with theclassandstylevalues that are inherited from the parent. Suppose we change the template of<MyButton>in the previous example to:"
                },
                {
                    "type": "code",
                    "code": "<!-- template of <MyButton> --><buttonclass=\"btn\">Click Me</button>"
                },
                {
                    "type": "p",
                    "text": "Then the final rendered DOM would now become:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"btn large\">Click Me</button>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-onListener Inheritance​"
                },
                {
                    "type": "p",
                    "text": "The same rule applies tov-onevent listeners:"
                },
                {
                    "type": "code",
                    "code": "<MyButton@click=\"onClick\"/>"
                },
                {
                    "type": "p",
                    "text": "Theclicklistener will be added to the root element of<MyButton>, i.e. the native<button>element. When the native<button>is clicked, it will trigger theonClickmethod of the parent component. If the native<button>already has aclicklistener bound withv-on, then both listeners will trigger."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nested Component Inheritance​"
                },
                {
                    "type": "p",
                    "text": "If a component renders another component as its root node, for example, we refactored<MyButton>to render a<BaseButton>as its root:"
                },
                {
                    "type": "code",
                    "code": "<!-- template of <MyButton/> that simply renders another component --><BaseButton/>"
                },
                {
                    "type": "p",
                    "text": "Then the fallthrough attributes received by<MyButton>will be automatically forwarded to<BaseButton>."
                },
                {
                    "type": "p",
                    "text": "Note that:"
                },
                {
                    "type": "list",
                    "items": [
                        "Forwarded attributes do not include any attributes that are declared as props, orv-onlisteners of declared events by<MyButton>- in other words, the declared props and listeners have been \"consumed\" by<MyButton>.",
                        "Forwarded attributes may be accepted as props by<BaseButton>, if declared by it."
                    ]
                },
                {
                    "type": "p",
                    "text": "Forwarded attributes do not include any attributes that are declared as props, orv-onlisteners of declared events by<MyButton>- in other words, the declared props and listeners have been \"consumed\" by<MyButton>."
                },
                {
                    "type": "p",
                    "text": "Forwarded attributes may be accepted as props by<BaseButton>, if declared by it."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Disabling Attribute Inheritance​"
                },
                {
                    "type": "p",
                    "text": "If you donotwant a component to automatically inherit attributes, you can setinheritAttrs: falsein the component's options."
                },
                {
                    "type": "p",
                    "text": "Since 3.3 you can also usedefineOptionsdirectly in<script setup>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineOptions({inheritAttrs:false})// ...setup logic</script>"
                },
                {
                    "type": "p",
                    "text": "The common scenario for disabling attribute inheritance is when attributes need to be applied to other elements besides the root node. By setting theinheritAttrsoption tofalse, you can take full control over where the fallthrough attributes should be applied."
                },
                {
                    "type": "p",
                    "text": "These fallthrough attributes can be accessed directly in template expressions as$attrs:"
                },
                {
                    "type": "code",
                    "code": "<span>Fallthrough attributes: {{ $attrs }}</span>"
                },
                {
                    "type": "p",
                    "text": "The$attrsobject includes all attributes that are not declared by the component'spropsoremitsoptions (e.g.,class,style,v-onlisteners, etc.)."
                },
                {
                    "type": "p",
                    "text": "Some notes:"
                },
                {
                    "type": "list",
                    "items": [
                        "Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute likefoo-barneeds to be accessed as$attrs['foo-bar'].",
                        "Av-onevent listener like@clickwill be exposed on the object as a function under$attrs.onClick."
                    ]
                },
                {
                    "type": "p",
                    "text": "Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute likefoo-barneeds to be accessed as$attrs['foo-bar']."
                },
                {
                    "type": "p",
                    "text": "Av-onevent listener like@clickwill be exposed on the object as a function under$attrs.onClick."
                },
                {
                    "type": "p",
                    "text": "Using our<MyButton>component example from theprevious section- sometimes we may need to wrap the actual<button>element with an extra<div>for styling purposes:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"btn-wrapper\"><buttonclass=\"btn\">Click Me</button></div>"
                },
                {
                    "type": "p",
                    "text": "We want all fallthrough attributes likeclassandv-onlisteners to be applied to the inner<button>, not the outer<div>. We can achieve this withinheritAttrs: falseandv-bind=\"$attrs\":"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"btn-wrapper\"><buttonclass=\"btn\"v-bind=\"$attrs\">Click Me</button></div>"
                },
                {
                    "type": "p",
                    "text": "Remember thatv-bindwithout an argumentbinds all the properties of an object as attributes of the target element."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Attribute Inheritance on Multiple Root Nodes​"
                },
                {
                    "type": "p",
                    "text": "Unlike components with a single root node, components with multiple root nodes do not have an automatic attribute fallthrough behavior. If$attrsare not bound explicitly, a runtime warning will be issued."
                },
                {
                    "type": "code",
                    "code": "<CustomLayoutid=\"custom-layout\"@click=\"changeValue\"/>"
                },
                {
                    "type": "p",
                    "text": "If<CustomLayout>has the following multi-root template, there will be a warning because Vue cannot be sure where to apply the fallthrough attributes:"
                },
                {
                    "type": "code",
                    "code": "<header>...</header><main>...</main><footer>...</footer>"
                },
                {
                    "type": "p",
                    "text": "The warning will be suppressed if$attrsis explicitly bound:"
                },
                {
                    "type": "code",
                    "code": "<header>...</header><mainv-bind=\"$attrs\">...</main><footer>...</footer>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessing Fallthrough Attributes in JavaScript​"
                },
                {
                    "type": "p",
                    "text": "If needed, you can access a component's fallthrough attributes in<script setup>using theuseAttrs()API:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useAttrs }from'vue'constattrs=useAttrs()</script>"
                },
                {
                    "type": "p",
                    "text": "If not using<script setup>,attrswill be exposed as a property of thesetup()context:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup(props,ctx) {// fallthrough attributes are exposed as ctx.attrsconsole.log(ctx.attrs)}}"
                },
                {
                    "type": "p",
                    "text": "Note that although theattrsobject here always reflects the latest fallthrough attributes, it isn't reactive (for performance reasons). You cannot use watchers to observe its changes. If you need reactivity, use a prop. Alternatively, you can useonUpdated()to perform side effects with the latestattrson each update."
                },
                {
                    "type": "p",
                    "text": "If needed, you can access a component's fallthrough attributes via the$attrsinstance property:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{created() {console.log(this.$attrs)}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/events",
            "title": "Component Events | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Component Events​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Emitting and Listening to Events​"
                },
                {
                    "type": "p",
                    "text": "A component can emit custom events directly in template expressions (e.g. in av-onhandler) using the built-in$emitmethod:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyComponent --><button@click=\"$emit('someEvent')\">Click Me</button>"
                },
                {
                    "type": "p",
                    "text": "The$emit()method is also available on the component instance asthis.$emit():"
                },
                {
                    "type": "code",
                    "code": "exportdefault{methods: {submit() {this.$emit('someEvent')}}}"
                },
                {
                    "type": "p",
                    "text": "The parent can then listen to it usingv-on:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent@some-event=\"callback\"/>"
                },
                {
                    "type": "p",
                    "text": "The.oncemodifier is also supported on component event listeners:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent@some-event.once=\"callback\"/>"
                },
                {
                    "type": "p",
                    "text": "Like components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As withprops casing, we recommend using kebab-cased event listeners in templates."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Unlike native DOM events, component emitted events donotbubble. You can only listen to the events emitted by a direct child component. If there is a need to communicate between sibling or deeply nested components, use an external event bus or aglobal state management solution."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Event Arguments​"
                },
                {
                    "type": "p",
                    "text": "It's sometimes useful to emit a specific value with an event. For example, we may want the<BlogPost>component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to$emitto provide this value:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"$emit('increaseBy',1)\">Increase by 1</button>"
                },
                {
                    "type": "p",
                    "text": "Then, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:"
                },
                {
                    "type": "code",
                    "code": "<MyButton@increase-by=\"(n)=>count+=n\"/>"
                },
                {
                    "type": "p",
                    "text": "Or, if the event handler is a method:"
                },
                {
                    "type": "code",
                    "code": "<MyButton@increase-by=\"increaseCount\"/>"
                },
                {
                    "type": "p",
                    "text": "Then the value will be passed as the first parameter of that method:"
                },
                {
                    "type": "code",
                    "code": "methods: {increaseCount(n) {this.count+=n}}"
                },
                {
                    "type": "code",
                    "code": "functionincreaseCount(n) {count.value+=n}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "All extra arguments passed to$emit()after the event name will be forwarded to the listener. For example, with$emit('foo', 1, 2, 3)the listener function will receive three arguments."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Declaring Emitted Events​"
                },
                {
                    "type": "p",
                    "text": "A component can explicitly declare the events it will emit using thedefineEmits()macroemitsoption:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineEmits(['inFocus','submit'])</script>"
                },
                {
                    "type": "p",
                    "text": "The$emitmethod that we used in the<template>isn't accessible within the<script setup>section of a component, butdefineEmits()returns an equivalent function that we can use instead:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constemit=defineEmits(['inFocus','submit'])functionbuttonClick() {emit('submit')}</script>"
                },
                {
                    "type": "p",
                    "text": "ThedefineEmits()macrocannotbe used inside a function, it must be placed directly within<script setup>, as in the example above."
                },
                {
                    "type": "p",
                    "text": "If you're using an explicitsetupfunction instead of<script setup>, events should be declared using theemitsoption, and theemitfunction is exposed on thesetup()context:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: ['inFocus','submit'],setup(props,ctx) {ctx.emit('submit')}}"
                },
                {
                    "type": "p",
                    "text": "As with other properties of thesetup()context,emitcan safely be destructured:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: ['inFocus','submit'],setup(props, {emit}) {emit('submit')}}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: ['inFocus','submit']}"
                },
                {
                    "type": "p",
                    "text": "Theemitsoption anddefineEmits()macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">constemit=defineEmits({submit(payload:{email:string,password:string}) {// return `true` or `false` to indicate// validation pass / fail}})</script>"
                },
                {
                    "type": "p",
                    "text": "If you are using TypeScript with<script setup>, it's also possible to declare emitted events using pure type annotations:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">constemit=defineEmits<{(e:'change',id:number):void(e:'update',value:string):void}>()</script>"
                },
                {
                    "type": "p",
                    "text": "More details:Typing Component Emits"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: {submit(payload:{email:string,password:string}) {// return `true` or `false` to indicate// validation pass / fail}}}"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Component Emits"
                },
                {
                    "type": "p",
                    "text": "Although optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners fromfallthrough attributes, avoiding edge cases caused by DOM events manually dispatched by 3rd party code."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "If a native event (e.g.,click) is defined in theemitsoption, the listener will now only listen to component-emittedclickevents and no longer respond to nativeclickevents."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Events Validation​"
                },
                {
                    "type": "p",
                    "text": "Similar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax."
                },
                {
                    "type": "p",
                    "text": "To add validation, the event is assigned a function that receives the arguments passed to thethis.$emitemitcall and returns a boolean to indicate whether the event is valid or not."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constemit=defineEmits({// No validationclick:null,// Validate submit eventsubmit: ({email,password})=>{if(email&&password) {returntrue}else{console.warn('Invalid submit event payload!')returnfalse}}})functionsubmitForm(email,password) {emit('submit', { email, password })}</script>"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: {// No validationclick:null,// Validate submit eventsubmit: ({email,password})=>{if(email&&password) {returntrue}else{console.warn('Invalid submit event payload!')returnfalse}}},methods: {submitForm(email,password) {this.$emit('submit', { email, password })}}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/props",
            "title": "Props | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Props​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Props Declaration​"
                },
                {
                    "type": "p",
                    "text": "Vue components require explicit props declaration so that Vue knows what external props passed to the component should be treated as fallthrough attributes (which will be discussed inits dedicated section)."
                },
                {
                    "type": "p",
                    "text": "In SFCs using<script setup>, props can be declared using thedefineProps()macro:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constprops=defineProps(['foo'])console.log(props.foo)</script>"
                },
                {
                    "type": "p",
                    "text": "In non-<script setup>components, props are declared using thepropsoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['foo'],setup(props) {// setup() receives props as the first argument.console.log(props.foo)}}"
                },
                {
                    "type": "p",
                    "text": "Notice the argument passed todefineProps()is the same as the value provided to thepropsoptions: the same props options API is shared between the two declaration styles."
                },
                {
                    "type": "p",
                    "text": "Props are declared using thepropsoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['foo'],created() {// props are exposed on `this`console.log(this.foo)}}"
                },
                {
                    "type": "p",
                    "text": "In addition to declaring props using an array of strings, we can also use the object syntax:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {title: String,likes: Number}}"
                },
                {
                    "type": "code",
                    "code": "// in <script setup>defineProps({title: String,likes: Number})"
                },
                {
                    "type": "code",
                    "code": "// in non-<script setup>exportdefault{props: {title: String,likes: Number}}"
                },
                {
                    "type": "p",
                    "text": "For each property in the object declaration syntax, the key is the name of the prop, while the value should be the constructor function of the expected type."
                },
                {
                    "type": "p",
                    "text": "This not only documents your component, but will also warn other developers using your component in the browser console if they pass the wrong type. We will discuss more details aboutprop validationfurther down this page."
                },
                {
                    "type": "p",
                    "text": "See also:Typing Component Props"
                },
                {
                    "type": "p",
                    "text": "If you are using TypeScript with<script setup>, it's also possible to declare props using pure type annotations:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">defineProps<{title?:stringlikes?:number}>()</script>"
                },
                {
                    "type": "p",
                    "text": "More details:Typing Component Props"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reactive Props Destructure​"
                },
                {
                    "type": "p",
                    "text": "Vue's reactivity system tracks state usage based on property access. E.g. when you accessprops.fooin a computed getter or a watcher, thefooprop gets tracked as a dependency."
                },
                {
                    "type": "p",
                    "text": "So, given the following code:"
                },
                {
                    "type": "code",
                    "code": "const{foo}=defineProps(['foo'])watchEffect(()=>{// runs only once before 3.5// re-runs when the \"foo\" prop changes in 3.5+console.log(foo)})"
                },
                {
                    "type": "p",
                    "text": "In version 3.4 and below,foois an actual constant and will never change. In version 3.5 and above, Vue's compiler automatically prependsprops.when code in the same<script setup>block accesses variables destructured fromdefineProps. Therefore the code above becomes equivalent to the following:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['foo'])watchEffect(()=>{// `foo` transformed to `props.foo` by the compilerconsole.log(props.foo)})"
                },
                {
                    "type": "p",
                    "text": "In addition, you can use JavaScript's native default value syntax to declare default values for the props. This is particularly useful when using the type-based props declaration:"
                },
                {
                    "type": "code",
                    "code": "const{foo='hello'}=defineProps<{foo?:string}>()"
                },
                {
                    "type": "p",
                    "text": "If you prefer to have more visual distinction between destructured props and normal variables in your IDE, Vue's VSCode extension provides a setting to enable inlay-hints for destructured props."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Destructured Props into Functions​"
                },
                {
                    "type": "p",
                    "text": "When we pass a destructured prop into a function, e.g.:"
                },
                {
                    "type": "code",
                    "code": "const{foo}=defineProps(['foo'])watch(foo,/* ... */)"
                },
                {
                    "type": "p",
                    "text": "This will not work as expected because it is equivalent towatch(props.foo, ...)- we are passing a value instead of a reactive data source towatch. In fact, Vue's compiler will catch such cases and throw a warning."
                },
                {
                    "type": "p",
                    "text": "Similar to how we can watch a normal prop withwatch(() => props.foo, ...), we can watch a destructured prop also by wrapping it in a getter:"
                },
                {
                    "type": "code",
                    "code": "watch(()=>foo,/* ... */)"
                },
                {
                    "type": "p",
                    "text": "In addition, this is the recommended approach when we need to pass a destructured prop into an external function while retaining reactivity:"
                },
                {
                    "type": "code",
                    "code": "useComposable(()=>foo)"
                },
                {
                    "type": "p",
                    "text": "The external function can call the getter (or normalize it withtoValue) when it needs to track changes of the provided prop, e.g. in a computed or watcher getter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prop Passing Details​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Prop Name Casing​"
                },
                {
                    "type": "p",
                    "text": "We declare long prop names using camelCase because this avoids having to use quotes when using them as property keys, and allows us to reference them directly in template expressions because they are valid JavaScript identifiers:"
                },
                {
                    "type": "code",
                    "code": "defineProps({greetingMessage: String})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {greetingMessage: String}}"
                },
                {
                    "type": "code",
                    "code": "<span>{{ greetingMessage }}</span>"
                },
                {
                    "type": "p",
                    "text": "Technically, you can also use camelCase when passing props to a child component (except inin-DOM templates). However, the convention is using kebab-case in all cases to align with HTML attributes:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentgreeting-message=\"hello\"/>"
                },
                {
                    "type": "p",
                    "text": "We usePascalCase for component tagswhen possible because it improves template readability by differentiating Vue components from native elements. However, there isn't as much practical benefit in using camelCase when passing props, so we choose to follow each language's conventions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static vs. Dynamic Props​"
                },
                {
                    "type": "p",
                    "text": "So far, you've seen props passed as static values, like in:"
                },
                {
                    "type": "code",
                    "code": "<BlogPosttitle=\"My journey with Vue\"/>"
                },
                {
                    "type": "p",
                    "text": "You've also seen props assigned dynamically withv-bindor its:shortcut, such as in:"
                },
                {
                    "type": "code",
                    "code": "<!-- Dynamically assign the value of a variable --><BlogPost:title=\"post.title\"/><!-- Dynamically assign the value of a complex expression --><BlogPost:title=\"post.title+' by '+post.author.name\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Different Value Types​"
                },
                {
                    "type": "p",
                    "text": "In the two examples above, we happen to pass string values, butanytype of value can be passed to a prop."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Number​"
                },
                {
                    "type": "code",
                    "code": "<!-- Even though `42` is static, we need v-bind to tell Vue that --><!-- this is a JavaScript expression rather than a string.       --><BlogPost:likes=\"42\"/><!-- Dynamically assign to the value of a variable. --><BlogPost:likes=\"post.likes\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Boolean​"
                },
                {
                    "type": "code",
                    "code": "<!-- Including the prop with no value will imply `true`. --><BlogPostis-published/><!-- Even though `false` is static, we need v-bind to tell Vue that --><!-- this is a JavaScript expression rather than a string.          --><BlogPost:is-published=\"false\"/><!-- Dynamically assign to the value of a variable. --><BlogPost:is-published=\"post.isPublished\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Array​"
                },
                {
                    "type": "code",
                    "code": "<!-- Even though the array is static, we need v-bind to tell Vue that --><!-- this is a JavaScript expression rather than a string.            --><BlogPost:comment-ids=\"[234,266,273]\"/><!-- Dynamically assign to the value of a variable. --><BlogPost:comment-ids=\"post.commentIds\"/>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Object​"
                },
                {
                    "type": "code",
                    "code": "<!-- Even though the object is static, we need v-bind to tell Vue that --><!-- this is a JavaScript expression rather than a string.             --><BlogPost:author=\"{name:'Veronica',company:'Veridian Dynamics'}\"/><!-- Dynamically assign to the value of a variable. --><BlogPost:author=\"post.author\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Binding Multiple Properties Using an Object​"
                },
                {
                    "type": "p",
                    "text": "If you want to pass all the properties of an object as props, you can usev-bindwithout an argument(v-bindinstead of:prop-name). For example, given apostobject:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{post: {id:1,title:'My Journey with Vue'}}}}"
                },
                {
                    "type": "code",
                    "code": "constpost={id:1,title:'My Journey with Vue'}"
                },
                {
                    "type": "p",
                    "text": "The following template:"
                },
                {
                    "type": "code",
                    "code": "<BlogPostv-bind=\"post\"/>"
                },
                {
                    "type": "p",
                    "text": "Will be equivalent to:"
                },
                {
                    "type": "code",
                    "code": "<BlogPost:id=\"post.id\":title=\"post.title\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "One-Way Data Flow​"
                },
                {
                    "type": "p",
                    "text": "All props form aone-way-down bindingbetween the child property and the parent one: when the parent property updates, it will flow down to the child, but not the other way around. This prevents child components from accidentally mutating the parent's state, which can make your app's data flow harder to understand."
                },
                {
                    "type": "p",
                    "text": "In addition, every time the parent component is updated, all props in the child component will be refreshed with the latest value. This means you shouldnotattempt to mutate a prop inside a child component. If you do, Vue will warn you in the console:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['foo'])// ❌ warning, props are readonly!props.foo='bar'"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['foo'],created() {// ❌ warning, props are readonly!this.foo='bar'}}"
                },
                {
                    "type": "p",
                    "text": "There are usually two cases where it's tempting to mutate a prop:"
                },
                {
                    "type": "list",
                    "items": [
                        "The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.In this case, it's best to define a local data property that uses the prop as its initial value:jsconstprops=defineProps(['initialCounter'])// counter only uses props.initialCounter as the initial value;// it is disconnected from future prop updates.constcounter=ref(props.initialCounter)jsexportdefault{props: ['initialCounter'],data() {return{// counter only uses this.initialCounter as the initial value;// it is disconnected from future prop updates.counter:this.initialCounter}}}",
                        "The prop is passed in as a raw value that needs to be transformed.In this case, it's best to define a computed property using the prop's value:jsconstprops=defineProps(['size'])// computed property that auto-updates when the prop changesconstnormalizedSize=computed(()=>props.size.trim().toLowerCase())jsexportdefault{props: ['size'],computed: {// computed property that auto-updates when the prop changesnormalizedSize() {returnthis.size.trim().toLowerCase()}}}"
                    ]
                },
                {
                    "type": "p",
                    "text": "The prop is used to pass in an initial value; the child component wants to use it as a local data property afterwards.In this case, it's best to define a local data property that uses the prop as its initial value:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['initialCounter'])// counter only uses props.initialCounter as the initial value;// it is disconnected from future prop updates.constcounter=ref(props.initialCounter)"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['initialCounter'],data() {return{// counter only uses this.initialCounter as the initial value;// it is disconnected from future prop updates.counter:this.initialCounter}}}"
                },
                {
                    "type": "p",
                    "text": "The prop is passed in as a raw value that needs to be transformed.In this case, it's best to define a computed property using the prop's value:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['size'])// computed property that auto-updates when the prop changesconstnormalizedSize=computed(()=>props.size.trim().toLowerCase())"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['size'],computed: {// computed property that auto-updates when the prop changesnormalizedSize() {returnthis.size.trim().toLowerCase()}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Mutating Object / Array Props​"
                },
                {
                    "type": "p",
                    "text": "When objects and arrays are passed as props, while the child component cannot mutate the prop binding, itwillbe able to mutate the object or array's nested properties. This is because in JavaScript objects and arrays are passed by reference, and it is unreasonably expensive for Vue to prevent such mutations."
                },
                {
                    "type": "p",
                    "text": "The main drawback of such mutations is that it allows the child component to affect parent state in a way that isn't obvious to the parent component, potentially making it more difficult to reason about the data flow in the future. As a best practice, you should avoid such mutations unless the parent and child are tightly coupled by design. In most cases, the child shouldemit an eventto let the parent perform the mutation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prop Validation​"
                },
                {
                    "type": "p",
                    "text": "Components can specify requirements for their props, such as the types you've already seen. If a requirement is not met, Vue will warn you in the browser's JavaScript console. This is especially useful when developing a component that is intended to be used by others."
                },
                {
                    "type": "p",
                    "text": "To specify prop validations, you can provide an object with validation requirements to thedefineProps()macropropsoption, instead of an array of strings. For example:"
                },
                {
                    "type": "code",
                    "code": "defineProps({// Basic type check//  (`null` and `undefined` values will allow any type)propA: Number,// Multiple possible typespropB: [String, Number],// Required stringpropC: {type: String,required:true},// Required but nullable stringpropD: {type: [String,null],required:true},// Number with a default valuepropE: {type: Number,default:100},// Object with a default valuepropF: {type: Object,// Object or array defaults must be returned from// a factory function. The function receives the raw// props received by the component as the argument.default(rawProps) {return{ message:'hello'}}},// Custom validator function// full props passed as 2nd argument in 3.4+propG: {validator(value,props) {// The value must match one of these stringsreturn['success','warning','danger'].includes(value)}},// Function with a default valuepropH: {type: Function,// Unlike object or array default, this is not a factory// function - this is a function to serve as a default valuedefault() {return'Default function'}}})"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Code inside thedefineProps()argumentcannot access other variables declared in<script setup>, because the entire expression is moved to an outer function scope when compiled."
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {// Basic type check//  (`null` and `undefined` values will allow any type)propA: Number,// Multiple possible typespropB: [String, Number],// Required stringpropC: {type: String,required:true},// Required but nullable stringpropD: {type: [String,null],required:true},// Number with a default valuepropE: {type: Number,default:100},// Object with a default valuepropF: {type: Object,// Object or array defaults must be returned from// a factory function. The function receives the raw// props received by the component as the argument.default(rawProps) {return{ message:'hello'}}},// Custom validator function// full props passed as 2nd argument in 3.4+propG: {validator(value,props) {// The value must match one of these stringsreturn['success','warning','danger'].includes(value)}},// Function with a default valuepropH: {type: Function,// Unlike object or array default, this is not a factory// function - this is a function to serve as a default valuedefault() {return'Default function'}}}}"
                },
                {
                    "type": "p",
                    "text": "Additional details:"
                },
                {
                    "type": "list",
                    "items": [
                        "All props are optional by default, unlessrequired: trueis specified.",
                        "An absent optional prop other thanBooleanwill haveundefinedvalue.",
                        "TheBooleanabsent props will be cast tofalse. You can change this by setting adefaultfor it — i.e.:default: undefinedto behave as a non-Boolean prop.",
                        "If adefaultvalue is specified, it will be used if the resolved prop value isundefined- this includes both when the prop is absent, or an explicitundefinedvalue is passed."
                    ]
                },
                {
                    "type": "p",
                    "text": "All props are optional by default, unlessrequired: trueis specified."
                },
                {
                    "type": "p",
                    "text": "An absent optional prop other thanBooleanwill haveundefinedvalue."
                },
                {
                    "type": "p",
                    "text": "TheBooleanabsent props will be cast tofalse. You can change this by setting adefaultfor it — i.e.:default: undefinedto behave as a non-Boolean prop."
                },
                {
                    "type": "p",
                    "text": "If adefaultvalue is specified, it will be used if the resolved prop value isundefined- this includes both when the prop is absent, or an explicitundefinedvalue is passed."
                },
                {
                    "type": "p",
                    "text": "When prop validation fails, Vue will produce a console warning (if using the development build)."
                },
                {
                    "type": "p",
                    "text": "If usingType-based props declarations, Vue will try its best to compile the type annotations into equivalent runtime prop declarations. For example,defineProps<{ msg: string }>will be compiled into{ msg: { type: String, required: true }}."
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "Note that props are validatedbeforea component instance is created, so instance properties (e.g.data,computed, etc.) will not be available insidedefaultorvalidatorfunctions."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Runtime Type Checks​"
                },
                {
                    "type": "p",
                    "text": "Thetypecan be one of the following native constructors:"
                },
                {
                    "type": "list",
                    "items": [
                        "String",
                        "Number",
                        "Boolean",
                        "Array",
                        "Object",
                        "Date",
                        "Function",
                        "Symbol",
                        "Error"
                    ]
                },
                {
                    "type": "p",
                    "text": "In addition,typecan also be a custom class or constructor function and the assertion will be made with aninstanceofcheck. For example, given the following class:"
                },
                {
                    "type": "code",
                    "code": "classPerson{constructor(firstName,lastName) {this.firstName=firstNamethis.lastName=lastName}}"
                },
                {
                    "type": "p",
                    "text": "You could use it as a prop's type:"
                },
                {
                    "type": "code",
                    "code": "defineProps({author: Person})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {author: Person}}"
                },
                {
                    "type": "p",
                    "text": "Vue will useinstanceof Personto validate whether the value of theauthorprop is indeed an instance of thePersonclass."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nullable Type​"
                },
                {
                    "type": "p",
                    "text": "If the type is required but nullable, you can use the array syntax that includesnull:"
                },
                {
                    "type": "code",
                    "code": "defineProps({id: {type: [String,null],required:true}})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {id: {type: [String,null],required:true}}}"
                },
                {
                    "type": "p",
                    "text": "Note that iftypeis justnullwithout using the array syntax, it will allow any type."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Boolean Casting​"
                },
                {
                    "type": "p",
                    "text": "Props withBooleantype have special casting rules to mimic the behavior of native boolean attributes. Given a<MyComponent>with the following declaration:"
                },
                {
                    "type": "code",
                    "code": "defineProps({disabled: Boolean})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {disabled: Boolean}}"
                },
                {
                    "type": "p",
                    "text": "The component can be used like this:"
                },
                {
                    "type": "code",
                    "code": "<!-- equivalent of passing :disabled=\"true\" --><MyComponentdisabled/><!-- equivalent of passing :disabled=\"false\" --><MyComponent/>"
                },
                {
                    "type": "p",
                    "text": "When a prop is declared to allow multiple types, the casting rules forBooleanwill also be applied. However, there is an edge when bothStringandBooleanare allowed - the Boolean casting rule only applies if Boolean appears before String:"
                },
                {
                    "type": "code",
                    "code": "// disabled will be casted to truedefineProps({disabled: [Boolean, Number]})// disabled will be casted to truedefineProps({disabled: [Boolean, String]})// disabled will be casted to truedefineProps({disabled: [Number, Boolean]})// disabled will be parsed as an empty string (disabled=\"\")defineProps({disabled: [String, Boolean]})"
                },
                {
                    "type": "code",
                    "code": "// disabled will be casted to trueexportdefault{props: {disabled: [Boolean, Number]}}// disabled will be casted to trueexportdefault{props: {disabled: [Boolean, String]}}// disabled will be casted to trueexportdefault{props: {disabled: [Number, Boolean]}}// disabled will be parsed as an empty string (disabled=\"\")exportdefault{props: {disabled: [String, Boolean]}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/provide-inject",
            "title": "Provide / Inject | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Provide / Inject​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prop Drilling​"
                },
                {
                    "type": "p",
                    "text": "Usually, when we need to pass data from the parent to a child component, we useprops. However, imagine the case where we have a large component tree, and a deeply nested component needs something from a distant ancestor component. With only props, we would have to pass the same prop across the entire parent chain:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Notice although the<Footer>component may not care about these props at all, it still needs to declare and pass them along just so<DeepChild>can access them. If there is a longer parent chain, more components would be affected along the way. This is called \"props drilling\" and definitely isn't fun to deal with."
                },
                {
                    "type": "p",
                    "text": "We can solve props drilling withprovideandinject. A parent component can serve as adependency providerfor all its descendants. Any component in the descendant tree, regardless of how deep it is, caninjectdependencies provided by components up in its parent chain."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Provide​"
                },
                {
                    "type": "p",
                    "text": "To provide data to a component's descendants, use theprovide()function:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ provide }from'vue'provide(/* key */'message',/* value */'hello!')</script>"
                },
                {
                    "type": "p",
                    "text": "If not using<script setup>, make sureprovide()is called synchronously insidesetup():"
                },
                {
                    "type": "code",
                    "code": "import{ provide }from'vue'exportdefault{setup() {provide(/* key */'message',/* value */'hello!')}}"
                },
                {
                    "type": "p",
                    "text": "Theprovide()function accepts two arguments. The first argument is called theinjection key, which can be a string or aSymbol. The injection key is used by descendant components to lookup the desired value to inject. A single component can callprovide()multiple times with different injection keys to provide different values."
                },
                {
                    "type": "p",
                    "text": "The second argument is the provided value. The value can be of any type, including reactive state such as refs:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, provide }from'vue'constcount=ref(0)provide('key', count)"
                },
                {
                    "type": "p",
                    "text": "Providing reactive values allows the descendant components using the provided value to establish a reactive connection to the provider component."
                },
                {
                    "type": "p",
                    "text": "To provide data to a component's descendants, use theprovideoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{provide: {message:'hello!'}}"
                },
                {
                    "type": "p",
                    "text": "For each property in theprovideobject, the key is used by child components to locate the correct value to inject, while the value is what ends up being injected."
                },
                {
                    "type": "p",
                    "text": "If we need to provide per-instance state, for example data declared via thedata(), thenprovidemust use a function value:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{message:'hello!'}},provide() {// use function syntax so that we can access `this`return{message:this.message}}}"
                },
                {
                    "type": "p",
                    "text": "However, do note this doesnotmake the injection reactive. We will discussmaking injections reactivebelow."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "App-level Provide​"
                },
                {
                    "type": "p",
                    "text": "In addition to providing data in a component, we can also provide at the app level:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({})app.provide(/* key */'message',/* value */'hello!')"
                },
                {
                    "type": "p",
                    "text": "App-level provides are available to all components rendered in the app. This is especially useful when writingplugins, as plugins typically wouldn't be able to provide values using components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Inject​"
                },
                {
                    "type": "p",
                    "text": "To inject data provided by an ancestor component, use theinject()function:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ inject }from'vue'constmessage=inject('message')</script>"
                },
                {
                    "type": "p",
                    "text": "If the provided value is a ref, it will be injected as-is and willnotbe automatically unwrapped. This allows the injector component to retain the reactivity connection to the provider component."
                },
                {
                    "type": "p",
                    "text": "Full provide + inject Example with Reactivity"
                },
                {
                    "type": "p",
                    "text": "Again, if not using<script setup>,inject()should only be called synchronously insidesetup():"
                },
                {
                    "type": "code",
                    "code": "import{ inject }from'vue'exportdefault{setup() {constmessage=inject('message')return{ message }}}"
                },
                {
                    "type": "p",
                    "text": "To inject data provided by an ancestor component, use theinjectoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: ['message'],created() {console.log(this.message)// injected value}}"
                },
                {
                    "type": "p",
                    "text": "Injections are resolvedbeforethe component's own state, so you can access injected properties indata():"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: ['message'],data() {return{// initial data based on injected valuefullMessage:this.message}}}"
                },
                {
                    "type": "p",
                    "text": "Full provide + inject example"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Injection Aliasing​"
                },
                {
                    "type": "p",
                    "text": "When using the array syntax forinject, the injected properties are exposed on the component instance using the same key. In the example above, the property was provided under the key\"message\", and injected asthis.message. The local key is the same as the injection key."
                },
                {
                    "type": "p",
                    "text": "If we want to inject the property using a different local key, we need to use the object syntax for theinjectoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: {/* local key */localMessage: {from:/* injection key */'message'}}}"
                },
                {
                    "type": "p",
                    "text": "Here, the component will locate a property provided with the key\"message\", and then expose it asthis.localMessage."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Injection Default Values​"
                },
                {
                    "type": "p",
                    "text": "By default,injectassumes that the injected key is provided somewhere in the parent chain. In the case where the key is not provided, there will be a runtime warning."
                },
                {
                    "type": "p",
                    "text": "If we want to make an injected property work with optional providers, we need to declare a default value, similar to props:"
                },
                {
                    "type": "code",
                    "code": "// `value` will be \"default value\"// if no data matching \"message\" was providedconstvalue=inject('message','default value')"
                },
                {
                    "type": "p",
                    "text": "In some cases, the default value may need to be created by calling a function or instantiating a new class. To avoid unnecessary computation or side effects in case the optional value is not used, we can use a factory function for creating the default value:"
                },
                {
                    "type": "code",
                    "code": "constvalue=inject('key', ()=>newExpensiveClass(),true)"
                },
                {
                    "type": "p",
                    "text": "The third parameter indicates the default value should be treated as a factory function."
                },
                {
                    "type": "code",
                    "code": "exportdefault{// object syntax is required// when declaring default values for injectionsinject: {message: {from:'message',// this is optional if using the same key for injectiondefault:'default value'},user: {// use a factory function for non-primitive values that are expensive// to create, or ones that should be unique per component instance.default: ()=>({ name:'John'})}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Working with Reactivity​"
                },
                {
                    "type": "p",
                    "text": "When using reactive provide / inject values,it is recommended to keep any mutations to reactive state inside of theproviderwhenever possible. This ensures that the provided state and its possible mutations are co-located in the same component, making it easier to maintain in the future."
                },
                {
                    "type": "p",
                    "text": "There may be times when we need to update the data from an injector component. In such cases, we recommend providing a function that is responsible for mutating the state:"
                },
                {
                    "type": "code",
                    "code": "<!-- inside provider component --><scriptsetup>import{ provide, ref }from'vue'constlocation=ref('North Pole')functionupdateLocation() {location.value='South Pole'}provide('location', {location,updateLocation})</script>"
                },
                {
                    "type": "code",
                    "code": "<!-- in injector component --><scriptsetup>import{ inject }from'vue'const{location,updateLocation}=inject('location')</script><template><button@click=\"updateLocation\">{{ location }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Finally, you can wrap the provided value withreadonly()if you want to ensure that the data passed throughprovidecannot be mutated by the injector component."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, provide, readonly }from'vue'constcount=ref(0)provide('read-only-count',readonly(count))</script>"
                },
                {
                    "type": "p",
                    "text": "In order to make injections reactively linked to the provider, we need to provide a computed property using thecomputed()function:"
                },
                {
                    "type": "code",
                    "code": "import{ computed }from'vue'exportdefault{data() {return{message:'hello!'}},provide() {return{// explicitly provide a computed propertymessage:computed(()=>this.message)}}}"
                },
                {
                    "type": "p",
                    "text": "Full provide + inject Example with Reactivity"
                },
                {
                    "type": "p",
                    "text": "Thecomputed()function is typically used in Composition API components, but can also be used to complement certain use cases in Options API. You can learn more about its usage by reading theReactivity FundamentalsandComputed Propertieswith the API Preference set to Composition API."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Working with Symbol Keys​"
                },
                {
                    "type": "p",
                    "text": "So far, we have been using string injection keys in the examples. If you are working in a large application with many dependency providers, or you are authoring components that are going to be used by other developers, it is best to use Symbol injection keys to avoid potential collisions."
                },
                {
                    "type": "p",
                    "text": "It's recommended to export the Symbols in a dedicated file:"
                },
                {
                    "type": "code",
                    "code": "// keys.jsexportconstmyInjectionKey=Symbol()"
                },
                {
                    "type": "code",
                    "code": "// in provider componentimport{ provide }from'vue'import{ myInjectionKey }from'./keys.js'provide(myInjectionKey, {/* data to provide */})"
                },
                {
                    "type": "code",
                    "code": "// in injector componentimport{ inject }from'vue'import{ myInjectionKey }from'./keys.js'constinjected=inject(myInjectionKey)"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Provide / Inject"
                },
                {
                    "type": "code",
                    "code": "// in provider componentimport{ myInjectionKey }from'./keys.js'exportdefault{provide() {return{[myInjectionKey]: {/* data to provide */}}}}"
                },
                {
                    "type": "code",
                    "code": "// in injector componentimport{ myInjectionKey }from'./keys.js'exportdefault{inject: {injected: { from: myInjectionKey }}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/registration",
            "title": "Component Registration | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Component Registration​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "p",
                    "text": "A Vue component needs to be \"registered\" so that Vue knows where to locate its implementation when it is encountered in a template. There are two ways to register components: global and local."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Global Registration​"
                },
                {
                    "type": "p",
                    "text": "We can make components available globally in the currentVue applicationusing the.component()method:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({})app.component(// the registered name'MyComponent',// the implementation{/* ... */})"
                },
                {
                    "type": "p",
                    "text": "If using SFCs, you will be registering the imported.vuefiles:"
                },
                {
                    "type": "code",
                    "code": "importMyComponentfrom'./App.vue'app.component('MyComponent', MyComponent)"
                },
                {
                    "type": "p",
                    "text": "The.component()method can be chained:"
                },
                {
                    "type": "code",
                    "code": "app.component('ComponentA', ComponentA).component('ComponentB', ComponentB).component('ComponentC', ComponentC)"
                },
                {
                    "type": "p",
                    "text": "Globally registered components can be used in the template of any component within this application:"
                },
                {
                    "type": "code",
                    "code": "<!-- this will work in any component inside the app --><ComponentA/><ComponentB/><ComponentC/>"
                },
                {
                    "type": "p",
                    "text": "This even applies to all subcomponents, meaning all three of these components will also be availableinside each other."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Local Registration​"
                },
                {
                    "type": "p",
                    "text": "While convenient, global registration has a few drawbacks:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle.",
                        "Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables."
                    ]
                },
                {
                    "type": "p",
                    "text": "Global registration prevents build systems from removing unused components (a.k.a \"tree-shaking\"). If you globally register a component but end up not using it anywhere in your app, it will still be included in the final bundle."
                },
                {
                    "type": "p",
                    "text": "Global registration makes dependency relationships less explicit in large applications. It makes it difficult to locate a child component's implementation from a parent component using it. This can affect long-term maintainability similar to using too many global variables."
                },
                {
                    "type": "p",
                    "text": "Local registration scopes the availability of the registered components to the current component only. It makes the dependency relationship more explicit, and is more tree-shaking friendly."
                },
                {
                    "type": "p",
                    "text": "When using SFC with<script setup>, imported components can be locally used without registration:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>importComponentAfrom'./ComponentA.vue'</script><template><ComponentA/></template>"
                },
                {
                    "type": "p",
                    "text": "In non-<script setup>, you will need to use thecomponentsoption:"
                },
                {
                    "type": "code",
                    "code": "importComponentAfrom'./ComponentA.js'exportdefault{components: {ComponentA},setup() {// ...}}"
                },
                {
                    "type": "p",
                    "text": "Local registration is done using thecomponentsoption:"
                },
                {
                    "type": "code",
                    "code": "<script>importComponentAfrom'./ComponentA.vue'exportdefault{components: {ComponentA}}</script><template><ComponentA/></template>"
                },
                {
                    "type": "p",
                    "text": "For each property in thecomponentsobject, the key will be the registered name of the component, while the value will contain the implementation of the component. The above example is using the ES2015 property shorthand and is equivalent to:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{components: {ComponentA: ComponentA}// ...}"
                },
                {
                    "type": "p",
                    "text": "Note thatlocally registered components arenotalso available in descendant components. In this case,ComponentAwill be made available to the current component only, not any of its child or descendant components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component Name Casing​"
                },
                {
                    "type": "p",
                    "text": "Throughout the guide, we are using PascalCase names when registering components. This is because:"
                },
                {
                    "type": "list",
                    "items": [
                        "PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion.",
                        "<PascalCase />makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components)."
                    ]
                },
                {
                    "type": "p",
                    "text": "PascalCase names are valid JavaScript identifiers. This makes it easier to import and register components in JavaScript. It also helps IDEs with auto-completion."
                },
                {
                    "type": "p",
                    "text": "<PascalCase />makes it more obvious that this is a Vue component instead of a native HTML element in templates. It also differentiates Vue components from custom elements (web components)."
                },
                {
                    "type": "p",
                    "text": "This is the recommended style when working with SFC or string templates. However, as discussed inin-DOM Template Parsing Caveats, PascalCase tags are not usable in in-DOM templates."
                },
                {
                    "type": "p",
                    "text": "Luckily, Vue supports resolving kebab-case tags to components registered using PascalCase. This means a component registered asMyComponentcan be referenced in the template via both<MyComponent>and<my-component>. This allows us to use the same JavaScript component registration code regardless of template source."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/slots",
            "title": "Slots | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Slots​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read theComponents Basics. Read that first if you are new to components."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Slot Content and Outlet​"
                },
                {
                    "type": "p",
                    "text": "We have learned that components can accept props, which can be JavaScript values of any type. But how about template content? In some cases, we may want to pass a template fragment to a child component, and let the child component render the fragment within its own template."
                },
                {
                    "type": "p",
                    "text": "For example, we may have a<FancyButton>component that supports usage like this:"
                },
                {
                    "type": "code",
                    "code": "<FancyButton>Click me!<!-- slot content --></FancyButton>"
                },
                {
                    "type": "p",
                    "text": "The template of<FancyButton>looks like this:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"fancy-btn\"><slot></slot><!-- slot outlet --></button>"
                },
                {
                    "type": "p",
                    "text": "The<slot>element is aslot outletthat indicates where the parent-providedslot contentshould be rendered."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "And the final rendered DOM:"
                },
                {
                    "type": "code",
                    "code": "<buttonclass=\"fancy-btn\">Click me!</button>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "With slots, the<FancyButton>is responsible for rendering the outer<button>(and its fancy styling), while the inner content is provided by the parent component."
                },
                {
                    "type": "p",
                    "text": "Another way to understand slots is by comparing them to JavaScript functions:"
                },
                {
                    "type": "code",
                    "code": "// parent component passing slot contentFancyButton('Click me!')// FancyButton renders slot content in its own templatefunctionFancyButton(slotContent) {return`<button class=\"fancy-btn\">${slotContent}</button>`}"
                },
                {
                    "type": "p",
                    "text": "Slot content is not just limited to text. It can be any valid template content. For example, we can pass in multiple elements, or even other components:"
                },
                {
                    "type": "code",
                    "code": "<FancyButton><spanstyle=\"color:red\">Click me!</span><AwesomeIconname=\"plus\"/></FancyButton>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "By using slots, our<FancyButton>is more flexible and reusable. We can now use it in different places with different inner content, but all with the same fancy styling."
                },
                {
                    "type": "p",
                    "text": "Vue components' slot mechanism is inspired by thenative Web Component<slot>element, but with additional capabilities that we will see later."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Render Scope​"
                },
                {
                    "type": "p",
                    "text": "Slot content has access to the data scope of the parent component, because it is defined in the parent. For example:"
                },
                {
                    "type": "code",
                    "code": "<span>{{ message }}</span><FancyButton>{{ message }}</FancyButton>"
                },
                {
                    "type": "p",
                    "text": "Here both{{ message }}interpolations will render the same content."
                },
                {
                    "type": "p",
                    "text": "Slot content doesnothave access to the child component's data. Expressions in Vue templates can only access the scope it is defined in, consistent with JavaScript's lexical scoping. In other words:"
                },
                {
                    "type": "p",
                    "text": "Expressions in the parent template only have access to the parent scope; expressions in the child template only have access to the child scope."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fallback Content​"
                },
                {
                    "type": "p",
                    "text": "There are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a<SubmitButton>component:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"submit\"><slot></slot></button>"
                },
                {
                    "type": "p",
                    "text": "We might want the text \"Submit\" to be rendered inside the<button>if the parent didn't provide any slot content. To make \"Submit\" the fallback content, we can place it in between the<slot>tags:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"submit\"><slot>Submit<!-- fallback content --></slot></button>"
                },
                {
                    "type": "p",
                    "text": "Now when we use<SubmitButton>in a parent component, providing no content for the slot:"
                },
                {
                    "type": "code",
                    "code": "<SubmitButton/>"
                },
                {
                    "type": "p",
                    "text": "This will render the fallback content, \"Submit\":"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"submit\">Submit</button>"
                },
                {
                    "type": "p",
                    "text": "But if we provide content:"
                },
                {
                    "type": "code",
                    "code": "<SubmitButton>Save</SubmitButton>"
                },
                {
                    "type": "p",
                    "text": "Then the provided content will be rendered instead:"
                },
                {
                    "type": "code",
                    "code": "<buttontype=\"submit\">Save</button>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Named Slots​"
                },
                {
                    "type": "p",
                    "text": "There are times when it's useful to have multiple slot outlets in a single component. For example, in a<BaseLayout>component with the following template:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"container\"><header><!-- We want header content here --></header><main><!-- We want main content here --></main><footer><!-- We want footer content here --></footer></div>"
                },
                {
                    "type": "p",
                    "text": "For these cases, the<slot>element has a special attribute,name, which can be used to assign a unique ID to different slots so you can determine where content should be rendered:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"container\"><header><slotname=\"header\"></slot></header><main><slot></slot></main><footer><slotname=\"footer\"></slot></footer></div>"
                },
                {
                    "type": "p",
                    "text": "A<slot>outlet withoutnameimplicitly has the name \"default\"."
                },
                {
                    "type": "p",
                    "text": "In a parent component using<BaseLayout>, we need a way to pass multiple slot content fragments, each targeting a different slot outlet. This is wherenamed slotscome in."
                },
                {
                    "type": "p",
                    "text": "To pass a named slot, we need to use a<template>element with thev-slotdirective, and then pass the name of the slot as an argument tov-slot:"
                },
                {
                    "type": "code",
                    "code": "<BaseLayout><templatev-slot:header><!-- content for the header slot --></template></BaseLayout>"
                },
                {
                    "type": "p",
                    "text": "v-slothas a dedicated shorthand#, so<template v-slot:header>can be shortened to just<template #header>. Think of it as \"render this template fragment in the child component's 'header' slot\"."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Here's the code passing content for all three slots to<BaseLayout>using the shorthand syntax:"
                },
                {
                    "type": "code",
                    "code": "<BaseLayout><template#header><h1>Here might be a page title</h1></template><template#default><p>A paragraph for the main content.</p><p>And another one.</p></template><template#footer><p>Here's some contact info</p></template></BaseLayout>"
                },
                {
                    "type": "p",
                    "text": "When a component accepts both a default slot and named slots, all top-level non-<template>nodes are implicitly treated as content for the default slot. So the above can also be written as:"
                },
                {
                    "type": "code",
                    "code": "<BaseLayout><template#header><h1>Here might be a page title</h1></template><!-- implicit default slot --><p>A paragraph for the main content.</p><p>And another one.</p><template#footer><p>Here's some contact info</p></template></BaseLayout>"
                },
                {
                    "type": "p",
                    "text": "Now everything inside the<template>elements will be passed to the corresponding slots. The final rendered HTML will be:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"container\"><header><h1>Here might be a page title</h1></header><main><p>A paragraph for the main content.</p><p>And another one.</p></main><footer><p>Here's some contact info</p></footer></div>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Again, it may help you understand named slots better using the JavaScript function analogy:"
                },
                {
                    "type": "code",
                    "code": "// passing multiple slot fragments with different namesBaseLayout({header:`...`,default:`...`,footer:`...`})// <BaseLayout> renders them in different placesfunctionBaseLayout(slots) {return`<div class=\"container\"><header>${slots.header}</header><main>${slots.default}</main><footer>${slots.footer}</footer></div>`}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Conditional Slots​"
                },
                {
                    "type": "p",
                    "text": "Sometimes you want to render something based on whether or not a slot is present."
                },
                {
                    "type": "p",
                    "text": "You can use the$slotsproperty in combination with av-ifto achieve this."
                },
                {
                    "type": "p",
                    "text": "In the example below we define a Card component with three conditional slots:header,footerand thedefaultone. When the header / footer / default is present we want to wrap them to provide additional styling:"
                },
                {
                    "type": "code",
                    "code": "<template><divclass=\"card\"><divv-if=\"$slots.header\"class=\"card-header\"><slotname=\"header\"/></div><divv-if=\"$slots.default\"class=\"card-content\"><slot/></div><divv-if=\"$slots.footer\"class=\"card-footer\"><slotname=\"footer\"/></div></div></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Slot Names​"
                },
                {
                    "type": "p",
                    "text": "Dynamic directive argumentsalso work onv-slot, allowing the definition of dynamic slot names:"
                },
                {
                    "type": "code",
                    "code": "<base-layout><templatev-slot:[dynamicSlotName]>...</template><!-- with shorthand --><template#[dynamicSlotName]>...</template></base-layout>"
                },
                {
                    "type": "p",
                    "text": "Do note the expression is subject to thesyntax constraintsof dynamic directive arguments."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Scoped Slots​"
                },
                {
                    "type": "p",
                    "text": "As discussed inRender Scope, slot content does not have access to state in the child component."
                },
                {
                    "type": "p",
                    "text": "However, there are cases where it could be useful if a slot's content can make use of data from both the parent scope and the child scope. To achieve that, we need a way for the child to pass data to a slot when rendering it."
                },
                {
                    "type": "p",
                    "text": "In fact, we can do exactly that - we can pass attributes to a slot outlet just like passing props to a component:"
                },
                {
                    "type": "code",
                    "code": "<!-- <MyComponent> template --><div><slot:text=\"greetingMessage\":count=\"1\"></slot></div>"
                },
                {
                    "type": "p",
                    "text": "Receiving the slot props is a bit different when using a single default slot vs. using named slots. We are going to show how to receive props using a single default slot first, by usingv-slotdirectly on the child component tag:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-slot=\"slotProps\">{{ slotProps.text }} {{ slotProps.count }}</MyComponent>"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "The props passed to the slot by the child are available as the value of the correspondingv-slotdirective, which can be accessed by expressions inside the slot."
                },
                {
                    "type": "p",
                    "text": "You can think of a scoped slot as a function being passed into the child component. The child component then calls it, passing props as arguments:"
                },
                {
                    "type": "code",
                    "code": "MyComponent({// passing the default slot, but as a functiondefault: (slotProps)=>{return`${slotProps.text} ${slotProps.count}`}})functionMyComponent(slots) {constgreetingMessage='hello'return`<div>${// call the slot function with props!slots.default({ text:greetingMessage, count:1})}</div>`}"
                },
                {
                    "type": "p",
                    "text": "In fact, this is very close to how scoped slots are compiled, and how you would use scoped slots in manualrender functions."
                },
                {
                    "type": "p",
                    "text": "Notice howv-slot=\"slotProps\"matches the slot function signature. Just like with function arguments, we can use destructuring inv-slot:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-slot=\"{ text, count }\">{{ text }} {{ count }}</MyComponent>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Named Scoped Slots​"
                },
                {
                    "type": "p",
                    "text": "Named scoped slots work similarly - slot props are accessible as the value of thev-slotdirective:v-slot:name=\"slotProps\". When using the shorthand, it looks like this:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent><template#header=\"headerProps\">{{ headerProps }}</template><template#default=\"defaultProps\">{{ defaultProps }}</template><template#footer=\"footerProps\">{{ footerProps }}</template></MyComponent>"
                },
                {
                    "type": "p",
                    "text": "Passing props to a named slot:"
                },
                {
                    "type": "code",
                    "code": "<slotname=\"header\"message=\"hello\"></slot>"
                },
                {
                    "type": "p",
                    "text": "Note thenameof a slot won't be included in the props because it is reserved - so the resultingheaderPropswould be{ message: 'hello' }."
                },
                {
                    "type": "p",
                    "text": "If you are mixing named slots with the default scoped slot, you need to use an explicit<template>tag for the default slot. Attempting to place thev-slotdirective directly on the component will result in a compilation error. This is to avoid any ambiguity about the scope of the props of the default slot. For example:"
                },
                {
                    "type": "code",
                    "code": "<!-- <MyComponent> template --><div><slot:message=\"hello\"></slot><slotname=\"footer\"/></div>"
                },
                {
                    "type": "code",
                    "code": "<!-- This template won't compile --><MyComponentv-slot=\"{ message }\"><p>{{ message }}</p><template#footer><!-- message belongs to the default slot, and is not available here --><p>{{ message }}</p></template></MyComponent>"
                },
                {
                    "type": "p",
                    "text": "Using an explicit<template>tag for the default slot helps to make it clear that themessageprop is not available inside the other slot:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent><!-- Use explicit default slot --><template#default=\"{ message }\"><p>{{ message }}</p></template><template#footer><p>Here's some contact info</p></template></MyComponent>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Fancy List Example​"
                },
                {
                    "type": "p",
                    "text": "You may be wondering what would be a good use case for scoped slots. Here's an example: imagine a<FancyList>component that renders a list of items - it may encapsulate the logic for loading remote data, using the data to display a list, or even advanced features like pagination or infinite scrolling. However, we want it to be flexible with how each item looks and leave the styling of each item to the parent component consuming it. So the desired usage may look like this:"
                },
                {
                    "type": "code",
                    "code": "<FancyList:api-url=\"url\":per-page=\"10\"><template#item=\"{ body, username, likes }\"><divclass=\"item\"><p>{{ body }}</p><p>by {{ username }} | {{ likes }} likes</p></div></template></FancyList>"
                },
                {
                    "type": "p",
                    "text": "Inside<FancyList>, we can render the same<slot>multiple times with different item data (notice we are usingv-bindto pass an object as slot props):"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"iteminitems\"><slotname=\"item\"v-bind=\"item\"></slot></li></ul>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Renderless Components​"
                },
                {
                    "type": "p",
                    "text": "The<FancyList>use case we discussed above encapsulates both reusable logic (data fetching, pagination etc.) and visual output, while delegating part of the visual output to the consumer component via scoped slots."
                },
                {
                    "type": "p",
                    "text": "If we push this concept a bit further, we can come up with components that only encapsulate logic and do not render anything by themselves - visual output is fully delegated to the consumer component with scoped slots. We call this type of component aRenderless Component."
                },
                {
                    "type": "p",
                    "text": "An example renderless component could be one that encapsulates the logic of tracking the current mouse position:"
                },
                {
                    "type": "code",
                    "code": "<MouseTrackerv-slot=\"{ x, y }\">Mouse is at: {{ x }}, {{ y }}</MouseTracker>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "While an interesting pattern, most of what can be achieved with Renderless Components can be achieved in a more efficient fashion with Composition API, without incurring the overhead of extra component nesting. Later, we will see how we can implement the same mouse tracking functionality as aComposable."
                },
                {
                    "type": "p",
                    "text": "That said, scoped slots are still useful in cases where we need to both encapsulate logicandcompose visual output, like in the<FancyList>example."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/components/v-model",
            "title": "Component v-model | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Component v-model​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "p",
                    "text": "v-modelcan be used on a component to implement a two-way binding."
                },
                {
                    "type": "p",
                    "text": "Starting in Vue 3.4, the recommended approach to achieve this is using thedefineModel()macro:"
                },
                {
                    "type": "code",
                    "code": "<!-- Child.vue --><scriptsetup>constmodel=defineModel()functionupdate() {model.value++}</script><template><div>Parent bound v-model is: {{ model }}</div><button@click=\"update\">Increment</button></template>"
                },
                {
                    "type": "p",
                    "text": "The parent can then bind a value withv-model:"
                },
                {
                    "type": "code",
                    "code": "<!-- Parent.vue --><Childv-model=\"countModel\"/>"
                },
                {
                    "type": "p",
                    "text": "The value returned bydefineModel()is a ref. It can be accessed and mutated like any other ref, except that it acts as a two-way binding between a parent value and a local one:"
                },
                {
                    "type": "list",
                    "items": [
                        "Its.valueis synced with the value bound by the parentv-model;",
                        "When it is mutated by the child, it causes the parent bound value to be updated as well."
                    ]
                },
                {
                    "type": "p",
                    "text": "This means you can also bind this ref to a native input element withv-model, making it straightforward to wrap native input elements while providing the samev-modelusage:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constmodel=defineModel()</script><template><inputv-model=\"model\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Under the Hood​"
                },
                {
                    "type": "p",
                    "text": "defineModelis a convenience macro. The compiler expands it to the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "A prop namedmodelValue, which the local ref's value is synced with;",
                        "An event namedupdate:modelValue, which is emitted when the local ref's value is mutated."
                    ]
                },
                {
                    "type": "p",
                    "text": "This is how you would implement the same child component shown above prior to 3.4:"
                },
                {
                    "type": "code",
                    "code": "<!-- Child.vue --><scriptsetup>constprops=defineProps(['modelValue'])constemit=defineEmits(['update:modelValue'])</script><template><input:value=\"props.modelValue\"@input=\"emit('update:modelValue', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Then,v-model=\"foo\"in the parent component will be compiled to:"
                },
                {
                    "type": "code",
                    "code": "<!-- Parent.vue --><Child:modelValue=\"foo\"@update:modelValue=\"$event=>(foo=$event)\"/>"
                },
                {
                    "type": "p",
                    "text": "As you can see, it is quite a bit more verbose. However, it is helpful to understand what is happening under the hood."
                },
                {
                    "type": "p",
                    "text": "BecausedefineModeldeclares a prop, you can therefore declare the underlying prop's options by passing it todefineModel:"
                },
                {
                    "type": "code",
                    "code": "// making the v-model requiredconstmodel=defineModel({ required:true})// providing a default valueconstmodel=defineModel({ default:0})"
                },
                {
                    "type": "p",
                    "text": "WARNING"
                },
                {
                    "type": "p",
                    "text": "If you have adefaultvalue fordefineModelprop and you don't provide any value for this prop from the parent component, it can cause a de-synchronization between parent and child components. In the example below, the parent'smyRefis undefined, but the child'smodelis 1:"
                },
                {
                    "type": "code",
                    "code": "// child component:constmodel=defineModel({ default:1})// parent component:constmyRef=ref()"
                },
                {
                    "type": "code",
                    "code": "<Childv-model=\"myRef\"></Child>"
                },
                {
                    "type": "p",
                    "text": "First let's revisit howv-modelis used on a native element:"
                },
                {
                    "type": "code",
                    "code": "<inputv-model=\"searchText\"/>"
                },
                {
                    "type": "p",
                    "text": "Under the hood, the template compiler expandsv-modelto the more verbose equivalent for us. So the above code does the same as the following:"
                },
                {
                    "type": "code",
                    "code": "<input:value=\"searchText\"@input=\"searchText=$event.target.value\"/>"
                },
                {
                    "type": "p",
                    "text": "When used on a component,v-modelinstead expands to this:"
                },
                {
                    "type": "code",
                    "code": "<CustomInput:model-value=\"searchText\"@update:model-value=\"newValue=>searchText=newValue\"/>"
                },
                {
                    "type": "p",
                    "text": "For this to actually work though, the<CustomInput>component must do two things:"
                },
                {
                    "type": "list",
                    "items": [
                        "Bind thevalueattribute of a native<input>element to themodelValueprop",
                        "When a nativeinputevent is triggered, emit anupdate:modelValuecustom event with the new value"
                    ]
                },
                {
                    "type": "p",
                    "text": "Here's that in action:"
                },
                {
                    "type": "code",
                    "code": "<!-- CustomInput.vue --><script>exportdefault{props: ['modelValue'],emits: ['update:modelValue']}</script><template><input:value=\"modelValue\"@input=\"$emit('update:modelValue', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Nowv-modelshould work perfectly with this component:"
                },
                {
                    "type": "code",
                    "code": "<CustomInputv-model=\"searchText\"/>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Another way of implementingv-modelwithin this component is to use a writablecomputedproperty with both a getter and a setter. Thegetmethod should return themodelValueproperty and thesetmethod should emit the corresponding event:"
                },
                {
                    "type": "code",
                    "code": "<!-- CustomInput.vue --><script>exportdefault{props: ['modelValue'],emits: ['update:modelValue'],computed: {value: {get() {returnthis.modelValue},set(value) {this.$emit('update:modelValue', value)}}}}</script><template><inputv-model=\"value\"/></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-modelarguments​"
                },
                {
                    "type": "p",
                    "text": "v-modelon a component can also accept an argument:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-model:title=\"bookTitle\"/>"
                },
                {
                    "type": "p",
                    "text": "In the child component, we can support the corresponding argument by passing a string todefineModel()as its first argument:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyComponent.vue --><scriptsetup>consttitle=defineModel('title')</script><template><inputtype=\"text\"v-model=\"title\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "If prop options are also needed, they should be passed after the model name:"
                },
                {
                    "type": "code",
                    "code": "consttitle=defineModel('title', { required:true})"
                },
                {
                    "type": "code",
                    "code": "<!-- MyComponent.vue --><scriptsetup>defineProps({title: {required:true}})defineEmits(['update:title'])</script><template><inputtype=\"text\":value=\"title\"@input=\"$emit('update:title', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "In this case, instead of the defaultmodelValueprop andupdate:modelValueevent, the child component should expect atitleprop and emit anupdate:titleevent to update the parent value:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyComponent.vue --><script>exportdefault{props: ['title'],emits: ['update:title']}</script><template><inputtype=\"text\":value=\"title\"@input=\"$emit('update:title', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Multiplev-modelbindings​"
                },
                {
                    "type": "p",
                    "text": "By leveraging the ability to target a particular prop and event as we learned before withv-modelarguments, we can now create multiplev-modelbindings on a single component instance."
                },
                {
                    "type": "p",
                    "text": "Eachv-modelwill sync to a different prop, without the need for extra options in the component:"
                },
                {
                    "type": "code",
                    "code": "<UserNamev-model:first-name=\"first\"v-model:last-name=\"last\"/>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constfirstName=defineModel('firstName')constlastName=defineModel('lastName')</script><template><inputtype=\"text\"v-model=\"firstName\"/><inputtype=\"text\"v-model=\"lastName\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineProps({firstName: String,lastName: String})defineEmits(['update:firstName','update:lastName'])</script><template><inputtype=\"text\":value=\"firstName\"@input=\"$emit('update:firstName', $event.target.value)\"/><inputtype=\"text\":value=\"lastName\"@input=\"$emit('update:lastName', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{props: {firstName: String,lastName: String},emits: ['update:firstName','update:lastName']}</script><template><inputtype=\"text\":value=\"firstName\"@input=\"$emit('update:firstName', $event.target.value)\"/><inputtype=\"text\":value=\"lastName\"@input=\"$emit('update:lastName', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Handlingv-modelmodifiers​"
                },
                {
                    "type": "p",
                    "text": "When we were learning about form input bindings, we saw thatv-modelhasbuilt-in modifiers-.trim,.numberand.lazy. In some cases, you might also want thev-modelon your custom input component to support custom modifiers."
                },
                {
                    "type": "p",
                    "text": "Let's create an example custom modifier,capitalize, that capitalizes the first letter of the string provided by thev-modelbinding:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-model.capitalize=\"myText\"/>"
                },
                {
                    "type": "p",
                    "text": "Modifiers added to a componentv-modelcan be accessed in the child component by destructuring thedefineModel()return value like this:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>const[model,modifiers]=defineModel()console.log(modifiers)// { capitalize: true }</script><template><inputtype=\"text\"v-model=\"model\"/></template>"
                },
                {
                    "type": "p",
                    "text": "To conditionally adjust how the value should be read / written based on modifiers, we can passgetandsetoptions todefineModel(). These two options receive the value on get / set of the model ref and should return a transformed value. This is how we can use thesetoption to implement thecapitalizemodifier:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>const[model,modifiers]=defineModel({set(value) {if(modifiers.capitalize) {returnvalue.charAt(0).toUpperCase()+value.slice(1)}returnvalue}})</script><template><inputtype=\"text\"v-model=\"model\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constprops=defineProps({modelValue: String,modelModifiers: {default: ()=>({}) }})constemit=defineEmits(['update:modelValue'])functionemitValue(e) {letvalue=e.target.valueif(props.modelModifiers.capitalize) {value=value.charAt(0).toUpperCase()+value.slice(1)}emit('update:modelValue', value)}</script><template><inputtype=\"text\":value=\"props.modelValue\"@input=\"emitValue\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Modifiers added to a componentv-modelwill be provided to the component via themodelModifiersprop. In the below example, we have created a component that contains amodelModifiersprop that defaults to an empty object:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{props: {modelValue: String,modelModifiers: {default: ()=>({})}},emits: ['update:modelValue'],created() {console.log(this.modelModifiers)// { capitalize: true }}}</script><template><inputtype=\"text\":value=\"modelValue\"@input=\"$emit('update:modelValue', $event.target.value)\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Notice the component'smodelModifiersprop containscapitalizeand its value istrue- due to it being set on thev-modelbindingv-model.capitalize=\"myText\"."
                },
                {
                    "type": "p",
                    "text": "Now that we have our prop set up, we can check themodelModifiersobject keys and write a handler to change the emitted value. In the code below we will capitalize the string whenever the<input />element fires aninputevent."
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{props: {modelValue: String,modelModifiers: {default: ()=>({})}},emits: ['update:modelValue'],methods: {emitValue(e) {letvalue=e.target.valueif(this.modelModifiers.capitalize) {value=value.charAt(0).toUpperCase()+value.slice(1)}this.$emit('update:modelValue', value)}}}</script><template><inputtype=\"text\":value=\"modelValue\"@input=\"emitValue\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modifiers forv-modelwith arguments​"
                },
                {
                    "type": "p",
                    "text": "Forv-modelbindings with both argument and modifiers, the generated prop name will bearg + \"Modifiers\". For example:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-model:title.capitalize=\"myText\">"
                },
                {
                    "type": "p",
                    "text": "The corresponding declarations should be:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['title','titleModifiers'],emits: ['update:title'],created() {console.log(this.titleModifiers)// { capitalize: true }}}"
                },
                {
                    "type": "p",
                    "text": "Here's another example of using modifiers with multiplev-modelwith different arguments:"
                },
                {
                    "type": "code",
                    "code": "<UserNamev-model:first-name.capitalize=\"first\"v-model:last-name.uppercase=\"last\"/>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>const[firstName,firstNameModifiers]=defineModel('firstName')const[lastName,lastNameModifiers]=defineModel('lastName')console.log(firstNameModifiers)// { capitalize: true }console.log(lastNameModifiers)// { uppercase: true }</script>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constprops=defineProps({firstName: String,lastName: String,firstNameModifiers: {default: ()=>({}) },lastNameModifiers: {default: ()=>({}) }})defineEmits(['update:firstName','update:lastName'])console.log(props.firstNameModifiers)// { capitalize: true }console.log(props.lastNameModifiers)// { uppercase: true }</script>"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{props: {firstName: String,lastName: String,firstNameModifiers: {default: ()=>({})},lastNameModifiers: {default: ()=>({})}},emits: ['update:firstName','update:lastName'],created() {console.log(this.firstNameModifiers)// { capitalize: true }console.log(this.lastNameModifiers)// { uppercase: true }}}</script>"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/application",
            "title": "Creating a Vue Application | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Creating a Vue Application​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The application instance​"
                },
                {
                    "type": "p",
                    "text": "Every Vue application starts by creating a newapplication instancewith thecreateAppfunction:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({/* root component options */})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The Root Component​"
                },
                {
                    "type": "p",
                    "text": "The object we are passing intocreateAppis in fact a component. Every app requires a \"root component\" that can contain other components as its children."
                },
                {
                    "type": "p",
                    "text": "If you are using Single-File Components, we typically import the root component from another file:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'// import the root component App from a single-file component.importAppfrom'./App.vue'constapp=createApp(App)"
                },
                {
                    "type": "p",
                    "text": "While many examples in this guide only need a single component, most real applications are organized into a tree of nested, reusable components. For example, a Todo application's component tree might look like this:"
                },
                {
                    "type": "code",
                    "code": "App (root component)├─ TodoList│  └─ TodoItem│     ├─ TodoDeleteButton│     └─ TodoEditButton└─ TodoFooter├─ TodoClearButton└─ TodoStatistics"
                },
                {
                    "type": "p",
                    "text": "In later sections of the guide, we will discuss how to define and compose multiple components together. Before that, we will focus on what happens inside a single component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Mounting the App​"
                },
                {
                    "type": "p",
                    "text": "An application instance won't render anything until its.mount()method is called. It expects a \"container\" argument, which can either be an actual DOM element or a selector string:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\"></div>"
                },
                {
                    "type": "code",
                    "code": "app.mount('#app')"
                },
                {
                    "type": "p",
                    "text": "The content of the app's root component will be rendered inside the container element. The container element itself is not considered part of the app."
                },
                {
                    "type": "p",
                    "text": "The.mount()method should always be called after all app configurations and asset registrations are done. Also note that its return value, unlike the asset registration methods, is the root component instance instead of the application instance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "In-DOM Root Component Template​"
                },
                {
                    "type": "p",
                    "text": "The template for the root component is usually part of the component itself, but it is also possible to provide the template separately by writing it directly inside the mount container:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\"><button@click=\"count++\">{{ count }}</button></div>"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({data() {return{count:0}}})app.mount('#app')"
                },
                {
                    "type": "p",
                    "text": "Vue will automatically use the container'sinnerHTMLas the template if the root component does not already have atemplateoption."
                },
                {
                    "type": "p",
                    "text": "In-DOM templates are often used in applications that areusing Vue without a build step. They can also be used in conjunction with server-side frameworks, where the root template might be generated dynamically by the server."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "App Configurations​"
                },
                {
                    "type": "p",
                    "text": "The application instance exposes a.configobject that allows us to configure a few app-level options, for example, defining an app-level error handler that captures errors from all descendant components:"
                },
                {
                    "type": "code",
                    "code": "app.config.errorHandler=(err)=>{/* handle error */}"
                },
                {
                    "type": "p",
                    "text": "The application instance also provides a few methods for registering app-scoped assets. For example, registering a component:"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoDeleteButton', TodoDeleteButton)"
                },
                {
                    "type": "p",
                    "text": "This makes theTodoDeleteButtonavailable for use anywhere in our app. We will discuss registration for components and other types of assets in later sections of the guide. You can also browse the full list of application instance APIs in itsAPI reference."
                },
                {
                    "type": "p",
                    "text": "Make sure to apply all app configurations before mounting the app!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Multiple application instances​"
                },
                {
                    "type": "p",
                    "text": "You are not limited to a single application instance on the same page. ThecreateAppAPI allows multiple Vue applications to co-exist on the same page, each with its own scope for configuration and global assets:"
                },
                {
                    "type": "code",
                    "code": "constapp1=createApp({/* ... */})app1.mount('#container-1')constapp2=createApp({/* ... */})app2.mount('#container-2')"
                },
                {
                    "type": "p",
                    "text": "If you are using Vue to enhance server-rendered HTML and only need Vue to control specific parts of a large page, avoid mounting a single Vue application instance on the entire page. Instead, create multiple small application instances and mount them on the elements they are responsible for."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/class-and-style",
            "title": "Class and Style Bindings | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Class and Style Bindings​"
                },
                {
                    "type": "p",
                    "text": "A common need for data binding is manipulating an element's class list and inline styles. Sinceclassandstyleare both attributes, we can usev-bindto assign them a string value dynamically, much like with other attributes. However, trying to generate those values using string concatenation can be annoying and error-prone. For this reason, Vue provides special enhancements whenv-bindis used withclassandstyle. In addition to strings, the expressions can also evaluate to objects or arrays."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Binding HTML Classes​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Binding to Objects​"
                },
                {
                    "type": "p",
                    "text": "We can pass an object to:class(short forv-bind:class) to dynamically toggle classes:"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"{ active: isActive }\"></div>"
                },
                {
                    "type": "p",
                    "text": "The above syntax means the presence of theactiveclass will be determined by thetruthinessof the data propertyisActive."
                },
                {
                    "type": "p",
                    "text": "You can have multiple classes toggled by having more fields in the object. In addition, the:classdirective can also co-exist with the plainclassattribute. So given the following state:"
                },
                {
                    "type": "code",
                    "code": "constisActive=ref(true)consthasError=ref(false)"
                },
                {
                    "type": "code",
                    "code": "data() {return{isActive:true,hasError:false}}"
                },
                {
                    "type": "p",
                    "text": "And the following template:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"static\":class=\"{ active: isActive,'text-danger': hasError }\"></div>"
                },
                {
                    "type": "p",
                    "text": "It will render:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"static active\"></div>"
                },
                {
                    "type": "p",
                    "text": "WhenisActiveorhasErrorchanges, the class list will be updated accordingly. For example, ifhasErrorbecomestrue, the class list will become\"static active text-danger\"."
                },
                {
                    "type": "p",
                    "text": "The bound object doesn't have to be inline:"
                },
                {
                    "type": "code",
                    "code": "constclassObject=reactive({active:true,'text-danger':false})"
                },
                {
                    "type": "code",
                    "code": "data() {return{classObject: {active:true,'text-danger':false}}}"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"classObject\"></div>"
                },
                {
                    "type": "p",
                    "text": "This will render:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"active\"></div>"
                },
                {
                    "type": "p",
                    "text": "We can also bind to acomputed propertythat returns an object. This is a common and powerful pattern:"
                },
                {
                    "type": "code",
                    "code": "constisActive=ref(true)consterror=ref(null)constclassObject=computed(()=>({active: isActive.value&&!error.value,'text-danger': error.value&&error.value.type==='fatal'}))"
                },
                {
                    "type": "code",
                    "code": "data() {return{isActive:true,error:null}},computed: {classObject() {return{active:this.isActive&&!this.error,'text-danger':this.error&&this.error.type==='fatal'}}}"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"classObject\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Binding to Arrays​"
                },
                {
                    "type": "p",
                    "text": "We can bind:classto an array to apply a list of classes:"
                },
                {
                    "type": "code",
                    "code": "constactiveClass=ref('active')consterrorClass=ref('text-danger')"
                },
                {
                    "type": "code",
                    "code": "data() {return{activeClass:'active',errorClass:'text-danger'}}"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"[activeClass, errorClass]\"></div>"
                },
                {
                    "type": "p",
                    "text": "Which will render:"
                },
                {
                    "type": "code",
                    "code": "<divclass=\"active text-danger\"></div>"
                },
                {
                    "type": "p",
                    "text": "If you would like to also toggle a class in the list conditionally, you can do it with a ternary expression:"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"[isActive?activeClass:'', errorClass]\"></div>"
                },
                {
                    "type": "p",
                    "text": "This will always applyerrorClass, butactiveClasswill only be applied whenisActiveis truthy."
                },
                {
                    "type": "p",
                    "text": "However, this can be a bit verbose if you have multiple conditional classes. That's why it's also possible to use the object syntax inside the array syntax:"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"[{ [activeClass]: isActive }, errorClass]\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "With Components​"
                },
                {
                    "type": "p",
                    "text": "This section assumes knowledge ofComponents. Feel free to skip it and come back later."
                },
                {
                    "type": "p",
                    "text": "When you use theclassattribute on a component with a single root element, those classes will be added to the component's root element and merged with any existing class already on it."
                },
                {
                    "type": "p",
                    "text": "For example, if we have a component namedMyComponentwith the following template:"
                },
                {
                    "type": "code",
                    "code": "<!-- child component template --><pclass=\"foo bar\">Hi!</p>"
                },
                {
                    "type": "p",
                    "text": "Then add some classes when using it:"
                },
                {
                    "type": "code",
                    "code": "<!-- when using the component --><MyComponentclass=\"baz boo\"/>"
                },
                {
                    "type": "p",
                    "text": "The rendered HTML will be:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"foo bar baz boo\">Hi!</p>"
                },
                {
                    "type": "p",
                    "text": "The same is true for class bindings:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent:class=\"{ active: isActive }\"/>"
                },
                {
                    "type": "p",
                    "text": "WhenisActiveis truthy, the rendered HTML will be:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"foo bar active\">Hi!</p>"
                },
                {
                    "type": "p",
                    "text": "If your component has multiple root elements, you would need to define which element will receive this class. You can do this using the$attrscomponent property:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyComponent template using $attrs --><p:class=\"$attrs.class\">Hi!</p><span>This is a child component</span>"
                },
                {
                    "type": "code",
                    "code": "<MyComponentclass=\"baz\"/>"
                },
                {
                    "type": "p",
                    "text": "Will render:"
                },
                {
                    "type": "code",
                    "code": "<pclass=\"baz\">Hi!</p><span>This is a child component</span>"
                },
                {
                    "type": "p",
                    "text": "You can learn more about component attribute inheritance inFallthrough Attributessection."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Binding Inline Styles​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Binding to Objects​"
                },
                {
                    "type": "p",
                    "text": ":stylesupports binding to JavaScript object values - it corresponds to anHTML element'sstyleproperty:"
                },
                {
                    "type": "code",
                    "code": "constactiveColor=ref('red')constfontSize=ref(30)"
                },
                {
                    "type": "code",
                    "code": "data() {return{activeColor:'red',fontSize:30}}"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"{ color: activeColor, fontSize: fontSize+'px'}\"></div>"
                },
                {
                    "type": "p",
                    "text": "Although camelCase keys are recommended,:stylealso supports kebab-cased CSS property keys (corresponds to how they are used in actual CSS) - for example:"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"{'font-size': fontSize+'px'}\"></div>"
                },
                {
                    "type": "p",
                    "text": "It is often a good idea to bind to a style object directly so that the template is cleaner:"
                },
                {
                    "type": "code",
                    "code": "conststyleObject=reactive({color:'red',fontSize:'30px'})"
                },
                {
                    "type": "code",
                    "code": "data() {return{styleObject: {color:'red',fontSize:'13px'}}}"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"styleObject\"></div>"
                },
                {
                    "type": "p",
                    "text": "Again, object style binding is often used in conjunction with computed properties that return objects."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Binding to Arrays​"
                },
                {
                    "type": "p",
                    "text": "We can bind:styleto an array of multiple style objects. These objects will be merged and applied to the same element:"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"[baseStyles, overridingStyles]\"></div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Auto-prefixing​"
                },
                {
                    "type": "p",
                    "text": "When you use a CSS property that requires avendor prefixin:style, Vue will automatically add the appropriate prefix. Vue does this by checking at runtime to see which style properties are supported in the current browser. If the browser doesn't support a particular property then various prefixed variants will be tested to try to find one that is supported."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Multiple Values​"
                },
                {
                    "type": "p",
                    "text": "You can provide an array of multiple (prefixed) values to a style property, for example:"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"{ display: ['-webkit-box','-ms-flexbox','flex'] }\"></div>"
                },
                {
                    "type": "p",
                    "text": "This will only render the last value in the array which the browser supports. In this example, it will renderdisplay: flexfor browsers that support the unprefixed version of flexbox."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/component-basics",
            "title": "Components Basics | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Components Basics​"
                },
                {
                    "type": "p",
                    "text": "Components allow us to split the UI into independent and reusable pieces, and think about each piece in isolation. It's common for an app to be organized into a tree of nested components:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "This is very similar to how we nest native HTML elements, but Vue implements its own component model that allows us to encapsulate custom content and logic in each component. Vue also plays nicely with native Web Components. If you are curious about the relationship between Vue Components and native Web Components,read more here."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Defining a Component​"
                },
                {
                    "type": "p",
                    "text": "When using a build step, we typically define each Vue component in a dedicated file using the.vueextension - known as aSingle-File Component(SFC for short):"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{count:0}}}</script><template><button@click=\"count++\">You clicked me {{ count }} times.</button></template>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)</script><template><button@click=\"count++\">You clicked me {{ count }} times.</button></template>"
                },
                {
                    "type": "p",
                    "text": "When not using a build step, a Vue component can be defined as a plain JavaScript object containing Vue-specific options:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{count:0}},template:`<button @click=\"count++\">You clicked me {{ count }} times.</button>`}"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'exportdefault{setup() {constcount=ref(0)return{ count }},template:`<button @click=\"count++\">You clicked me {{ count }} times.</button>`// Can also target an in-DOM template:// template: '#my-template-element'}"
                },
                {
                    "type": "p",
                    "text": "The template is inlined as a JavaScript string here, which Vue will compile on the fly. You can also use an ID selector pointing to an element (usually native<template>elements) - Vue will use its content as the template source."
                },
                {
                    "type": "p",
                    "text": "The example above defines a single component and exports it as the default export of a.jsfile, but you can use named exports to export multiple components from the same file."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using a Component​"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "We will be using SFC syntax for the rest of this guide - the concepts around components are the same regardless of whether you are using a build step or not. TheExamplessection shows component usage in both scenarios."
                },
                {
                    "type": "p",
                    "text": "To use a child component, we need to import it in the parent component. Assuming we placed our counter component inside a file calledButtonCounter.vue, the component will be exposed as the file's default export:"
                },
                {
                    "type": "code",
                    "code": "<script>importButtonCounterfrom'./ButtonCounter.vue'exportdefault{components: {ButtonCounter}}</script><template><h1>Here is a child component!</h1><ButtonCounter/></template>"
                },
                {
                    "type": "p",
                    "text": "To expose the imported component to our template, we need toregisterit with thecomponentsoption. The component will then be available as a tag using the key it is registered under."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>importButtonCounterfrom'./ButtonCounter.vue'</script><template><h1>Here is a child component!</h1><ButtonCounter/></template>"
                },
                {
                    "type": "p",
                    "text": "With<script setup>, imported components are automatically made available to the template."
                },
                {
                    "type": "p",
                    "text": "It's also possible to globally register a component, making it available to all components in a given app without having to import it. The pros and cons of global vs. local registration is discussed in the dedicatedComponent Registrationsection."
                },
                {
                    "type": "p",
                    "text": "Components can be reused as many times as you want:"
                },
                {
                    "type": "code",
                    "code": "<h1>Here are many child components!</h1><ButtonCounter/><ButtonCounter/><ButtonCounter/>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Notice that when clicking on the buttons, each one maintains its own, separatecount. That's because each time you use a component, a newinstanceof it is created."
                },
                {
                    "type": "p",
                    "text": "In SFCs, it's recommended to usePascalCasetag names for child components to differentiate from native HTML elements. Although native HTML tag names are case-insensitive, Vue SFC is a compiled format so we are able to use case-sensitive tag names in it. We are also able to use/>to close a tag."
                },
                {
                    "type": "p",
                    "text": "If you are authoring your templates directly in a DOM (e.g. as the content of a native<template>element), the template will be subject to the browser's native HTML parsing behavior. In such cases, you will need to usekebab-caseand explicit closing tags for components:"
                },
                {
                    "type": "code",
                    "code": "<!-- if this template is written in the DOM --><button-counter></button-counter><button-counter></button-counter><button-counter></button-counter>"
                },
                {
                    "type": "p",
                    "text": "Seein-DOM template parsing caveatsfor more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Passing Props​"
                },
                {
                    "type": "p",
                    "text": "If we are building a blog, we will likely need a component representing a blog post. We want all the blog posts to share the same visual layout, but with different content. Such a component won't be useful unless you can pass data to it, such as the title and content of the specific post we want to display. That's where props come in."
                },
                {
                    "type": "p",
                    "text": "Props are custom attributes you can register on a component. To pass a title to our blog post component, we must declare it in the list of props this component accepts, using thepropsoptiondefinePropsmacro:"
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue --><script>exportdefault{props: ['title']}</script><template><h4>{{ title }}</h4></template>"
                },
                {
                    "type": "p",
                    "text": "When a value is passed to a prop attribute, it becomes a property on that component instance. The value of that property is accessible within the template and on the component'sthiscontext, just like any other component property."
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue --><scriptsetup>defineProps(['title'])</script><template><h4>{{ title }}</h4></template>"
                },
                {
                    "type": "p",
                    "text": "definePropsis a compile-time macro that is only available inside<script setup>and does not need to be explicitly imported. Declared props are automatically exposed to the template.definePropsalso returns an object that contains all the props passed to the component, so that we can access them in JavaScript if needed:"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps(['title'])console.log(props.title)"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Component Props"
                },
                {
                    "type": "p",
                    "text": "If you are not using<script setup>, props should be declared using thepropsoption, and the props object will be passed tosetup()as the first argument:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['title'],setup(props) {console.log(props.title)}}"
                },
                {
                    "type": "p",
                    "text": "A component can have as many props as you like and, by default, any value can be passed to any prop."
                },
                {
                    "type": "p",
                    "text": "Once a prop is registered, you can pass data to it as a custom attribute, like this:"
                },
                {
                    "type": "code",
                    "code": "<BlogPosttitle=\"My journey with Vue\"/><BlogPosttitle=\"Blogging with Vue\"/><BlogPosttitle=\"Why Vue is so fun\"/>"
                },
                {
                    "type": "p",
                    "text": "In a typical app, however, you'll likely have an array of posts in your parent component:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// ...data() {return{posts: [{ id:1, title:'My journey with Vue'},{ id:2, title:'Blogging with Vue'},{ id:3, title:'Why Vue is so fun'}]}}}"
                },
                {
                    "type": "code",
                    "code": "constposts=ref([{ id:1, title:'My journey with Vue'},{ id:2, title:'Blogging with Vue'},{ id:3, title:'Why Vue is so fun'}])"
                },
                {
                    "type": "p",
                    "text": "Then want to render a component for each one, usingv-for:"
                },
                {
                    "type": "code",
                    "code": "<BlogPostv-for=\"postinposts\":key=\"post.id\":title=\"post.title\"/>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Notice howv-bindsyntax(:title=\"post.title\") is used to pass dynamic prop values. This is especially useful when you don't know the exact content you're going to render ahead of time."
                },
                {
                    "type": "p",
                    "text": "That's all you need to know about props for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide onProps."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Listening to Events​"
                },
                {
                    "type": "p",
                    "text": "As we develop our<BlogPost>component, some features may require communicating back up to the parent. For example, we may decide to include an accessibility feature to enlarge the text of blog posts, while leaving the rest of the page at its default size."
                },
                {
                    "type": "p",
                    "text": "In the parent, we can support this feature by adding apostFontSizedata propertyref:"
                },
                {
                    "type": "code",
                    "code": "data() {return{posts: [/* ... */],postFontSize:1}}"
                },
                {
                    "type": "code",
                    "code": "constposts=ref([/* ... */])constpostFontSize=ref(1)"
                },
                {
                    "type": "p",
                    "text": "Which can be used in the template to control the font size of all blog posts:"
                },
                {
                    "type": "code",
                    "code": "<div:style=\"{ fontSize: postFontSize+'em'}\"><BlogPostv-for=\"postinposts\":key=\"post.id\":title=\"post.title\"/></div>"
                },
                {
                    "type": "p",
                    "text": "Now let's add a button to the<BlogPost>component's template:"
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue, omitting <script> --><template><divclass=\"blog-post\"><h4>{{ title }}</h4><button>Enlarge text</button></div></template>"
                },
                {
                    "type": "p",
                    "text": "The button doesn't do anything yet - we want clicking the button to communicate to the parent that it should enlarge the text of all posts. To solve this problem, components provide a custom events system. The parent can choose to listen to any event on the child component instance withv-onor@, just as we would with a native DOM event:"
                },
                {
                    "type": "code",
                    "code": "<BlogPost...@enlarge-text=\"postFontSize+=0.1\"/>"
                },
                {
                    "type": "p",
                    "text": "Then the child component can emit an event on itself by calling the built-in$emitmethod, passing the name of the event:"
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue, omitting <script> --><template><divclass=\"blog-post\"><h4>{{ title }}</h4><button@click=\"$emit('enlarge-text')\">Enlarge text</button></div></template>"
                },
                {
                    "type": "p",
                    "text": "Thanks to the@enlarge-text=\"postFontSize += 0.1\"listener, the parent will receive the event and update the value ofpostFontSize."
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "We can optionally declare emitted events using theemitsoptiondefineEmitsmacro:"
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue --><script>exportdefault{props: ['title'],emits: ['enlarge-text']}</script>"
                },
                {
                    "type": "code",
                    "code": "<!-- BlogPost.vue --><scriptsetup>defineProps(['title'])defineEmits(['enlarge-text'])</script>"
                },
                {
                    "type": "p",
                    "text": "This documents all the events that a component emits and optionallyvalidates them. It also allows Vue to avoid implicitly applying them as native listeners to the child component's root element."
                },
                {
                    "type": "p",
                    "text": "Similar todefineProps,defineEmitsis only usable in<script setup>and doesn't need to be imported. It returns anemitfunction that is equivalent to the$emitmethod. It can be used to emit events in the<script setup>section of a component, where$emitisn't directly accessible:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>constemit=defineEmits(['enlarge-text'])emit('enlarge-text')</script>"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Component Emits"
                },
                {
                    "type": "p",
                    "text": "If you are not using<script setup>, you can declare emitted events using theemitsoption. You can access theemitfunction as a property of the setup context (passed tosetup()as the second argument):"
                },
                {
                    "type": "code",
                    "code": "exportdefault{emits: ['enlarge-text'],setup(props,ctx) {ctx.emit('enlarge-text')}}"
                },
                {
                    "type": "p",
                    "text": "That's all you need to know about custom component events for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide onCustom Events."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Content Distribution with Slots​"
                },
                {
                    "type": "p",
                    "text": "Just like with HTML elements, it's often useful to be able to pass content to a component, like this:"
                },
                {
                    "type": "code",
                    "code": "<AlertBox>Something bad happened.</AlertBox>"
                },
                {
                    "type": "p",
                    "text": "Which might render something like:"
                },
                {
                    "type": "p",
                    "text": "This is an Error for Demo Purposes"
                },
                {
                    "type": "p",
                    "text": "Something bad happened."
                },
                {
                    "type": "p",
                    "text": "This can be achieved using Vue's custom<slot>element:"
                },
                {
                    "type": "code",
                    "code": "<!-- AlertBox.vue --><template><divclass=\"alert-box\"><strong>This is an Error for Demo Purposes</strong><slot/></div></template><stylescoped>.alert-box{/* ... */}</style>"
                },
                {
                    "type": "p",
                    "text": "As you'll see above, we use the<slot>as a placeholder where we want the content to go – and that's it. We're done!"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "That's all you need to know about slots for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide onSlots."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Dynamic Components​"
                },
                {
                    "type": "p",
                    "text": "Sometimes, it's useful to dynamically switch between components, like in a tabbed interface:"
                },
                {
                    "type": "p",
                    "text": "Open example in the Playground"
                },
                {
                    "type": "p",
                    "text": "Open example in the Playground"
                },
                {
                    "type": "p",
                    "text": "The above is made possible by Vue's<component>element with the specialisattribute:"
                },
                {
                    "type": "code",
                    "code": "<!-- Component changes when currentTab changes --><component:is=\"currentTab\"></component>"
                },
                {
                    "type": "code",
                    "code": "<!-- Component changes when currentTab changes --><component:is=\"tabs[currentTab]\"></component>"
                },
                {
                    "type": "p",
                    "text": "In the example above, the value passed to:iscan contain either:"
                },
                {
                    "type": "list",
                    "items": [
                        "the name string of a registered component, OR",
                        "the actual imported component object"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can also use theisattribute to create regular HTML elements."
                },
                {
                    "type": "p",
                    "text": "When switching between multiple components with<component :is=\"...\">, a component will be unmounted when it is switched away from. We can force the inactive components to stay \"alive\" with the built-in<KeepAlive>component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "in-DOM Template Parsing Caveats​"
                },
                {
                    "type": "p",
                    "text": "If you are writing your Vue templates directly in the DOM, Vue will have to retrieve the template string from the DOM. This leads to some caveats due to browsers' native HTML parsing behavior."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "It should be noted that the limitations discussed below only apply if you are writing your templates directly in the DOM. They do NOT apply if you are using string templates from the following sources:"
                },
                {
                    "type": "list",
                    "items": [
                        "Single-File Components",
                        "Inlined template strings (e.g.template: '...')",
                        "<script type=\"text/x-template\">"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Case Insensitivity​"
                },
                {
                    "type": "p",
                    "text": "HTML tags and attribute names are case-insensitive, so browsers will interpret any uppercase characters as lowercase. That means when you’re using in-DOM templates, PascalCase component names and camelCased prop names orv-onevent names all need to use their kebab-cased (hyphen-delimited) equivalents:"
                },
                {
                    "type": "code",
                    "code": "// camelCase in JavaScriptconstBlogPost={props: ['postTitle'],emits: ['updatePost'],template:`<h3>{{ postTitle }}</h3>`}"
                },
                {
                    "type": "code",
                    "code": "<!-- kebab-case in HTML --><blog-postpost-title=\"hello!\"@update-post=\"onUpdatePost\"></blog-post>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Self Closing Tags​"
                },
                {
                    "type": "p",
                    "text": "We have been using self-closing tags for components in previous code samples:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent/>"
                },
                {
                    "type": "p",
                    "text": "This is because Vue's template parser respects/>as an indication to end any tag, regardless of its type."
                },
                {
                    "type": "p",
                    "text": "In in-DOM templates, however, we must always include explicit closing tags:"
                },
                {
                    "type": "code",
                    "code": "<my-component></my-component>"
                },
                {
                    "type": "p",
                    "text": "This is because the HTML spec only allowsa few specific elementsto omit closing tags, the most common being<input>and<img>. For all other elements, if you omit the closing tag, the native HTML parser will think you never terminated the opening tag. For example, the following snippet:"
                },
                {
                    "type": "code",
                    "code": "<my-component/><!-- we intend to close the tag here... --><span>hello</span>"
                },
                {
                    "type": "p",
                    "text": "will be parsed as:"
                },
                {
                    "type": "code",
                    "code": "<my-component><span>hello</span></my-component><!-- but the browser will close it here. -->"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Element Placement Restrictions​"
                },
                {
                    "type": "p",
                    "text": "Some HTML elements, such as<ul>,<ol>,<table>and<select>have restrictions on what elements can appear inside them, and some elements such as<li>,<tr>, and<option>can only appear inside certain other elements."
                },
                {
                    "type": "p",
                    "text": "This will lead to issues when using components with elements that have such restrictions. For example:"
                },
                {
                    "type": "code",
                    "code": "<table><blog-post-row></blog-post-row></table>"
                },
                {
                    "type": "p",
                    "text": "The custom component<blog-post-row>will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the specialisattributeas a workaround:"
                },
                {
                    "type": "code",
                    "code": "<table><tris=\"vue:blog-post-row\"></tr></table>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "When used on native HTML elements, the value ofismust be prefixed withvue:in order to be interpreted as a Vue component. This is required to avoid confusion with nativecustomized built-in elements."
                },
                {
                    "type": "p",
                    "text": "That's all you need to know about in-DOM template parsing caveats for now - and actually, the end of Vue'sEssentials. Congratulations! There's still more to learn, but first, we recommend taking a break to play with Vue yourself - build something fun, or check out some of theExamplesif you haven't already."
                },
                {
                    "type": "p",
                    "text": "Once you feel comfortable with the knowledge you've just digested, move on with the guide to learn more about components in depth."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/computed",
            "title": "Computed Properties | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Computed Properties​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Example​"
                },
                {
                    "type": "p",
                    "text": "In-template expressions are very convenient, but they are meant for simple operations. Putting too much logic in your templates can make them bloated and hard to maintain. For example, if we have an object with a nested array:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{author: {name:'John Doe',books: ['Vue 2 - Advanced Guide','Vue 3 - Basic Guide','Vue 4 - The Mystery']}}}}"
                },
                {
                    "type": "code",
                    "code": "constauthor=reactive({name:'John Doe',books: ['Vue 2 - Advanced Guide','Vue 3 - Basic Guide','Vue 4 - The Mystery']})"
                },
                {
                    "type": "p",
                    "text": "And we want to display different messages depending on ifauthoralready has some books or not:"
                },
                {
                    "type": "code",
                    "code": "<p>Has published books:</p><span>{{ author.books.length>0?'Yes':'No'}}</span>"
                },
                {
                    "type": "p",
                    "text": "At this point, the template is getting a bit cluttered. We have to look at it for a second before realizing that it performs a calculation depending onauthor.books. More importantly, we probably don't want to repeat ourselves if we need to include this calculation in the template more than once."
                },
                {
                    "type": "p",
                    "text": "That's why for complex logic that includes reactive data, it is recommended to use acomputed property. Here's the same example, refactored:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{author: {name:'John Doe',books: ['Vue 2 - Advanced Guide','Vue 3 - Basic Guide','Vue 4 - The Mystery']}}},computed: {// a computed getterpublishedBooksMessage() {// `this` points to the component instancereturnthis.author.books.length>0?'Yes':'No'}}}"
                },
                {
                    "type": "code",
                    "code": "<p>Has published books:</p><span>{{ publishedBooksMessage }}</span>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Here we have declared a computed propertypublishedBooksMessage."
                },
                {
                    "type": "p",
                    "text": "Try to change the value of thebooksarray in the applicationdataand you will see howpublishedBooksMessageis changing accordingly."
                },
                {
                    "type": "p",
                    "text": "You can data-bind to computed properties in templates just like a normal property. Vue is aware thatthis.publishedBooksMessagedepends onthis.author.books, so it will update any bindings that depend onthis.publishedBooksMessagewhenthis.author.bookschanges."
                },
                {
                    "type": "p",
                    "text": "See also:Typing Computed Properties"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ reactive, computed }from'vue'constauthor=reactive({name:'John Doe',books: ['Vue 2 - Advanced Guide','Vue 3 - Basic Guide','Vue 4 - The Mystery']})// a computed refconstpublishedBooksMessage=computed(()=>{returnauthor.books.length>0?'Yes':'No'})</script><template><p>Has published books:</p><span>{{ publishedBooksMessage }}</span></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Here we have declared a computed propertypublishedBooksMessage. Thecomputed()function expects to be passed agetter function, and the returned value is acomputed ref. Similar to normal refs, you can access the computed result aspublishedBooksMessage.value. Computed refs are also auto-unwrapped in templates so you can reference them without.valuein template expressions."
                },
                {
                    "type": "p",
                    "text": "A computed property automatically tracks its reactive dependencies. Vue is aware that the computation ofpublishedBooksMessagedepends onauthor.books, so it will update any bindings that depend onpublishedBooksMessagewhenauthor.bookschanges."
                },
                {
                    "type": "p",
                    "text": "See also:Typing Computed"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Computed Caching vs. Methods​"
                },
                {
                    "type": "p",
                    "text": "You may have noticed we can achieve the same result by invoking a method in the expression:"
                },
                {
                    "type": "code",
                    "code": "<p>{{calculateBooksMessage() }}</p>"
                },
                {
                    "type": "code",
                    "code": "// in componentmethods: {calculateBooksMessage() {returnthis.author.books.length>0?'Yes':'No'}}"
                },
                {
                    "type": "code",
                    "code": "// in componentfunctioncalculateBooksMessage() {returnauthor.books.length>0?'Yes':'No'}"
                },
                {
                    "type": "p",
                    "text": "Instead of a computed property, we can define the same function as a method. For the end result, the two approaches are indeed exactly the same. However, the difference is thatcomputed properties are cached based on their reactive dependencies.A computed property will only re-evaluate when some of its reactive dependencies have changed. This means as long asauthor.bookshas not changed, multiple access topublishedBooksMessagewill immediately return the previously computed result without having to run the getter function again."
                },
                {
                    "type": "p",
                    "text": "This also means the following computed property will never update, becauseDate.now()is not a reactive dependency:"
                },
                {
                    "type": "code",
                    "code": "computed: {now() {returnDate.now()}}"
                },
                {
                    "type": "code",
                    "code": "constnow=computed(()=>Date.now())"
                },
                {
                    "type": "p",
                    "text": "In comparison, a method invocation willalwaysrun the function whenever a re-render happens."
                },
                {
                    "type": "p",
                    "text": "Why do we need caching? Imagine we have an expensive computed propertylist, which requires looping through a huge array and doing a lot of computations. Then we may have other computed properties that in turn depend onlist. Without caching, we would be executinglist’s getter many more times than necessary! In cases where you do not want caching, use a method call instead."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Writable Computed​"
                },
                {
                    "type": "p",
                    "text": "Computed properties are by default getter-only. If you attempt to assign a new value to a computed property, you will receive a runtime warning. In the rare cases where you need a \"writable\" computed property, you can create one by providing both a getter and a setter:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{firstName:'John',lastName:'Doe'}},computed: {fullName: {// getterget() {returnthis.firstName+' '+this.lastName},// setterset(newValue) {// Note: we are using destructuring assignment syntax here.[this.firstName,this.lastName]=newValue.split(' ')}}}}"
                },
                {
                    "type": "p",
                    "text": "Now when you runthis.fullName = 'John Doe', the setter will be invoked andthis.firstNameandthis.lastNamewill be updated accordingly."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, computed }from'vue'constfirstName=ref('John')constlastName=ref('Doe')constfullName=computed({// getterget() {returnfirstName.value+' '+lastName.value},// setterset(newValue) {// Note: we are using destructuring assignment syntax here.[firstName.value, lastName.value]=newValue.split(' ')}})</script>"
                },
                {
                    "type": "p",
                    "text": "Now when you runfullName.value = 'John Doe', the setter will be invoked andfirstNameandlastNamewill be updated accordingly."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Getting the previous value​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.4+"
                    ]
                },
                {
                    "type": "p",
                    "text": "In case you need it, you can get the previous value returned by the computed property accessing the first argument of the getter:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{count:2}},computed: {// This computed will return the value of count when it's less or equal to 3.// When count is >=4, the last value that fulfilled our condition will be returned// instead until count is less or equal to 3alwaysSmall(previous) {if(this.count<=3) {returnthis.count;}returnprevious;}}}"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, computed }from'vue'constcount=ref(2)// This computed will return the value of count when it's less or equal to 3.// When count is >=4, the last value that fulfilled our condition will be returned// instead until count is less or equal to 3constalwaysSmall=computed((previous)=>{if(count.value<=3) {returncount.value;}returnprevious;})</script>"
                },
                {
                    "type": "p",
                    "text": "In case you're using a writable computed:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{count:2}},computed: {alwaysSmall: {get(previous) {if(this.count<=3) {returnthis.count;}returnprevious;},set(newValue) {this.count=newValue*2;}}}}"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, computed }from'vue'constcount=ref(2)constalwaysSmall=computed({get(previous) {if(count.value<=3) {returncount.value;}returnprevious;},set(newValue) {count.value=newValue*2;}})</script>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Best Practices​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Getters should be side-effect free​"
                },
                {
                    "type": "p",
                    "text": "It is important to remember that computed getter functions should only perform pure computation and be free of side effects. For example,don't mutate other state, make async requests, or mutate the DOM inside a computed getter!Think of a computed property as declaratively describing how to derive a value based on other values - its only responsibility should be computing and returning that value. Later in the guide we will discuss how we can perform side effects in reaction to state changes withwatchers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Avoid mutating computed value​"
                },
                {
                    "type": "p",
                    "text": "The returned value from a computed property is derived state. Think of it as a temporary snapshot - every time the source state changes, a new snapshot is created. It does not make sense to mutate a snapshot, so a computed return value should be treated as read-only and never be mutated - instead, update the source state it depends on to trigger new computations."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/conditional",
            "title": "Conditional Rendering | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Conditional Rendering​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-if​"
                },
                {
                    "type": "p",
                    "text": "The directivev-ifis used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value."
                },
                {
                    "type": "code",
                    "code": "<h1v-if=\"awesome\">Vue is awesome!</h1>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-else​"
                },
                {
                    "type": "p",
                    "text": "You can use thev-elsedirective to indicate an \"else block\" forv-if:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"awesome=!awesome\">Toggle</button><h1v-if=\"awesome\">Vue is awesome!</h1><h1v-else>Oh no 😢</h1>"
                },
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue is awesome!"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Av-elseelement must immediately follow av-ifor av-else-ifelement - otherwise it will not be recognized."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-else-if​"
                },
                {
                    "type": "p",
                    "text": "Thev-else-if, as the name suggests, serves as an \"else if block\" forv-if. It can also be chained multiple times:"
                },
                {
                    "type": "code",
                    "code": "<divv-if=\"type==='A'\">A</div><divv-else-if=\"type==='B'\">B</div><divv-else-if=\"type==='C'\">C</div><divv-else>Not A/B/C</div>"
                },
                {
                    "type": "p",
                    "text": "Similar tov-else, av-else-ifelement must immediately follow av-ifor av-else-ifelement."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-ifon<template>​"
                },
                {
                    "type": "p",
                    "text": "Becausev-ifis a directive, it has to be attached to a single element. But what if we want to toggle more than one element? In this case we can usev-ifon a<template>element, which serves as an invisible wrapper. The final rendered result will not include the<template>element."
                },
                {
                    "type": "code",
                    "code": "<templatev-if=\"ok\"><h1>Title</h1><p>Paragraph 1</p><p>Paragraph 2</p></template>"
                },
                {
                    "type": "p",
                    "text": "v-elseandv-else-ifcan also be used on<template>."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-show​"
                },
                {
                    "type": "p",
                    "text": "Another option for conditionally displaying an element is thev-showdirective. The usage is largely the same:"
                },
                {
                    "type": "code",
                    "code": "<h1v-show=\"ok\">Hello!</h1>"
                },
                {
                    "type": "p",
                    "text": "The difference is that an element withv-showwill always be rendered and remain in the DOM;v-showonly toggles thedisplayCSS property of the element."
                },
                {
                    "type": "p",
                    "text": "v-showdoesn't support the<template>element, nor does it work withv-else."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-ifvs.v-show​"
                },
                {
                    "type": "p",
                    "text": "v-ifis \"real\" conditional rendering because it ensures that event listeners and child components inside the conditional block are properly destroyed and re-created during toggles."
                },
                {
                    "type": "p",
                    "text": "v-ifis alsolazy: if the condition is false on initial render, it will not do anything - the conditional block won't be rendered until the condition becomes true for the first time."
                },
                {
                    "type": "p",
                    "text": "In comparison,v-showis much simpler - the element is always rendered regardless of initial condition, with CSS-based toggling."
                },
                {
                    "type": "p",
                    "text": "Generally speaking,v-ifhas higher toggle costs whilev-showhas higher initial render costs. So preferv-showif you need to toggle something very often, and preferv-ifif the condition is unlikely to change at runtime."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-ifwithv-for​"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "It'snotrecommended to usev-ifandv-foron the same element due to implicit precedence. Refer tostyle guidefor details."
                },
                {
                    "type": "p",
                    "text": "Whenv-ifandv-forare both used on the same element,v-ifwill be evaluated first. See thelist rendering guidefor details."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/event-handling",
            "title": "Event Handling | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Event Handling​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Listening to Events​"
                },
                {
                    "type": "p",
                    "text": "We can use thev-ondirective, which we typically shorten to the@symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would bev-on:click=\"handler\"or with the shortcut,@click=\"handler\"."
                },
                {
                    "type": "p",
                    "text": "The handler value can be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "Inline handlers:Inline JavaScript to be executed when the event is triggered (similar to the nativeonclickattribute).",
                        "Method handlers:A property name or path that points to a method defined on the component."
                    ]
                },
                {
                    "type": "p",
                    "text": "Inline handlers:Inline JavaScript to be executed when the event is triggered (similar to the nativeonclickattribute)."
                },
                {
                    "type": "p",
                    "text": "Method handlers:A property name or path that points to a method defined on the component."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Inline Handlers​"
                },
                {
                    "type": "p",
                    "text": "Inline handlers are typically used in simple cases, for example:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)"
                },
                {
                    "type": "code",
                    "code": "data() {return{count:0}}"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"count++\">Add 1</button><p>Count is: {{ count }}</p>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Method Handlers​"
                },
                {
                    "type": "p",
                    "text": "The logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's whyv-oncan also accept the name or path of a component method you'd like to call."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "constname=ref('Vue.js')functiongreet(event) {alert(`Hello ${name.value}!`)// `event` is the native DOM eventif(event) {alert(event.target.tagName)}}"
                },
                {
                    "type": "code",
                    "code": "data() {return{name:'Vue.js'}},methods: {greet(event) {// `this` inside methods points to the current active instancealert(`Hello ${this.name}!`)// `event` is the native DOM eventif(event) {alert(event.target.tagName)}}}"
                },
                {
                    "type": "code",
                    "code": "<!-- `greet` is the name of the method defined above --><button@click=\"greet\">Greet</button>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "A method handler automatically receives the native DOM Event object that triggers it - in the example above, we are able to access the element dispatching the event viaevent.target."
                },
                {
                    "type": "p",
                    "text": "See also:Typing Event Handlers"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Event Handlers"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Method vs. Inline Detection​"
                },
                {
                    "type": "p",
                    "text": "The template compiler detects method handlers by checking whether thev-onvalue string is a valid JavaScript identifier or property access path. For example,foo,foo.barandfoo['bar']are treated as method handlers, whilefoo()andcount++are treated as inline handlers."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Calling Methods in Inline Handlers​"
                },
                {
                    "type": "p",
                    "text": "Instead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:"
                },
                {
                    "type": "code",
                    "code": "functionsay(message) {alert(message)}"
                },
                {
                    "type": "code",
                    "code": "methods: {say(message) {alert(message)}}"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"say('hello')\">Say hello</button><button@click=\"say('bye')\">Say bye</button>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessing Event Argument in Inline Handlers​"
                },
                {
                    "type": "p",
                    "text": "Sometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special$eventvariable, or use an inline arrow function:"
                },
                {
                    "type": "code",
                    "code": "<!-- using $event special variable --><button@click=\"warn('Form cannot be submitted yet.', $event)\">Submit</button><!-- using inline arrow function --><button@click=\"(event)=>warn('Form cannot be submitted yet.', event)\">Submit</button>"
                },
                {
                    "type": "code",
                    "code": "functionwarn(message,event) {// now we have access to the native eventif(event) {event.preventDefault()}alert(message)}"
                },
                {
                    "type": "code",
                    "code": "methods: {warn(message, event) {// now we have access to the native eventif(event) {event.preventDefault()}alert(message)}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Event Modifiers​"
                },
                {
                    "type": "p",
                    "text": "It is a very common need to callevent.preventDefault()orevent.stopPropagation()inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details."
                },
                {
                    "type": "p",
                    "text": "To address this problem, Vue providesevent modifiersforv-on. Recall that modifiers are directive postfixes denoted by a dot."
                },
                {
                    "type": "list",
                    "items": [
                        ".stop",
                        ".prevent",
                        ".self",
                        ".capture",
                        ".once",
                        ".passive"
                    ]
                },
                {
                    "type": "code",
                    "code": "<!-- the click event's propagation will be stopped --><a@click.stop=\"doThis\"></a><!-- the submit event will no longer reload the page --><form@submit.prevent=\"onSubmit\"></form><!-- modifiers can be chained --><a@click.stop.prevent=\"doThat\"></a><!-- just the modifier --><form@submit.prevent></form><!-- only trigger handler if event.target is the element itself --><!-- i.e. not from a child element --><div@click.self=\"doThat\">...</div>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Order matters when using modifiers because the relevant code is generated in the same order. Therefore using@click.prevent.selfwill preventclick's default action on the element itself and its children, while@click.self.preventwill only prevent click's default action on the element itself."
                },
                {
                    "type": "p",
                    "text": "The.capture,.once, and.passivemodifiers mirror theoptions of the nativeaddEventListenermethod:"
                },
                {
                    "type": "code",
                    "code": "<!-- use capture mode when adding the event listener     --><!-- i.e. an event targeting an inner element is handled --><!-- here before being handled by that element           --><div@click.capture=\"doThis\">...</div><!-- the click event will be triggered at most once --><a@click.once=\"doThis\"></a><!-- the scroll event's default behavior (scrolling) will happen --><!-- immediately, instead of waiting for `onScroll` to complete  --><!-- in case it contains `event.preventDefault()`                --><div@scroll.passive=\"onScroll\">...</div>"
                },
                {
                    "type": "p",
                    "text": "The.passivemodifier is typically used with touch event listeners forimproving performance on mobile devices."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Do not use.passiveand.preventtogether, because.passivealready indicates to the browser that youdo notintend to prevent the event's default behavior, and you will likely see a warning from the browser if you do so."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Key Modifiers​"
                },
                {
                    "type": "p",
                    "text": "When listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers forv-onor@when listening for key events:"
                },
                {
                    "type": "code",
                    "code": "<!-- only call `submit` when the `key` is `Enter` --><input@keyup.enter=\"submit\"/>"
                },
                {
                    "type": "p",
                    "text": "You can directly use any valid key names exposed viaKeyboardEvent.keyas modifiers by converting them to kebab-case."
                },
                {
                    "type": "code",
                    "code": "<input@keyup.page-down=\"onPageDown\"/>"
                },
                {
                    "type": "p",
                    "text": "In the above example, the handler will only be called if$event.keyis equal to'PageDown'."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Key Aliases​"
                },
                {
                    "type": "p",
                    "text": "Vue provides aliases for the most commonly used keys:"
                },
                {
                    "type": "list",
                    "items": [
                        ".enter",
                        ".tab",
                        ".delete(captures both \"Delete\" and \"Backspace\" keys)",
                        ".esc",
                        ".space",
                        ".up",
                        ".down",
                        ".left",
                        ".right"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "System Modifier Keys​"
                },
                {
                    "type": "p",
                    "text": "You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:"
                },
                {
                    "type": "list",
                    "items": [
                        ".ctrl",
                        ".alt",
                        ".shift",
                        ".meta"
                    ]
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "On Macintosh keyboards, meta is the command key (⌘). On Windows keyboards, meta is the Windows key (⊞). On Sun Microsystems keyboards, meta is marked as a solid diamond (◆). On certain keyboards, specifically MIT and Lisp machine keyboards and successors, such as the Knight keyboard, space-cadet keyboard, meta is labeled “META”. On Symbolics keyboards, meta is labeled “META” or “Meta”."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "<!-- Alt + Enter --><input@keyup.alt.enter=\"clear\"/><!-- Ctrl + Click --><div@click.ctrl=\"doSomething\">Do something</div>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Note that modifier keys are different from regular keys and when used withkeyupevents, they have to be pressed when the event is emitted. In other words,keyup.ctrlwill only trigger if you release a key while holding downctrl. It won't trigger if you release thectrlkey alone."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": ".exactModifier​"
                },
                {
                    "type": "p",
                    "text": "The.exactmodifier allows control of the exact combination of system modifiers needed to trigger an event."
                },
                {
                    "type": "code",
                    "code": "<!-- this will fire even if Alt or Shift is also pressed --><button@click.ctrl=\"onClick\">A</button><!-- this will only fire when Ctrl and no other keys are pressed --><button@click.ctrl.exact=\"onCtrlClick\">A</button><!-- this will only fire when no system modifiers are pressed --><button@click.exact=\"onClick\">A</button>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Mouse Button Modifiers​"
                },
                {
                    "type": "list",
                    "items": [
                        ".left",
                        ".right",
                        ".middle"
                    ]
                },
                {
                    "type": "p",
                    "text": "These modifiers restrict the handler to events triggered by a specific mouse button."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/forms",
            "title": "Form Input Bindings | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Form Input Bindings​"
                },
                {
                    "type": "p",
                    "text": "When dealing with forms on the frontend, we often need to sync the state of form input elements with corresponding state in JavaScript. It can be cumbersome to manually wire up value bindings and change event listeners:"
                },
                {
                    "type": "code",
                    "code": "<input:value=\"text\"@input=\"event=>text=event.target.value\">"
                },
                {
                    "type": "p",
                    "text": "Thev-modeldirective helps us simplify the above to:"
                },
                {
                    "type": "code",
                    "code": "<inputv-model=\"text\">"
                },
                {
                    "type": "p",
                    "text": "In addition,v-modelcan be used on inputs of different types,<textarea>, and<select>elements. It automatically expands to different DOM property and event pairs based on the element it is used on:"
                },
                {
                    "type": "list",
                    "items": [
                        "<input>with text types and<textarea>elements usevalueproperty andinputevent;",
                        "<input type=\"checkbox\">and<input type=\"radio\">usecheckedproperty andchangeevent;",
                        "<select>usesvalueas a prop andchangeas an event."
                    ]
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "v-modelwill ignore the initialvalue,checkedorselectedattributes found on any form elements. It will always treat the current bound JavaScript state as the source of truth. You should declare the initial value on the JavaScript side, usingthedataoptionreactivity APIs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Text​"
                },
                {
                    "type": "code",
                    "code": "<p>Message is: {{ message }}</p><inputv-model=\"message\"placeholder=\"edit me\"/>"
                },
                {
                    "type": "p",
                    "text": "Message is:"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "For languages that require anIME(Chinese, Japanese, Korean etc.), you'll notice thatv-modeldoesn't get updated during IME composition. If you want to respond to these updates as well, use your owninputevent listener andvaluebinding instead of usingv-model."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Multiline text​"
                },
                {
                    "type": "code",
                    "code": "<span>Multiline message is:</span><pstyle=\"white-space: pre-line;\">{{ message }}</p><textareav-model=\"message\"placeholder=\"add multiple lines\"></textarea>"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Note that interpolation inside<textarea>won't work. Usev-modelinstead."
                },
                {
                    "type": "code",
                    "code": "<!-- bad --><textarea>{{ text }}</textarea><!-- good --><textareav-model=\"text\"></textarea>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Checkbox​"
                },
                {
                    "type": "p",
                    "text": "Single checkbox, boolean value:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"id=\"checkbox\"v-model=\"checked\"/><labelfor=\"checkbox\">{{ checked }}</label>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "We can also bind multiple checkboxes to the same array orSetvalue:"
                },
                {
                    "type": "code",
                    "code": "constcheckedNames=ref([])"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{checkedNames: []}}}"
                },
                {
                    "type": "code",
                    "code": "<div>Checked names: {{ checkedNames }}</div><inputtype=\"checkbox\"id=\"jack\"value=\"Jack\"v-model=\"checkedNames\"/><labelfor=\"jack\">Jack</label><inputtype=\"checkbox\"id=\"john\"value=\"John\"v-model=\"checkedNames\"/><labelfor=\"john\">John</label><inputtype=\"checkbox\"id=\"mike\"value=\"Mike\"v-model=\"checkedNames\"/><labelfor=\"mike\">Mike</label>"
                },
                {
                    "type": "p",
                    "text": "In this case, thecheckedNamesarray will always contain the values from the currently checked boxes."
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Radio​"
                },
                {
                    "type": "code",
                    "code": "<div>Picked: {{ picked }}</div><inputtype=\"radio\"id=\"one\"value=\"One\"v-model=\"picked\"/><labelfor=\"one\">One</label><inputtype=\"radio\"id=\"two\"value=\"Two\"v-model=\"picked\"/><labelfor=\"two\">Two</label>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Select​"
                },
                {
                    "type": "p",
                    "text": "Single select:"
                },
                {
                    "type": "code",
                    "code": "<div>Selected: {{ selected }}</div><selectv-model=\"selected\"><optiondisabledvalue=\"\">Please select one</option><option>A</option><option>B</option><option>C</option></select>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "If the initial value of yourv-modelexpression does not match any of the options, the<select>element will render in an \"unselected\" state. On iOS this will cause the user not being able to select the first item because iOS does not fire a change event in this case. It is therefore recommended to provide a disabled option with an empty value, as demonstrated in the example above."
                },
                {
                    "type": "p",
                    "text": "Multiple select (bound to array):"
                },
                {
                    "type": "code",
                    "code": "<div>Selected: {{ selected }}</div><selectv-model=\"selected\"multiple><option>A</option><option>B</option><option>C</option></select>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Select options can be dynamically rendered withv-for:"
                },
                {
                    "type": "code",
                    "code": "constselected=ref('A')constoptions=ref([{ text:'One', value:'A'},{ text:'Two', value:'B'},{ text:'Three', value:'C'}])"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{selected:'A',options: [{ text:'One', value:'A'},{ text:'Two', value:'B'},{ text:'Three', value:'C'}]}}}"
                },
                {
                    "type": "code",
                    "code": "<selectv-model=\"selected\"><optionv-for=\"optioninoptions\":value=\"option.value\">{{ option.text }}</option></select><div>Selected: {{ selected }}</div>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Value Bindings​"
                },
                {
                    "type": "p",
                    "text": "For radio, checkbox and select options, thev-modelbinding values are usually static strings (or booleans for checkbox):"
                },
                {
                    "type": "code",
                    "code": "<!-- `picked` is a string \"a\" when checked --><inputtype=\"radio\"v-model=\"picked\"value=\"a\"/><!-- `toggle` is either true or false --><inputtype=\"checkbox\"v-model=\"toggle\"/><!-- `selected` is a string \"abc\" when the first option is selected --><selectv-model=\"selected\"><optionvalue=\"abc\">ABC</option></select>"
                },
                {
                    "type": "p",
                    "text": "But sometimes we may want to bind the value to a dynamic property on the current active instance. We can usev-bindto achieve that. In addition, usingv-bindallows us to bind the input value to non-string values."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Checkbox​"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"v-model=\"toggle\"true-value=\"yes\"false-value=\"no\"/>"
                },
                {
                    "type": "p",
                    "text": "true-valueandfalse-valueare Vue-specific attributes that only work withv-model. Here thetoggleproperty's value will be set to'yes'when the box is checked, and set to'no'when unchecked. You can also bind them to dynamic values usingv-bind:"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"checkbox\"v-model=\"toggle\":true-value=\"dynamicTrueValue\":false-value=\"dynamicFalseValue\"/>"
                },
                {
                    "type": "p",
                    "text": "Tip"
                },
                {
                    "type": "p",
                    "text": "Thetrue-valueandfalse-valueattributes don't affect the input'svalueattribute, because browsers don't include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. \"yes\" or \"no\"), use radio inputs instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Radio​"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"radio\"v-model=\"pick\":value=\"first\"/><inputtype=\"radio\"v-model=\"pick\":value=\"second\"/>"
                },
                {
                    "type": "p",
                    "text": "pickwill be set to the value offirstwhen the first radio input is checked, and set to the value ofsecondwhen the second one is checked."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Select Options​"
                },
                {
                    "type": "code",
                    "code": "<selectv-model=\"selected\"><!-- inline object literal --><option:value=\"{ number:123}\">123</option></select>"
                },
                {
                    "type": "p",
                    "text": "v-modelsupports value bindings of non-string values as well! In the above example, when the option is selected,selectedwill be set to the object literal value of{ number: 123 }."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Modifiers​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": ".lazy​"
                },
                {
                    "type": "p",
                    "text": "By default,v-modelsyncs the input with the data after eachinputevent (with the exception of IME composition asstated above). You can add thelazymodifier to instead sync afterchangeevents:"
                },
                {
                    "type": "code",
                    "code": "<!-- synced after \"change\" instead of \"input\" --><inputv-model.lazy=\"msg\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": ".number​"
                },
                {
                    "type": "p",
                    "text": "If you want user input to be automatically typecast as a number, you can add thenumbermodifier to yourv-modelmanaged inputs:"
                },
                {
                    "type": "code",
                    "code": "<inputv-model.number=\"age\"/>"
                },
                {
                    "type": "p",
                    "text": "If the value cannot be parsed withparseFloat(), then the original (string) value is used instead. In particular, if the input is empty (for instance after the user clearing the input field), an empty string is returned. This behavior differs from theDOM propertyvalueAsNumber."
                },
                {
                    "type": "p",
                    "text": "Thenumbermodifier is applied automatically if the input hastype=\"number\"."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": ".trim​"
                },
                {
                    "type": "p",
                    "text": "If you want whitespace from user input to be trimmed automatically, you can add thetrimmodifier to yourv-model-managed inputs:"
                },
                {
                    "type": "code",
                    "code": "<inputv-model.trim=\"msg\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-modelwith Components​"
                },
                {
                    "type": "p",
                    "text": "If you're not yet familiar with Vue's components, you can skip this for now."
                },
                {
                    "type": "p",
                    "text": "HTML's built-in input types won't always meet your needs. Fortunately, Vue components allow you to build reusable inputs with completely customized behavior. These inputs even work withv-model! To learn more, read aboutUsage withv-modelin the Components guide."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/lifecycle",
            "title": "Lifecycle Hooks | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Lifecycle Hooks​"
                },
                {
                    "type": "p",
                    "text": "Each Vue component instance goes through a series of initialization steps when it's created - for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes. Along the way, it also runs functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Registering Lifecycle Hooks​"
                },
                {
                    "type": "p",
                    "text": "For example, theonMountedmountedhook can be used to run code after the component has finished the initial rendering and created the DOM nodes:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ onMounted }from'vue'onMounted(()=>{console.log(`the component is now mounted.`)})</script>"
                },
                {
                    "type": "code",
                    "code": "exportdefault{mounted() {console.log(`the component is now mounted.`)}}"
                },
                {
                    "type": "p",
                    "text": "There are also other hooks which will be called at different stages of the instance's lifecycle, with the most commonly used beingonMounted,onUpdated, andonUnmounted.mounted,updated, andunmounted."
                },
                {
                    "type": "p",
                    "text": "All lifecycle hooks are called with theirthiscontext pointing to the current active instance invoking it. Note this means you should avoid using arrow functions when declaring lifecycle hooks, as you won't be able to access the component instance viathisif you do so."
                },
                {
                    "type": "p",
                    "text": "When callingonMounted, Vue automatically associates the registered callback function with the current active component instance. This requires these hooks to be registeredsynchronouslyduring component setup. For example, do not do this:"
                },
                {
                    "type": "code",
                    "code": "setTimeout(()=>{onMounted(()=>{// this won't work.})},100)"
                },
                {
                    "type": "p",
                    "text": "Do note this doesn't mean that the call must be placed lexically insidesetup()or<script setup>.onMounted()can be called in an external function as long as the call stack is synchronous and originates from withinsetup()."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lifecycle Diagram​"
                },
                {
                    "type": "p",
                    "text": "Below is a diagram for the instance lifecycle. You don't need to fully understand everything going on right now, but as you learn and build more, it will be a useful reference."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Consult theLifecycle Hooks API referenceLifecycle Hooks API referencefor details on all lifecycle hooks and their respective use cases."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/list",
            "title": "List Rendering | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "List Rendering​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-for​"
                },
                {
                    "type": "p",
                    "text": "We can use thev-fordirective to render a list of items based on an array. Thev-fordirective requires a special syntax in the form ofitem in items, whereitemsis the source data array anditemis analiasfor the array element being iterated on:"
                },
                {
                    "type": "code",
                    "code": "constitems=ref([{ message:'Foo'}, { message:'Bar'}])"
                },
                {
                    "type": "code",
                    "code": "data() {return{items: [{ message:'Foo'}, { message:'Bar'}]}}"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"iteminitems\">{{ item.message }}</li>"
                },
                {
                    "type": "p",
                    "text": "Inside thev-forscope, template expressions have access to all parent scope properties. In addition,v-foralso supports an optional second alias for the index of the current item:"
                },
                {
                    "type": "code",
                    "code": "constparentMessage=ref('Parent')constitems=ref([{ message:'Foo'}, { message:'Bar'}])"
                },
                {
                    "type": "code",
                    "code": "data() {return{parentMessage:'Parent',items: [{ message:'Foo'}, { message:'Bar'}]}}"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"(item, index)initems\">{{ parentMessage }} - {{ index }} - {{ item.message }}</li>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "The variable scoping ofv-foris similar to the following JavaScript:"
                },
                {
                    "type": "code",
                    "code": "constparentMessage='Parent'constitems=[/* ... */]items.forEach((item,index)=>{// has access to outer scope `parentMessage`// but `item` and `index` are only available in hereconsole.log(parentMessage, item.message, index)})"
                },
                {
                    "type": "p",
                    "text": "Notice how thev-forvalue matches the function signature of theforEachcallback. In fact, you can use destructuring on thev-foritem alias similar to destructuring function arguments:"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"{ message }initems\">{{ message }}</li><!-- with index alias --><liv-for=\"({ message }, index)initems\">{{ message }} {{ index }}</li>"
                },
                {
                    "type": "p",
                    "text": "For nestedv-for, scoping also works similar to nested functions. Eachv-forscope has access to parent scopes:"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"iteminitems\"><spanv-for=\"childIteminitem.children\">{{ item.message }} {{ childItem }}</span></li>"
                },
                {
                    "type": "p",
                    "text": "You can also useofas the delimiter instead ofin, so that it is closer to JavaScript's syntax for iterators:"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"itemofitems\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-forwith an Object​"
                },
                {
                    "type": "p",
                    "text": "You can also usev-forto iterate through the properties of an object. The iteration order will be based on the result of callingObject.values()on the object:"
                },
                {
                    "type": "code",
                    "code": "constmyObject=reactive({title:'How to do lists in Vue',author:'Jane Doe',publishedAt:'2016-04-10'})"
                },
                {
                    "type": "code",
                    "code": "data() {return{myObject: {title:'How to do lists in Vue',author:'Jane Doe',publishedAt:'2016-04-10'}}}"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"valueinmyObject\">{{ value }}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "You can also provide a second alias for the property's name (a.k.a. key):"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"(value, key)inmyObject\">{{ key }}: {{ value }}</li>"
                },
                {
                    "type": "p",
                    "text": "And another for the index:"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"(value, key, index)inmyObject\">{{ index }}. {{ key }}: {{ value }}</li>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-forwith a Range​"
                },
                {
                    "type": "p",
                    "text": "v-forcan also take an integer. In this case it will repeat the template that many times, based on a range of1...n."
                },
                {
                    "type": "code",
                    "code": "<spanv-for=\"nin10\">{{ n }}</span>"
                },
                {
                    "type": "p",
                    "text": "Note herenstarts with an initial value of1instead of0."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-foron<template>​"
                },
                {
                    "type": "p",
                    "text": "Similar to templatev-if, you can also use a<template>tag withv-forto render a block of multiple elements. For example:"
                },
                {
                    "type": "code",
                    "code": "<ul><templatev-for=\"iteminitems\"><li>{{ item.msg }}</li><liclass=\"divider\"role=\"presentation\"></li></template></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-forwithv-if​"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "It'snotrecommended to usev-ifandv-foron the same element due to implicit precedence. Refer tostyle guidefor details."
                },
                {
                    "type": "p",
                    "text": "When they exist on the same node,v-ifhas a higher priority thanv-for. That means thev-ifcondition will not have access to variables from the scope of thev-for:"
                },
                {
                    "type": "code",
                    "code": "<!--This will throw an error because property \"todo\"is not defined on instance.--><liv-for=\"todointodos\"v-if=\"!todo.isComplete\">{{ todo.name }}</li>"
                },
                {
                    "type": "p",
                    "text": "This can be fixed by movingv-forto a wrapping<template>tag (which is also more explicit):"
                },
                {
                    "type": "code",
                    "code": "<templatev-for=\"todointodos\"><liv-if=\"!todo.isComplete\">{{ todo.name }}</li></template>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Maintaining State withkey​"
                },
                {
                    "type": "p",
                    "text": "When Vue is updating a list of elements rendered withv-for, by default it uses an \"in-place patch\" strategy. If the order of the data items has changed, instead of moving the DOM elements to match the order of the items, Vue will patch each element in-place and make sure it reflects what should be rendered at that particular index."
                },
                {
                    "type": "p",
                    "text": "This default mode is efficient, butonly suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)."
                },
                {
                    "type": "p",
                    "text": "To give Vue a hint so that it can track each node's identity, and thus reuse and reorder existing elements, you need to provide a uniquekeyattribute for each item:"
                },
                {
                    "type": "code",
                    "code": "<divv-for=\"iteminitems\":key=\"item.id\"><!-- content --></div>"
                },
                {
                    "type": "p",
                    "text": "When using<template v-for>, thekeyshould be placed on the<template>container:"
                },
                {
                    "type": "code",
                    "code": "<templatev-for=\"todointodos\":key=\"todo.name\"><li>{{ todo.name }}</li></template>"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "keyhere is a special attribute being bound withv-bind. It should not be confused with the property key variable whenusingv-forwith an object."
                },
                {
                    "type": "p",
                    "text": "It is recommendedto provide akeyattribute withv-forwhenever possible, unless the iterated DOM content is simple (i.e. contains no components or stateful DOM elements), or you are intentionally relying on the default behavior for performance gains."
                },
                {
                    "type": "p",
                    "text": "Thekeybinding expects primitive values - i.e. strings and numbers. Do not use objects asv-forkeys. For detailed usage of thekeyattribute, please see thekeyAPI documentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "v-forwith a Component​"
                },
                {
                    "type": "p",
                    "text": "This section assumes knowledge ofComponents. Feel free to skip it and come back later."
                },
                {
                    "type": "p",
                    "text": "You can directly usev-foron a component, like any normal element (don't forget to provide akey):"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-for=\"iteminitems\":key=\"item.id\"/>"
                },
                {
                    "type": "p",
                    "text": "However, this won't automatically pass any data to the component, because components have isolated scopes of their own. In order to pass the iterated data into the component, we should also use props:"
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-for=\"(item, index)initems\":item=\"item\":index=\"index\":key=\"item.id\"/>"
                },
                {
                    "type": "p",
                    "text": "The reason for not automatically injectingiteminto the component is because that makes the component tightly coupled to howv-forworks. Being explicit about where its data comes from makes the component reusable in other situations."
                },
                {
                    "type": "p",
                    "text": "Check outthis example of a simple todo listto see how to render a list of components usingv-for, passing different data to each instance."
                },
                {
                    "type": "p",
                    "text": "Check outthis example of a simple todo listto see how to render a list of components usingv-for, passing different data to each instance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Array Change Detection​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Mutation Methods​"
                },
                {
                    "type": "p",
                    "text": "Vue is able to detect when a reactive array's mutation methods are called and trigger necessary updates. These mutation methods are:"
                },
                {
                    "type": "list",
                    "items": [
                        "push()",
                        "pop()",
                        "shift()",
                        "unshift()",
                        "splice()",
                        "sort()",
                        "reverse()"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Replacing an Array​"
                },
                {
                    "type": "p",
                    "text": "Mutation methods, as the name suggests, mutate the original array they are called on. In comparison, there are also non-mutating methods, e.g.filter(),concat()andslice(), which do not mutate the original array butalways return a new array. When working with non-mutating methods, we should replace the old array with the new one:"
                },
                {
                    "type": "code",
                    "code": "// `items` is a ref with array valueitems.value=items.value.filter((item)=>item.message.match(/Foo/))"
                },
                {
                    "type": "code",
                    "code": "this.items=this.items.filter((item)=>item.message.match(/Foo/))"
                },
                {
                    "type": "p",
                    "text": "You might think this will cause Vue to throw away the existing DOM and re-render the entire list - luckily, that is not the case. Vue implements some smart heuristics to maximize DOM element reuse, so replacing an array with another array containing overlapping objects is a very efficient operation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Displaying Filtered/Sorted Results​"
                },
                {
                    "type": "p",
                    "text": "Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "constnumbers=ref([1,2,3,4,5])constevenNumbers=computed(()=>{returnnumbers.value.filter((n)=>n%2===0)})"
                },
                {
                    "type": "code",
                    "code": "data() {return{numbers: [1,2,3,4,5]}},computed: {evenNumbers() {returnthis.numbers.filter(n=>n%2===0)}}"
                },
                {
                    "type": "code",
                    "code": "<liv-for=\"ninevenNumbers\">{{ n }}</li>"
                },
                {
                    "type": "p",
                    "text": "In situations where computed properties are not feasible (e.g. inside nestedv-forloops), you can use a method:"
                },
                {
                    "type": "code",
                    "code": "constsets=ref([[1,2,3,4,5],[6,7,8,9,10]])functioneven(numbers) {returnnumbers.filter((number)=>number%2===0)}"
                },
                {
                    "type": "code",
                    "code": "data() {return{sets: [[1,2,3,4,5], [6,7,8,9,10]]}},methods: {even(numbers) {returnnumbers.filter(number=>number%2===0)}}"
                },
                {
                    "type": "code",
                    "code": "<ulv-for=\"numbersinsets\"><liv-for=\"nineven(numbers)\">{{ n }}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "Be careful withreverse()andsort()in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:"
                },
                {
                    "type": "code",
                    "code": "- return numbers.reverse()+ return [...numbers].reverse()"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/reactivity-fundamentals",
            "title": "Reactivity Fundamentals | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity Fundamentals​"
                },
                {
                    "type": "p",
                    "text": "API Preference"
                },
                {
                    "type": "p",
                    "text": "This page and many other chapters later in the guide contain different content for the Options API and the Composition API. Your current preference isOptions APIComposition API. You can toggle between the API styles using the \"API Preference\" switches at the top of the left sidebar."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Declaring Reactive State​"
                },
                {
                    "type": "p",
                    "text": "With the Options API, we use thedataoption to declare reactive state of a component. The option value should be a function that returns an object. Vue will call the function when creating a new component instance, and wrap the returned object in its reactivity system. Any top-level properties of this object are proxied on the component instance (thisin methods and lifecycle hooks):"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{count:1}},// `mounted` is a lifecycle hook which we will explain latermounted() {// `this` refers to the component instance.console.log(this.count)// => 1// data can be mutated as wellthis.count=2}}"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "These instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by thedatafunction. Where necessary, usenull,undefinedor some other placeholder value for properties where the desired value isn't yet available."
                },
                {
                    "type": "p",
                    "text": "It is possible to add a new property directly tothiswithout including it indata. However, properties added this way will not be able to trigger reactive updates."
                },
                {
                    "type": "p",
                    "text": "Vue uses a$prefix when exposing its own built-in APIs via the component instance. It also reserves the prefix_for internal properties. You should avoid using names for top-leveldataproperties that start with either of these characters."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactive Proxy vs. Original​"
                },
                {
                    "type": "p",
                    "text": "In Vue 3, data is made reactive by leveragingJavaScript Proxies. Users coming from Vue 2 should be aware of the following edge case:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{someObject: {}}},mounted() {constnewObject={}this.someObject=newObjectconsole.log(newObject===this.someObject)// false}}"
                },
                {
                    "type": "p",
                    "text": "When you accessthis.someObjectafter assigning it, the value is a reactive proxy of the originalnewObject.Unlike in Vue 2, the originalnewObjectis left intact and will not be made reactive: make sure to always access reactive state as a property ofthis."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Declaring Reactive State​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "ref()​"
                },
                {
                    "type": "p",
                    "text": "In Composition API, the recommended way to declare reactive state is using theref()function:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'constcount=ref(0)"
                },
                {
                    "type": "p",
                    "text": "ref()takes the argument and returns it wrapped within a ref object with a.valueproperty:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)console.log(count)// { value: 0 }console.log(count.value)// 0count.value++console.log(count.value)// 1"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Refs"
                },
                {
                    "type": "p",
                    "text": "To access refs in a component's template, declare and return them from a component'ssetup()function:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'exportdefault{// `setup` is a special hook dedicated for the Composition API.setup() {constcount=ref(0)// expose the ref to the templatereturn{count}}}"
                },
                {
                    "type": "code",
                    "code": "<div>{{ count }}</div>"
                },
                {
                    "type": "p",
                    "text": "Notice that we didnotneed to append.valuewhen using the ref in the template. For convenience, refs are automatically unwrapped when used inside templates (with a fewcaveats)."
                },
                {
                    "type": "p",
                    "text": "You can also mutate a ref directly in event handlers:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"count++\">{{ count }}</button>"
                },
                {
                    "type": "p",
                    "text": "For more complex logic, we can declare functions that mutate refs in the same scope and expose them as methods alongside the state:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'exportdefault{setup() {constcount=ref(0)functionincrement() {// .value is needed in JavaScriptcount.value++}// don't forget to expose the function as well.return{count,increment}}}"
                },
                {
                    "type": "p",
                    "text": "Exposed methods can then be used as event handlers:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"increment\">{{ count }}</button>"
                },
                {
                    "type": "p",
                    "text": "Here's the example live onCodepen, without using any build tools."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "<script setup>​"
                },
                {
                    "type": "p",
                    "text": "Manually exposing state and methods viasetup()can be verbose. Luckily, it can be avoided when usingSingle-File Components (SFCs). We can simplify the usage with<script setup>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)functionincrement() {count.value++}</script><template><button@click=\"increment\">{{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Top-level imports, variables and functions declared in<script setup>are automatically usable in the template of the same component. Think of the template as a JavaScript function declared in the same scope - it naturally has access to everything declared alongside it."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "For the rest of the guide, we will be primarily using SFC +<script setup>syntax for the Composition API code examples, as that is the most common usage for Vue developers."
                },
                {
                    "type": "p",
                    "text": "If you are not using SFC, you can still use Composition API with thesetup()option."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Why Refs?​"
                },
                {
                    "type": "p",
                    "text": "You might be wondering why we need refs with the.valueinstead of plain variables. To explain that, we will need to briefly discuss how Vue's reactivity system works."
                },
                {
                    "type": "p",
                    "text": "When you use a ref in a template, and change the ref's value later, Vue automatically detects the change and updates the DOM accordingly. This is made possible with a dependency-tracking based reactivity system. When a component is rendered for the first time, Vuetracksevery ref that was used during the render. Later on, when a ref is mutated, it willtriggera re-render for components that are tracking it."
                },
                {
                    "type": "p",
                    "text": "In standard JavaScript, there is no way to detect the access or mutation of plain variables. However, we can intercept the get and set operations of an object's properties using getter and setter methods."
                },
                {
                    "type": "p",
                    "text": "The.valueproperty gives Vue the opportunity to detect when a ref has been accessed or mutated. Under the hood, Vue performs the tracking in its getter, and performs triggering in its setter. Conceptually, you can think of a ref as an object that looks like this:"
                },
                {
                    "type": "code",
                    "code": "// pseudo code, not actual implementationconstmyRef={_value:0,getvalue() {track()returnthis._value},setvalue(newValue) {this._value=newValuetrigger()}}"
                },
                {
                    "type": "p",
                    "text": "Another nice trait of refs is that unlike plain variables, you can pass refs into functions while retaining access to the latest value and the reactivity connection. This is particularly useful when refactoring complex logic into reusable code."
                },
                {
                    "type": "p",
                    "text": "The reactivity system is discussed in more details in theReactivity in Depthsection."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Declaring Methods​"
                },
                {
                    "type": "p",
                    "text": "To add methods to a component instance we use themethodsoption. This should be an object containing the desired methods:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{count:0}},methods: {increment() {this.count++}},mounted() {// methods can be called in lifecycle hooks, or other methods!this.increment()}}"
                },
                {
                    "type": "p",
                    "text": "Vue automatically binds thethisvalue formethodsso that it always refers to the component instance. This ensures that a method retains the correctthisvalue if it's used as an event listener or callback. You should avoid using arrow functions when definingmethods, as that prevents Vue from binding the appropriatethisvalue:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{methods: {increment: ()=>{// BAD: no `this` access here!}}}"
                },
                {
                    "type": "p",
                    "text": "Just like all other properties of the component instance, themethodsare accessible from within the component's template. Inside a template they are most commonly used as event listeners:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"increment\">{{ count }}</button>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "In the example above, the methodincrementwill be called when the<button>is clicked."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Deep Reactivity​"
                },
                {
                    "type": "p",
                    "text": "In Vue, state is deeply reactive by default. This means you can expect changes to be detected even when you mutate nested objects or arrays:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{obj: {nested: { count:0},arr: ['foo','bar']}}},methods: {mutateDeeply() {// these will work as expected.this.obj.nested.count++this.obj.arr.push('baz')}}}"
                },
                {
                    "type": "p",
                    "text": "Refs can hold any value type, including deeply nested objects, arrays, or JavaScript built-in data structures likeMap."
                },
                {
                    "type": "p",
                    "text": "A ref will make its value deeply reactive. This means you can expect changes to be detected even when you mutate nested objects or arrays:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'constobj=ref({nested: { count:0},arr: ['foo','bar']})functionmutateDeeply() {// these will work as expected.obj.value.nested.count++obj.value.arr.push('baz')}"
                },
                {
                    "type": "p",
                    "text": "Non-primitive values are turned into reactive proxies viareactive(), which is discussed below."
                },
                {
                    "type": "p",
                    "text": "It is also possible to opt-out of deep reactivity withshallow refs. For shallow refs, only.valueaccess is tracked for reactivity. Shallow refs can be used for optimizing performance by avoiding the observation cost of large objects, or in cases where the inner state is managed by an external library."
                },
                {
                    "type": "p",
                    "text": "Further reading:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reduce Reactivity Overhead for Large Immutable Structures",
                        "Integration with External State Systems"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "DOM Update Timing​"
                },
                {
                    "type": "p",
                    "text": "When you mutate reactive state, the DOM is updated automatically. However, it should be noted that the DOM updates are not applied synchronously. Instead, Vue buffers them until the \"next tick\" in the update cycle to ensure that each component updates only once no matter how many state changes you have made."
                },
                {
                    "type": "p",
                    "text": "To wait for the DOM update to complete after a state change, you can use thenextTick()global API:"
                },
                {
                    "type": "code",
                    "code": "import{ nextTick }from'vue'asyncfunctionincrement() {count.value++awaitnextTick()// Now the DOM is updated}"
                },
                {
                    "type": "code",
                    "code": "import{ nextTick }from'vue'exportdefault{methods: {asyncincrement() {this.count++awaitnextTick()// Now the DOM is updated}}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "reactive()​"
                },
                {
                    "type": "p",
                    "text": "There is another way to declare reactive state, with thereactive()API. Unlike a ref which wraps the inner value in a special object,reactive()makes an object itself reactive:"
                },
                {
                    "type": "code",
                    "code": "import{ reactive }from'vue'conststate=reactive({ count:0})"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Reactive"
                },
                {
                    "type": "p",
                    "text": "Usage in template:"
                },
                {
                    "type": "code",
                    "code": "<button@click=\"state.count++\">{{ state.count }}</button>"
                },
                {
                    "type": "p",
                    "text": "Reactive objects areJavaScript Proxiesand behave just like normal objects. The difference is that Vue is able to intercept the access and mutation of all properties of a reactive object for reactivity tracking and triggering."
                },
                {
                    "type": "p",
                    "text": "reactive()converts the object deeply: nested objects are also wrapped withreactive()when accessed. It is also called byref()internally when the ref value is an object. Similar to shallow refs, there is also theshallowReactive()API for opting-out of deep reactivity."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactive Proxy vs. Original​"
                },
                {
                    "type": "p",
                    "text": "It is important to note that the returned value fromreactive()is aProxyof the original object, which is not equal to the original object:"
                },
                {
                    "type": "code",
                    "code": "constraw={}constproxy=reactive(raw)// proxy is NOT equal to the original.console.log(proxy===raw)// false"
                },
                {
                    "type": "p",
                    "text": "Only the proxy is reactive - mutating the original object will not trigger updates. Therefore, the best practice when working with Vue's reactivity system is toexclusively use the proxied versions of your state."
                },
                {
                    "type": "p",
                    "text": "To ensure consistent access to the proxy, callingreactive()on the same object always returns the same proxy, and callingreactive()on an existing proxy also returns that same proxy:"
                },
                {
                    "type": "code",
                    "code": "// calling reactive() on the same object returns the same proxyconsole.log(reactive(raw)===proxy)// true// calling reactive() on a proxy returns itselfconsole.log(reactive(proxy)===proxy)// true"
                },
                {
                    "type": "p",
                    "text": "This rule applies to nested objects as well. Due to deep reactivity, nested objects inside a reactive object are also proxies:"
                },
                {
                    "type": "code",
                    "code": "constproxy=reactive({})constraw={}proxy.nested=rawconsole.log(proxy.nested===raw)// false"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Limitations ofreactive()​"
                },
                {
                    "type": "p",
                    "text": "Thereactive()API has a few limitations:"
                },
                {
                    "type": "list",
                    "items": [
                        "Limited value types:it only works for object types (objects, arrays, andcollection typessuch asMapandSet). It cannot holdprimitive typessuch asstring,numberorboolean.",
                        "Cannot replace entire object:since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily \"replace\" a reactive object because the reactivity connection to the first reference is lost:jsletstate=reactive({ count:0})// the above reference ({ count: 0 }) is no longer being tracked// (reactivity connection is lost!)state=reactive({ count:1})",
                        "Not destructure-friendly:when we destructure a reactive object's primitive type property into local variables, or when we pass that property into a function, we will lose the reactivity connection:jsconststate=reactive({ count:0})// count is disconnected from state.count when destructured.let{ count }=state// does not affect original statecount++// the function receives a plain number and// won't be able to track changes to state.count// we have to pass the entire object in to retain reactivitycallSomeFunction(state.count)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Limited value types:it only works for object types (objects, arrays, andcollection typessuch asMapandSet). It cannot holdprimitive typessuch asstring,numberorboolean."
                },
                {
                    "type": "p",
                    "text": "Cannot replace entire object:since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily \"replace\" a reactive object because the reactivity connection to the first reference is lost:"
                },
                {
                    "type": "code",
                    "code": "letstate=reactive({ count:0})// the above reference ({ count: 0 }) is no longer being tracked// (reactivity connection is lost!)state=reactive({ count:1})"
                },
                {
                    "type": "p",
                    "text": "Not destructure-friendly:when we destructure a reactive object's primitive type property into local variables, or when we pass that property into a function, we will lose the reactivity connection:"
                },
                {
                    "type": "code",
                    "code": "conststate=reactive({ count:0})// count is disconnected from state.count when destructured.let{ count }=state// does not affect original statecount++// the function receives a plain number and// won't be able to track changes to state.count// we have to pass the entire object in to retain reactivitycallSomeFunction(state.count)"
                },
                {
                    "type": "p",
                    "text": "Due to these limitations, we recommend usingref()as the primary API for declaring reactive state."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Additional Ref Unwrapping Details​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "As Reactive Object Property​"
                },
                {
                    "type": "p",
                    "text": "A ref is automatically unwrapped when accessed or mutated as a property of a reactive object. In other words, it behaves like a normal property :"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)conststate=reactive({count})console.log(state.count)// 0state.count=1console.log(count.value)// 1"
                },
                {
                    "type": "p",
                    "text": "If a new ref is assigned to a property linked to an existing ref, it will replace the old ref:"
                },
                {
                    "type": "code",
                    "code": "constotherCount=ref(2)state.count=otherCountconsole.log(state.count)// 2// original ref is now disconnected from state.countconsole.log(count.value)// 1"
                },
                {
                    "type": "p",
                    "text": "Ref unwrapping only happens when nested inside a deep reactive object. It does not apply when it is accessed as a property of ashallow reactive object."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caveat in Arrays and Collections​"
                },
                {
                    "type": "p",
                    "text": "Unlike reactive objects, there isnounwrapping performed when the ref is accessed as an element of a reactive array or a native collection type likeMap:"
                },
                {
                    "type": "code",
                    "code": "constbooks=reactive([ref('Vue 3 Guide')])// need .value hereconsole.log(books[0].value)constmap=reactive(newMap([['count',ref(0)]]))// need .value hereconsole.log(map.get('count').value)"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caveat when Unwrapping in Templates​"
                },
                {
                    "type": "p",
                    "text": "Ref unwrapping in templates only applies if the ref is a top-level property in the template render context."
                },
                {
                    "type": "p",
                    "text": "In the example below,countandobjectare top-level properties, butobject.idis not:"
                },
                {
                    "type": "code",
                    "code": "constcount=ref(0)constobject={ id:ref(1) }"
                },
                {
                    "type": "p",
                    "text": "Therefore, this expression works as expected:"
                },
                {
                    "type": "code",
                    "code": "{{ count+1}}"
                },
                {
                    "type": "p",
                    "text": "...while this one doesNOT:"
                },
                {
                    "type": "code",
                    "code": "{{ object.id+1}}"
                },
                {
                    "type": "p",
                    "text": "The rendered result will be[object Object]1becauseobject.idis not unwrapped when evaluating the expression and remains a ref object. To fix this, we can destructureidinto a top-level property:"
                },
                {
                    "type": "code",
                    "code": "const{id}=object"
                },
                {
                    "type": "code",
                    "code": "{{ id+1}}"
                },
                {
                    "type": "p",
                    "text": "Now the render result will be2."
                },
                {
                    "type": "p",
                    "text": "Another thing to note is that a ref does get unwrapped if it is the final evaluated value of a text interpolation (i.e. a{{ }}tag), so the following will render1:"
                },
                {
                    "type": "code",
                    "code": "{{ object.id }}"
                },
                {
                    "type": "p",
                    "text": "This is just a convenience feature of text interpolation and is equivalent to{{ object.id.value }}."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Stateful Methods​"
                },
                {
                    "type": "p",
                    "text": "In some cases, we may need to dynamically create a method function, for example creating a debounced event handler:"
                },
                {
                    "type": "code",
                    "code": "import{ debounce }from'lodash-es'exportdefault{methods: {// Debouncing with Lodashclick:debounce(function() {// ... respond to click ...},500)}}"
                },
                {
                    "type": "p",
                    "text": "However, this approach is problematic for components that are reused because a debounced function isstateful: it maintains some internal state on the elapsed time. If multiple component instances share the same debounced function, they will interfere with one another."
                },
                {
                    "type": "p",
                    "text": "To keep each component instance's debounced function independent of the others, we can create the debounced version in thecreatedlifecycle hook:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{created() {// each instance now has its own copy of debounced handlerthis.debouncedClick=_.debounce(this.click,500)},unmounted() {// also a good idea to cancel the timer// when the component is removedthis.debouncedClick.cancel()},methods: {click() {// ... respond to click ...}}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/template-refs",
            "title": "Template Refs | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Template Refs​"
                },
                {
                    "type": "p",
                    "text": "While Vue's declarative rendering model abstracts away most of the direct DOM operations for you, there may still be cases where we need direct access to the underlying DOM elements. To achieve this, we can use the specialrefattribute:"
                },
                {
                    "type": "code",
                    "code": "<inputref=\"input\">"
                },
                {
                    "type": "p",
                    "text": "refis a special attribute, similar to thekeyattribute discussed in thev-forchapter. It allows us to obtain a direct reference to a specific DOM element or child component instance after it's mounted. This may be useful when you want to, for example, programmatically focus an input on component mount, or initialize a 3rd party library on an element."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Accessing the Refs​"
                },
                {
                    "type": "p",
                    "text": "To obtain the reference with Composition API, we can use theuseTemplateRef()helper:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useTemplateRef, onMounted }from'vue'// the first argument must match the ref value in the templateconstinput=useTemplateRef('my-input')onMounted(()=>{input.value.focus()})</script><template><inputref=\"my-input\"/></template>"
                },
                {
                    "type": "p",
                    "text": "When using TypeScript, Vue's IDE support andvue-tscwill automatically infer the type ofinput.valuebased on what element or component the matchingrefattribute is used on."
                },
                {
                    "type": "p",
                    "text": "In versions before 3.5 whereuseTemplateRef()was not introduced, we need to declare a ref with a name that matches the template ref attribute's value:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'// declare a ref to hold the element reference// the name must match template ref valueconstinput=ref(null)onMounted(()=>{input.value.focus()})</script><template><inputref=\"input\"/></template>"
                },
                {
                    "type": "p",
                    "text": "If not using<script setup>, make sure to also return the ref fromsetup():"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup() {constinput=ref(null)// ...return{input}}}"
                },
                {
                    "type": "p",
                    "text": "The resulting ref is exposed onthis.$refs:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{mounted() {this.$refs.input.focus()}}</script><template><inputref=\"input\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Note that you can only access the refafter the component is mounted.If you try to access$refs.inputinputin a template expression, it will beundefinednullon the first render. This is because the element doesn't exist until after the first render!"
                },
                {
                    "type": "p",
                    "text": "If you are trying to watch the changes of a template ref, make sure to account for the case where the ref hasnullvalue:"
                },
                {
                    "type": "code",
                    "code": "watchEffect(()=>{if(input.value) {input.value.focus()}else{// not mounted yet, or the element was unmounted (e.g. by v-if)}})"
                },
                {
                    "type": "p",
                    "text": "See also:Typing Template Refs"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Refs insidev-for​"
                },
                {
                    "type": "p",
                    "text": "Requires v3.5 or above"
                },
                {
                    "type": "p",
                    "text": "Whenrefis used insidev-for, the corresponding ref should contain an Array value, which will be populated with the elements after mount:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, useTemplateRef, onMounted }from'vue'constlist=ref([/* ... */])constitemRefs=useTemplateRef('items')onMounted(()=>console.log(itemRefs.value))</script><template><ul><liv-for=\"item in list\"ref=\"items\">{{ item }}</li></ul></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "In versions before 3.5 whereuseTemplateRef()was not introduced, we need to declare a ref with a name that matches the template ref attribute's value. The ref should also contain an array value:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'constlist=ref([/* ... */])constitemRefs=ref([])onMounted(()=>console.log(itemRefs.value))</script><template><ul><liv-for=\"item in list\"ref=\"itemRefs\">{{ item }}</li></ul></template>"
                },
                {
                    "type": "p",
                    "text": "Whenrefis used insidev-for, the resulting ref value will be an array containing the corresponding elements:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{list: [/* ... */]}},mounted() {console.log(this.$refs.items)}}</script><template><ul><liv-for=\"item in list\"ref=\"items\">{{ item }}</li></ul></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "It should be noted that the ref array doesnotguarantee the same order as the source array."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Function Refs​"
                },
                {
                    "type": "p",
                    "text": "Instead of a string key, therefattribute can also be bound to a function, which will be called on each component update and gives you full flexibility on where to store the element reference. The function receives the element reference as the first argument:"
                },
                {
                    "type": "code",
                    "code": "<input:ref=\"(el)=>{/* assign el to a property or ref */}\">"
                },
                {
                    "type": "p",
                    "text": "Note we are using a dynamic:refbinding so we can pass it a function instead of a ref name string. When the element is unmounted, the argument will benull. You can, of course, use a method instead of an inline function."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Ref on Component​"
                },
                {
                    "type": "p",
                    "text": "This section assumes knowledge ofComponents. Feel free to skip it and come back later."
                },
                {
                    "type": "p",
                    "text": "refcan also be used on a child component. In this case the reference will be that of a component instance:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useTemplateRef, onMounted }from'vue'importChildfrom'./Child.vue'constchildRef=useTemplateRef('child')onMounted(()=>{// childRef.value will hold an instance of <Child />})</script><template><Childref=\"child\"/></template>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'importChildfrom'./Child.vue'constchild=ref(null)onMounted(()=>{// child.value will hold an instance of <Child />})</script><template><Childref=\"child\"/></template>"
                },
                {
                    "type": "code",
                    "code": "<script>importChildfrom'./Child.vue'exportdefault{components: {Child},mounted() {// this.$refs.child will hold an instance of <Child />}}</script><template><Childref=\"child\"/></template>"
                },
                {
                    "type": "p",
                    "text": "If the child component is using Options API or not using<script setup>, theThereferenced instance will be identical to the child component'sthis, which means the parent component will have full access to every property and method of the child component. This makes it easy to create tightly coupled implementation details between the parent and the child, so component refs should be only used when absolutely needed - in most cases, you should try to implement parent / child interactions using the standard props and emit interfaces first."
                },
                {
                    "type": "p",
                    "text": "An exception here is that components using<script setup>areprivate by default: a parent component referencing a child component using<script setup>won't be able to access anything unless the child component chooses to expose a public interface using thedefineExposemacro:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'consta=1constb=ref(2)// Compiler macros, such as defineExpose, don't need to be importeddefineExpose({a,b})</script>"
                },
                {
                    "type": "p",
                    "text": "When a parent gets an instance of this component via template refs, the retrieved instance will be of the shape{ a: number, b: number }(refs are automatically unwrapped just like on normal instances)."
                },
                {
                    "type": "p",
                    "text": "See also:Typing Component Template Refs"
                },
                {
                    "type": "p",
                    "text": "Theexposeoption can be used to limit the access to a child instance:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{expose: ['publicData','publicMethod'],data() {return{publicData:'foo',privateData:'bar'}},methods: {publicMethod() {/* ... */},privateMethod() {/* ... */}}}"
                },
                {
                    "type": "p",
                    "text": "In the above example, a parent referencing this component via template ref will only be able to accesspublicDataandpublicMethod."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/template-syntax",
            "title": "Template Syntax | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Template Syntax​"
                },
                {
                    "type": "p",
                    "text": "Vue uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying component instance's data. All Vue templates are syntactically valid HTML that can be parsed by spec-compliant browsers and HTML parsers."
                },
                {
                    "type": "p",
                    "text": "Under the hood, Vue compiles the templates into highly-optimized JavaScript code. Combined with the reactivity system, Vue can intelligently figure out the minimal number of components to re-render and apply the minimal amount of DOM manipulations when the app state changes."
                },
                {
                    "type": "p",
                    "text": "If you are familiar with Virtual DOM concepts and prefer the raw power of JavaScript, you can alsodirectly write render functionsinstead of templates, with optional JSX support. However, do note that they do not enjoy the same level of compile-time optimizations as templates."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Text Interpolation​"
                },
                {
                    "type": "p",
                    "text": "The most basic form of data binding is text interpolation using the \"Mustache\" syntax (double curly braces):"
                },
                {
                    "type": "code",
                    "code": "<span>Message: {{ msg }}</span>"
                },
                {
                    "type": "p",
                    "text": "The mustache tag will be replaced with the value of themsgpropertyfrom the corresponding component instance. It will also be updated whenever themsgproperty changes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Raw HTML​"
                },
                {
                    "type": "p",
                    "text": "The double mustaches interpret the data as plain text, not HTML. In order to output real HTML, you will need to use thev-htmldirective:"
                },
                {
                    "type": "code",
                    "code": "<p>Using text interpolation: {{ rawHtml }}</p><p>Using v-html directive: <spanv-html=\"rawHtml\"></span></p>"
                },
                {
                    "type": "p",
                    "text": "Using text interpolation: <span style=\"color: red\">This should be red.</span>"
                },
                {
                    "type": "p",
                    "text": "Using v-html directive:This should be red."
                },
                {
                    "type": "p",
                    "text": "Here we're encountering something new. Thev-htmlattribute you're seeing is called adirective. Directives are prefixed withv-to indicate that they are special attributes provided by Vue, and as you may have guessed, they apply special reactive behavior to the rendered DOM. Here, we're basically saying \"keep this element's inner HTML up-to-date with therawHtmlproperty on the current active instance.\""
                },
                {
                    "type": "p",
                    "text": "The contents of thespanwill be replaced with the value of therawHtmlproperty, interpreted as plain HTML - data bindings are ignored. Note that you cannot usev-htmlto compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition."
                },
                {
                    "type": "p",
                    "text": "Security Warning"
                },
                {
                    "type": "p",
                    "text": "Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead toXSS vulnerabilities. Only usev-htmlon trusted content andneveron user-provided content."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Attribute Bindings​"
                },
                {
                    "type": "p",
                    "text": "Mustaches cannot be used inside HTML attributes. Instead, use av-binddirective:"
                },
                {
                    "type": "code",
                    "code": "<divv-bind:id=\"dynamicId\"></div>"
                },
                {
                    "type": "p",
                    "text": "Thev-binddirective instructs Vue to keep the element'sidattribute in sync with the component'sdynamicIdproperty. If the bound value isnullorundefined, then the attribute will be removed from the rendered element."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Shorthand​"
                },
                {
                    "type": "p",
                    "text": "Becausev-bindis so commonly used, it has a dedicated shorthand syntax:"
                },
                {
                    "type": "code",
                    "code": "<div:id=\"dynamicId\"></div>"
                },
                {
                    "type": "p",
                    "text": "Attributes that start with:may look a bit different from normal HTML, but it is in fact a valid character for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is optional, but you will likely appreciate it when you learn more about its usage later."
                },
                {
                    "type": "p",
                    "text": "For the rest of the guide, we will be using the shorthand syntax in code examples, as that's the most common usage for Vue developers."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Same-name Shorthand​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.4+"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the attribute has the same name with the JavaScript value being bound, the syntax can be further shortened to omit the attribute value:"
                },
                {
                    "type": "code",
                    "code": "<!-- same as :id=\"id\" --><div:id></div><!-- this also works --><divv-bind:id></div>"
                },
                {
                    "type": "p",
                    "text": "This is similar to the property shorthand syntax when declaring objects in JavaScript. Note this is a feature that is only available in Vue 3.4 and above."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Boolean Attributes​"
                },
                {
                    "type": "p",
                    "text": "Boolean attributesare attributes that can indicate true / false values by their presence on an element. For example,disabledis one of the most commonly used boolean attributes."
                },
                {
                    "type": "p",
                    "text": "v-bindworks a bit differently in this case:"
                },
                {
                    "type": "code",
                    "code": "<button:disabled=\"isButtonDisabled\">Button</button>"
                },
                {
                    "type": "p",
                    "text": "Thedisabledattribute will be included ifisButtonDisabledhas atruthy value. It will also be included if the value is an empty string, maintaining consistency with<button disabled=\"\">. For otherfalsy valuesthe attribute will be omitted."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamically Binding Multiple Attributes​"
                },
                {
                    "type": "p",
                    "text": "If you have a JavaScript object representing multiple attributes that looks like this:"
                },
                {
                    "type": "code",
                    "code": "constobjectOfAttrs={id:'container',class:'wrapper',style:'background-color:green'}"
                },
                {
                    "type": "code",
                    "code": "data() {return{objectOfAttrs: {id:'container',class:'wrapper'}}}"
                },
                {
                    "type": "p",
                    "text": "You can bind them to a single element by usingv-bindwithout an argument:"
                },
                {
                    "type": "code",
                    "code": "<divv-bind=\"objectOfAttrs\"></div>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using JavaScript Expressions​"
                },
                {
                    "type": "p",
                    "text": "So far we've only been binding to simple property keys in our templates. But Vue actually supports the full power of JavaScript expressions inside all data bindings:"
                },
                {
                    "type": "code",
                    "code": "{{ number+1}}{{ ok?'YES':'NO'}}{{ message.split('').reverse().join('') }}<div:id=\"`list-${id}`\"></div>"
                },
                {
                    "type": "p",
                    "text": "These expressions will be evaluated as JavaScript in the data scope of the current component instance."
                },
                {
                    "type": "p",
                    "text": "In Vue templates, JavaScript expressions can be used in the following positions:"
                },
                {
                    "type": "list",
                    "items": [
                        "Inside text interpolations (mustaches)",
                        "In the attribute value of any Vue directives (special attributes that start withv-)"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Expressions Only​"
                },
                {
                    "type": "p",
                    "text": "Each binding can only containone single expression. An expression is a piece of code that can be evaluated to a value. A simple check is whether it can be used afterreturn."
                },
                {
                    "type": "p",
                    "text": "Therefore, the following willNOTwork:"
                },
                {
                    "type": "code",
                    "code": "<!-- this is a statement, not an expression: -->{{ var a=1}}<!-- flow control won't work either, use ternary expressions -->{{if(ok) { return message } }}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Calling Functions​"
                },
                {
                    "type": "p",
                    "text": "It is possible to call a component-exposed method inside a binding expression:"
                },
                {
                    "type": "code",
                    "code": "<time:title=\"toTitleDate(date)\":datetime=\"date\">{{formatDate(date) }}</time>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Functions called inside binding expressions will be called every time the component updates, so they shouldnothave any side effects, such as changing data or triggering asynchronous operations."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Restricted Globals Access​"
                },
                {
                    "type": "p",
                    "text": "Template expressions are sandboxed and only have access to arestricted list of globals. The list exposes commonly used built-in globals such asMathandDate."
                },
                {
                    "type": "p",
                    "text": "Globals not explicitly included in the list, for example user-attached properties onwindow, will not be accessible in template expressions. You can, however, explicitly define additional globals for all Vue expressions by adding them toapp.config.globalProperties."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Directives​"
                },
                {
                    "type": "p",
                    "text": "Directives are special attributes with thev-prefix. Vue provides a number ofbuilt-in directives, includingv-htmlandv-bindwhich we have introduced above."
                },
                {
                    "type": "p",
                    "text": "Directive attribute values are expected to be single JavaScript expressions (with the exception ofv-for,v-onandv-slot, which will be discussed in their respective sections later). A directive's job is to reactively apply updates to the DOM when the value of its expression changes. Takev-ifas an example:"
                },
                {
                    "type": "code",
                    "code": "<pv-if=\"seen\">Now you see me</p>"
                },
                {
                    "type": "p",
                    "text": "Here, thev-ifdirective would remove or insert the<p>element based on the truthiness of the value of the expressionseen."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Arguments​"
                },
                {
                    "type": "p",
                    "text": "Some directives can take an \"argument\", denoted by a colon after the directive name. For example, thev-binddirective is used to reactively update an HTML attribute:"
                },
                {
                    "type": "code",
                    "code": "<av-bind:href=\"url\"> ... </a><!-- shorthand --><a:href=\"url\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "Here,hrefis the argument, which tells thev-binddirective to bind the element'shrefattribute to the value of the expressionurl. In the shorthand, everything before the argument (i.e.,v-bind:) is condensed into a single character,:."
                },
                {
                    "type": "p",
                    "text": "Another example is thev-ondirective, which listens to DOM events:"
                },
                {
                    "type": "code",
                    "code": "<av-on:click=\"doSomething\"> ... </a><!-- shorthand --><a@click=\"doSomething\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "Here, the argument is the event name to listen to:click.v-onhas a corresponding shorthand, namely the@character. We will talk about event handling in more detail too."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Dynamic Arguments​"
                },
                {
                    "type": "p",
                    "text": "It is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:"
                },
                {
                    "type": "code",
                    "code": "<!--Note that there are some constraints to the argument expression,as explained in the \"Dynamic Argument Value Constraints\" and \"Dynamic Argument Syntax Constraints\" sections below.--><av-bind:[attributeName]=\"url\"> ... </a><!-- shorthand --><a:[attributeName]=\"url\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "Here,attributeNamewill be dynamically evaluated as a JavaScript expression, and its evaluated value will be used as the final value for the argument. For example, if your component instance has a data property,attributeName, whose value is\"href\", then this binding will be equivalent tov-bind:href."
                },
                {
                    "type": "p",
                    "text": "Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:"
                },
                {
                    "type": "code",
                    "code": "<av-on:[eventName]=\"doSomething\"> ... </a><!-- shorthand --><a@[eventName]=\"doSomething\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "In this example, wheneventName's value is\"focus\",v-on:[eventName]will be equivalent tov-on:focus."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dynamic Argument Value Constraints​"
                },
                {
                    "type": "p",
                    "text": "Dynamic arguments are expected to evaluate to a string, with the exception ofnull. The special valuenullcan be used to explicitly remove the binding. Any other non-string value will trigger a warning."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Dynamic Argument Syntax Constraints​"
                },
                {
                    "type": "p",
                    "text": "Dynamic argument expressions have some syntax constraints because certain characters, such as spaces and quotes, are invalid inside HTML attribute names. For example, the following is invalid:"
                },
                {
                    "type": "code",
                    "code": "<!-- This will trigger a compiler warning. --><a:['foo'+bar]=\"value\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "If you need to pass a complex dynamic argument, it's probably better to use acomputed property, which we will cover shortly."
                },
                {
                    "type": "p",
                    "text": "When using in-DOM templates (templates directly written in an HTML file), you should also avoid naming keys with uppercase characters, as browsers will coerce attribute names into lowercase:"
                },
                {
                    "type": "code",
                    "code": "<a:[someAttr]=\"value\"> ... </a>"
                },
                {
                    "type": "p",
                    "text": "The above will be converted to:[someattr]in in-DOM templates. If your component has asomeAttrproperty instead ofsomeattr, your code won't work. Templates inside Single-File Components arenotsubject to this constraint."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Modifiers​"
                },
                {
                    "type": "p",
                    "text": "Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way. For example, the.preventmodifier tells thev-ondirective to callevent.preventDefault()on the triggered event:"
                },
                {
                    "type": "code",
                    "code": "<form@submit.prevent=\"onSubmit\">...</form>"
                },
                {
                    "type": "p",
                    "text": "You'll see other examples of modifiers later,forv-onandforv-model, when we explore those features."
                },
                {
                    "type": "p",
                    "text": "And finally, here's the full directive syntax visualized:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/essentials/watchers",
            "title": "Watchers | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Watchers​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Example​"
                },
                {
                    "type": "p",
                    "text": "Computed properties allow us to declaratively compute derived values. However, there are cases where we need to perform \"side effects\" in reaction to state changes - for example, mutating the DOM, or changing another piece of state based on the result of an async operation."
                },
                {
                    "type": "p",
                    "text": "With the Options API, we can use thewatchoptionto trigger a function whenever a reactive property changes:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{question:'',answer:'Questions usually contain a question mark. ;-)',loading:false}},watch: {// whenever question changes, this function will runquestion(newQuestion,oldQuestion) {if(newQuestion.includes('?')) {this.getAnswer()}}},methods: {asyncgetAnswer() {this.loading=truethis.answer='Thinking...'try{constres=awaitfetch('https://yesno.wtf/api')this.answer=(awaitres.json()).answer}catch(error) {this.answer='Error! Could not reach the API. '+error}finally{this.loading=false}}}}"
                },
                {
                    "type": "code",
                    "code": "<p>Ask a yes/no question:<inputv-model=\"question\":disabled=\"loading\"/></p><p>{{ answer }}</p>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Thewatchoption also supports a dot-delimited path as the key:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{watch: {// Note: only simple paths. Expressions are not supported.'some.nested.key'(newValue) {// ...}}}"
                },
                {
                    "type": "p",
                    "text": "With Composition API, we can use thewatchfunctionto trigger a callback whenever a piece of reactive state changes:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, watch }from'vue'constquestion=ref('')constanswer=ref('Questions usually contain a question mark. ;-)')constloading=ref(false)// watch works directly on a refwatch(question,async(newQuestion,oldQuestion)=>{if(newQuestion.includes('?')) {loading.value=trueanswer.value='Thinking...'try{constres=awaitfetch('https://yesno.wtf/api')answer.value=(awaitres.json()).answer}catch(error) {answer.value='Error! Could not reach the API. '+error}finally{loading.value=false}}})</script><template><p>Ask a yes/no question:<inputv-model=\"question\":disabled=\"loading\"/></p><p>{{ answer }}</p></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Watch Source Types​"
                },
                {
                    "type": "p",
                    "text": "watch's first argument can be different types of reactive \"sources\": it can be a ref (including computed refs), a reactive object, agetter function, or an array of multiple sources:"
                },
                {
                    "type": "code",
                    "code": "constx=ref(0)consty=ref(0)// single refwatch(x, (newX)=>{console.log(`x is ${newX}`)})// getterwatch(()=>x.value+y.value,(sum)=>{console.log(`sum of x + y is: ${sum}`)})// array of multiple sourceswatch([x, ()=>y.value], ([newX,newY])=>{console.log(`x is ${newX} and y is ${newY}`)})"
                },
                {
                    "type": "p",
                    "text": "Do note that you can't watch a property of a reactive object like this:"
                },
                {
                    "type": "code",
                    "code": "constobj=reactive({ count:0})// this won't work because we are passing a number to watch()watch(obj.count, (count)=>{console.log(`Count is: ${count}`)})"
                },
                {
                    "type": "p",
                    "text": "Instead, use a getter:"
                },
                {
                    "type": "code",
                    "code": "// instead, use a getter:watch(()=>obj.count,(count)=>{console.log(`Count is: ${count}`)})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Deep Watchers​"
                },
                {
                    "type": "p",
                    "text": "watchis shallow by default: the callback will only trigger when the watched property has been assigned a new value - it won't trigger on nested property changes. If you want the callback to fire on all nested mutations, you need to use a deep watcher:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{watch: {someObject: {handler(newValue,oldValue) {// Note: `newValue` will be equal to `oldValue` here// on nested mutations as long as the object itself// hasn't been replaced.},deep:true}}}"
                },
                {
                    "type": "p",
                    "text": "When you callwatch()directly on a reactive object, it will implicitly create a deep watcher - the callback will be triggered on all nested mutations:"
                },
                {
                    "type": "code",
                    "code": "constobj=reactive({ count:0})watch(obj, (newValue,oldValue)=>{// fires on nested property mutations// Note: `newValue` will be equal to `oldValue` here// because they both point to the same object!})obj.count++"
                },
                {
                    "type": "p",
                    "text": "This should be differentiated with a getter that returns a reactive object - in the latter case, the callback will only fire if the getter returns a different object:"
                },
                {
                    "type": "code",
                    "code": "watch(()=>state.someObject,()=>{// fires only when state.someObject is replaced})"
                },
                {
                    "type": "p",
                    "text": "You can, however, force the second case into a deep watcher by explicitly using thedeepoption:"
                },
                {
                    "type": "code",
                    "code": "watch(()=>state.someObject,(newValue,oldValue)=>{// Note: `newValue` will be equal to `oldValue` here// *unless* state.someObject has been replaced},{ deep:true})"
                },
                {
                    "type": "p",
                    "text": "In Vue 3.5+, thedeepoption can also be a number indicating the max traversal depth - i.e. how many levels should Vue traverse an object's nested properties."
                },
                {
                    "type": "p",
                    "text": "Use with Caution"
                },
                {
                    "type": "p",
                    "text": "Deep watch requires traversing all nested properties in the watched object, and can be expensive when used on large data structures. Use it only when necessary and beware of the performance implications."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Eager Watchers​"
                },
                {
                    "type": "p",
                    "text": "watchis lazy by default: the callback won't be called until the watched source has changed. But in some cases we may want the same callback logic to be run eagerly - for example, we may want to fetch some initial data, and then re-fetch the data whenever relevant state changes."
                },
                {
                    "type": "p",
                    "text": "We can force a watcher's callback to be executed immediately by declaring it using an object with ahandlerfunction and theimmediate: trueoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// ...watch: {question: {handler(newQuestion) {// this will be run immediately on component creation.},// force eager callback executionimmediate:true}}// ...}"
                },
                {
                    "type": "p",
                    "text": "The initial execution of the handler function will happen just before thecreatedhook. Vue will have already processed thedata,computed, andmethodsoptions, so those properties will be available on the first invocation."
                },
                {
                    "type": "p",
                    "text": "We can force a watcher's callback to be executed immediately by passing theimmediate: trueoption:"
                },
                {
                    "type": "code",
                    "code": "watch(source,(newValue,oldValue)=>{// executed immediately, then again when `source` changes},{ immediate:true})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Once Watchers​"
                },
                {
                    "type": "list",
                    "items": [
                        "Only supported in 3.4+"
                    ]
                },
                {
                    "type": "p",
                    "text": "Watcher's callback will execute whenever the watched source changes. If you want the callback to trigger only once when the source changes, use theonce: trueoption."
                },
                {
                    "type": "code",
                    "code": "exportdefault{watch: {source: {handler(newValue,oldValue) {// when `source` changes, triggers only once},once:true}}}"
                },
                {
                    "type": "code",
                    "code": "watch(source,(newValue,oldValue)=>{// when `source` changes, triggers only once},{ once:true})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "watchEffect()​"
                },
                {
                    "type": "p",
                    "text": "It is common for the watcher callback to use exactly the same reactive state as the source. For example, consider the following code, which uses a watcher to load a remote resource whenever thetodoIdref changes:"
                },
                {
                    "type": "code",
                    "code": "consttodoId=ref(1)constdata=ref(null)watch(todoId,async()=>{constresponse=awaitfetch(`https://jsonplaceholder.typicode.com/todos/${todoId.value}`)data.value=awaitresponse.json()},{ immediate:true})"
                },
                {
                    "type": "p",
                    "text": "In particular, notice how the watcher usestodoIdtwice, once as the source and then again inside the callback."
                },
                {
                    "type": "p",
                    "text": "This can be simplified withwatchEffect().watchEffect()allows us to track the callback's reactive dependencies automatically. The watcher above can be rewritten as:"
                },
                {
                    "type": "code",
                    "code": "watchEffect(async()=>{constresponse=awaitfetch(`https://jsonplaceholder.typicode.com/todos/${todoId.value}`)data.value=awaitresponse.json()})"
                },
                {
                    "type": "p",
                    "text": "Here, the callback will run immediately, there's no need to specifyimmediate: true. During its execution, it will automatically tracktodoId.valueas a dependency (similar to computed properties). WhenevertodoId.valuechanges, the callback will be run again. WithwatchEffect(), we no longer need to passtodoIdexplicitly as the source value."
                },
                {
                    "type": "p",
                    "text": "You can check outthis exampleofwatchEffect()and reactive data-fetching in action."
                },
                {
                    "type": "p",
                    "text": "For examples like these, with only one dependency, the benefit ofwatchEffect()is relatively small. But for watchers that have multiple dependencies, usingwatchEffect()removes the burden of having to maintain the list of dependencies manually. In addition, if you need to watch several properties in a nested data structure,watchEffect()may prove more efficient than a deep watcher, as it will only track the properties that are used in the callback, rather than recursively tracking all of them."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "watchEffectonly tracks dependencies during itssynchronousexecution. When using it with an async callback, only properties accessed before the firstawaittick will be tracked."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "watchvs.watchEffect​"
                },
                {
                    "type": "p",
                    "text": "watchandwatchEffectboth allow us to reactively perform side effects. Their main difference is the way they track their reactive dependencies:"
                },
                {
                    "type": "list",
                    "items": [
                        "watchonly tracks the explicitly watched source. It won't track anything accessed inside the callback. In addition, the callback only triggers when the source has actually changed.watchseparates dependency tracking from the side effect, giving us more precise control over when the callback should fire.",
                        "watchEffect, on the other hand, combines dependency tracking and side effect into one phase. It automatically tracks every reactive property accessed during its synchronous execution. This is more convenient and typically results in terser code, but makes its reactive dependencies less explicit."
                    ]
                },
                {
                    "type": "p",
                    "text": "watchonly tracks the explicitly watched source. It won't track anything accessed inside the callback. In addition, the callback only triggers when the source has actually changed.watchseparates dependency tracking from the side effect, giving us more precise control over when the callback should fire."
                },
                {
                    "type": "p",
                    "text": "watchEffect, on the other hand, combines dependency tracking and side effect into one phase. It automatically tracks every reactive property accessed during its synchronous execution. This is more convenient and typically results in terser code, but makes its reactive dependencies less explicit."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Side Effect Cleanup​"
                },
                {
                    "type": "p",
                    "text": "Sometimes we may perform side effects, e.g. asynchronous requests, in a watcher:"
                },
                {
                    "type": "code",
                    "code": "watch(id, (newId)=>{fetch(`/api/${newId}`).then(()=>{// callback logic})})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{watch: {id(newId) {fetch(`/api/${newId}`).then(()=>{// callback logic})}}}"
                },
                {
                    "type": "p",
                    "text": "But what ifidchanges before the request completes? When the previous request completes, it will still fire the callback with an ID value that is already stale. Ideally, we want to be able to cancel the stale request whenidchanges to a new value."
                },
                {
                    "type": "p",
                    "text": "We can use theonWatcherCleanup()API to register a cleanup function that will be called when the watcher is invalidated and is about to re-run:"
                },
                {
                    "type": "code",
                    "code": "import{ watch, onWatcherCleanup }from'vue'watch(id, (newId)=>{constcontroller=newAbortController()fetch(`/api/${newId}`, { signal: controller.signal }).then(()=>{// callback logic})onWatcherCleanup(()=>{// abort stale requestcontroller.abort()})})"
                },
                {
                    "type": "code",
                    "code": "import{ onWatcherCleanup }from'vue'exportdefault{watch: {id(newId) {constcontroller=newAbortController()fetch(`/api/${newId}`, { signal: controller.signal }).then(()=>{// callback logic})onWatcherCleanup(()=>{// abort stale requestcontroller.abort()})}}}"
                },
                {
                    "type": "p",
                    "text": "Note thatonWatcherCleanupis only supported in Vue 3.5+ and must be called during the synchronous execution of awatchEffecteffect function orwatchcallback function: you cannot call it after anawaitstatement in an async function."
                },
                {
                    "type": "p",
                    "text": "Alternatively, anonCleanupfunction is also passed to watcher callbacks as the 3rd argument, and to thewatchEffecteffect function as the first argument:"
                },
                {
                    "type": "code",
                    "code": "watch(id, (newId,oldId,onCleanup)=>{// ...onCleanup(()=>{// cleanup logic})})watchEffect((onCleanup)=>{// ...onCleanup(()=>{// cleanup logic})})"
                },
                {
                    "type": "code",
                    "code": "exportdefault{watch: {id(newId,oldId,onCleanup) {// ...onCleanup(()=>{// cleanup logic})}}}"
                },
                {
                    "type": "p",
                    "text": "This works in versions before 3.5. In addition,onCleanuppassed via function argument is bound to the watcher instance so it is not subject to the synchronously constraint ofonWatcherCleanup."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Callback Flush Timing​"
                },
                {
                    "type": "p",
                    "text": "When you mutate reactive state, it may trigger both Vue component updates and watcher callbacks created by you."
                },
                {
                    "type": "p",
                    "text": "Similar to component updates, user-created watcher callbacks are batched to avoid duplicate invocations. For example, we probably don't want a watcher to fire a thousand times if we synchronously push a thousand items into an array being watched."
                },
                {
                    "type": "p",
                    "text": "By default, a watcher's callback is calledafterparent component updates (if any), andbeforethe owner component's DOM updates. This means if you attempt to access the owner component's own DOM inside a watcher callback, the DOM will be in a pre-update state."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Post Watchers​"
                },
                {
                    "type": "p",
                    "text": "If you want to access the owner component's DOM in a watcher callbackafterVue has updated it, you need to specify theflush: 'post'option:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// ...watch: {key: {handler() {},flush:'post'}}}"
                },
                {
                    "type": "code",
                    "code": "watch(source, callback, {flush:'post'})watchEffect(callback, {flush:'post'})"
                },
                {
                    "type": "p",
                    "text": "Post-flushwatchEffect()also has a convenience alias,watchPostEffect():"
                },
                {
                    "type": "code",
                    "code": "import{ watchPostEffect }from'vue'watchPostEffect(()=>{/* executed after Vue updates */})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Sync Watchers​"
                },
                {
                    "type": "p",
                    "text": "It's also possible to create a watcher that fires synchronously, before any Vue-managed updates:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{// ...watch: {key: {handler() {},flush:'sync'}}}"
                },
                {
                    "type": "code",
                    "code": "watch(source, callback, {flush:'sync'})watchEffect(callback, {flush:'sync'})"
                },
                {
                    "type": "p",
                    "text": "SyncwatchEffect()also has a convenience alias,watchSyncEffect():"
                },
                {
                    "type": "code",
                    "code": "import{ watchSyncEffect }from'vue'watchSyncEffect(()=>{/* executed synchronously upon reactive data change */})"
                },
                {
                    "type": "p",
                    "text": "Use with Caution"
                },
                {
                    "type": "p",
                    "text": "Sync watchers do not have batching and triggers every time a reactive mutation is detected. It's ok to use them to watch simple boolean values, but avoid using them on data sources that might be synchronously mutated many times, e.g. arrays."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "this.$watch()​"
                },
                {
                    "type": "p",
                    "text": "It's also possible to imperatively create watchers using the$watch()instance method:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{created() {this.$watch('question', (newQuestion)=>{// ...})}}"
                },
                {
                    "type": "p",
                    "text": "This is useful when you need to conditionally set up a watcher, or only watch something in response to user interaction. It also allows you to stop the watcher early."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Stopping a Watcher​"
                },
                {
                    "type": "p",
                    "text": "Watchers declared using thewatchoption or the$watch()instance method are automatically stopped when the owner component is unmounted, so in most cases you don't need to worry about stopping the watcher yourself."
                },
                {
                    "type": "p",
                    "text": "In the rare case where you need to stop a watcher before the owner component unmounts, the$watch()API returns a function for that:"
                },
                {
                    "type": "code",
                    "code": "constunwatch=this.$watch('foo', callback)// ...when the watcher is no longer needed:unwatch()"
                },
                {
                    "type": "p",
                    "text": "Watchers declared synchronously insidesetup()or<script setup>are bound to the owner component instance, and will be automatically stopped when the owner component is unmounted. In most cases, you don't need to worry about stopping the watcher yourself."
                },
                {
                    "type": "p",
                    "text": "The key here is that the watcher must be createdsynchronously: if the watcher is created in an async callback, it won't be bound to the owner component and must be stopped manually to avoid memory leaks. Here's an example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ watchEffect }from'vue'// this one will be automatically stoppedwatchEffect(()=>{})// ...this one will not!setTimeout(()=>{watchEffect(()=>{})},100)</script>"
                },
                {
                    "type": "p",
                    "text": "To manually stop a watcher, use the returned handle function. This works for bothwatchandwatchEffect:"
                },
                {
                    "type": "code",
                    "code": "constunwatch=watchEffect(()=>{})// ...later, when no longer neededunwatch()"
                },
                {
                    "type": "p",
                    "text": "Note that there should be very few cases where you need to create watchers asynchronously, and synchronous creation should be preferred whenever possible. If you need to wait for some async data, you can make your watch logic conditional instead:"
                },
                {
                    "type": "code",
                    "code": "// data to be loaded asynchronouslyconstdata=ref(null)watchEffect(()=>{if(data.value) {// do something when data is loaded}})"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/animation",
            "title": "Animation Techniques | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Animation Techniques​"
                },
                {
                    "type": "p",
                    "text": "Vue provides the<Transition>and<TransitionGroup>components for handling enter / leave and list transitions. However, there are many other ways of using animations on the web, even in a Vue application. Here we will discuss a few additional techniques."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Class-based Animations​"
                },
                {
                    "type": "p",
                    "text": "For elements that are not entering / leaving the DOM, we can trigger animations by dynamically adding a CSS class:"
                },
                {
                    "type": "code",
                    "code": "constdisabled=ref(false)functionwarnDisabled() {disabled.value=truesetTimeout(()=>{disabled.value=false},1500)}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{disabled:false}},methods: {warnDisabled() {this.disabled=truesetTimeout(()=>{this.disabled=false},1500)}}}"
                },
                {
                    "type": "code",
                    "code": "<div:class=\"{ shake: disabled }\"><button@click=\"warnDisabled\">Click me</button><spanv-if=\"disabled\">This feature is disabled!</span></div>"
                },
                {
                    "type": "code",
                    "code": ".shake{animation: shake0.82scubic-bezier(0.36,0.07,0.19,0.97)both;transform:translate3d(0,0,0);}@keyframesshake{10%,90%{transform:translate3d(-1px,0,0);}20%,80%{transform:translate3d(2px,0,0);}30%,50%,70%{transform:translate3d(-4px,0,0);}40%,60%{transform:translate3d(4px,0,0);}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "State-driven Animations​"
                },
                {
                    "type": "p",
                    "text": "Some transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:"
                },
                {
                    "type": "code",
                    "code": "constx=ref(0)functiononMousemove(e) {x.value=e.clientX}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{data() {return{x:0}},methods: {onMousemove(e) {this.x=e.clientX}}}"
                },
                {
                    "type": "code",
                    "code": "<div@mousemove=\"onMousemove\":style=\"{ backgroundColor:`hsl(${x}, 80%, 50%)`}\"class=\"movearea\"><p>Move your mouse across this div...</p><p>x: {{ x }}</p></div>"
                },
                {
                    "type": "code",
                    "code": ".movearea{transition:0.3sbackground-colorease;}"
                },
                {
                    "type": "p",
                    "text": "Move your mouse across this div..."
                },
                {
                    "type": "p",
                    "text": "x: 0"
                },
                {
                    "type": "p",
                    "text": "In addition to color, you can also use style bindings to animate transform, width, or height. You can even animate SVG paths using spring physics - after all, they are all attribute data bindings:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Animating with Watchers​"
                },
                {
                    "type": "p",
                    "text": "With some creativity, we can use watchers to animate anything based on some numerical state. For example, we can animate the number itself:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, reactive, watch }from'vue'importgsapfrom'gsap'constnumber=ref(0)consttweened=reactive({number:0})watch(number, (n)=>{gsap.to(tweened, { duration:0.5, number:Number(n)||0})})"
                },
                {
                    "type": "code",
                    "code": "Type a number: <inputv-model.number=\"number\"/><p>{{ tweened.number.toFixed(0) }}</p>"
                },
                {
                    "type": "code",
                    "code": "importgsapfrom'gsap'exportdefault{data() {return{number:0,tweened:0}},watch: {number(n) {gsap.to(this, { duration:0.5, tweened:Number(n)||0})}}}"
                },
                {
                    "type": "code",
                    "code": "Type a number: <inputv-model.number=\"number\"/><p>{{ tweened.toFixed(0) }}</p>"
                },
                {
                    "type": "p",
                    "text": "0"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/composition-api-faq",
            "title": "Composition API FAQ | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composition API FAQ​"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "This FAQ assumes prior experience with Vue - in particular, experience with Vue 2 while primarily using Options API."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Composition API?​"
                },
                {
                    "type": "p",
                    "text": "Composition API is a set of APIs that allows us to author Vue components using imported functions instead of declaring options. It is an umbrella term that covers the following APIs:"
                },
                {
                    "type": "list",
                    "items": [
                        "Reactivity API, e.g.ref()andreactive(), that allows us to directly create reactive state, computed state, and watchers.",
                        "Lifecycle Hooks, e.g.onMounted()andonUnmounted(), that allow us to programmatically hook into the component lifecycle.",
                        "Dependency Injection, i.e.provide()andinject(), that allow us to leverage Vue's dependency injection system while using Reactivity APIs."
                    ]
                },
                {
                    "type": "p",
                    "text": "Reactivity API, e.g.ref()andreactive(), that allows us to directly create reactive state, computed state, and watchers."
                },
                {
                    "type": "p",
                    "text": "Lifecycle Hooks, e.g.onMounted()andonUnmounted(), that allow us to programmatically hook into the component lifecycle."
                },
                {
                    "type": "p",
                    "text": "Dependency Injection, i.e.provide()andinject(), that allow us to leverage Vue's dependency injection system while using Reactivity APIs."
                },
                {
                    "type": "p",
                    "text": "Composition API is a built-in feature of Vue 3 andVue 2.7. For older Vue 2 versions, use the officially maintained@vue/composition-apiplugin. In Vue 3, it is also primarily used together with the<script setup>syntax in Single-File Components. Here's a basic example of a component using Composition API:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'// reactive stateconstcount=ref(0)// functions that mutate state and trigger updatesfunctionincrement() {count.value++}// lifecycle hooksonMounted(()=>{console.log(`The initial count is ${count.value}.`)})</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Despite an API style based on function composition,Composition API is NOT functional programming. Composition API is based on Vue's mutable, fine-grained reactivity paradigm, whereas functional programming emphasizes immutability."
                },
                {
                    "type": "p",
                    "text": "If you are interested in learning how to use Vue with Composition API, you can set the site-wide API preference to Composition API using the toggle at the top of the left sidebar, and then go through the guide from the beginning."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why Composition API?​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Better Logic Reuse​"
                },
                {
                    "type": "p",
                    "text": "The primary advantage of Composition API is that it enables clean, efficient logic reuse in the form ofComposable functions. It solvesall the drawbacks of mixins, the primary logic reuse mechanism for Options API."
                },
                {
                    "type": "p",
                    "text": "Composition API's logic reuse capability has given rise to impressive community projects such asVueUse, an ever-growing collection of composable utilities. It also serves as a clean mechanism for easily integrating stateful third-party services or libraries into Vue's reactivity system, for exampleimmutable data,state machines, andRxJS."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "More Flexible Code Organization​"
                },
                {
                    "type": "p",
                    "text": "Many users love that we write organized code by default with Options API: everything has its place based on the option it falls under. However, Options API poses serious limitations when a single component's logic grows beyond a certain complexity threshold. This limitation is particularly prominent in components that need to deal with multiplelogical concerns, which we have witnessed first hand in many production Vue 2 apps."
                },
                {
                    "type": "p",
                    "text": "Take the folder explorer component from Vue CLI's GUI as an example: this component is responsible for the following logical concerns:"
                },
                {
                    "type": "list",
                    "items": [
                        "Tracking current folder state and displaying its content",
                        "Handling folder navigation (opening, closing, refreshing...)",
                        "Handling new folder creation",
                        "Toggling show favorite folders only",
                        "Toggling show hidden folders",
                        "Handling current working directory changes"
                    ]
                },
                {
                    "type": "p",
                    "text": "Theoriginal versionof the component was written in Options API. If we give each line of code a color based on the logical concern it is dealing with, this is how it looks:"
                },
                {
                    "type": "p",
                    "text": "Notice how code dealing with the same logical concern is forced to be split under different options, located in different parts of the file. In a component that is several hundred lines long, understanding and navigating a single logical concern requires constantly scrolling up and down the file, making it much more difficult than it should be. In addition, if we ever intend to extract a logical concern into a reusable utility, it takes quite a bit of work to find and extract the right pieces of code from different parts of the file."
                },
                {
                    "type": "p",
                    "text": "Here's the same component, before and after therefactor into Composition API:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "Notice how the code related to the same logical concern can now be grouped together: we no longer need to jump between different options blocks while working on a specific logical concern. Moreover, we can now move a group of code into an external file with minimal effort, since we no longer need to shuffle the code around in order to extract them. This reduced friction for refactoring is key to the long-term maintainability in large codebases."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Better Type Inference​"
                },
                {
                    "type": "p",
                    "text": "In recent years, more and more frontend developers are adoptingTypeScriptas it helps us write more robust code, make changes with more confidence, and provides a great development experience with IDE support. However, the Options API, originally conceived in 2013, was designed without type inference in mind. We had to implement someabsurdly complex type gymnasticsto make type inference work with the Options API. Even with all this effort, type inference for Options API can still break down for mixins and dependency injection."
                },
                {
                    "type": "p",
                    "text": "This had led many developers who wanted to use Vue with TS to lean towards Class API powered byvue-class-component. However, a class-based API heavily relies on ES decorators, a language feature that was only a stage 2 proposal when Vue 3 was being developed in 2019. We felt it was too risky to base an official API on an unstable proposal. Since then, the decorators proposal has gone through yet another complete overhaul, and finally reached stage 3 in 2022. In addition, class-based API suffers from logic reuse and organization limitations similar to Options API."
                },
                {
                    "type": "p",
                    "text": "In comparison, Composition API utilizes mostly plain variables and functions, which are naturally type friendly. Code written in Composition API can enjoy full type inference with little need for manual type hints. Most of the time, Composition API code will look largely identical in TypeScript and plain JavaScript. This also makes it possible for plain JavaScript users to benefit from partial type inference."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Smaller Production Bundle and Less Overhead​"
                },
                {
                    "type": "p",
                    "text": "Code written in Composition API and<script setup>is also more efficient and minification-friendly than Options API equivalent. This is because the template in a<script setup>component is compiled as a function inlined in the same scope of the<script setup>code. Unlike property access fromthis, the compiled template code can directly access variables declared inside<script setup>, without an instance proxy in between. This also leads to better minification because all the variable names can be safely shortened."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Relationship with Options API​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Trade-offs​"
                },
                {
                    "type": "p",
                    "text": "Some users moving from Options API found their Composition API code less organized, and concluded that Composition API is \"worse\" in terms of code organization. We recommend users with such opinions to look at that problem from a different perspective."
                },
                {
                    "type": "p",
                    "text": "It is true that Composition API no longer provides the \"guard rails\" that guide you to put your code into respective buckets. In return, you get to author component code like how you would write normal JavaScript. This meansyou can and should apply any code organization best practices to your Composition API code as you would when writing normal JavaScript. If you can write well-organized JavaScript, you should also be able to write well-organized Composition API code."
                },
                {
                    "type": "p",
                    "text": "Options API does allow you to \"think less\" when writing component code, which is why many users love it. However, in reducing the mental overhead, it also locks you into the prescribed code organization pattern with no escape hatch, which can make it difficult to refactor or improve code quality in larger scale projects. In this regard, Composition API provides better long term scalability."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Does Composition API cover all use cases?​"
                },
                {
                    "type": "p",
                    "text": "Yes in terms of stateful logic. When using Composition API, there are only a few options that may still be needed:props,emits,name, andinheritAttrs."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Since 3.3 you can directly usedefineOptionsin<script setup>to set the component name orinheritAttrsproperty"
                },
                {
                    "type": "p",
                    "text": "If you intend to exclusively use Composition API (along with the options listed above), you can shave a few kbs off your production bundle via acompile-time flagthat drops Options API related code from Vue. Note this also affects Vue components in your dependencies."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Can I use both APIs in the same component?​"
                },
                {
                    "type": "p",
                    "text": "Yes. You can use Composition API via thesetup()option in an Options API component."
                },
                {
                    "type": "p",
                    "text": "However, we only recommend doing so if you have an existing Options API codebase that needs to integrate with new features / external libraries written with Composition API."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Will Options API be deprecated?​"
                },
                {
                    "type": "p",
                    "text": "No, we do not have any plan to do so. Options API is an integral part of Vue and the reason many developers love it. We also realize that many of the benefits of Composition API only manifest in larger-scale projects, and Options API remains a solid choice for many low-to-medium-complexity scenarios."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Relationship with Class API​"
                },
                {
                    "type": "p",
                    "text": "We no longer recommend using Class API with Vue 3, given that Composition API provides great TypeScript integration with additional logic reuse and code organization benefits."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Comparison with React Hooks​"
                },
                {
                    "type": "p",
                    "text": "Composition API provides the same level of logic composition capabilities as React Hooks, but with some important differences."
                },
                {
                    "type": "p",
                    "text": "React Hooks are invoked repeatedly every time a component updates. This creates a number of caveats that can confuse even seasoned React developers. It also leads to performance optimization issues that can severely affect development experience. Here are some examples:"
                },
                {
                    "type": "list",
                    "items": [
                        "Hooks are call-order sensitive and cannot be conditional.",
                        "Variables declared in a React component can be captured by a hook closure and become \"stale\" if the developer fails to pass in the correct dependencies array. This leads to React developers relying on ESLint rules to ensure correct dependencies are passed. However, the rule is often not smart enough and over-compensates for correctness, which leads to unnecessary invalidation and headaches when edge cases are encountered.",
                        "Expensive computations require the use ofuseMemo, which again requires manually passing in the correct dependencies array.",
                        "Event handlers passed to child components cause unnecessary child updates by default, and require explicituseCallbackas an optimization. This is almost always needed, and again requires a correct dependencies array. Neglecting this leads to over-rendering apps by default and can cause performance issues without realizing it.",
                        "The stale closure problem, combined with Concurrent features, makes it difficult to reason about when a piece of hooks code is run, and makes working with mutable state that should persist across renders (viauseRef) cumbersome."
                    ]
                },
                {
                    "type": "p",
                    "text": "Hooks are call-order sensitive and cannot be conditional."
                },
                {
                    "type": "p",
                    "text": "Variables declared in a React component can be captured by a hook closure and become \"stale\" if the developer fails to pass in the correct dependencies array. This leads to React developers relying on ESLint rules to ensure correct dependencies are passed. However, the rule is often not smart enough and over-compensates for correctness, which leads to unnecessary invalidation and headaches when edge cases are encountered."
                },
                {
                    "type": "p",
                    "text": "Expensive computations require the use ofuseMemo, which again requires manually passing in the correct dependencies array."
                },
                {
                    "type": "p",
                    "text": "Event handlers passed to child components cause unnecessary child updates by default, and require explicituseCallbackas an optimization. This is almost always needed, and again requires a correct dependencies array. Neglecting this leads to over-rendering apps by default and can cause performance issues without realizing it."
                },
                {
                    "type": "p",
                    "text": "The stale closure problem, combined with Concurrent features, makes it difficult to reason about when a piece of hooks code is run, and makes working with mutable state that should persist across renders (viauseRef) cumbersome."
                },
                {
                    "type": "p",
                    "text": "Note: some of the above issues that are related to memoization can be resolved by the upcomingReact Compiler."
                },
                {
                    "type": "p",
                    "text": "In comparison, Vue Composition API:"
                },
                {
                    "type": "list",
                    "items": [
                        "Invokessetup()or<script setup>code only once. This makes the code align better with the intuitions of idiomatic JavaScript usage as there are no stale closures to worry about. Composition API calls are also not sensitive to call order and can be conditional.",
                        "Vue's runtime reactivity system automatically collects reactive dependencies used in computed properties and watchers, so there's no need to manually declare dependencies.",
                        "No need to manually cache callback functions to avoid unnecessary child updates. In general, Vue's fine-grained reactivity system ensures child components only update when they need to. Manual child-update optimizations are rarely a concern for Vue developers."
                    ]
                },
                {
                    "type": "p",
                    "text": "Invokessetup()or<script setup>code only once. This makes the code align better with the intuitions of idiomatic JavaScript usage as there are no stale closures to worry about. Composition API calls are also not sensitive to call order and can be conditional."
                },
                {
                    "type": "p",
                    "text": "Vue's runtime reactivity system automatically collects reactive dependencies used in computed properties and watchers, so there's no need to manually declare dependencies."
                },
                {
                    "type": "p",
                    "text": "No need to manually cache callback functions to avoid unnecessary child updates. In general, Vue's fine-grained reactivity system ensures child components only update when they need to. Manual child-update optimizations are rarely a concern for Vue developers."
                },
                {
                    "type": "p",
                    "text": "We acknowledge the creativity of React Hooks, and it is a major source of inspiration for Composition API. However, the issues mentioned above do exist in its design and we noticed Vue's reactivity model happens to provide a way around them."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/reactivity-in-depth",
            "title": "Reactivity in Depth | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity in Depth​"
                },
                {
                    "type": "p",
                    "text": "One of Vue’s most distinctive features is the unobtrusive reactivity system. Component state consists of reactive JavaScript objects. When you modify them, the view updates. It makes state management simple and intuitive, but it’s also important to understand how it works to avoid some common gotchas. In this section, we are going to dig into some of the lower-level details of Vue’s reactivity system."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Reactivity?​"
                },
                {
                    "type": "p",
                    "text": "This term comes up in programming quite a bit these days, but what do people mean when they say it? Reactivity is a programming paradigm that allows us to adjust to changes in a declarative manner. The canonical example that people usually show, because it’s a great one, is an Excel spreadsheet:"
                },
                {
                    "type": "p",
                    "text": "Here cell A2 is defined via a formula of= A0 + A1(you can click on A2 to view or edit the formula), so the spreadsheet gives us 3. No surprises there. But if you update A0 or A1, you'll notice that A2 automagically updates too."
                },
                {
                    "type": "p",
                    "text": "JavaScript doesn’t usually work like this. If we were to write something comparable in JavaScript:"
                },
                {
                    "type": "code",
                    "code": "letA0=1letA1=2letA2=A0+A1console.log(A2)// 3A0=2console.log(A2)// Still 3"
                },
                {
                    "type": "p",
                    "text": "When we mutateA0,A2does not change automatically."
                },
                {
                    "type": "p",
                    "text": "So how would we do this in JavaScript? First, in order to re-run the code that updatesA2, let's wrap it in a function:"
                },
                {
                    "type": "code",
                    "code": "letA2functionupdate() {A2=A0+A1}"
                },
                {
                    "type": "p",
                    "text": "Then, we need to define a few terms:"
                },
                {
                    "type": "list",
                    "items": [
                        "Theupdate()function produces aside effect, oreffectfor short, because it modifies the state of the program.",
                        "A0andA1are considereddependenciesof the effect, as their values are used to perform the effect. The effect is said to be asubscriberto its dependencies."
                    ]
                },
                {
                    "type": "p",
                    "text": "Theupdate()function produces aside effect, oreffectfor short, because it modifies the state of the program."
                },
                {
                    "type": "p",
                    "text": "A0andA1are considereddependenciesof the effect, as their values are used to perform the effect. The effect is said to be asubscriberto its dependencies."
                },
                {
                    "type": "p",
                    "text": "What we need is a magic function that can invokeupdate()(theeffect) wheneverA0orA1(thedependencies) change:"
                },
                {
                    "type": "code",
                    "code": "whenDepsChange(update)"
                },
                {
                    "type": "p",
                    "text": "ThiswhenDepsChange()function has the following tasks:"
                },
                {
                    "type": "list",
                    "items": [
                        "Track when a variable is read. E.g. when evaluating the expressionA0 + A1, bothA0andA1are read.",
                        "If a variable is read when there is a currently running effect, make that effect a subscriber to that variable. E.g. becauseA0andA1are read whenupdate()is being executed,update()becomes a subscriber to bothA0andA1after the first call.",
                        "Detect when a variable is mutated. E.g. whenA0is assigned a new value, notify all its subscriber effects to re-run."
                    ]
                },
                {
                    "type": "p",
                    "text": "Track when a variable is read. E.g. when evaluating the expressionA0 + A1, bothA0andA1are read."
                },
                {
                    "type": "p",
                    "text": "If a variable is read when there is a currently running effect, make that effect a subscriber to that variable. E.g. becauseA0andA1are read whenupdate()is being executed,update()becomes a subscriber to bothA0andA1after the first call."
                },
                {
                    "type": "p",
                    "text": "Detect when a variable is mutated. E.g. whenA0is assigned a new value, notify all its subscriber effects to re-run."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How Reactivity Works in Vue​"
                },
                {
                    "type": "p",
                    "text": "We can't really track the reading and writing of local variables like in the example. There's just no mechanism for doing that in vanilla JavaScript. What wecando though, is intercept the reading and writing ofobject properties."
                },
                {
                    "type": "p",
                    "text": "There are two ways of intercepting property access in JavaScript:getter/settersandProxies. Vue 2 used getter / setters exclusively due to browser support limitations. In Vue 3, Proxies are used for reactive objects and getter / setters are used for refs. Here's some pseudo-code that illustrates how they work:"
                },
                {
                    "type": "code",
                    "code": "functionreactive(obj) {returnnewProxy(obj, {get(target,key) {track(target, key)returntarget[key]},set(target,key,value) {target[key]=valuetrigger(target, key)}})}functionref(value) {constrefObject={getvalue() {track(refObject,'value')returnvalue},setvalue(newValue) {value=newValuetrigger(refObject,'value')}}returnrefObject}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Code snippets here and below are meant to explain the core concepts in the simplest form possible, so many details are omitted, and edge cases ignored."
                },
                {
                    "type": "p",
                    "text": "This explains a fewlimitations of reactive objectsthat we have discussed in the fundamentals section:"
                },
                {
                    "type": "list",
                    "items": [
                        "When you assign or destructure a reactive object's property to a local variable, accessing or assigning to that variable is non-reactive because it no longer triggers the get / set proxy traps on the source object. Note this \"disconnect\" only affects the variable binding - if the variable points to a non-primitive value such as an object, mutating the object would still be reactive.",
                        "The returned proxy fromreactive(), although behaving just like the original, has a different identity if we compare it to the original using the===operator."
                    ]
                },
                {
                    "type": "p",
                    "text": "When you assign or destructure a reactive object's property to a local variable, accessing or assigning to that variable is non-reactive because it no longer triggers the get / set proxy traps on the source object. Note this \"disconnect\" only affects the variable binding - if the variable points to a non-primitive value such as an object, mutating the object would still be reactive."
                },
                {
                    "type": "p",
                    "text": "The returned proxy fromreactive(), although behaving just like the original, has a different identity if we compare it to the original using the===operator."
                },
                {
                    "type": "p",
                    "text": "Insidetrack(), we check whether there is a currently running effect. If there is one, we lookup the subscriber effects (stored in a Set) for the property being tracked, and add the effect to the Set:"
                },
                {
                    "type": "code",
                    "code": "// This will be set right before an effect is about// to be run. We'll deal with this later.letactiveEffectfunctiontrack(target,key) {if(activeEffect) {consteffects=getSubscribersForProperty(target, key)effects.add(activeEffect)}}"
                },
                {
                    "type": "p",
                    "text": "Effect subscriptions are stored in a globalWeakMap<target, Map<key, Set<effect>>>data structure. If no subscribing effects Set was found for a property (tracked for the first time), it will be created. This is what thegetSubscribersForProperty()function does, in short. For simplicity, we will skip its details."
                },
                {
                    "type": "p",
                    "text": "Insidetrigger(), we again lookup the subscriber effects for the property. But this time we invoke them instead:"
                },
                {
                    "type": "code",
                    "code": "functiontrigger(target,key) {consteffects=getSubscribersForProperty(target, key)effects.forEach((effect)=>effect())}"
                },
                {
                    "type": "p",
                    "text": "Now let's circle back to thewhenDepsChange()function:"
                },
                {
                    "type": "code",
                    "code": "functionwhenDepsChange(update) {consteffect=()=>{activeEffect=effectupdate()activeEffect=null}effect()}"
                },
                {
                    "type": "p",
                    "text": "It wraps the rawupdatefunction in an effect that sets itself as the current active effect before running the actual update. This enablestrack()calls during the update to locate the current active effect."
                },
                {
                    "type": "p",
                    "text": "At this point, we have created an effect that automatically tracks its dependencies, and re-runs whenever a dependency changes. We call this aReactive Effect."
                },
                {
                    "type": "p",
                    "text": "Vue provides an API that allows you to create reactive effects:watchEffect(). In fact, you may have noticed that it works pretty similarly to the magicalwhenDepsChange()in the example. We can now rework the original example using actual Vue APIs:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, watchEffect }from'vue'constA0=ref(0)constA1=ref(1)constA2=ref()watchEffect(()=>{// tracks A0 and A1A2.value=A0.value+A1.value})// triggers the effectA0.value=2"
                },
                {
                    "type": "p",
                    "text": "Using a reactive effect to mutate a ref isn't the most interesting use case - in fact, using a computed property makes it more declarative:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, computed }from'vue'constA0=ref(0)constA1=ref(1)constA2=computed(()=>A0.value+A1.value)A0.value=2"
                },
                {
                    "type": "p",
                    "text": "Internally,computedmanages its invalidation and re-computation using a reactive effect."
                },
                {
                    "type": "p",
                    "text": "So what's an example of a common and useful reactive effect? Well, updating the DOM! We can implement simple \"reactive rendering\" like this:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, watchEffect }from'vue'constcount=ref(0)watchEffect(()=>{document.body.innerHTML=`Count is: ${count.value}`})// updates the DOMcount.value++"
                },
                {
                    "type": "p",
                    "text": "In fact, this is pretty close to how a Vue component keeps the state and the DOM in sync - each component instance creates a reactive effect to render and update the DOM. Of course, Vue components use much more efficient ways to update the DOM thaninnerHTML. This is discussed inRendering Mechanism."
                },
                {
                    "type": "p",
                    "text": "Theref(),computed()andwatchEffect()APIs are all part of the Composition API. If you have only been using Options API with Vue so far, you'll notice that Composition API is closer to how Vue's reactivity system works under the hood. In fact, in Vue 3 the Options API is implemented on top of the Composition API. All property access on the component instance (this) triggers getter / setters for reactivity tracking, and options likewatchandcomputedinvoke their Composition API equivalents internally."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Runtime vs. Compile-time Reactivity​"
                },
                {
                    "type": "p",
                    "text": "Vue's reactivity system is primarily runtime-based: the tracking and triggering are all performed while the code is running directly in the browser. The pros of runtime reactivity are that it can work without a build step, and there are fewer edge cases. On the other hand, this makes it constrained by the syntax limitations of JavaScript, leading to the need of value containers like Vue refs."
                },
                {
                    "type": "p",
                    "text": "Some frameworks, such asSvelte, choose to overcome such limitations by implementing reactivity during compilation. It analyzes and transforms the code in order to simulate reactivity. The compilation step allows the framework to alter the semantics of JavaScript itself - for example, implicitly injecting code that performs dependency analysis and effect triggering around access to locally defined variables. The downside is that such transforms require a build step, and altering JavaScript semantics is essentially creating a language that looks like JavaScript but compiles into something else."
                },
                {
                    "type": "p",
                    "text": "The Vue team did explore this direction via an experimental feature calledReactivity Transform, but in the end we have decided that it would not be a good fit for the project due tothe reasoning here."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reactivity Debugging​"
                },
                {
                    "type": "p",
                    "text": "It's great that Vue's reactivity system automatically tracks dependencies, but in some cases we may want to figure out exactly what is being tracked, or what is causing a component to re-render."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Component Debugging Hooks​"
                },
                {
                    "type": "p",
                    "text": "We can debug what dependencies are used during a component's render and which dependency is triggering an update using therenderTrackedonRenderTrackedandrenderTriggeredonRenderTriggeredlifecycle hooks. Both hooks will receive a debugger event which contains information on the dependency in question. It is recommended to place adebuggerstatement in the callbacks to interactively inspect the dependency:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ onRenderTracked, onRenderTriggered }from'vue'onRenderTracked((event)=>{debugger})onRenderTriggered((event)=>{debugger})</script>"
                },
                {
                    "type": "code",
                    "code": "exportdefault{renderTracked(event) {debugger},renderTriggered(event) {debugger}}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Component debug hooks only work in development mode."
                },
                {
                    "type": "p",
                    "text": "The debug event objects have the following type:"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "code",
                    "code": "typeDebuggerEvent={effect:ReactiveEffecttarget:objecttype:|TrackOpTypes/* 'get' | 'has' | 'iterate' */|TriggerOpTypes/* 'set' | 'add' | 'delete' | 'clear' */key:anynewValue?:anyoldValue?:anyoldTarget?:Map<any,any>|Set<any>}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Computed Debugging​"
                },
                {
                    "type": "p",
                    "text": "We can debug computed properties by passingcomputed()a second options object withonTrackandonTriggercallbacks:"
                },
                {
                    "type": "list",
                    "items": [
                        "onTrackwill be called when a reactive property or ref is tracked as a dependency.",
                        "onTriggerwill be called when the watcher callback is triggered by the mutation of a dependency."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both callbacks will receive debugger events in thesame formatas component debug hooks:"
                },
                {
                    "type": "code",
                    "code": "constplusOne=computed(()=>count.value+1, {onTrack(e) {// triggered when count.value is tracked as a dependencydebugger},onTrigger(e) {// triggered when count.value is mutateddebugger}})// access plusOne, should trigger onTrackconsole.log(plusOne.value)// mutate count.value, should trigger onTriggercount.value++"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "onTrackandonTriggercomputed options only work in development mode."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Watcher Debugging​"
                },
                {
                    "type": "p",
                    "text": "Similar tocomputed(), watchers also support theonTrackandonTriggeroptions:"
                },
                {
                    "type": "code",
                    "code": "watch(source, callback, {onTrack(e) {debugger},onTrigger(e) {debugger}})watchEffect(callback, {onTrack(e) {debugger},onTrigger(e) {debugger}})"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "onTrackandonTriggerwatcher options only work in development mode."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Integration with External State Systems​"
                },
                {
                    "type": "p",
                    "text": "Vue's reactivity system works by deeply converting plain JavaScript objects into reactive proxies. The deep conversion can be unnecessary or sometimes unwanted when integrating with external state management systems (e.g. if an external solution also uses Proxies)."
                },
                {
                    "type": "p",
                    "text": "The general idea of integrating Vue's reactivity system with an external state management solution is to hold the external state in ashallowRef. A shallow ref is only reactive when its.valueproperty is accessed - the inner value is left intact. When the external state changes, replace the ref value to trigger updates."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Immutable Data​"
                },
                {
                    "type": "p",
                    "text": "If you are implementing an undo / redo feature, you likely want to take a snapshot of the application's state on every user edit. However, Vue's mutable reactivity system isn't best suited for this if the state tree is large, because serializing the entire state object on every update can be expensive in terms of both CPU and memory costs."
                },
                {
                    "type": "p",
                    "text": "Immutable data structuressolve this by never mutating the state objects - instead, it creates new objects that share the same, unchanged parts with old ones. There are different ways of using immutable data in JavaScript, but we recommend usingImmerwith Vue because it allows you to use immutable data while keeping the more ergonomic, mutable syntax."
                },
                {
                    "type": "p",
                    "text": "We can integrate Immer with Vue via a simple composable:"
                },
                {
                    "type": "code",
                    "code": "import{ produce }from'immer'import{ shallowRef }from'vue'exportfunctionuseImmer(baseState) {conststate=shallowRef(baseState)constupdate=(updater)=>{state.value=produce(state.value, updater)}return[state, update]}"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "State Machines​"
                },
                {
                    "type": "p",
                    "text": "State Machineis a model for describing all the possible states an application can be in, and all the possible ways it can transition from one state to another. While it may be overkill for simple components, it can help make complex state flows more robust and manageable."
                },
                {
                    "type": "p",
                    "text": "One of the most popular state machine implementations in JavaScript isXState. Here's a composable that integrates with it:"
                },
                {
                    "type": "code",
                    "code": "import{ createMachine, interpret }from'xstate'import{ shallowRef }from'vue'exportfunctionuseMachine(options) {constmachine=createMachine(options)conststate=shallowRef(machine.initialState)constservice=interpret(machine).onTransition((newState)=>(state.value=newState)).start()constsend=(event)=>service.send(event)return[state, send]}"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "RxJS​"
                },
                {
                    "type": "p",
                    "text": "RxJSis a library for working with asynchronous event streams. TheVueUselibrary provides the@vueuse/rxjsadd-on for connecting RxJS streams with Vue's reactivity system."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Connection to Signals​"
                },
                {
                    "type": "p",
                    "text": "Quite a few other frameworks have introduced reactivity primitives similar to refs from Vue's Composition API, under the term \"signals\":"
                },
                {
                    "type": "list",
                    "items": [
                        "Solid Signals",
                        "Angular Signals",
                        "Preact Signals",
                        "Qwik Signals"
                    ]
                },
                {
                    "type": "p",
                    "text": "Fundamentally, signals are the same kind of reactivity primitive as Vue refs. It's a value container that provides dependency tracking on access, and side-effect triggering on mutation. This reactivity-primitive-based paradigm isn't a particularly new concept in the frontend world: it dates back to implementations likeKnockout observablesandMeteor Trackerfrom more than a decade ago. Vue Options API and the React state management libraryMobXare also based on the same principles, but hide the primitives behind object properties."
                },
                {
                    "type": "p",
                    "text": "Although not a necessary trait for something to qualify as signals, today the concept is often discussed alongside the rendering model where updates are performed through fine-grained subscriptions. Due to the use of Virtual DOM, Vue currentlyrelies on compilers to achieve similar optimizations. However, we are also exploring a new Solid-inspired compilation strategy, calledVapor Mode, that does not rely on Virtual DOM and takes more advantage of Vue's built-in reactivity system."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "API Design Trade-Offs​"
                },
                {
                    "type": "p",
                    "text": "The design of Preact and Qwik's signals are very similar to Vue'sshallowRef: all three provide a mutable interface via the.valueproperty. We will focus the discussion on Solid and Angular signals."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Solid Signals​"
                },
                {
                    "type": "p",
                    "text": "Solid'screateSignal()API design emphasizes read / write segregation. Signals are exposed as a read-only getter and a separate setter:"
                },
                {
                    "type": "code",
                    "code": "const[count,setCount]=createSignal(0)count()// access the valuesetCount(1)// update the value"
                },
                {
                    "type": "p",
                    "text": "Notice how thecountsignal can be passed down without the setter. This ensures that the state can never be mutated unless the setter is also explicitly exposed. Whether this safety guarantee justifies the more verbose syntax could be subject to the requirement of the project and personal taste - but in case you prefer this API style, you can easily replicate it in Vue:"
                },
                {
                    "type": "code",
                    "code": "import{ shallowRef, triggerRef }from'vue'exportfunctioncreateSignal(value,options) {constr=shallowRef(value)constget=()=>r.valueconstset=(v)=>{r.value=typeofv==='function'?v(r.value):vif(options?.equals===false)triggerRef(r)}return[get, set]}"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Angular Signals​"
                },
                {
                    "type": "p",
                    "text": "Angular is undergoing some fundamental changes by foregoing dirty-checking and introducing its own implementation of a reactivity primitive. The Angular Signal API looks like this:"
                },
                {
                    "type": "code",
                    "code": "constcount=signal(0)count()// access the valuecount.set(1)// set new valuecount.update((v)=>v+1)// update based on previous value"
                },
                {
                    "type": "p",
                    "text": "Again, we can easily replicate the API in Vue:"
                },
                {
                    "type": "code",
                    "code": "import{ shallowRef }from'vue'exportfunctionsignal(initialValue) {constr=shallowRef(initialValue)consts=()=>r.values.set=(value)=>{r.value=value}s.update=(updater)=>{r.value=updater(r.value)}returns}"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Compared to Vue refs, Solid and Angular's getter-based API style provide some interesting trade-offs when used in Vue components:"
                },
                {
                    "type": "list",
                    "items": [
                        "()is slightly less verbose than.value, but updating the value is more verbose.",
                        "There is no ref-unwrapping: accessing values always require(). This makes value access consistent everywhere. This also means you can pass raw signals down as component props."
                    ]
                },
                {
                    "type": "p",
                    "text": "Whether these API styles suit you is to some extent subjective. Our goal here is to demonstrate the underlying similarity and trade-offs between these different API designs. We also want to show that Vue is flexible: you are not really locked into the existing APIs. Should it be necessary, you can create your own reactivity primitive API to suit more specific needs."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/reactivity-transform",
            "title": "Reactivity Transform | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Reactivity Transform​"
                },
                {
                    "type": "p",
                    "text": "Removed Experimental Feature"
                },
                {
                    "type": "p",
                    "text": "Reactivity Transform was an experimental feature, and has been removed in the latest 3.4 release. Please read aboutthe reasoning here."
                },
                {
                    "type": "p",
                    "text": "If you still intend to use it, it is now available via theVue Macrosplugin."
                },
                {
                    "type": "p",
                    "text": "Composition-API-specific"
                },
                {
                    "type": "p",
                    "text": "Reactivity Transform is a Composition-API-specific feature and requires a build step."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Refs vs. Reactive Variables​"
                },
                {
                    "type": "p",
                    "text": "Ever since the introduction of the Composition API, one of the primary unresolved questions is the use of refs vs. reactive objects. It's easy to lose reactivity when destructuring reactive objects, while it can be cumbersome to use.valueeverywhere when using refs. Also,.valueis easy to miss if not using a type system."
                },
                {
                    "type": "p",
                    "text": "Vue Reactivity Transformis a compile-time transform that allows us to write code like this:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>letcount=$ref(0)console.log(count)functionincrement() {count++}</script><template><button@click=\"increment\">{{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "The$ref()method here is acompile-time macro: it is not an actual method that will be called at runtime. Instead, the Vue compiler uses it as a hint to treat the resultingcountvariable as areactive variable."
                },
                {
                    "type": "p",
                    "text": "Reactive variables can be accessed and re-assigned just like normal variables, but these operations are compiled into refs with.value. For example, the<script>part of the above component is compiled into:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'letcount=ref(0)console.log(count.value)functionincrement() {count.value++}"
                },
                {
                    "type": "p",
                    "text": "Every reactivity API that returns refs will have a$-prefixed macro equivalent. These APIs include:"
                },
                {
                    "type": "list",
                    "items": [
                        "ref->$ref",
                        "computed->$computed",
                        "shallowRef->$shallowRef",
                        "customRef->$customRef",
                        "toRef->$toRef"
                    ]
                },
                {
                    "type": "p",
                    "text": "These macros are globally available and do not need to be imported when Reactivity Transform is enabled, but you can optionally import them fromvue/macrosif you want to be more explicit:"
                },
                {
                    "type": "code",
                    "code": "import{ $ref }from'vue/macros'letcount=$ref(0)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Destructuring with$()​"
                },
                {
                    "type": "p",
                    "text": "It is common for a composition function to return an object of refs, and use destructuring to retrieve these refs. For this purpose, reactivity transform provides the$()macro:"
                },
                {
                    "type": "code",
                    "code": "import{ useMouse }from'@vueuse/core'const{x,y}=$(useMouse())console.log(x, y)"
                },
                {
                    "type": "p",
                    "text": "Compiled output:"
                },
                {
                    "type": "code",
                    "code": "import{ toRef }from'vue'import{ useMouse }from'@vueuse/core'const__temp=useMouse(),x=toRef(__temp,'x'),y=toRef(__temp,'y')console.log(x.value, y.value)"
                },
                {
                    "type": "p",
                    "text": "Note that ifxis already a ref,toRef(__temp, 'x')will simply return it as-is and no additional ref will be created. If a destructured value is not a ref (e.g. a function), it will still work - the value will be wrapped in a ref so the rest of the code works as expected."
                },
                {
                    "type": "p",
                    "text": "$()destructure works on both reactive objectsandplain objects containing refs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Convert Existing Refs to Reactive Variables with$()​"
                },
                {
                    "type": "p",
                    "text": "In some cases we may have wrapped functions that also return refs. However, the Vue compiler won't be able to know ahead of time that a function is going to return a ref. In such cases, the$()macro can also be used to convert any existing refs into reactive variables:"
                },
                {
                    "type": "code",
                    "code": "functionmyCreateRef() {returnref(0)}letcount=$(myCreateRef())"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Reactive Props Destructure​"
                },
                {
                    "type": "p",
                    "text": "There are two pain points with the currentdefineProps()usage in<script setup>:"
                },
                {
                    "type": "list",
                    "items": [
                        "Similar to.value, you need to always access props asprops.xin order to retain reactivity. This means you cannot destructuredefinePropsbecause the resulting destructured variables are not reactive and will not update.",
                        "When using thetype-only props declaration, there is no easy way to declare default values for the props. We introduced thewithDefaults()API for this exact purpose, but it's still clunky to use."
                    ]
                },
                {
                    "type": "p",
                    "text": "Similar to.value, you need to always access props asprops.xin order to retain reactivity. This means you cannot destructuredefinePropsbecause the resulting destructured variables are not reactive and will not update."
                },
                {
                    "type": "p",
                    "text": "When using thetype-only props declaration, there is no easy way to declare default values for the props. We introduced thewithDefaults()API for this exact purpose, but it's still clunky to use."
                },
                {
                    "type": "p",
                    "text": "We can address these issues by applying a compile-time transform whendefinePropsis used with destructuring, similar to what we saw earlier with$():"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">interfaceProps{msg:stringcount?:numberfoo?:string}const{msg,// default value just workscount=1,// local aliasing also just works// here we are aliasing `props.foo` to `bar`foo:bar}=defineProps<Props>()watchEffect(()=>{// will log whenever the props changeconsole.log(msg, count, bar)})</script>"
                },
                {
                    "type": "p",
                    "text": "The above will be compiled into the following runtime declaration equivalent:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: {msg: { type: String, required:true},count: { type: Number, default:1},foo: String},setup(props) {watchEffect(()=>{console.log(props.msg, props.count, props.foo)})}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Retaining Reactivity Across Function Boundaries​"
                },
                {
                    "type": "p",
                    "text": "While reactive variables relieve us from having to use.valueeverywhere, it creates an issue of \"reactivity loss\" when we pass reactive variables across function boundaries. This can happen in two cases:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing into function as argument​"
                },
                {
                    "type": "p",
                    "text": "Given a function that expects a ref as an argument, e.g.:"
                },
                {
                    "type": "code",
                    "code": "functiontrackChange(x:Ref<number>) {watch(x, (x)=>{console.log('x changed!')})}letcount=$ref(0)trackChange(count)// doesn't work!"
                },
                {
                    "type": "p",
                    "text": "The above case will not work as expected because it compiles to:"
                },
                {
                    "type": "code",
                    "code": "letcount=ref(0)trackChange(count.value)"
                },
                {
                    "type": "p",
                    "text": "Herecount.valueis passed as a number, whereastrackChangeexpects an actual ref. This can be fixed by wrappingcountwith$$()before passing it:"
                },
                {
                    "type": "code",
                    "code": "let count = $ref(0)- trackChange(count)+ trackChange($$(count))"
                },
                {
                    "type": "p",
                    "text": "The above compiles to:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'letcount=ref(0)trackChange(count)"
                },
                {
                    "type": "p",
                    "text": "As we can see,$$()is a macro that serves as anescape hint: reactive variables inside$$()will not get.valueappended."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Returning inside function scope​"
                },
                {
                    "type": "p",
                    "text": "Reactivity can also be lost if reactive variables are used directly in a returned expression:"
                },
                {
                    "type": "code",
                    "code": "functionuseMouse() {letx=$ref(0)lety=$ref(0)// listen to mousemove...// doesn't work!return{x,y}}"
                },
                {
                    "type": "p",
                    "text": "The above return statement compiles to:"
                },
                {
                    "type": "code",
                    "code": "return{x: x.value,y: y.value}"
                },
                {
                    "type": "p",
                    "text": "In order to retain reactivity, we should be returning the actual refs, not the current value at return time."
                },
                {
                    "type": "p",
                    "text": "Again, we can use$$()to fix this. In this case,$$()can be used directly on the returned object - any reference to reactive variables inside the$$()call will retain the reference to their underlying refs:"
                },
                {
                    "type": "code",
                    "code": "functionuseMouse() {letx=$ref(0)lety=$ref(0)// listen to mousemove...// fixedreturn$$({x,y})}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using$$()on destructured props​"
                },
                {
                    "type": "p",
                    "text": "$$()works on destructured props since they are reactive variables as well. The compiler will convert it withtoReffor efficiency:"
                },
                {
                    "type": "code",
                    "code": "const{count}=defineProps<{count:number}>()passAsRef($$(count))"
                },
                {
                    "type": "p",
                    "text": "compiles to:"
                },
                {
                    "type": "code",
                    "code": "setup(props) {const__props_count=toRef(props,'count')passAsRef(__props_count)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TypeScript Integration​"
                },
                {
                    "type": "p",
                    "text": "Vue provides typings for these macros (available globally) and all types will work as expected. There are no incompatibilities with standard TypeScript semantics, so the syntax will work with all existing tooling."
                },
                {
                    "type": "p",
                    "text": "This also means the macros can work in any files where valid JS / TS are allowed - not just inside Vue SFCs."
                },
                {
                    "type": "p",
                    "text": "Since the macros are available globally, their types need to be explicitly referenced (e.g. in aenv.d.tsfile):"
                },
                {
                    "type": "code",
                    "code": "/// <referencetypes=\"vue/macros-global\"/>"
                },
                {
                    "type": "p",
                    "text": "When explicitly importing the macros fromvue/macros, the type will work without declaring the globals."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Explicit Opt-in​"
                },
                {
                    "type": "p",
                    "text": "No longer supported in core"
                },
                {
                    "type": "p",
                    "text": "The following only applies up to Vue version 3.3 and below. Support has been removed in Vue core 3.4 and above, and@vitejs/plugin-vue5.0 and above. If you intend to continue using the transform, please migrate toVue Macrosinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vite​"
                },
                {
                    "type": "list",
                    "items": [
                        "Requires@vitejs/plugin-vue@>=2.0.0",
                        "Applies to SFCs and js(x)/ts(x) files. A fast usage check is performed on files before applying the transform so there should be no performance cost for files not using the macros.",
                        "NotereactivityTransformis now a plugin root-level option instead of nested asscript.refSugar, since it affects not just SFCs."
                    ]
                },
                {
                    "type": "code",
                    "code": "// vite.config.jsexportdefault{plugins: [vue({reactivityTransform:true})]}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vue-cli​"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently only affects SFCs",
                        "Requiresvue-loader@>=17.0.0"
                    ]
                },
                {
                    "type": "code",
                    "code": "// vue.config.jsmodule.exports={chainWebpack: (config)=>{config.module.rule('vue').use('vue-loader').tap((options)=>{return{...options,reactivityTransform:true}})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Plainwebpack+vue-loader​"
                },
                {
                    "type": "list",
                    "items": [
                        "Currently only affects SFCs",
                        "Requiresvue-loader@>=17.0.0"
                    ]
                },
                {
                    "type": "code",
                    "code": "// webpack.config.jsmodule.exports={module: {rules: [{test:/\\.vue$/,loader:'vue-loader',options: {reactivityTransform:true}}]}}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/render-function",
            "title": "Render Functions & JSX | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Render Functions & JSX​"
                },
                {
                    "type": "p",
                    "text": "Vue recommends using templates to build applications in the vast majority of cases. However, there are situations where we need the full programmatic power of JavaScript. That's where we can use therender function."
                },
                {
                    "type": "p",
                    "text": "If you are new to the concept of virtual DOM and render functions, make sure to read theRendering Mechanismchapter first."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Usage​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Creating Vnodes​"
                },
                {
                    "type": "p",
                    "text": "Vue provides anh()function for creating vnodes:"
                },
                {
                    "type": "code",
                    "code": "import{ h }from'vue'constvnode=h('div',// type{ id:'foo', class:'bar'},// props[/* children */])"
                },
                {
                    "type": "p",
                    "text": "h()is short forhyperscript- which means \"JavaScript that produces HTML (hypertext markup language)\". This name is inherited from conventions shared by many virtual DOM implementations. A more descriptive name could becreateVNode(), but a shorter name helps when you have to call this function many times in a render function."
                },
                {
                    "type": "p",
                    "text": "Theh()function is designed to be very flexible:"
                },
                {
                    "type": "code",
                    "code": "// all arguments except the type are optionalh('div')h('div', { id:'foo'})// both attributes and properties can be used in props// Vue automatically picks the right way to assign ith('div', { class:'bar', innerHTML:'hello'})// props modifiers such as `.prop` and `.attr` can be added// with `.` and `^` prefixes respectivelyh('div', {'.name':'some-name','^width':'100'})// class and style have the same object / array// value support that they have in templatesh('div', { class: [foo, { bar }], style: { color:'red'} })// event listeners should be passed as onXxxh('div', {onClick: ()=>{} })// children can be a stringh('div', { id:'foo'},'hello')// props can be omitted when there are no propsh('div','hello')h('div', [h('span','hello')])// children array can contain mixed vnodes and stringsh('div', ['hello',h('span','hello')])"
                },
                {
                    "type": "p",
                    "text": "The resulting vnode has the following shape:"
                },
                {
                    "type": "code",
                    "code": "constvnode=h('div', { id:'foo'}, [])vnode.type// 'div'vnode.props// { id: 'foo' }vnode.children// []vnode.key// null"
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "The fullVNodeinterface contains many other internal properties, but it is strongly recommended to avoid relying on any properties other than the ones listed here. This avoids unintended breakage in case the internal properties are changed."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Declaring Render Functions​"
                },
                {
                    "type": "p",
                    "text": "When using templates with Composition API, the return value of thesetup()hook is used to expose data to the template. When using render functions, however, we can directly return the render function instead:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, h }from'vue'exportdefault{props: {/* ... */},setup(props) {constcount=ref(1)// return the render functionreturn()=>h('div', props.msg+count.value)}}"
                },
                {
                    "type": "p",
                    "text": "The render function is declared insidesetup()so it naturally has access to the props and any reactive state declared in the same scope."
                },
                {
                    "type": "p",
                    "text": "In addition to returning a single vnode, you can also return strings or arrays:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup() {return()=>'hello world!'}}"
                },
                {
                    "type": "code",
                    "code": "import{ h }from'vue'exportdefault{setup() {// use an array to return multiple root nodesreturn()=>[h('div'),h('div'),h('div')]}}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Make sure to return a function instead of directly returning values! Thesetup()function is called only once per component, while the returned render function will be called multiple times."
                },
                {
                    "type": "p",
                    "text": "We can declare render functions using therenderoption:"
                },
                {
                    "type": "code",
                    "code": "import{ h }from'vue'exportdefault{data() {return{msg:'hello'}},render() {returnh('div',this.msg)}}"
                },
                {
                    "type": "p",
                    "text": "Therender()function has access to the component instance viathis."
                },
                {
                    "type": "p",
                    "text": "In addition to returning a single vnode, you can also return strings or arrays:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{render() {return'hello world!'}}"
                },
                {
                    "type": "code",
                    "code": "import{ h }from'vue'exportdefault{render() {// use an array to return multiple root nodesreturn[h('div'),h('div'),h('div')]}}"
                },
                {
                    "type": "p",
                    "text": "If a render function component doesn't need any instance state, they can also be declared directly as a function for brevity:"
                },
                {
                    "type": "code",
                    "code": "functionHello() {return'hello world!'}"
                },
                {
                    "type": "p",
                    "text": "That's right, this is a valid Vue component! SeeFunctional Componentsfor more details on this syntax."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vnodes Must Be Unique​"
                },
                {
                    "type": "p",
                    "text": "All vnodes in the component tree must be unique. That means the following render function is invalid:"
                },
                {
                    "type": "code",
                    "code": "functionrender() {constp=h('p','hi')returnh('div', [// Yikes - duplicate vnodes!p,p])}"
                },
                {
                    "type": "p",
                    "text": "If you really want to duplicate the same element/component many times, you can do so with a factory function. For example, the following render function is a perfectly valid way of rendering 20 identical paragraphs:"
                },
                {
                    "type": "code",
                    "code": "functionrender() {returnh('div',Array.from({ length:20}).map(()=>{returnh('p','hi')}))}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "JSX / TSX​"
                },
                {
                    "type": "p",
                    "text": "JSXis an XML-like extension to JavaScript that allows us to write code like this:"
                },
                {
                    "type": "code",
                    "code": "constvnode=<div>hello</div>"
                },
                {
                    "type": "p",
                    "text": "Inside JSX expressions, use curly braces to embed dynamic values:"
                },
                {
                    "type": "code",
                    "code": "constvnode=<divid={dynamicId}>hello, {userName}</div>"
                },
                {
                    "type": "p",
                    "text": "create-vueand Vue CLI both have options for scaffolding projects with pre-configured JSX support. If you are configuring JSX manually, please refer to the documentation of@vue/babel-plugin-jsxfor details."
                },
                {
                    "type": "p",
                    "text": "Although first introduced by React, JSX actually has no defined runtime semantics and can be compiled into various different outputs. If you have worked with JSX before, do note thatVue JSX transform is different from React's JSX transform, so you can't use React's JSX transform in Vue applications. Some notable differences from React JSX include:"
                },
                {
                    "type": "list",
                    "items": [
                        "You can use HTML attributes such asclassandforas props - no need to useclassNameorhtmlFor.",
                        "Passing children to components (i.e. slots)works differently."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue's type definition also provides type inference for TSX usage. When using TSX, make sure to specify\"jsx\": \"preserve\"intsconfig.jsonso that TypeScript leaves the JSX syntax intact for Vue JSX transform to process."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "JSX Type Inference​"
                },
                {
                    "type": "p",
                    "text": "Similar to the transform, Vue's JSX also needs different type definitions."
                },
                {
                    "type": "p",
                    "text": "Starting in Vue 3.4, Vue no longer implicitly registers the globalJSXnamespace. To instruct TypeScript to use Vue's JSX type definitions, make sure to include the following in yourtsconfig.json:"
                },
                {
                    "type": "code",
                    "code": "{\"compilerOptions\": {\"jsx\":\"preserve\",\"jsxImportSource\":\"vue\"// ...}}"
                },
                {
                    "type": "p",
                    "text": "You can also opt-in per file by adding a/* @jsxImportSource vue */comment at the top of the file."
                },
                {
                    "type": "p",
                    "text": "If there is code that depends on the presence of the globalJSXnamespace, you can retain the exact pre-3.4 global behavior by explicitly importing or referencingvue/jsxin your project, which registers the globalJSXnamespace."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Render Function Recipes​"
                },
                {
                    "type": "p",
                    "text": "Below we will provide some common recipes for implementing template features as their equivalent render functions / JSX."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-if​"
                },
                {
                    "type": "p",
                    "text": "Template:"
                },
                {
                    "type": "code",
                    "code": "<div><divv-if=\"ok\">yes</div><spanv-else>no</span></div>"
                },
                {
                    "type": "p",
                    "text": "Equivalent render function / JSX:"
                },
                {
                    "type": "code",
                    "code": "h('div', [ok.value?h('div','yes'):h('span','no')])"
                },
                {
                    "type": "code",
                    "code": "<div>{ok.value?<div>yes</div>:<span>no</span>}</div>"
                },
                {
                    "type": "code",
                    "code": "h('div', [this.ok?h('div','yes'):h('span','no')])"
                },
                {
                    "type": "code",
                    "code": "<div>{this.ok?<div>yes</div>:<span>no</span>}</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-for​"
                },
                {
                    "type": "p",
                    "text": "Template:"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"{ id, text }initems\":key=\"id\">{{ text }}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "Equivalent render function / JSX:"
                },
                {
                    "type": "code",
                    "code": "h('ul',// assuming `items` is a ref with array valueitems.value.map(({id,text})=>{returnh('li', { key: id }, text)}))"
                },
                {
                    "type": "code",
                    "code": "<ul>{items.value.map(({id,text})=>{return<likey={id}>{text}</li>})}</ul>"
                },
                {
                    "type": "code",
                    "code": "h('ul',this.items.map(({id,text})=>{returnh('li', { key: id }, text)}))"
                },
                {
                    "type": "code",
                    "code": "<ul>{this.items.map(({id,text})=>{return<likey={id}>{text}</li>})}</ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-on​"
                },
                {
                    "type": "p",
                    "text": "Props with names that start withonfollowed by an uppercase letter are treated as event listeners. For example,onClickis the equivalent of@clickin templates."
                },
                {
                    "type": "code",
                    "code": "h('button',{onClick(event) {/* ... */}},'Click Me')"
                },
                {
                    "type": "code",
                    "code": "<buttononClick={(event)=>{/* ... */}}>Click Me</button>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Event Modifiers​"
                },
                {
                    "type": "p",
                    "text": "For the.passive,.capture, and.onceevent modifiers, they can be concatenated after the event name using camelCase."
                },
                {
                    "type": "p",
                    "text": "For example:"
                },
                {
                    "type": "code",
                    "code": "h('input', {onClickCapture() {/* listener in capture mode */},onKeyupOnce() {/* triggers only once */},onMouseoverOnceCapture() {/* once + capture */}})"
                },
                {
                    "type": "code",
                    "code": "<inputonClickCapture={()=>{}}onKeyupOnce={()=>{}}onMouseoverOnceCapture={()=>{}}/>"
                },
                {
                    "type": "p",
                    "text": "For other event and key modifiers, thewithModifiershelper can be used:"
                },
                {
                    "type": "code",
                    "code": "import{ withModifiers }from'vue'h('div', {onClick:withModifiers(()=>{}, ['self'])})"
                },
                {
                    "type": "code",
                    "code": "<divonClick={withModifiers(()=>{}, ['self'])} />"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Components​"
                },
                {
                    "type": "p",
                    "text": "To create a vnode for a component, the first argument passed toh()should be the component definition. This means when using render functions, it is unnecessary to register components - you can just use the imported components directly:"
                },
                {
                    "type": "code",
                    "code": "importFoofrom'./Foo.vue'importBarfrom'./Bar.jsx'functionrender() {returnh('div', [h(Foo),h(Bar)])}"
                },
                {
                    "type": "code",
                    "code": "functionrender() {return(<div><Foo/><Bar/></div>)}"
                },
                {
                    "type": "p",
                    "text": "As we can see,hcan work with components imported from any file format as long as it's a valid Vue component."
                },
                {
                    "type": "p",
                    "text": "Dynamic components are straightforward with render functions:"
                },
                {
                    "type": "code",
                    "code": "importFoofrom'./Foo.vue'importBarfrom'./Bar.jsx'functionrender() {returnok.value?h(Foo):h(Bar)}"
                },
                {
                    "type": "code",
                    "code": "functionrender() {returnok.value?<Foo/>:<Bar/>}"
                },
                {
                    "type": "p",
                    "text": "If a component is registered by name and cannot be imported directly (for example, globally registered by a library), it can be programmatically resolved by using theresolveComponent()helper."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rendering Slots​"
                },
                {
                    "type": "p",
                    "text": "In render functions, slots can be accessed from thesetup()context. Each slot on theslotsobject is afunction that returns an array of vnodes:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['message'],setup(props, {slots}) {return()=>[// default slot:// <div><slot /></div>h('div', slots.default()),// named slot:// <div><slot name=\"footer\" :text=\"message\" /></div>h('div',slots.footer({text: props.message}))]}}"
                },
                {
                    "type": "p",
                    "text": "JSX equivalent:"
                },
                {
                    "type": "code",
                    "code": "// default<div>{slots.default()}</div>// named<div>{slots.footer({ text: props.message })}</div>"
                },
                {
                    "type": "p",
                    "text": "In render functions, slots can be accessed fromthis.$slots:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['message'],render() {return[// <div><slot /></div>h('div',this.$slots.default()),// <div><slot name=\"footer\" :text=\"message\" /></div>h('div',this.$slots.footer({text:this.message}))]}}"
                },
                {
                    "type": "p",
                    "text": "JSX equivalent:"
                },
                {
                    "type": "code",
                    "code": "// <div><slot /></div><div>{this.$slots.default()}</div>// <div><slot name=\"footer\" :text=\"message\" /></div><div>{this.$slots.footer({ text:this.message })}</div>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing Slots​"
                },
                {
                    "type": "p",
                    "text": "Passing children to components works a bit differently from passing children to elements. Instead of an array, we need to pass either a slot function, or an object of slot functions. Slot functions can return anything a normal render function can return - which will always be normalized to arrays of vnodes when accessed in the child component."
                },
                {
                    "type": "code",
                    "code": "// single default sloth(MyComponent, ()=>'hello')// named slots// notice the `null` is required to avoid// the slots object being treated as propsh(MyComponent,null, {default: ()=>'default slot',foo: ()=>h('div','foo'),bar: ()=>[h('span','one'),h('span','two')]})"
                },
                {
                    "type": "p",
                    "text": "JSX equivalent:"
                },
                {
                    "type": "code",
                    "code": "// default<MyComponent>{()=>'hello'}</MyComponent>// named<MyComponent>{{default: ()=>'default slot',foo: ()=><div>foo</div>,bar: ()=>[<span>one</span>, <span>two</span>]}}</MyComponent>"
                },
                {
                    "type": "p",
                    "text": "Passing slots as functions allows them to be invoked lazily by the child component. This leads to the slot's dependencies being tracked by the child instead of the parent, which results in more accurate and efficient updates."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Scoped Slots​"
                },
                {
                    "type": "p",
                    "text": "To render a scoped slot in the parent component, a slot is passed to the child. Notice how the slot now has a parametertext. The slot will be called in the child component and the data from the child component will be passed up to the parent component."
                },
                {
                    "type": "code",
                    "code": "// parent componentexportdefault{setup() {return()=>h(MyComp,null, {default: ({text})=>h('p', text)})}}"
                },
                {
                    "type": "p",
                    "text": "Remember to passnullso the slots will not be treated as props."
                },
                {
                    "type": "code",
                    "code": "// child componentexportdefault{setup(props, {slots}) {consttext=ref('hi')return()=>h('div',null, slots.default({ text: text.value }))}}"
                },
                {
                    "type": "p",
                    "text": "JSX equivalent:"
                },
                {
                    "type": "code",
                    "code": "<MyComponent>{{default: ({text})=><p>{ text }</p>}}</MyComponent>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Built-in Components​"
                },
                {
                    "type": "p",
                    "text": "Built-in componentssuch as<KeepAlive>,<Transition>,<TransitionGroup>,<Teleport>and<Suspense>must be imported for use in render functions:"
                },
                {
                    "type": "code",
                    "code": "import{ h, KeepAlive, Teleport, Transition, TransitionGroup }from'vue'exportdefault{setup() {return()=>h(Transition, { mode:'out-in'},/* ... */)}}"
                },
                {
                    "type": "code",
                    "code": "import{ h, KeepAlive, Teleport, Transition, TransitionGroup }from'vue'exportdefault{render() {returnh(Transition, { mode:'out-in'},/* ... */)}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "v-model​"
                },
                {
                    "type": "p",
                    "text": "Thev-modeldirective is expanded tomodelValueandonUpdate:modelValueprops during template compilation—we will have to provide these props ourselves:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['modelValue'],emits: ['update:modelValue'],setup(props, {emit}) {return()=>h(SomeComponent, {modelValue: props.modelValue,'onUpdate:modelValue': (value)=>emit('update:modelValue', value)})}}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{props: ['modelValue'],emits: ['update:modelValue'],render() {returnh(SomeComponent, {modelValue:this.modelValue,'onUpdate:modelValue': (value)=>this.$emit('update:modelValue', value)})}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Directives​"
                },
                {
                    "type": "p",
                    "text": "Custom directives can be applied to a vnode usingwithDirectives:"
                },
                {
                    "type": "code",
                    "code": "import{ h, withDirectives }from'vue'// a custom directiveconstpin={mounted() {/* ... */},updated() {/* ... */}}// <div v-pin:top.animate=\"200\"></div>constvnode=withDirectives(h('div'), [[pin,200,'top', { animate:true}]])"
                },
                {
                    "type": "p",
                    "text": "If the directive is registered by name and cannot be imported directly, it can be resolved using theresolveDirectivehelper."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Template Refs​"
                },
                {
                    "type": "p",
                    "text": "With the Composition API, template refs are created by passing theref()itself as a prop to the vnode:"
                },
                {
                    "type": "code",
                    "code": "import{ h, ref }from'vue'exportdefault{setup() {constdivEl=ref()// <div ref=\"divEl\">return()=>h('div', { ref: divEl })}}"
                },
                {
                    "type": "p",
                    "text": "With the Options API, template refs are created by passing the ref name as a string in the vnode props:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{render() {// <div ref=\"divEl\">returnh('div', { ref:'divEl'})}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Functional Components​"
                },
                {
                    "type": "p",
                    "text": "Functional components are an alternative form of component that don't have any state of their own. They act like pure functions: props in, vnodes out. They are rendered without creating a component instance (i.e. nothis), and without the usual component lifecycle hooks."
                },
                {
                    "type": "p",
                    "text": "To create a functional component we use a plain function, rather than an options object. The function is effectively therenderfunction for the component."
                },
                {
                    "type": "p",
                    "text": "The signature of a functional component is the same as thesetup()hook:"
                },
                {
                    "type": "code",
                    "code": "functionMyComponent(props, {slots,emit,attrs}) {// ...}"
                },
                {
                    "type": "p",
                    "text": "As there is nothisreference for a functional component, Vue will pass in thepropsas the first argument:"
                },
                {
                    "type": "code",
                    "code": "functionMyComponent(props,context) {// ...}"
                },
                {
                    "type": "p",
                    "text": "The second argument,context, contains three properties:attrs,emit, andslots. These are equivalent to the instance properties$attrs,$emit, and$slotsrespectively."
                },
                {
                    "type": "p",
                    "text": "Most of the usual configuration options for components are not available for functional components. However, it is possible to definepropsandemitsby adding them as properties:"
                },
                {
                    "type": "code",
                    "code": "MyComponent.props=['value']MyComponent.emits=['click']"
                },
                {
                    "type": "p",
                    "text": "If thepropsoption is not specified, then thepropsobject passed to the function will contain all attributes, the same asattrs. The prop names will not be normalized to camelCase unless thepropsoption is specified."
                },
                {
                    "type": "p",
                    "text": "For functional components with explicitprops,attribute fallthroughworks much the same as with normal components. However, for functional components that don't explicitly specify theirprops, only theclass,style, andonXxxevent listeners will be inherited from theattrsby default. In either case,inheritAttrscan be set tofalseto disable attribute inheritance:"
                },
                {
                    "type": "code",
                    "code": "MyComponent.inheritAttrs=false"
                },
                {
                    "type": "p",
                    "text": "Functional components can be registered and consumed just like normal components. If you pass a function as the first argument toh(), it will be treated as a functional component."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Typing Functional Components​"
                },
                {
                    "type": "p",
                    "text": "Functional Components can be typed based on whether they are named or anonymous.Vue - Official extensionalso supports type checking properly typed functional components when consuming them in SFC templates."
                },
                {
                    "type": "p",
                    "text": "Named Functional Component"
                },
                {
                    "type": "code",
                    "code": "importtype{ SetupContext }from'vue'typeFComponentProps={message:string}typeEvents={sendMessage(message:string):void}functionFComponent(props:FComponentProps,context:SetupContext<Events>) {return(<buttononClick={()=>context.emit('sendMessage', props.message)}>{props.message} {' '}</button>)}FComponent.props={message: {type: String,required:true}}FComponent.emits={sendMessage: (value:unknown)=>typeofvalue==='string'}"
                },
                {
                    "type": "p",
                    "text": "Anonymous Functional Component"
                },
                {
                    "type": "code",
                    "code": "importtype{ FunctionalComponent }from'vue'typeFComponentProps={message:string}typeEvents={sendMessage(message:string):void}constFComponent:FunctionalComponent<FComponentProps,Events>=(props,context)=>{return(<buttononClick={()=>context.emit('sendMessage', props.message)}>{props.message} {' '}</button>)}FComponent.props={message: {type: String,required:true}}FComponent.emits={sendMessage: (value)=>typeofvalue==='string'}"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/rendering-mechanism",
            "title": "Rendering Mechanism | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Rendering Mechanism​"
                },
                {
                    "type": "p",
                    "text": "How does Vue take a template and turn it into actual DOM nodes? How does Vue update those DOM nodes efficiently? We will attempt to shed some light on these questions here by diving into Vue's internal rendering mechanism."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Virtual DOM​"
                },
                {
                    "type": "p",
                    "text": "You have probably heard about the term \"virtual DOM\", which Vue's rendering system is based upon."
                },
                {
                    "type": "p",
                    "text": "The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM. The concept was pioneered byReact, and has been adopted in many other frameworks with different implementations, including Vue."
                },
                {
                    "type": "p",
                    "text": "Virtual DOM is more of a pattern than a specific technology, so there is no one canonical implementation. We can illustrate the idea using a simple example:"
                },
                {
                    "type": "code",
                    "code": "constvnode={type:'div',props: {id:'hello'},children: [/* more vnodes */]}"
                },
                {
                    "type": "p",
                    "text": "Here,vnodeis a plain JavaScript object (a \"virtual node\") representing a<div>element. It contains all the information that we need to create the actual element. It also contains more children vnodes, which makes it the root of a virtual DOM tree."
                },
                {
                    "type": "p",
                    "text": "A runtime renderer can walk a virtual DOM tree and construct a real DOM tree from it. This process is calledmount."
                },
                {
                    "type": "p",
                    "text": "If we have two copies of virtual DOM trees, the renderer can also walk and compare the two trees, figuring out the differences, and apply those changes to the actual DOM. This process is calledpatch, also known as \"diffing\" or \"reconciliation\"."
                },
                {
                    "type": "p",
                    "text": "The main benefit of virtual DOM is that it gives the developer the ability to programmatically create, inspect and compose desired UI structures in a declarative way, while leaving the direct DOM manipulation to the renderer."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Render Pipeline​"
                },
                {
                    "type": "p",
                    "text": "At the high level, this is what happens when a Vue component is mounted:"
                },
                {
                    "type": "list",
                    "items": [
                        "Compile: Vue templates are compiled intorender functions: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler.",
                        "Mount: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as areactive effect, so it keeps track of all reactive dependencies that were used.",
                        "Patch: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM."
                    ]
                },
                {
                    "type": "p",
                    "text": "Compile: Vue templates are compiled intorender functions: functions that return virtual DOM trees. This step can be done either ahead-of-time via a build step, or on-the-fly by using the runtime compiler."
                },
                {
                    "type": "p",
                    "text": "Mount: The runtime renderer invokes the render functions, walks the returned virtual DOM tree, and creates actual DOM nodes based on it. This step is performed as areactive effect, so it keeps track of all reactive dependencies that were used."
                },
                {
                    "type": "p",
                    "text": "Patch: When a dependency used during mount changes, the effect re-runs. This time, a new, updated Virtual DOM tree is created. The runtime renderer walks the new tree, compares it with the old one, and applies necessary updates to the actual DOM."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Templates vs. Render Functions​"
                },
                {
                    "type": "p",
                    "text": "Vue templates are compiled into virtual DOM render functions. Vue also provides APIs that allow us to skip the template compilation step and directly author render functions. Render functions are more flexible than templates when dealing with highly dynamic logic, because you can work with vnodes using the full power of JavaScript."
                },
                {
                    "type": "p",
                    "text": "So why does Vue recommend templates by default? There are a number of reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify.",
                        "Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM (which we will discuss below)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Templates are closer to actual HTML. This makes it easier to reuse existing HTML snippets, apply accessibility best practices, style with CSS, and for designers to understand and modify."
                },
                {
                    "type": "p",
                    "text": "Templates are easier to statically analyze due to their more deterministic syntax. This allows Vue's template compiler to apply many compile-time optimizations to improve the performance of the virtual DOM (which we will discuss below)."
                },
                {
                    "type": "p",
                    "text": "In practice, templates are sufficient for most use cases in applications. Render functions are typically only used in reusable components that need to deal with highly dynamic rendering logic. Render function usage is discussed in more detail inRender Functions & JSX."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Compiler-Informed Virtual DOM​"
                },
                {
                    "type": "p",
                    "text": "The virtual DOM implementation in React and most other virtual-DOM implementations are purely runtime: the reconciliation algorithm cannot make any assumptions about the incoming virtual DOM tree, so it has to fully traverse the tree and diff the props of every vnode in order to ensure correctness. In addition, even if a part of the tree never changes, new vnodes are always created for them on each re-render, resulting in unnecessary memory pressure. This is one of the most criticized aspect of virtual DOM: the somewhat brute-force reconciliation process sacrifices efficiency in return for declarativeness and correctness."
                },
                {
                    "type": "p",
                    "text": "But it doesn't have to be that way. In Vue, the framework controls both the compiler and the runtime. This allows us to implement many compile-time optimizations that only a tightly-coupled renderer can take advantage of. The compiler can statically analyze the template and leave hints in the generated code so that the runtime can take shortcuts whenever possible. At the same time, we still preserve the capability for the user to drop down to the render function layer for more direct control in edge cases. We call this hybrid approachCompiler-Informed Virtual DOM."
                },
                {
                    "type": "p",
                    "text": "Below, we will discuss a few major optimizations done by the Vue template compiler to improve the virtual DOM's runtime performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Static Hoisting​"
                },
                {
                    "type": "p",
                    "text": "Quite often there will be parts in a template that do not contain any dynamic bindings:"
                },
                {
                    "type": "code",
                    "code": "<div><div>foo</div><!-- hoisted --><div>bar</div><!-- hoisted --><div>{{ dynamic }}</div></div>"
                },
                {
                    "type": "p",
                    "text": "Inspect in Template Explorer"
                },
                {
                    "type": "p",
                    "text": "Thefooandbardivs are static - re-creating vnodes and diffing them on each re-render is unnecessary. The Vue compiler automatically hoists their vnode creation calls out of the render function, and reuses the same vnodes on every render. The renderer is also able to completely skip diffing them when it notices the old vnode and the new vnode are the same one."
                },
                {
                    "type": "p",
                    "text": "In addition, when there are enough consecutive static elements, they will be condensed into a single \"static vnode\" that contains the plain HTML string for all these nodes (Example). These static vnodes are mounted by directly settinginnerHTML. They also cache their corresponding DOM nodes on initial mount - if the same piece of content is reused elsewhere in the app, new DOM nodes are created using nativecloneNode(), which is extremely efficient."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Patch Flags​"
                },
                {
                    "type": "p",
                    "text": "For a single element with dynamic bindings, we can also infer a lot of information from it at compile time:"
                },
                {
                    "type": "code",
                    "code": "<!-- class binding only --><div:class=\"{ active }\"></div><!-- id and value bindings only --><input:id=\"id\":value=\"value\"><!-- text children only --><div>{{ dynamic }}</div>"
                },
                {
                    "type": "p",
                    "text": "Inspect in Template Explorer"
                },
                {
                    "type": "p",
                    "text": "When generating the render function code for these elements, Vue encodes the type of update each of them needs directly in the vnode creation call:"
                },
                {
                    "type": "code",
                    "code": "createElementVNode(\"div\", {class:_normalizeClass({ active: _ctx.active })},null,2/* CLASS */)"
                },
                {
                    "type": "p",
                    "text": "The last argument,2, is apatch flag. An element can have multiple patch flags, which will be merged into a single number. The runtime renderer can then check against the flags usingbitwise operationsto determine whether it needs to do certain work:"
                },
                {
                    "type": "code",
                    "code": "if(vnode.patchFlag&PatchFlags.CLASS/* 2 */) {// update the element's class}"
                },
                {
                    "type": "p",
                    "text": "Bitwise checks are extremely fast. With the patch flags, Vue is able to do the least amount of work necessary when updating elements with dynamic bindings."
                },
                {
                    "type": "p",
                    "text": "Vue also encodes the type of children a vnode has. For example, a template that has multiple root nodes is represented as a fragment. In most cases, we know for sure that the order of these root nodes will never change, so this information can also be provided to the runtime as a patch flag:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionrender() {return(_openBlock(),_createElementBlock(_Fragment,null, [/* children */],64/* STABLE_FRAGMENT */))}"
                },
                {
                    "type": "p",
                    "text": "The runtime can thus completely skip child-order reconciliation for the root fragment."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Tree Flattening​"
                },
                {
                    "type": "p",
                    "text": "Taking another look at the generated code from the previous example, you'll notice the root of the returned virtual DOM tree is created using a specialcreateElementBlock()call:"
                },
                {
                    "type": "code",
                    "code": "exportfunctionrender() {return(_openBlock(),_createElementBlock(_Fragment,null, [/* children */],64/* STABLE_FRAGMENT */))}"
                },
                {
                    "type": "p",
                    "text": "Conceptually, a \"block\" is a part of the template that has stable inner structure. In this case, the entire template has a single block because it does not contain any structural directives likev-ifandv-for."
                },
                {
                    "type": "p",
                    "text": "Each block tracks any descendant nodes (not just direct children) that have patch flags. For example:"
                },
                {
                    "type": "code",
                    "code": "<div><!-- root block --><div>...</div><!-- not tracked --><div:id=\"id\"></div><!-- tracked --><div><!-- not tracked --><div>{{ bar }}</div><!-- tracked --></div></div>"
                },
                {
                    "type": "p",
                    "text": "The result is a flattened array that contains only the dynamic descendant nodes:"
                },
                {
                    "type": "code",
                    "code": "div (block root)- div with :id binding- div with {{ bar }} binding"
                },
                {
                    "type": "p",
                    "text": "When this component needs to re-render, it only needs to traverse the flattened tree instead of the full tree. This is calledTree Flattening, and it greatly reduces the number of nodes that need to be traversed during virtual DOM reconciliation. Any static parts of the template are effectively skipped."
                },
                {
                    "type": "p",
                    "text": "v-ifandv-fordirectives will create new block nodes:"
                },
                {
                    "type": "code",
                    "code": "<div><!-- root block --><div><divv-if><!-- if block -->...</div></div></div>"
                },
                {
                    "type": "p",
                    "text": "A child block is tracked inside the parent block's array of dynamic descendants. This retains a stable structure for the parent block."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Impact on SSR Hydration​"
                },
                {
                    "type": "p",
                    "text": "Both patch flags and tree flattening also greatly improve Vue'sSSR Hydrationperformance:"
                },
                {
                    "type": "list",
                    "items": [
                        "Single element hydration can take fast paths based on the corresponding vnode's patch flag.",
                        "Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level."
                    ]
                },
                {
                    "type": "p",
                    "text": "Single element hydration can take fast paths based on the corresponding vnode's patch flag."
                },
                {
                    "type": "p",
                    "text": "Only block nodes and their dynamic descendants need to be traversed during hydration, effectively achieving partial hydration at the template level."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/ways-of-using-vue",
            "title": "Ways of Using Vue | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Ways of Using Vue​"
                },
                {
                    "type": "p",
                    "text": "We believe there is no \"one size fits all\" story for the web. This is why Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways to strike the optimal balance between stack complexity, developer experience and end performance."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Standalone Script​"
                },
                {
                    "type": "p",
                    "text": "Vue can be used as a standalone script file - no build step required! If you have a backend framework already rendering most of the HTML, or your frontend logic isn't complex enough to justify a build step, this is the easiest way to integrate Vue into your stack. You can think of Vue as a more declarative replacement of jQuery in such cases."
                },
                {
                    "type": "p",
                    "text": "Vue also provides an alternative distribution calledpetite-vuethat is specifically optimized for progressively enhancing existing HTML. It has a smaller feature set, but is extremely lightweight and uses an implementation that is more efficient in no-build-step scenarios."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Embedded Web Components​"
                },
                {
                    "type": "p",
                    "text": "You can use Vue tobuild standard Web Componentsthat can be embedded in any HTML page, regardless of how they are rendered. This option allows you to leverage Vue in a completely consumer-agnostic fashion: the resulting web components can be embedded in legacy applications, static HTML, or even applications built with other frameworks."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-Page Application (SPA)​"
                },
                {
                    "type": "p",
                    "text": "Some applications require rich interactivity, deep session depth, and non-trivial stateful logic on the frontend. The best way to build such applications is to use an architecture where Vue not only controls the entire page, but also handles data updates and navigation without having to reload the page. This type of application is typically referred to as a Single-Page Application (SPA)."
                },
                {
                    "type": "p",
                    "text": "Vue provides core libraries andcomprehensive tooling supportwith amazing developer experience for building modern SPAs, including:"
                },
                {
                    "type": "list",
                    "items": [
                        "Client-side router",
                        "Blazing fast build tool chain",
                        "IDE support",
                        "Browser devtools",
                        "TypeScript integrations",
                        "Testing utilities"
                    ]
                },
                {
                    "type": "p",
                    "text": "SPAs typically require the backend to expose API endpoints - but you can also pair Vue with solutions likeInertia.jsto get the SPA benefits while retaining a server-centric development model."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Fullstack / SSR​"
                },
                {
                    "type": "p",
                    "text": "Pure client-side SPAs are problematic when the app is sensitive to SEO and time-to-content. This is because the browser will receive a largely empty HTML page, and has to wait until the JavaScript is loaded before rendering anything."
                },
                {
                    "type": "p",
                    "text": "Vue provides first-class APIs to \"render\" a Vue app into HTML strings on the server. This allows the server to send back already-rendered HTML, allowing end users to see the content immediately while the JavaScript is being downloaded. Vue will then \"hydrate\" the application on the client side to make it interactive. This is calledServer-Side Rendering (SSR)and it greatly improves Core Web Vital metrics such asLargest Contentful Paint (LCP)."
                },
                {
                    "type": "p",
                    "text": "There are higher-level Vue-based frameworks built on top of this paradigm, such asNuxt, which allow you to develop a fullstack application using Vue and JavaScript."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "JAMStack / SSG​"
                },
                {
                    "type": "p",
                    "text": "Server-side rendering can be done ahead of time if the required data is static. This means we can pre-render an entire application into HTML and serve them as static files. This improves site performance and makes deployment a lot simpler since we no longer need to dynamically render pages on each request. Vue can still hydrate such applications to provide rich interactivity on the client. This technique is commonly referred to as Static-Site Generation (SSG), also known asJAMStack."
                },
                {
                    "type": "p",
                    "text": "There are two flavors of SSG: single-page and multi-page. Both flavors pre-render the site into static HTML, the difference is that:"
                },
                {
                    "type": "list",
                    "items": [
                        "After the initial page load, a single-page SSG \"hydrates\" the page into an SPA. This requires more upfront JS payload and hydration cost, but subsequent navigations will be faster, since it only needs to partially update the page content instead of reloading the entire page.",
                        "A multi-page SSG loads a new page on every navigation. The upside is that it can ship minimal JS - or no JS at all if the page requires no interaction! Some multi-page SSG frameworks such asAstroalso support \"partial hydration\" - which allows you to use Vue components to create interactive \"islands\" inside static HTML."
                    ]
                },
                {
                    "type": "p",
                    "text": "After the initial page load, a single-page SSG \"hydrates\" the page into an SPA. This requires more upfront JS payload and hydration cost, but subsequent navigations will be faster, since it only needs to partially update the page content instead of reloading the entire page."
                },
                {
                    "type": "p",
                    "text": "A multi-page SSG loads a new page on every navigation. The upside is that it can ship minimal JS - or no JS at all if the page requires no interaction! Some multi-page SSG frameworks such asAstroalso support \"partial hydration\" - which allows you to use Vue components to create interactive \"islands\" inside static HTML."
                },
                {
                    "type": "p",
                    "text": "Single-page SSGs are better suited if you expect non-trivial interactivity, deep session lengths, or persisted elements / state across navigations. Otherwise, multi-page SSG would be the better choice."
                },
                {
                    "type": "p",
                    "text": "The Vue team also maintains a static-site generator calledVitePress, which powers this website you are reading right now! VitePress supports both flavors of SSG.Nuxtalso supports SSG. You can even mix SSR and SSG for different routes in the same Nuxt app."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Beyond the Web​"
                },
                {
                    "type": "p",
                    "text": "Although Vue is primarily designed for building web applications, it is by no means limited to just the browser. You can:"
                },
                {
                    "type": "list",
                    "items": [
                        "Build desktop apps withElectron",
                        "Build mobile apps withIonic Vue",
                        "Build desktop and mobile apps from the same codebase withQuasarorTauri",
                        "Build 3D WebGL experiences withTresJS",
                        "Use Vue'sCustom Renderer APIto build custom renderers, like those forthe terminal!"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/extras/web-components",
            "title": "Vue and Web Components | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue and Web Components​"
                },
                {
                    "type": "p",
                    "text": "Web Componentsis an umbrella term for a set of web native APIs that allows developers to create reusable custom elements."
                },
                {
                    "type": "p",
                    "text": "We consider Vue and Web Components to be primarily complementary technologies. Vue has excellent support for both consuming and creating custom elements. Whether you are integrating custom elements into an existing Vue application, or using Vue to build and distribute custom elements, you are in good company."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Custom Elements in Vue​"
                },
                {
                    "type": "p",
                    "text": "Vuescores a perfect 100% in the Custom Elements Everywhere tests. Consuming custom elements inside a Vue application largely works the same as using native HTML elements, with a few things to keep in mind:"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Skipping Component Resolution​"
                },
                {
                    "type": "p",
                    "text": "By default, Vue will attempt to resolve a non-native HTML tag as a registered Vue component before falling back to rendering it as a custom element. This will cause Vue to emit a \"failed to resolve component\" warning during development. To let Vue know that certain elements should be treated as custom elements and skip component resolution, we can specify thecompilerOptions.isCustomElementoption."
                },
                {
                    "type": "p",
                    "text": "If you are using Vue with a build setup, the option should be passed via build configs since it is a compile-time option."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Example In-Browser Config​"
                },
                {
                    "type": "code",
                    "code": "// Only works if using in-browser compilation.// If using build tools, see config examples below.app.config.compilerOptions.isCustomElement=(tag)=>tag.includes('-')"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Example Vite Config​"
                },
                {
                    "type": "code",
                    "code": "// vite.config.jsimportvuefrom'@vitejs/plugin-vue'exportdefault{plugins: [vue({template: {compilerOptions: {// treat all tags with a dash as custom elementsisCustomElement: (tag)=>tag.includes('-')}}})]}"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Example Vue CLI Config​"
                },
                {
                    "type": "code",
                    "code": "// vue.config.jsmodule.exports={chainWebpack: (config)=>{config.module.rule('vue').use('vue-loader').tap((options)=>({...options,compilerOptions: {// treat any tag that starts with ion- as custom elementsisCustomElement: (tag)=>tag.startsWith('ion-')}}))}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Passing DOM Properties​"
                },
                {
                    "type": "p",
                    "text": "Since DOM attributes can only be strings, we need to pass complex data to custom elements as DOM properties. When setting props on a custom element, Vue 3 automatically checks DOM-property presence using theinoperator and will prefer setting the value as a DOM property if the key is present. This means that, in most cases, you won't need to think about this if the custom element follows therecommended best practices."
                },
                {
                    "type": "p",
                    "text": "However, there could be rare cases where the data must be passed as a DOM property, but the custom element does not properly define/reflect the property (causing theincheck to fail). In this case, you can force av-bindbinding to be set as a DOM property using the.propmodifier:"
                },
                {
                    "type": "code",
                    "code": "<my-element:user.prop=\"{ name:'jack'}\"></my-element><!-- shorthand equivalent --><my-element.user=\"{ name: 'jack' }\"></my-element>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Building Custom Elements with Vue​"
                },
                {
                    "type": "p",
                    "text": "The primary benefit of custom elements is that they can be used with any framework, or even without a framework. This makes them ideal for distributing components where the end consumer may not be using the same frontend stack, or when you want to insulate the end application from the implementation details of the components it uses."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "defineCustomElement​"
                },
                {
                    "type": "p",
                    "text": "Vue supports creating custom elements using exactly the same Vue component APIs via thedefineCustomElementmethod. The method accepts the same argument asdefineComponent, but instead returns a custom element constructor that extendsHTMLElement:"
                },
                {
                    "type": "code",
                    "code": "<my-vue-element></my-vue-element>"
                },
                {
                    "type": "code",
                    "code": "import{ defineCustomElement }from'vue'constMyVueElement=defineCustomElement({// normal Vue component options hereprops: {},emits: {},template:`...`,// defineCustomElement only: CSS to be injected into shadow rootstyles: [`/* inlined css */`]})// Register the custom element.// After registration, all `<my-vue-element>` tags// on the page will be upgraded.customElements.define('my-vue-element', MyVueElement)// You can also programmatically instantiate the element:// (can only be done after registration)document.body.appendChild(newMyVueElement({// initial props (optional)}))"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Lifecycle​"
                },
                {
                    "type": "list",
                    "items": [
                        "A Vue custom element will mount an internal Vue component instance inside its shadow root when the element'sconnectedCallbackis called for the first time.",
                        "When the element'sdisconnectedCallbackis invoked, Vue will check whether the element is detached from the document after a microtask tick.If the element is still in the document, it's a move and the component instance will be preserved;If the element is detached from the document, it's a removal and the component instance will be unmounted.",
                        "If the element is still in the document, it's a move and the component instance will be preserved;",
                        "If the element is detached from the document, it's a removal and the component instance will be unmounted."
                    ]
                },
                {
                    "type": "p",
                    "text": "A Vue custom element will mount an internal Vue component instance inside its shadow root when the element'sconnectedCallbackis called for the first time."
                },
                {
                    "type": "p",
                    "text": "When the element'sdisconnectedCallbackis invoked, Vue will check whether the element is detached from the document after a microtask tick."
                },
                {
                    "type": "list",
                    "items": [
                        "If the element is still in the document, it's a move and the component instance will be preserved;",
                        "If the element is detached from the document, it's a removal and the component instance will be unmounted."
                    ]
                },
                {
                    "type": "p",
                    "text": "If the element is still in the document, it's a move and the component instance will be preserved;"
                },
                {
                    "type": "p",
                    "text": "If the element is detached from the document, it's a removal and the component instance will be unmounted."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Props​"
                },
                {
                    "type": "list",
                    "items": [
                        "All props declared using thepropsoption will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate.Attributes are always reflected to corresponding properties.Properties with primitive values (string,booleanornumber) are reflected as attributes.",
                        "Attributes are always reflected to corresponding properties.",
                        "Properties with primitive values (string,booleanornumber) are reflected as attributes.",
                        "Vue also automatically casts props declared withBooleanorNumbertypes into the desired type when they are set as attributes (which are always strings). For example, given the following props declaration:jsprops: {selected: Boolean,index: Number}And the custom element usage:template<my-elementselectedindex=\"1\"></my-element>In the component,selectedwill be cast totrue(boolean) andindexwill be cast to1(number)."
                    ]
                },
                {
                    "type": "p",
                    "text": "All props declared using thepropsoption will be defined on the custom element as properties. Vue will automatically handle the reflection between attributes / properties where appropriate."
                },
                {
                    "type": "list",
                    "items": [
                        "Attributes are always reflected to corresponding properties.",
                        "Properties with primitive values (string,booleanornumber) are reflected as attributes."
                    ]
                },
                {
                    "type": "p",
                    "text": "Attributes are always reflected to corresponding properties."
                },
                {
                    "type": "p",
                    "text": "Properties with primitive values (string,booleanornumber) are reflected as attributes."
                },
                {
                    "type": "p",
                    "text": "Vue also automatically casts props declared withBooleanorNumbertypes into the desired type when they are set as attributes (which are always strings). For example, given the following props declaration:"
                },
                {
                    "type": "code",
                    "code": "props: {selected: Boolean,index: Number}"
                },
                {
                    "type": "p",
                    "text": "And the custom element usage:"
                },
                {
                    "type": "code",
                    "code": "<my-elementselectedindex=\"1\"></my-element>"
                },
                {
                    "type": "p",
                    "text": "In the component,selectedwill be cast totrue(boolean) andindexwill be cast to1(number)."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Events​"
                },
                {
                    "type": "p",
                    "text": "Events emitted viathis.$emitor setupemitare dispatched as nativeCustomEventson the custom element. Additional event arguments (payload) will be exposed as an array on the CustomEvent object as itsdetailproperty."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Slots​"
                },
                {
                    "type": "p",
                    "text": "Inside the component, slots can be rendered using the<slot/>element as usual. However, when consuming the resulting element, it only acceptsnative slots syntax:"
                },
                {
                    "type": "list",
                    "items": [
                        "Scoped slotsare not supported.",
                        "When passing named slots, use theslotattribute instead of thev-slotdirective:template<my-element><divslot=\"named\">hello</div></my-element>"
                    ]
                },
                {
                    "type": "p",
                    "text": "Scoped slotsare not supported."
                },
                {
                    "type": "p",
                    "text": "When passing named slots, use theslotattribute instead of thev-slotdirective:"
                },
                {
                    "type": "code",
                    "code": "<my-element><divslot=\"named\">hello</div></my-element>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Provide / Inject​"
                },
                {
                    "type": "p",
                    "text": "TheProvide / Inject APIand itsComposition API equivalentalso work between Vue-defined custom elements. However, note that this worksonly between custom elements. i.e. a Vue-defined custom element won't be able to inject properties provided by a non-custom-element Vue component."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "App Level Config​"
                },
                {
                    "type": "p",
                    "text": "You can configure the app instance of a Vue custom element using theconfigureAppoption:"
                },
                {
                    "type": "code",
                    "code": "defineCustomElement(MyComponent, {configureApp(app) {app.config.errorHandler=(err)=>{/* ... */}}})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SFC as Custom Element​"
                },
                {
                    "type": "p",
                    "text": "defineCustomElementalso works with Vue Single-File Components (SFCs). However, with the default tooling setup, the<style>inside the SFCs will still be extracted and merged into a single CSS file during production build. When using an SFC as a custom element, it is often desirable to inject the<style>tags into the custom element's shadow root instead."
                },
                {
                    "type": "p",
                    "text": "The official SFC toolings support importing SFCs in \"custom element mode\" (requires@vitejs/plugin-vue@^1.4.0orvue-loader@^16.5.0). An SFC loaded in custom element mode inlines its<style>tags as strings of CSS and exposes them under the component'sstylesoption. This will be picked up bydefineCustomElementand injected into the element's shadow root when instantiated."
                },
                {
                    "type": "p",
                    "text": "To opt-in to this mode, simply end your component file name with.ce.vue:"
                },
                {
                    "type": "code",
                    "code": "import{ defineCustomElement }from'vue'importExamplefrom'./Example.ce.vue'console.log(Example.styles)// [\"/* inlined css */\"]// convert into custom element constructorconstExampleElement=defineCustomElement(Example)// registercustomElements.define('my-example', ExampleElement)"
                },
                {
                    "type": "p",
                    "text": "If you wish to customize what files should be imported in custom element mode (for example, treatingallSFCs as custom elements), you can pass thecustomElementoption to the respective build plugins:"
                },
                {
                    "type": "list",
                    "items": [
                        "@vitejs/plugin-vue",
                        "vue-loader"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Tips for a Vue Custom Elements Library​"
                },
                {
                    "type": "p",
                    "text": "When building custom elements with Vue, the elements will rely on Vue's runtime. There is a ~16kb baseline size cost depending on how many features are being used. This means it is not ideal to use Vue if you are shipping a single custom element - you may want to use vanilla JavaScript,petite-vue, or frameworks that specialize in small runtime size. However, the base size is more than justifiable if you are shipping a collection of custom elements with complex logic, as Vue will allow each component to be authored with much less code. The more elements you are shipping together, the better the trade-off."
                },
                {
                    "type": "p",
                    "text": "If the custom elements will be used in an application that is also using Vue, you can choose to externalize Vue from the built bundle so that the elements will be using the same copy of Vue from the host application."
                },
                {
                    "type": "p",
                    "text": "It is recommended to export the individual element constructors to give your users the flexibility to import them on-demand and register them with desired tag names. You can also export a convenience function to automatically register all elements. Here's an example entry point of a Vue custom element library:"
                },
                {
                    "type": "code",
                    "code": "import{ defineCustomElement }from'vue'importFoofrom'./MyFoo.ce.vue'importBarfrom'./MyBar.ce.vue'constMyFoo=defineCustomElement(Foo)constMyBar=defineCustomElement(Bar)// export individual elementsexport{ MyFoo, MyBar }exportfunctionregister() {customElements.define('my-foo', MyFoo)customElements.define('my-bar', MyBar)}"
                },
                {
                    "type": "p",
                    "text": "If you have many components, you can also leverage build tool features such as Vite'sglob importor webpack'srequire.contextto load all components from a directory."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Web Components and TypeScript​"
                },
                {
                    "type": "p",
                    "text": "If you are developing an application or a library, you may want totype checkyour Vue components, including those that are defined as custom elements."
                },
                {
                    "type": "p",
                    "text": "Custom elements are registered globally using native APIs, so by default they won't have type inference when used in Vue templates. To provide type support for Vue components registered as custom elements, we can register global component typings using the theGlobalComponentsinterfacein Vue templates and/or inJSX:"
                },
                {
                    "type": "code",
                    "code": "import{ defineCustomElement }from'vue'// vue SFCimportCounterSFCfrom'./src/components/counter.ce.vue'// turn component into web componentsexportconstCounter=defineCustomElement(CounterSFC)// register global typingsdeclaremodule'vue'{exportinterfaceGlobalComponents{Counter:typeofCounter}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Web Components vs. Vue Components​"
                },
                {
                    "type": "p",
                    "text": "Some developers believe that framework-proprietary component models should be avoided, and that exclusively using Custom Elements makes an application \"future-proof\". Here we will try to explain why we believe that this is an overly simplistic take on the problem."
                },
                {
                    "type": "p",
                    "text": "There is indeed a certain level of feature overlap between Custom Elements and Vue Components: they both allow us to define reusable components with data passing, event emitting, and lifecycle management. However, Web Components APIs are relatively low-level and bare-bones. To build an actual application, we need quite a few additional capabilities which the platform does not cover:"
                },
                {
                    "type": "list",
                    "items": [
                        "A declarative and efficient templating system;",
                        "A reactive state management system that facilitates cross-component logic extraction and reuse;",
                        "A performant way to render the components on the server and hydrate them on the client (SSR), which is important for SEO andWeb Vitals metrics such as LCP. Native custom elements SSR typically involves simulating the DOM in Node.js and then serializing the mutated DOM, while Vue SSR compiles into string concatenation whenever possible, which is much more efficient."
                    ]
                },
                {
                    "type": "p",
                    "text": "A declarative and efficient templating system;"
                },
                {
                    "type": "p",
                    "text": "A reactive state management system that facilitates cross-component logic extraction and reuse;"
                },
                {
                    "type": "p",
                    "text": "A performant way to render the components on the server and hydrate them on the client (SSR), which is important for SEO andWeb Vitals metrics such as LCP. Native custom elements SSR typically involves simulating the DOM in Node.js and then serializing the mutated DOM, while Vue SSR compiles into string concatenation whenever possible, which is much more efficient."
                },
                {
                    "type": "p",
                    "text": "Vue's component model is designed with these needs in mind as a coherent system."
                },
                {
                    "type": "p",
                    "text": "With a competent engineering team, you could probably build the equivalent on top of native Custom Elements - but this also means you are taking on the long-term maintenance burden of an in-house framework, while losing out on the ecosystem and community benefits of a mature framework like Vue."
                },
                {
                    "type": "p",
                    "text": "There are also frameworks built using Custom Elements as the basis of their component model, but they all inevitably have to introduce their proprietary solutions to the problems listed above. Using these frameworks entails buying into their technical decisions on how to solve these problems - which, despite what may be advertised, doesn't automatically insulate you from potential future churns."
                },
                {
                    "type": "p",
                    "text": "There are also some areas where we find custom elements to be limiting:"
                },
                {
                    "type": "list",
                    "items": [
                        "Eager slot evaluation hinders component composition. Vue'sscoped slotsare a powerful mechanism for component composition, which can't be supported by custom elements due to native slots' eager nature. Eager slots also mean the receiving component cannot control when or whether to render a piece of slot content.",
                        "Shipping custom elements with shadow DOM scoped CSS today requires embedding the CSS inside JavaScript so that they can be injected into shadow roots at runtime. They also result in duplicated styles in markup in SSR scenarios. There areplatform featuresbeing worked on in this area - but as of now they are not yet universally supported, and there are still production performance / SSR concerns to be addressed. In the meanwhile, Vue SFCs provideCSS scoping mechanismsthat support extracting the styles into plain CSS files."
                    ]
                },
                {
                    "type": "p",
                    "text": "Eager slot evaluation hinders component composition. Vue'sscoped slotsare a powerful mechanism for component composition, which can't be supported by custom elements due to native slots' eager nature. Eager slots also mean the receiving component cannot control when or whether to render a piece of slot content."
                },
                {
                    "type": "p",
                    "text": "Shipping custom elements with shadow DOM scoped CSS today requires embedding the CSS inside JavaScript so that they can be injected into shadow roots at runtime. They also result in duplicated styles in markup in SSR scenarios. There areplatform featuresbeing worked on in this area - but as of now they are not yet universally supported, and there are still production performance / SSR concerns to be addressed. In the meanwhile, Vue SFCs provideCSS scoping mechanismsthat support extracting the styles into plain CSS files."
                },
                {
                    "type": "p",
                    "text": "Vue will always stay up to date with the latest standards in the web platform, and we will happily leverage whatever the platform provides if it makes our job easier. However, our goal is to provide solutions that work well and work today. That means we have to incorporate new platform features with a critical mindset - and that involves filling the gaps where the standards fall short while that is still the case."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/introduction",
            "title": "Introduction | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "You are reading the documentation for Vue 3!"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue 2 support has ended onDec 31, 2023. Learn more aboutVue 2 EOL.",
                        "Upgrading from Vue 2? Check out theMigration Guide."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn Vue with video tutorials onVueMastery.com"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Vue?​"
                },
                {
                    "type": "p",
                    "text": "Vue (pronounced /vjuː/, likeview) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity."
                },
                {
                    "type": "p",
                    "text": "Here is a minimal example:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'createApp({data() {return{count:0}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "import{ createApp, ref }from'vue'createApp({setup() {return{count:ref(0)}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\"><button@click=\"count++\">Count is: {{ count }}</button></div>"
                },
                {
                    "type": "p",
                    "text": "Result"
                },
                {
                    "type": "p",
                    "text": "The above example demonstrates the two core features of Vue:"
                },
                {
                    "type": "list",
                    "items": [
                        "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.",
                        "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                    ]
                },
                {
                    "type": "p",
                    "text": "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state."
                },
                {
                    "type": "p",
                    "text": "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                },
                {
                    "type": "p",
                    "text": "You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers."
                },
                {
                    "type": "p",
                    "text": "Prerequisites"
                },
                {
                    "type": "p",
                    "text": "The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews forJavaScript,HTMLandCSSif needed. Prior experience with other frameworks helps, but is not required."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The Progressive Framework​"
                },
                {
                    "type": "p",
                    "text": "Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Enhancing static HTML without a build step",
                        "Embedding as Web Components on any page",
                        "Single-Page Application (SPA)",
                        "Fullstack / Server-Side Rendering (SSR)",
                        "Jamstack / Static Site Generation (SSG)",
                        "Targeting desktop, mobile, WebGL, and even the terminal"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these."
                },
                {
                    "type": "p",
                    "text": "If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail inWays of Using Vue."
                },
                {
                    "type": "p",
                    "text": "Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-File Components​"
                },
                {
                    "type": "p",
                    "text": "In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format calledSingle-File Component(also known as*.vuefiles, abbreviated asSFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{count:0}}}</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "p",
                    "text": "SFC is a defining feature of Vue and is the recommended way to author Vue componentsifyour use case warrants a build setup. You can learn more about thehow and why of SFCin its dedicated section - but for now, just know that Vue will handle all the build tools setup for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Styles​"
                },
                {
                    "type": "p",
                    "text": "Vue components can be authored in two different API styles:Options APIandComposition API."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options API​"
                },
                {
                    "type": "p",
                    "text": "With Options API, we define a component's logic using an object of options such asdata,methods, andmounted. Properties defined by options are exposed onthisinside functions, which points to the component instance:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{// Properties returned from data() become reactive state// and will be exposed on `this`.data() {return{count:0}},// Methods are functions that mutate state and trigger updates.// They can be bound as event handlers in templates.methods: {increment() {this.count++}},// Lifecycle hooks are called at different stages// of a component's lifecycle.// This function will be called when the component is mounted.mounted() {console.log(`The initial count is ${this.count}.`)}}</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composition API​"
                },
                {
                    "type": "p",
                    "text": "With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with<script setup>. Thesetupattribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in<script setup>are directly usable in the template."
                },
                {
                    "type": "p",
                    "text": "Here is the same component, with the exact same template, but using Composition API and<script setup>instead:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'// reactive stateconstcount=ref(0)// functions that mutate state and trigger updatesfunctionincrement() {count.value++}// lifecycle hooksonMounted(()=>{console.log(`The initial count is ${count.value}.`)})</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Which to Choose?​"
                },
                {
                    "type": "p",
                    "text": "Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles."
                },
                {
                    "type": "p",
                    "text": "The Options API is centered around the concept of a \"component instance\" (thisas seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups."
                },
                {
                    "type": "p",
                    "text": "The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic."
                },
                {
                    "type": "p",
                    "text": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in theComposition API FAQ."
                },
                {
                    "type": "p",
                    "text": "If you are new to Vue, here's our general recommendation:"
                },
                {
                    "type": "list",
                    "items": [
                        "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.",
                        "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.",
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later."
                },
                {
                    "type": "p",
                    "text": "For production use:"
                },
                {
                    "type": "list",
                    "items": [
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement."
                },
                {
                    "type": "p",
                    "text": "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                },
                {
                    "type": "p",
                    "text": "You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using theAPI Preference switchesat the top of the left sidebar."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Still Got Questions?​"
                },
                {
                    "type": "p",
                    "text": "Check out ourFAQ."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pick Your Learning Path​"
                },
                {
                    "type": "p",
                    "text": "Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!"
                },
                {
                    "type": "p",
                    "text": "Try the Tutorial"
                },
                {
                    "type": "p",
                    "text": "For those who prefer learning things hands-on."
                },
                {
                    "type": "p",
                    "text": "Read the Guide"
                },
                {
                    "type": "p",
                    "text": "The guide walks you through every aspect of the framework in full detail."
                },
                {
                    "type": "p",
                    "text": "Check out the Examples"
                },
                {
                    "type": "p",
                    "text": "Explore examples of core features and common UI tasks."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/introduction.html#api-styles",
            "title": "Introduction | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "You are reading the documentation for Vue 3!"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue 2 support has ended onDec 31, 2023. Learn more aboutVue 2 EOL.",
                        "Upgrading from Vue 2? Check out theMigration Guide."
                    ]
                },
                {
                    "type": "p",
                    "text": "Learn Vue with video tutorials onVueMastery.com"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is Vue?​"
                },
                {
                    "type": "p",
                    "text": "Vue (pronounced /vjuː/, likeview) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity."
                },
                {
                    "type": "p",
                    "text": "Here is a minimal example:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'createApp({data() {return{count:0}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "import{ createApp, ref }from'vue'createApp({setup() {return{count:ref(0)}}}).mount('#app')"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\"><button@click=\"count++\">Count is: {{ count }}</button></div>"
                },
                {
                    "type": "p",
                    "text": "Result"
                },
                {
                    "type": "p",
                    "text": "The above example demonstrates the two core features of Vue:"
                },
                {
                    "type": "list",
                    "items": [
                        "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.",
                        "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                    ]
                },
                {
                    "type": "p",
                    "text": "Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state."
                },
                {
                    "type": "p",
                    "text": "Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen."
                },
                {
                    "type": "p",
                    "text": "You may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers."
                },
                {
                    "type": "p",
                    "text": "Prerequisites"
                },
                {
                    "type": "p",
                    "text": "The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with these overviews forJavaScript,HTMLandCSSif needed. Prior experience with other frameworks helps, but is not required."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "The Progressive Framework​"
                },
                {
                    "type": "p",
                    "text": "Vue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Enhancing static HTML without a build step",
                        "Embedding as Web Components on any page",
                        "Single-Page Application (SPA)",
                        "Fullstack / Server-Side Rendering (SSR)",
                        "Jamstack / Static Site Generation (SSG)",
                        "Targeting desktop, mobile, WebGL, and even the terminal"
                    ]
                },
                {
                    "type": "p",
                    "text": "If you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these."
                },
                {
                    "type": "p",
                    "text": "If you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail inWays of Using Vue."
                },
                {
                    "type": "p",
                    "text": "Despite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-File Components​"
                },
                {
                    "type": "p",
                    "text": "In most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format calledSingle-File Component(also known as*.vuefiles, abbreviated asSFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{count:0}}}</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constcount=ref(0)</script><template><button@click=\"count++\">Count is: {{ count }}</button></template><stylescoped>button{font-weight:bold;}</style>"
                },
                {
                    "type": "p",
                    "text": "SFC is a defining feature of Vue and is the recommended way to author Vue componentsifyour use case warrants a build setup. You can learn more about thehow and why of SFCin its dedicated section - but for now, just know that Vue will handle all the build tools setup for you."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API Styles​"
                },
                {
                    "type": "p",
                    "text": "Vue components can be authored in two different API styles:Options APIandComposition API."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Options API​"
                },
                {
                    "type": "p",
                    "text": "With Options API, we define a component's logic using an object of options such asdata,methods, andmounted. Properties defined by options are exposed onthisinside functions, which points to the component instance:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{// Properties returned from data() become reactive state// and will be exposed on `this`.data() {return{count:0}},// Methods are functions that mutate state and trigger updates.// They can be bound as event handlers in templates.methods: {increment() {this.count++}},// Lifecycle hooks are called at different stages// of a component's lifecycle.// This function will be called when the component is mounted.mounted() {console.log(`The initial count is ${this.count}.`)}}</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composition API​"
                },
                {
                    "type": "p",
                    "text": "With Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with<script setup>. Thesetupattribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in<script setup>are directly usable in the template."
                },
                {
                    "type": "p",
                    "text": "Here is the same component, with the exact same template, but using Composition API and<script setup>instead:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted }from'vue'// reactive stateconstcount=ref(0)// functions that mutate state and trigger updatesfunctionincrement() {count.value++}// lifecycle hooksonMounted(()=>{console.log(`The initial count is ${count.value}.`)})</script><template><button@click=\"increment\">Count is: {{ count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Which to Choose?​"
                },
                {
                    "type": "p",
                    "text": "Both API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles."
                },
                {
                    "type": "p",
                    "text": "The Options API is centered around the concept of a \"component instance\" (thisas seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups."
                },
                {
                    "type": "p",
                    "text": "The Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic."
                },
                {
                    "type": "p",
                    "text": "You can learn more about the comparison between the two styles and the potential benefits of Composition API in theComposition API FAQ."
                },
                {
                    "type": "p",
                    "text": "If you are new to Vue, here's our general recommendation:"
                },
                {
                    "type": "list",
                    "items": [
                        "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.",
                        "For production use:Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.Go with Composition API + Single-File Components if you plan to build full applications with Vue.",
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later."
                },
                {
                    "type": "p",
                    "text": "For production use:"
                },
                {
                    "type": "list",
                    "items": [
                        "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.",
                        "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement."
                },
                {
                    "type": "p",
                    "text": "Go with Composition API + Single-File Components if you plan to build full applications with Vue."
                },
                {
                    "type": "p",
                    "text": "You don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using theAPI Preference switchesat the top of the left sidebar."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Still Got Questions?​"
                },
                {
                    "type": "p",
                    "text": "Check out ourFAQ."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pick Your Learning Path​"
                },
                {
                    "type": "p",
                    "text": "Different developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!"
                },
                {
                    "type": "p",
                    "text": "Try the Tutorial"
                },
                {
                    "type": "p",
                    "text": "For those who prefer learning things hands-on."
                },
                {
                    "type": "p",
                    "text": "Read the Guide"
                },
                {
                    "type": "p",
                    "text": "The guide walks you through every aspect of the framework in full detail."
                },
                {
                    "type": "p",
                    "text": "Check out the Examples"
                },
                {
                    "type": "p",
                    "text": "Explore examples of core features and common UI tasks."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/quick-start",
            "title": "Quick Start | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Quick Start​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Try Vue Online​"
                },
                {
                    "type": "list",
                    "items": [
                        "To quickly get a taste of Vue, you can try it directly in ourPlayground.",
                        "If you prefer a plain HTML setup without any build steps, you can use thisJSFiddleas your starting point.",
                        "If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser onStackBlitz."
                    ]
                },
                {
                    "type": "p",
                    "text": "To quickly get a taste of Vue, you can try it directly in ourPlayground."
                },
                {
                    "type": "p",
                    "text": "If you prefer a plain HTML setup without any build steps, you can use thisJSFiddleas your starting point."
                },
                {
                    "type": "p",
                    "text": "If you are already familiar with Node.js and the concept of build tools, you can also try a complete build setup right within your browser onStackBlitz."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Creating a Vue Application​"
                },
                {
                    "type": "p",
                    "text": "Prerequisites"
                },
                {
                    "type": "list",
                    "items": [
                        "Familiarity with the command line",
                        "InstallNode.jsversion 18.3 or higher"
                    ]
                },
                {
                    "type": "p",
                    "text": "In this section we will introduce how to scaffold a VueSingle Page Applicationon your local machine. The created project will be using a build setup based onViteand allow us to use VueSingle-File Components(SFCs)."
                },
                {
                    "type": "p",
                    "text": "Make sure you have an up-to-date version ofNode.jsinstalled and your current working directory is the one where you intend to create a project. Run the following command in your command line (without the$sign):"
                },
                {
                    "type": "code",
                    "code": "$npmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "$pnpmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "# For Yarn (v1+)$yarncreatevue# For Yarn Modern (v2+)$yarncreatevue@latest# For Yarn ^v4.11$yarndlxcreate-vue@latest"
                },
                {
                    "type": "code",
                    "code": "$buncreatevue@latest"
                },
                {
                    "type": "p",
                    "text": "This command will install and executecreate-vue, the official Vue project scaffolding tool. You will be presented with prompts for several optional features such as TypeScript and testing support:"
                },
                {
                    "type": "code",
                    "code": "✔Project name:…<your-project-name>✔Add TypeScript?…No/ Yes✔Add JSX Support?…No/ Yes✔Add Vue Router for Single Page Application development?…No/ Yes✔Add Pinia for state management?…No/ Yes✔Add Vitest for Unit testing?…No/ Yes✔Add an End-to-End Testing Solution?…No/ Cypress / Nightwatch / Playwright✔Add ESLint for code quality?… No /Yes✔Add Prettier for code formatting?…No/ Yes✔Add Vue DevTools 7 extension for debugging? (experimental)…No/ YesScaffolding project in ./<your-project-name>...Done."
                },
                {
                    "type": "p",
                    "text": "If you are unsure about an option, simply chooseNoby hitting enter for now. Once the project is created, follow the instructions to install dependencies and start the dev server:"
                },
                {
                    "type": "code",
                    "code": "$cd<your-project-name>$npminstall$npmrundev"
                },
                {
                    "type": "code",
                    "code": "$cd<your-project-name>$pnpminstall$pnpmrundev"
                },
                {
                    "type": "code",
                    "code": "$cd<your-project-name>$yarn$yarndev"
                },
                {
                    "type": "code",
                    "code": "$cd<your-project-name>$buninstall$bunrundev"
                },
                {
                    "type": "p",
                    "text": "You should now have your first Vue project running! Note that the example components in the generated project are written using theComposition APIand<script setup>, rather than theOptions API. Here are some additional tips:"
                },
                {
                    "type": "list",
                    "items": [
                        "The recommended IDE setup isVisual Studio Code+Vue - Official extension. If you use other editors, check out theIDE support section.",
                        "More tooling details, including integration with backend frameworks, are discussed in theTooling Guide.",
                        "To learn more about the underlying build tool Vite, check out theVite docs.",
                        "If you choose to use TypeScript, check out theTypeScript Usage Guide."
                    ]
                },
                {
                    "type": "p",
                    "text": "When you are ready to ship your app to production, run the following:"
                },
                {
                    "type": "code",
                    "code": "$npmrunbuild"
                },
                {
                    "type": "code",
                    "code": "$pnpmrunbuild"
                },
                {
                    "type": "code",
                    "code": "$yarnbuild"
                },
                {
                    "type": "code",
                    "code": "$bunrunbuild"
                },
                {
                    "type": "p",
                    "text": "This will create a production-ready build of your app in the project's./distdirectory. Check out theProduction Deployment Guideto learn more about shipping your app to production."
                },
                {
                    "type": "p",
                    "text": "Next Steps >"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Vue from CDN​"
                },
                {
                    "type": "p",
                    "text": "You can use Vue directly from a CDN via a script tag:"
                },
                {
                    "type": "code",
                    "code": "<scriptsrc=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>"
                },
                {
                    "type": "p",
                    "text": "Here we are usingunpkg, but you can also use any CDN that serves npm packages, for examplejsdelivrorcdnjs. Of course, you can also download this file and serve it yourself."
                },
                {
                    "type": "p",
                    "text": "When using Vue from a CDN, there is no \"build step\" involved. This makes the setup a lot simpler, and is suitable for enhancing static HTML or integrating with a backend framework. However, you won't be able to use the Single-File Component (SFC) syntax."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the Global Build​"
                },
                {
                    "type": "p",
                    "text": "The above link loads theglobal buildof Vue, where all top-level APIs are exposed as properties on the globalVueobject. Here is a full example using the global build:"
                },
                {
                    "type": "code",
                    "code": "<scriptsrc=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script><divid=\"app\">{{ message }}</div><script>const{createApp}=VuecreateApp({data() {return{message:'Hello Vue!'}}}).mount('#app')</script>"
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "code",
                    "code": "<scriptsrc=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script><divid=\"app\">{{ message }}</div><script>const{createApp,ref}=VuecreateApp({setup() {constmessage=ref('Hello vue!')return{message}}}).mount('#app')</script>"
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Many of the examples for Composition API throughout the guide will be using the<script setup>syntax, which requires build tools. If you intend to use Composition API without a build step, consult the usage of thesetup()option."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using the ES Module Build​"
                },
                {
                    "type": "p",
                    "text": "Throughout the rest of the documentation, we will be primarily usingES modulessyntax. Most modern browsers now support ES modules natively, so we can use Vue from a CDN via native ES modules like this:"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\">{{ message }}</div><scripttype=\"module\">import{ createApp }from'https://unpkg.com/vue@3/dist/vue.esm-browser.js'createApp({data() {return{message:'Hello Vue!'}}}).mount('#app')</script>"
                },
                {
                    "type": "code",
                    "code": "<divid=\"app\">{{ message }}</div><scripttype=\"module\">import{ createApp, ref }from'https://unpkg.com/vue@3/dist/vue.esm-browser.js'createApp({setup() {constmessage=ref('Hello Vue!')return{message}}}).mount('#app')</script>"
                },
                {
                    "type": "p",
                    "text": "Notice that we are using<script type=\"module\">, and the imported CDN URL is pointing to theES modules buildof Vue instead."
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Enabling Import maps​"
                },
                {
                    "type": "p",
                    "text": "In the above example, we are importing from the full CDN URL, but in the rest of the documentation you will see code like this:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'"
                },
                {
                    "type": "p",
                    "text": "We can teach the browser where to locate thevueimport by usingImport Maps:"
                },
                {
                    "type": "code",
                    "code": "<scripttype=\"importmap\">{\"imports\": {\"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"}}</script><divid=\"app\">{{ message }}</div><scripttype=\"module\">import{ createApp }from'vue'createApp({data() {return{message:'Hello Vue!'}}}).mount('#app')</script>"
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "code",
                    "code": "<scripttype=\"importmap\">{\"imports\": {\"vue\": \"https://unpkg.com/vue@3/dist/vue.esm-browser.js\"}}</script><divid=\"app\">{{ message }}</div><scripttype=\"module\">import{ createApp, ref }from'vue'createApp({setup() {constmessage=ref('Hello Vue!')return{message}}}).mount('#app')</script>"
                },
                {
                    "type": "p",
                    "text": "CodePen Demo >"
                },
                {
                    "type": "p",
                    "text": "You can also add entries for other dependencies to the import map - but make sure they point to the ES modules version of the library you intend to use."
                },
                {
                    "type": "p",
                    "text": "Import Maps Browser Support"
                },
                {
                    "type": "p",
                    "text": "Import Maps is a relatively new browser feature. Make sure to use a browser within itssupport range. In particular, it is only supported in Safari 16.4+."
                },
                {
                    "type": "p",
                    "text": "Notes on Production Use"
                },
                {
                    "type": "p",
                    "text": "The examples so far are using the development build of Vue - if you intend to use Vue from a CDN in production, make sure to check out theProduction Deployment Guide."
                },
                {
                    "type": "p",
                    "text": "While it is possible to use Vue without a build system, an alternative approach to consider is usingvuejs/petite-vuethat could better suit the context wherejquery/jquery(in the past) oralpinejs/alpine(in the present) might be used instead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Splitting Up the Modules​"
                },
                {
                    "type": "p",
                    "text": "As we dive deeper into the guide, we may need to split our code into separate JavaScript files so that they are easier to manage. For example:"
                },
                {
                    "type": "code",
                    "code": "<!-- index.html --><divid=\"app\"></div><scripttype=\"module\">import{ createApp }from'vue'importMyComponentfrom'./my-component.js'createApp(MyComponent).mount('#app')</script>"
                },
                {
                    "type": "code",
                    "code": "// my-component.jsexportdefault{data() {return{ count:0}},template:`<div>Count is: {{ count }}</div>`}"
                },
                {
                    "type": "code",
                    "code": "// my-component.jsimport{ ref }from'vue'exportdefault{setup() {constcount=ref(0)return{ count }},template:`<div>Count is: {{ count }}</div>`}"
                },
                {
                    "type": "p",
                    "text": "If you directly open the aboveindex.htmlin your browser, you will find that it throws an error because ES modules cannot work over thefile://protocol, which is the protocol the browser uses when you open a local file."
                },
                {
                    "type": "p",
                    "text": "Due to security reasons, ES modules can only work over thehttp://protocol, which is what the browsers use when opening pages on the web. In order for ES modules to work on our local machine, we need to serve theindex.htmlover thehttp://protocol, with a local HTTP server."
                },
                {
                    "type": "p",
                    "text": "To start a local HTTP server, first make sure you haveNode.jsinstalled, then runnpx servefrom the command line in the same directory where your HTML file is. You can also use any other HTTP server that can serve static files with the correct MIME types."
                },
                {
                    "type": "p",
                    "text": "You may have noticed that the imported component's template is inlined as a JavaScript string. If you are using VS Code, you can install thees6-string-htmlextension and prefix the strings with a/*html*/comment to get syntax highlighting for them."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Next Steps​"
                },
                {
                    "type": "p",
                    "text": "If you skipped theIntroduction, we strongly recommend reading it before moving on to the rest of the documentation."
                },
                {
                    "type": "p",
                    "text": "Continue with the Guide"
                },
                {
                    "type": "p",
                    "text": "The guide walks you through every aspect of the framework in full detail."
                },
                {
                    "type": "p",
                    "text": "Try the Tutorial"
                },
                {
                    "type": "p",
                    "text": "For those who prefer learning things hands-on."
                },
                {
                    "type": "p",
                    "text": "Check out the Examples"
                },
                {
                    "type": "p",
                    "text": "Explore examples of core features and common UI tasks."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/reusability/composables",
            "title": "Composables | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Composables​"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "This section assumes basic knowledge of Composition API. If you have been learning Vue with Options API only, you can set the API Preference to Composition API (using the toggle at the top of the left sidebar) and re-read theReactivity FundamentalsandLifecycle Hookschapters."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is a \"Composable\"?​"
                },
                {
                    "type": "p",
                    "text": "In the context of Vue applications, a \"composable\" is a function that leverages Vue's Composition API to encapsulate and reusestateful logic."
                },
                {
                    "type": "p",
                    "text": "When building frontend applications, we often need to reuse logic for common tasks. For example, we may need to format dates in many places, so we extract a reusable function for that. This formatter function encapsulatesstateless logic: it takes some input and immediately returns expected output. There are many libraries out there for reusing stateless logic - for examplelodashanddate-fns, which you may have heard of."
                },
                {
                    "type": "p",
                    "text": "By contrast, stateful logic involves managing state that changes over time. A simple example would be tracking the current position of the mouse on a page. In real-world scenarios, it could also be more complex logic such as touch gestures or connection status to a database."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Mouse Tracker Example​"
                },
                {
                    "type": "p",
                    "text": "If we were to implement the mouse tracking functionality using the Composition API directly inside a component, it would look like this:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, onMounted, onUnmounted }from'vue'constx=ref(0)consty=ref(0)functionupdate(event) {x.value=event.pageXy.value=event.pageY}onMounted(()=>window.addEventListener('mousemove', update))onUnmounted(()=>window.removeEventListener('mousemove', update))</script><template>Mouse position is at: {{ x }}, {{ y }}</template>"
                },
                {
                    "type": "p",
                    "text": "But what if we want to reuse the same logic in multiple components? We can extract the logic into an external file, as a composable function:"
                },
                {
                    "type": "code",
                    "code": "// mouse.jsimport{ ref, onMounted, onUnmounted }from'vue'// by convention, composable function names start with \"use\"exportfunctionuseMouse() {// state encapsulated and managed by the composableconstx=ref(0)consty=ref(0)// a composable can update its managed state over time.functionupdate(event) {x.value=event.pageXy.value=event.pageY}// a composable can also hook into its owner component's// lifecycle to setup and teardown side effects.onMounted(()=>window.addEventListener('mousemove', update))onUnmounted(()=>window.removeEventListener('mousemove', update))// expose managed state as return valuereturn{ x, y }}"
                },
                {
                    "type": "p",
                    "text": "And this is how it can be used in components:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useMouse }from'./mouse.js'const{x,y}=useMouse()</script><template>Mouse position is at: {{ x }}, {{ y }}</template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "As we can see, the core logic remains identical - all we had to do was move it into an external function and return the state that should be exposed. Just like inside a component, you can use the full range ofComposition API functionsin composables. The sameuseMouse()functionality can now be used in any component."
                },
                {
                    "type": "p",
                    "text": "The cooler part about composables though, is that you can also nest them: one composable function can call one or more other composable functions. This enables us to compose complex logic using small, isolated units, similar to how we compose an entire application using components. In fact, this is why we decided to call the collection of APIs that make this pattern possible Composition API."
                },
                {
                    "type": "p",
                    "text": "For example, we can extract the logic of adding and removing a DOM event listener into its own composable:"
                },
                {
                    "type": "code",
                    "code": "// event.jsimport{ onMounted, onUnmounted }from'vue'exportfunctionuseEventListener(target,event,callback) {// if you want, you can also make this// support selector strings as targetonMounted(()=>target.addEventListener(event, callback))onUnmounted(()=>target.removeEventListener(event, callback))}"
                },
                {
                    "type": "p",
                    "text": "And now ouruseMouse()composable can be simplified to:"
                },
                {
                    "type": "code",
                    "code": "// mouse.jsimport{ ref }from'vue'import{ useEventListener }from'./event'exportfunctionuseMouse() {constx=ref(0)consty=ref(0)useEventListener(window,'mousemove', (event)=>{x.value=event.pageXy.value=event.pageY})return{ x, y }}"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Each component instance callinguseMouse()will create its own copies ofxandystate so they won't interfere with one another. If you want to manage shared state between components, read theState Managementchapter."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Async State Example​"
                },
                {
                    "type": "p",
                    "text": "TheuseMouse()composable doesn't take any arguments, so let's take a look at another example that makes use of one. When doing async data fetching, we often need to handle different states: loading, success, and error:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constdata=ref(null)consterror=ref(null)fetch('...').then((res)=>res.json()).then((json)=>(data.value=json)).catch((err)=>(error.value=err))</script><template><divv-if=\"error\">Oops! Error encountered: {{ error.message }}</div><divv-else-if=\"data\">Data loaded:<pre>{{ data }}</pre></div><divv-else>Loading...</div></template>"
                },
                {
                    "type": "p",
                    "text": "It would be tedious to have to repeat this pattern in every component that needs to fetch data. Let's extract it into a composable:"
                },
                {
                    "type": "code",
                    "code": "// fetch.jsimport{ ref }from'vue'exportfunctionuseFetch(url) {constdata=ref(null)consterror=ref(null)fetch(url).then((res)=>res.json()).then((json)=>(data.value=json)).catch((err)=>(error.value=err))return{ data, error }}"
                },
                {
                    "type": "p",
                    "text": "Now in our component we can just do:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useFetch }from'./fetch.js'const{data,error}=useFetch('...')</script>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Accepting Reactive State​"
                },
                {
                    "type": "p",
                    "text": "useFetch()takes a static URL string as input - so it performs the fetch only once and is then done. What if we want it to re-fetch whenever the URL changes? In order to achieve this, we need to pass reactive state into the composable function, and let the composable create watchers that perform actions using the passed state."
                },
                {
                    "type": "p",
                    "text": "For example,useFetch()should be able to accept a ref:"
                },
                {
                    "type": "code",
                    "code": "consturl=ref('/initial-url')const{data,error}=useFetch(url)// this should trigger a re-fetchurl.value='/new-url'"
                },
                {
                    "type": "p",
                    "text": "Or, accept agetter function:"
                },
                {
                    "type": "code",
                    "code": "// re-fetch when props.id changesconst{data,error}=useFetch(()=>`/posts/${props.id}`)"
                },
                {
                    "type": "p",
                    "text": "We can refactor our existing implementation with thewatchEffect()andtoValue()APIs:"
                },
                {
                    "type": "code",
                    "code": "// fetch.jsimport{ ref, watchEffect, toValue }from'vue'exportfunctionuseFetch(url) {constdata=ref(null)consterror=ref(null)constfetchData=()=>{// reset state before fetching..data.value=nullerror.value=nullfetch(toValue(url)).then((res)=>res.json()).then((json)=>(data.value=json)).catch((err)=>(error.value=err))}watchEffect(()=>{fetchData()})return{ data, error }}"
                },
                {
                    "type": "p",
                    "text": "toValue()is an API added in 3.3. It is designed to normalize refs or getters into values. If the argument is a ref, it returns the ref's value; if the argument is a function, it will call the function and return its return value. Otherwise, it returns the argument as-is. It works similarly tounref(), but with special treatment for functions."
                },
                {
                    "type": "p",
                    "text": "Notice thattoValue(url)is calledinsidethewatchEffectcallback. This ensures that any reactive dependencies accessed during thetoValue()normalization are tracked by the watcher."
                },
                {
                    "type": "p",
                    "text": "This version ofuseFetch()now accepts static URL strings, refs, and getters, making it much more flexible. The watch effect will run immediately, and will track any dependencies accessed duringtoValue(url). If no dependencies are tracked (e.g. url is already a string), the effect runs only once; otherwise, it will re-run whenever a tracked dependency changes."
                },
                {
                    "type": "p",
                    "text": "Here'sthe updated version ofuseFetch(), with an artificial delay and randomized error for demo purposes."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Conventions and Best Practices​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Naming​"
                },
                {
                    "type": "p",
                    "text": "It is a convention to name composable functions with camelCase names that start with \"use\"."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Input Arguments​"
                },
                {
                    "type": "p",
                    "text": "A composable can accept ref or getter arguments even if it doesn't rely on them for reactivity. If you are writing a composable that may be used by other developers, it's a good idea to handle the case of input arguments being refs or getters instead of raw values. ThetoValue()utility function will come in handy for this purpose:"
                },
                {
                    "type": "code",
                    "code": "import{ toValue }from'vue'functionuseFeature(maybeRefOrGetter) {// If maybeRefOrGetter is a ref or a getter,// its normalized value will be returned.// Otherwise, it is returned as-is.constvalue=toValue(maybeRefOrGetter)}"
                },
                {
                    "type": "p",
                    "text": "If your composable creates reactive effects when the input is a ref or a getter, make sure to either explicitly watch the ref / getter withwatch(), or calltoValue()inside awatchEffect()so that it is properly tracked."
                },
                {
                    "type": "p",
                    "text": "TheuseFetch() implementation discussed earlierprovides a concrete example of a composable that accepts refs, getters and plain values as input argument."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Return Values​"
                },
                {
                    "type": "p",
                    "text": "You have probably noticed that we have been exclusively usingref()instead ofreactive()in composables. The recommended convention is for composables to always return a plain, non-reactive object containing multiple refs. This allows it to be destructured in components while retaining reactivity:"
                },
                {
                    "type": "code",
                    "code": "// x and y are refsconst{x,y}=useMouse()"
                },
                {
                    "type": "p",
                    "text": "Returning a reactive object from a composable will cause such destructures to lose the reactivity connection to the state inside the composable, while the refs will retain that connection."
                },
                {
                    "type": "p",
                    "text": "If you prefer to use returned state from composables as object properties, you can wrap the returned object withreactive()so that the refs are unwrapped. For example:"
                },
                {
                    "type": "code",
                    "code": "constmouse=reactive(useMouse())// mouse.x is linked to original refconsole.log(mouse.x)"
                },
                {
                    "type": "code",
                    "code": "Mouse position is at: {{ mouse.x }}, {{ mouse.y }}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Side Effects​"
                },
                {
                    "type": "p",
                    "text": "It is OK to perform side effects (e.g. adding DOM event listeners or fetching data) in composables, but pay attention to the following rules:"
                },
                {
                    "type": "list",
                    "items": [
                        "If you are working on an application that usesServer-Side Rendering(SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g.onMounted(). These hooks are only called in the browser, so you can be sure that code inside them has access to the DOM.",
                        "Remember to clean up side effects inonUnmounted(). For example, if a composable sets up a DOM event listener, it should remove that listener inonUnmounted()as we have seen in theuseMouse()example. It can be a good idea to use a composable that automatically does this for you, like theuseEventListener()example."
                    ]
                },
                {
                    "type": "p",
                    "text": "If you are working on an application that usesServer-Side Rendering(SSR), make sure to perform DOM-specific side effects in post-mount lifecycle hooks, e.g.onMounted(). These hooks are only called in the browser, so you can be sure that code inside them has access to the DOM."
                },
                {
                    "type": "p",
                    "text": "Remember to clean up side effects inonUnmounted(). For example, if a composable sets up a DOM event listener, it should remove that listener inonUnmounted()as we have seen in theuseMouse()example. It can be a good idea to use a composable that automatically does this for you, like theuseEventListener()example."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usage Restrictions​"
                },
                {
                    "type": "p",
                    "text": "Composables should only be called in<script setup>or thesetup()hook. They should also be calledsynchronouslyin these contexts. In some cases, you can also call them in lifecycle hooks likeonMounted()."
                },
                {
                    "type": "p",
                    "text": "These restrictions are important because these are the contexts where Vue is able to determine the current active component instance. Access to an active component instance is necessary so that:"
                },
                {
                    "type": "list",
                    "items": [
                        "Lifecycle hooks can be registered to it.",
                        "Computed properties and watchers can be linked to it, so that they can be disposed when the instance is unmounted to prevent memory leaks."
                    ]
                },
                {
                    "type": "p",
                    "text": "Lifecycle hooks can be registered to it."
                },
                {
                    "type": "p",
                    "text": "Computed properties and watchers can be linked to it, so that they can be disposed when the instance is unmounted to prevent memory leaks."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "<script setup>is the only place where you can call composablesafterusingawait. The compiler automatically restores the active instance context for you after the async operation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Extracting Composables for Code Organization​"
                },
                {
                    "type": "p",
                    "text": "Composables can be extracted not only for reuse, but also for code organization. As the complexity of your components grow, you may end up with components that are too large to navigate and reason about. Composition API gives you the full flexibility to organize your component code into smaller functions based on logical concerns:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ useFeatureA }from'./featureA.js'import{ useFeatureB }from'./featureB.js'import{ useFeatureC }from'./featureC.js'const{foo,bar}=useFeatureA()const{baz}=useFeatureB(foo)const{qux}=useFeatureC(baz)</script>"
                },
                {
                    "type": "p",
                    "text": "To some extent, you can think of these extracted composables as component-scoped services that can talk to one another."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Using Composables in Options API​"
                },
                {
                    "type": "p",
                    "text": "If you are using Options API, composables must be called insidesetup(), and the returned bindings must be returned fromsetup()so that they are exposed tothisand the template:"
                },
                {
                    "type": "code",
                    "code": "import{ useMouse }from'./mouse.js'import{ useFetch }from'./fetch.js'exportdefault{setup() {const{x,y}=useMouse()const{data,error}=useFetch('...')return{ x, y, data, error }},mounted() {// setup() exposed properties can be accessed on `this`console.log(this.x)}// ...other options}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Comparisons with Other Techniques​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vs. Mixins​"
                },
                {
                    "type": "p",
                    "text": "Users coming from Vue 2 may be familiar with themixinsoption, which also allows us to extract component logic into reusable units. There are three primary drawbacks to mixins:"
                },
                {
                    "type": "list",
                    "items": [
                        "Unclear source of properties: when using many mixins, it becomes unclear which instance property is injected by which mixin, making it difficult to trace the implementation and understand the component's behavior. This is also why we recommend using the refs + destructure pattern for composables: it makes the property source clear in consuming components.",
                        "Namespace collisions: multiple mixins from different authors can potentially register the same property keys, causing namespace collisions. With composables, you can rename the destructured variables if there are conflicting keys from different composables.",
                        "Implicit cross-mixin communication: multiple mixins that need to interact with one another have to rely on shared property keys, making them implicitly coupled. With composables, values returned from one composable can be passed into another as arguments, just like normal functions."
                    ]
                },
                {
                    "type": "p",
                    "text": "Unclear source of properties: when using many mixins, it becomes unclear which instance property is injected by which mixin, making it difficult to trace the implementation and understand the component's behavior. This is also why we recommend using the refs + destructure pattern for composables: it makes the property source clear in consuming components."
                },
                {
                    "type": "p",
                    "text": "Namespace collisions: multiple mixins from different authors can potentially register the same property keys, causing namespace collisions. With composables, you can rename the destructured variables if there are conflicting keys from different composables."
                },
                {
                    "type": "p",
                    "text": "Implicit cross-mixin communication: multiple mixins that need to interact with one another have to rely on shared property keys, making them implicitly coupled. With composables, values returned from one composable can be passed into another as arguments, just like normal functions."
                },
                {
                    "type": "p",
                    "text": "For the above reasons, we no longer recommend using mixins in Vue 3. The feature is kept only for migration and familiarity reasons."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vs. Renderless Components​"
                },
                {
                    "type": "p",
                    "text": "In the component slots chapter, we discussed theRenderless Componentpattern based on scoped slots. We even implemented the same mouse tracking demo using renderless components."
                },
                {
                    "type": "p",
                    "text": "The main advantage of composables over renderless components is that composables do not incur the extra component instance overhead. When used across an entire application, the amount of extra component instances created by the renderless component pattern can become a noticeable performance overhead."
                },
                {
                    "type": "p",
                    "text": "The recommendation is to use composables when reusing pure logic, and use components when reusing both logic and visual layout."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vs. React Hooks​"
                },
                {
                    "type": "p",
                    "text": "If you have experience with React, you may notice that this looks very similar to custom React hooks. Composition API was in part inspired by React hooks, and Vue composables are indeed similar to React hooks in terms of logic composition capabilities. However, Vue composables are based on Vue's fine-grained reactivity system, which is fundamentally different from React hooks' execution model. This is discussed in more detail in theComposition API FAQ."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Further Reading​"
                },
                {
                    "type": "list",
                    "items": [
                        "Reactivity In Depth: for a low-level understanding of how Vue's reactivity system works.",
                        "State Management: for patterns of managing state shared by multiple components.",
                        "Testing Composables: tips on unit testing composables.",
                        "VueUse: an ever-growing collection of Vue composables. The source code is also a great learning resource."
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/reusability/custom-directives",
            "title": "Custom Directives | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Custom Directives​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "In addition to the default set of directives shipped in core (likev-modelorv-show), Vue also allows you to register your own custom directives."
                },
                {
                    "type": "p",
                    "text": "We have introduced two forms of code reuse in Vue:componentsandcomposables. Components are the main building blocks, while composables are focused on reusing stateful logic. Custom directives, on the other hand, are mainly intended for reusing logic that involves low-level DOM access on plain elements."
                },
                {
                    "type": "p",
                    "text": "A custom directive is defined as an object containing lifecycle hooks similar to those of a component. The hooks receive the element the directive is bound to. Here is an example of a directive that focuses an input when the element is inserted into the DOM by Vue:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>// enables v-highlight in templatesconstvHighlight={mounted: (el)=>{el.classList.add('is-highlight')}}</script><template><pv-highlight>This sentence is important!</p></template>"
                },
                {
                    "type": "code",
                    "code": "consthighlight={mounted: (el)=>el.classList.add('is-highlight')}exportdefault{directives: {// enables v-highlight in templatehighlight}}"
                },
                {
                    "type": "code",
                    "code": "<pv-highlight>This sentence is important!</p>"
                },
                {
                    "type": "p",
                    "text": "This sentence is important!"
                },
                {
                    "type": "p",
                    "text": "In<script setup>, any camelCase variable that starts with thevprefix can be used as a custom directive. In the example above,vHighlightcan be used in the template asv-highlight."
                },
                {
                    "type": "p",
                    "text": "If you are not using<script setup>, custom directives can be registered using thedirectivesoption:"
                },
                {
                    "type": "code",
                    "code": "exportdefault{setup() {/*...*/},directives: {// enables v-highlight in templatehighlight: {/* ... */}}}"
                },
                {
                    "type": "p",
                    "text": "Similar to components, custom directives must be registered so that they can be used in templates. In the example above, we are using local registration via thedirectivesoption."
                },
                {
                    "type": "p",
                    "text": "It is also common to globally register custom directives at the app level:"
                },
                {
                    "type": "code",
                    "code": "constapp=createApp({})// make v-highlight usable in all componentsapp.directive('highlight', {/* ... */})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "When to use custom directives​"
                },
                {
                    "type": "p",
                    "text": "Custom directives should only be used when the desired functionality can only be achieved via direct DOM manipulation."
                },
                {
                    "type": "p",
                    "text": "A common example of this is av-focuscustom directive that brings an element into focus."
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>// enables v-focus in templatesconstvFocus={mounted: (el)=>el.focus()}</script><template><inputv-focus/></template>"
                },
                {
                    "type": "code",
                    "code": "constfocus={mounted: (el)=>el.focus()}exportdefault{directives: {// enables v-focus in templatefocus}}"
                },
                {
                    "type": "code",
                    "code": "<inputv-focus/>"
                },
                {
                    "type": "p",
                    "text": "This directive is more useful than theautofocusattribute because it works not just on page load - it also works when the element is dynamically inserted by Vue!"
                },
                {
                    "type": "p",
                    "text": "Declarative templating with built-in directives such asv-bindis recommended when possible because they are more efficient and server-rendering friendly."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Directive Hooks​"
                },
                {
                    "type": "p",
                    "text": "A directive definition object can provide several hook functions (all optional):"
                },
                {
                    "type": "code",
                    "code": "constmyDirective={// called before bound element's attributes// or event listeners are appliedcreated(el,binding,vnode) {// see below for details on arguments},// called right before the element is inserted into the DOM.beforeMount(el,binding,vnode) {},// called when the bound element's parent component// and all its children are mounted.mounted(el,binding,vnode) {},// called before the parent component is updatedbeforeUpdate(el,binding,vnode,prevVnode) {},// called after the parent component and// all of its children have updatedupdated(el,binding,vnode,prevVnode) {},// called before the parent component is unmountedbeforeUnmount(el,binding,vnode) {},// called when the parent component is unmountedunmounted(el,binding,vnode) {}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hook Arguments​"
                },
                {
                    "type": "p",
                    "text": "Directive hooks are passed these arguments:"
                },
                {
                    "type": "list",
                    "items": [
                        "el: the element the directive is bound to. This can be used to directly manipulate the DOM.",
                        "binding: an object containing the following properties.value: The value passed to the directive. For example inv-my-directive=\"1 + 1\", the value would be2.oldValue: The previous value, only available inbeforeUpdateandupdated. It is available whether or not the value has changed.arg: The argument passed to the directive, if any. For example inv-my-directive:foo, the arg would be\"foo\".modifiers: An object containing modifiers, if any. For example inv-my-directive.foo.bar, the modifiers object would be{ foo: true, bar: true }.instance: The instance of the component where the directive is used.dir: the directive definition object.",
                        "value: The value passed to the directive. For example inv-my-directive=\"1 + 1\", the value would be2.",
                        "oldValue: The previous value, only available inbeforeUpdateandupdated. It is available whether or not the value has changed.",
                        "arg: The argument passed to the directive, if any. For example inv-my-directive:foo, the arg would be\"foo\".",
                        "modifiers: An object containing modifiers, if any. For example inv-my-directive.foo.bar, the modifiers object would be{ foo: true, bar: true }.",
                        "instance: The instance of the component where the directive is used.",
                        "dir: the directive definition object.",
                        "vnode: the underlying VNode representing the bound element.",
                        "prevVnode: the VNode representing the bound element from the previous render. Only available in thebeforeUpdateandupdatedhooks."
                    ]
                },
                {
                    "type": "p",
                    "text": "el: the element the directive is bound to. This can be used to directly manipulate the DOM."
                },
                {
                    "type": "p",
                    "text": "binding: an object containing the following properties."
                },
                {
                    "type": "list",
                    "items": [
                        "value: The value passed to the directive. For example inv-my-directive=\"1 + 1\", the value would be2.",
                        "oldValue: The previous value, only available inbeforeUpdateandupdated. It is available whether or not the value has changed.",
                        "arg: The argument passed to the directive, if any. For example inv-my-directive:foo, the arg would be\"foo\".",
                        "modifiers: An object containing modifiers, if any. For example inv-my-directive.foo.bar, the modifiers object would be{ foo: true, bar: true }.",
                        "instance: The instance of the component where the directive is used.",
                        "dir: the directive definition object."
                    ]
                },
                {
                    "type": "p",
                    "text": "vnode: the underlying VNode representing the bound element."
                },
                {
                    "type": "p",
                    "text": "prevVnode: the VNode representing the bound element from the previous render. Only available in thebeforeUpdateandupdatedhooks."
                },
                {
                    "type": "p",
                    "text": "As an example, consider the following directive usage:"
                },
                {
                    "type": "code",
                    "code": "<divv-example:foo.bar=\"baz\">"
                },
                {
                    "type": "p",
                    "text": "Thebindingargument would be an object in the shape of:"
                },
                {
                    "type": "code",
                    "code": "{arg:'foo',modifiers: {bar:true},value:/* value of `baz` */,oldValue:/* value of `baz` from previous update */}"
                },
                {
                    "type": "p",
                    "text": "Similar to built-in directives, custom directive arguments can be dynamic. For example:"
                },
                {
                    "type": "code",
                    "code": "<divv-example:[arg]=\"value\"></div>"
                },
                {
                    "type": "p",
                    "text": "Here the directive argument will be reactively updated based onargproperty in our component state."
                },
                {
                    "type": "p",
                    "text": "Note"
                },
                {
                    "type": "p",
                    "text": "Apart fromel, you should treat these arguments as read-only and never modify them. If you need to share information across hooks, it is recommended to do so through element'sdataset."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Function Shorthand​"
                },
                {
                    "type": "p",
                    "text": "It's common for a custom directive to have the same behavior formountedandupdated, with no need for the other hooks. In such cases we can define the directive as a function:"
                },
                {
                    "type": "code",
                    "code": "<divv-color=\"color\"></div>"
                },
                {
                    "type": "code",
                    "code": "app.directive('color', (el,binding)=>{// this will be called for both `mounted` and `updated`el.style.color=binding.value})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Object Literals​"
                },
                {
                    "type": "p",
                    "text": "If your directive needs multiple values, you can also pass in a JavaScript object literal. Remember, directives can take any valid JavaScript expression."
                },
                {
                    "type": "code",
                    "code": "<divv-demo=\"{ color:'white', text:'hello!'}\"></div>"
                },
                {
                    "type": "code",
                    "code": "app.directive('demo', (el,binding)=>{console.log(binding.value.color)// => \"white\"console.log(binding.value.text)// => \"hello!\"})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Usage on Components​"
                },
                {
                    "type": "p",
                    "text": "Not recommended"
                },
                {
                    "type": "p",
                    "text": "Using custom directives on components is not recommended. Unexpected behaviour may occur when a component has multiple root nodes."
                },
                {
                    "type": "p",
                    "text": "When used on components, custom directives will always apply to a component's root node, similar toFallthrough Attributes."
                },
                {
                    "type": "code",
                    "code": "<MyComponentv-demo=\"test\"/>"
                },
                {
                    "type": "code",
                    "code": "<!-- template of MyComponent --><div><!-- v-demo directive will be applied here --><span>My component content</span></div>"
                },
                {
                    "type": "p",
                    "text": "Note that components can potentially have more than one root node. When applied to a multi-root component, a directive will be ignored and a warning will be thrown. Unlike attributes, directives can't be passed to a different element withv-bind=\"$attrs\"."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/reusability/plugins",
            "title": "Plugins | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Plugins​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "Plugins are self-contained code that usually add app-level functionality to Vue. This is how we install a plugin:"
                },
                {
                    "type": "code",
                    "code": "import{ createApp }from'vue'constapp=createApp({})app.use(myPlugin, {/* optional options */})"
                },
                {
                    "type": "p",
                    "text": "A plugin is defined as either an object that exposes aninstall()method, or simply a function that acts as the install function itself. The install function receives theapp instancealong with additional options passed toapp.use(), if any:"
                },
                {
                    "type": "code",
                    "code": "constmyPlugin={install(app,options) {// configure the app}}"
                },
                {
                    "type": "p",
                    "text": "There is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:"
                },
                {
                    "type": "list",
                    "items": [
                        "Register one or more global components or custom directives withapp.component()andapp.directive().",
                        "Make a resourceinjectablethroughout the app by callingapp.provide().",
                        "Add some global instance properties or methods by attaching them toapp.config.globalProperties.",
                        "A library that needs to perform some combination of the above (e.g.vue-router)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Register one or more global components or custom directives withapp.component()andapp.directive()."
                },
                {
                    "type": "p",
                    "text": "Make a resourceinjectablethroughout the app by callingapp.provide()."
                },
                {
                    "type": "p",
                    "text": "Add some global instance properties or methods by attaching them toapp.config.globalProperties."
                },
                {
                    "type": "p",
                    "text": "A library that needs to perform some combination of the above (e.g.vue-router)."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Writing a Plugin​"
                },
                {
                    "type": "p",
                    "text": "In order to better understand how to create your own Vue.js plugins, we will create a very simplified version of a plugin that displaysi18n(short forInternationalization) strings."
                },
                {
                    "type": "p",
                    "text": "Let's begin by setting up the plugin object. It is recommended to create it in a separate file and export it, as shown below to keep the logic contained and separate."
                },
                {
                    "type": "code",
                    "code": "// plugins/i18n.jsexportdefault{install: (app,options)=>{// Plugin code goes here}}"
                },
                {
                    "type": "p",
                    "text": "We want to create a translation function. This function will receive a dot-delimitedkeystring, which we will use to look up the translated string in the user-provided options. This is the intended usage in templates:"
                },
                {
                    "type": "code",
                    "code": "<h1>{{$translate('greetings.hello') }}</h1>"
                },
                {
                    "type": "p",
                    "text": "Since this function should be globally available in all templates, we will make it so by attaching it toapp.config.globalPropertiesin our plugin:"
                },
                {
                    "type": "code",
                    "code": "// plugins/i18n.jsexportdefault{install: (app,options)=>{// inject a globally available $translate() methodapp.config.globalProperties.$translate=(key)=>{// retrieve a nested property in `options`// using `key` as the pathreturnkey.split('.').reduce((o,i)=>{if(o)returno[i]}, options)}}}"
                },
                {
                    "type": "p",
                    "text": "Our$translatefunction will take a string such asgreetings.hello, look inside the user provided configuration and return the translated value."
                },
                {
                    "type": "p",
                    "text": "The object containing the translated keys should be passed to the plugin during installation via additional parameters toapp.use():"
                },
                {
                    "type": "code",
                    "code": "importi18nPluginfrom'./plugins/i18n'app.use(i18nPlugin, {greetings: {hello:'Bonjour!'}})"
                },
                {
                    "type": "p",
                    "text": "Now, our initial expression$translate('greetings.hello')will be replaced byBonjour!at runtime."
                },
                {
                    "type": "p",
                    "text": "See also:Augmenting Global Properties"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Use global properties scarcely, since it can quickly become confusing if too many global properties injected by different plugins are used throughout an app."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Provide / Inject with Plugins​"
                },
                {
                    "type": "p",
                    "text": "Plugins also allow us to useinjectto provide a function or attribute to the plugin's users. For example, we can allow the application to have access to theoptionsparameter to be able to use the translations object."
                },
                {
                    "type": "code",
                    "code": "// plugins/i18n.jsexportdefault{install: (app,options)=>{app.provide('i18n', options)}}"
                },
                {
                    "type": "p",
                    "text": "Plugin users will now be able to inject the plugin options into their components using thei18nkey:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ inject }from'vue'consti18n=inject('i18n')console.log(i18n.greetings.hello)</script>"
                },
                {
                    "type": "code",
                    "code": "exportdefault{inject: ['i18n'],created() {console.log(this.i18n.greetings.hello)}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bundle for NPM​"
                },
                {
                    "type": "p",
                    "text": "If you further want to build and publish your plugin for others to use, seeVite's section on Library Mode."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/routing",
            "title": "Routing | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Routing​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Client-Side vs. Server-Side Routing​"
                },
                {
                    "type": "p",
                    "text": "Routing on the server side means the server is sending a response based on the URL path that the user is visiting. When we click on a link in a traditional server-rendered web app, the browser receives an HTML response from the server and reloads the entire page with the new HTML."
                },
                {
                    "type": "p",
                    "text": "In aSingle-Page Application(SPA), however, the client-side JavaScript can intercept the navigation, dynamically fetch new data, and update the current page without full page reloads. This typically results in a more snappy user experience, especially for use cases that are more like actual \"applications\", where the user is expected to perform many interactions over a long period of time."
                },
                {
                    "type": "p",
                    "text": "In such SPAs, the \"routing\" is done on the client side, in the browser. A client-side router is responsible for managing the application's rendered view using browser APIs such asHistory APIor thehashchangeevent."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Official Router​"
                },
                {
                    "type": "p",
                    "text": "Vue is well-suited for building SPAs. For most SPAs, it's recommended to use the officially-supportedVue Router library. For more details, see Vue Router'sdocumentation."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Simple Routing from Scratch​"
                },
                {
                    "type": "p",
                    "text": "If you only need very simple routing and do not wish to involve a full-featured router library, you can do so withDynamic Componentsand update the current component state by listening to browserhashchangeeventsor using theHistory API."
                },
                {
                    "type": "p",
                    "text": "Here's a bare-bone example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref, computed }from'vue'importHomefrom'./Home.vue'importAboutfrom'./About.vue'importNotFoundfrom'./NotFound.vue'constroutes={'/': Home,'/about': About}constcurrentPath=ref(window.location.hash)window.addEventListener('hashchange', ()=>{currentPath.value=window.location.hash})constcurrentView=computed(()=>{returnroutes[currentPath.value.slice(1)||'/']||NotFound})</script><template><ahref=\"#/\">Home</a> |<ahref=\"#/about\">About</a> |<ahref=\"#/non-existent-path\">Broken Link</a><component:is=\"currentView\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "code",
                    "code": "<script>importHomefrom'./Home.vue'importAboutfrom'./About.vue'importNotFoundfrom'./NotFound.vue'constroutes={'/': Home,'/about': About}exportdefault{data() {return{currentPath: window.location.hash}},computed: {currentView() {returnroutes[this.currentPath.slice(1)||'/']||NotFound}},mounted() {window.addEventListener('hashchange', ()=>{this.currentPath=window.location.hash})}}</script><template><ahref=\"#/\">Home</a> |<ahref=\"#/about\">About</a> |<ahref=\"#/non-existent-path\">Broken Link</a><component:is=\"currentView\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/sfc",
            "title": "Single-File Components | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Single-File Components​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "Vue Single-File Components (a.k.a.*.vuefiles, abbreviated asSFC) is a special file format that allows us to encapsulate the template, logic,andstyling of a Vue component in a single file. Here's an example SFC:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{greeting:'Hello World!'}}}</script><template><pclass=\"greeting\">{{ greeting }}</p></template><style>.greeting{color:red;font-weight:bold;}</style>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constgreeting=ref('Hello World!')</script><template><pclass=\"greeting\">{{ greeting }}</p></template><style>.greeting{color:red;font-weight:bold;}</style>"
                },
                {
                    "type": "p",
                    "text": "As we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The<template>,<script>, and<style>blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in theSFC Syntax Specification."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why SFC​"
                },
                {
                    "type": "p",
                    "text": "While SFCs require a build step, there are numerous benefits in return:"
                },
                {
                    "type": "list",
                    "items": [
                        "Author modularized components using familiar HTML, CSS and JavaScript syntax",
                        "Colocation of inherently coupled concerns",
                        "Pre-compiled templates without runtime compilation cost",
                        "Component-scoped CSS",
                        "More ergonomic syntax when working with Composition API",
                        "More compile-time optimizations by cross-analyzing template and script",
                        "IDE supportwith auto-completion and type-checking for template expressions",
                        "Out-of-the-box Hot-Module Replacement (HMR) support"
                    ]
                },
                {
                    "type": "p",
                    "text": "SFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:"
                },
                {
                    "type": "list",
                    "items": [
                        "Single-Page Applications (SPA)",
                        "Static Site Generation (SSG)",
                        "Any non-trivial frontend where a build step can be justified for better development experience (DX)."
                    ]
                },
                {
                    "type": "p",
                    "text": "That said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check outpetite-vue, a 6 kB subset of Vue optimized for progressive enhancement."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How It Works​"
                },
                {
                    "type": "p",
                    "text": "Vue SFC is a framework-specific file format and must be pre-compiled by@vue/compiler-sfcinto standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:"
                },
                {
                    "type": "code",
                    "code": "importMyComponentfrom'./MyComponent.vue'exportdefault{components: {MyComponent}}"
                },
                {
                    "type": "p",
                    "text": "<style>tags inside SFCs are typically injected as native<style>tags during development to support hot updates. For production they can be extracted and merged into a single CSS file."
                },
                {
                    "type": "p",
                    "text": "You can play with SFCs and explore how they are compiled in theVue SFC Playground."
                },
                {
                    "type": "p",
                    "text": "In actual projects, we typically integrate the SFC compiler with a build tool such asViteorVue CLI(which is based onwebpack), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in theSFC Toolingsection."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What About Separation of Concerns?​"
                },
                {
                    "type": "p",
                    "text": "Some users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!"
                },
                {
                    "type": "p",
                    "text": "To answer this question, it is important for us to agree thatseparation of concerns is not equal to the separation of file types. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications."
                },
                {
                    "type": "p",
                    "text": "In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable."
                },
                {
                    "type": "p",
                    "text": "Note even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files usingSrc Imports."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/sfc.html",
            "title": "Single-File Components | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Single-File Components​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Introduction​"
                },
                {
                    "type": "p",
                    "text": "Vue Single-File Components (a.k.a.*.vuefiles, abbreviated asSFC) is a special file format that allows us to encapsulate the template, logic,andstyling of a Vue component in a single file. Here's an example SFC:"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{data() {return{greeting:'Hello World!'}}}</script><template><pclass=\"greeting\">{{ greeting }}</p></template><style>.greeting{color:red;font-weight:bold;}</style>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'constgreeting=ref('Hello World!')</script><template><pclass=\"greeting\">{{ greeting }}</p></template><style>.greeting{color:red;font-weight:bold;}</style>"
                },
                {
                    "type": "p",
                    "text": "As we can see, Vue SFC is a natural extension of the classic trio of HTML, CSS and JavaScript. The<template>,<script>, and<style>blocks encapsulate and colocate the view, logic and styling of a component in the same file. The full syntax is defined in theSFC Syntax Specification."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why SFC​"
                },
                {
                    "type": "p",
                    "text": "While SFCs require a build step, there are numerous benefits in return:"
                },
                {
                    "type": "list",
                    "items": [
                        "Author modularized components using familiar HTML, CSS and JavaScript syntax",
                        "Colocation of inherently coupled concerns",
                        "Pre-compiled templates without runtime compilation cost",
                        "Component-scoped CSS",
                        "More ergonomic syntax when working with Composition API",
                        "More compile-time optimizations by cross-analyzing template and script",
                        "IDE supportwith auto-completion and type-checking for template expressions",
                        "Out-of-the-box Hot-Module Replacement (HMR) support"
                    ]
                },
                {
                    "type": "p",
                    "text": "SFC is a defining feature of Vue as a framework, and is the recommended approach for using Vue in the following scenarios:"
                },
                {
                    "type": "list",
                    "items": [
                        "Single-Page Applications (SPA)",
                        "Static Site Generation (SSG)",
                        "Any non-trivial frontend where a build step can be justified for better development experience (DX)."
                    ]
                },
                {
                    "type": "p",
                    "text": "That said, we do realize there are scenarios where SFCs can feel like overkill. This is why Vue can still be used via plain JavaScript without a build step. If you are just looking for enhancing largely static HTML with light interactions, you can also check outpetite-vue, a 6 kB subset of Vue optimized for progressive enhancement."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How It Works​"
                },
                {
                    "type": "p",
                    "text": "Vue SFC is a framework-specific file format and must be pre-compiled by@vue/compiler-sfcinto standard JavaScript and CSS. A compiled SFC is a standard JavaScript (ES) module - which means with proper build setup you can import an SFC like a module:"
                },
                {
                    "type": "code",
                    "code": "importMyComponentfrom'./MyComponent.vue'exportdefault{components: {MyComponent}}"
                },
                {
                    "type": "p",
                    "text": "<style>tags inside SFCs are typically injected as native<style>tags during development to support hot updates. For production they can be extracted and merged into a single CSS file."
                },
                {
                    "type": "p",
                    "text": "You can play with SFCs and explore how they are compiled in theVue SFC Playground."
                },
                {
                    "type": "p",
                    "text": "In actual projects, we typically integrate the SFC compiler with a build tool such asViteorVue CLI(which is based onwebpack), and Vue provides official scaffolding tools to get you started with SFCs as fast as possible. Check out more details in theSFC Toolingsection."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What About Separation of Concerns?​"
                },
                {
                    "type": "p",
                    "text": "Some users coming from a traditional web development background may have the concern that SFCs are mixing different concerns in the same place - which HTML/CSS/JS were supposed to separate!"
                },
                {
                    "type": "p",
                    "text": "To answer this question, it is important for us to agree thatseparation of concerns is not equal to the separation of file types. The ultimate goal of engineering principles is to improve the maintainability of codebases. Separation of concerns, when applied dogmatically as separation of file types, does not help us reach that goal in the context of increasingly complex frontend applications."
                },
                {
                    "type": "p",
                    "text": "In modern UI development, we have found that instead of dividing the codebase into three huge layers that interweave with one another, it makes much more sense to divide them into loosely-coupled components and compose them. Inside a component, its template, logic, and styles are inherently coupled, and colocating them actually makes the component more cohesive and maintainable."
                },
                {
                    "type": "p",
                    "text": "Note even if you don't like the idea of Single-File Components, you can still leverage its hot-reloading and pre-compilation features by separating your JavaScript and CSS into separate files usingSrc Imports."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/ssr",
            "title": "Server-Side Rendering (SSR) | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Server-Side Rendering (SSR)​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "What is SSR?​"
                },
                {
                    "type": "p",
                    "text": "Vue.js is a framework for building client-side applications. By default, Vue components produce and manipulate DOM in the browser as output. However, it is also possible to render the same components into HTML strings on the server, send them directly to the browser, and finally \"hydrate\" the static markup into a fully interactive app on the client."
                },
                {
                    "type": "p",
                    "text": "A server-rendered Vue.js app can also be considered \"isomorphic\" or \"universal\", in the sense that the majority of your app's code runs on both the serverandthe client."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Why SSR?​"
                },
                {
                    "type": "p",
                    "text": "Compared to a client-side Single-Page Application (SPA), the advantage of SSR primarily lies in:"
                },
                {
                    "type": "list",
                    "items": [
                        "Faster time-to-content: this is more prominent on slow internet or slow devices. Server-rendered markup doesn't need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. In addition, data fetching is done on the server-side for the initial visit, which likely has a faster connection to your database than the client. This generally results in improvedCore Web Vitalsmetrics, better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate.",
                        "Unified mental model: you get to use the same language and the same declarative, component-oriented mental model for developing your entire app, instead of jumping back and forth between a backend templating system and a frontend framework.",
                        "Better SEO: the search engine crawlers will directly see the fully rendered page.TIPAs of now, Google and Bing can index synchronous JavaScript applications just fine. Synchronous being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish. This means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary."
                    ]
                },
                {
                    "type": "p",
                    "text": "Faster time-to-content: this is more prominent on slow internet or slow devices. Server-rendered markup doesn't need to wait until all JavaScript has been downloaded and executed to be displayed, so your user will see a fully-rendered page sooner. In addition, data fetching is done on the server-side for the initial visit, which likely has a faster connection to your database than the client. This generally results in improvedCore Web Vitalsmetrics, better user experience, and can be critical for applications where time-to-content is directly associated with conversion rate."
                },
                {
                    "type": "p",
                    "text": "Unified mental model: you get to use the same language and the same declarative, component-oriented mental model for developing your entire app, instead of jumping back and forth between a backend templating system and a frontend framework."
                },
                {
                    "type": "p",
                    "text": "Better SEO: the search engine crawlers will directly see the fully rendered page."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "As of now, Google and Bing can index synchronous JavaScript applications just fine. Synchronous being the key word there. If your app starts with a loading spinner, then fetches content via Ajax, the crawler will not wait for you to finish. This means if you have content fetched asynchronously on pages where SEO is important, SSR might be necessary."
                },
                {
                    "type": "p",
                    "text": "There are also some trade-offs to consider when using SSR:"
                },
                {
                    "type": "list",
                    "items": [
                        "Development constraints. Browser-specific code can only be used inside certain lifecycle hooks; some external libraries may need special treatment to be able to run in a server-rendered app.",
                        "More involved build setup and deployment requirements. Unlike a fully static SPA that can be deployed on any static file server, a server-rendered app requires an environment where a Node.js server can run.",
                        "More server-side load. Rendering a full app in Node.js is going to be more CPU-intensive than just serving static files, so if you expect high traffic, be prepared for corresponding server load and wisely employ caching strategies."
                    ]
                },
                {
                    "type": "p",
                    "text": "Development constraints. Browser-specific code can only be used inside certain lifecycle hooks; some external libraries may need special treatment to be able to run in a server-rendered app."
                },
                {
                    "type": "p",
                    "text": "More involved build setup and deployment requirements. Unlike a fully static SPA that can be deployed on any static file server, a server-rendered app requires an environment where a Node.js server can run."
                },
                {
                    "type": "p",
                    "text": "More server-side load. Rendering a full app in Node.js is going to be more CPU-intensive than just serving static files, so if you expect high traffic, be prepared for corresponding server load and wisely employ caching strategies."
                },
                {
                    "type": "p",
                    "text": "Before using SSR for your app, the first question you should ask is whether you actually need it. It mostly depends on how important time-to-content is for your app. For example, if you are building an internal dashboard where an extra few hundred milliseconds on initial load doesn't matter that much, SSR would be an overkill. However, in cases where time-to-content is absolutely critical, SSR can help you achieve the best possible initial load performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "SSR vs. SSG​"
                },
                {
                    "type": "p",
                    "text": "Static Site Generation (SSG), also referred to as pre-rendering, is another popular technique for building fast websites. If the data needed to server-render a page is the same for every user, then instead of rendering the page every time a request comes in, we can render it only once, ahead of time, during the build process. Pre-rendered pages are generated and served as static HTML files."
                },
                {
                    "type": "p",
                    "text": "SSG retains the same performance characteristics of SSR apps: it provides great time-to-content performance. At the same time, it is cheaper and easier to deploy than SSR apps because the output is static HTML and assets. The keyword here isstatic: SSG can only be applied to pages providing static data, i.e. data that is known at build time and can not change between requests. Every time the data changes, a new deployment is needed."
                },
                {
                    "type": "p",
                    "text": "If you're only investigating SSR to improve the SEO of a handful of marketing pages (e.g./,/about,/contact, etc.), then you probably want SSG instead of SSR. SSG is also great for content-based websites such as documentation sites or blogs. In fact, this website you are reading right now is statically generated usingVitePress, a Vue-powered static site generator."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Basic Tutorial​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Rendering an App​"
                },
                {
                    "type": "p",
                    "text": "Let's take a look at the most bare-bones example of Vue SSR in action."
                },
                {
                    "type": "list",
                    "items": [
                        "Create a new directory andcdinto it",
                        "Runnpm init -y",
                        "Add\"type\": \"module\"inpackage.jsonso that Node.js runs inES modules mode.",
                        "Runnpm install vue",
                        "Create anexample.jsfile:"
                    ]
                },
                {
                    "type": "code",
                    "code": "// this runs in Node.js on the server.import{ createSSRApp }from'vue'// Vue's server-rendering API is exposed under `vue/server-renderer`.import{ renderToString }from'vue/server-renderer'constapp=createSSRApp({data: ()=>({ count:1}),template:`<button @click=\"count++\">{{ count }}</button>`})renderToString(app).then((html)=>{console.log(html)})"
                },
                {
                    "type": "p",
                    "text": "Then run:"
                },
                {
                    "type": "code",
                    "code": ">node example.js"
                },
                {
                    "type": "p",
                    "text": "It should print the following to the command line:"
                },
                {
                    "type": "code",
                    "code": "<button>1</button>"
                },
                {
                    "type": "p",
                    "text": "renderToString()takes a Vue app instance and returns a Promise that resolves to the rendered HTML of the app. It is also possible to stream rendering using theNode.js Stream APIorWeb Streams API. Check out theSSR API Referencefor full details."
                },
                {
                    "type": "p",
                    "text": "We can then move the Vue SSR code into a server request handler, which wraps the application markup with the full page HTML. We will be usingexpressfor the next steps:"
                },
                {
                    "type": "list",
                    "items": [
                        "Runnpm install express",
                        "Create the followingserver.jsfile:"
                    ]
                },
                {
                    "type": "code",
                    "code": "importexpressfrom'express'import{ createSSRApp }from'vue'import{ renderToString }from'vue/server-renderer'constserver=express()server.get('/', (req,res)=>{constapp=createSSRApp({data: ()=>({ count:1}),template:`<button @click=\"count++\">{{ count }}</button>`})renderToString(app).then((html)=>{res.send(`<!DOCTYPE html><html><head><title>Vue SSR Example</title></head><body><div id=\"app\">${html}</div></body></html>`)})})server.listen(3000, ()=>{console.log('ready')})"
                },
                {
                    "type": "p",
                    "text": "Finally, runnode server.jsand visithttp://localhost:3000. You should see the page working with the button."
                },
                {
                    "type": "p",
                    "text": "Try it on StackBlitz"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Client Hydration​"
                },
                {
                    "type": "p",
                    "text": "If you click the button, you'll notice the number doesn't change. The HTML is completely static on the client since we are not loading Vue in the browser."
                },
                {
                    "type": "p",
                    "text": "To make the client-side app interactive, Vue needs to perform thehydrationstep. During hydration, it creates the same Vue application that was run on the server, matches each component to the DOM nodes it should control, and attaches DOM event listeners."
                },
                {
                    "type": "p",
                    "text": "To mount an app in hydration mode, we need to usecreateSSRApp()instead ofcreateApp():"
                },
                {
                    "type": "code",
                    "code": "// this runs in the browser.import{ createSSRApp }from'vue'constapp=createSSRApp({// ...same app as on server})// mounting an SSR app on the client assumes// the HTML was pre-rendered and will perform// hydration instead of mounting new DOM nodes.app.mount('#app')"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Code Structure​"
                },
                {
                    "type": "p",
                    "text": "Notice how we need to reuse the same app implementation as on the server. This is where we need to start thinking about code structure in an SSR app - how do we share the same application code between the server and the client?"
                },
                {
                    "type": "p",
                    "text": "Here we will demonstrate the most bare-bones setup. First, let's split the app creation logic into a dedicated file,app.js:"
                },
                {
                    "type": "code",
                    "code": "// app.js (shared between server and client)import{ createSSRApp }from'vue'exportfunctioncreateApp() {returncreateSSRApp({data: ()=>({ count:1}),template:`<button @click=\"count++\">{{ count }}</button>`})}"
                },
                {
                    "type": "p",
                    "text": "This file and its dependencies are shared between the server and the client - we call themuniversal code. There are a number of things you need to pay attention to when writing universal code, as we willdiscuss below."
                },
                {
                    "type": "p",
                    "text": "Our client entry imports the universal code, creates the app, and performs the mount:"
                },
                {
                    "type": "code",
                    "code": "// client.jsimport{ createApp }from'./app.js'createApp().mount('#app')"
                },
                {
                    "type": "p",
                    "text": "And the server uses the same app creation logic in the request handler:"
                },
                {
                    "type": "code",
                    "code": "// server.js (irrelevant code omitted)import{ createApp }from'./app.js'server.get('/', (req,res)=>{constapp=createApp()renderToString(app).then(html=>{// ...})})"
                },
                {
                    "type": "p",
                    "text": "In addition, in order to load the client files in the browser, we also need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Serve client files by addingserver.use(express.static('.'))inserver.js.",
                        "Load the client entry by adding<script type=\"module\" src=\"/client.js\"></script>to the HTML shell.",
                        "Support usage likeimport * from 'vue'in the browser by adding anImport Mapto the HTML shell."
                    ]
                },
                {
                    "type": "p",
                    "text": "Try the completed example on StackBlitz. The button is now interactive!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Higher Level Solutions​"
                },
                {
                    "type": "p",
                    "text": "Moving from the example to a production-ready SSR app involves a lot more. We will need to:"
                },
                {
                    "type": "list",
                    "items": [
                        "Support Vue SFCs and other build step requirements. In fact, we will need to coordinate two builds for the same app: one for the client, and one for the server.TIPVue components are compiled differently when used for SSR - templates are compiled into string concatenations instead of Virtual DOM render functions for more efficient rendering performance.",
                        "In the server request handler, render the HTML with the correct client-side asset links and optimal resource hints. We may also need to switch between SSR and SSG mode, or even mix both in the same app.",
                        "Manage routing, data fetching, and state management stores in a universal manner."
                    ]
                },
                {
                    "type": "p",
                    "text": "Support Vue SFCs and other build step requirements. In fact, we will need to coordinate two builds for the same app: one for the client, and one for the server."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Vue components are compiled differently when used for SSR - templates are compiled into string concatenations instead of Virtual DOM render functions for more efficient rendering performance."
                },
                {
                    "type": "p",
                    "text": "In the server request handler, render the HTML with the correct client-side asset links and optimal resource hints. We may also need to switch between SSR and SSG mode, or even mix both in the same app."
                },
                {
                    "type": "p",
                    "text": "Manage routing, data fetching, and state management stores in a universal manner."
                },
                {
                    "type": "p",
                    "text": "A complete implementation would be quite complex and depends on the build toolchain you have chosen to work with. Therefore, we highly recommend going with a higher-level, opinionated solution that abstracts away the complexity for you. Below we will introduce a few recommended SSR solutions in the Vue ecosystem."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Nuxt​"
                },
                {
                    "type": "p",
                    "text": "Nuxtis a higher-level framework built on top of the Vue ecosystem which provides a streamlined development experience for writing universal Vue applications. Better yet, you can also use it as a static site generator! We highly recommend giving it a try."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Quasar​"
                },
                {
                    "type": "p",
                    "text": "Quasaris a complete Vue-based solution that allows you to target SPA, SSR, PWA, mobile app, desktop app, and browser extension all using one codebase. It not only handles the build setup, but also provides a full collection of Material Design compliant UI components."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vite SSR​"
                },
                {
                    "type": "p",
                    "text": "Vite provides built-insupport for Vue server-side rendering, but it is intentionally low-level. If you wish to go directly with Vite, check outvite-plugin-ssr, a community plugin that abstracts away many challenging details for you."
                },
                {
                    "type": "p",
                    "text": "You can also find an example Vue + Vite SSR project using manual setuphere, which can serve as a base to build upon. Note this is only recommended if you are experienced with SSR / build tools and really want to have complete control over the higher-level architecture."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Writing SSR-friendly Code​"
                },
                {
                    "type": "p",
                    "text": "Regardless of your build setup or higher-level framework choice, there are some principles that apply in all Vue SSR applications."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Reactivity on the Server​"
                },
                {
                    "type": "p",
                    "text": "During SSR, each request URL maps to a desired state of our application. There is no user interaction and no DOM updates, so reactivity is unnecessary on the server. By default, reactivity is disabled during SSR for better performance."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Component Lifecycle Hooks​"
                },
                {
                    "type": "p",
                    "text": "Since there are no dynamic updates, lifecycle hooks such asmountedonMountedorupdatedonUpdatedwillNOTbe called during SSR and will only be executed on the client.The only hooks that are called during SSR arebeforeCreateandcreated"
                },
                {
                    "type": "p",
                    "text": "You should avoid code that produces side effects that need cleanup inbeforeCreateandcreatedsetup()or the root scope of<script setup>. An example of such side effects is setting up timers withsetInterval. In client-side only code we may setup a timer and then tear it down inbeforeUnmountonBeforeUnmountorunmountedonUnmounted. However, because the unmount hooks will never be called during SSR, the timers will stay around forever. To avoid this, move your side-effect code intomountedonMountedinstead."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Access to Platform-Specific APIs​"
                },
                {
                    "type": "p",
                    "text": "Universal code cannot assume access to platform-specific APIs, so if your code directly uses browser-only globals likewindowordocument, they will throw errors when executed in Node.js, and vice-versa."
                },
                {
                    "type": "p",
                    "text": "For tasks that are shared between server and client but with different platform APIs, it's recommended to wrap the platform-specific implementations inside a universal API, or use libraries that do this for you. For example, you can usenode-fetchto use the same fetch API on both server and client."
                },
                {
                    "type": "p",
                    "text": "For browser-only APIs, the common approach is to lazily access them inside client-only lifecycle hooks such asmountedonMounted."
                },
                {
                    "type": "p",
                    "text": "Note that if a third-party library is not written with universal usage in mind, it could be tricky to integrate it into a server-rendered app. Youmightbe able to get it working by mocking some of the globals, but it would be hacky and may interfere with the environment detection code of other libraries."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Cross-Request State Pollution​"
                },
                {
                    "type": "p",
                    "text": "In the State Management chapter, we introduced asimple state management pattern using Reactivity APIs. In an SSR context, this pattern requires some additional adjustments."
                },
                {
                    "type": "p",
                    "text": "The pattern declares shared state in a JavaScript module's root scope. This makes themsingletons- i.e. there is only one instance of the reactive object throughout the entire lifecycle of our application. This works as expected in a pure client-side Vue application, since the modules in our application are initialized fresh for each browser page visit."
                },
                {
                    "type": "p",
                    "text": "However, in an SSR context, the application modules are typically initialized only once on the server, when the server boots up. The same module instances will be reused across multiple server requests, and so will our singleton state objects. If we mutate the shared singleton state with data specific to one user, it can be accidentally leaked to a request from another user. We call thiscross-request state pollution."
                },
                {
                    "type": "p",
                    "text": "We can technically re-initialize all the JavaScript modules on each request, just like we do in browsers. However, initializing JavaScript modules can be costly, so this would significantly affect server performance."
                },
                {
                    "type": "p",
                    "text": "The recommended solution is to create a new instance of the entire application - including the router and global stores - on each request. Then, instead of directly importing it in our components, we provide the shared state usingapp-level provideand inject it in components that need it:"
                },
                {
                    "type": "code",
                    "code": "// app.js (shared between server and client)import{ createSSRApp }from'vue'import{ createStore }from'./store.js'// called on each requestexportfunctioncreateApp() {constapp=createSSRApp(/* ... */)// create new instance of store per requestconststore=createStore(/* ... */)// provide store at the app levelapp.provide('store', store)// also expose store for hydration purposesreturn{ app, store }}"
                },
                {
                    "type": "p",
                    "text": "State Management libraries like Pinia are designed with this in mind. ConsultPinia's SSR guidefor more details."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Hydration Mismatch​"
                },
                {
                    "type": "p",
                    "text": "If the DOM structure of the pre-rendered HTML does not match the expected output of the client-side app, there will be a hydration mismatch error. Hydration mismatch is most commonly introduced by the following causes:"
                },
                {
                    "type": "list",
                    "items": [
                        "The template contains invalid HTML nesting structure, and the rendered HTML got \"corrected\" by the browser's native HTML parsing behavior. For example, a common gotcha is that<div>cannot be placed inside<p>:html<p><div>hi</div></p>If we produce this in our server-rendered HTML, the browser will terminate the first<p>when<div>is encountered and parse it into the following DOM structure:html<p></p><div>hi</div><p></p>",
                        "The data used during render contains randomly generated values. Since the same application will run twice - once on the server, and once on the client - the random values are not guaranteed to be the same between the two runs. There are two ways to avoid random-value-induced mismatches:Usev-if+onMountedto render the part that depends on random values only on the client. Your framework may also have built-in features to make this easier, for example the<ClientOnly>component in VitePress.Use a random number generator library that supports generating with seeds, and guarantee the server run and the client run are using the same seed (e.g. by including the seed in serialized state and retrieving it on the client).",
                        "Usev-if+onMountedto render the part that depends on random values only on the client. Your framework may also have built-in features to make this easier, for example the<ClientOnly>component in VitePress.",
                        "Use a random number generator library that supports generating with seeds, and guarantee the server run and the client run are using the same seed (e.g. by including the seed in serialized state and retrieving it on the client).",
                        "The server and the client are in different time zones. Sometimes, we may want to convert a timestamp into the user's local time. However, the timezone during the server run and the timezone during the client run are not always the same, and we may not reliably know the user's timezone during the server run. In such cases, the local time conversion should also be performed as a client-only operation."
                    ]
                },
                {
                    "type": "p",
                    "text": "The template contains invalid HTML nesting structure, and the rendered HTML got \"corrected\" by the browser's native HTML parsing behavior. For example, a common gotcha is that<div>cannot be placed inside<p>:"
                },
                {
                    "type": "code",
                    "code": "<p><div>hi</div></p>"
                },
                {
                    "type": "p",
                    "text": "If we produce this in our server-rendered HTML, the browser will terminate the first<p>when<div>is encountered and parse it into the following DOM structure:"
                },
                {
                    "type": "code",
                    "code": "<p></p><div>hi</div><p></p>"
                },
                {
                    "type": "p",
                    "text": "The data used during render contains randomly generated values. Since the same application will run twice - once on the server, and once on the client - the random values are not guaranteed to be the same between the two runs. There are two ways to avoid random-value-induced mismatches:"
                },
                {
                    "type": "list",
                    "items": [
                        "Usev-if+onMountedto render the part that depends on random values only on the client. Your framework may also have built-in features to make this easier, for example the<ClientOnly>component in VitePress.",
                        "Use a random number generator library that supports generating with seeds, and guarantee the server run and the client run are using the same seed (e.g. by including the seed in serialized state and retrieving it on the client)."
                    ]
                },
                {
                    "type": "p",
                    "text": "Usev-if+onMountedto render the part that depends on random values only on the client. Your framework may also have built-in features to make this easier, for example the<ClientOnly>component in VitePress."
                },
                {
                    "type": "p",
                    "text": "Use a random number generator library that supports generating with seeds, and guarantee the server run and the client run are using the same seed (e.g. by including the seed in serialized state and retrieving it on the client)."
                },
                {
                    "type": "p",
                    "text": "The server and the client are in different time zones. Sometimes, we may want to convert a timestamp into the user's local time. However, the timezone during the server run and the timezone during the client run are not always the same, and we may not reliably know the user's timezone during the server run. In such cases, the local time conversion should also be performed as a client-only operation."
                },
                {
                    "type": "p",
                    "text": "When Vue encounters a hydration mismatch, it will attempt to automatically recover and adjust the pre-rendered DOM to match the client-side state. This will lead to some rendering performance loss due to incorrect nodes being discarded and new nodes being mounted, but in most cases, the app should continue to work as expected. That said, it is still best to eliminate hydration mismatches during development."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Suppressing Hydration Mismatches​"
                },
                {
                    "type": "p",
                    "text": "In Vue 3.5+, it is possible to selectively suppress inevitable hydration mismatches by using thedata-allow-mismatchattribute."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Custom Directives​"
                },
                {
                    "type": "p",
                    "text": "Since most custom directives involve direct DOM manipulation, they are ignored during SSR. However, if you want to specify how a custom directive should be rendered (i.e. what attributes it should add to the rendered element), you can use thegetSSRPropsdirective hook:"
                },
                {
                    "type": "code",
                    "code": "constmyDirective={mounted(el,binding) {// client-side implementation:// directly update the DOMel.id=binding.value},getSSRProps(binding) {// server-side implementation:// return the props to be rendered.// getSSRProps only receives the directive binding.return{id: binding.value}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Teleports​"
                },
                {
                    "type": "p",
                    "text": "Teleports require special handling during SSR. If the rendered app contains Teleports, the teleported content will not be part of the rendered string. An easier solution is to conditionally render the Teleport on mount."
                },
                {
                    "type": "p",
                    "text": "If you do need to hydrate teleported content, they are exposed under theteleportsproperty of the ssr context object:"
                },
                {
                    "type": "code",
                    "code": "constctx={}consthtml=awaitrenderToString(app, ctx)console.log(ctx.teleports)// { '#teleported': 'teleported content' }"
                },
                {
                    "type": "p",
                    "text": "You need to inject the teleport markup into the correct location in your final page HTML similar to how you need to inject the main app markup."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Avoid targetingbodywhen using Teleports and SSR together - usually,<body>will contain other server-rendered content which makes it impossible for Teleports to determine the correct starting location for hydration."
                },
                {
                    "type": "p",
                    "text": "Instead, prefer a dedicated container, e.g.<div id=\"teleported\"></div>which contains only teleported content."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/state-management",
            "title": "State Management | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "State Management​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "What is State Management?​"
                },
                {
                    "type": "p",
                    "text": "Technically, every Vue component instance already \"manages\" its own reactive state. Take a simple counter component as an example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ ref }from'vue'// stateconstcount=ref(0)// actionsfunctionincrement() {count.value++}</script><!-- view --><template>{{ count }}</template>"
                },
                {
                    "type": "code",
                    "code": "<script>exportdefault{// statedata() {return{count:0}},// actionsmethods: {increment() {this.count++}}}</script><!-- view --><template>{{ count }}</template>"
                },
                {
                    "type": "p",
                    "text": "It is a self-contained unit with the following parts:"
                },
                {
                    "type": "list",
                    "items": [
                        "Thestate, the source of truth that drives our app;",
                        "Theview, a declarative mapping of thestate;",
                        "Theactions, the possible ways the state could change in reaction to user inputs from theview."
                    ]
                },
                {
                    "type": "p",
                    "text": "This is a simple representation of the concept of \"one-way data flow\":"
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "p",
                    "text": "However, the simplicity starts to break down when we havemultiple components that share a common state:"
                },
                {
                    "type": "list",
                    "items": [
                        "Multiple views may depend on the same piece of state.",
                        "Actions from different views may need to mutate the same piece of state."
                    ]
                },
                {
                    "type": "p",
                    "text": "For case one, a possible workaround is by \"lifting\" the shared state up to a common ancestor component, and then pass it down as props. However, this quickly gets tedious in component trees with deep hierarchies, leading to another problem known asProp Drilling."
                },
                {
                    "type": "p",
                    "text": "For case two, we often find ourselves resorting to solutions such as reaching for direct parent / child instances via template refs, or trying to mutate and synchronize multiple copies of the state via emitted events. Both of these patterns are brittle and quickly lead to unmaintainable code."
                },
                {
                    "type": "p",
                    "text": "A simpler and more straightforward solution is to extract the shared state out of the components, and manage it in a global singleton. With this, our component tree becomes a big \"view\", and any component can access the state or trigger actions, no matter where they are in the tree!"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Simple State Management with Reactivity API​"
                },
                {
                    "type": "p",
                    "text": "In Options API, reactive data is declared using thedata()option. Internally, the object returned bydata()is made reactive via thereactive()function, which is also available as a public API."
                },
                {
                    "type": "p",
                    "text": "If you have a piece of state that should be shared by multiple instances, you can usereactive()to create a reactive object, and then import it into multiple components:"
                },
                {
                    "type": "code",
                    "code": "// store.jsimport{ reactive }from'vue'exportconststore=reactive({count:0})"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentA.vue --><scriptsetup>import{ store }from'./store.js'</script><template>From A: {{ store.count }}</template>"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentB.vue --><scriptsetup>import{ store }from'./store.js'</script><template>From B: {{ store.count }}</template>"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentA.vue --><script>import{ store }from'./store.js'exportdefault{data() {return{store}}}</script><template>From A: {{ store.count }}</template>"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentB.vue --><script>import{ store }from'./store.js'exportdefault{data() {return{store}}}</script><template>From B: {{ store.count }}</template>"
                },
                {
                    "type": "p",
                    "text": "Now whenever thestoreobject is mutated, both<ComponentA>and<ComponentB>will update their views automatically - we have a single source of truth now."
                },
                {
                    "type": "p",
                    "text": "However, this also means any component importingstorecan mutate it however they want:"
                },
                {
                    "type": "code",
                    "code": "<template><button@click=\"store.count++\">From B: {{ store.count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "While this works in simple cases, global state that can be arbitrarily mutated by any component is not going to be very maintainable in the long run. To ensure the state-mutating logic is centralized like the state itself, it is recommended to define methods on the store with names that express the intention of the actions:"
                },
                {
                    "type": "code",
                    "code": "// store.jsimport{ reactive }from'vue'exportconststore=reactive({count:0,increment() {this.count++}})"
                },
                {
                    "type": "code",
                    "code": "<template><button@click=\"store.increment()\">From B: {{ store.count }}</button></template>"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "Try it in the Playground"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Note the click handler usesstore.increment()with parentheses - this is necessary to call the method with the properthiscontext since it's not a component method."
                },
                {
                    "type": "p",
                    "text": "Although here we are using a single reactive object as a store, you can also share reactive state created using otherReactivity APIssuch asref()orcomputed(), or even return global state from aComposable:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'// global state, created in module scopeconstglobalCount=ref(1)exportfunctionuseCount() {// local state, created per-componentconstlocalCount=ref(1)return{globalCount,localCount}}"
                },
                {
                    "type": "p",
                    "text": "The fact that Vue's reactivity system is decoupled from the component model makes it extremely flexible."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "SSR Considerations​"
                },
                {
                    "type": "p",
                    "text": "If you are building an application that leveragesServer-Side Rendering (SSR), the above pattern can lead to issues due to the store being a singleton shared across multiple requests. This is discussed inmore detailsin the SSR guide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Pinia​"
                },
                {
                    "type": "p",
                    "text": "While our hand-rolled state management solution will suffice in simple scenarios, there are many more things to consider in large-scale production applications:"
                },
                {
                    "type": "list",
                    "items": [
                        "Stronger conventions for team collaboration",
                        "Integrating with the Vue DevTools, including timeline, in-component inspection, and time-travel debugging",
                        "Hot Module Replacement",
                        "Server-Side Rendering support"
                    ]
                },
                {
                    "type": "p",
                    "text": "Piniais a state management library that implements all of the above. It is maintained by the Vue core team, and works with both Vue 2 and Vue 3."
                },
                {
                    "type": "p",
                    "text": "Existing users may be familiar withVuex, the previous official state management library for Vue. With Pinia serving the same role in the ecosystem, Vuex is now in maintenance mode. It still works, but will no longer receive new features. It is recommended to use Pinia for new applications."
                },
                {
                    "type": "p",
                    "text": "Pinia started out as an exploration of what the next iteration of Vuex could look like, incorporating many ideas from core team discussions for Vuex 5. Eventually, we realized that Pinia already implements most of what we wanted in Vuex 5, and decided to make it the new recommendation instead."
                },
                {
                    "type": "p",
                    "text": "Compared to Vuex, Pinia provides a simpler API with less ceremony, offers Composition-API-style APIs, and most importantly, has solid type inference support when used with TypeScript."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/testing",
            "title": "Testing | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Testing​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Why Test?​"
                },
                {
                    "type": "p",
                    "text": "Automated tests help you and your team build complex Vue applications quickly and confidently by preventing regressions and encouraging you to break apart your application into testable functions, modules, classes, and components. As with any application, your new Vue app can break in many ways, and it's important that you can catch these issues and fix them before releasing."
                },
                {
                    "type": "p",
                    "text": "In this guide, we'll cover basic terminology and provide our recommendations on which tools to choose for your Vue 3 application."
                },
                {
                    "type": "p",
                    "text": "There is one Vue-specific section covering composables. SeeTesting Composablesbelow for more details."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "When to Test​"
                },
                {
                    "type": "p",
                    "text": "Start testing early! We recommend you begin writing tests as soon as you can. The longer you wait to add tests to your application, the more dependencies your application will have, and the harder it will be to start."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Testing Types​"
                },
                {
                    "type": "p",
                    "text": "When designing your Vue application's testing strategy, you should leverage the following testing types:"
                },
                {
                    "type": "list",
                    "items": [
                        "Unit: Checks that inputs to a given function, class, or composable are producing the expected output or side effects.",
                        "Component: Checks that your component mounts, renders, can be interacted with, and behaves as expected. These tests import more code than unit tests, are more complex, and require more time to execute.",
                        "End-to-end: Checks features that span multiple pages and makes real network requests against your production-built Vue application. These tests often involve standing up a database or other backend."
                    ]
                },
                {
                    "type": "p",
                    "text": "Each testing type plays a role in your application's testing strategy, and each will protect you against different types of issues."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Overview​"
                },
                {
                    "type": "p",
                    "text": "We will briefly discuss what each of these are, how they can be implemented for Vue applications, and provide some general recommendations."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Unit Testing​"
                },
                {
                    "type": "p",
                    "text": "Unit tests are written to verify that small, isolated units of code are working as expected. A unit test usually covers a single function, class, composable, or module. Unit tests focus on logical correctness and only concern themselves with a small portion of the application's overall functionality. They may mock large parts of your application's environment (e.g. initial state, complex classes, 3rd party modules, and network requests)."
                },
                {
                    "type": "p",
                    "text": "In general, unit tests will catch issues with a function's business logic and logical correctness."
                },
                {
                    "type": "p",
                    "text": "Take for example thisincrementfunction:"
                },
                {
                    "type": "code",
                    "code": "// helpers.jsexportfunctionincrement(current,max=10) {if(current<max) {returncurrent+1}returncurrent}"
                },
                {
                    "type": "p",
                    "text": "Because it's very self-contained, it'll be easy to invoke the increment function and assert that it returns what it's supposed to, so we'll write a Unit Test."
                },
                {
                    "type": "p",
                    "text": "If any of these assertions fail, it's clear that the issue is contained within theincrementfunction."
                },
                {
                    "type": "code",
                    "code": "// helpers.spec.jsimport{ increment }from'./helpers'describe('increment', ()=>{test('increments the current number by 1', ()=>{expect(increment(0,10)).toBe(1)})test('does not increment the current number over the max', ()=>{expect(increment(10,10)).toBe(10)})test('has a default max of 10', ()=>{expect(increment(10)).toBe(10)})})"
                },
                {
                    "type": "p",
                    "text": "As mentioned previously, unit testing is typically applied to self-contained business logic, components, classes, modules, or functions that do not involve UI rendering, network requests, or other environmental concerns."
                },
                {
                    "type": "p",
                    "text": "These are typically plain JavaScript / TypeScript modules unrelated to Vue. In general, writing unit tests for business logic in Vue applications does not differ significantly from applications using other frameworks."
                },
                {
                    "type": "p",
                    "text": "There are two instances where you DO unit test Vue-specific features:"
                },
                {
                    "type": "list",
                    "items": [
                        "Composables",
                        "Components"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Composables​"
                },
                {
                    "type": "p",
                    "text": "One category of functions specific to Vue applications isComposables, which may require special handling during tests. SeeTesting Composablesbelow for more details."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Unit Testing Components​"
                },
                {
                    "type": "p",
                    "text": "A component can be tested in two ways:"
                },
                {
                    "type": "list",
                    "items": [
                        "Whitebox: Unit TestingTests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused onisolatingthe component under test. These tests will usually involve mocking some, if not all of your component's children, as well as setting up plugin state and dependencies (e.g. Pinia).",
                        "Blackbox: Component TestingTests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system. They usually render all child components and are considered more of an \"integration test\". See theComponent Testing recommendationsbelow."
                    ]
                },
                {
                    "type": "p",
                    "text": "Whitebox: Unit Testing"
                },
                {
                    "type": "p",
                    "text": "Tests that are \"Whitebox tests\" are aware of the implementation details and dependencies of a component. They are focused onisolatingthe component under test. These tests will usually involve mocking some, if not all of your component's children, as well as setting up plugin state and dependencies (e.g. Pinia)."
                },
                {
                    "type": "p",
                    "text": "Blackbox: Component Testing"
                },
                {
                    "type": "p",
                    "text": "Tests that are \"Blackbox tests\" are unaware of the implementation details of a component. These tests mock as little as possible to test the integration of your component and the entire system. They usually render all child components and are considered more of an \"integration test\". See theComponent Testing recommendationsbelow."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommendation​"
                },
                {
                    "type": "list",
                    "items": [
                        "VitestSince the official setup created bycreate-vueis based onVite, we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite.Vitestis a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members. It integrates with Vite-based projects with minimal effort, and is blazing fast."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vitest"
                },
                {
                    "type": "p",
                    "text": "Since the official setup created bycreate-vueis based onVite, we recommend using a unit testing framework that can leverage the same configuration and transform pipeline directly from Vite.Vitestis a unit testing framework designed specifically for this purpose, created and maintained by Vue / Vite team members. It integrates with Vite-based projects with minimal effort, and is blazing fast."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Other Options​"
                },
                {
                    "type": "list",
                    "items": [
                        "Jestis a popular unit testing framework. However, we only recommend Jest if you have an existing Jest test suite that needs to be migrated over to a Vite-based project, as Vitest offers a more seamless integration and better performance."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component Testing​"
                },
                {
                    "type": "p",
                    "text": "In Vue applications, components are the main building blocks of the UI. Components are therefore the natural unit of isolation when it comes to validating your application's behavior. From a granularity perspective, component testing sits somewhere above unit testing and can be considered a form of integration testing. Much of your Vue Application should be covered by a component test and we recommend that each Vue component has its own spec file."
                },
                {
                    "type": "p",
                    "text": "Component tests should catch issues relating to your component's props, events, slots that it provides, styles, classes, lifecycle hooks, and more."
                },
                {
                    "type": "p",
                    "text": "Component tests should not mock child components, but instead test the interactions between your component and its children by interacting with the components as a user would. For example, a component test should click on an element like a user would instead of programmatically interacting with the component."
                },
                {
                    "type": "p",
                    "text": "Component tests should focus on the component's public interfaces rather than internal implementation details. For most components, the public interface is limited to: events emitted, props, and slots. When testing, remember totest what a component does, not how it does it."
                },
                {
                    "type": "p",
                    "text": "DO"
                },
                {
                    "type": "list",
                    "items": [
                        "ForVisuallogic: assert correct render output based on inputted props and slots.",
                        "ForBehaviorallogic: assert correct render updates or emitted events in response to user input events.In the below example, we demonstrate a Stepper component that has a DOM element labeled \"increment\" and can be clicked. We pass a prop calledmaxthat prevents the Stepper from being incremented past2, so if we click the button 3 times, the UI should still say2.We know nothing about the implementation of Stepper, only that the \"input\" is themaxprop and the \"output\" is the state of the DOM as the user will see it."
                    ]
                },
                {
                    "type": "p",
                    "text": "ForVisuallogic: assert correct render output based on inputted props and slots."
                },
                {
                    "type": "p",
                    "text": "ForBehaviorallogic: assert correct render updates or emitted events in response to user input events."
                },
                {
                    "type": "p",
                    "text": "In the below example, we demonstrate a Stepper component that has a DOM element labeled \"increment\" and can be clicked. We pass a prop calledmaxthat prevents the Stepper from being incremented past2, so if we click the button 3 times, the UI should still say2."
                },
                {
                    "type": "p",
                    "text": "We know nothing about the implementation of Stepper, only that the \"input\" is themaxprop and the \"output\" is the state of the DOM as the user will see it."
                },
                {
                    "type": "code",
                    "code": "constvalueSelector='[data-testid=stepper-value]'constbuttonSelector='[data-testid=increment]'constwrapper=mount(Stepper, {props: {max:1}})expect(wrapper.find(valueSelector).text()).toContain('0')awaitwrapper.find(buttonSelector).trigger('click')expect(wrapper.find(valueSelector).text()).toContain('1')"
                },
                {
                    "type": "code",
                    "code": "constvalueSelector='[data-testid=stepper-value]'constbuttonSelector='[data-testid=increment]'mount(Stepper, {props: {max:1}})cy.get(valueSelector).should('be.visible').and('contain.text','0').get(buttonSelector).click().get(valueSelector).should('contain.text','1')"
                },
                {
                    "type": "code",
                    "code": "const{getByText}=render(Stepper, {props: {max:1}})getByText('0')// Implicit assertion that \"0\" is within the componentconstbutton=getByRole('button', { name:/increment/i})// Dispatch a click event to our increment button.awaitfireEvent.click(button)getByText('1')awaitfireEvent.click(button)"
                },
                {
                    "type": "p",
                    "text": "DON'T"
                },
                {
                    "type": "list",
                    "items": [
                        "Don't assert the private state of a component instance or test the private methods of a component. Testing implementation details makes the tests brittle, as they are more likely to break and require updates when the implementation changes.The component's ultimate job is rendering the correct DOM output, so tests focusing on the DOM output provide the same level of correctness assurance (if not more) while being more robust and resilient to change.Don't rely exclusively on snapshot tests. Asserting HTML strings does not describe correctness. Write tests with intentionality.If a method needs to be tested thoroughly, consider extracting it into a standalone utility function and write a dedicated unit test for it. If it cannot be extracted cleanly, it may be tested as a part of a component, integration, or end-to-end test that covers it."
                    ]
                },
                {
                    "type": "p",
                    "text": "Don't assert the private state of a component instance or test the private methods of a component. Testing implementation details makes the tests brittle, as they are more likely to break and require updates when the implementation changes."
                },
                {
                    "type": "p",
                    "text": "The component's ultimate job is rendering the correct DOM output, so tests focusing on the DOM output provide the same level of correctness assurance (if not more) while being more robust and resilient to change."
                },
                {
                    "type": "p",
                    "text": "Don't rely exclusively on snapshot tests. Asserting HTML strings does not describe correctness. Write tests with intentionality."
                },
                {
                    "type": "p",
                    "text": "If a method needs to be tested thoroughly, consider extracting it into a standalone utility function and write a dedicated unit test for it. If it cannot be extracted cleanly, it may be tested as a part of a component, integration, or end-to-end test that covers it."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommendation​"
                },
                {
                    "type": "list",
                    "items": [
                        "Vitestfor components or composables that render headlessly (e.g. theuseFaviconfunction in VueUse). Components and DOM can be tested using@vue/test-utils.",
                        "Cypress Component Testingfor components whose expected behavior depends on properly rendering styles or triggering native DOM events. It can be used with Testing Library via@testing-library/cypress."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vitestfor components or composables that render headlessly (e.g. theuseFaviconfunction in VueUse). Components and DOM can be tested using@vue/test-utils."
                },
                {
                    "type": "p",
                    "text": "Cypress Component Testingfor components whose expected behavior depends on properly rendering styles or triggering native DOM events. It can be used with Testing Library via@testing-library/cypress."
                },
                {
                    "type": "p",
                    "text": "The main differences between Vitest and browser-based runners are speed and execution context. In short, browser-based runners, like Cypress, can catch issues that node-based runners, like Vitest, cannot (e.g. style issues, real native DOM events, cookies, local storage, and network failures), but browser-based runners areorders of magnitude slower than Vitestbecause they do open a browser, compile your stylesheets, and more. Cypress is a browser-based runner that supports component testing. Please readVitest's comparison pagefor the latest information comparing Vitest and Cypress."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Mounting Libraries​"
                },
                {
                    "type": "p",
                    "text": "Component testing often involves mounting the component being tested in isolation, triggering simulated user input events, and asserting on the rendered DOM output. There are dedicated utility libraries that make these tasks simpler."
                },
                {
                    "type": "list",
                    "items": [
                        "@vue/test-utilsis the official low-level component testing library that was written to provide users access to Vue specific APIs. It's also the lower-level library@testing-library/vueis built on top of.",
                        "@testing-library/vueis a Vue testing library focused on testing components without relying on implementation details. Its guiding principle is that the more tests resemble the way software is used, the more confidence they can provide."
                    ]
                },
                {
                    "type": "p",
                    "text": "@vue/test-utilsis the official low-level component testing library that was written to provide users access to Vue specific APIs. It's also the lower-level library@testing-library/vueis built on top of."
                },
                {
                    "type": "p",
                    "text": "@testing-library/vueis a Vue testing library focused on testing components without relying on implementation details. Its guiding principle is that the more tests resemble the way software is used, the more confidence they can provide."
                },
                {
                    "type": "p",
                    "text": "We recommend using@vue/test-utilsfor testing components in applications.@testing-library/vuehas issues with testing asynchronous component with Suspense, so it should be used with caution."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Other Options​"
                },
                {
                    "type": "list",
                    "items": [
                        "Nightwatchis an E2E test runner with Vue Component Testing support. (Example Project)",
                        "WebdriverIOfor cross-browser component testing that relies on native user interaction based on standardized automation. It can also be used with Testing Library."
                    ]
                },
                {
                    "type": "p",
                    "text": "Nightwatchis an E2E test runner with Vue Component Testing support. (Example Project)"
                },
                {
                    "type": "p",
                    "text": "WebdriverIOfor cross-browser component testing that relies on native user interaction based on standardized automation. It can also be used with Testing Library."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "E2E Testing​"
                },
                {
                    "type": "p",
                    "text": "While unit tests provide developers with some degree of confidence, unit and component tests are limited in their abilities to provide holistic coverage of an application when deployed to production. As a result, end-to-end (E2E) tests provide coverage on what is arguably the most important aspect of an application: what happens when users actually use your applications."
                },
                {
                    "type": "p",
                    "text": "End-to-end tests focus on multi-page application behavior that makes network requests against your production-built Vue application. They often involve standing up a database or other backend and may even be run against a live staging environment."
                },
                {
                    "type": "p",
                    "text": "End-to-end tests will often catch issues with your router, state management library, top-level components (e.g. an App or Layout), public assets, or any request handling. As stated above, they catch critical issues that may be impossible to catch with unit tests or component tests."
                },
                {
                    "type": "p",
                    "text": "End-to-end tests do not import any of your Vue application's code but instead rely completely on testing your application by navigating through entire pages in a real browser."
                },
                {
                    "type": "p",
                    "text": "End-to-end tests validate many of the layers in your application. They can either target your locally built application or even a live Staging environment. Testing against your Staging environment not only includes your frontend code and static server but all associated backend services and infrastructure."
                },
                {
                    "type": "p",
                    "text": "The more your tests resemble how your software is used, the more confidence they can give you. -Kent C. Dodds- Author of the Testing Library"
                },
                {
                    "type": "p",
                    "text": "By testing how user actions impact your application, E2E tests are often the key to higher confidence in whether an application is functioning properly or not."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Choosing an E2E Testing Solution​"
                },
                {
                    "type": "p",
                    "text": "While end-to-end (E2E) testing on the web has gained a negative reputation for unreliable (flaky) tests and slowing down development processes, modern E2E tools have made strides forward to create more reliable, interactive, and useful tests. When choosing an E2E testing framework, the following sections provide some guidance on things to keep in mind when choosing a testing framework for your application."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Cross-browser testing​"
                },
                {
                    "type": "p",
                    "text": "One of the primary benefits that end-to-end (E2E) testing is known for is its ability to test your application across multiple browsers. While it may seem desirable to have 100% cross-browser coverage, it is important to note that cross browser testing has diminishing returns on a team's resources due to the additional time and machine power required to run them consistently. As a result, it is important to be mindful of this trade-off when choosing the amount of cross-browser testing your application needs."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Faster feedback loops​"
                },
                {
                    "type": "p",
                    "text": "One of the primary problems with end-to-end (E2E) tests and development is that running the entire suite takes a long time. Typically, this is only done in continuous integration and deployment (CI/CD) pipelines. Modern E2E testing frameworks have helped to solve this by adding features like parallelization, which allows for CI/CD pipelines to often run magnitudes faster than before. In addition, when developing locally, the ability to selectively run a single test for the page you are working on while also providing hot reloading of tests can help boost a developer's workflow and productivity."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "First-class debugging experience​"
                },
                {
                    "type": "p",
                    "text": "While developers have traditionally relied on scanning logs in a terminal window to help determine what went wrong in a test, modern end-to-end (E2E) test frameworks allow developers to leverage tools they are already familiar with, e.g. browser developer tools."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Visibility in headless mode​"
                },
                {
                    "type": "p",
                    "text": "When end-to-end (E2E) tests are run in continuous integration/deployment pipelines, they are often run in headless browsers (i.e., no visible browser is opened for the user to watch). A critical feature of modern E2E testing frameworks is the ability to see snapshots and/or videos of the application during testing, providing some insight into why errors are happening. Historically, it was tedious to maintain these integrations."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Recommendation​"
                },
                {
                    "type": "list",
                    "items": [
                        "Playwrightis a great E2E testing solution that supports Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari. It has an informative UI, excellent debuggability, built-in assertions, parallelization, traces and is designed to eliminate flaky tests. Support forComponent Testingis available, but marked experimental. Playwright is open source and maintained by Microsoft.",
                        "Cypresshas an informative graphical interface, excellent debuggability, built-in assertions, stubs, flake-resistance, and snapshots. As mentioned above, it provides stable support forComponent Testing. Cypress supports Chromium-based browsers, Firefox, and Electron. WebKit support is available, but marked experimental. Cypress is MIT-licensed, but some features like parallelization require a subscription to Cypress Cloud."
                    ]
                },
                {
                    "type": "p",
                    "text": "Playwrightis a great E2E testing solution that supports Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation of Google Chrome for Android and Mobile Safari. It has an informative UI, excellent debuggability, built-in assertions, parallelization, traces and is designed to eliminate flaky tests. Support forComponent Testingis available, but marked experimental. Playwright is open source and maintained by Microsoft."
                },
                {
                    "type": "p",
                    "text": "Cypresshas an informative graphical interface, excellent debuggability, built-in assertions, stubs, flake-resistance, and snapshots. As mentioned above, it provides stable support forComponent Testing. Cypress supports Chromium-based browsers, Firefox, and Electron. WebKit support is available, but marked experimental. Cypress is MIT-licensed, but some features like parallelization require a subscription to Cypress Cloud."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Other Options​"
                },
                {
                    "type": "list",
                    "items": [
                        "Nightwatchis an E2E testing solution based onSelenium WebDriver. This gives it the widest browser support range, including native mobile testing. Selenium-based solutions will be slower than Playwright or Cypress.",
                        "WebdriverIOis a test automation framework for web and mobile testing based on the WebDriver protocol."
                    ]
                },
                {
                    "type": "p",
                    "text": "Nightwatchis an E2E testing solution based onSelenium WebDriver. This gives it the widest browser support range, including native mobile testing. Selenium-based solutions will be slower than Playwright or Cypress."
                },
                {
                    "type": "p",
                    "text": "WebdriverIOis a test automation framework for web and mobile testing based on the WebDriver protocol."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Recipes​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Adding Vitest to a Project​"
                },
                {
                    "type": "p",
                    "text": "In a Vite-based Vue project, run:"
                },
                {
                    "type": "code",
                    "code": ">npm install -D vitest happy-dom @testing-library/vue"
                },
                {
                    "type": "p",
                    "text": "Next, update the Vite configuration to add thetestoption block:"
                },
                {
                    "type": "code",
                    "code": "// vite.config.jsimport{ defineConfig }from'vite'exportdefaultdefineConfig({// ...test: {// enable jest-like global test APIsglobals:true,// simulate DOM with happy-dom// (requires installing happy-dom as a peer dependency)environment:'happy-dom'}})"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "If you use TypeScript, addvitest/globalsto thetypesfield in yourtsconfig.json."
                },
                {
                    "type": "code",
                    "code": "// tsconfig.json{\"compilerOptions\": {\"types\": [\"vitest/globals\"]}}"
                },
                {
                    "type": "p",
                    "text": "Then, create a file ending in*.test.jsin your project. You can place all test files in a test directory in the project root or in test directories next to your source files. Vitest will automatically search for them using the naming convention."
                },
                {
                    "type": "code",
                    "code": "// MyComponent.test.jsimport{ render }from'@testing-library/vue'importMyComponentfrom'./MyComponent.vue'test('it should work', ()=>{const{getByText}=render(MyComponent, {props: {/* ... */}})// assert outputgetByText('...')})"
                },
                {
                    "type": "p",
                    "text": "Finally, updatepackage.jsonto add the test script and run it:"
                },
                {
                    "type": "code",
                    "code": "{// ...\"scripts\": {\"test\":\"vitest\"}}"
                },
                {
                    "type": "code",
                    "code": ">npm test"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Testing Composables​"
                },
                {
                    "type": "p",
                    "text": "This section assumes you have read theComposablessection."
                },
                {
                    "type": "p",
                    "text": "When it comes to testing composables, we can divide them into two categories: composables that do not rely on a host component instance, and composables that do."
                },
                {
                    "type": "p",
                    "text": "A composable depends on a host component instance when it uses the following APIs:"
                },
                {
                    "type": "list",
                    "items": [
                        "Lifecycle hooks",
                        "Provide / Inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a composable only uses Reactivity APIs, then it can be tested by directly invoking it and asserting its returned state/methods:"
                },
                {
                    "type": "code",
                    "code": "// counter.jsimport{ ref }from'vue'exportfunctionuseCounter() {constcount=ref(0)constincrement=()=>count.value++return{count,increment}}"
                },
                {
                    "type": "code",
                    "code": "// counter.test.jsimport{ useCounter }from'./counter.js'test('useCounter', ()=>{const{count,increment}=useCounter()expect(count.value).toBe(0)increment()expect(count.value).toBe(1)})"
                },
                {
                    "type": "p",
                    "text": "A composable that relies on lifecycle hooks or Provide / Inject needs to be wrapped in a host component to be tested. We can create a helper like the following:"
                },
                {
                    "type": "code",
                    "code": "// test-utils.jsimport{ createApp }from'vue'exportfunctionwithSetup(composable) {letresultconstapp=createApp({setup() {result=composable()// suppress missing template warningreturn()=>{}}})app.mount(document.createElement('div'))// return the result and the app instance// for testing provide/unmountreturn[result, app]}"
                },
                {
                    "type": "code",
                    "code": "import{ withSetup }from'./test-utils'import{ useFoo }from'./foo'test('useFoo', ()=>{const[result,app]=withSetup(()=>useFoo(123))// mock provide for testing injectionsapp.provide(...)// run assertionsexpect(result.foo.value).toBe(1)// trigger onUnmounted hook if neededapp.unmount()})"
                },
                {
                    "type": "p",
                    "text": "For more complex composables, it could also be easier to test it by writing tests against the wrapper component usingComponent Testingtechniques."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/tooling",
            "title": "Tooling | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Tooling​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Try It Online​"
                },
                {
                    "type": "p",
                    "text": "You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation results",
                        "Always deployed from latest commit",
                        "Designed for inspecting component compilation results",
                        "Vue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setup",
                        "IDE-like environment running actual Vite dev server in the browser",
                        "Closest to local setup"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Always deployed from latest commit",
                        "Designed for inspecting component compilation results"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "IDE-like environment running actual Vite dev server in the browser",
                        "Closest to local setup"
                    ]
                },
                {
                    "type": "p",
                    "text": "It is also recommended to use these online playgrounds to provide reproductions when reporting bugs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Project Scaffolding​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vite​"
                },
                {
                    "type": "p",
                    "text": "Viteis a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!"
                },
                {
                    "type": "p",
                    "text": "To get started with Vite + Vue, simply run:"
                },
                {
                    "type": "code",
                    "code": "$npmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "$pnpmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "# For Yarn Modern (v2+)$yarncreatevue@latest# For Yarn ^v4.11$yarndlxcreate-vue@latest"
                },
                {
                    "type": "code",
                    "code": "$buncreatevue@latest"
                },
                {
                    "type": "p",
                    "text": "This command will install and executecreate-vue, the official Vue project scaffolding tool."
                },
                {
                    "type": "list",
                    "items": [
                        "To learn more about Vite, check out theVite docs.",
                        "To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for@vitejs/plugin-vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both online playgrounds mentioned above also support downloading files as a Vite project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vue CLI​"
                },
                {
                    "type": "p",
                    "text": "Vue CLIis the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases."
                },
                {
                    "type": "p",
                    "text": "For information on migrating from Vue CLI to Vite:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue CLI -> Vite Migration Guide from VueSchool.io",
                        "Tools / Plugins that help with auto migration"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Note on In-Browser Template Compilation​"
                },
                {
                    "type": "p",
                    "text": "When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings. In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation. On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step. To reduce client bundle size, Vue providesdifferent \"builds\"optimized for different use cases."
                },
                {
                    "type": "list",
                    "items": [
                        "Build files that start withvue.runtime.*areruntime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step.",
                        "Build files that do not include.runtimearefull builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by ~14kb."
                    ]
                },
                {
                    "type": "p",
                    "text": "Build files that start withvue.runtime.*areruntime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step."
                },
                {
                    "type": "p",
                    "text": "Build files that do not include.runtimearefull builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by ~14kb."
                },
                {
                    "type": "p",
                    "text": "Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled. If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to aliasvuetovue/dist/vue.esm-bundler.jsinstead."
                },
                {
                    "type": "p",
                    "text": "If you are looking for a lighter-weight alternative for no-build-step usage, check outpetite-vue."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "IDE Support​"
                },
                {
                    "type": "list",
                    "items": [
                        "The recommended IDE setup isVS Code+ theVue - Official extension(previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props.TIPVue - Official replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.",
                        "WebStormalso provides great built-in support for Vue SFCs.",
                        "Other IDEs that support theLanguage Service Protocol(LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support viaLSP-Volar.vim / Neovim support viacoc-volar.emacs support vialsp-mode",
                        "Sublime Text support viaLSP-Volar.",
                        "vim / Neovim support viacoc-volar.",
                        "emacs support vialsp-mode"
                    ]
                },
                {
                    "type": "p",
                    "text": "The recommended IDE setup isVS Code+ theVue - Official extension(previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Vue - Official replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects."
                },
                {
                    "type": "p",
                    "text": "WebStormalso provides great built-in support for Vue SFCs."
                },
                {
                    "type": "p",
                    "text": "Other IDEs that support theLanguage Service Protocol(LSP) can also leverage Volar's core functionalities via LSP:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sublime Text support viaLSP-Volar.",
                        "vim / Neovim support viacoc-volar.",
                        "emacs support vialsp-mode"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sublime Text support viaLSP-Volar."
                },
                {
                    "type": "p",
                    "text": "vim / Neovim support viacoc-volar."
                },
                {
                    "type": "p",
                    "text": "emacs support vialsp-mode"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Browser Devtools​"
                },
                {
                    "type": "p",
                    "text": "The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "list",
                    "items": [
                        "Documentation",
                        "Chrome Extension",
                        "Vite Plugin",
                        "Standalone Electron app"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TypeScript​"
                },
                {
                    "type": "p",
                    "text": "Main article:Using Vue with TypeScript."
                },
                {
                    "type": "list",
                    "items": [
                        "Vue - Official extensionprovides type checking for SFCs using<script lang=\"ts\">blocks, including template expressions and cross-component props validation.",
                        "Usevue-tscfor performing the same type checking from the command line, or for generatingd.tsfiles for SFCs."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue - Official extensionprovides type checking for SFCs using<script lang=\"ts\">blocks, including template expressions and cross-component props validation."
                },
                {
                    "type": "p",
                    "text": "Usevue-tscfor performing the same type checking from the command line, or for generatingd.tsfiles for SFCs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Testing​"
                },
                {
                    "type": "p",
                    "text": "Main article:Testing Guide."
                },
                {
                    "type": "list",
                    "items": [
                        "Cypressis recommended for E2E tests. It can also be used for component testing for Vue SFCs via theCypress Component Test Runner.",
                        "Vitestis a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing.",
                        "Jestcan be made to work with Vite viavite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration."
                    ]
                },
                {
                    "type": "p",
                    "text": "Cypressis recommended for E2E tests. It can also be used for component testing for Vue SFCs via theCypress Component Test Runner."
                },
                {
                    "type": "p",
                    "text": "Vitestis a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing."
                },
                {
                    "type": "p",
                    "text": "Jestcan be made to work with Vite viavite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Linting​"
                },
                {
                    "type": "p",
                    "text": "The Vue team maintainseslint-plugin-vue, anESLintplugin that supports SFC-specific linting rules."
                },
                {
                    "type": "p",
                    "text": "Users previously using Vue CLI may be used to having linters configured via webpack loaders. However when using a Vite-based build setup, our general recommendation is:"
                },
                {
                    "type": "list",
                    "items": [
                        "npm install -D eslint eslint-plugin-vue, then followeslint-plugin-vue'sconfiguration guide.",
                        "Setup ESLint IDE extensions, for exampleESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server.",
                        "Run ESLint as part of the production build command, so you get full linter feedback before shipping to production.",
                        "(Optional) Setup tools likelint-stagedto automatically lint modified files on git commit."
                    ]
                },
                {
                    "type": "p",
                    "text": "npm install -D eslint eslint-plugin-vue, then followeslint-plugin-vue'sconfiguration guide."
                },
                {
                    "type": "p",
                    "text": "Setup ESLint IDE extensions, for exampleESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server."
                },
                {
                    "type": "p",
                    "text": "Run ESLint as part of the production build command, so you get full linter feedback before shipping to production."
                },
                {
                    "type": "p",
                    "text": "(Optional) Setup tools likelint-stagedto automatically lint modified files on git commit."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Formatting​"
                },
                {
                    "type": "list",
                    "items": [
                        "TheVue - OfficialVS Code extension provides formatting for Vue SFCs out of the box.",
                        "Alternatively,Prettierprovides built-in Vue SFC formatting support."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheVue - OfficialVS Code extension provides formatting for Vue SFCs out of the box."
                },
                {
                    "type": "p",
                    "text": "Alternatively,Prettierprovides built-in Vue SFC formatting support."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "SFC Custom Block Integrations​"
                },
                {
                    "type": "p",
                    "text": "Custom blocks are compiled into imports to the same Vue file with different request queries. It is up to the underlying build tool to handle these import requests."
                },
                {
                    "type": "list",
                    "items": [
                        "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript.Example",
                        "If using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks.Example"
                    ]
                },
                {
                    "type": "p",
                    "text": "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript.Example"
                },
                {
                    "type": "p",
                    "text": "If using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks.Example"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lower-Level Packages​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "@vue/compiler-sfc​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "This package is part of the Vue core monorepo and is always published with the same version as the mainvuepackage. It is included as a dependency of the mainvuepackage and proxied undervue/compiler-sfcso you don't need to install it individually."
                },
                {
                    "type": "p",
                    "text": "The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Always prefer using this package via thevue/compiler-sfcdeep import since this ensures its version is in sync with the Vue runtime."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "@vitejs/plugin-vue​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Official plugin that provides Vue SFC support in Vite."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vue-loader​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "The official loader that provides Vue SFC support in webpack. If you are using Vue CLI, also seedocs on modifyingvue-loaderoptions in Vue CLI."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Online Playgrounds​"
                },
                {
                    "type": "list",
                    "items": [
                        "VueUse Playground",
                        "Vue + Vite on Repl.it",
                        "Vue on CodeSandbox",
                        "Vue on Codepen",
                        "Vue on WebComponents.dev"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/scaling-up/tooling.html#note-on-in-browser-template-compilation",
            "title": "Tooling | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Tooling​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Try It Online​"
                },
                {
                    "type": "p",
                    "text": "You don't need to install anything on your machine to try out Vue SFCs - there are online playgrounds that allow you to do so right in the browser:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue SFC PlaygroundAlways deployed from latest commitDesigned for inspecting component compilation results",
                        "Always deployed from latest commit",
                        "Designed for inspecting component compilation results",
                        "Vue + Vite on StackBlitzIDE-like environment running actual Vite dev server in the browserClosest to local setup",
                        "IDE-like environment running actual Vite dev server in the browser",
                        "Closest to local setup"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Always deployed from latest commit",
                        "Designed for inspecting component compilation results"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "IDE-like environment running actual Vite dev server in the browser",
                        "Closest to local setup"
                    ]
                },
                {
                    "type": "p",
                    "text": "It is also recommended to use these online playgrounds to provide reproductions when reporting bugs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Project Scaffolding​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vite​"
                },
                {
                    "type": "p",
                    "text": "Viteis a lightweight and fast build tool with first-class Vue SFC support. It is created by Evan You, who is also the author of Vue!"
                },
                {
                    "type": "p",
                    "text": "To get started with Vite + Vue, simply run:"
                },
                {
                    "type": "code",
                    "code": "$npmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "$pnpmcreatevue@latest"
                },
                {
                    "type": "code",
                    "code": "# For Yarn Modern (v2+)$yarncreatevue@latest# For Yarn ^v4.11$yarndlxcreate-vue@latest"
                },
                {
                    "type": "code",
                    "code": "$buncreatevue@latest"
                },
                {
                    "type": "p",
                    "text": "This command will install and executecreate-vue, the official Vue project scaffolding tool."
                },
                {
                    "type": "list",
                    "items": [
                        "To learn more about Vite, check out theVite docs.",
                        "To configure Vue-specific behavior in a Vite project, for example passing options to the Vue compiler, check out the docs for@vitejs/plugin-vue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Both online playgrounds mentioned above also support downloading files as a Vite project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Vue CLI​"
                },
                {
                    "type": "p",
                    "text": "Vue CLIis the official webpack-based toolchain for Vue. It is now in maintenance mode and we recommend starting new projects with Vite unless you rely on specific webpack-only features. Vite will provide superior developer experience in most cases."
                },
                {
                    "type": "p",
                    "text": "For information on migrating from Vue CLI to Vite:"
                },
                {
                    "type": "list",
                    "items": [
                        "Vue CLI -> Vite Migration Guide from VueSchool.io",
                        "Tools / Plugins that help with auto migration"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Note on In-Browser Template Compilation​"
                },
                {
                    "type": "p",
                    "text": "When using Vue without a build step, component templates are written either directly in the page's HTML or as inlined JavaScript strings. In such cases, Vue needs to ship the template compiler to the browser in order to perform on-the-fly template compilation. On the other hand, the compiler would be unnecessary if we pre-compile the templates with a build step. To reduce client bundle size, Vue providesdifferent \"builds\"optimized for different use cases."
                },
                {
                    "type": "list",
                    "items": [
                        "Build files that start withvue.runtime.*areruntime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step.",
                        "Build files that do not include.runtimearefull builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by ~14kb."
                    ]
                },
                {
                    "type": "p",
                    "text": "Build files that start withvue.runtime.*areruntime-only builds: they do not include the compiler. When using these builds, all templates must be pre-compiled via a build step."
                },
                {
                    "type": "p",
                    "text": "Build files that do not include.runtimearefull builds: they include the compiler and support compiling templates directly in the browser. However, they will increase the payload by ~14kb."
                },
                {
                    "type": "p",
                    "text": "Our default tooling setups use the runtime-only build since all templates in SFCs are pre-compiled. If, for some reason, you need in-browser template compilation even with a build step, you can do so by configuring the build tool to aliasvuetovue/dist/vue.esm-bundler.jsinstead."
                },
                {
                    "type": "p",
                    "text": "If you are looking for a lighter-weight alternative for no-build-step usage, check outpetite-vue."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "IDE Support​"
                },
                {
                    "type": "list",
                    "items": [
                        "The recommended IDE setup isVS Code+ theVue - Official extension(previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props.TIPVue - Official replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.",
                        "WebStormalso provides great built-in support for Vue SFCs.",
                        "Other IDEs that support theLanguage Service Protocol(LSP) can also leverage Volar's core functionalities via LSP:Sublime Text support viaLSP-Volar.vim / Neovim support viacoc-volar.emacs support vialsp-mode",
                        "Sublime Text support viaLSP-Volar.",
                        "vim / Neovim support viacoc-volar.",
                        "emacs support vialsp-mode"
                    ]
                },
                {
                    "type": "p",
                    "text": "The recommended IDE setup isVS Code+ theVue - Official extension(previously Volar). The extension provides syntax highlighting, TypeScript support, and intellisense for template expressions and component props."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Vue - Official replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects."
                },
                {
                    "type": "p",
                    "text": "WebStormalso provides great built-in support for Vue SFCs."
                },
                {
                    "type": "p",
                    "text": "Other IDEs that support theLanguage Service Protocol(LSP) can also leverage Volar's core functionalities via LSP:"
                },
                {
                    "type": "list",
                    "items": [
                        "Sublime Text support viaLSP-Volar.",
                        "vim / Neovim support viacoc-volar.",
                        "emacs support vialsp-mode"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sublime Text support viaLSP-Volar."
                },
                {
                    "type": "p",
                    "text": "vim / Neovim support viacoc-volar."
                },
                {
                    "type": "p",
                    "text": "emacs support vialsp-mode"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Browser Devtools​"
                },
                {
                    "type": "p",
                    "text": "The Vue browser devtools extension allows you to explore a Vue app's component tree, inspect the state of individual components, track state management events, and profile performance."
                },
                {
                    "type": "p",
                    "text": ""
                },
                {
                    "type": "list",
                    "items": [
                        "Documentation",
                        "Chrome Extension",
                        "Vite Plugin",
                        "Standalone Electron app"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "TypeScript​"
                },
                {
                    "type": "p",
                    "text": "Main article:Using Vue with TypeScript."
                },
                {
                    "type": "list",
                    "items": [
                        "Vue - Official extensionprovides type checking for SFCs using<script lang=\"ts\">blocks, including template expressions and cross-component props validation.",
                        "Usevue-tscfor performing the same type checking from the command line, or for generatingd.tsfiles for SFCs."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue - Official extensionprovides type checking for SFCs using<script lang=\"ts\">blocks, including template expressions and cross-component props validation."
                },
                {
                    "type": "p",
                    "text": "Usevue-tscfor performing the same type checking from the command line, or for generatingd.tsfiles for SFCs."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Testing​"
                },
                {
                    "type": "p",
                    "text": "Main article:Testing Guide."
                },
                {
                    "type": "list",
                    "items": [
                        "Cypressis recommended for E2E tests. It can also be used for component testing for Vue SFCs via theCypress Component Test Runner.",
                        "Vitestis a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing.",
                        "Jestcan be made to work with Vite viavite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration."
                    ]
                },
                {
                    "type": "p",
                    "text": "Cypressis recommended for E2E tests. It can also be used for component testing for Vue SFCs via theCypress Component Test Runner."
                },
                {
                    "type": "p",
                    "text": "Vitestis a test runner created by Vue / Vite team members that focuses on speed. It is specifically designed for Vite-based applications to provide the same instant feedback loop for unit / component testing."
                },
                {
                    "type": "p",
                    "text": "Jestcan be made to work with Vite viavite-jest. However, this is only recommended if you have existing Jest-based test suites that you need to migrate over to a Vite-based setup, as Vitest provides similar functionalities with a much more efficient integration."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Linting​"
                },
                {
                    "type": "p",
                    "text": "The Vue team maintainseslint-plugin-vue, anESLintplugin that supports SFC-specific linting rules."
                },
                {
                    "type": "p",
                    "text": "Users previously using Vue CLI may be used to having linters configured via webpack loaders. However when using a Vite-based build setup, our general recommendation is:"
                },
                {
                    "type": "list",
                    "items": [
                        "npm install -D eslint eslint-plugin-vue, then followeslint-plugin-vue'sconfiguration guide.",
                        "Setup ESLint IDE extensions, for exampleESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server.",
                        "Run ESLint as part of the production build command, so you get full linter feedback before shipping to production.",
                        "(Optional) Setup tools likelint-stagedto automatically lint modified files on git commit."
                    ]
                },
                {
                    "type": "p",
                    "text": "npm install -D eslint eslint-plugin-vue, then followeslint-plugin-vue'sconfiguration guide."
                },
                {
                    "type": "p",
                    "text": "Setup ESLint IDE extensions, for exampleESLint for VS Code, so you get linter feedback right in your editor during development. This also avoids unnecessary linting cost when starting the dev server."
                },
                {
                    "type": "p",
                    "text": "Run ESLint as part of the production build command, so you get full linter feedback before shipping to production."
                },
                {
                    "type": "p",
                    "text": "(Optional) Setup tools likelint-stagedto automatically lint modified files on git commit."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Formatting​"
                },
                {
                    "type": "list",
                    "items": [
                        "TheVue - OfficialVS Code extension provides formatting for Vue SFCs out of the box.",
                        "Alternatively,Prettierprovides built-in Vue SFC formatting support."
                    ]
                },
                {
                    "type": "p",
                    "text": "TheVue - OfficialVS Code extension provides formatting for Vue SFCs out of the box."
                },
                {
                    "type": "p",
                    "text": "Alternatively,Prettierprovides built-in Vue SFC formatting support."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "SFC Custom Block Integrations​"
                },
                {
                    "type": "p",
                    "text": "Custom blocks are compiled into imports to the same Vue file with different request queries. It is up to the underlying build tool to handle these import requests."
                },
                {
                    "type": "list",
                    "items": [
                        "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript.Example",
                        "If using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks.Example"
                    ]
                },
                {
                    "type": "p",
                    "text": "If using Vite, a custom Vite plugin should be used to transform matched custom blocks into executable JavaScript.Example"
                },
                {
                    "type": "p",
                    "text": "If using Vue CLI or plain webpack, a webpack loader should be configured to transform the matched blocks.Example"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Lower-Level Packages​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "@vue/compiler-sfc​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "This package is part of the Vue core monorepo and is always published with the same version as the mainvuepackage. It is included as a dependency of the mainvuepackage and proxied undervue/compiler-sfcso you don't need to install it individually."
                },
                {
                    "type": "p",
                    "text": "The package itself provides lower-level utilities for processing Vue SFCs and is only meant for tooling authors that need to support Vue SFCs in custom tools."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Always prefer using this package via thevue/compiler-sfcdeep import since this ensures its version is in sync with the Vue runtime."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "@vitejs/plugin-vue​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "Official plugin that provides Vue SFC support in Vite."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "vue-loader​"
                },
                {
                    "type": "list",
                    "items": [
                        "Docs"
                    ]
                },
                {
                    "type": "p",
                    "text": "The official loader that provides Vue SFC support in webpack. If you are using Vue CLI, also seedocs on modifyingvue-loaderoptions in Vue CLI."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Other Online Playgrounds​"
                },
                {
                    "type": "list",
                    "items": [
                        "VueUse Playground",
                        "Vue + Vite on Repl.it",
                        "Vue on CodeSandbox",
                        "Vue on Codepen",
                        "Vue on WebComponents.dev"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/typescript/composition-api",
            "title": "TypeScript with Composition API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "TypeScript with Composition API​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read the overview onUsing Vue with TypeScript."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Component Props​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Using<script setup>​"
                },
                {
                    "type": "p",
                    "text": "When using<script setup>, thedefineProps()macro supports inferring the props types based on its argument:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">constprops=defineProps({foo: { type: String, required:true},bar: Number})props.foo// stringprops.bar// number | undefined</script>"
                },
                {
                    "type": "p",
                    "text": "This is called \"runtime declaration\", because the argument passed todefineProps()will be used as the runtimepropsoption."
                },
                {
                    "type": "p",
                    "text": "However, it is usually more straightforward to define props with pure types via a generic type argument:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">constprops=defineProps<{foo:stringbar?:number}>()</script>"
                },
                {
                    "type": "p",
                    "text": "This is called \"type-based declaration\". The compiler will try to do its best to infer the equivalent runtime options based on the type argument. In this case, our second example compiles into the exact same runtime options as the first example."
                },
                {
                    "type": "p",
                    "text": "You can use either type-based declaration OR runtime declaration, but you cannot use both at the same time."
                },
                {
                    "type": "p",
                    "text": "We can also move the props types into a separate interface:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">interfaceProps{foo:stringbar?:number}constprops=defineProps<Props>()</script>"
                },
                {
                    "type": "p",
                    "text": "This also works ifPropsis imported from an external source. This feature requires TypeScript to be a peer dependency of Vue."
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">importtype{ Props }from'./foo'constprops=defineProps<Props>()</script>"
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Syntax Limitations​"
                },
                {
                    "type": "p",
                    "text": "In version 3.2 and below, the generic type parameter fordefineProps()were limited to a type literal or a reference to a local interface."
                },
                {
                    "type": "p",
                    "text": "This limitation has been resolved in 3.3. The latest version of Vue supports referencing imported and a limited set of complex types in the type parameter position. However, because the type to runtime conversion is still AST-based, some complex types that require actual type analysis, e.g. conditional types, are not supported. You can use conditional types for the type of a single prop, but not the entire props object."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Props Default Values​"
                },
                {
                    "type": "p",
                    "text": "When using type-based declaration, we lose the ability to declare default values for the props. This can be resolved by usingReactive Props Destructure:"
                },
                {
                    "type": "code",
                    "code": "interfaceProps{msg?:stringlabels?:string[]}const{msg='hello',labels=['one','two'] }=defineProps<Props>()"
                },
                {
                    "type": "p",
                    "text": "In 3.4 and below, Reactive Props Destructure is not enabled by default. An alternative is to use thewithDefaultscompiler macro:"
                },
                {
                    "type": "code",
                    "code": "interfaceProps{msg?:stringlabels?:string[]}constprops=withDefaults(defineProps<Props>(), {msg:'hello',labels: ()=>['one','two']})"
                },
                {
                    "type": "p",
                    "text": "This will be compiled to equivalent runtime propsdefaultoptions. In addition, thewithDefaultshelper provides type checks for the default values, and ensures the returnedpropstype has the optional flags removed for properties that do have default values declared."
                },
                {
                    "type": "p",
                    "text": "INFO"
                },
                {
                    "type": "p",
                    "text": "Note that default values for mutable reference types (like arrays or objects) should be wrapped in functions when usingwithDefaultsto avoid accidental modification and external side effects. This ensures each component instance gets its own copy of the default value. This isnotnecessary when using default values with destructure."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Without<script setup>​"
                },
                {
                    "type": "p",
                    "text": "If not using<script setup>, it is necessary to usedefineComponent()to enable props type inference. The type of the props object passed tosetup()is inferred from thepropsoption."
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({props: {message: String},setup(props) {props.message// <-- type: string}})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Complex prop types​"
                },
                {
                    "type": "p",
                    "text": "With type-based declaration, a prop can use a complex type much like any other type:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">interfaceBook{title:stringauthor:stringyear:number}constprops=defineProps<{book:Book}>()</script>"
                },
                {
                    "type": "p",
                    "text": "For runtime declaration, we can use thePropTypeutility type:"
                },
                {
                    "type": "code",
                    "code": "importtype{ PropType }from'vue'constprops=defineProps({book: ObjectasPropType<Book>})"
                },
                {
                    "type": "p",
                    "text": "This works in much the same way if we're specifying thepropsoption directly:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'importtype{ PropType }from'vue'exportdefaultdefineComponent({props: {book: ObjectasPropType<Book>}})"
                },
                {
                    "type": "p",
                    "text": "Thepropsoption is more commonly used with the Options API, so you'll find more detailed examples in the guide toTypeScript with Options API. The techniques shown in those examples also apply to runtime declarations usingdefineProps()."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Component Emits​"
                },
                {
                    "type": "p",
                    "text": "In<script setup>, theemitfunction can also be typed using either runtime declaration OR type declaration:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">// runtimeconstemit=defineEmits(['change','update'])// options basedconstemit=defineEmits({change: (id:number)=>{// return `true` or `false` to indicate// validation pass / fail},update: (value:string)=>{// return `true` or `false` to indicate// validation pass / fail}})// type-basedconstemit=defineEmits<{(e:'change',id:number):void(e:'update',value:string):void}>()// 3.3+: alternative, more succinct syntaxconstemit=defineEmits<{change:[id:number]update:[value:string]}>()</script>"
                },
                {
                    "type": "p",
                    "text": "The type argument can be one of the following:"
                },
                {
                    "type": "list",
                    "items": [
                        "A callable function type, but written as a type literal withCall Signatures. It will be used as the type of the returnedemitfunction.",
                        "A type literal where the keys are the event names, and values are array / tuple types representing the additional accepted parameters for the event. The example above is using named tuples so each argument can have an explicit name."
                    ]
                },
                {
                    "type": "p",
                    "text": "As we can see, the type declaration gives us much finer-grained control over the type constraints of emitted events."
                },
                {
                    "type": "p",
                    "text": "When not using<script setup>,defineComponent()is able to infer the allowed events for theemitfunction exposed on the setup context:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({emits: ['change'],setup(props, {emit}) {emit('change')// <-- type check / auto-completion}})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typingref()​"
                },
                {
                    "type": "p",
                    "text": "Refs infer the type from the initial value:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'// inferred type: Ref<number>constyear=ref(2020)// => TS Error: Type 'string' is not assignable to type 'number'.year.value='2020'"
                },
                {
                    "type": "p",
                    "text": "Sometimes we may need to specify complex types for a ref's inner value. We can do that by using theReftype:"
                },
                {
                    "type": "code",
                    "code": "import{ ref }from'vue'importtype{ Ref }from'vue'constyear:Ref<string|number>=ref('2020')year.value=2020// ok!"
                },
                {
                    "type": "p",
                    "text": "Or, by passing a generic argument when callingref()to override the default inference:"
                },
                {
                    "type": "code",
                    "code": "// resulting type: Ref<string | number>constyear=ref<string|number>('2020')year.value=2020// ok!"
                },
                {
                    "type": "p",
                    "text": "If you specify a generic type argument but omit the initial value, the resulting type will be a union type that includesundefined:"
                },
                {
                    "type": "code",
                    "code": "// inferred type: Ref<number | undefined>constn=ref<number>()"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typingreactive()​"
                },
                {
                    "type": "p",
                    "text": "reactive()also implicitly infers the type from its argument:"
                },
                {
                    "type": "code",
                    "code": "import{ reactive }from'vue'// inferred type: { title: string }constbook=reactive({ title:'Vue 3 Guide'})"
                },
                {
                    "type": "p",
                    "text": "To explicitly type areactiveproperty, we can use interfaces:"
                },
                {
                    "type": "code",
                    "code": "import{ reactive }from'vue'interfaceBook{title:stringyear?:number}constbook:Book=reactive({ title:'Vue 3 Guide'})"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "It's not recommended to use the generic argument ofreactive()because the returned type, which handles nested ref unwrapping, is different from the generic argument type."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typingcomputed()​"
                },
                {
                    "type": "p",
                    "text": "computed()infers its type based on the getter's return value:"
                },
                {
                    "type": "code",
                    "code": "import{ ref, computed }from'vue'constcount=ref(0)// inferred type: ComputedRef<number>constdouble=computed(()=>count.value*2)// => TS Error: Property 'split' does not exist on type 'number'constresult=double.value.split('')"
                },
                {
                    "type": "p",
                    "text": "You can also specify an explicit type via a generic argument:"
                },
                {
                    "type": "code",
                    "code": "constdouble=computed<number>(()=>{// type error if this doesn't return a number})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Event Handlers​"
                },
                {
                    "type": "p",
                    "text": "When dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">functionhandleChange(event) {// `event` implicitly has `any` typeconsole.log(event.target.value)}</script><template><inputtype=\"text\"@change=\"handleChange\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Without type annotation, theeventargument will implicitly have a type ofany. This will also result in a TS error if\"strict\": trueor\"noImplicitAny\": trueare used intsconfig.json. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties ofevent:"
                },
                {
                    "type": "code",
                    "code": "functionhandleChange(event:Event) {console.log((event.targetasHTMLInputElement).value)}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Provide / Inject​"
                },
                {
                    "type": "p",
                    "text": "Provide and inject are usually performed in separate components. To properly type injected values, Vue provides anInjectionKeyinterface, which is a generic type that extendsSymbol. It can be used to sync the type of the injected value between the provider and the consumer:"
                },
                {
                    "type": "code",
                    "code": "import{ provide, inject }from'vue'importtype{ InjectionKey }from'vue'constkey=Symbol()asInjectionKey<string>provide(key,'foo')// providing non-string value will result in errorconstfoo=inject(key)// type of foo: string | undefined"
                },
                {
                    "type": "p",
                    "text": "It's recommended to place the injection key in a separate file so that it can be imported in multiple components."
                },
                {
                    "type": "p",
                    "text": "When using string injection keys, the type of the injected value will beunknown, and needs to be explicitly declared via a generic type argument:"
                },
                {
                    "type": "code",
                    "code": "constfoo=inject<string>('foo')// type: string | undefined"
                },
                {
                    "type": "p",
                    "text": "Notice the injected value can still beundefined, because there is no guarantee that a provider will provide this value at runtime."
                },
                {
                    "type": "p",
                    "text": "Theundefinedtype can be removed by providing a default value:"
                },
                {
                    "type": "code",
                    "code": "constfoo=inject<string>('foo','bar')// type: string"
                },
                {
                    "type": "p",
                    "text": "If you are sure that the value is always provided, you can also force cast the value:"
                },
                {
                    "type": "code",
                    "code": "constfoo=inject('foo')asstring"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Template Refs​"
                },
                {
                    "type": "p",
                    "text": "With Vue 3.5 and@vue/language-tools2.1 (powering both the IDE language service andvue-tsc), the type of refs created byuseTemplateRef()in SFCs can beautomatically inferredfor static refs based on what element the matchingrefattribute is used on."
                },
                {
                    "type": "p",
                    "text": "In cases where auto-inference is not possible, you can still cast the template ref to an explicit type via the generic argument:"
                },
                {
                    "type": "code",
                    "code": "constel=useTemplateRef<HTMLInputElement>(null)"
                },
                {
                    "type": "p",
                    "text": "Template refs should be created with an explicit generic type argument and an initial value ofnull:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">import{ ref, onMounted }from'vue'constel=ref<HTMLInputElement|null>(null)onMounted(()=>{el.value?.focus()})</script><template><inputref=\"el\"/></template>"
                },
                {
                    "type": "p",
                    "text": "To get the right DOM interface you can check pages likeMDN."
                },
                {
                    "type": "p",
                    "text": "Note that for strict type safety, it is necessary to use optional chaining or type guards when accessingel.value. This is because the initial ref value isnulluntil the component is mounted, and it can also be set tonullif the referenced element is unmounted byv-if."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Component Template Refs​"
                },
                {
                    "type": "p",
                    "text": "With Vue 3.5 and@vue/language-tools2.1 (powering both the IDE language service andvue-tsc), the type of refs created byuseTemplateRef()in SFCs can beautomatically inferredfor static refs based on what element or component the matchingrefattribute is used on."
                },
                {
                    "type": "p",
                    "text": "In cases where auto-inference is not possible (e.g. non-SFC usage or dynamic components), you can still cast the template ref to an explicit type via the generic argument."
                },
                {
                    "type": "p",
                    "text": "In order to get the instance type of an imported component, we need to first get its type viatypeof, then use TypeScript's built-inInstanceTypeutility to extract its instance type:"
                },
                {
                    "type": "code",
                    "code": "<!-- App.vue --><scriptsetuplang=\"ts\">import{ useTemplateRef }from'vue'importFoofrom'./Foo.vue'importBarfrom'./Bar.vue'typeFooType=InstanceType<typeofFoo>typeBarType=InstanceType<typeofBar>constcompRef=useTemplateRef<FooType|BarType>('comp')</script><template><component:is=\"Math.random() > 0.5 ? Foo : Bar\"ref=\"comp\"/></template>"
                },
                {
                    "type": "p",
                    "text": "In cases where the exact type of the component isn't available or isn't important,ComponentPublicInstancecan be used instead. This will only include properties that are shared by all components, such as$el:"
                },
                {
                    "type": "code",
                    "code": "import{ useTemplateRef }from'vue'importtype{ ComponentPublicInstance }from'vue'constchild=useTemplateRef<ComponentPublicInstance|null>(null)"
                },
                {
                    "type": "p",
                    "text": "In cases where the component referenced is ageneric component, for instanceMyGenericModal:"
                },
                {
                    "type": "code",
                    "code": "<!-- MyGenericModal.vue --><scriptsetuplang=\"ts\"generic=\"ContentTypeextendsstring|number\">import{ ref }from'vue'constcontent=ref<ContentType|null>(null)constopen=(newContent:ContentType)=>(content.value=newContent)defineExpose({open})</script>"
                },
                {
                    "type": "p",
                    "text": "It needs to be referenced usingComponentExposedfrom thevue-component-type-helperslibrary asInstanceTypewon't work."
                },
                {
                    "type": "code",
                    "code": "<!-- App.vue --><scriptsetuplang=\"ts\">import{ useTemplateRef }from'vue'importMyGenericModalfrom'./MyGenericModal.vue'importtype{ ComponentExposed }from'vue-component-type-helpers'constmodal=useTemplateRef<ComponentExposed<typeofMyGenericModal>>(null)constopenModal=()=>{modal.value?.open('newValue')}</script>"
                },
                {
                    "type": "p",
                    "text": "Note that with@vue/language-tools2.1+, static template refs' types can be automatically inferred and the above is only needed in edge cases."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/typescript/options-api",
            "title": "TypeScript with Options API | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "TypeScript with Options API​"
                },
                {
                    "type": "p",
                    "text": "This page assumes you've already read the overview onUsing Vue with TypeScript."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "While Vue does support TypeScript usage with Options API, it is recommended to use Vue with TypeScript via Composition API as it offers simpler, more efficient and more robust type inference."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Component Props​"
                },
                {
                    "type": "p",
                    "text": "Type inference for props in Options API requires wrapping the component withdefineComponent(). With it, Vue is able to infer the types for the props based on thepropsoption, taking additional options such asrequired: trueanddefaultinto account:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({// type inference enabledprops: {name: String,id: [Number, String],msg: { type: String, required:true},metadata:null},mounted() {this.name// type: string | undefinedthis.id// type: number | string | undefinedthis.msg// type: stringthis.metadata// type: any}})"
                },
                {
                    "type": "p",
                    "text": "However, the runtimepropsoptions only support using constructor functions as a prop's type - there is no way to specify complex types such as objects with nested properties or function call signatures."
                },
                {
                    "type": "p",
                    "text": "To annotate complex props types, we can use thePropTypeutility type:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'importtype{ PropType }from'vue'interfaceBook{title:stringauthor:stringyear:number}exportdefaultdefineComponent({props: {book: {// provide more specific type to `Object`type: ObjectasPropType<Book>,required:true},// can also annotate functionscallback: FunctionasPropType<(id:number)=>void>},mounted() {this.book.title// stringthis.book.year// number// TS Error: argument of type 'string' is not// assignable to parameter of type 'number'this.callback?.('123')}})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Caveats​"
                },
                {
                    "type": "p",
                    "text": "If your TypeScript version is less than4.7, you have to be careful when using function values forvalidatoranddefaultprop options - make sure to use arrow functions:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'importtype{ PropType }from'vue'interfaceBook{title:stringyear?:number}exportdefaultdefineComponent({props: {bookA: {type: ObjectasPropType<Book>,// Make sure to use arrow functions if your TypeScript version is less than 4.7default: ()=>({title:'Arrow Function Expression'}),validator: (book:Book)=>!!book.title}}})"
                },
                {
                    "type": "p",
                    "text": "This prevents TypeScript from having to infer the type ofthisinside these functions, which, unfortunately, can cause the type inference to fail. It was a previousdesign limitation, and now has been improved inTypeScript 4.7."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Component Emits​"
                },
                {
                    "type": "p",
                    "text": "We can declare the expected payload type for an emitted event using the object syntax of theemitsoption. Also, all non-declared emitted events will throw a type error when called:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({emits: {addBook(payload:{bookName:string}) {// perform runtime validationreturnpayload.bookName.length>0}},methods: {onSubmit() {this.$emit('addBook', {bookName:123// Type error!})this.$emit('non-declared-event')// Type error!}}})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Computed Properties​"
                },
                {
                    "type": "p",
                    "text": "A computed property infers its type based on its return value:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({data() {return{message:'Hello!'}},computed: {greeting() {returnthis.message+'!'}},mounted() {this.greeting// type: string}})"
                },
                {
                    "type": "p",
                    "text": "In some cases, you may want to explicitly annotate the type of a computed property to ensure its implementation is correct:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({data() {return{message:'Hello!'}},computed: {// explicitly annotate return typegreeting():string{returnthis.message+'!'},// annotating a writable computed propertygreetingUppercased: {get():string{returnthis.greeting.toUpperCase()},set(newValue:string) {this.message=newValue.toUpperCase()}}}})"
                },
                {
                    "type": "p",
                    "text": "Explicit annotations may also be required in some edge cases where TypeScript fails to infer the type of a computed property due to circular inference loops."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Typing Event Handlers​"
                },
                {
                    "type": "p",
                    "text": "When dealing with native DOM events, it might be useful to type the argument we pass to the handler correctly. Let's take a look at this example:"
                },
                {
                    "type": "code",
                    "code": "<scriptlang=\"ts\">import{ defineComponent }from'vue'exportdefaultdefineComponent({methods: {handleChange(event) {// `event` implicitly has `any` typeconsole.log(event.target.value)}}})</script><template><inputtype=\"text\"@change=\"handleChange\"/></template>"
                },
                {
                    "type": "p",
                    "text": "Without type annotation, theeventargument will implicitly have a type ofany. This will also result in a TS error if\"strict\": trueor\"noImplicitAny\": trueare used intsconfig.json. It is therefore recommended to explicitly annotate the argument of event handlers. In addition, you may need to use type assertions when accessing the properties ofevent:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({methods: {handleChange(event:Event) {console.log((event.targetasHTMLInputElement).value)}}})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Augmenting Global Properties​"
                },
                {
                    "type": "p",
                    "text": "Some plugins install globally available properties to all component instances viaapp.config.globalProperties. For example, we may installthis.$httpfor data-fetching orthis.$translatefor internationalization. To make this play well with TypeScript, Vue exposes aComponentCustomPropertiesinterface designed to be augmented viaTypeScript module augmentation:"
                },
                {
                    "type": "code",
                    "code": "importaxiosfrom'axios'declaremodule'vue'{interfaceComponentCustomProperties{$http:typeofaxios$translate:(key:string)=>string}}"
                },
                {
                    "type": "p",
                    "text": "See also:"
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScript unit tests for component type extensions"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Type Augmentation Placement​"
                },
                {
                    "type": "p",
                    "text": "We can put this type augmentation in a.tsfile, or in a project-wide*.d.tsfile. Either way, make sure it is included intsconfig.json. For library / plugin authors, this file should be specified in thetypesproperty inpackage.json."
                },
                {
                    "type": "p",
                    "text": "In order to take advantage of module augmentation, you will need to ensure the augmentation is placed in aTypeScript module. That is to say, the file needs to contain at least one top-levelimportorexport, even if it is justexport {}. If the augmentation is placed outside of a module, it will overwrite the original types rather than augmenting them!"
                },
                {
                    "type": "code",
                    "code": "// Does not work, overwrites the original types.declaremodule'vue'{interfaceComponentCustomProperties{$translate:(key:string)=>string}}"
                },
                {
                    "type": "code",
                    "code": "// Works correctlyexport{}declaremodule'vue'{interfaceComponentCustomProperties{$translate:(key:string)=>string}}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Augmenting Custom Options​"
                },
                {
                    "type": "p",
                    "text": "Some plugins, for examplevue-router, provide support for custom component options such asbeforeRouteEnter:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({beforeRouteEnter(to,from,next) {// ...}})"
                },
                {
                    "type": "p",
                    "text": "Without proper type augmentation, the arguments of this hook will implicitly haveanytype. We can augment theComponentCustomOptionsinterface to support these custom options:"
                },
                {
                    "type": "code",
                    "code": "import{ Route }from'vue-router'declaremodule'vue'{interfaceComponentCustomOptions{beforeRouteEnter?(to:Route,from:Route,next:()=>void):void}}"
                },
                {
                    "type": "p",
                    "text": "Now thebeforeRouteEnteroption will be properly typed. Note this is just an example - well-typed libraries likevue-routershould automatically perform these augmentations in their own type definitions."
                },
                {
                    "type": "p",
                    "text": "The placement of this augmentation is subject to thesame restrictionsas global property augmentations."
                },
                {
                    "type": "p",
                    "text": "See also:"
                },
                {
                    "type": "list",
                    "items": [
                        "TypeScript unit tests for component type extensions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/guide/typescript/overview",
            "title": "Using Vue with TypeScript | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Using Vue with TypeScript​"
                },
                {
                    "type": "p",
                    "text": "A type system like TypeScript can detect many common errors via static analysis at build time. This reduces the chance of runtime errors in production, and also allows us to more confidently refactor code in large-scale applications. TypeScript also improves developer ergonomics via type-based auto-completion in IDEs."
                },
                {
                    "type": "p",
                    "text": "Vue is written in TypeScript itself and provides first-class TypeScript support. All official Vue packages come with bundled type declarations that should work out-of-the-box."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Project Setup​"
                },
                {
                    "type": "p",
                    "text": "create-vue, the official project scaffolding tool, offers the options to scaffold aVite-powered, TypeScript-ready Vue project."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Overview​"
                },
                {
                    "type": "p",
                    "text": "With a Vite-based setup, the dev server and the bundler are transpilation-only and do not perform any type-checking. This ensures the Vite dev server stays blazing fast even when using TypeScript."
                },
                {
                    "type": "list",
                    "items": [
                        "During development, we recommend relying on a goodIDE setupfor instant feedback on type errors.",
                        "If using SFCs, use thevue-tscutility for command line type checking and type declaration generation.vue-tscis a wrapper aroundtsc, TypeScript's own command line interface. It works largely the same astscexcept that it supports Vue SFCs in addition to TypeScript files. You can runvue-tscin watch mode in parallel to the Vite dev server, or use a Vite plugin likevite-plugin-checkerwhich runs the checks in a separate worker thread.",
                        "Vue CLI also provides TypeScript support, but is no longer recommended. Seenotes below."
                    ]
                },
                {
                    "type": "p",
                    "text": "During development, we recommend relying on a goodIDE setupfor instant feedback on type errors."
                },
                {
                    "type": "p",
                    "text": "If using SFCs, use thevue-tscutility for command line type checking and type declaration generation.vue-tscis a wrapper aroundtsc, TypeScript's own command line interface. It works largely the same astscexcept that it supports Vue SFCs in addition to TypeScript files. You can runvue-tscin watch mode in parallel to the Vite dev server, or use a Vite plugin likevite-plugin-checkerwhich runs the checks in a separate worker thread."
                },
                {
                    "type": "p",
                    "text": "Vue CLI also provides TypeScript support, but is no longer recommended. Seenotes below."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "IDE Support​"
                },
                {
                    "type": "list",
                    "items": [
                        "Visual Studio Code(VS Code) is strongly recommended for its great out-of-the-box support for TypeScript.Vue - Official(previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.TIPVue - Official extension replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.",
                        "Vue - Official(previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.TIPVue - Official extension replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects.",
                        "WebStormalso provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or viaa free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher."
                    ]
                },
                {
                    "type": "p",
                    "text": "Visual Studio Code(VS Code) is strongly recommended for its great out-of-the-box support for TypeScript."
                },
                {
                    "type": "list",
                    "items": [
                        "Vue - Official(previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features.TIPVue - Official extension replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects."
                    ]
                },
                {
                    "type": "p",
                    "text": "Vue - Official(previously Volar) is the official VS Code extension that provides TypeScript support inside Vue SFCs, along with many other great features."
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "Vue - Official extension replacesVetur, our previous official VS Code extension for Vue 2. If you have Vetur currently installed, make sure to disable it in Vue 3 projects."
                },
                {
                    "type": "p",
                    "text": "WebStormalso provides out-of-the-box support for both TypeScript and Vue. Other JetBrains IDEs support them too, either out of the box or viaa free plugin. As of version 2023.2, WebStorm and the Vue Plugin come with built-in support for the Vue Language Server. You can set the Vue service to use Volar integration on all TypeScript versions, under Settings > Languages & Frameworks > TypeScript > Vue. By default, Volar will be used for TypeScript versions 5.0 and higher."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Configuringtsconfig.json​"
                },
                {
                    "type": "p",
                    "text": "Projects scaffolded viacreate-vueinclude pre-configuredtsconfig.json. The base config is abstracted in the@vue/tsconfigpackage. Inside the project, we useProject Referencesto ensure correct types for code running in different environments (e.g. app code and test code should have different global variables)."
                },
                {
                    "type": "p",
                    "text": "When configuringtsconfig.jsonmanually, some notable options include:"
                },
                {
                    "type": "list",
                    "items": [
                        "compilerOptions.isolatedModulesis set totruebecause Vite usesesbuildfor transpiling TypeScript and is subject to single-file transpile limitations.compilerOptions.verbatimModuleSyntaxisa superset ofisolatedModulesand is a good choice, too - it's what@vue/tsconfiguses.",
                        "If you're using Options API, you need to setcompilerOptions.stricttotrue(or at least enablecompilerOptions.noImplicitThis, which is a part of thestrictflag) to leverage type checking ofthisin component options. Otherwisethiswill be treated asany.",
                        "If you have configured resolver aliases in your build tool, for example the@/*alias configured by default in acreate-vueproject, you need to also configure it for TypeScript viacompilerOptions.paths.",
                        "If you intend to use TSX with Vue, setcompilerOptions.jsxto\"preserve\", and setcompilerOptions.jsxImportSourceto\"vue\"."
                    ]
                },
                {
                    "type": "p",
                    "text": "compilerOptions.isolatedModulesis set totruebecause Vite usesesbuildfor transpiling TypeScript and is subject to single-file transpile limitations.compilerOptions.verbatimModuleSyntaxisa superset ofisolatedModulesand is a good choice, too - it's what@vue/tsconfiguses."
                },
                {
                    "type": "p",
                    "text": "If you're using Options API, you need to setcompilerOptions.stricttotrue(or at least enablecompilerOptions.noImplicitThis, which is a part of thestrictflag) to leverage type checking ofthisin component options. Otherwisethiswill be treated asany."
                },
                {
                    "type": "p",
                    "text": "If you have configured resolver aliases in your build tool, for example the@/*alias configured by default in acreate-vueproject, you need to also configure it for TypeScript viacompilerOptions.paths."
                },
                {
                    "type": "p",
                    "text": "If you intend to use TSX with Vue, setcompilerOptions.jsxto\"preserve\", and setcompilerOptions.jsxImportSourceto\"vue\"."
                },
                {
                    "type": "p",
                    "text": "See also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Official TypeScript compiler options docs",
                        "esbuild TypeScript compilation caveats"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Note on Vue CLI andts-loader​"
                },
                {
                    "type": "p",
                    "text": "In webpack-based setups such as Vue CLI, it is common to perform type checking as part of the module transform pipeline, for example withts-loader. This, however, isn't a clean solution because the type system needs knowledge of the entire module graph to perform type checks. Individual module's transform step simply is not the right place for the task. It leads to the following problems:"
                },
                {
                    "type": "list",
                    "items": [
                        "ts-loadercan only type check post-transform code. This doesn't align with the errors we see in IDEs or fromvue-tsc, which map directly back to the source code.",
                        "Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application.",
                        "We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off."
                    ]
                },
                {
                    "type": "p",
                    "text": "ts-loadercan only type check post-transform code. This doesn't align with the errors we see in IDEs or fromvue-tsc, which map directly back to the source code."
                },
                {
                    "type": "p",
                    "text": "Type checking can be slow. When it is performed in the same thread / process with code transformations, it significantly affects the build speed of the entire application."
                },
                {
                    "type": "p",
                    "text": "We already have type checking running right in our IDE in a separate process, so the cost of dev experience slow down simply isn't a good trade-off."
                },
                {
                    "type": "p",
                    "text": "If you are currently using Vue 3 + TypeScript via Vue CLI, we strongly recommend migrating over to Vite. We are also working on CLI options to enable transpile-only TS support, so that you can switch tovue-tscfor type checking."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "General Usage Notes​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "defineComponent()​"
                },
                {
                    "type": "p",
                    "text": "To let TypeScript properly infer types inside component options, we need to define components withdefineComponent():"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({// type inference enabledprops: {name: String,msg: { type: String, required:true}},data() {return{count:1}},mounted() {this.name// type: string | undefinedthis.msg// type: stringthis.count// type: number}})"
                },
                {
                    "type": "p",
                    "text": "defineComponent()also supports inferring the props passed tosetup()when using Composition API without<script setup>:"
                },
                {
                    "type": "code",
                    "code": "import{ defineComponent }from'vue'exportdefaultdefineComponent({// type inference enabledprops: {message: String},setup(props) {props.message// type: string | undefined}})"
                },
                {
                    "type": "p",
                    "text": "See also:"
                },
                {
                    "type": "list",
                    "items": [
                        "Note on webpack Treeshaking",
                        "type tests fordefineComponent"
                    ]
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "defineComponent()also enables type inference for components defined in plain JavaScript."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usage in Single-File Components​"
                },
                {
                    "type": "p",
                    "text": "To use TypeScript in SFCs, add thelang=\"ts\"attribute to<script>tags. Whenlang=\"ts\"is present, all template expressions also enjoy stricter type checking."
                },
                {
                    "type": "code",
                    "code": "<scriptlang=\"ts\">import{ defineComponent }from'vue'exportdefaultdefineComponent({data() {return{count:1}}})</script><template><!-- type checking and auto-completion enabled -->{{ count.toFixed(2) }}</template>"
                },
                {
                    "type": "p",
                    "text": "lang=\"ts\"can also be used with<script setup>:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">// TypeScript enabledimport{ ref }from'vue'constcount=ref(1)</script><template><!-- type checking and auto-completion enabled -->{{ count.toFixed(2) }}</template>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "TypeScript in Templates​"
                },
                {
                    "type": "p",
                    "text": "The<template>also supports TypeScript in binding expressions when<script lang=\"ts\">or<script setup lang=\"ts\">is used. This is useful in cases where you need to perform type casting in template expressions."
                },
                {
                    "type": "p",
                    "text": "Here's a contrived example:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">letx:string|number=1</script><template><!-- error because x could be a string -->{{ x.toFixed(2) }}</template>"
                },
                {
                    "type": "p",
                    "text": "This can be worked around with an inline type cast:"
                },
                {
                    "type": "code",
                    "code": "<scriptsetuplang=\"ts\">letx:string|number=1</script><template>{{ (x as number).toFixed(2) }}</template>"
                },
                {
                    "type": "p",
                    "text": "TIP"
                },
                {
                    "type": "p",
                    "text": "If using Vue CLI or a webpack-based setup, TypeScript in template expressions requiresvue-loader@^16.8.0."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Usage with TSX​"
                },
                {
                    "type": "p",
                    "text": "Vue also supports authoring components with JSX / TSX. Details are covered in theRender Function & JSXguide."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Generic Components​"
                },
                {
                    "type": "p",
                    "text": "Generic components are supported in two cases:"
                },
                {
                    "type": "list",
                    "items": [
                        "In SFCs:<script setup>with thegenericattribute",
                        "Render function / JSX components:defineComponent()'s function signature"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "API-Specific Recipes​"
                },
                {
                    "type": "list",
                    "items": [
                        "TS with Composition API",
                        "TS with Options API"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners",
            "title": "Vue Partners | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Vue Partners"
                },
                {
                    "type": "p",
                    "text": "Vue Partners are Vue-team endorsed agencies that provide first-class Vue consulting and development services. If your company is interested in being listed as a partner, pleaseregister your interest here."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Partner Spotlight"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Featured Partners"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Grow your business with Vue"
                },
                {
                    "type": "p",
                    "text": "Generate leads for new projects, boost your credibility to your clients, and support the long term sustainability of Vue.js and its ecosystem."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/all",
            "title": "Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Browser All Partners"
                },
                {
                    "type": "p",
                    "text": "Vue Partners are Vue-team endorsed agencies that provide first-class Vue consulting and development services. If your company is interested in being listed as a partner, pleaseregister your interest here."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Grow your business with Vue"
                },
                {
                    "type": "p",
                    "text": "Generate leads for new projects, boost your credibility to your clients, and support the long term sustainability of Vue.js and its ecosystem."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/curotec.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "North America, Latin America"
                },
                {
                    "type": "p",
                    "text": "Work with a team that understands Vue.js inside and out. SaaS and enterprise teams leverage Curotec for best-in-class project execution and staff augmentation services focused on Vue.js."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "Vue.jsNuxtLaravelHeadlessNode.jsPythonWordPress"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Curotec"
                },
                {
                    "type": "p",
                    "text": "Whether you need a firm to build your idea, support an existing codebase, or augment your front-end dev team, we’ve got you covered. SaaS and enterprise product teams turn to Curotec for a firm that can get the job done right."
                },
                {
                    "type": "p",
                    "text": "We've got an all-shores model with team members in the US, LATAM, and South Asia. We'll create a flexible engagement for your needs aligned with your budget, timezone, and project goals. We also cover three main focus areas which include:"
                },
                {
                    "type": "p",
                    "text": "- Enterprise software development"
                },
                {
                    "type": "p",
                    "text": "- SaaS product development"
                },
                {
                    "type": "p",
                    "text": "- Headless / Jamstack website development"
                },
                {
                    "type": "p",
                    "text": "If you're looking for a Vue.js-focused front-end development team that writes great quality code and gets stuff done, click the contact button below and get in touch!"
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/herodevs.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "North America"
                },
                {
                    "type": "p",
                    "text": "End-of-life of open source software versions creates massive challenges for companies. HeroDevs offers two solutions: (1) We provide never-ending support for sunsetted open source software, and (2)  we provide consulting and engineering to help companies migrate to in-support open source software."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueAngularMigrationEOL Support"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About HeroDevs"
                },
                {
                    "type": "p",
                    "text": "When open source software is reaching end-of-life, you’re faced with a difficult decision: do you spend months or years of dev time migrating your code, or do you risk being non-compliant with industry regulations and your company’s SLAs?"
                },
                {
                    "type": "p",
                    "text": "At HeroDevs we pride ourselves in being the experts that help you navigate end-of-life events in your technology stack. Companies offering enterprise support for open source libraries stop at the end of life. That’s where our value prop begins with our Never-Ending Support (NES) products. Our team has not only provided over 450 organizations with supported, secured versions of open source software beyond their end of life, but has also helped dozens of companies migrate their codebase to a modern, supported open source stack."
                },
                {
                    "type": "p",
                    "text": "With all NES Products we offer: continuous source code scanning for vulnerabilities, 5-minute installation without leaving your network, scanning for possible IP infringement in your code, and checks for platform, browser and 3rd-party library compatibility."
                },
                {
                    "type": "p",
                    "text": "Need to migrate? HeroDevs can help with that too. Hire our team of experts to help you navigate the challenges that come with migrating your code."
                },
                {
                    "type": "p",
                    "text": "Want to learn more? Find us at herodevs.com or send us a note at hello@herodevs.com."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/monterail.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "Europe"
                },
                {
                    "type": "p",
                    "text": "Monterail is a full-service software development company from Poland. Since 2010, we have been building innovative software for start-ups, SMBs, and enterprises from various industries globally. Our Vue experts, using battle-tested technologies and frameworks, have delivered more than 30 Vue-based projects."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "Vue.jsRuby on RailsNode.jsReact NativeFlutter"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Monterail"
                },
                {
                    "type": "p",
                    "text": "At a full-service consultancy like Monterail, you get every competence under one roof. From concept, to design, and product release. Depending on the product lifecycle stage, we guide clients through building applications from scratch or scaling them quickly."
                },
                {
                    "type": "p",
                    "text": "A diverse pool of experts, including Product Designers, QA specialists and Business Analysts, take care of professional tech stack consultation and business idea validation. We work within the Agile methodology ensuring smooth communication flow and aim for long-term partnerships. We've developed all kinds of Vue applications from virtual real estate tours to donation platforms."
                },
                {
                    "type": "p",
                    "text": "Why Monterail?"
                },
                {
                    "type": "p",
                    "text": "- Listed in the Financial Times 1000 rank twice in a row (2018 & 2019)"
                },
                {
                    "type": "p",
                    "text": "- Recognized by Deloitte as one of the fastest-growing tech companies in Central Europe (2016 & 2017)"
                },
                {
                    "type": "p",
                    "text": "- Rated 4.7/5 on Clutch."
                },
                {
                    "type": "p",
                    "text": "- NPS Score - 71"
                },
                {
                    "type": "p",
                    "text": "- Experts in software development and design with solid business experience"
                },
                {
                    "type": "p",
                    "text": "- A team experienced with remote work in a multicultural environment"
                },
                {
                    "type": "p",
                    "text": "- Detailed budget estimation received in weeks, not months"
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/passionatepeople.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "Europe"
                },
                {
                    "type": "p",
                    "text": "We provide you with additional technical capacity to power-up your digital transformation journeys with our teams of first-class engineers and consultants. Full stack JavaScript Cloud Engineers ready to work with you and your teams."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueNuxtNode.jsJAMStack"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Passionate People"
                },
                {
                    "type": "p",
                    "text": "Founded in October 2017, Passionate People is the leading JavaScript consultancy in the Netherlands."
                },
                {
                    "type": "p",
                    "text": "Our aim is to help our customers speed up their digital transformation initiatives at scale, and our standard is the highest in the sector."
                },
                {
                    "type": "p",
                    "text": "We have a wide client base spanning industries such as FinTech, E-commerce, Logistics, Supply Chain, Industrial Automation, etc. To achieve their digital goals and to make their products scalable and secure for millions of users, companies such as Albert Heijn Digital, GrandVision, Nationale Nederlanden, Talpa and AKQA have trusted us to deliver top-notch work."
                },
                {
                    "type": "p",
                    "text": "Besides being the leading JavaScript Consultancy in the Netherlands, Passionate People is also proud to host the largest tech conferences and community events in the world."
                },
                {
                    "type": "p",
                    "text": "Starting in February 2018 with Frontend Love and Vue.js Amsterdam, we are now responsible for many other conferences in Europe under the Frontend Love brand: React Live, AngularNL, Vue.js Amsterdam, and JS World Conference."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/proxify.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "Europe"
                },
                {
                    "type": "p",
                    "text": "With Proxify, you can hire expert Vue.js developers, at a fair price and with zero risk, in just a few days. The quality and commitment of an in-house team, with the flexibility of contractors. Augment your existing team or build a new one, without the risks and admin of permanent employment."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueRuby on RailsNode.jsReact NativeFlutter"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Proxify"
                },
                {
                    "type": "p",
                    "text": "Proxify is an end-to-end partner that connects businesses with thoroughly vetted developers, matching you with perfect-fit developers in just two days."
                },
                {
                    "type": "p",
                    "text": "Our network includes over 4,000 developers with expertise in 500+ tech skills. We accept only 2% of applicants to ensure the highest quality standards. Thousands of businesses worldwide trust our rigorous selection process."
                },
                {
                    "type": "p",
                    "text": "-Time-to-hire: Ideal candidates are presented within just two days."
                },
                {
                    "type": "p",
                    "text": "-A core team member, not just a freelancer: Proxify developers deliver quality on business-critical code and fit seamlessly with your team’s culture. No different to your in-house staff."
                },
                {
                    "type": "p",
                    "text": "-Fair pricing: Our model of working with top-tier talent remotely across the world is both cost-effective for our clients, and lucrative for our developers. Everybody wins."
                },
                {
                    "type": "p",
                    "text": "-Risk-free and adaptable: Enjoy a team that can quickly adjust as your priorities shift, without the risks and limitations of permanent employment."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/redberry.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "Europe"
                },
                {
                    "type": "p",
                    "text": "We are a 100+ award-winning, Laravel & Vue partner software design, development, and growth marketing agency from Tbilisi. In 8 years, we have taken 300+ products from zero to hero using Vue, Laravel, React and React Native for clients ranging from startups and government institutions to international agencies and enterprises."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueLaravelNode.jsReactReact Native"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Redberry"
                },
                {
                    "type": "p",
                    "text": "Redberry was born in 2014 as a four friends’ venture to bring digital transformation to the brick-to-mortar business in Georgia. Today, we are more than 150 and represent the biggest Georgian agency. We are multifaceted in every way - technology, services, people. We accompany our clients along the entire product journey - from product design to development to its growth. We boast a 100+ international award-winning team of legendary UX/UI designers, software developers, DevOps engineers, project managers, scrum masters, digital strategists, copywriters, content creators, and growth hackers. So call us your swiss-army-knife digital partner if you like; we do."
                },
                {
                    "type": "p",
                    "text": "While we are a top-tier agency, one of the most beautiful things about us is our location, both literally and metaphorically. We are based in Georgia (country, not the state), where IT outsourcing is almost tax-free. As a result, our EU and US-based partner startups, agencies, and companies enjoy a longer runway and more significant project margins. Luckily, we have a substantial capacity and easy access to the rapidly growing local tech talent, so we are our clients’ reliable and scalable partner."
                },
                {
                    "type": "p",
                    "text": "Besides being an official Laravel and now Vue Partner software house, we are a Google and Facebook partner creative growth agency, making us an ideal, full-service partner for 80+ companies of all sizes to grow their business progressively. It has also earned us the Best Agency of the Year titles twice in 3 years, 2019 and 2021. Our client’s business is our business, so we remain results-oriented at all times, on and off work hours, weekdays and weekends, to ensure we deliver the solutions that drive your business results. That mindset has shaped our list of clients with industry leaders and runner-ups in finance, insurance, real estate, auto, education, healthcare, etc."
                },
                {
                    "type": "p",
                    "text": "As for the methodology, running our startup studio has imprinted agile into our DNA. We have built a dozen MVPs and continued developing them over time according to the ever-changing business requirements, honing our ability to optimize for low initial time-to-market and high development velocity on any project we take on. We also internalized and standardized setting up and maintaining adequate codebase test coverage and regularly using CI/CD pipelines, making our lives and codes that much more manageable."
                },
                {
                    "type": "p",
                    "text": "If you would like to collaborate on extending your product team, you can contact us through our website."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/vehikl.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "North America"
                },
                {
                    "type": "p",
                    "text": "Vehikl has deep knowledge of Vue and will act as an extension of your team. We focus on writing clean, maintainable code. We are passionate about continual improvement, and we practice Mob Programming and Pair Programming on a daily basis."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueLaravelReactNode.jsUnity"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About Vehikl"
                },
                {
                    "type": "p",
                    "text": "Vehikl is a Team that values Caring, Growing, and Delivering. We instill those values in everything we do, and everyone we work with. Our goal is to be an extension of your development efforts, and build exceptional web and mobile applications."
                },
                {
                    "type": "p",
                    "text": "Our Team has a strong specialty and deep knowledge of Vue, Laravel, and React frameworks. In addition to this, our Team of 75 has worked with every tech stack you can imagine. We’re proud test-driven developers who focus on writing clean, maintainable code. Our Team is passionate about continual improvement, and we practice Mob Programming and Pair Programming on a daily basis."
                },
                {
                    "type": "p",
                    "text": "We’ve worked on projects from a wide range of companies ranging from startups to enterprise-level organizations. We are one team with our clients and we share in their successes."
                },
                {
                    "type": "p",
                    "text": "So what does working with us look like?"
                },
                {
                    "type": "p",
                    "text": "- Daily communication with your team"
                },
                {
                    "type": "p",
                    "text": "- Collaborate with you on weekly or bi-weekly Sprint Planning"
                },
                {
                    "type": "p",
                    "text": "- Demos & Retrospectives at the end of each Sprint"
                },
                {
                    "type": "p",
                    "text": "- Collaborative PR reviews"
                },
                {
                    "type": "p",
                    "text": "- Daily Pairing and Mobbing sessions"
                },
                {
                    "type": "p",
                    "text": "We’re always looking for opportunities to learn new things and refine our skills using lean Agile development, open communication, and collaboration. We combine one-on-one communication, and the iterative values of the Agile methodology to deliver high quality code."
                },
                {
                    "type": "p",
                    "text": "We’re active members of the JavaScript and PHP community, and love to collaborate with other enthusiasts."
                }
            ]
        },
        {
            "url": "https://vuejs.org/partners/webreinvent.html",
            "title": "Vue.js",
            "content": [
                {
                    "type": "p",
                    "text": "North America, Asia, Europe"
                },
                {
                    "type": "p",
                    "text": "WebReinvent is a software development company that provides a range of end-to-end software products, real-time apps, multi-tenant SaaS applications, low latency API & mobile app development services. We have delivered MVP to enterprise-level software globally from startup to MNC. Email us, and let's build your software product."
                },
                {
                    "type": "header",
                    "level": 4,
                    "text": "Proficiencies"
                },
                {
                    "type": "p",
                    "text": "VueLaravelNuxtIonicNode.js"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "About WebReinvent"
                },
                {
                    "type": "p",
                    "text": "WebReinvent is a process-oriented software development company that provides a range of end-to-end software products, real-time apps, multi-tenant SaaS applications, low latency API & mobile apps development services. Our team is well versed with VueJs and its ecosystem. We have delivered MVP to enterprise-level software from startup to MNC. Not only client projects we have developed multiple open-source products which are based on VueJs. We are proud to mention that we are one of the few official Laravel & Nuxt partners too."
                },
                {
                    "type": "p",
                    "text": "Our team loves to follow the industry standards, some of which are managing git repo, code review, release deployments via CI/CD (DevOps), automated software testing, maintaining detailed technical documentation, application performance monitoring, etc."
                },
                {
                    "type": "p",
                    "text": "Email us, and let's build your software product."
                }
            ]
        },
        {
            "url": "https://vuejs.org/sponsor",
            "title": "Become a Vue.js Sponsor | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Become a Vue.js Sponsor​"
                },
                {
                    "type": "p",
                    "text": "Vue.js is an MIT licensed open source project and completely free to use. The tremendous amount of effort needed to maintain such a large ecosystem and develop new features for the project is only made sustainable thanks to the generous financial backing of our sponsors."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "How to Sponsor​"
                },
                {
                    "type": "p",
                    "text": "Sponsorships can be done viaGitHub SponsorsorOpenCollective. Invoices can be obtained via GitHub's payment system. Both monthly-recurring sponsorships and one-time donations are accepted. Recurring sponsorships are entitled to logo placements as specified inSponsorship Tiers."
                },
                {
                    "type": "p",
                    "text": "If you have questions regarding tiers, payment logistics, or sponsor exposure data, please reach out tosponsor@vuejs.org."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Sponsoring Vue as a Business​"
                },
                {
                    "type": "p",
                    "text": "Sponsoring Vue gives you great exposure to over1.7 millionVue developers around the world through our website and GitHub project READMEs. In addition, supporting OSS improves the reputation of your brand, which is an important asset for any company that interacts with developers."
                },
                {
                    "type": "p",
                    "text": "If you are using Vue to build a revenue-generating product, it makes business sense to sponsor Vue's development:it ensures the project that your product relies on stays healthy and actively maintained.The exposure and positive brand image in the Vue community also makes it easier to attract and recruit Vue developers."
                },
                {
                    "type": "p",
                    "text": "If you are building a product where your target customers are developers, you will gain high quality traffic through the sponsorship exposure, since all our visitors are developers. The sponsorship also builds brand recognition and improves conversion."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Sponsoring Vue as an Individual​"
                },
                {
                    "type": "p",
                    "text": "If you are an individual user and have enjoyed the productivity of using Vue, consider donating as a sign of appreciation - like buying us coffee once in a while. Many of our team members accept sponsorships and donations via GitHub Sponsors. Look for the \"Sponsor\" button on each team member's profile on ourteam page."
                },
                {
                    "type": "p",
                    "text": "You can also try to convince your employer to sponsor Vue as a business. This may not be easy, but business sponsorships typically make a much larger impact on the sustainability of OSS projects than individual donations, so you will help us much more if you succeed."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tier Benefits​"
                },
                {
                    "type": "list",
                    "items": [
                        "Global Special:Limited to one sponsor globally (currently filled).Exclusive above the fold logo placement on the front page ofvuejs.org.Most prominent logo placement in all locations from tiers below.",
                        "Limited to one sponsor globally (currently filled).",
                        "Exclusive above the fold logo placement on the front page ofvuejs.org.",
                        "Most prominent logo placement in all locations from tiers below.",
                        "Platinum (USD$2,000/mo):Prominent logo placement on the front page ofvuejs.org.Prominent logo placement in sidebar of all content pages.Prominent logo placement in the README ofvuejs/coreandvuejs/vue.",
                        "Prominent logo placement on the front page ofvuejs.org.",
                        "Prominent logo placement in sidebar of all content pages.",
                        "Prominent logo placement in the README ofvuejs/coreandvuejs/vue.",
                        "Gold (USD$500/mo):Large logo placement on the front page ofvuejs.org.Large logo placement in the README ofvuejs/coreandvuejs/vue.",
                        "Large logo placement on the front page ofvuejs.org.",
                        "Large logo placement in the README ofvuejs/coreandvuejs/vue.",
                        "Silver (USD$250/mo):Medium logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue.",
                        "Medium logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue.",
                        "Bronze (USD$100/mo):Small logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue.",
                        "Small logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue.",
                        "Generous Backer (USD$50/mo):Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue, above other individual backers.",
                        "Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue, above other individual backers.",
                        "Individual Backer (USD$5/mo):Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue.",
                        "Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Limited to one sponsor globally (currently filled).",
                        "Exclusive above the fold logo placement on the front page ofvuejs.org.",
                        "Most prominent logo placement in all locations from tiers below."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Prominent logo placement on the front page ofvuejs.org.",
                        "Prominent logo placement in sidebar of all content pages.",
                        "Prominent logo placement in the README ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Large logo placement on the front page ofvuejs.org.",
                        "Large logo placement in the README ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Medium logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Small logo placement in theBACKERS.mdfile ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue, above other individual backers."
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Name listed in theBACKERS.mdfile ofvuejs/coreandvuejs/vue."
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Current Sponsors​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Special Global Sponsor​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Platinum​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Platinum (China)​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Gold​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Silver​"
                }
            ]
        },
        {
            "url": "https://vuejs.org/style-guide",
            "title": "Style Guide | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Style Guide​"
                },
                {
                    "type": "p",
                    "text": "This is the official style guide for Vue-specific code. If you use Vue in a project, it's a great reference to avoid errors, bikeshedding, and anti-patterns. However, we don't believe that any style guide is ideal for all teams or projects, so mindful deviations are encouraged based on past experience, the surrounding tech stack, and personal values."
                },
                {
                    "type": "p",
                    "text": "For the most part, we also avoid suggestions about JavaScript or HTML in general. We don't mind whether you use semicolons or trailing commas. We don't mind whether your HTML uses single-quotes or double-quotes for attribute values. Some exceptions will exist however, where we've found that a particular pattern is helpful in the context of Vue."
                },
                {
                    "type": "p",
                    "text": "Finally, we've split rules into four categories:"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Rule Categories​"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Priority A: Essential (Error Prevention)​"
                },
                {
                    "type": "p",
                    "text": "These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue."
                },
                {
                    "type": "list",
                    "items": [
                        "See all priority A rules"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Priority B: Strongly Recommended​"
                },
                {
                    "type": "p",
                    "text": "These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified."
                },
                {
                    "type": "list",
                    "items": [
                        "See all priority B rules"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Priority C: Recommended​"
                },
                {
                    "type": "p",
                    "text": "Where multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you're consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:"
                },
                {
                    "type": "list",
                    "items": [
                        "Train your brain to more easily parse most of the community code you encounter",
                        "Be able to copy and paste most community code examples without modification",
                        "Often find new hires are already accustomed to your preferred coding style, at least in regards to Vue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "See all priority C rules"
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Priority D: Use with Caution​"
                },
                {
                    "type": "p",
                    "text": "Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided."
                },
                {
                    "type": "list",
                    "items": [
                        "See all priority D rules"
                    ]
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/style-guide/rules-essential#avoid-v-if-with-v-for",
            "title": "Priority A Rules: Essential | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Priority A Rules: Essential​"
                },
                {
                    "type": "p",
                    "text": "These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Use multi-word component names​"
                },
                {
                    "type": "p",
                    "text": "User component names should always be multi-word, except for rootAppcomponents. Thisprevents conflictswith existing and future HTML elements, since all HTML elements are a single word."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<!-- in pre-compiled templates --><Item/><!-- in in-DOM templates --><item></item>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<!-- in pre-compiled templates --><TodoItem/><!-- in in-DOM templates --><todo-item></todo-item>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Use detailed prop definitions​"
                },
                {
                    "type": "p",
                    "text": "In committed code, prop definitions should always be as detailed as possible, specifying at least type(s)."
                },
                {
                    "type": "p",
                    "text": "Detailedprop definitionshave two advantages:"
                },
                {
                    "type": "list",
                    "items": [
                        "They document the API of the component, so that it's easy to see how the component is meant to be used.",
                        "In development, Vue will warn you if a component is ever provided incorrectly formatted props, helping you catch potential sources of error."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "// This is only OK when prototypingprops: ['status']"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "props: {status: String}"
                },
                {
                    "type": "code",
                    "code": "// Even better!props: {status: {type: String,required:true,validator:value=>{return['syncing','synced','version-conflict','error'].includes(value)}}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "// This is only OK when prototypingconstprops=defineProps(['status'])"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps({status: String})"
                },
                {
                    "type": "code",
                    "code": "// Even better!constprops=defineProps({status: {type: String,required:true,validator: (value)=>{return['syncing','synced','version-conflict','error'].includes(value)}}})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Use keyedv-for​"
                },
                {
                    "type": "p",
                    "text": "keywithv-forisalwaysrequired on components, in order to maintain internal component state down the subtree. Even for elements though, it's a good practice to maintain predictable behavior, such asobject constancyin animations."
                },
                {
                    "type": "p",
                    "text": "Let's say you have a list of todos:"
                },
                {
                    "type": "code",
                    "code": "data() {return{todos: [{id:1,text:'Learn to use v-for'},{id:2,text:'Learn to use key'}]}}"
                },
                {
                    "type": "code",
                    "code": "consttodos=ref([{id:1,text:'Learn to use v-for'},{id:2,text:'Learn to use key'}])"
                },
                {
                    "type": "p",
                    "text": "Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list."
                },
                {
                    "type": "p",
                    "text": "The problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use<transition-group>to animate list sorting, or maintain focus if the rendered element is an<input>. In these cases, adding a unique key for each item (e.g.:key=\"todo.id\") will tell Vue how to behave more predictably."
                },
                {
                    "type": "p",
                    "text": "In our experience, it's better toalwaysadd a unique key, so that you and your team simply never have to worry about these edge cases. Then in the rare, performance-critical scenarios where object constancy isn't necessary, you can make a conscious exception."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"todointodos\">{{ todo.text }}</li></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"todointodos\":key=\"todo.id\">{{ todo.text }}</li></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Avoidv-ifwithv-for​"
                },
                {
                    "type": "p",
                    "text": "Never usev-ifon the same element asv-for."
                },
                {
                    "type": "p",
                    "text": "There are two common cases where this can be tempting:"
                },
                {
                    "type": "list",
                    "items": [
                        "To filter items in a list (e.g.v-for=\"user in users\" v-if=\"user.isActive\"). In these cases, replaceuserswith a new computed property that returns your filtered list (e.g.activeUsers).",
                        "To avoid rendering a list if it should be hidden (e.g.v-for=\"user in users\" v-if=\"shouldShowUsers\"). In these cases, move thev-ifto a container element (e.g.ul,ol)."
                    ]
                },
                {
                    "type": "p",
                    "text": "To filter items in a list (e.g.v-for=\"user in users\" v-if=\"user.isActive\"). In these cases, replaceuserswith a new computed property that returns your filtered list (e.g.activeUsers)."
                },
                {
                    "type": "p",
                    "text": "To avoid rendering a list if it should be hidden (e.g.v-for=\"user in users\" v-if=\"shouldShowUsers\"). In these cases, move thev-ifto a container element (e.g.ul,ol)."
                },
                {
                    "type": "p",
                    "text": "When Vue processes directives,v-ifhas a higher priority thanv-for, so that this template:"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"userinusers\"v-if=\"user.isActive\":key=\"user.id\">{{ user.name }}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "Will throw an error, because thev-ifdirective will be evaluated first and the iteration variableuserdoes not exist at this moment."
                },
                {
                    "type": "p",
                    "text": "This could be fixed by iterating over a computed property instead, like this:"
                },
                {
                    "type": "code",
                    "code": "computed: {activeUsers() {returnthis.users.filter(user=>user.isActive)}}"
                },
                {
                    "type": "code",
                    "code": "constactiveUsers=computed(()=>{returnusers.filter((user)=>user.isActive)})"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"userinactiveUsers\":key=\"user.id\">{{ user.name }}</li></ul>"
                },
                {
                    "type": "p",
                    "text": "Alternatively, we can use a<template>tag withv-forto wrap the<li>element:"
                },
                {
                    "type": "code",
                    "code": "<ul><templatev-for=\"userinusers\":key=\"user.id\"><liv-if=\"user.isActive\">{{ user.name }}</li></template></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"userinusers\"v-if=\"user.isActive\":key=\"user.id\">{{ user.name }}</li></ul>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<ul><liv-for=\"userinactiveUsers\":key=\"user.id\">{{ user.name }}</li></ul>"
                },
                {
                    "type": "code",
                    "code": "<ul><templatev-for=\"userinusers\":key=\"user.id\"><liv-if=\"user.isActive\">{{ user.name }}</li></template></ul>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Use component-scoped styling​"
                },
                {
                    "type": "p",
                    "text": "For applications, styles in a top-levelAppcomponent and in layout components may be global, but all other components should always be scoped."
                },
                {
                    "type": "p",
                    "text": "This is only relevant forSingle-File Components. It doesnotrequire that thescopedattributebe used. Scoping could be throughCSS modules, a class-based strategy such asBEM, or another library/convention."
                },
                {
                    "type": "p",
                    "text": "Component libraries, however, should prefer a class-based strategy instead of using thescopedattribute."
                },
                {
                    "type": "p",
                    "text": "This makes overriding internal styles easier, with human-readable class names that don't have too high specificity, but are still very unlikely to result in a conflict."
                },
                {
                    "type": "p",
                    "text": "If you are developing a large project, working with other developers, or sometimes include 3rd-party HTML/CSS (e.g. from Auth0), consistent scoping will ensure that your styles only apply to the components they are meant for."
                },
                {
                    "type": "p",
                    "text": "Beyond thescopedattribute, using unique class names can help ensure that 3rd-party CSS does not apply to your own HTML. For example, many projects use thebutton,btn, oriconclass names, so even if not using a strategy such as BEM, adding an app-specific and/or component-specific prefix (e.g.ButtonClose-icon) can provide some protection."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<template><buttonclass=\"btn btn-close\">×</button></template><style>.btn-close {background-color: red;}</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<template><buttonclass=\"button button-close\">×</button></template><!-- Using the `scoped` attribute --><stylescoped>.button {border: none;border-radius: 2px;}.button-close {background-color: red;}</style>"
                },
                {
                    "type": "code",
                    "code": "<template><button:class=\"[$style.button, $style.buttonClose]\">×</button></template><!-- Using CSS modules --><stylemodule>.button {border: none;border-radius: 2px;}.buttonClose {background-color: red;}</style>"
                },
                {
                    "type": "code",
                    "code": "<template><buttonclass=\"c-Button c-Button--close\">×</button></template><!-- Using the BEM convention --><style>.c-Button {border: none;border-radius: 2px;}.c-Button--close {background-color: red;}</style>"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/style-guide/rules-recommended",
            "title": "Priority C Rules: Recommended | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Priority C Rules: Recommended​"
                },
                {
                    "type": "p",
                    "text": "Where multiple, equally good options exist, an arbitrary choice can be made to ensure consistency. In these rules, we describe each acceptable option and suggest a default choice. That means you can feel free to make a different choice in your own codebase, as long as you're consistent and have a good reason. Please do have a good reason though! By adapting to the community standard, you will:"
                },
                {
                    "type": "list",
                    "items": [
                        "Train your brain to more easily parse most of the community code you encounter",
                        "Be able to copy and paste most community code examples without modification",
                        "Often find new hires are already accustomed to your preferred coding style, at least in regards to Vue"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component/instance options order​"
                },
                {
                    "type": "p",
                    "text": "Component/instance options should be ordered consistently."
                },
                {
                    "type": "p",
                    "text": "This is the default order we recommend for component options. They're split into categories, so you'll know where to add new properties from plugins."
                },
                {
                    "type": "list",
                    "items": [
                        "Global Awareness(requires knowledge beyond the component)name",
                        "name",
                        "Template Compiler Options(changes the way templates are compiled)compilerOptions",
                        "compilerOptions",
                        "Template Dependencies(assets used in the template)componentsdirectives",
                        "components",
                        "directives",
                        "Composition(merges properties into the options)extendsmixinsprovide/inject",
                        "extends",
                        "mixins",
                        "provide/inject",
                        "Interface(the interface to the component)inheritAttrspropsemits",
                        "inheritAttrs",
                        "props",
                        "emits",
                        "Composition API(the entry point for using the Composition API)setup",
                        "setup",
                        "Local State(local reactive properties)datacomputed",
                        "data",
                        "computed",
                        "Events(callbacks triggered by reactive events)watchLifecycle Events (in the order they are called)beforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedactivateddeactivatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggered",
                        "watch",
                        "Lifecycle Events (in the order they are called)beforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedactivateddeactivatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggered",
                        "beforeCreate",
                        "created",
                        "beforeMount",
                        "mounted",
                        "beforeUpdate",
                        "updated",
                        "activated",
                        "deactivated",
                        "beforeUnmount",
                        "unmounted",
                        "errorCaptured",
                        "renderTracked",
                        "renderTriggered",
                        "Non-Reactive Properties(instance properties independent of the reactivity system)methods",
                        "methods",
                        "Rendering(the declarative description of the component output)template/render",
                        "template/render"
                    ]
                },
                {
                    "type": "p",
                    "text": "Global Awareness(requires knowledge beyond the component)"
                },
                {
                    "type": "list",
                    "items": [
                        "name"
                    ]
                },
                {
                    "type": "p",
                    "text": "Template Compiler Options(changes the way templates are compiled)"
                },
                {
                    "type": "list",
                    "items": [
                        "compilerOptions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Template Dependencies(assets used in the template)"
                },
                {
                    "type": "list",
                    "items": [
                        "components",
                        "directives"
                    ]
                },
                {
                    "type": "p",
                    "text": "Composition(merges properties into the options)"
                },
                {
                    "type": "list",
                    "items": [
                        "extends",
                        "mixins",
                        "provide/inject"
                    ]
                },
                {
                    "type": "p",
                    "text": "Interface(the interface to the component)"
                },
                {
                    "type": "list",
                    "items": [
                        "inheritAttrs",
                        "props",
                        "emits"
                    ]
                },
                {
                    "type": "p",
                    "text": "Composition API(the entry point for using the Composition API)"
                },
                {
                    "type": "list",
                    "items": [
                        "setup"
                    ]
                },
                {
                    "type": "p",
                    "text": "Local State(local reactive properties)"
                },
                {
                    "type": "list",
                    "items": [
                        "data",
                        "computed"
                    ]
                },
                {
                    "type": "p",
                    "text": "Events(callbacks triggered by reactive events)"
                },
                {
                    "type": "list",
                    "items": [
                        "watch",
                        "Lifecycle Events (in the order they are called)beforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedactivateddeactivatedbeforeUnmountunmountederrorCapturedrenderTrackedrenderTriggered",
                        "beforeCreate",
                        "created",
                        "beforeMount",
                        "mounted",
                        "beforeUpdate",
                        "updated",
                        "activated",
                        "deactivated",
                        "beforeUnmount",
                        "unmounted",
                        "errorCaptured",
                        "renderTracked",
                        "renderTriggered"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "beforeCreate",
                        "created",
                        "beforeMount",
                        "mounted",
                        "beforeUpdate",
                        "updated",
                        "activated",
                        "deactivated",
                        "beforeUnmount",
                        "unmounted",
                        "errorCaptured",
                        "renderTracked",
                        "renderTriggered"
                    ]
                },
                {
                    "type": "p",
                    "text": "Non-Reactive Properties(instance properties independent of the reactivity system)"
                },
                {
                    "type": "list",
                    "items": [
                        "methods"
                    ]
                },
                {
                    "type": "p",
                    "text": "Rendering(the declarative description of the component output)"
                },
                {
                    "type": "list",
                    "items": [
                        "template/render"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Element attribute order​"
                },
                {
                    "type": "p",
                    "text": "The attributes of elements (including components) should be ordered consistently."
                },
                {
                    "type": "p",
                    "text": "This is the default order we recommend for component options. They're split into categories, so you'll know where to add custom attributes and directives."
                },
                {
                    "type": "list",
                    "items": [
                        "Definition(provides the component options)is",
                        "is",
                        "List Rendering(creates multiple variations of the same element)v-for",
                        "v-for",
                        "Conditionals(whether the element is rendered/shown)v-ifv-else-ifv-elsev-showv-cloak",
                        "v-if",
                        "v-else-if",
                        "v-else",
                        "v-show",
                        "v-cloak",
                        "Render Modifiers(changes the way the element renders)v-prev-once",
                        "v-pre",
                        "v-once",
                        "Global Awareness(requires knowledge beyond the component)id",
                        "id",
                        "Unique Attributes(attributes that require unique values)refkey",
                        "ref",
                        "key",
                        "Two-Way Binding(combining binding and events)v-model",
                        "v-model",
                        "Other Attributes(all unspecified bound & unbound attributes)",
                        "Events(component event listeners)v-on",
                        "v-on",
                        "Content(overrides the content of the element)v-htmlv-text",
                        "v-html",
                        "v-text"
                    ]
                },
                {
                    "type": "p",
                    "text": "Definition(provides the component options)"
                },
                {
                    "type": "list",
                    "items": [
                        "is"
                    ]
                },
                {
                    "type": "p",
                    "text": "List Rendering(creates multiple variations of the same element)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-for"
                    ]
                },
                {
                    "type": "p",
                    "text": "Conditionals(whether the element is rendered/shown)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-if",
                        "v-else-if",
                        "v-else",
                        "v-show",
                        "v-cloak"
                    ]
                },
                {
                    "type": "p",
                    "text": "Render Modifiers(changes the way the element renders)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-pre",
                        "v-once"
                    ]
                },
                {
                    "type": "p",
                    "text": "Global Awareness(requires knowledge beyond the component)"
                },
                {
                    "type": "list",
                    "items": [
                        "id"
                    ]
                },
                {
                    "type": "p",
                    "text": "Unique Attributes(attributes that require unique values)"
                },
                {
                    "type": "list",
                    "items": [
                        "ref",
                        "key"
                    ]
                },
                {
                    "type": "p",
                    "text": "Two-Way Binding(combining binding and events)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-model"
                    ]
                },
                {
                    "type": "p",
                    "text": "Other Attributes(all unspecified bound & unbound attributes)"
                },
                {
                    "type": "p",
                    "text": "Events(component event listeners)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-on"
                    ]
                },
                {
                    "type": "p",
                    "text": "Content(overrides the content of the element)"
                },
                {
                    "type": "list",
                    "items": [
                        "v-html",
                        "v-text"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Empty lines in component/instance options​"
                },
                {
                    "type": "p",
                    "text": "You may want to add one empty line between multi-line properties, particularly if the options can no longer fit on your screen without scrolling."
                },
                {
                    "type": "p",
                    "text": "When components begin to feel cramped or difficult to read, adding spaces between multi-line properties can make them easier to skim again. In some editors, such as Vim, formatting options like this can also make them easier to navigate with the keyboard."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "props: {value: {type: String,required:true},focused: {type: Boolean,default:false},label: String,icon: String},computed: {formattedValue() {// ...},inputClasses() {// ...}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "// No spaces are also fine, as long as the component// is still easy to read and navigate.props: {value: {type: String,required:true},focused: {type: Boolean,default:false},label: String,icon: String},computed: {formattedValue() {// ...},inputClasses() {// ...}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "defineProps({value: {type: String,required:true},focused: {type: Boolean,default:false},label: String,icon: String})constformattedValue=computed(()=>{// ...})constinputClasses=computed(()=>{// ...})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "defineProps({value: {type: String,required:true},focused: {type: Boolean,default:false},label: String,icon: String})constformattedValue=computed(()=>{// ...})constinputClasses=computed(()=>{// ...})"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-file component top-level element order​"
                },
                {
                    "type": "p",
                    "text": "Single-File Componentsshould always order<script>,<template>, and<style>tags consistently, with<style>last, because at least one of the other two is always necessary."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<style>/* ... */</style><script>/* ... */</script><template>...</template>"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentA.vue --><script>/* ... */</script><template>...</template><style>/* ... */</style><!-- ComponentB.vue --><template>...</template><script>/* ... */</script><style>/* ... */</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentA.vue --><script>/* ... */</script><template>...</template><style>/* ... */</style><!-- ComponentB.vue --><script>/* ... */</script><template>...</template><style>/* ... */</style>"
                },
                {
                    "type": "code",
                    "code": "<!-- ComponentA.vue --><template>...</template><script>/* ... */</script><style>/* ... */</style><!-- ComponentB.vue --><template>...</template><script>/* ... */</script><style>/* ... */</style>"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/style-guide/rules-strongly-recommended",
            "title": "Priority B Rules: Strongly Recommended | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Priority B Rules: Strongly Recommended​"
                },
                {
                    "type": "p",
                    "text": "These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component files​"
                },
                {
                    "type": "p",
                    "text": "Whenever a build system is available to concatenate files, each component should be in its own file."
                },
                {
                    "type": "p",
                    "text": "This helps you to more quickly find a component when you need to edit it or review how to use it."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoList', {// ...})app.component('TodoItem', {// ...})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList.js|- TodoItem.js"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList.vue|- TodoItem.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Single-file component filename casing​"
                },
                {
                    "type": "p",
                    "text": "Filenames ofSingle-File Componentsshould either be always PascalCase or always kebab-case."
                },
                {
                    "type": "p",
                    "text": "PascalCase works best with autocompletion in code editors, as it's consistent with how we reference components in JS(X) and templates, wherever possible. However, mixed case filenames can sometimes create issues on case-insensitive file systems, which is why kebab-case is also perfectly acceptable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "components/|- mycomponent.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- myComponent.vue"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- MyComponent.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- my-component.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Base component names​"
                },
                {
                    "type": "p",
                    "text": "Base components (a.k.a. presentational, dumb, or pure components) that apply app-specific styling and conventions should all begin with a specific prefix, such asBase,App, orV."
                },
                {
                    "type": "p",
                    "text": "These components lay the foundation for consistent styling and behavior in your application. They mayonlycontain:"
                },
                {
                    "type": "list",
                    "items": [
                        "HTML elements,",
                        "other base components, and",
                        "3rd-party UI components."
                    ]
                },
                {
                    "type": "p",
                    "text": "But they'llnevercontain global state (e.g. from aPiniastore)."
                },
                {
                    "type": "p",
                    "text": "Their names often include the name of an element they wrap (e.g.BaseButton,BaseTable), unless no element exists for their specific purpose (e.g.BaseIcon). If you build similar components for a more specific context, they will almost always consume these components (e.g.BaseButtonmay be used inButtonSubmit)."
                },
                {
                    "type": "p",
                    "text": "Some advantages of this convention:"
                },
                {
                    "type": "list",
                    "items": [
                        "When organized alphabetically in editors, your app's base components are all listed together, making them easier to identify.",
                        "Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g.MyButton,VueButton).",
                        "Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:jsconstrequireComponent=require.context('./src',true,/Base[A-Z]\\w+\\.(vue|js)$/)requireComponent.keys().forEach(function(fileName) {letbaseComponentConfig=requireComponent(fileName)baseComponentConfig=baseComponentConfig.default||baseComponentConfigconstbaseComponentName=baseComponentConfig.name||fileName.replace(/^.+\\//,'').replace(/\\.\\w+$/,'')app.component(baseComponentName, baseComponentConfig)})"
                    ]
                },
                {
                    "type": "p",
                    "text": "When organized alphabetically in editors, your app's base components are all listed together, making them easier to identify."
                },
                {
                    "type": "p",
                    "text": "Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g.MyButton,VueButton)."
                },
                {
                    "type": "p",
                    "text": "Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:"
                },
                {
                    "type": "code",
                    "code": "constrequireComponent=require.context('./src',true,/Base[A-Z]\\w+\\.(vue|js)$/)requireComponent.keys().forEach(function(fileName) {letbaseComponentConfig=requireComponent(fileName)baseComponentConfig=baseComponentConfig.default||baseComponentConfigconstbaseComponentName=baseComponentConfig.name||fileName.replace(/^.+\\//,'').replace(/\\.\\w+$/,'')app.component(baseComponentName, baseComponentConfig)})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "components/|- MyButton.vue|- VueTable.vue|- Icon.vue"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- BaseButton.vue|- BaseTable.vue|- BaseIcon.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- AppButton.vue|- AppTable.vue|- AppIcon.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- VButton.vue|- VTable.vue|- VIcon.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Tightly coupled component names​"
                },
                {
                    "type": "p",
                    "text": "Child components that are tightly coupled with their parent should include the parent component name as a prefix."
                },
                {
                    "type": "p",
                    "text": "If a component only makes sense in the context of a single parent component, that relationship should be evident in its name. Since editors typically organize files alphabetically, this also keeps these related files next to each other."
                },
                {
                    "type": "p",
                    "text": "You might be tempted to solve this problem by nesting child components in directories named after their parent. For example:"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList/|- Item/|- index.vue|- Button.vue|- index.vue"
                },
                {
                    "type": "p",
                    "text": "or:"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList/|- Item/|- Button.vue|- Item.vue|- TodoList.vue"
                },
                {
                    "type": "p",
                    "text": "This isn't recommended, as it results in:"
                },
                {
                    "type": "list",
                    "items": [
                        "Many files with similar names, making rapid file switching in code editors more difficult.",
                        "Many nested sub-directories, which increases the time it takes to browse components in an editor's sidebar."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList.vue|- TodoItem.vue|- TodoButton.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- SearchSidebar.vue|- NavigationForSearchSidebar.vue"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- TodoList.vue|- TodoListItem.vue|- TodoListItemButton.vue"
                },
                {
                    "type": "code",
                    "code": "components/|- SearchSidebar.vue|- SearchSidebarNavigation.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Order of words in component names​"
                },
                {
                    "type": "p",
                    "text": "Component names should start with the highest-level (often most general) words and end with descriptive modifying words."
                },
                {
                    "type": "p",
                    "text": "You may be wondering:"
                },
                {
                    "type": "p",
                    "text": "\"Why would we force component names to use less natural language?\""
                },
                {
                    "type": "p",
                    "text": "In natural English, adjectives and other descriptors do typically appear before the nouns, while exceptions require connector words. For example:"
                },
                {
                    "type": "list",
                    "items": [
                        "Coffeewithmilk",
                        "Soupof theday",
                        "Visitorto themuseum"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can definitely include these connector words in component names if you'd like, but the order is still important."
                },
                {
                    "type": "p",
                    "text": "Also note thatwhat's considered \"highest-level\" will be contextual to your app. For example, imagine an app with a search form. It may include components like this one:"
                },
                {
                    "type": "code",
                    "code": "components/|- ClearSearchButton.vue|- ExcludeFromSearchInput.vue|- LaunchOnStartupCheckbox.vue|- RunSearchButton.vue|- SearchInput.vue|- TermsCheckbox.vue"
                },
                {
                    "type": "p",
                    "text": "As you might notice, it's quite difficult to see which components are specific to the search. Now let's rename the components according to the rule:"
                },
                {
                    "type": "code",
                    "code": "components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputExcludeGlob.vue|- SearchInputQuery.vue|- SettingsCheckboxLaunchOnStartup.vue|- SettingsCheckboxTerms.vue"
                },
                {
                    "type": "p",
                    "text": "Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance."
                },
                {
                    "type": "p",
                    "text": "You might be tempted to solve this problem differently, nesting all the search components under a \"search\" directory, then all the settings components under a \"settings\" directory. We only recommend considering this approach in very large apps (e.g. 100+ components), for these reasons:"
                },
                {
                    "type": "list",
                    "items": [
                        "It generally takes more time to navigate through nested sub-directories, than scrolling through a singlecomponentsdirectory.",
                        "Name conflicts (e.g. multipleButtonDelete.vuecomponents) make it more difficult to quickly navigate to a specific component in a code editor.",
                        "Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "components/|- ClearSearchButton.vue|- ExcludeFromSearchInput.vue|- LaunchOnStartupCheckbox.vue|- RunSearchButton.vue|- SearchInput.vue|- TermsCheckbox.vue"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- SearchButtonClear.vue|- SearchButtonRun.vue|- SearchInputQuery.vue|- SearchInputExcludeGlob.vue|- SettingsCheckboxTerms.vue|- SettingsCheckboxLaunchOnStartup.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Self-closing components​"
                },
                {
                    "type": "p",
                    "text": "Components with no content should be self-closing inSingle-File Components, string templates, andJSX- but never in in-DOM templates."
                },
                {
                    "type": "p",
                    "text": "Components that self-close communicate that they not only have no content, but aremeantto have no content. It's the difference between a blank page in a book and one labeled \"This page intentionally left blank.\" Your code is also cleaner without the unnecessary closing tag."
                },
                {
                    "type": "p",
                    "text": "Unfortunately, HTML doesn't allow custom elements to be self-closing - onlyofficial \"void\" elements. That's why the strategy is only possible when Vue's template compiler can reach the template before the DOM, then serve the DOM spec-compliant HTML."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<!-- In Single-File Components, string templates, and JSX --><MyComponent></MyComponent>"
                },
                {
                    "type": "code",
                    "code": "<!-- In in-DOM templates --><my-component/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<!-- In Single-File Components, string templates, and JSX --><MyComponent/>"
                },
                {
                    "type": "code",
                    "code": "<!-- In in-DOM templates --><my-component></my-component>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component name casing in templates​"
                },
                {
                    "type": "p",
                    "text": "In most projects, component names should always be PascalCase inSingle-File Componentsand string templates - but kebab-case in in-DOM templates."
                },
                {
                    "type": "p",
                    "text": "PascalCase has a few advantages over kebab-case:"
                },
                {
                    "type": "list",
                    "items": [
                        "Editors can autocomplete component names in templates, because PascalCase is also used in JavaScript.",
                        "<MyComponent>is more visually distinct from a single-word HTML element than<my-component>, because there are two character differences (the two capitals), rather than just one (a hyphen).",
                        "If you use any non-Vue custom elements in your templates, such as a web component, PascalCase ensures that your Vue components remain distinctly visible."
                    ]
                },
                {
                    "type": "p",
                    "text": "Unfortunately, due to HTML's case insensitivity, in-DOM templates must still use kebab-case."
                },
                {
                    "type": "p",
                    "text": "Also note that if you've already invested heavily in kebab-case, consistency with HTML conventions and being able to use the same casing across all your projects may be more important than the advantages listed above. In those cases,using kebab-case everywhere is also acceptable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<!-- In Single-File Components and string templates --><mycomponent/>"
                },
                {
                    "type": "code",
                    "code": "<!-- In Single-File Components and string templates --><myComponent/>"
                },
                {
                    "type": "code",
                    "code": "<!-- In in-DOM templates --><MyComponent></MyComponent>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<!-- In Single-File Components and string templates --><MyComponent/>"
                },
                {
                    "type": "code",
                    "code": "<!-- In in-DOM templates --><my-component></my-component>"
                },
                {
                    "type": "p",
                    "text": "OR"
                },
                {
                    "type": "code",
                    "code": "<!-- Everywhere --><my-component></my-component>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Component name casing in JS/JSX​"
                },
                {
                    "type": "p",
                    "text": "Component names in JS/JSXshould always be PascalCase, though they may be kebab-case inside strings for simpler applications that only use global component registration throughapp.component."
                },
                {
                    "type": "p",
                    "text": "In JavaScript, PascalCase is the convention for classes and prototype constructors - essentially, anything that can have distinct instances. Vue components also have instances, so it makes sense to also use PascalCase. As an added benefit, using PascalCase within JSX (and templates) allows readers of the code to more easily distinguish between components and HTML elements."
                },
                {
                    "type": "p",
                    "text": "However, for applications that useonlyglobal component definitions viaapp.component, we recommend kebab-case instead. The reasons are:"
                },
                {
                    "type": "list",
                    "items": [
                        "It's rare that global components are ever referenced in JavaScript, so following a convention for JavaScript makes less sense.",
                        "These applications always include many in-DOM templates, wherekebab-casemustbe used."
                    ]
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "app.component('myComponent', {// ...})"
                },
                {
                    "type": "code",
                    "code": "importmyComponentfrom'./MyComponent.vue'"
                },
                {
                    "type": "code",
                    "code": "exportdefault{name:'myComponent'// ...}"
                },
                {
                    "type": "code",
                    "code": "exportdefault{name:'my-component'// ...}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "app.component('MyComponent', {// ...})"
                },
                {
                    "type": "code",
                    "code": "app.component('my-component', {// ...})"
                },
                {
                    "type": "code",
                    "code": "importMyComponentfrom'./MyComponent.vue'"
                },
                {
                    "type": "code",
                    "code": "exportdefault{name:'MyComponent'// ...}"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Full-word component names​"
                },
                {
                    "type": "p",
                    "text": "Component names should prefer full words over abbreviations."
                },
                {
                    "type": "p",
                    "text": "The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "components/|- SdSettings.vue|- UProfOpts.vue"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "components/|- StudentDashboardSettings.vue|- UserProfileOptions.vue"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Prop name casing​"
                },
                {
                    "type": "p",
                    "text": "Prop names should always use camelCase during declaration. When used inside in-DOM templates, props should be kebab-cased. Single-File Components templates andJSXcan use either kebab-case or camelCase props. Casing should be consistent - if you choose to use camelCased props, make sure you don't use kebab-cased ones in your application"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "props: {'greeting-text': String}"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps({'greeting-text': String})"
                },
                {
                    "type": "code",
                    "code": "// for in-DOM templates<welcome-messagegreetingText=\"hi\"></welcome-message>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "props: {greetingText: String}"
                },
                {
                    "type": "code",
                    "code": "constprops=defineProps({greetingText: String})"
                },
                {
                    "type": "code",
                    "code": "// for SFC - please make sure your casing is consistent throughout the project// you can use either convention but we don't recommend mixing two different casing styles<WelcomeMessagegreeting-text=\"hi\"/>// or<WelcomeMessagegreetingText=\"hi\"/>"
                },
                {
                    "type": "code",
                    "code": "// for in-DOM templates<welcome-messagegreeting-text=\"hi\"></welcome-message>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Multi-attribute elements​"
                },
                {
                    "type": "p",
                    "text": "Elements with multiple attributes should span multiple lines, with one attribute per line."
                },
                {
                    "type": "p",
                    "text": "In JavaScript, splitting objects with multiple properties over multiple lines is widely considered a good convention, because it's much easier to read. Our templates andJSXdeserve the same consideration."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"https://vuejs.org/images/logo.png\"alt=\"Vue Logo\">"
                },
                {
                    "type": "code",
                    "code": "<MyComponentfoo=\"a\"bar=\"b\"baz=\"c\"/>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<imgsrc=\"https://vuejs.org/images/logo.png\"alt=\"Vue Logo\">"
                },
                {
                    "type": "code",
                    "code": "<MyComponentfoo=\"a\"bar=\"b\"baz=\"c\"/>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Simple expressions in templates​"
                },
                {
                    "type": "p",
                    "text": "Component templates should only include simple expressions, with more complex expressions refactored into computed properties or methods."
                },
                {
                    "type": "p",
                    "text": "Complex expressions in your templates make them less declarative. We should strive to describewhatshould appear, nothowwe're computing that value. Computed properties and methods also allow the code to be reused."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "{{fullName.split(' ').map((word)=>{returnword[0].toUpperCase()+word.slice(1)}).join(' ')}}"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<!-- In a template -->{{ normalizedFullName }}"
                },
                {
                    "type": "code",
                    "code": "// The complex expression has been moved to a computed propertycomputed: {normalizedFullName() {returnthis.fullName.split(' ').map(word=>word[0].toUpperCase()+word.slice(1)).join(' ')}}"
                },
                {
                    "type": "code",
                    "code": "// The complex expression has been moved to a computed propertyconstnormalizedFullName=computed(()=>fullName.value.split(' ').map((word)=>word[0].toUpperCase()+word.slice(1)).join(' '))"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Simple computed properties​"
                },
                {
                    "type": "p",
                    "text": "Complex computed properties should be split into as many simpler properties as possible."
                },
                {
                    "type": "p",
                    "text": "Simpler, well-named computed properties are:"
                },
                {
                    "type": "list",
                    "items": [
                        "Easier to testWhen each computed property contains only a very simple expression, with very few dependencies, it's much easier to write tests confirming that it works correctly.",
                        "Easier to readSimplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.",
                        "More adaptable to changing requirementsAny value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price.Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change."
                    ]
                },
                {
                    "type": "p",
                    "text": "Easier to test"
                },
                {
                    "type": "p",
                    "text": "When each computed property contains only a very simple expression, with very few dependencies, it's much easier to write tests confirming that it works correctly."
                },
                {
                    "type": "p",
                    "text": "Easier to read"
                },
                {
                    "type": "p",
                    "text": "Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on."
                },
                {
                    "type": "p",
                    "text": "More adaptable to changing requirements"
                },
                {
                    "type": "p",
                    "text": "Any value that can be named might be useful to the view. For example, we might decide to display a message telling the user how much money they saved. We might also decide to calculate sales tax, but perhaps display it separately, rather than as part of the final price."
                },
                {
                    "type": "p",
                    "text": "Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "computed: {price() {constbasePrice=this.manufactureCost/(1-this.profitMargin)return(basePrice-basePrice*(this.discountPercent||0))}}"
                },
                {
                    "type": "code",
                    "code": "constprice=computed(()=>{constbasePrice=manufactureCost.value/(1-profitMargin.value)returnbasePrice-basePrice*(discountPercent.value||0)})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "computed: {basePrice() {returnthis.manufactureCost/(1-this.profitMargin)},discount() {returnthis.basePrice*(this.discountPercent||0)},finalPrice() {returnthis.basePrice-this.discount}}"
                },
                {
                    "type": "code",
                    "code": "constbasePrice=computed(()=>manufactureCost.value/(1-profitMargin.value))constdiscount=computed(()=>basePrice.value*(discountPercent.value||0))constfinalPrice=computed(()=>basePrice.value-discount.value)"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Quoted attribute values​"
                },
                {
                    "type": "p",
                    "text": "Non-empty HTML attribute values should always be inside quotes (single or double, whichever is not used in JS)."
                },
                {
                    "type": "p",
                    "text": "While attribute values without any spaces are not required to have quotes in HTML, this practice often leads toavoidingspaces, making attribute values less readable."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<inputtype=text>"
                },
                {
                    "type": "code",
                    "code": "<AppSidebar:style={width:sidebarWidth+'px'}>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<inputtype=\"text\">"
                },
                {
                    "type": "code",
                    "code": "<AppSidebar:style=\"{ width: sidebarWidth+'px'}\">"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Directive shorthands​"
                },
                {
                    "type": "p",
                    "text": "Directive shorthands (:forv-bind:,@forv-on:and#forv-slot) should be used always or never."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<inputv-bind:value=\"newTodoText\":placeholder=\"newTodoInstructions\">"
                },
                {
                    "type": "code",
                    "code": "<inputv-on:input=\"onInput\"@focus=\"onFocus\">"
                },
                {
                    "type": "code",
                    "code": "<templatev-slot:header><h1>Here might be a page title</h1></template><template#footer><p>Here's some contact info</p></template>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<input:value=\"newTodoText\":placeholder=\"newTodoInstructions\">"
                },
                {
                    "type": "code",
                    "code": "<inputv-bind:value=\"newTodoText\"v-bind:placeholder=\"newTodoInstructions\">"
                },
                {
                    "type": "code",
                    "code": "<input@input=\"onInput\"@focus=\"onFocus\">"
                },
                {
                    "type": "code",
                    "code": "<inputv-on:input=\"onInput\"v-on:focus=\"onFocus\">"
                },
                {
                    "type": "code",
                    "code": "<templatev-slot:header><h1>Here might be a page title</h1></template><templatev-slot:footer><p>Here's some contact info</p></template>"
                },
                {
                    "type": "code",
                    "code": "<template#header><h1>Here might be a page title</h1></template><template#footer><p>Here's some contact info</p></template>"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/style-guide/rules-use-with-caution",
            "title": "Priority D Rules: Use with Caution | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Priority D Rules: Use with Caution​"
                },
                {
                    "type": "p",
                    "text": "Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided."
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Element selectors withscoped​"
                },
                {
                    "type": "p",
                    "text": "Element selectors should be avoided withscoped."
                },
                {
                    "type": "p",
                    "text": "Prefer class selectors over element selectors inscopedstyles, because large numbers of element selectors are slow."
                },
                {
                    "type": "p",
                    "text": "To scope styles, Vue adds a unique attribute to component elements, such asdata-v-f3f3eg9. Then selectors are modified so that only matching elements with this attribute are selected (e.g.button[data-v-f3f3eg9])."
                },
                {
                    "type": "p",
                    "text": "The problem is that large numbers of element-attribute selectors (e.g.button[data-v-f3f3eg9]) will be considerably slower than class-attribute selectors (e.g..btn-close[data-v-f3f3eg9]), so class selectors should be preferred whenever possible."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<template><button>×</button></template><stylescoped>button {background-color: red;}</style>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<template><buttonclass=\"btn btn-close\">×</button></template><stylescoped>.btn-close {background-color: red;}</style>"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Implicit parent-child communication​"
                },
                {
                    "type": "p",
                    "text": "Props and events should be preferred for parent-child component communication, instead ofthis.$parentor mutating props."
                },
                {
                    "type": "p",
                    "text": "An ideal Vue application is props down, events up. Sticking to this convention makes your components much easier to understand. However, there are edge cases where prop mutation orthis.$parentcan simplify two components that are already deeply coupled."
                },
                {
                    "type": "p",
                    "text": "The problem is, there are also manysimplecases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code)."
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoItem', {props: {todo: {type: Object,required:true}},template:'<input v-model=\"todo.text\">'})"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoItem', {props: {todo: {type: Object,required:true}},methods: {removeTodo() {this.$parent.todos=this.$parent.todos.filter((todo)=>todo.id!==vm.todo.id)}},template:`<span>{{ todo.text }}<button @click=\"removeTodo\">×</button></span>`})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoItem', {props: {todo: {type: Object,required:true}},emits: ['input'],template:`<input:value=\"todo.text\"@input=\"$emit('input', $event.target.value)\">`})"
                },
                {
                    "type": "code",
                    "code": "app.component('TodoItem', {props: {todo: {type: Object,required:true}},emits: ['delete'],template:`<span>{{ todo.text }}<button @click=\"$emit('delete')\">×</button></span>`})"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Bad"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineProps({todo: {type: Object,required:true}})</script><template><inputv-model=\"todo.text\"/></template>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>import{ getCurrentInstance }from'vue'constprops=defineProps({todo: {type: Object,required:true}})constinstance=getCurrentInstance()functionremoveTodo() {constparent=instance.parentif(!parent)returnparent.props.todos=parent.props.todos.filter((todo)=>{returntodo.id!==props.todo.id})}</script><template><span>{{ todo.text }}<button@click=\"removeTodo\">×</button></span></template>"
                },
                {
                    "type": "header",
                    "level": 3,
                    "text": "Good"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineProps({todo: {type: Object,required:true}})constemit=defineEmits(['input'])</script><template><input:value=\"todo.text\"@input=\"emit('input', $event.target.value)\"/></template>"
                },
                {
                    "type": "code",
                    "code": "<scriptsetup>defineProps({todo: {type: Object,required:true}})constemit=defineEmits(['delete'])</script><template><span>{{ todo.text }}<button@click=\"emit('delete')\">×</button></span></template>"
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/translations",
            "title": "Translations | Vue.js",
            "content": [
                {
                    "type": "header",
                    "level": 1,
                    "text": "Translations​"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Available Languages​"
                },
                {
                    "type": "list",
                    "items": [
                        "English[source]",
                        "简体中文 / Simplified Chinese[source]",
                        "日本語 / Japanese[source]",
                        "Українська / Ukrainian[source]",
                        "Français / French[source]",
                        "한국어 / Korean[source]",
                        "Português / Portuguese[source]",
                        "বাংলা / Bengali[source]",
                        "Italiano / Italian[source]",
                        "فارسی / Persian[source]",
                        "Русский / Russian[source]",
                        "Čeština / Czech[source]",
                        "繁體中文 / Traditional Chinese[source]"
                    ]
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Work in Progress Languages​"
                },
                {
                    "type": "list",
                    "items": [
                        "العربية / Arabic[source]",
                        "Español / Spanish[source]"
                    ]
                },
                {
                    "type": "p",
                    "text": "العربية / Arabic[source]"
                },
                {
                    "type": "p",
                    "text": "Español / Spanish[source]"
                },
                {
                    "type": "header",
                    "level": 2,
                    "text": "Starting a new Translation​"
                },
                {
                    "type": "p",
                    "text": "The Vue documentation has recently undergone a major revision, so translations in other languages are still missing or work-in-progress."
                },
                {
                    "type": "p",
                    "text": "We welcome community efforts to provide more translations. Translation efforts are managed in thevuejs-translationsGitHub organization. If you are interested in contributing, please check out theTranslation Guidelinesto get started."
                },
                {
                    "type": "p",
                    "text": "Edit this page on GitHub"
                }
            ]
        },
        {
            "url": "https://vuejs.org/tutorial",
            "title": "Tutorial | Vue.js",
            "content": []
        }
    ]
}