{
  "name": "https://react.dev",
  "url": "https://https://react.dev",
  "pages": [
    {
      "url": "https://react.dev/reference/react",
      "title": "React Reference Overview – React",
      "content": [
        {
          "type": "p",
          "text": "This section provides detailed reference documentation for working with React. For an introduction to React, please visit theLearnsection."
        },
        {
          "type": "p",
          "text": "The React reference documentation is broken down into functional subsections:"
        },
        {
          "type": "p",
          "text": "Programmatic React features:"
        },
        {
          "type": "list",
          "items": [
            "Hooks- Use different React features from your components.",
            "Components- Built-in components that you can use in your JSX.",
            "APIs- APIs that are useful for defining components.",
            "Directives- Provide instructions to bundlers compatible with React Server Components."
          ]
        },
        {
          "type": "p",
          "text": "React-dom contains features that are only supported for web applications (which run in the browser DOM environment). This section is broken into the following:"
        },
        {
          "type": "list",
          "items": [
            "Hooks- Hooks for web applications which run in the browser DOM environment.",
            "Components- React supports all of the browser built-in HTML and SVG components.",
            "APIs- Thereact-dompackage contains methods supported only in web applications.",
            "Client APIs- Thereact-dom/clientAPIs let you render React components on the client (in the browser).",
            "Server APIs- Thereact-dom/serverAPIs let you render React components to HTML on the server."
          ]
        },
        {
          "type": "p",
          "text": "React has idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications:"
        },
        {
          "type": "list",
          "items": [
            "Components and Hooks must be pure– Purity makes your code easier to understand, debug, and allows React to automatically optimize your components and hooks correctly.",
            "React calls Components and Hooks– React is responsible for rendering components and hooks when necessary to optimize the user experience.",
            "Rules of Hooks– Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called."
          ]
        },
        {
          "type": "list",
          "items": [
            "Legacy APIs- Exported from thereactpackage, but not recommended for use in newly written code."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom",
      "title": "React DOM APIs – React",
      "content": [
        {
          "type": "p",
          "text": "Thereact-dompackage contains methods that are only supported for the web applications (which run in the browser DOM environment). They are not supported for React Native."
        },
        {
          "type": "p",
          "text": "These APIs can be imported from your components. They are rarely used:"
        },
        {
          "type": "list",
          "items": [
            "createPortallets you render child components in a different part of the DOM tree.",
            "flushSynclets you force React to flush a state update and update the DOM synchronously."
          ]
        },
        {
          "type": "p",
          "text": "These APIs can be used to make apps faster by pre-loading resources such as scripts, stylesheets, and fonts as soon as you know you need them, for example before navigating to another page where the resources will be used. React-based frameworksfrequently handle resource loading for you, so you might not have to call these APIs yourself. Consult your framework’s documentation for details."
        },
        {
          "type": "list",
          "items": [
            "prefetchDNSlets you prefetch the IP address of a DNS domain name that you expect to connect to.",
            "preconnectlets you connect to a server you expect to request resources from, even if you don’t know what resources you’ll need yet.",
            "preloadlets you fetch a stylesheet, font, image, or external script that you expect to use.",
            "preloadModulelets you fetch an ESM module that you expect to use.",
            "preinitlets you fetch and evaluate an external script or fetch and insert a stylesheet.",
            "preinitModulelets you fetch and evaluate an ESM module."
          ]
        },
        {
          "type": "p",
          "text": "Thereact-dompackage provides two additional entry points:"
        },
        {
          "type": "list",
          "items": [
            "react-dom/clientcontains APIs to render React components on the client (in the browser).",
            "react-dom/servercontains APIs to render React components on the server."
          ]
        },
        {
          "type": "p",
          "text": "These APIs were removed in React 19:"
        },
        {
          "type": "list",
          "items": [
            "findDOMNode: seealternatives.",
            "hydrate: usehydrateRootinstead.",
            "render: usecreateRootinstead.",
            "unmountComponentAtNode: useroot.unmount()instead.",
            "renderToNodeStream: usereact-dom/serverAPIs instead.",
            "renderToStaticNodeStream: usereact-dom/serverAPIs instead."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/client",
      "title": "Client React DOM APIs – React",
      "content": [
        {
          "type": "p",
          "text": "Thereact-dom/clientAPIs let you render React components on the client (in the browser). These APIs are typically used at the top level of your app to initialize your React tree. Aframeworkmay call them for you. Most of your components don’t need to import or use them."
        },
        {
          "type": "list",
          "items": [
            "createRootlets you create a root to display React components inside a browser DOM node.",
            "hydrateRootlets you display React components inside a browser DOM node whose HTML content was previously generated byreact-dom/server."
          ]
        },
        {
          "type": "p",
          "text": "React supports all popular browsers, including Internet Explorer 9 and above. Some polyfills are required for older browsers such as IE 9 and IE 10."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/client/createRoot",
      "title": "createRoot – React",
      "content": [
        {
          "type": "p",
          "text": "createRootlets you create a root to display React components inside a browser DOM node."
        },
        {
          "type": "code",
          "code": "constroot=createRoot(domNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencecreateRoot(domNode, options?)root.render(reactNode)root.unmount()",
            "createRoot(domNode, options?)",
            "root.render(reactNode)",
            "root.unmount()",
            "UsageRendering an app fully built with ReactRendering a page partially built with ReactUpdating a root componentShow a dialog for uncaught errorsDisplaying Error Boundary errorsDisplaying a dialog for recoverable errors",
            "Rendering an app fully built with React",
            "Rendering a page partially built with React",
            "Updating a root component",
            "Show a dialog for uncaught errors",
            "Displaying Error Boundary errors",
            "Displaying a dialog for recoverable errors",
            "TroubleshootingI’ve created a root, but nothing is displayedI’m getting an error: “You passed a second argument to root.render”I’m getting an error: “Target container is not a DOM element”I’m getting an error: “Functions are not valid as a React child.”My server-rendered HTML gets re-created from scratch",
            "I’ve created a root, but nothing is displayed",
            "I’m getting an error: “You passed a second argument to root.render”",
            "I’m getting an error: “Target container is not a DOM element”",
            "I’m getting an error: “Functions are not valid as a React child.”",
            "My server-rendered HTML gets re-created from scratch"
          ]
        },
        {
          "type": "p",
          "text": "CallcreateRootto create a React root for displaying content inside a browser DOM element."
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';constdomNode=document.getElementById('root');constroot=createRoot(domNode);"
        },
        {
          "type": "p",
          "text": "React will create a root for thedomNode, and take over managing the DOM inside it. After you’ve created a root, you need to callroot.renderto display a React component inside of it:"
        },
        {
          "type": "code",
          "code": "root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "An app fully built with React will usually only have onecreateRootcall for its root component. A page that uses “sprinkles” of React for parts of the page may have as many separate roots as needed. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "domNode: ADOM element.React will create a root for this DOM element and allow you to call functions on the root, such asrenderto display rendered React content.",
            "optionaloptions: An object with options for this React root.optionalonCaughtError: Callback called when React catches an error in an Error Boundary. Called with theerrorcaught by the Error Boundary, and anerrorInfoobject containing thecomponentStack.optionalonUncaughtError: Callback called when an error is thrown and not caught by an Error Boundary. Called with theerrorthat was thrown, and anerrorInfoobject containing thecomponentStack.optionalonRecoverableError: Callback called when React automatically recovers from errors. Called with anerrorReact throws, and anerrorInfoobject containing thecomponentStack. Some recoverable errors may include the original error cause aserror.cause.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page.",
            "optionalonCaughtError: Callback called when React catches an error in an Error Boundary. Called with theerrorcaught by the Error Boundary, and anerrorInfoobject containing thecomponentStack.",
            "optionalonUncaughtError: Callback called when an error is thrown and not caught by an Error Boundary. Called with theerrorthat was thrown, and anerrorInfoobject containing thecomponentStack.",
            "optionalonRecoverableError: Callback called when React automatically recovers from errors. Called with anerrorReact throws, and anerrorInfoobject containing thecomponentStack. Some recoverable errors may include the original error cause aserror.cause.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page."
          ]
        },
        {
          "type": "p",
          "text": "createRootreturns an object with two methods:renderandunmount."
        },
        {
          "type": "list",
          "items": [
            "If your app is server-rendered, usingcreateRoot()is not supported. UsehydrateRoot()instead.",
            "You’ll likely have only onecreateRootcall in your app. If you use a framework, it might do this call for you.",
            "When you want to render a piece of JSX in a different part of the DOM tree that isn’t a child of your component (for example, a modal or a tooltip), usecreatePortalinstead ofcreateRoot."
          ]
        },
        {
          "type": "p",
          "text": "Callroot.renderto display a piece ofJSX(“React node”) into the React root’s browser DOM node."
        },
        {
          "type": "code",
          "code": "root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "React will display<App />in theroot, and take over managing the DOM inside it. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: AReact nodethat you want to display. This will usually be a piece of JSX like<App />, but you can also pass a React element constructed withcreateElement(), a string, a number,null, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "root.renderreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "The first time you callroot.render, React will clear all the existing HTML content inside the React root before rendering the React component into it.",
            "If your root’s DOM node contains HTML generated by React on the server or during the build, usehydrateRoot()instead, which attaches the event handlers to the existing HTML.",
            "If you callrenderon the same root more than once, React will update the DOM as necessary to reflect the latest JSX you passed. React will decide which parts of the DOM can be reused and which need to be recreated by“matching it up”with the previously rendered tree. Callingrenderon the same root again is similar to calling thesetfunctionon the root component: React avoids unnecessary DOM updates."
          ]
        },
        {
          "type": "p",
          "text": "Callroot.unmountto destroy a rendered tree inside a React root."
        },
        {
          "type": "code",
          "code": "root.unmount();"
        },
        {
          "type": "p",
          "text": "An app fully built with React will usually not have any calls toroot.unmount. This is mostly useful if your React root’s DOM node (or any of its ancestors) may get removed from the DOM by some other code. For example, imagine a jQuery tab panel that removes inactive tabs from the DOM. If a tab gets removed, everything inside it (including the React roots inside) would get removed from the DOM as well. In that case, you need to tell React to “stop” managing the removed root’s content by callingroot.unmount. Otherwise, the components inside the removed root won’t know to clean up and free up global resources like subscriptions. Callingroot.unmountwill unmount all the components in the root and “detach” React from the root DOM node, including removing any event handlers or state in the tree."
        },
        {
          "type": "p",
          "text": "root.unmountdoes not accept any parameters."
        },
        {
          "type": "p",
          "text": "root.unmountreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Callingroot.unmountwill unmount all the components in the tree and “detach” React from the root DOM node.",
            "Once you callroot.unmountyou cannot callroot.renderagain on the same root. Attempting to callroot.renderon an unmounted root will throw a “Cannot update an unmounted root” error. However, you can create a new root for the same DOM node after the previous root for that node has been unmounted."
          ]
        },
        {
          "type": "p",
          "text": "If your app is fully built with React, create a single root for your entire app."
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'));root.render(<App />);"
        },
        {
          "type": "p",
          "text": "Usually, you only need to run this code once at startup. It will:"
        },
        {
          "type": "list",
          "items": [
            "Find thebrowser DOM nodedefined in your HTML.",
            "Display theReact componentfor your app inside."
          ]
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';importAppfrom'./App.js';import'./styles.css';constroot=createRoot(document.getElementById('root'));root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "If your app is fully built with React, you shouldn’t need to create any more roots, or to callroot.renderagain. From this point on, React will manage the DOM of your entire app. To add more components,nest them inside theAppcomponent.When you need to update the UI, each of your components can do this byusing state.When you need to display extra content like a modal or a tooltip outside the DOM node,render it with a portal."
        },
        {
          "type": "p",
          "text": "When your HTML is empty, the user sees a blank page until the app’s JavaScript code loads and runs:"
        },
        {
          "type": "code",
          "code": "<divid=\"root\"></div>"
        },
        {
          "type": "p",
          "text": "This can feel very slow! To solve this, you can generate the initial HTML from your componentson the server or during the build.Then your visitors can read text, see images, and click links before any of the JavaScript code loads. We recommendusing a frameworkthat does this optimization out of the box. Depending on when it runs, this is calledserver-side rendering (SSR)orstatic site generation (SSG)."
        },
        {
          "type": "p",
          "text": "Apps using server rendering or static generation must callhydrateRootinstead ofcreateRoot.React will thenhydrate(reuse) the DOM nodes from your HTML instead of destroying and re-creating them."
        },
        {
          "type": "p",
          "text": "If your pageisn’t fully built with React, you can callcreateRootmultiple times to create a root for each top-level piece of UI managed by React. You can display different content in each root by callingroot.render. Here, two different React components are rendered into two DOM nodes defined in theindex.htmlfile:"
        },
        {
          "type": "code",
          "code": "import'./styles.css';import{createRoot}from'react-dom/client';import{Comments,Navigation}from'./Components.js';constnavDomNode=document.getElementById('navigation');constnavRoot=createRoot(navDomNode);navRoot.render(<Navigation/>);constcommentDomNode=document.getElementById('comments');constcommentRoot=createRoot(commentDomNode);commentRoot.render(<Comments/>);"
        },
        {
          "type": "p",
          "text": "You could also create a new DOM node withdocument.createElement()and add it to the document manually."
        },
        {
          "type": "code",
          "code": "constdomNode=document.createElement('div');constroot=createRoot(domNode);root.render(<Comment/>);document.body.appendChild(domNode);// You can add it anywhere in the document"
        },
        {
          "type": "p",
          "text": "To remove the React tree from the DOM node and clean up all the resources used by it, callroot.unmount."
        },
        {
          "type": "code",
          "code": "root.unmount();"
        },
        {
          "type": "p",
          "text": "This is mostly useful if your React components are inside an app written in a different framework."
        },
        {
          "type": "p",
          "text": "You can callrendermore than once on the same root. As long as the component tree structure matches up with what was previously rendered, React willpreserve the state.Notice how you can type in the input, which means that the updates from repeatedrendercalls every second in this example are not destructive:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App.js';constroot=createRoot(document.getElementById('root'));leti=0;setInterval(()=>{root.render(<Appcounter={i}/>);i++;},1000);"
        },
        {
          "type": "p",
          "text": "It is uncommon to callrendermultiple times. Usually, your components willupdate stateinstead."
        },
        {
          "type": "p",
          "text": "By default, React will log all uncaught errors to the console. To implement your own error reporting, you can provide the optionalonUncaughtErrorroot option:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'),{onUncaughtError:(error,errorInfo)=>{console.error('Uncaught error',error,errorInfo.componentStack);}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "TheonUncaughtErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "Theerrorthat was thrown.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonUncaughtErrorroot option to display error dialogs:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportUncaughtError}from\"./reportError\";import\"./styles.css\";constcontainer=document.getElementById(\"root\");constroot=createRoot(container,{onUncaughtError:(error,errorInfo)=>{if(error.message!=='Known error'){reportUncaughtError({error,componentStack:errorInfo.componentStack});}}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "By default, React will log all errors caught by an Error Boundary toconsole.error. To override this behavior, you can provide the optionalonCaughtErrorroot option to handle errors caught by anError Boundary:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'),{onCaughtError:(error,errorInfo)=>{console.error('Caught error',error,errorInfo.componentStack);}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "TheonCaughtErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "Theerrorthat was caught by the boundary.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonCaughtErrorroot option to display error dialogs or filter known errors from logging:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportCaughtError}from\"./reportError\";import\"./styles.css\";constcontainer=document.getElementById(\"root\");constroot=createRoot(container,{onCaughtError:(error,errorInfo)=>{if(error.message!=='Known error'){reportCaughtError({error,componentStack:errorInfo.componentStack,});}}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "React may automatically render a component a second time to attempt to recover from an error thrown in render. If successful, React will log a recoverable error to the console to notify the developer. To override this behavior, you can provide the optionalonRecoverableErrorroot option:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'),{onRecoverableError:(error,errorInfo)=>{console.error('Recoverable error',error,error.cause,errorInfo.componentStack,);}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "TheonRecoverableErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "Theerrorthat React throws. Some errors may include the original cause aserror.cause.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonRecoverableErrorroot option to display error dialogs:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportRecoverableError}from\"./reportError\";import\"./styles.css\";constcontainer=document.getElementById(\"root\");constroot=createRoot(container,{onRecoverableError:(error,errorInfo)=>{reportRecoverableError({error,cause:error.cause,componentStack:errorInfo.componentStack,});}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "Make sure you haven’t forgotten to actuallyrenderyour app into the root:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';importAppfrom'./App.js';constroot=createRoot(document.getElementById('root'));root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "Until you do that, nothing is displayed."
        },
        {
          "type": "p",
          "text": "A common mistake is to pass the options forcreateRoottoroot.render(...):"
        },
        {
          "type": "p",
          "text": "To fix, pass the root options tocreateRoot(...), notroot.render(...):"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: root.render only takes one argument.root.render(App,{onUncaughtError});// ✅ Correct: pass options to createRoot.constroot=createRoot(container,{onUncaughtError});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "This error means that whatever you’re passing tocreateRootis not a DOM node. If you’re not sure what’s happening, try logging it:"
        },
        {
          "type": "code",
          "code": "constdomNode=document.getElementById('root');console.log(domNode);// ???constroot=createRoot(domNode);root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "For example, ifdomNodeisnull, it means thatgetElementByIdreturnednull. This will happen if there is no node in the document with the given ID at the time of your call. There may be a few reasons for it:"
        },
        {
          "type": "list",
          "items": [
            "The ID you’re looking for might differ from the ID you used in the HTML file. Check for typos!",
            "Your bundle’s<script>tag cannot “see” any DOM nodes that appearafterit in the HTML."
          ]
        },
        {
          "type": "p",
          "text": "Another common way to get this error is to writecreateRoot(<App />)instead ofcreateRoot(domNode)."
        },
        {
          "type": "p",
          "text": "This error means that whatever you’re passing toroot.renderis not a React component. This may happen if you callroot.renderwithComponentinstead of<Component />:"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: App is a function, not a Component.root.render(App);// ✅ Correct: <App /> is a component.root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "Or if you pass a function toroot.render, instead of the result of calling it:"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: createApp is a function, not a component.root.render(createApp);// ✅ Correct: call createApp to return a component.root.render(createApp());"
        },
        {
          "type": "p",
          "text": "If your app is server-rendered and includes the initial HTML generated by React, you might notice that creating a root and callingroot.renderdeletes all that HTML, and then re-creates all the DOM nodes from scratch. This can be slower, resets focus and scroll positions, and may lose other user input. Server-rendered apps must usehydrateRootinstead ofcreateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document.getElementById('root'),<App/>);"
        },
        {
          "type": "p",
          "text": "Note that its API is different. In particular, usually there will be no furtherroot.rendercall."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/client/hydrateRoot",
      "title": "hydrateRoot – React",
      "content": [
        {
          "type": "p",
          "text": "hydrateRootlets you display React components inside a browser DOM node whose HTML content was previously generated byreact-dom/server."
        },
        {
          "type": "code",
          "code": "constroot=hydrateRoot(domNode,reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencehydrateRoot(domNode, reactNode, options?)root.render(reactNode)root.unmount()",
            "hydrateRoot(domNode, reactNode, options?)",
            "root.render(reactNode)",
            "root.unmount()",
            "UsageHydrating server-rendered HTMLHydrating an entire documentSuppressing unavoidable hydration mismatch errorsHandling different client and server contentUpdating a hydrated root componentShow a dialog for uncaught errorsDisplaying Error Boundary errorsShow a dialog for recoverable hydration mismatch errors",
            "Hydrating server-rendered HTML",
            "Hydrating an entire document",
            "Suppressing unavoidable hydration mismatch errors",
            "Handling different client and server content",
            "Updating a hydrated root component",
            "Show a dialog for uncaught errors",
            "Displaying Error Boundary errors",
            "Show a dialog for recoverable hydration mismatch errors",
            "TroubleshootingI’m getting an error: “You passed a second argument to root.render”",
            "I’m getting an error: “You passed a second argument to root.render”"
          ]
        },
        {
          "type": "p",
          "text": "CallhydrateRootto “attach” React to existing HTML that was already rendered by React in a server environment."
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';constdomNode=document.getElementById('root');constroot=hydrateRoot(domNode,reactNode);"
        },
        {
          "type": "p",
          "text": "React will attach to the HTML that exists inside thedomNode, and take over managing the DOM inside it. An app fully built with React will usually only have onehydrateRootcall with its root component. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "domNode: ADOM elementthat was rendered as the root element on the server.",
            "reactNode: The “React node” used to render the existing HTML. This will usually be a piece of JSX like<App />which was rendered with aReactDOM Servermethod such asrenderToPipeableStream(<App />).",
            "optionaloptions: An object with options for this React root.optionalonCaughtError: Callback called when React catches an error in an Error Boundary. Called with theerrorcaught by the Error Boundary, and anerrorInfoobject containing thecomponentStack.optionalonUncaughtError: Callback called when an error is thrown and not caught by an Error Boundary. Called with theerrorthat was thrown and anerrorInfoobject containing thecomponentStack.optionalonRecoverableError: Callback called when React automatically recovers from errors. Called with theerrorReact throws, and anerrorInfoobject containing thecomponentStack. Some recoverable errors may include the original error cause aserror.cause.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server.",
            "optionalonCaughtError: Callback called when React catches an error in an Error Boundary. Called with theerrorcaught by the Error Boundary, and anerrorInfoobject containing thecomponentStack.",
            "optionalonUncaughtError: Callback called when an error is thrown and not caught by an Error Boundary. Called with theerrorthat was thrown and anerrorInfoobject containing thecomponentStack.",
            "optionalonRecoverableError: Callback called when React automatically recovers from errors. Called with theerrorReact throws, and anerrorInfoobject containing thecomponentStack. Some recoverable errors may include the original error cause aserror.cause.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as used on the server."
          ]
        },
        {
          "type": "p",
          "text": "hydrateRootreturns an object with two methods:renderandunmount."
        },
        {
          "type": "list",
          "items": [
            "hydrateRoot()expects the rendered content to be identical with the server-rendered content. You should treat mismatches as bugs and fix them.",
            "In development mode, React warns about mismatches during hydration. There are no guarantees that attribute differences will be patched up in case of mismatches. This is important for performance reasons because in most apps, mismatches are rare, and so validating all markup would be prohibitively expensive.",
            "You’ll likely have only onehydrateRootcall in your app. If you use a framework, it might do this call for you.",
            "If your app is client-rendered with no HTML rendered already, usinghydrateRoot()is not supported. UsecreateRoot()instead."
          ]
        },
        {
          "type": "p",
          "text": "Callroot.renderto update a React component inside a hydrated React root for a browser DOM element."
        },
        {
          "type": "code",
          "code": "root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "React will update<App />in the hydratedroot. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A “React node” that you want to update. This will usually be a piece of JSX like<App />, but you can also pass a React element constructed withcreateElement(), a string, a number,null, orundefined."
          ]
        },
        {
          "type": "p",
          "text": "root.renderreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "If you callroot.renderbefore the root has finished hydrating, React will clear the existing server-rendered HTML content and switch the entire root to client rendering."
          ]
        },
        {
          "type": "p",
          "text": "Callroot.unmountto destroy a rendered tree inside a React root."
        },
        {
          "type": "code",
          "code": "root.unmount();"
        },
        {
          "type": "p",
          "text": "An app fully built with React will usually not have any calls toroot.unmount. This is mostly useful if your React root’s DOM node (or any of its ancestors) may get removed from the DOM by some other code. For example, imagine a jQuery tab panel that removes inactive tabs from the DOM. If a tab gets removed, everything inside it (including the React roots inside) would get removed from the DOM as well. You need to tell React to “stop” managing the removed root’s content by callingroot.unmount. Otherwise, the components inside the removed root won’t clean up and free up resources like subscriptions. Callingroot.unmountwill unmount all the components in the root and “detach” React from the root DOM node, including removing any event handlers or state in the tree."
        },
        {
          "type": "p",
          "text": "root.unmountdoes not accept any parameters."
        },
        {
          "type": "p",
          "text": "root.unmountreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Callingroot.unmountwill unmount all the components in the tree and “detach” React from the root DOM node.",
            "Once you callroot.unmountyou cannot callroot.renderagain on the root. Attempting to callroot.renderon an unmounted root will throw a “Cannot update an unmounted root” error."
          ]
        },
        {
          "type": "p",
          "text": "If your app’s HTML was generated byreact-dom/server, you need tohydrateit on the client."
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';hydrateRoot(document.getElementById('root'),<App />);"
        },
        {
          "type": "p",
          "text": "This will hydrate the server HTML inside thebrowser DOM nodewith theReact componentfor your app. Usually, you will do it once at startup. If you use a framework, it might do this behind the scenes for you. To hydrate your app, React will “attach” your components’ logic to the initial generated HTML from the server. Hydration turns the initial HTML snapshot from the server into a fully interactive app that runs in the browser."
        },
        {
          "type": "code",
          "code": "import'./styles.css';import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document.getElementById('root'),<App/>);"
        },
        {
          "type": "p",
          "text": "You shouldn’t need to callhydrateRootagain or to call it in more places. From this point on, React will be managing the DOM of your application. To update the UI, your components willuse stateinstead."
        },
        {
          "type": "p",
          "text": "The React tree you pass tohydrateRootneeds to producethe same outputas it did on the server. This is important for the user experience. The user will spend some time looking at the server-generated HTML before your JavaScript code loads. Server rendering creates an illusion that the app loads faster by showing the HTML snapshot of its output. Suddenly showing different content breaks that illusion. This is why the server render output must match the initial render output on the client. The most common causes leading to hydration errors include:"
        },
        {
          "type": "list",
          "items": [
            "Extra whitespace (like newlines) around the React-generated HTML inside the root node.",
            "Using checks liketypeof window !== 'undefined'in your rendering logic.",
            "Using browser-only APIs likewindow.matchMediain your rendering logic.",
            "Rendering different data on the server and the client."
          ]
        },
        {
          "type": "p",
          "text": "React recovers from some hydration errors, butyou must fix them like other bugs.In the best case, they’ll lead to a slowdown; in the worst case, event handlers can get attached to the wrong elements."
        },
        {
          "type": "p",
          "text": "Apps fully built with React can render the entire document as JSX, including the<html>tag:"
        },
        {
          "type": "code",
          "code": "functionApp(){return(<html><head><metacharSet=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><linkrel=\"stylesheet\"href=\"/styles.css\"></link><title>My app</title></head><body><Router/></body></html>);}"
        },
        {
          "type": "p",
          "text": "To hydrate the entire document, pass thedocumentglobal as the first argument tohydrateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<App/>);"
        },
        {
          "type": "p",
          "text": "If a single element’s attribute or text content is unavoidably different between the server and the client (for example, a timestamp), you may silence the hydration mismatch warning. To silence hydration warnings on an element, addsuppressHydrationWarning={true}:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<h1suppressHydrationWarning={true}>Current Date:{newDate().toLocaleDateString()}</h1>);}"
        },
        {
          "type": "p",
          "text": "This only works one level deep, and is intended to be an escape hatch. Don’t overuse it. Unless it’s text content, React still won’t attempt to patch it up, so it may remain inconsistent until future updates."
        },
        {
          "type": "p",
          "text": "If you intentionally need to render something different on the server and the client, you can do a two-pass rendering. Components that render something different on the client can read astate variablelikeisClient, which you can set totruein anEffect:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from\"react\";exportdefaultfunctionApp(){const[isClient,setIsClient]=useState(false);useEffect(()=>{setIsClient(true);},[]);return(<h1>{isClient?'Is Client':'Is Server'}</h1>);}"
        },
        {
          "type": "p",
          "text": "This way the initial render pass will render the same content as the server, avoiding mismatches, but an additional pass will happen synchronously right after hydration."
        },
        {
          "type": "p",
          "text": "This approach makes hydration slower because your components have to render twice. Be mindful of the user experience on slow connections. The JavaScript code may load significantly later than the initial HTML render, so rendering a different UI immediately after hydration may also feel jarring to the user."
        },
        {
          "type": "p",
          "text": "After the root has finished hydrating, you can callroot.renderto update the root React component.Unlike withcreateRoot, you don’t usually need to do this because the initial content was already rendered as HTML. If you callroot.renderat some point after hydration, and the component tree structure matches up with what was previously rendered, React willpreserve the state.Notice how you can type in the input, which means that the updates from repeatedrendercalls every second in this example are not destructive:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App.js';constroot=hydrateRoot(document.getElementById('root'),<Appcounter={0}/>);leti=0;setInterval(()=>{root.render(<Appcounter={i}/>);i++;},1000);"
        },
        {
          "type": "p",
          "text": "It is uncommon to callroot.renderon a hydrated root. Usually, you’llupdate stateinside one of the components instead."
        },
        {
          "type": "p",
          "text": "By default, React will log all uncaught errors to the console. To implement your own error reporting, you can provide the optionalonUncaughtErrorroot option:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';constroot=hydrateRoot(document.getElementById('root'),<App/>,{onUncaughtError:(error,errorInfo)=>{console.error('Uncaught error',error,errorInfo.componentStack);}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "TheonUncaughtErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "Theerrorthat was thrown.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonUncaughtErrorroot option to display error dialogs:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportUncaughtError}from\"./reportError\";import\"./styles.css\";import{renderToString}from'react-dom/server';constcontainer=document.getElementById(\"root\");constroot=hydrateRoot(container,<App/>,{onUncaughtError:(error,errorInfo)=>{if(error.message!=='Known error'){reportUncaughtError({error,componentStack:errorInfo.componentStack});}}});"
        },
        {
          "type": "p",
          "text": "By default, React will log all errors caught by an Error Boundary toconsole.error. To override this behavior, you can provide the optionalonCaughtErrorroot option for errors caught by anError Boundary:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';constroot=hydrateRoot(document.getElementById('root'),<App/>,{onCaughtError:(error,errorInfo)=>{console.error('Caught error',error,errorInfo.componentStack);}});root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "TheonCaughtErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "Theerrorthat was caught by the boundary.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonCaughtErrorroot option to display error dialogs or filter known errors from logging:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportCaughtError}from\"./reportError\";import\"./styles.css\";constcontainer=document.getElementById(\"root\");constroot=hydrateRoot(container,<App/>,{onCaughtError:(error,errorInfo)=>{if(error.message!=='Known error'){reportCaughtError({error,componentStack:errorInfo.componentStack});}}});"
        },
        {
          "type": "p",
          "text": "When React encounters a hydration mismatch, it will automatically attempt to recover by rendering on the client. By default, React will log hydration mismatch errors toconsole.error. To override this behavior, you can provide the optionalonRecoverableErrorroot option:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';constroot=hydrateRoot(document.getElementById('root'),<App/>,{onRecoverableError:(error,errorInfo)=>{console.error('Caught error',error,error.cause,errorInfo.componentStack);}});"
        },
        {
          "type": "p",
          "text": "TheonRecoverableErroroption is a function called with two arguments:"
        },
        {
          "type": "list",
          "items": [
            "TheerrorReact throws. Some errors may include the original cause aserror.cause.",
            "AnerrorInfoobject that contains thecomponentStackof the error."
          ]
        },
        {
          "type": "p",
          "text": "You can use theonRecoverableErrorroot option to display error dialogs for hydration mismatches:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from\"react-dom/client\";importAppfrom\"./App.js\";import{reportRecoverableError}from\"./reportError\";import\"./styles.css\";constcontainer=document.getElementById(\"root\");constroot=hydrateRoot(container,<App/>,{onRecoverableError:(error,errorInfo)=>{reportRecoverableError({error,cause:error.cause,componentStack:errorInfo.componentStack});}});"
        },
        {
          "type": "p",
          "text": "A common mistake is to pass the options forhydrateRoottoroot.render(...):"
        },
        {
          "type": "p",
          "text": "To fix, pass the root options tohydrateRoot(...), notroot.render(...):"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: root.render only takes one argument.root.render(App,{onUncaughtError});// ✅ Correct: pass options to createRoot.constroot=hydrateRoot(container,<App/>,{onUncaughtError});"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components",
      "title": "React DOM Components – React",
      "content": [
        {
          "type": "p",
          "text": "React supports all of the browser built-inHTMLandSVGcomponents."
        },
        {
          "type": "p",
          "text": "All of the built-in browser components support some props and events."
        },
        {
          "type": "list",
          "items": ["Common components (e.g.<div>)"]
        },
        {
          "type": "p",
          "text": "This includes React-specific props likerefanddangerouslySetInnerHTML."
        },
        {
          "type": "p",
          "text": "These built-in browser components accept user input:"
        },
        {
          "type": "list",
          "items": ["<input>", "<select>", "<textarea>"]
        },
        {
          "type": "p",
          "text": "They are special in React because passing thevalueprop to them makes themcontrolled."
        },
        {
          "type": "p",
          "text": "These built-in browser components let you load external resources or annotate the document with metadata:"
        },
        {
          "type": "list",
          "items": ["<link>", "<meta>", "<script>", "<style>", "<title>"]
        },
        {
          "type": "p",
          "text": "They are special in React because React can render them into the document head, suspend while resources are loading, and enact other behaviors that are described on the reference page for each specific component."
        },
        {
          "type": "p",
          "text": "React supports all built-in browser HTML components. This includes:"
        },
        {
          "type": "list",
          "items": [
            "<aside>",
            "<audio>",
            "<b>",
            "<base>",
            "<bdi>",
            "<bdo>",
            "<blockquote>",
            "<body>",
            "<br>",
            "<button>",
            "<canvas>",
            "<caption>",
            "<cite>",
            "<code>",
            "<col>",
            "<colgroup>",
            "<data>",
            "<datalist>",
            "<dd>",
            "<del>",
            "<details>",
            "<dfn>",
            "<dialog>",
            "<div>",
            "<dl>",
            "<dt>",
            "<em>",
            "<embed>",
            "<fieldset>",
            "<figcaption>",
            "<figure>",
            "<footer>",
            "<form>",
            "<h1>",
            "<head>",
            "<header>",
            "<hgroup>",
            "<hr>",
            "<html>",
            "<i>",
            "<iframe>",
            "<img>",
            "<input>",
            "<ins>",
            "<kbd>",
            "<label>",
            "<legend>",
            "<li>",
            "<link>",
            "<main>",
            "<map>",
            "<mark>",
            "<menu>",
            "<meta>",
            "<meter>",
            "<nav>",
            "<noscript>",
            "<object>",
            "<ol>",
            "<optgroup>",
            "<option>",
            "<output>",
            "<p>",
            "<picture>",
            "<pre>",
            "<progress>",
            "<q>",
            "<rp>",
            "<rt>",
            "<ruby>",
            "<s>",
            "<samp>",
            "<script>",
            "<section>",
            "<select>",
            "<slot>",
            "<small>",
            "<source>",
            "<span>",
            "<strong>",
            "<style>",
            "<sub>",
            "<summary>",
            "<sup>",
            "<table>",
            "<tbody>",
            "<td>",
            "<template>",
            "<textarea>",
            "<tfoot>",
            "<th>",
            "<thead>",
            "<time>",
            "<title>",
            "<tr>",
            "<track>",
            "<u>",
            "<ul>",
            "<var>",
            "<video>",
            "<wbr>"
          ]
        },
        {
          "type": "p",
          "text": "Similar to theDOM standard,React uses acamelCaseconvention for prop names. For example, you’ll writetabIndexinstead oftabindex. You can convert existing HTML to JSX with anonline converter."
        },
        {
          "type": "p",
          "text": "If you render a tag with a dash, like<my-element>, React will assume you want to render acustom HTML element.In React, rendering custom elements works differently from rendering built-in browser tags:"
        },
        {
          "type": "list",
          "items": [
            "All custom element props are serialized to strings and are always set using attributes.",
            "Custom elements acceptclassrather thanclassName, andforrather thanhtmlFor."
          ]
        },
        {
          "type": "p",
          "text": "If you render a built-in browser HTML element with anisattribute, it will also be treated as a custom element."
        },
        {
          "type": "p",
          "text": "A future version of React will include more comprehensive support for custom elements. You can try it by upgrading React packages to the most recent experimental version:"
        },
        {
          "type": "list",
          "items": ["react@experimental", "react-dom@experimental"]
        },
        {
          "type": "p",
          "text": "Experimental versions of React may contain bugs. Don’t use them in production."
        },
        {
          "type": "p",
          "text": "React supports all built-in browser SVG components. This includes:"
        },
        {
          "type": "list",
          "items": [
            "<a>",
            "<animate>",
            "<animateMotion>",
            "<animateTransform>",
            "<circle>",
            "<clipPath>",
            "<defs>",
            "<desc>",
            "<discard>",
            "<ellipse>",
            "<feBlend>",
            "<feColorMatrix>",
            "<feComponentTransfer>",
            "<feComposite>",
            "<feConvolveMatrix>",
            "<feDiffuseLighting>",
            "<feDisplacementMap>",
            "<feDistantLight>",
            "<feDropShadow>",
            "<feFlood>",
            "<feFuncA>",
            "<feFuncB>",
            "<feFuncG>",
            "<feFuncR>",
            "<feGaussianBlur>",
            "<feImage>",
            "<feMerge>",
            "<feMergeNode>",
            "<feMorphology>",
            "<feOffset>",
            "<fePointLight>",
            "<feSpecularLighting>",
            "<feSpotLight>",
            "<feTile>",
            "<feTurbulence>",
            "<filter>",
            "<foreignObject>",
            "<g>",
            "<hatch>",
            "<hatchpath>",
            "<image>",
            "<line>",
            "<linearGradient>",
            "<marker>",
            "<mask>",
            "<metadata>",
            "<mpath>",
            "<path>",
            "<pattern>",
            "<polygon>",
            "<polyline>",
            "<radialGradient>",
            "<rect>",
            "<script>",
            "<set>",
            "<stop>",
            "<style>",
            "<svg>",
            "<switch>",
            "<symbol>",
            "<text>",
            "<textPath>",
            "<title>",
            "<tspan>",
            "<use>",
            "<view>"
          ]
        },
        {
          "type": "p",
          "text": "Similar to theDOM standard,React uses acamelCaseconvention for prop names. For example, you’ll writetabIndexinstead oftabindex. You can convert existing SVG to JSX with anonline converter. Namespaced attributes also have to be written without the colon:"
        },
        {
          "type": "list",
          "items": [
            "xlink:actuatebecomesxlinkActuate.",
            "xlink:arcrolebecomesxlinkArcrole.",
            "xlink:hrefbecomesxlinkHref.",
            "xlink:rolebecomesxlinkRole.",
            "xlink:showbecomesxlinkShow.",
            "xlink:titlebecomesxlinkTitle.",
            "xlink:typebecomesxlinkType.",
            "xml:basebecomesxmlBase.",
            "xml:langbecomesxmlLang.",
            "xml:spacebecomesxmlSpace.",
            "xmlns:xlinkbecomesxmlnsXlink."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/common",
      "title": "Common components (e.g. <div>) – React",
      "content": [
        {
          "type": "p",
          "text": "All built-in browser components, such as<div>, support some common props and events."
        },
        {
          "type": "list",
          "items": [
            "ReferenceCommon components (e.g.<div>)refcallback functionReact event objectAnimationEventhandler functionClipboardEventhandler functionCompositionEventhandler functionDragEventhandler functionFocusEventhandler functionEventhandler functionInputEventhandler functionKeyboardEventhandler functionMouseEventhandler functionPointerEventhandler functionTouchEventhandler functionTransitionEventhandler functionUIEventhandler functionWheelEventhandler function",
            "Common components (e.g.<div>)",
            "refcallback function",
            "React event object",
            "AnimationEventhandler function",
            "ClipboardEventhandler function",
            "CompositionEventhandler function",
            "DragEventhandler function",
            "FocusEventhandler function",
            "Eventhandler function",
            "InputEventhandler function",
            "KeyboardEventhandler function",
            "MouseEventhandler function",
            "PointerEventhandler function",
            "TouchEventhandler function",
            "TransitionEventhandler function",
            "UIEventhandler function",
            "WheelEventhandler function",
            "UsageApplying CSS stylesManipulating a DOM node with a refDangerously setting the inner HTMLHandling mouse eventsHandling pointer eventsHandling focus eventsHandling keyboard events",
            "Applying CSS styles",
            "Manipulating a DOM node with a ref",
            "Dangerously setting the inner HTML",
            "Handling mouse events",
            "Handling pointer events",
            "Handling focus events",
            "Handling keyboard events"
          ]
        },
        {
          "type": "code",
          "code": "<divclassName=\"wrapper\">Some content</div>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "These special React props are supported for all built-in components:"
        },
        {
          "type": "list",
          "items": [
            "children: A React node (an element, a string, a number,a portal,an empty node likenull,undefinedand booleans, or an array of other React nodes). Specifies the content inside the component. When you use JSX, you will usually specify thechildrenprop implicitly by nesting tags like<div><span /></div>.",
            "dangerouslySetInnerHTML: An object of the form{ __html: '<p>some html</p>' }with a raw HTML string inside. Overrides theinnerHTMLproperty of the DOM node and displays the passed HTML inside. This should be used with extreme caution! If the HTML inside isn’t trusted (for example, if it’s based on user data), you risk introducing anXSSvulnerability.Read more about usingdangerouslySetInnerHTML.",
            "ref: A ref object fromuseReforcreateRef, or arefcallback function,or a string forlegacy refs.Your ref will be filled with the DOM element for this node.Read more about manipulating the DOM with refs.",
            "suppressContentEditableWarning: A boolean. Iftrue, suppresses the warning that React shows for elements that both havechildrenandcontentEditable={true}(which normally do not work together). Use this if you’re building a text input library that manages thecontentEditablecontent manually.",
            "suppressHydrationWarning: A boolean. If you useserver rendering,normally there is a warning when the server and the client render different content. In some rare cases (like timestamps), it is very hard or impossible to guarantee an exact match. If you setsuppressHydrationWarningtotrue, React will not warn you about mismatches in the attributes and the content of that element. It only works one level deep, and is intended to be used as an escape hatch. Don’t overuse it.Read about suppressing hydration errors.",
            "style: An object with CSS styles, for example{ fontWeight: 'bold', margin: 20 }. Similarly to the DOMstyleproperty, the CSS property names need to be written ascamelCase, for examplefontWeightinstead offont-weight. You can pass strings or numbers as values. If you pass a number, likewidth: 100, React will automatically appendpx(“pixels”) to the value unless it’s aunitless property.We recommend usingstyleonly for dynamic styles where you don’t know the style values ahead of time. In other cases, applying plain CSS classes withclassNameis more efficient.Read more aboutclassNameandstyle."
          ]
        },
        {
          "type": "p",
          "text": "These standard DOM props are also supported for all built-in components:"
        },
        {
          "type": "list",
          "items": [
            "accessKey: A string. Specifies a keyboard shortcut for the element.Not generally recommended.",
            "aria-*: ARIA attributes let you specify the accessibility tree information for this element. SeeARIA attributesfor a complete reference. In React, all ARIA attribute names are exactly the same as in HTML.",
            "autoCapitalize: A string. Specifies whether and how the user input should be capitalized.",
            "className: A string. Specifies the element’s CSS class name.Read more about applying CSS styles.",
            "contentEditable: A boolean. Iftrue, the browser lets the user edit the rendered element directly. This is used to implement rich text input libraries likeLexical.React warns if you try to pass React children to an element withcontentEditable={true}because React will not be able to update its content after user edits.",
            "data-*: Data attributes let you attach some string data to the element, for exampledata-fruit=\"banana\". In React, they are not commonly used because you would usually read data from props or state instead.",
            "dir: Either'ltr'or'rtl'. Specifies the text direction of the element.",
            "draggable: A boolean. Specifies whether the element is draggable. Part ofHTML Drag and Drop API.",
            "enterKeyHint: A string. Specifies which action to present for the enter key on virtual keyboards.",
            "htmlFor: A string. For<label>and<output>, lets youassociate the label with some control.Same asforHTML attribute.React uses the standard DOM property names (htmlFor) instead of HTML attribute names.",
            "hidden: A boolean or a string. Specifies whether the element should be hidden.",
            "id: A string. Specifies a unique identifier for this element, which can be used to find it later or connect it with other elements. Generate it withuseIdto avoid clashes between multiple instances of the same component.",
            "is: A string. If specified, the component will behave like acustom element.",
            "inputMode: A string. Specifies what kind of keyboard to display (for example, text, number or telephone).",
            "itemProp: A string. Specifies which property the element represents for structured data crawlers.",
            "lang: A string. Specifies the language of the element.",
            "onAnimationEnd: AnAnimationEventhandlerfunction. Fires when a CSS animation completes.",
            "onAnimationEndCapture: A version ofonAnimationEndthat fires in thecapture phase.",
            "onAnimationIteration: AnAnimationEventhandlerfunction. Fires when an iteration of a CSS animation ends, and another one begins.",
            "onAnimationIterationCapture: A version ofonAnimationIterationthat fires in thecapture phase.",
            "onAnimationStart: AnAnimationEventhandlerfunction. Fires when a CSS animation starts.",
            "onAnimationStartCapture:onAnimationStart, but fires in thecapture phase.",
            "onAuxClick: AMouseEventhandlerfunction. Fires when a non-primary pointer button was clicked.",
            "onAuxClickCapture: A version ofonAuxClickthat fires in thecapture phase.",
            "onBeforeInput: AnInputEventhandlerfunction. Fires before the value of an editable element is modified. React doesnotyet use the nativebeforeinputevent, and instead attempts to polyfill it using other events.",
            "onBeforeInputCapture: A version ofonBeforeInputthat fires in thecapture phase.",
            "onBlur: AFocusEventhandlerfunction. Fires when an element lost focus. Unlike the built-in browserblurevent, in React theonBlurevent bubbles.",
            "onBlurCapture: A version ofonBlurthat fires in thecapture phase.",
            "onClick: AMouseEventhandlerfunction. Fires when the primary button was clicked on the pointing device.",
            "onClickCapture: A version ofonClickthat fires in thecapture phase.",
            "onCompositionStart: ACompositionEventhandlerfunction. Fires when aninput method editorstarts a new composition session.",
            "onCompositionStartCapture: A version ofonCompositionStartthat fires in thecapture phase.",
            "onCompositionEnd: ACompositionEventhandlerfunction. Fires when aninput method editorcompletes or cancels a composition session.",
            "onCompositionEndCapture: A version ofonCompositionEndthat fires in thecapture phase.",
            "onCompositionUpdate: ACompositionEventhandlerfunction. Fires when aninput method editorreceives a new character.",
            "onCompositionUpdateCapture: A version ofonCompositionUpdatethat fires in thecapture phase.",
            "onContextMenu: AMouseEventhandlerfunction. Fires when the user tries to open a context menu.",
            "onContextMenuCapture: A version ofonContextMenuthat fires in thecapture phase.",
            "onCopy: AClipboardEventhandlerfunction. Fires when the user tries to copy something into the clipboard.",
            "onCopyCapture: A version ofonCopythat fires in thecapture phase.",
            "onCut: AClipboardEventhandlerfunction. Fires when the user tries to cut something into the clipboard.",
            "onCutCapture: A version ofonCutthat fires in thecapture phase.",
            "onDoubleClick: AMouseEventhandlerfunction. Fires when the user clicks twice. Corresponds to the browserdblclickevent.",
            "onDoubleClickCapture: A version ofonDoubleClickthat fires in thecapture phase.",
            "onDrag: ADragEventhandlerfunction. Fires while the user is dragging something.",
            "onDragCapture: A version ofonDragthat fires in thecapture phase.",
            "onDragEnd: ADragEventhandlerfunction. Fires when the user stops dragging something.",
            "onDragEndCapture: A version ofonDragEndthat fires in thecapture phase.",
            "onDragEnter: ADragEventhandlerfunction. Fires when the dragged content enters a valid drop target.",
            "onDragEnterCapture: A version ofonDragEnterthat fires in thecapture phase.",
            "onDragOver: ADragEventhandlerfunction. Fires on a valid drop target while the dragged content is dragged over it. You must calle.preventDefault()here to allow dropping.",
            "onDragOverCapture: A version ofonDragOverthat fires in thecapture phase.",
            "onDragStart: ADragEventhandlerfunction. Fires when the user starts dragging an element.",
            "onDragStartCapture: A version ofonDragStartthat fires in thecapture phase.",
            "onDrop: ADragEventhandlerfunction. Fires when something is dropped on a valid drop target.",
            "onDropCapture: A version ofonDropthat fires in thecapture phase.",
            "onFocus: AFocusEventhandlerfunction. Fires when an element receives focus. Unlike the built-in browserfocusevent, in React theonFocusevent bubbles.",
            "onFocusCapture: A version ofonFocusthat fires in thecapture phase.",
            "onGotPointerCapture: APointerEventhandlerfunction. Fires when an element programmatically captures a pointer.",
            "onGotPointerCaptureCapture: A version ofonGotPointerCapturethat fires in thecapture phase.",
            "onKeyDown: AKeyboardEventhandlerfunction. Fires when a key is pressed.",
            "onKeyDownCapture: A version ofonKeyDownthat fires in thecapture phase.",
            "onKeyPress: AKeyboardEventhandlerfunction. Deprecated. UseonKeyDownoronBeforeInputinstead.",
            "onKeyPressCapture: A version ofonKeyPressthat fires in thecapture phase.",
            "onKeyUp: AKeyboardEventhandlerfunction. Fires when a key is released.",
            "onKeyUpCapture: A version ofonKeyUpthat fires in thecapture phase.",
            "onLostPointerCapture: APointerEventhandlerfunction. Fires when an element stops capturing a pointer.",
            "onLostPointerCaptureCapture: A version ofonLostPointerCapturethat fires in thecapture phase.",
            "onMouseDown: AMouseEventhandlerfunction. Fires when the pointer is pressed down.",
            "onMouseDownCapture: A version ofonMouseDownthat fires in thecapture phase.",
            "onMouseEnter: AMouseEventhandlerfunction. Fires when the pointer moves inside an element. Does not have a capture phase. Instead,onMouseLeaveandonMouseEnterpropagate from the element being left to the one being entered.",
            "onMouseLeave: AMouseEventhandlerfunction. Fires when the pointer moves outside an element. Does not have a capture phase. Instead,onMouseLeaveandonMouseEnterpropagate from the element being left to the one being entered.",
            "onMouseMove: AMouseEventhandlerfunction. Fires when the pointer changes coordinates.",
            "onMouseMoveCapture: A version ofonMouseMovethat fires in thecapture phase.",
            "onMouseOut: AMouseEventhandlerfunction. Fires when the pointer moves outside an element, or if it moves into a child element.",
            "onMouseOutCapture: A version ofonMouseOutthat fires in thecapture phase.",
            "onMouseUp: AMouseEventhandlerfunction. Fires when the pointer is released.",
            "onMouseUpCapture: A version ofonMouseUpthat fires in thecapture phase.",
            "onPointerCancel: APointerEventhandlerfunction. Fires when the browser cancels a pointer interaction.",
            "onPointerCancelCapture: A version ofonPointerCancelthat fires in thecapture phase.",
            "onPointerDown: APointerEventhandlerfunction. Fires when a pointer becomes active.",
            "onPointerDownCapture: A version ofonPointerDownthat fires in thecapture phase.",
            "onPointerEnter: APointerEventhandlerfunction. Fires when a pointer moves inside an element. Does not have a capture phase. Instead,onPointerLeaveandonPointerEnterpropagate from the element being left to the one being entered.",
            "onPointerLeave: APointerEventhandlerfunction. Fires when a pointer moves outside an element. Does not have a capture phase. Instead,onPointerLeaveandonPointerEnterpropagate from the element being left to the one being entered.",
            "onPointerMove: APointerEventhandlerfunction. Fires when a pointer changes coordinates.",
            "onPointerMoveCapture: A version ofonPointerMovethat fires in thecapture phase.",
            "onPointerOut: APointerEventhandlerfunction. Fires when a pointer moves outside an element, if the pointer interaction is cancelled, anda few other reasons.",
            "onPointerOutCapture: A version ofonPointerOutthat fires in thecapture phase.",
            "onPointerUp: APointerEventhandlerfunction. Fires when a pointer is no longer active.",
            "onPointerUpCapture: A version ofonPointerUpthat fires in thecapture phase.",
            "onPaste: AClipboardEventhandlerfunction. Fires when the user tries to paste something from the clipboard.",
            "onPasteCapture: A version ofonPastethat fires in thecapture phase.",
            "onScroll: AnEventhandlerfunction. Fires when an element has been scrolled. This event does not bubble.",
            "onScrollCapture: A version ofonScrollthat fires in thecapture phase.",
            "onSelect: AnEventhandlerfunction. Fires after the selection inside an editable element like an input changes. React extends theonSelectevent to work forcontentEditable={true}elements as well. In addition, React extends it to fire for empty selection and on edits (which may affect the selection).",
            "onSelectCapture: A version ofonSelectthat fires in thecapture phase.",
            "onTouchCancel: ATouchEventhandlerfunction. Fires when the browser cancels a touch interaction.",
            "onTouchCancelCapture: A version ofonTouchCancelthat fires in thecapture phase.",
            "onTouchEnd: ATouchEventhandlerfunction. Fires when one or more touch points are removed.",
            "onTouchEndCapture: A version ofonTouchEndthat fires in thecapture phase.",
            "onTouchMove: ATouchEventhandlerfunction. Fires one or more touch points are moved.",
            "onTouchMoveCapture: A version ofonTouchMovethat fires in thecapture phase.",
            "onTouchStart: ATouchEventhandlerfunction. Fires when one or more touch points are placed.",
            "onTouchStartCapture: A version ofonTouchStartthat fires in thecapture phase.",
            "onTransitionEnd: ATransitionEventhandlerfunction. Fires when a CSS transition completes.",
            "onTransitionEndCapture: A version ofonTransitionEndthat fires in thecapture phase.",
            "onWheel: AWheelEventhandlerfunction. Fires when the user rotates a wheel button.",
            "onWheelCapture: A version ofonWheelthat fires in thecapture phase.",
            "role: A string. Specifies the element role explicitly for assistive technologies.",
            "slot: A string. Specifies the slot name when using shadow DOM. In React, an equivalent pattern is typically achieved by passing JSX as props, for example<Layout left={<Sidebar />} right={<Content />} />.",
            "spellCheck: A boolean or null. If explicitly set totrueorfalse, enables or disables spellchecking.",
            "tabIndex: A number. Overrides the default Tab button behavior.Avoid using values other than-1and0.",
            "title: A string. Specifies the tooltip text for the element.",
            "translate: Either'yes'or'no'. Passing'no'excludes the element content from being translated."
          ]
        },
        {
          "type": "p",
          "text": "You can also pass custom attributes as props, for examplemycustomprop=\"someValue\". This can be useful when integrating with third-party libraries. The custom attribute name must be lowercase and must not start withon. The value will be converted to a string. If you passnullorundefined, the custom attribute will be removed. These events fire only for the<form>elements:"
        },
        {
          "type": "list",
          "items": [
            "onReset: AnEventhandlerfunction. Fires when a form gets reset.",
            "onResetCapture: A version ofonResetthat fires in thecapture phase.",
            "onSubmit: AnEventhandlerfunction. Fires when a form gets submitted.",
            "onSubmitCapture: A version ofonSubmitthat fires in thecapture phase."
          ]
        },
        {
          "type": "p",
          "text": "These events fire only for the<dialog>elements. Unlike browser events, they bubble in React:"
        },
        {
          "type": "list",
          "items": [
            "onCancel: AnEventhandlerfunction. Fires when the user tries to dismiss the dialog.",
            "onCancelCapture: A version ofonCancelthat fires in thecapture phase.",
            "onClose: AnEventhandlerfunction. Fires when a dialog has been closed.",
            "onCloseCapture: A version ofonClosethat fires in thecapture phase."
          ]
        },
        {
          "type": "p",
          "text": "These events fire only for the<details>elements. Unlike browser events, they bubble in React:"
        },
        {
          "type": "list",
          "items": [
            "onToggle: AnEventhandlerfunction. Fires when the user toggles the details.",
            "onToggleCapture: A version ofonTogglethat fires in thecapture phase."
          ]
        },
        {
          "type": "p",
          "text": "These events fire for<img>,<iframe>,<object>,<embed>,<link>, andSVG<image>elements. Unlike browser events, they bubble in React:"
        },
        {
          "type": "list",
          "items": [
            "onLoad: AnEventhandlerfunction. Fires when the resource has loaded.",
            "onLoadCapture: A version ofonLoadthat fires in thecapture phase.",
            "onError: AnEventhandlerfunction. Fires when the resource could not be loaded.",
            "onErrorCapture: A version ofonErrorthat fires in thecapture phase."
          ]
        },
        {
          "type": "p",
          "text": "These events fire for resources like<audio>and<video>. Unlike browser events, they bubble in React:"
        },
        {
          "type": "list",
          "items": [
            "onAbort: AnEventhandlerfunction. Fires when the resource has not fully loaded, but not due to an error.",
            "onAbortCapture: A version ofonAbortthat fires in thecapture phase.",
            "onCanPlay: AnEventhandlerfunction. Fires when there’s enough data to start playing, but not enough to play to the end without buffering.",
            "onCanPlayCapture: A version ofonCanPlaythat fires in thecapture phase.",
            "onCanPlayThrough: AnEventhandlerfunction. Fires when there’s enough data that it’s likely possible to start playing without buffering until the end.",
            "onCanPlayThroughCapture: A version ofonCanPlayThroughthat fires in thecapture phase.",
            "onDurationChange: AnEventhandlerfunction. Fires when the media duration has updated.",
            "onDurationChangeCapture: A version ofonDurationChangethat fires in thecapture phase.",
            "onEmptied: AnEventhandlerfunction. Fires when the media has become empty.",
            "onEmptiedCapture: A version ofonEmptiedthat fires in thecapture phase.",
            "onEncrypted: AnEventhandlerfunction. Fires when the browser encounters encrypted media.",
            "onEncryptedCapture: A version ofonEncryptedthat fires in thecapture phase.",
            "onEnded: AnEventhandlerfunction. Fires when the playback stops because there’s nothing left to play.",
            "onEndedCapture: A version ofonEndedthat fires in thecapture phase.",
            "onError: AnEventhandlerfunction. Fires when the resource could not be loaded.",
            "onErrorCapture: A version ofonErrorthat fires in thecapture phase.",
            "onLoadedData: AnEventhandlerfunction. Fires when the current playback frame has loaded.",
            "onLoadedDataCapture: A version ofonLoadedDatathat fires in thecapture phase.",
            "onLoadedMetadata: AnEventhandlerfunction. Fires when metadata has loaded.",
            "onLoadedMetadataCapture: A version ofonLoadedMetadatathat fires in thecapture phase.",
            "onLoadStart: AnEventhandlerfunction. Fires when the browser started loading the resource.",
            "onLoadStartCapture: A version ofonLoadStartthat fires in thecapture phase.",
            "onPause: AnEventhandlerfunction. Fires when the media was paused.",
            "onPauseCapture: A version ofonPausethat fires in thecapture phase.",
            "onPlay: AnEventhandlerfunction. Fires when the media is no longer paused.",
            "onPlayCapture: A version ofonPlaythat fires in thecapture phase.",
            "onPlaying: AnEventhandlerfunction. Fires when the media starts or restarts playing.",
            "onPlayingCapture: A version ofonPlayingthat fires in thecapture phase.",
            "onProgress: AnEventhandlerfunction. Fires periodically while the resource is loading.",
            "onProgressCapture: A version ofonProgressthat fires in thecapture phase.",
            "onRateChange: AnEventhandlerfunction. Fires when playback rate changes.",
            "onRateChangeCapture: A version ofonRateChangethat fires in thecapture phase.",
            "onResize: AnEventhandlerfunction. Fires when video changes size.",
            "onResizeCapture: A version ofonResizethat fires in thecapture phase.",
            "onSeeked: AnEventhandlerfunction. Fires when a seek operation completes.",
            "onSeekedCapture: A version ofonSeekedthat fires in thecapture phase.",
            "onSeeking: AnEventhandlerfunction. Fires when a seek operation starts.",
            "onSeekingCapture: A version ofonSeekingthat fires in thecapture phase.",
            "onStalled: AnEventhandlerfunction. Fires when the browser is waiting for data but it keeps not loading.",
            "onStalledCapture: A version ofonStalledthat fires in thecapture phase.",
            "onSuspend: AnEventhandlerfunction. Fires when loading the resource was suspended.",
            "onSuspendCapture: A version ofonSuspendthat fires in thecapture phase.",
            "onTimeUpdate: AnEventhandlerfunction. Fires when the current playback time updates.",
            "onTimeUpdateCapture: A version ofonTimeUpdatethat fires in thecapture phase.",
            "onVolumeChange: AnEventhandlerfunction. Fires when the volume has changed.",
            "onVolumeChangeCapture: A version ofonVolumeChangethat fires in thecapture phase.",
            "onWaiting: AnEventhandlerfunction. Fires when the playback stopped due to temporary lack of data.",
            "onWaitingCapture: A version ofonWaitingthat fires in thecapture phase."
          ]
        },
        {
          "type": "list",
          "items": [
            "You cannot pass bothchildrenanddangerouslySetInnerHTMLat the same time.",
            "Some events (likeonAbortandonLoad) don’t bubble in the browser, but bubble in React."
          ]
        },
        {
          "type": "p",
          "text": "Instead of a ref object (like the one returned byuseRef), you may pass a function to therefattribute."
        },
        {
          "type": "code",
          "code": "<divref={(node)=>{console.log('Attached',node);return()=>{console.log('Clean up',node)}}}>"
        },
        {
          "type": "p",
          "text": "See an example of using therefcallback. When the<div>DOM node is added to the screen, React will call yourrefcallback with the DOMnodeas the argument. When that<div>DOM node is removed, React will call your the cleanup function returned from the callback. React will also call yourrefcallback whenever you pass adifferentrefcallback. In the above example,(node) => { ... }is a different function on every render. When your component re-renders, thepreviousfunction will be called withnullas the argument, and thenextfunction will be called with the DOM node."
        },
        {
          "type": "list",
          "items": [
            "node: A DOM node. React will pass you the DOM node when the ref gets attached. Unless you pass the same function reference for therefcallback on every render, the callback will get temporarily cleanup and re-create during every re-render of the component."
          ]
        },
        {
          "type": "p",
          "text": "To support backwards compatibility, if a cleanup function is not returned from therefcallback,nodewill be called withnullwhen therefis detached. This behavior will be removed in a future version."
        },
        {
          "type": "list",
          "items": [
            "optionalcleanup function: When therefis detached, React will call the cleanup function. If a function is not returned by therefcallback, React will call the callback again withnullas the argument when therefgets detached. This behavior will be removed in a future version."
          ]
        },
        {
          "type": "list",
          "items": [
            "When Strict Mode is on, React willrun one extra development-only setup+cleanup cyclebefore the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem, implement the cleanup function.",
            "When you pass adifferentrefcallback, React will call thepreviouscallback’s cleanup function if provided. If no cleanup function is defined, therefcallback will be called withnullas the argument. Thenextfunction will be called with the DOM node."
          ]
        },
        {
          "type": "p",
          "text": "Your event handlers will receive aReact event object.It is also sometimes known as a “synthetic event”."
        },
        {
          "type": "code",
          "code": "<buttononClick={e=>{console.log(e);// React event object}}/>"
        },
        {
          "type": "p",
          "text": "It conforms to the same standard as the underlying DOM events, but fixes some browser inconsistencies. Some React events do not map directly to the browser’s native events. For example inonMouseLeave,e.nativeEventwill point to amouseoutevent. The specific mapping is not part of the public API and may change in the future. If you need the underlying browser event for some reason, read it frome.nativeEvent."
        },
        {
          "type": "p",
          "text": "React event objects implement some of the standardEventproperties:"
        },
        {
          "type": "list",
          "items": [
            "bubbles: A boolean. Returns whether the event bubbles through the DOM.",
            "cancelable: A boolean. Returns whether the event can be canceled.",
            "currentTarget: A DOM node. Returns the node to which the current handler is attached in the React tree.",
            "defaultPrevented: A boolean. Returns whetherpreventDefaultwas called.",
            "eventPhase: A number. Returns which phase the event is currently in.",
            "isTrusted: A boolean. Returns whether the event was initiated by user.",
            "target: A DOM node. Returns the node on which the event has occurred (which could be a distant child).",
            "timeStamp: A number. Returns the time when the event occurred."
          ]
        },
        {
          "type": "p",
          "text": "Additionally, React event objects provide these properties:"
        },
        {
          "type": "list",
          "items": [
            "nativeEvent: A DOMEvent. The original browser event object."
          ]
        },
        {
          "type": "p",
          "text": "React event objects implement some of the standardEventmethods:"
        },
        {
          "type": "list",
          "items": [
            "preventDefault(): Prevents the default browser action for the event.",
            "stopPropagation(): Stops the event propagation through the React tree."
          ]
        },
        {
          "type": "p",
          "text": "Additionally, React event objects provide these methods:"
        },
        {
          "type": "list",
          "items": [
            "isDefaultPrevented(): Returns a boolean value indicating whetherpreventDefaultwas called.",
            "isPropagationStopped(): Returns a boolean value indicating whetherstopPropagationwas called.",
            "persist(): Not used with React DOM. With React Native, call this to read event’s properties after the event.",
            "isPersistent(): Not used with React DOM. With React Native, returns whetherpersisthas been called."
          ]
        },
        {
          "type": "list",
          "items": [
            "The values ofcurrentTarget,eventPhase,target, andtypereflect the values your React code expects. Under the hood, React attaches event handlers at the root, but this is not reflected in React event objects. For example,e.currentTargetmay not be the same as the underlyinge.nativeEvent.currentTarget. For polyfilled events,e.type(React event type) may differ frome.nativeEvent.type(underlying type)."
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for theCSS animationevents."
        },
        {
          "type": "code",
          "code": "<divonAnimationStart={e=>console.log('onAnimationStart')}onAnimationIteration={e=>console.log('onAnimationIteration')}onAnimationEnd={e=>console.log('onAnimationEnd')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraAnimationEventproperties:animationNameelapsedTimepseudoElement",
            "animationName",
            "elapsedTime",
            "pseudoElement"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for theClipboard APIevents."
        },
        {
          "type": "code",
          "code": "<inputonCopy={e=>console.log('onCopy')}onCut={e=>console.log('onCut')}onPaste={e=>console.log('onPaste')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraClipboardEventproperties:clipboardData",
            "clipboardData"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for theinput method editor (IME)events."
        },
        {
          "type": "code",
          "code": "<inputonCompositionStart={e=>console.log('onCompositionStart')}onCompositionUpdate={e=>console.log('onCompositionUpdate')}onCompositionEnd={e=>console.log('onCompositionEnd')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraCompositionEventproperties:data",
            "data"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for theHTML Drag and Drop APIevents."
        },
        {
          "type": "code",
          "code": "<><divdraggable={true}onDragStart={e=>console.log('onDragStart')}onDragEnd={e=>console.log('onDragEnd')}>Drag source</div><divonDragEnter={e=>console.log('onDragEnter')}onDragLeave={e=>console.log('onDragLeave')}onDragOver={e=>{e.preventDefault();console.log('onDragOver');}}onDrop={e=>console.log('onDrop')}>Drop target</div></>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraDragEventproperties:dataTransferIt also includes the inheritedMouseEventproperties:altKeybuttonbuttonsctrlKeyclientXclientYgetModifierState(key)metaKeymovementXmovementYpageXpageYrelatedTargetscreenXscreenYshiftKeyIt also includes the inheritedUIEventproperties:detailview",
            "dataTransfer",
            "altKey",
            "button",
            "buttons",
            "ctrlKey",
            "clientX",
            "clientY",
            "getModifierState(key)",
            "metaKey",
            "movementX",
            "movementY",
            "pageX",
            "pageY",
            "relatedTarget",
            "screenX",
            "screenY",
            "shiftKey",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for the focus events."
        },
        {
          "type": "code",
          "code": "<inputonFocus={e=>console.log('onFocus')}onBlur={e=>console.log('onBlur')}/>"
        },
        {
          "type": "p",
          "text": "See an example."
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraFocusEventproperties:relatedTargetIt also includes the inheritedUIEventproperties:detailview",
            "relatedTarget",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for generic events."
        },
        {
          "type": "list",
          "items": ["e: AReact event objectwith no additional properties."]
        },
        {
          "type": "p",
          "text": "An event handler type for theonBeforeInputevent."
        },
        {
          "type": "code",
          "code": "<inputonBeforeInput={e=>console.log('onBeforeInput')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraInputEventproperties:data",
            "data"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for keyboard events."
        },
        {
          "type": "code",
          "code": "<inputonKeyDown={e=>console.log('onKeyDown')}onKeyUp={e=>console.log('onKeyUp')}/>"
        },
        {
          "type": "p",
          "text": "See an example."
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraKeyboardEventproperties:altKeycharCodecodectrlKeygetModifierState(key)keykeyCodelocalemetaKeylocationrepeatshiftKeywhichIt also includes the inheritedUIEventproperties:detailview",
            "altKey",
            "charCode",
            "code",
            "ctrlKey",
            "getModifierState(key)",
            "key",
            "keyCode",
            "locale",
            "metaKey",
            "location",
            "repeat",
            "shiftKey",
            "which",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for mouse events."
        },
        {
          "type": "code",
          "code": "<divonClick={e=>console.log('onClick')}onMouseEnter={e=>console.log('onMouseEnter')}onMouseOver={e=>console.log('onMouseOver')}onMouseDown={e=>console.log('onMouseDown')}onMouseUp={e=>console.log('onMouseUp')}onMouseLeave={e=>console.log('onMouseLeave')}/>"
        },
        {
          "type": "p",
          "text": "See an example."
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraMouseEventproperties:altKeybuttonbuttonsctrlKeyclientXclientYgetModifierState(key)metaKeymovementXmovementYpageXpageYrelatedTargetscreenXscreenYshiftKeyIt also includes the inheritedUIEventproperties:detailview",
            "altKey",
            "button",
            "buttons",
            "ctrlKey",
            "clientX",
            "clientY",
            "getModifierState(key)",
            "metaKey",
            "movementX",
            "movementY",
            "pageX",
            "pageY",
            "relatedTarget",
            "screenX",
            "screenY",
            "shiftKey",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type forpointer events."
        },
        {
          "type": "code",
          "code": "<divonPointerEnter={e=>console.log('onPointerEnter')}onPointerMove={e=>console.log('onPointerMove')}onPointerDown={e=>console.log('onPointerDown')}onPointerUp={e=>console.log('onPointerUp')}onPointerLeave={e=>console.log('onPointerLeave')}/>"
        },
        {
          "type": "p",
          "text": "See an example."
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraPointerEventproperties:heightisPrimarypointerIdpointerTypepressuretangentialPressuretiltXtiltYtwistwidthIt also includes the inheritedMouseEventproperties:altKeybuttonbuttonsctrlKeyclientXclientYgetModifierState(key)metaKeymovementXmovementYpageXpageYrelatedTargetscreenXscreenYshiftKeyIt also includes the inheritedUIEventproperties:detailview",
            "height",
            "isPrimary",
            "pointerId",
            "pointerType",
            "pressure",
            "tangentialPressure",
            "tiltX",
            "tiltY",
            "twist",
            "width",
            "altKey",
            "button",
            "buttons",
            "ctrlKey",
            "clientX",
            "clientY",
            "getModifierState(key)",
            "metaKey",
            "movementX",
            "movementY",
            "pageX",
            "pageY",
            "relatedTarget",
            "screenX",
            "screenY",
            "shiftKey",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type fortouch events."
        },
        {
          "type": "code",
          "code": "<divonTouchStart={e=>console.log('onTouchStart')}onTouchMove={e=>console.log('onTouchMove')}onTouchEnd={e=>console.log('onTouchEnd')}onTouchCancel={e=>console.log('onTouchCancel')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraTouchEventproperties:altKeyctrlKeychangedTouchesgetModifierState(key)metaKeyshiftKeytouchestargetTouchesIt also includes the inheritedUIEventproperties:detailview",
            "altKey",
            "ctrlKey",
            "changedTouches",
            "getModifierState(key)",
            "metaKey",
            "shiftKey",
            "touches",
            "targetTouches",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for the CSS transition events."
        },
        {
          "type": "code",
          "code": "<divonTransitionEnd={e=>console.log('onTransitionEnd')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraTransitionEventproperties:elapsedTimepropertyNamepseudoElement",
            "elapsedTime",
            "propertyName",
            "pseudoElement"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for generic UI events."
        },
        {
          "type": "code",
          "code": "<divonScroll={e=>console.log('onScroll')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraUIEventproperties:detailview",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "An event handler type for theonWheelevent."
        },
        {
          "type": "code",
          "code": "<divonWheel={e=>console.log('onWheel')}/>"
        },
        {
          "type": "list",
          "items": [
            "e: AReact event objectwith these extraWheelEventproperties:deltaModedeltaXdeltaYdeltaZIt also includes the inheritedMouseEventproperties:altKeybuttonbuttonsctrlKeyclientXclientYgetModifierState(key)metaKeymovementXmovementYpageXpageYrelatedTargetscreenXscreenYshiftKeyIt also includes the inheritedUIEventproperties:detailview",
            "deltaMode",
            "deltaX",
            "deltaY",
            "deltaZ",
            "altKey",
            "button",
            "buttons",
            "ctrlKey",
            "clientX",
            "clientY",
            "getModifierState(key)",
            "metaKey",
            "movementX",
            "movementY",
            "pageX",
            "pageY",
            "relatedTarget",
            "screenX",
            "screenY",
            "shiftKey",
            "detail",
            "view"
          ]
        },
        {
          "type": "p",
          "text": "In React, you specify a CSS class withclassName.It works like theclassattribute in HTML:"
        },
        {
          "type": "code",
          "code": "<imgclassName=\"avatar\"/>"
        },
        {
          "type": "p",
          "text": "Then you write the CSS rules for it in a separate CSS file:"
        },
        {
          "type": "code",
          "code": "/* In your CSS */.avatar{border-radius:50%;}"
        },
        {
          "type": "p",
          "text": "React does not prescribe how you add CSS files. In the simplest case, you’ll add a<link>tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project. Sometimes, the style values depend on data. Use thestyleattribute to pass some styles dynamically:"
        },
        {
          "type": "code",
          "code": "<imgclassName=\"avatar\"style={{width:user.imageSize,height:user.imageSize}}/>"
        },
        {
          "type": "p",
          "text": "In the above example,style={{}}is not a special syntax, but a regular{}object inside thestyle={ }JSX curly braces.We recommend only using thestyleattribute when your styles depend on JavaScript variables."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionAvatar({user}){return(<imgsrc={user.imageUrl}alt={'Photo of '+user.name}className=\"avatar\"style={{width:user.imageSize,height:user.imageSize}}/>);}"
        },
        {
          "type": "p",
          "text": "To apply CSS classes conditionally, you need to produce theclassNamestring yourself using JavaScript. For example,className={'row ' + (isSelected ? 'selected': '')}will produce eitherclassName=\"row\"orclassName=\"row selected\"depending on whetherisSelectedistrue. To make this more readable, you can use a tiny helper library likeclassnames:"
        },
        {
          "type": "code",
          "code": "importcnfrom'classnames';functionRow({isSelected}){return(<divclassName={cn('row',isSelected&&'selected')}>...</div>);}"
        },
        {
          "type": "p",
          "text": "It is especially convenient if you have multiple conditional classes:"
        },
        {
          "type": "code",
          "code": "importcnfrom'classnames';functionRow({isSelected,size}){return(<divclassName={cn('row',{selected:isSelected,large:size==='large',small:size==='small',})}>...</div>);}"
        },
        {
          "type": "p",
          "text": "Sometimes, you’ll need to get the browser DOM node associated with a tag in JSX. For example, if you want to focus an<input>when a button is clicked, you need to callfocus()on the browser<input>DOM node. To obtain the browser DOM node for a tag,declare a refand pass it as therefattribute to that tag:"
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);// ...return(<inputref={inputRef}/>// ..."
        },
        {
          "type": "p",
          "text": "React will put the DOM node intoinputRef.currentafter it’s been rendered to the screen."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}"
        },
        {
          "type": "p",
          "text": "Read more aboutmanipulating DOM with refsandcheck out more examples. For more advanced use cases, therefattribute also accepts acallback function."
        },
        {
          "type": "p",
          "text": "You can pass a raw HTML string to an element like so:"
        },
        {
          "type": "code",
          "code": "constmarkup={__html:'<p>some raw html</p>'};return<divdangerouslySetInnerHTML={markup}/>;"
        },
        {
          "type": "p",
          "text": "This is dangerous. As with the underlying DOMinnerHTMLproperty, you must exercise extreme caution! Unless the markup is coming from a completely trusted source, it is trivial to introduce anXSSvulnerability this way. For example, if you use a Markdown library that converts Markdown to HTML, you trust that its parser doesn’t contain bugs, and the user only sees their own input, you can display the resulting HTML like this:"
        },
        {
          "type": "code",
          "code": "import{Remarkable}from'remarkable';constmd=newRemarkable();functionrenderMarkdownToHTML(markdown){// This is ONLY safe because the output HTML// is shown to the same user, and because you// trust this Markdown parser to not have bugs.constrenderedHTML=md.render(markdown);return{__html:renderedHTML};}exportdefaultfunctionMarkdownPreview({markdown}){constmarkup=renderMarkdownToHTML(markdown);return<divdangerouslySetInnerHTML={markup}/>;}"
        },
        {
          "type": "p",
          "text": "The{__html}object should be created as close to where the HTML is generated as possible, like the above example does in therenderMarkdownToHTMLfunction. This ensures that all raw HTML being used in your code is explicitly marked as such, and that only variables that you expect to contain HTML are passed todangerouslySetInnerHTML. It is not recommended to create the object inline like<div dangerouslySetInnerHTML={{__html: markup}} />. To see why rendering arbitrary HTML is dangerous, replace the code above with this:"
        },
        {
          "type": "code",
          "code": "constpost={// Imagine this content is stored in the database.content:`<img src=\"\" onerror='alert(\"you were hacked\")'>`};exportdefaultfunctionMarkdownPreview(){// 🔴 SECURITY HOLE: passing untrusted input to dangerouslySetInnerHTMLconstmarkup={__html:post.content};return<divdangerouslySetInnerHTML={markup}/>;}"
        },
        {
          "type": "p",
          "text": "The code embedded in the HTML will run. A hacker could use this security hole to steal user information or to perform actions on their behalf.Only usedangerouslySetInnerHTMLwith trusted and sanitized data."
        },
        {
          "type": "p",
          "text": "This example shows some commonmouse eventsand when they fire."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMouseExample(){return(<divonMouseEnter={e=>console.log('onMouseEnter (parent)')}onMouseLeave={e=>console.log('onMouseLeave (parent)')}><buttononClick={e=>console.log('onClick (first button)')}onMouseDown={e=>console.log('onMouseDown (first button)')}onMouseEnter={e=>console.log('onMouseEnter (first button)')}onMouseLeave={e=>console.log('onMouseLeave (first button)')}onMouseOver={e=>console.log('onMouseOver (first button)')}onMouseUp={e=>console.log('onMouseUp (first button)')}>First button</button><buttononClick={e=>console.log('onClick (second button)')}onMouseDown={e=>console.log('onMouseDown (second button)')}onMouseEnter={e=>console.log('onMouseEnter (second button)')}onMouseLeave={e=>console.log('onMouseLeave (second button)')}onMouseOver={e=>console.log('onMouseOver (second button)')}onMouseUp={e=>console.log('onMouseUp (second button)')}>Second button</button></div>);}"
        },
        {
          "type": "p",
          "text": "This example shows some commonpointer eventsand when they fire."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPointerExample(){return(<divonPointerEnter={e=>console.log('onPointerEnter (parent)')}onPointerLeave={e=>console.log('onPointerLeave (parent)')}style={{padding:20,backgroundColor:'#ddd'}}><divonPointerDown={e=>console.log('onPointerDown (first child)')}onPointerEnter={e=>console.log('onPointerEnter (first child)')}onPointerLeave={e=>console.log('onPointerLeave (first child)')}onPointerMove={e=>console.log('onPointerMove (first child)')}onPointerUp={e=>console.log('onPointerUp (first child)')}style={{padding:20,backgroundColor:'lightyellow'}}>First child</div><divonPointerDown={e=>console.log('onPointerDown (second child)')}onPointerEnter={e=>console.log('onPointerEnter (second child)')}onPointerLeave={e=>console.log('onPointerLeave (second child)')}onPointerMove={e=>console.log('onPointerMove (second child)')}onPointerUp={e=>console.log('onPointerUp (second child)')}style={{padding:20,backgroundColor:'lightblue'}}>Second child</div></div>);}"
        },
        {
          "type": "p",
          "text": "In React,focus eventsbubble. You can use thecurrentTargetandrelatedTargetto differentiate if the focusing or blurring events originated from outside of the parent element. The example shows how to detect focusing a child, focusing the parent element, and how to detect focus entering or leaving the whole subtree."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFocusExample(){return(<divtabIndex={1}onFocus={(e)=>{if(e.currentTarget===e.target){console.log('focused parent');}else{console.log('focused child',e.target.name);}if(!e.currentTarget.contains(e.relatedTarget)){// Not triggered when swapping focus between childrenconsole.log('focus entered parent');}}}onBlur={(e)=>{if(e.currentTarget===e.target){console.log('unfocused parent');}else{console.log('unfocused child',e.target.name);}if(!e.currentTarget.contains(e.relatedTarget)){// Not triggered when swapping focus between childrenconsole.log('focus left parent');}}}><label>First name:<inputname=\"firstName\"/></label><label>Last name:<inputname=\"lastName\"/></label></div>);}"
        },
        {
          "type": "p",
          "text": "This example shows some commonkeyboard eventsand when they fire."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionKeyboardExample(){return(<label>First name:<inputname=\"firstName\"onKeyDown={e=>console.log('onKeyDown:',e.key,e.code)}onKeyUp={e=>console.log('onKeyUp:',e.key,e.code)}/></label>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/form",
      "title": "<form> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<form>componentlets you create interactive controls for submitting information."
        },
        {
          "type": "code",
          "code": "<formaction={search}><inputname=\"query\"/><buttontype=\"submit\">Search</button></form>"
        },
        {
          "type": "list",
          "items": [
            "Reference<form>",
            "<form>",
            "UsageHandle form submission on the clientHandle form submission with a Server FunctionDisplay a pending state during form submissionOptimistically updating form dataHandling form submission errorsDisplay a form submission error without JavaScriptHandling multiple submission types",
            "Handle form submission on the client",
            "Handle form submission with a Server Function",
            "Display a pending state during form submission",
            "Optimistically updating form data",
            "Handling form submission errors",
            "Display a form submission error without JavaScript",
            "Handling multiple submission types"
          ]
        },
        {
          "type": "p",
          "text": "To create interactive controls for submitting information, render thebuilt-in browser<form>component."
        },
        {
          "type": "code",
          "code": "<formaction={search}><inputname=\"query\"/><buttontype=\"submit\">Search</button></form>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<form>supports allcommon element props. action: a URL or function. When a URL is passed toactionthe form will behave like the HTML form component. When a function is passed toactionthe function will handle the form submission. The function passed toactionmay be async and will be called with a single argument containing theform dataof the submitted form. Theactionprop can be overridden by aformActionattribute on a<button>,<input type=\"submit\">, or<input type=\"image\">component."
        },
        {
          "type": "list",
          "items": [
            "When a function is passed toactionorformActionthe HTTP method will be POST regardless of value of themethodprop."
          ]
        },
        {
          "type": "p",
          "text": "Pass a function to theactionprop of form to run the function when the form is submitted.formDatawill be passed to the function as an argument so you can access the data submitted by the form. This differs from the conventionalHTML action, which only accepts URLs."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionSearch(){functionsearch(formData){constquery=formData.get(\"query\");alert(`You searched for '${query}'`);}return(<formaction={search}><inputname=\"query\"/><buttontype=\"submit\">Search</button></form>);}"
        },
        {
          "type": "p",
          "text": "Render a<form>with an input and submit button. Pass a Server Function (a function marked with'use server') to theactionprop of form to run the function when the form is submitted. Passing a Server Function to<form action>allow users to submit forms without JavaScript enabled or before the code has loaded. This is beneficial to users who have a slow connection, device, or have JavaScript disabled and is similar to the way forms work when a URL is passed to theactionprop. You can use hidden form fields to provide data to the<form>’s action. The Server Function will be called with the hidden form field data as an instance ofFormData."
        },
        {
          "type": "code",
          "code": "import{updateCart}from'./lib.js';functionAddToCart({productId}){asyncfunctionaddToCart(formData){'use server'constproductId=formData.get('productId')awaitupdateCart(productId)}return(<formaction={addToCart}><inputtype=\"hidden\"name=\"productId\"value={productId}/><buttontype=\"submit\">Add to Cart</button></form>);}"
        },
        {
          "type": "p",
          "text": "In lieu of using hidden form fields to provide data to the<form>’s action, you can call thebindmethod to supply it with extra arguments. This will bind a new argument (productId) to the function in addition to theformDatathat is passed as an argument to the function."
        },
        {
          "type": "code",
          "code": "import{updateCart}from'./lib.js';functionAddToCart({productId}){asyncfunctionaddToCart(productId,formData){\"use server\";awaitupdateCart(productId)}constaddProductToCart=addToCart.bind(null,productId);return(<formaction={addProductToCart}><buttontype=\"submit\">Add to Cart</button></form>);}"
        },
        {
          "type": "p",
          "text": "When<form>is rendered by aServer Component, and aServer Functionis passed to the<form>’sactionprop, the form isprogressively enhanced."
        },
        {
          "type": "p",
          "text": "To display a pending state when a form is being submitted, you can call theuseFormStatusHook in a component rendered in a<form>and read thependingproperty returned. Here, we use thependingproperty to indicate the form is submitting."
        },
        {
          "type": "code",
          "code": "import{useFormStatus}from\"react-dom\";import{submitForm}from\"./actions.js\";functionSubmit(){const{pending}=useFormStatus();return(<buttontype=\"submit\"disabled={pending}>{pending?\"Submitting...\":\"Submit\"}</button>);}functionForm({action}){return(<formaction={action}><Submit/></form>);}exportdefaultfunctionApp(){return<Formaction={submitForm}/>;}"
        },
        {
          "type": "p",
          "text": "To learn more about theuseFormStatusHook see thereference documentation."
        },
        {
          "type": "p",
          "text": "TheuseOptimisticHook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome. For example, when a user types a message into the form and hits the “Send” button, theuseOptimisticHook allows the message to immediately appear in the list with a “Sending…” label, even before the message is actually sent to a server. This “optimistic” approach gives the impression of speed and responsiveness. The form then attempts to truly send the message in the background. Once the server confirms the message has been received, the “Sending…” label is removed."
        },
        {
          "type": "code",
          "code": "import{useOptimistic,useState,useRef}from\"react\";import{deliverMessage}from\"./actions.js\";functionThread({messages,sendMessage}){constformRef=useRef();asyncfunctionformAction(formData){addOptimisticMessage(formData.get(\"message\"));formRef.current.reset();awaitsendMessage(formData);}const[optimisticMessages,addOptimisticMessage]=useOptimistic(messages,(state,newMessage)=>[...state,{text:newMessage,sending:true}]);return(<>{optimisticMessages.map((message,index)=>(<divkey={index}>{message.text}{!!message.sending&&<small>(Sending...)</small>}</div>))}<formaction={formAction}ref={formRef}><inputtype=\"text\"name=\"message\"placeholder=\"Hello!\"/><buttontype=\"submit\">Send</button></form></>);}exportdefaultfunctionApp(){const[messages,setMessages]=useState([{text:\"Hello there!\",sending:false,key:1}]);asyncfunctionsendMessage(formData){constsentMessage=awaitdeliverMessage(formData.get(\"message\"));setMessages([...messages,{text:sentMessage}]);}return<Threadmessages={messages}sendMessage={sendMessage}/>;}"
        },
        {
          "type": "p",
          "text": "In some cases the function called by a<form>’sactionprop throws an error. You can handle these errors by wrapping<form>in an Error Boundary. If the function called by a<form>’sactionprop throws an error, the fallback for the error boundary will be displayed."
        },
        {
          "type": "code",
          "code": "import{ErrorBoundary}from\"react-error-boundary\";exportdefaultfunctionSearch(){functionsearch(){thrownewError(\"search error\");}return(<ErrorBoundaryfallback={<p>There was an error while submitting the form</p>}><formaction={search}><inputname=\"query\"/><buttontype=\"submit\">Search</button></form></ErrorBoundary>);}"
        },
        {
          "type": "p",
          "text": "Displaying a form submission error message before the JavaScript bundle loads for progressive enhancement requires that:"
        },
        {
          "type": "list",
          "items": [
            "<form>be rendered by aServer Component",
            "the function passed to the<form>’sactionprop be aServer Function",
            "theuseActionStateHook be used to display the error message"
          ]
        },
        {
          "type": "p",
          "text": "useActionStatetakes two parameters: aServer Functionand an initial state.useActionStatereturns two values, a state variable and an action. The action returned byuseActionStateshould be passed to theactionprop of the form. The state variable returned byuseActionStatecan be used to display an error message. The value returned by the Server Function passed touseActionStatewill be used to update the state variable."
        },
        {
          "type": "code",
          "code": "import{useActionState}from\"react\";import{signUpNewUser}from\"./api\";exportdefaultfunctionPage(){asyncfunctionsignup(prevState,formData){\"use server\";constemail=formData.get(\"email\");try{awaitsignUpNewUser(email);alert(`Added \"${email}\"`);}catch(err){returnerr.toString();}}const[message,signupAction]=useActionState(signup,null);return(<><h1>Signup for my newsletter</h1><p>Signup with the same email twice to see an error</p><formaction={signupAction}id=\"signup-form\"><labelhtmlFor=\"email\">Email:</label><inputname=\"email\"id=\"email\"placeholder=\"react@example.com\"/><button>Sign up</button>{!!message&&<p>{message}</p>}</form></>);}"
        },
        {
          "type": "p",
          "text": "Learn more about updating state from a form action with theuseActionStatedocs"
        },
        {
          "type": "p",
          "text": "Forms can be designed to handle multiple submission actions based on the button pressed by the user. Each button inside a form can be associated with a distinct action or behavior by setting theformActionprop. When a user taps a specific button, the form is submitted, and a corresponding action, defined by that button’s attributes and action, is executed. For instance, a form might submit an article for review by default but have a separate button withformActionset to save the article as a draft."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionSearch(){functionpublish(formData){constcontent=formData.get(\"content\");constbutton=formData.get(\"button\");alert(`'${content}' was published with the '${button}' button`);}functionsave(formData){constcontent=formData.get(\"content\");alert(`Your draft of '${content}' has been saved!`);}return(<formaction={publish}><textareaname=\"content\"rows={4}cols={40}/><br/><buttontype=\"submit\"name=\"button\"value=\"submit\">Publish</button><buttonformAction={save}>Save draft</button></form>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/input",
      "title": "<input> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<input>componentlets you render different kinds of form inputs."
        },
        {
          "type": "code",
          "code": "<input/>"
        },
        {
          "type": "list",
          "items": [
            "Reference<input>",
            "<input>",
            "UsageDisplaying inputs of different typesProviding a label for an inputProviding an initial value for an inputReading the input values when submitting a formControlling an input with a state variableOptimizing re-rendering on every keystroke",
            "Displaying inputs of different types",
            "Providing a label for an input",
            "Providing an initial value for an input",
            "Reading the input values when submitting a form",
            "Controlling an input with a state variable",
            "Optimizing re-rendering on every keystroke",
            "TroubleshootingMy text input doesn’t update when I type into itMy checkbox doesn’t update when I click on itMy input caret jumps to the beginning on every keystrokeI’m getting an error: “A component is changing an uncontrolled input to be controlled”",
            "My text input doesn’t update when I type into it",
            "My checkbox doesn’t update when I click on it",
            "My input caret jumps to the beginning on every keystroke",
            "I’m getting an error: “A component is changing an uncontrolled input to be controlled”"
          ]
        },
        {
          "type": "p",
          "text": "To display an input, render thebuilt-in browser<input>component."
        },
        {
          "type": "code",
          "code": "<inputname=\"myInput\"/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<input>supports allcommon element props."
        },
        {
          "type": "list",
          "items": [
            "formAction: A string or function. Overrides the parent<form action>fortype=\"submit\"andtype=\"image\". When a URL is passed toactionthe form will behave like a standard HTML form. When a function is passed toformActionthe function will handle the form submission. See<form action>."
          ]
        },
        {
          "type": "p",
          "text": "You canmake an input controlledby passing one of these props:"
        },
        {
          "type": "list",
          "items": [
            "checked: A boolean. For a checkbox input or a radio button, controls whether it is selected.",
            "value: A string. For a text input, controls its text. (For a radio button, specifies its form data.)"
          ]
        },
        {
          "type": "p",
          "text": "When you pass either of them, you must also pass anonChangehandler that updates the passed value. These<input>props are only relevant for uncontrolled inputs:"
        },
        {
          "type": "list",
          "items": [
            "defaultChecked: A boolean. Specifiesthe initial valuefortype=\"checkbox\"andtype=\"radio\"inputs.",
            "defaultValue: A string. Specifiesthe initial valuefor a text input."
          ]
        },
        {
          "type": "p",
          "text": "These<input>props are relevant both for uncontrolled and controlled inputs:"
        },
        {
          "type": "list",
          "items": [
            "accept: A string. Specifies which filetypes are accepted by atype=\"file\"input.",
            "alt: A string. Specifies the alternative image text for atype=\"image\"input.",
            "capture: A string. Specifies the media (microphone, video, or camera) captured by atype=\"file\"input.",
            "autoComplete: A string. Specifies one of the possibleautocomplete behaviors.",
            "autoFocus: A boolean. Iftrue, React will focus the element on mount.",
            "dirname: A string. Specifies the form field name for the element’s directionality.",
            "disabled: A boolean. Iftrue, the input will not be interactive and will appear dimmed.",
            "children:<input>does not accept children.",
            "form: A string. Specifies theidof the<form>this input belongs to. If omitted, it’s the closest parent form.",
            "formAction: A string. Overrides the parent<form action>fortype=\"submit\"andtype=\"image\".",
            "formEnctype: A string. Overrides the parent<form enctype>fortype=\"submit\"andtype=\"image\".",
            "formMethod: A string. Overrides the parent<form method>fortype=\"submit\"andtype=\"image\".",
            "formNoValidate: A string. Overrides the parent<form noValidate>fortype=\"submit\"andtype=\"image\".",
            "formTarget: A string. Overrides the parent<form target>fortype=\"submit\"andtype=\"image\".",
            "height: A string. Specifies the image height fortype=\"image\".",
            "list: A string. Specifies theidof the<datalist>with the autocomplete options.",
            "max: A number. Specifies the maximum value of numerical and datetime inputs.",
            "maxLength: A number. Specifies the maximum length of text and other inputs.",
            "min: A number. Specifies the minimum value of numerical and datetime inputs.",
            "minLength: A number. Specifies the minimum length of text and other inputs.",
            "multiple: A boolean. Specifies whether multiple values are allowed for<type=\"file\"andtype=\"email\".",
            "name: A string. Specifies the name for this input that’ssubmitted with the form.",
            "onChange: AnEventhandlerfunction. Required forcontrolled inputs.Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browserinputevent.",
            "onChangeCapture: A version ofonChangethat fires in thecapture phase.",
            "onInput: AnEventhandlerfunction. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to useonChangeinstead which works similarly.",
            "onInputCapture: A version ofonInputthat fires in thecapture phase.",
            "onInvalid: AnEventhandlerfunction. Fires if an input fails validation on form submit. Unlike the built-ininvalidevent, the ReactonInvalidevent bubbles.",
            "onInvalidCapture: A version ofonInvalidthat fires in thecapture phase.",
            "onSelect: AnEventhandlerfunction. Fires after the selection inside the<input>changes. React extends theonSelectevent to also fire for empty selection and on edits (which may affect the selection).",
            "onSelectCapture: A version ofonSelectthat fires in thecapture phase.",
            "pattern: A string. Specifies the pattern that thevaluemust match.",
            "placeholder: A string. Displayed in a dimmed color when the input value is empty.",
            "readOnly: A boolean. Iftrue, the input is not editable by the user.",
            "required: A boolean. Iftrue, the value must be provided for the form to submit.",
            "size: A number. Similar to setting width, but the unit depends on the control.",
            "src: A string. Specifies the image source for atype=\"image\"input.",
            "step: A positive number or an'any'string. Specifies the distance between valid values.",
            "type: A string. One of theinput types.",
            "width:  A string. Specifies the image width for atype=\"image\"input."
          ]
        },
        {
          "type": "list",
          "items": [
            "Checkboxes needchecked(ordefaultChecked), notvalue(ordefaultValue).",
            "If a text input receives a stringvalueprop, it will betreated as controlled.",
            "If a checkbox or a radio button receives a booleancheckedprop, it will betreated as controlled.",
            "An input can’t be both controlled and uncontrolled at the same time.",
            "An input cannot switch between being controlled or uncontrolled over its lifetime.",
            "Every controlled input needs anonChangeevent handler that synchronously updates its backing value."
          ]
        },
        {
          "type": "p",
          "text": "To display an input, render an<input>component. By default, it will be a text input. You can passtype=\"checkbox\"for a checkbox,type=\"radio\"for a radio button,or one of the other input types."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMyForm(){return(<><label>Text input:<inputname=\"myInput\"/></label><hr/><label>Checkbox:<inputtype=\"checkbox\"name=\"myCheckbox\"/></label><hr/><p>Radio buttons:<label><inputtype=\"radio\"name=\"myRadio\"value=\"option1\"/>Option 1</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option2\"/>Option 2</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option3\"/>Option 3</label></p></>);}"
        },
        {
          "type": "p",
          "text": "Typically, you will place every<input>inside a<label>tag. This tells the browser that this label is associated with that input. When the user clicks the label, the browser will automatically focus the input. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the associated input. If you can’t nest<input>into a<label>, associate them by passing the same ID to<input id>and<label htmlFor>.To avoid conflicts between multiple instances of one component, generate such an ID withuseId."
        },
        {
          "type": "code",
          "code": "import{useId}from'react';exportdefaultfunctionForm(){constageInputId=useId();return(<><label>Your first name:<inputname=\"firstName\"/></label><hr/><labelhtmlFor={ageInputId}>Your age:</label><inputid={ageInputId}name=\"age\"type=\"number\"/></>);}"
        },
        {
          "type": "p",
          "text": "You can optionally specify the initial value for any input. Pass it as thedefaultValuestring for text inputs. Checkboxes and radio buttons should specify the initial value with thedefaultCheckedboolean instead."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMyForm(){return(<><label>Text input:<inputname=\"myInput\"defaultValue=\"Some initial value\"/></label><hr/><label>Checkbox:<inputtype=\"checkbox\"name=\"myCheckbox\"defaultChecked={true}/></label><hr/><p>Radio buttons:<label><inputtype=\"radio\"name=\"myRadio\"value=\"option1\"/>Option 1</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option2\"defaultChecked={true}/>Option 2</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option3\"/>Option 3</label></p></>);}"
        },
        {
          "type": "p",
          "text": "Add a<form>around your inputs with a<button type=\"submit\">inside. It will call your<form onSubmit>event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by callinge.preventDefault(). Read the form data withnew FormData(e.target)."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMyForm(){functionhandleSubmit(e){// Prevent the browser from reloading the pagee.preventDefault();// Read the form dataconstform=e.target;constformData=newFormData(form);// You can pass formData as a fetch body directly:fetch('/some-api',{method:form.method,body:formData});// Or you can work with it as a plain object:constformJson=Object.fromEntries(formData.entries());console.log(formJson);}return(<formmethod=\"post\"onSubmit={handleSubmit}><label>Text input:<inputname=\"myInput\"defaultValue=\"Some initial value\"/></label><hr/><label>Checkbox:<inputtype=\"checkbox\"name=\"myCheckbox\"defaultChecked={true}/></label><hr/><p>Radio buttons:<label><inputtype=\"radio\"name=\"myRadio\"value=\"option1\"/>Option 1</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option2\"defaultChecked={true}/>Option 2</label><label><inputtype=\"radio\"name=\"myRadio\"value=\"option3\"/>Option 3</label></p><hr/><buttontype=\"reset\">Reset form</button><buttontype=\"submit\">Submit form</button></form>);}"
        },
        {
          "type": "p",
          "text": "Give anameto every<input>, for example<input name=\"firstName\" defaultValue=\"Taylor\" />. Thenameyou specified will be used as a key in the form data, for example{ firstName: \"Taylor\" }."
        },
        {
          "type": "p",
          "text": "By default,any<button>inside a<form>will submit it. This can be surprising! If you have your own customButtonReact component, consider returning<button type=\"button\">instead of<button>. Then, to be explicit, use<button type=\"submit\">for buttons thataresupposed to submit the form."
        },
        {
          "type": "p",
          "text": "An input like<input />isuncontrolled.Even if youpass an initial valuelike<input defaultValue=\"Initial text\" />, your JSX only specifies the initial value. It does not control what the value should be right now. To render acontrolledinput, pass thevalueprop to it (orcheckedfor checkboxes and radios).React will force the input to always have thevalueyou passed. Usually, you would do this by declaring astate variable:"
        },
        {
          "type": "code",
          "code": "functionForm(){const[firstName,setFirstName]=useState('');// Declare a state variable...// ...return(<inputvalue={firstName}// ...force the input's value to match the state variable...onChange={e=>setFirstName(e.target.value)}// ... and update the state variable on any edits!/>);}"
        },
        {
          "type": "p",
          "text": "A controlled input makes sense if you needed state anyway—for example, to re-render your UI on every edit:"
        },
        {
          "type": "code",
          "code": "functionForm(){const[firstName,setFirstName]=useState('');return(<><label>First name:<inputvalue={firstName}onChange={e=>setFirstName(e.target.value)}/></label>{firstName!==''&&<p>Your name is{firstName}.</p>}..."
        },
        {
          "type": "p",
          "text": "It’s also useful if you want to offer multiple ways to adjust the input state (for example, by clicking a button):"
        },
        {
          "type": "code",
          "code": "functionForm(){// ...const[age,setAge]=useState('');constageAsNumber=Number(age);return(<><label>Age:<inputvalue={age}onChange={e=>setAge(e.target.value)}type=\"number\"/><buttononClick={()=>setAge(ageAsNumber+10)}>Add 10 years</button>"
        },
        {
          "type": "p",
          "text": "Thevalueyou pass to controlled components should not beundefinedornull. If you need the initial value to be empty (such as with thefirstNamefield below), initialize your state variable to an empty string ('')."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionForm(){const[firstName,setFirstName]=useState('');const[age,setAge]=useState('20');constageAsNumber=Number(age);return(<><label>First name:<inputvalue={firstName}onChange={e=>setFirstName(e.target.value)}/></label><label>Age:<inputvalue={age}onChange={e=>setAge(e.target.value)}type=\"number\"/><buttononClick={()=>setAge(ageAsNumber+10)}>Add 10 years</button></label>{firstName!==''&&<p>Your name is{firstName}.</p>}{ageAsNumber>0&&<p>Your age is{ageAsNumber}.</p>}</>);}"
        },
        {
          "type": "p",
          "text": "If you passvaluewithoutonChange, it will be impossible to type into the input.When you control an input by passing somevalueto it, youforceit to always have the value you passed. So if you pass a state variable as avaluebut forget to update that state variable synchronously during theonChangeevent handler, React will revert the input after every keystroke back to thevaluethat you specified."
        },
        {
          "type": "p",
          "text": "When you use a controlled input, you set the state on every keystroke. If the component containing your state re-renders a large tree, this can get slow. There’s a few ways you can optimize re-rendering performance. For example, suppose you start with a form that re-renders all page content on every keystroke:"
        },
        {
          "type": "code",
          "code": "functionApp(){const[firstName,setFirstName]=useState('');return(<><form><inputvalue={firstName}onChange={e=>setFirstName(e.target.value)}/></form><PageContent/></>);}"
        },
        {
          "type": "p",
          "text": "Since<PageContent />doesn’t rely on the input state, you can move the input state into its own component:"
        },
        {
          "type": "code",
          "code": "functionApp(){return(<><SignupForm/><PageContent/></>);}functionSignupForm(){const[firstName,setFirstName]=useState('');return(<form><inputvalue={firstName}onChange={e=>setFirstName(e.target.value)}/></form>);}"
        },
        {
          "type": "p",
          "text": "This significantly improves performance because now onlySignupFormre-renders on every keystroke. If there is no way to avoid re-rendering (for example, ifPageContentdepends on the search input’s value),useDeferredValuelets you keep the controlled input responsive even in the middle of a large re-render."
        },
        {
          "type": "p",
          "text": "If you render an input withvaluebut noonChange, you will see an error in the console:"
        },
        {
          "type": "code",
          "code": "// 🔴 Bug: controlled text input with no onChange handler<inputvalue={something}/>"
        },
        {
          "type": "p",
          "text": "As the error message suggests, if you only wanted tospecify theinitialvalue,passdefaultValueinstead:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: uncontrolled input with an initial value<inputdefaultValue={something}/>"
        },
        {
          "type": "p",
          "text": "If you wantto control this input with a state variable,specify anonChangehandler:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: controlled input with onChange<inputvalue={something}onChange={e=>setSomething(e.target.value)}/>"
        },
        {
          "type": "p",
          "text": "If the value is intentionally read-only, add areadOnlyprop to suppress the error:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: readonly controlled input without on change<inputvalue={something}readOnly={true}/>"
        },
        {
          "type": "p",
          "text": "If you render a checkbox withcheckedbut noonChange, you will see an error in the console:"
        },
        {
          "type": "code",
          "code": "// 🔴 Bug: controlled checkbox with no onChange handler<inputtype=\"checkbox\"checked={something}/>"
        },
        {
          "type": "p",
          "text": "As the error message suggests, if you only wanted tospecify theinitialvalue,passdefaultCheckedinstead:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: uncontrolled checkbox with an initial value<inputtype=\"checkbox\"defaultChecked={something}/>"
        },
        {
          "type": "p",
          "text": "If you wantto control this checkbox with a state variable,specify anonChangehandler:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: controlled checkbox with onChange<inputtype=\"checkbox\"checked={something}onChange={e=>setSomething(e.target.checked)}/>"
        },
        {
          "type": "p",
          "text": "You need to reade.target.checkedrather thane.target.valuefor checkboxes."
        },
        {
          "type": "p",
          "text": "If the checkbox is intentionally read-only, add areadOnlyprop to suppress the error:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: readonly controlled input without on change<inputtype=\"checkbox\"checked={something}readOnly={true}/>"
        },
        {
          "type": "p",
          "text": "If youcontrol an input,you must update its state variable to the input’s value from the DOM duringonChange. You can’t update it to something other thane.target.value(ore.target.checkedfor checkboxes):"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// 🔴 Bug: updating an input to something other than e.target.valuesetFirstName(e.target.value.toUpperCase());}"
        },
        {
          "type": "p",
          "text": "You also can’t update it asynchronously:"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// 🔴 Bug: updating an input asynchronouslysetTimeout(()=>{setFirstName(e.target.value);},100);}"
        },
        {
          "type": "p",
          "text": "To fix your code, update it synchronously toe.target.value:"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// ✅ Updating a controlled input to e.target.value synchronouslysetFirstName(e.target.value);}"
        },
        {
          "type": "p",
          "text": "If this doesn’t fix the problem, it’s possible that the input gets removed and re-added from the DOM on every keystroke. This can happen if you’re accidentallyresetting stateon every re-render, for example if the input or one of its parents always receives a differentkeyattribute, or if you nest component function definitions (which is not supported and causes the “inner” component to always be considered a different tree)."
        },
        {
          "type": "p",
          "text": "If you provide avalueto the component, it must remain a string throughout its lifetime. You cannot passvalue={undefined}first and later passvalue=\"some string\"because React won’t know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a stringvalue, notnullorundefined. If yourvalueis coming from an API or a state variable, it might be initialized tonullorundefined. In that case, either set it to an empty string ('') initially, or passvalue={someValue ?? ''}to ensurevalueis a string. Similarly, if you passcheckedto a checkbox, ensure it’s always a boolean."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/link",
      "title": "<link> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<link>componentlets you use external resources such as stylesheets or annotate the document with link metadata."
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"href=\"favicon.ico\"/>"
        },
        {
          "type": "list",
          "items": [
            "Reference<link>",
            "<link>",
            "UsageLinking to related resourcesLinking to a stylesheetControlling stylesheet precedenceDeduplicated stylesheet renderingAnnotating specific items within the document with links",
            "Linking to related resources",
            "Linking to a stylesheet",
            "Controlling stylesheet precedence",
            "Deduplicated stylesheet rendering",
            "Annotating specific items within the document with links"
          ]
        },
        {
          "type": "p",
          "text": "To link to external resources such as stylesheets, fonts, and icons, or to annotate the document with link metadata, render thebuilt-in browser<link>component. You can render<link>from any component and React willin most casesplace the corresponding DOM element in the document head."
        },
        {
          "type": "code",
          "code": "<linkrel=\"icon\"href=\"favicon.ico\"/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<link>supports allcommon element props."
        },
        {
          "type": "list",
          "items": [
            "rel: a string, required. Specifies therelationship to the resource. Reacttreats links withrel=\"stylesheet\"differentlyfrom other links."
          ]
        },
        {
          "type": "p",
          "text": "These props apply whenrel=\"stylesheet\":"
        },
        {
          "type": "list",
          "items": [
            "precedence: a string. Tells React where to rank the<link>DOM node relative to others in the document<head>, which determines which stylesheet can override the other. React will infer that precedence values it discovers first are “lower” and precedence values it discovers later are “higher”. Many style systems can work fine using a single precedence value because style rules are atomic. Stylesheets with the same precedence go together whether they are<link>or inline<style>tags or loaded usingpreinitfunctions.",
            "media: a string. Restricts the stylesheet to a certainmedia query.",
            "title: a string. Specifies the name of analternative stylesheet."
          ]
        },
        {
          "type": "p",
          "text": "These props apply whenrel=\"stylesheet\"but disable React’sspecial treatment of stylesheets:"
        },
        {
          "type": "list",
          "items": [
            "disabled: a boolean. Disables the stylesheet.",
            "onError: a function. Called when the stylesheet fails to load.",
            "onLoad: a function. Called when the stylesheet finishes being loaded."
          ]
        },
        {
          "type": "p",
          "text": "These props apply whenrel=\"preload\"orrel=\"modulepreload\":"
        },
        {
          "type": "list",
          "items": [
            "as: a string. The type of resource. Its possible values areaudio,document,embed,fetch,font,image,object,script,style,track,video,worker.",
            "imageSrcSet: a string. Applicable only whenas=\"image\". Specifies thesource set of the image.",
            "imageSizes: a string. Applicable only whenas=\"image\". Specifies thesizes of the image."
          ]
        },
        {
          "type": "p",
          "text": "These props apply whenrel=\"icon\"orrel=\"apple-touch-icon\":"
        },
        {
          "type": "list",
          "items": ["sizes: a string. Thesizes of the icon."]
        },
        {
          "type": "p",
          "text": "These props apply in all cases:"
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the linked resource.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials. It is required whenasis set to\"fetch\".",
            "referrerPolicy: a string. TheReferrer headerto send when fetching. Its possible values areno-referrer-when-downgrade(the default),no-referrer,origin,origin-when-cross-origin, andunsafe-url.",
            "fetchPriority: a string. Suggests a relative priority for fetching the resource. The possible values areauto(the default),high, andlow.",
            "hrefLang: a string. The language of the linked resource.",
            "integrity: a string. A cryptographic hash of the resource, toverify its authenticity.",
            "type: a string. The MIME type of the linked resource."
          ]
        },
        {
          "type": "p",
          "text": "Props that arenot recommendedfor use with React:"
        },
        {
          "type": "list",
          "items": [
            "blocking: a string. If set to\"render\", instructs the browser not to render the page until the stylesheet is loaded. React provides more fine-grained control using Suspense."
          ]
        },
        {
          "type": "p",
          "text": "React will always place the DOM element corresponding to the<link>component within the document’s<head>, regardless of where in the React tree it is rendered. The<head>is the only valid place for<link>to exist within the DOM, yet it’s convenient and keeps things composable if a component representing a specific page can render<link>components itself. There are a few exceptions to this:"
        },
        {
          "type": "list",
          "items": [
            "If the<link>has arel=\"stylesheet\"prop, then it has to also have aprecedenceprop to get this special behavior. This is because the order of stylesheets within the document is significant, so React needs to know how to order this stylesheet relative to others, which you specify using theprecedenceprop. If theprecedenceprop is omitted, there is no special behavior.",
            "If the<link>has anitemPropprop, there is no special behavior, because in this case it doesn’t apply to the document but instead represents metadata about a specific part of the page.",
            "If the<link>has anonLoadoronErrorprop, because in that case you are managing the loading of the linked resource manually within your React component."
          ]
        },
        {
          "type": "p",
          "text": "In addition, if the<link>is to a stylesheet (namely, it hasrel=\"stylesheet\"in its props), React treats it specially in the following ways:"
        },
        {
          "type": "list",
          "items": [
            "The component that renders<link>willsuspendwhile the stylesheet is loading.",
            "If multiple components render links to the same stylesheet, React will de-duplicate them and only put a single link into the DOM. Two links are considered the same if they have the samehrefprop."
          ]
        },
        {
          "type": "p",
          "text": "There are two exception to this special behavior:"
        },
        {
          "type": "list",
          "items": [
            "If the link doesn’t have aprecedenceprop, there is no special behavior, because the order of stylesheets within the document is significant, so React needs to know how to order this stylesheet relative to others, which you specify using theprecedenceprop.",
            "If you supply any of theonLoad,onError, ordisabledprops, there is no special behavior, because these props indicate that you are managing the loading of the stylesheet manually within your component."
          ]
        },
        {
          "type": "p",
          "text": "This special treatment comes with two caveats:"
        },
        {
          "type": "list",
          "items": [
            "React will ignore changes to props after the link has been rendered. (React will issue a warning in development if this happens.)",
            "React may leave the link in the DOM even after the component that rendered it has been unmounted."
          ]
        },
        {
          "type": "p",
          "text": "You can annotate the document with links to related resources such as an icon, canonical URL, or pingback. React will place this metadata within the document<head>regardless of where in the React tree it is rendered."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionBlogPage(){return(<ShowRenderedHTML><linkrel=\"icon\"href=\"favicon.ico\"/><linkrel=\"pingback\"href=\"http://www.example.com/xmlrpc.php\"/><h1>My Blog</h1><p>...</p></ShowRenderedHTML>);}"
        },
        {
          "type": "p",
          "text": "If a component depends on a certain stylesheet in order to be displayed correctly, you can render a link to that stylesheet within the component. Your component willsuspendwhile the stylesheet is loading. You must supply theprecedenceprop, which tells React where to place this stylesheet relative to others — stylesheets with higher precedence can override those with lower precedence."
        },
        {
          "type": "p",
          "text": "When you want to use a stylesheet, it can be beneficial to call thepreinitfunction. Calling this function may allow the browser to start fetching the stylesheet earlier than if you just render a<link>component, for example by sending anHTTP Early Hints response."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionSiteMapPage(){return(<ShowRenderedHTML><linkrel=\"stylesheet\"href=\"sitemap.css\"precedence=\"medium\"/><p>...</p></ShowRenderedHTML>);}"
        },
        {
          "type": "p",
          "text": "Stylesheets can conflict with each other, and when they do, the browser goes with the one that comes later in the document. React lets you control the order of stylesheets with theprecedenceprop. In this example, two components render stylesheets, and the one with the higher precedence goes later in the document even though the component that renders it comes earlier."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionHomePage(){return(<ShowRenderedHTML><FirstComponent/><SecondComponent/>...</ShowRenderedHTML>);}functionFirstComponent(){return<linkrel=\"stylesheet\"href=\"first.css\"precedence=\"high\"/>;}functionSecondComponent(){return<linkrel=\"stylesheet\"href=\"second.css\"precedence=\"low\"/>;}"
        },
        {
          "type": "p",
          "text": "If you render the same stylesheet from multiple components, React will place only a single<link>in the document head."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionHomePage(){return(<ShowRenderedHTML><Component/><Component/>...</ShowRenderedHTML>);}functionComponent(){return<linkrel=\"stylesheet\"href=\"styles.css\"precedence=\"medium\"/>;}"
        },
        {
          "type": "p",
          "text": "You can use the<link>component with theitemPropprop to annotate specific items within the document with links to related resources. In this case, React willnotplace these annotations within the document<head>but will place them like any other React component."
        },
        {
          "type": "code",
          "code": "<sectionitemScope><h3>Annotating specific items</h3><linkitemProp=\"author\"href=\"http://example.com/\"/><p>...</p></section>"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/meta",
      "title": "<meta> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<meta>componentlets you add metadata to the document."
        },
        {
          "type": "code",
          "code": "<metaname=\"keywords\"content=\"React, JavaScript, semantic markup, html\"/>"
        },
        {
          "type": "list",
          "items": [
            "Reference<meta>",
            "<meta>",
            "UsageAnnotating the document with metadataAnnotating specific items within the document with metadata",
            "Annotating the document with metadata",
            "Annotating specific items within the document with metadata"
          ]
        },
        {
          "type": "p",
          "text": "To add document metadata, render thebuilt-in browser<meta>component. You can render<meta>from any component and React will always place the corresponding DOM element in the document head."
        },
        {
          "type": "code",
          "code": "<metaname=\"keywords\"content=\"React, JavaScript, semantic markup, html\"/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<meta>supports allcommon element props. It should haveexactly oneof the following props:name,httpEquiv,charset,itemProp. The<meta>component does something different depending on which of these props is specified."
        },
        {
          "type": "list",
          "items": [
            "name: a string. Specifies thekind of metadatato be attached to the document.",
            "charset: a string. Specifies the character set used by the document. The only valid value is\"utf-8\".",
            "httpEquiv: a string. Specifies a directive for processing the document.",
            "itemProp: a string. Specifies metadata about a particular item within the document rather than the document as a whole.",
            "content: a string. Specifies the metadata to be attached when used with thenameoritemPropprops or the behavior of the directive when used with thehttpEquivprop."
          ]
        },
        {
          "type": "p",
          "text": "React will always place the DOM element corresponding to the<meta>component within the document’s<head>, regardless of where in the React tree it is rendered. The<head>is the only valid place for<meta>to exist within the DOM, yet it’s convenient and keeps things composable if a component representing a specific page can render<meta>components itself. There is one exception to this: if<meta>has anitemPropprop, there is no special behavior, because in this case it doesn’t represent metadata about the document but rather metadata about a specific part of the page."
        },
        {
          "type": "p",
          "text": "You can annotate the document with metadata such as keywords, a summary, or the author’s name. React will place this metadata within the document<head>regardless of where in the React tree it is rendered."
        },
        {
          "type": "code",
          "code": "<metaname=\"author\"content=\"John Smith\"/><metaname=\"keywords\"content=\"React, JavaScript, semantic markup, html\"/><metaname=\"description\"content=\"API reference for the <meta> component in React DOM\"/>"
        },
        {
          "type": "p",
          "text": "You can render the<meta>component from any component. React will put a<meta>DOM node in the document<head>."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionSiteMapPage(){return(<ShowRenderedHTML><metaname=\"keywords\"content=\"React\"/><metaname=\"description\"content=\"A site map for the React website\"/><h1>Site Map</h1><p>...</p></ShowRenderedHTML>);}"
        },
        {
          "type": "p",
          "text": "You can use the<meta>component with theitemPropprop to annotate specific items within the document with metadata. In this case, React willnotplace these annotations within the document<head>but will place them like any other React component."
        },
        {
          "type": "code",
          "code": "<sectionitemScope><h3>Annotating specific items</h3><metaitemProp=\"description\"content=\"API reference for using <meta> with itemProp\"/><p>...</p></section>"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/option",
      "title": "<option> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<option>componentlets you render an option inside a<select>box."
        },
        {
          "type": "code",
          "code": "<select><optionvalue=\"someOption\">Some option</option><optionvalue=\"otherOption\">Other option</option></select>"
        },
        {
          "type": "list",
          "items": [
            "Reference<option>",
            "<option>",
            "UsageDisplaying a select box with options",
            "Displaying a select box with options"
          ]
        },
        {
          "type": "p",
          "text": "Thebuilt-in browser<option>componentlets you render an option inside a<select>box."
        },
        {
          "type": "code",
          "code": "<select><optionvalue=\"someOption\">Some option</option><optionvalue=\"otherOption\">Other option</option></select>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<option>supports allcommon element props. Additionally,<option>supports these props:"
        },
        {
          "type": "list",
          "items": [
            "disabled: A boolean. Iftrue, the option will not be selectable and will appear dimmed.",
            "label: A string. Specifies the meaning of the option. If not specified, the text inside the option is used.",
            "value: The value to be usedwhen submitting the parent<select>in a formif this option is selected."
          ]
        },
        {
          "type": "list",
          "items": [
            "React does not support theselectedattribute on<option>. Instead, pass this option’svalueto the parent<select defaultValue>for an uncontrolled select box, or<select value>for a controlled select."
          ]
        },
        {
          "type": "p",
          "text": "Render a<select>with a list of<option>components inside to display a select box. Give each<option>avaluerepresenting the data to be submitted with the form. Read more about displaying a<select>with a list of<option>components."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFruitPicker(){return(<label>Pick a fruit:<selectname=\"selectedFruit\"><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/progress",
      "title": "<progress> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<progress>componentlets you render a progress indicator."
        },
        {
          "type": "code",
          "code": "<progressvalue={0.5}/>"
        },
        {
          "type": "list",
          "items": [
            "Reference<progress>",
            "<progress>",
            "UsageControlling a progress indicator",
            "Controlling a progress indicator"
          ]
        },
        {
          "type": "p",
          "text": "To display a progress indicator, render thebuilt-in browser<progress>component."
        },
        {
          "type": "code",
          "code": "<progressvalue={0.5}/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<progress>supports allcommon element props. Additionally,<progress>supports these props:"
        },
        {
          "type": "list",
          "items": [
            "max: A number. Specifies the maximumvalue. Defaults to1.",
            "value: A number between0andmax, ornullfor indeterminate progress. Specifies how much was done."
          ]
        },
        {
          "type": "p",
          "text": "To display a progress indicator, render a<progress>component. You can pass a numbervaluebetween0and themaxvalue you specify. If you don’t pass amaxvalue, it will assumed to be1by default. If the operation is not ongoing, passvalue={null}to put the progress indicator into an indeterminate state."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<><progressvalue={0}/><progressvalue={0.5}/><progressvalue={0.7}/><progressvalue={75}max={100}/><progressvalue={1}/><progressvalue={null}/></>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/script",
      "title": "<script> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<script>componentlets you add a script to your document."
        },
        {
          "type": "code",
          "code": "<script>alert(\"hi!\")</script>"
        },
        {
          "type": "list",
          "items": [
            "Reference<script>",
            "<script>",
            "UsageRendering an external scriptRendering an inline script",
            "Rendering an external script",
            "Rendering an inline script"
          ]
        },
        {
          "type": "p",
          "text": "To add inline or external scripts to your document, render thebuilt-in browser<script>component. You can render<script>from any component and React willin certain casesplace the corresponding DOM element in the document head and de-duplicate identical scripts."
        },
        {
          "type": "code",
          "code": "<script>alert(\"hi!\")</script><scriptsrc=\"script.js\"/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<script>supports allcommon element props. It should haveeitherchildrenor asrcprop."
        },
        {
          "type": "list",
          "items": [
            "children: a string. The source code of an inline script.",
            "src: a string. The URL of an external script."
          ]
        },
        {
          "type": "p",
          "text": "Other supported props:"
        },
        {
          "type": "list",
          "items": [
            "async: a boolean. Allows the browser to defer execution of the script until the rest of the document has been processed — the preferred behavior for performance.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials.",
            "fetchPriority: a string. Lets the browser rank scripts in priority when fetching multiple scripts at the same time. Can be\"high\",\"low\", or\"auto\"(the default).",
            "integrity: a string. A cryptographic hash of the script, toverify its authenticity.",
            "noModule: a boolean. Disables the script in browsers that support ES modules — allowing for a fallback script for browsers that do not.",
            "nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.",
            "referrer: a string. Sayswhat Referer header to sendwhen fetching the script and any resources that the script fetches in turn.",
            "type: a string. Says whether the script is aclassic script, ES module, or import map."
          ]
        },
        {
          "type": "p",
          "text": "Props that disable React’sspecial treatment of scripts:"
        },
        {
          "type": "list",
          "items": [
            "onError: a function. Called when the script fails to load.",
            "onLoad: a function. Called when the script finishes being loaded."
          ]
        },
        {
          "type": "p",
          "text": "Props that arenot recommendedfor use with React:"
        },
        {
          "type": "list",
          "items": [
            "blocking: a string. If set to\"render\", instructs the browser not to render the page until the scriptsheet is loaded. React provides more fine-grained control using Suspense.",
            "defer: a string. Prevents the browser from executing the script until the document is done loading. Not compatible with streaming server-rendered components. Use theasyncprop instead."
          ]
        },
        {
          "type": "p",
          "text": "React can move<script>components to the document’s<head>and de-duplicate identical scripts. To opt into this behavior, provide thesrcandasync={true}props. React will de-duplicate scripts if they have the samesrc. Theasyncprop must be true to allow scripts to be safely moved. This special treatment comes with two caveats:"
        },
        {
          "type": "list",
          "items": [
            "React will ignore changes to props after the script has been rendered. (React will issue a warning in development if this happens.)",
            "React may leave the script in the DOM even after the component that rendered it has been unmounted. (This has no effect as scripts just execute once when they are inserted into the DOM.)"
          ]
        },
        {
          "type": "p",
          "text": "If a component depends on certain scripts in order to be displayed correctly, you can render a<script>within the component.\nHowever, the component might be committed before the script has finished loading.\nYou can start depending on the script content once theloadevent is fired e.g. by using theonLoadprop. React will de-duplicate scripts that have the samesrc, inserting only one of them into the DOM even if multiple components render it."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';functionMap({lat,long}){return(<><scriptasyncsrc=\"map-api.js\"onLoad={()=>console.log('script loaded')}/><divid=\"map\"data-lat={lat}data-long={long}/></>);}exportdefaultfunctionPage(){return(<ShowRenderedHTML><Map/></ShowRenderedHTML>);}"
        },
        {
          "type": "p",
          "text": "When you want to use a script, it can be beneficial to call thepreinitfunction. Calling this function may allow the browser to start fetching the script earlier than if you just render a<script>component, for example by sending anHTTP Early Hints response."
        },
        {
          "type": "p",
          "text": "To include an inline script, render the<script>component with the script source code as its children. Inline scripts are not de-duplicated or moved to the document<head>."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';functionTracking(){return(<script>ga('send', 'pageview');</script>);}exportdefaultfunctionPage(){return(<ShowRenderedHTML><h1>My Website</h1><Tracking/><p>Welcome</p></ShowRenderedHTML>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/select",
      "title": "<select> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<select>componentlets you render a select box with options."
        },
        {
          "type": "code",
          "code": "<select><optionvalue=\"someOption\">Some option</option><optionvalue=\"otherOption\">Other option</option></select>"
        },
        {
          "type": "list",
          "items": [
            "Reference<select>",
            "<select>",
            "UsageDisplaying a select box with optionsProviding a label for a select boxProviding an initially selected optionEnabling multiple selectionReading the select box value when submitting a formControlling a select box with a state variable",
            "Displaying a select box with options",
            "Providing a label for a select box",
            "Providing an initially selected option",
            "Enabling multiple selection",
            "Reading the select box value when submitting a form",
            "Controlling a select box with a state variable"
          ]
        },
        {
          "type": "p",
          "text": "To display a select box, render thebuilt-in browser<select>component."
        },
        {
          "type": "code",
          "code": "<select><optionvalue=\"someOption\">Some option</option><optionvalue=\"otherOption\">Other option</option></select>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<select>supports allcommon element props. You canmake a select box controlledby passing avalueprop:"
        },
        {
          "type": "list",
          "items": [
            "value: A string (or an array of strings formultiple={true}). Controls which option is selected. Every value string match thevalueof some<option>nested inside the<select>."
          ]
        },
        {
          "type": "p",
          "text": "When you passvalue, you must also pass anonChangehandler that updates the passed value. If your<select>is uncontrolled, you may pass thedefaultValueprop instead:"
        },
        {
          "type": "list",
          "items": [
            "defaultValue: A string (or an array of strings formultiple={true}). Specifiesthe initially selected option."
          ]
        },
        {
          "type": "p",
          "text": "These<select>props are relevant both for uncontrolled and controlled select boxes:"
        },
        {
          "type": "list",
          "items": [
            "autoComplete: A string. Specifies one of the possibleautocomplete behaviors.",
            "autoFocus: A boolean. Iftrue, React will focus the element on mount.",
            "children:<select>accepts<option>,<optgroup>, and<datalist>components as children. You can also pass your own components as long as they eventually render one of the allowed components. If you pass your own components that eventually render<option>tags, each<option>you render must have avalue.",
            "disabled: A boolean. Iftrue, the select box will not be interactive and will appear dimmed.",
            "form: A string. Specifies theidof the<form>this select box belongs to. If omitted, it’s the closest parent form.",
            "multiple: A boolean. Iftrue, the browser allowsmultiple selection.",
            "name: A string. Specifies the name for this select box that’ssubmitted with the form.",
            "onChange: AnEventhandlerfunction. Required forcontrolled select boxes.Fires immediately when the user picks a different option. Behaves like the browserinputevent.",
            "onChangeCapture: A version ofonChangethat fires in thecapture phase.",
            "onInput: AnEventhandlerfunction. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to useonChangeinstead which works similarly.",
            "onInputCapture: A version ofonInputthat fires in thecapture phase.",
            "onInvalid: AnEventhandlerfunction. Fires if an input fails validation on form submit. Unlike the built-ininvalidevent, the ReactonInvalidevent bubbles.",
            "onInvalidCapture: A version ofonInvalidthat fires in thecapture phase.",
            "required: A boolean. Iftrue, the value must be provided for the form to submit.",
            "size: A number. Formultiple={true}selects, specifies the preferred number of initially visible items."
          ]
        },
        {
          "type": "list",
          "items": [
            "Unlike in HTML, passing aselectedattribute to<option>is not supported. Instead, use<select defaultValue>for uncontrolled select boxes and<select value>for controlled select boxes.",
            "If a select box receives avalueprop, it will betreated as controlled.",
            "A select box can’t be both controlled and uncontrolled at the same time.",
            "A select box cannot switch between being controlled or uncontrolled over its lifetime.",
            "Every controlled select box needs anonChangeevent handler that synchronously updates its backing value."
          ]
        },
        {
          "type": "p",
          "text": "Render a<select>with a list of<option>components inside to display a select box. Give each<option>avaluerepresenting the data to be submitted with the form."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFruitPicker(){return(<label>Pick a fruit:<selectname=\"selectedFruit\"><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label>);}"
        },
        {
          "type": "p",
          "text": "Typically, you will place every<select>inside a<label>tag. This tells the browser that this label is associated with that select box. When the user clicks the label, the browser will automatically focus the select box. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the select box. If you can’t nest<select>into a<label>, associate them by passing the same ID to<select id>and<label htmlFor>.To avoid conflicts between multiple instances of one component, generate such an ID withuseId."
        },
        {
          "type": "code",
          "code": "import{useId}from'react';exportdefaultfunctionForm(){constvegetableSelectId=useId();return(<><label>Pick a fruit:<selectname=\"selectedFruit\"><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label><hr/><labelhtmlFor={vegetableSelectId}>Pick a vegetable:</label><selectid={vegetableSelectId}name=\"selectedVegetable\"><optionvalue=\"cucumber\">Cucumber</option><optionvalue=\"corn\">Corn</option><optionvalue=\"tomato\">Tomato</option></select></>);}"
        },
        {
          "type": "p",
          "text": "By default, the browser will select the first<option>in the list. To select a different option by default, pass that<option>’svalueas thedefaultValueto the<select>element."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFruitPicker(){return(<label>Pick a fruit:<selectname=\"selectedFruit\"defaultValue=\"orange\"><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label>);}"
        },
        {
          "type": "p",
          "text": "Unlike in HTML, passing aselectedattribute to an individual<option>is not supported."
        },
        {
          "type": "p",
          "text": "Passmultiple={true}to the<select>to let the user select multiple options. In that case, if you also specifydefaultValueto choose the initially selected options, it must be an array."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFruitPicker(){return(<label>Pick some fruits:<selectname=\"selectedFruit\"defaultValue={['orange','banana']}multiple={true}><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label>);}"
        },
        {
          "type": "p",
          "text": "Add a<form>around your select box with a<button type=\"submit\">inside. It will call your<form onSubmit>event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by callinge.preventDefault(). Read the form data withnew FormData(e.target)."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionEditPost(){functionhandleSubmit(e){// Prevent the browser from reloading the pagee.preventDefault();// Read the form dataconstform=e.target;constformData=newFormData(form);// You can pass formData as a fetch body directly:fetch('/some-api',{method:form.method,body:formData});// You can generate a URL out of it, as the browser does by default:console.log(newURLSearchParams(formData).toString());// You can work with it as a plain object.constformJson=Object.fromEntries(formData.entries());console.log(formJson);// (!) This doesn't include multiple select values// Or you can get an array of name-value pairs.console.log([...formData.entries()]);}return(<formmethod=\"post\"onSubmit={handleSubmit}><label>Pick your favorite fruit:<selectname=\"selectedFruit\"defaultValue=\"orange\"><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label><label>Pick all your favorite vegetables:<selectname=\"selectedVegetables\"multiple={true}defaultValue={['corn','tomato']}><optionvalue=\"cucumber\">Cucumber</option><optionvalue=\"corn\">Corn</option><optionvalue=\"tomato\">Tomato</option></select></label><hr/><buttontype=\"reset\">Reset</button><buttontype=\"submit\">Submit</button></form>);}"
        },
        {
          "type": "p",
          "text": "Give anameto your<select>, for example<select name=\"selectedFruit\" />. Thenameyou specified will be used as a key in the form data, for example{ selectedFruit: \"orange\" }. If you use<select multiple={true}>, theFormDatayou’ll read from the form will include each selected value as a separate name-value pair. Look closely at the console logs in the example above."
        },
        {
          "type": "p",
          "text": "By default,any<button>inside a<form>will submit it. This can be surprising! If you have your own customButtonReact component, consider returning<button type=\"button\">instead of<button>. Then, to be explicit, use<button type=\"submit\">for buttons thataresupposed to submit the form."
        },
        {
          "type": "p",
          "text": "A select box like<select />isuncontrolled.Even if youpass an initially selected valuelike<select defaultValue=\"orange\" />, your JSX only specifies the initial value, not the value right now. To render acontrolledselect box, pass thevalueprop to it.React will force the select box to always have thevalueyou passed. Typically, you will control a select box by declaring astate variable:"
        },
        {
          "type": "code",
          "code": "functionFruitPicker(){const[selectedFruit,setSelectedFruit]=useState('orange');// Declare a state variable...// ...return(<selectvalue={selectedFruit}// ...force the select's value to match the state variable...onChange={e=>setSelectedFruit(e.target.value)}// ... and update the state variable on any change!><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select>);}"
        },
        {
          "type": "p",
          "text": "This is useful if you want to re-render some part of the UI in response to every selection."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionFruitPicker(){const[selectedFruit,setSelectedFruit]=useState('orange');const[selectedVegs,setSelectedVegs]=useState(['corn','tomato']);return(<><label>Pick a fruit:<selectvalue={selectedFruit}onChange={e=>setSelectedFruit(e.target.value)}><optionvalue=\"apple\">Apple</option><optionvalue=\"banana\">Banana</option><optionvalue=\"orange\">Orange</option></select></label><hr/><label>Pick all your favorite vegetables:<selectmultiple={true}value={selectedVegs}onChange={e=>{constoptions=[...e.target.selectedOptions];constvalues=options.map(option=>option.value);setSelectedVegs(values);}}><optionvalue=\"cucumber\">Cucumber</option><optionvalue=\"corn\">Corn</option><optionvalue=\"tomato\">Tomato</option></select></label><hr/><p>Your favorite fruit:{selectedFruit}</p><p>Your favorite vegetables:{selectedVegs.join(', ')}</p></>);}"
        },
        {
          "type": "p",
          "text": "If you passvaluewithoutonChange, it will be impossible to select an option.When you control a select box by passing somevalueto it, youforceit to always have the value you passed. So if you pass a state variable as avaluebut forget to update that state variable synchronously during theonChangeevent handler, React will revert the select box after every keystroke back to thevaluethat you specified. Unlike in HTML, passing aselectedattribute to an individual<option>is not supported."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/style",
      "title": "<style> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<style>componentlets you add inline CSS stylesheets to your document."
        },
        {
          "type": "code",
          "code": "<style>{` p { color: red; } `}</style>"
        },
        {
          "type": "list",
          "items": [
            "Reference<style>",
            "<style>",
            "UsageRendering an inline CSS stylesheet",
            "Rendering an inline CSS stylesheet"
          ]
        },
        {
          "type": "p",
          "text": "To add inline styles to your document, render thebuilt-in browser<style>component. You can render<style>from any component and React willin certain casesplace the corresponding DOM element in the document head and de-duplicate identical styles."
        },
        {
          "type": "code",
          "code": "<style>{` p { color: red; } `}</style>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<style>supports allcommon element props."
        },
        {
          "type": "list",
          "items": [
            "children: a string, required. The contents of the stylesheet.",
            "precedence: a string. Tells React where to rank the<style>DOM node relative to others in the document<head>, which determines which stylesheet can override the other. React will infer that precedence values it discovers first are “lower” and precedence values it discovers later are “higher”. Many style systems can work fine using a single precedence value because style rules are atomic. Stylesheets with the same precedence go together whether they are<link>or inline<style>tags or loaded usingpreinitfunctions.",
            "href: a string. Allows React tode-duplicate stylesthat have the samehref.",
            "media: a string. Restricts the stylesheet to a certainmedia query.",
            "nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.",
            "title: a string. Specifies the name of analternative stylesheet."
          ]
        },
        {
          "type": "p",
          "text": "Props that arenot recommendedfor use with React:"
        },
        {
          "type": "list",
          "items": [
            "blocking: a string. If set to\"render\", instructs the browser not to render the page until the stylesheet is loaded. React provides more fine-grained control using Suspense."
          ]
        },
        {
          "type": "p",
          "text": "React can move<style>components to the document’s<head>, de-duplicate identical stylesheets, andsuspendwhile the stylesheet is loading. To opt into this behavior, provide thehrefandprecedenceprops. React will de-duplicate styles if they have the samehref. The precedence prop tells React where to rank the<style>DOM node relative to others in the document<head>, which determines which stylesheet can override the other. This special treatment comes with two caveats:"
        },
        {
          "type": "list",
          "items": [
            "React will ignore changes to props after the style has been rendered. (React will issue a warning in development if this happens.)",
            "React may leave the style in the DOM even after the component that rendered it has been unmounted."
          ]
        },
        {
          "type": "p",
          "text": "If a component depends on certain CSS styles in order to be displayed correctly, you can render an inline stylesheet within the component. If you supply anhrefandprecedenceprop, your component will suspend while the stylesheet is loading. (Even with inline stylesheets, there may be a loading time due to fonts and images that the stylesheet refers to.) Thehrefprop should uniquely identify the stylesheet, because React will de-duplicate stylesheets that have the samehref."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';import{useId}from'react';functionPieChart({data,colors}){constid=useId();conststylesheet=colors.map((color,index)=>`#${id}.color-${index}: \\{ color: \"${color}\"; \\}`).join();return(<><stylehref={\"PieChart-\"+JSON.stringify(colors)}precedence=\"medium\">{stylesheet}</style><svgid={id}>…</svg></>);}exportdefaultfunctionApp(){return(<ShowRenderedHTML><PieChartdata=\"...\"colors={['red','green','blue']}/></ShowRenderedHTML>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/textarea",
      "title": "<textarea> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<textarea>componentlets you render a multiline text input."
        },
        {
          "type": "code",
          "code": "<textarea/>"
        },
        {
          "type": "list",
          "items": [
            "Reference<textarea>",
            "<textarea>",
            "UsageDisplaying a text areaProviding a label for a text areaProviding an initial value for a text areaReading the text area value when submitting a formControlling a text area with a state variable",
            "Displaying a text area",
            "Providing a label for a text area",
            "Providing an initial value for a text area",
            "Reading the text area value when submitting a form",
            "Controlling a text area with a state variable",
            "TroubleshootingMy text area doesn’t update when I type into itMy text area caret jumps to the beginning on every keystrokeI’m getting an error: “A component is changing an uncontrolled input to be controlled”",
            "My text area doesn’t update when I type into it",
            "My text area caret jumps to the beginning on every keystroke",
            "I’m getting an error: “A component is changing an uncontrolled input to be controlled”"
          ]
        },
        {
          "type": "p",
          "text": "To display a text area, render thebuilt-in browser<textarea>component."
        },
        {
          "type": "code",
          "code": "<textareaname=\"postContent\"/>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<textarea>supports allcommon element props. You canmake a text area controlledby passing avalueprop:"
        },
        {
          "type": "list",
          "items": ["value: A string. Controls the text inside the text area."]
        },
        {
          "type": "p",
          "text": "When you passvalue, you must also pass anonChangehandler that updates the passed value. If your<textarea>is uncontrolled, you may pass thedefaultValueprop instead:"
        },
        {
          "type": "list",
          "items": [
            "defaultValue: A string. Specifiesthe initial valuefor a text area."
          ]
        },
        {
          "type": "p",
          "text": "These<textarea>props are relevant both for uncontrolled and controlled text areas:"
        },
        {
          "type": "list",
          "items": [
            "autoComplete: Either'on'or'off'. Specifies the autocomplete behavior.",
            "autoFocus: A boolean. Iftrue, React will focus the element on mount.",
            "children:<textarea>does not accept children. To set the initial value, usedefaultValue.",
            "cols: A number. Specifies the default width in average character widths. Defaults to20.",
            "disabled: A boolean. Iftrue, the input will not be interactive and will appear dimmed.",
            "form: A string. Specifies theidof the<form>this input belongs to. If omitted, it’s the closest parent form.",
            "maxLength: A number. Specifies the maximum length of text.",
            "minLength: A number. Specifies the minimum length of text.",
            "name: A string. Specifies the name for this input that’ssubmitted with the form.",
            "onChange: AnEventhandlerfunction. Required forcontrolled text areas.Fires immediately when the input’s value is changed by the user (for example, it fires on every keystroke). Behaves like the browserinputevent.",
            "onChangeCapture: A version ofonChangethat fires in thecapture phase.",
            "onInput: AnEventhandlerfunction. Fires immediately when the value is changed by the user. For historical reasons, in React it is idiomatic to useonChangeinstead which works similarly.",
            "onInputCapture: A version ofonInputthat fires in thecapture phase.",
            "onInvalid: AnEventhandlerfunction. Fires if an input fails validation on form submit. Unlike the built-ininvalidevent, the ReactonInvalidevent bubbles.",
            "onInvalidCapture: A version ofonInvalidthat fires in thecapture phase.",
            "onSelect: AnEventhandlerfunction. Fires after the selection inside the<textarea>changes. React extends theonSelectevent to also fire for empty selection and on edits (which may affect the selection).",
            "onSelectCapture: A version ofonSelectthat fires in thecapture phase.",
            "placeholder: A string. Displayed in a dimmed color when the text area value is empty.",
            "readOnly: A boolean. Iftrue, the text area is not editable by the user.",
            "required: A boolean. Iftrue, the value must be provided for the form to submit.",
            "rows: A number. Specifies the default height in average character heights. Defaults to2.",
            "wrap: Either'hard','soft', or'off'. Specifies how the text should be wrapped when submitting a form."
          ]
        },
        {
          "type": "list",
          "items": [
            "Passing children like<textarea>something</textarea>is not allowed.UsedefaultValuefor initial content.",
            "If a text area receives a stringvalueprop, it will betreated as controlled.",
            "A text area can’t be both controlled and uncontrolled at the same time.",
            "A text area cannot switch between being controlled or uncontrolled over its lifetime.",
            "Every controlled text area needs anonChangeevent handler that synchronously updates its backing value."
          ]
        },
        {
          "type": "p",
          "text": "Render<textarea>to display a text area. You can specify its default size with therowsandcolsattributes, but by default the user will be able to resize it. To disable resizing, you can specifyresize: nonein the CSS."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionNewPost(){return(<label>Write your post:<textareaname=\"postContent\"rows={4}cols={40}/></label>);}"
        },
        {
          "type": "p",
          "text": "Typically, you will place every<textarea>inside a<label>tag. This tells the browser that this label is associated with that text area. When the user clicks the label, the browser will focus the text area. It’s also essential for accessibility: a screen reader will announce the label caption when the user focuses the text area. If you can’t nest<textarea>into a<label>, associate them by passing the same ID to<textarea id>and<label htmlFor>.To avoid conflicts between instances of one component, generate such an ID withuseId."
        },
        {
          "type": "code",
          "code": "import{useId}from'react';exportdefaultfunctionForm(){constpostTextAreaId=useId();return(<><labelhtmlFor={postTextAreaId}>Write your post:</label><textareaid={postTextAreaId}name=\"postContent\"rows={4}cols={40}/></>);}"
        },
        {
          "type": "p",
          "text": "You can optionally specify the initial value for the text area. Pass it as thedefaultValuestring."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionEditPost(){return(<label>Edit your post:<textareaname=\"postContent\"defaultValue=\"I really enjoyed biking yesterday!\"rows={4}cols={40}/></label>);}"
        },
        {
          "type": "p",
          "text": "Unlike in HTML, passing initial text like<textarea>Some content</textarea>is not supported."
        },
        {
          "type": "p",
          "text": "Add a<form>around your textarea with a<button type=\"submit\">inside. It will call your<form onSubmit>event handler. By default, the browser will send the form data to the current URL and refresh the page. You can override that behavior by callinge.preventDefault(). Read the form data withnew FormData(e.target)."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionEditPost(){functionhandleSubmit(e){// Prevent the browser from reloading the pagee.preventDefault();// Read the form dataconstform=e.target;constformData=newFormData(form);// You can pass formData as a fetch body directly:fetch('/some-api',{method:form.method,body:formData});// Or you can work with it as a plain object:constformJson=Object.fromEntries(formData.entries());console.log(formJson);}return(<formmethod=\"post\"onSubmit={handleSubmit}><label>Post title:<inputname=\"postTitle\"defaultValue=\"Biking\"/></label><label>Edit your post:<textareaname=\"postContent\"defaultValue=\"I really enjoyed biking yesterday!\"rows={4}cols={40}/></label><hr/><buttontype=\"reset\">Reset edits</button><buttontype=\"submit\">Save post</button></form>);}"
        },
        {
          "type": "p",
          "text": "Give anameto your<textarea>, for example<textarea name=\"postContent\" />. Thenameyou specified will be used as a key in the form data, for example{ postContent: \"Your post\" }."
        },
        {
          "type": "p",
          "text": "By default,any<button>inside a<form>will submit it. This can be surprising! If you have your own customButtonReact component, consider returning<button type=\"button\">instead of<button>. Then, to be explicit, use<button type=\"submit\">for buttons thataresupposed to submit the form."
        },
        {
          "type": "p",
          "text": "A text area like<textarea />isuncontrolled.Even if youpass an initial valuelike<textarea defaultValue=\"Initial text\" />, your JSX only specifies the initial value, not the value right now. To render acontrolledtext area, pass thevalueprop to it.React will force the text area to always have thevalueyou passed. Typically, you will control a text area by declaring astate variable:"
        },
        {
          "type": "code",
          "code": "functionNewPost(){const[postContent,setPostContent]=useState('');// Declare a state variable...// ...return(<textareavalue={postContent}// ...force the input's value to match the state variable...onChange={e=>setPostContent(e.target.value)}// ... and update the state variable on any edits!/>);}"
        },
        {
          "type": "p",
          "text": "This is useful if you want to re-render some part of the UI in response to every keystroke."
        },
        {
          "type": "code",
          "code": "{\"dependencies\":{\"react\":\"latest\",\"react-dom\":\"latest\",\"react-scripts\":\"latest\",\"remarkable\":\"2.0.1\"},\"scripts\":{\"start\":\"react-scripts start\",\"build\":\"react-scripts build\",\"test\":\"react-scripts test --env=jsdom\",\"eject\":\"react-scripts eject\"},\"devDependencies\":{}}"
        },
        {
          "type": "p",
          "text": "If you passvaluewithoutonChange, it will be impossible to type into the text area.When you control a text area by passing somevalueto it, youforceit to always have the value you passed. So if you pass a state variable as avaluebut forget to update that state variable synchronously during theonChangeevent handler, React will revert the text area after every keystroke back to thevaluethat you specified."
        },
        {
          "type": "p",
          "text": "If you render a text area withvaluebut noonChange, you will see an error in the console:"
        },
        {
          "type": "code",
          "code": "// 🔴 Bug: controlled text area with no onChange handler<textareavalue={something}/>"
        },
        {
          "type": "p",
          "text": "As the error message suggests, if you only wanted tospecify theinitialvalue,passdefaultValueinstead:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: uncontrolled text area with an initial value<textareadefaultValue={something}/>"
        },
        {
          "type": "p",
          "text": "If you wantto control this text area with a state variable,specify anonChangehandler:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: controlled text area with onChange<textareavalue={something}onChange={e=>setSomething(e.target.value)}/>"
        },
        {
          "type": "p",
          "text": "If the value is intentionally read-only, add areadOnlyprop to suppress the error:"
        },
        {
          "type": "code",
          "code": "// ✅ Good: readonly controlled text area without on change<textareavalue={something}readOnly={true}/>"
        },
        {
          "type": "p",
          "text": "If youcontrol a text area,you must update its state variable to the text area’s value from the DOM duringonChange. You can’t update it to something other thane.target.value:"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// 🔴 Bug: updating an input to something other than e.target.valuesetFirstName(e.target.value.toUpperCase());}"
        },
        {
          "type": "p",
          "text": "You also can’t update it asynchronously:"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// 🔴 Bug: updating an input asynchronouslysetTimeout(()=>{setFirstName(e.target.value);},100);}"
        },
        {
          "type": "p",
          "text": "To fix your code, update it synchronously toe.target.value:"
        },
        {
          "type": "code",
          "code": "functionhandleChange(e){// ✅ Updating a controlled input to e.target.value synchronouslysetFirstName(e.target.value);}"
        },
        {
          "type": "p",
          "text": "If this doesn’t fix the problem, it’s possible that the text area gets removed and re-added from the DOM on every keystroke. This can happen if you’re accidentallyresetting stateon every re-render. For example, this can happen if the text area or one of its parents always receives a differentkeyattribute, or if you nest component definitions (which is not allowed in React and causes the “inner” component to remount on every render)."
        },
        {
          "type": "p",
          "text": "If you provide avalueto the component, it must remain a string throughout its lifetime. You cannot passvalue={undefined}first and later passvalue=\"some string\"because React won’t know whether you want the component to be uncontrolled or controlled. A controlled component should always receive a stringvalue, notnullorundefined. If yourvalueis coming from an API or a state variable, it might be initialized tonullorundefined. In that case, either set it to an empty string ('') initially, or passvalue={someValue ?? ''}to ensurevalueis a string."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/components/title",
      "title": "<title> – React",
      "content": [
        {
          "type": "p",
          "text": "Thebuilt-in browser<title>componentlets you specify the title of the document."
        },
        {
          "type": "code",
          "code": "<title>My Blog</title>"
        },
        {
          "type": "list",
          "items": [
            "Reference<title>",
            "<title>",
            "UsageSet the document titleUse variables in the title",
            "Set the document title",
            "Use variables in the title"
          ]
        },
        {
          "type": "p",
          "text": "To specify the title of the document, render thebuilt-in browser<title>component. You can render<title>from any component and React will always place the corresponding DOM element in the document head."
        },
        {
          "type": "code",
          "code": "<title>My Blog</title>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "<title>supports allcommon element props."
        },
        {
          "type": "list",
          "items": [
            "children:<title>accepts only text as a child. This text will become the title of the document. You can also pass your own components as long as they only render text."
          ]
        },
        {
          "type": "p",
          "text": "React will always place the DOM element corresponding to the<title>component within the document’s<head>, regardless of where in the React tree it is rendered. The<head>is the only valid place for<title>to exist within the DOM, yet it’s convenient and keeps things composable if a component representing a specific page can render its<title>itself. There are two exception to this:"
        },
        {
          "type": "list",
          "items": [
            "If<title>is within an<svg>component, then there is no special behavior, because in this context it doesn’t represent the document’s title but rather is anaccessibility annotation for that SVG graphic.",
            "If the<title>has anitemPropprop, there is no special behavior, because in this case it doesn’t represent the document’s title but rather metadata about a specific part of the page."
          ]
        },
        {
          "type": "p",
          "text": "Only render a single<title>at a time. If more than one component renders a<title>tag at the same time, React will place all of those titles in the document head. When this happens, the behavior of browsers and search engines is undefined."
        },
        {
          "type": "p",
          "text": "Render the<title>component from any component with text as its children. React will put a<title>DOM node in the document<head>."
        },
        {
          "type": "code",
          "code": "importShowRenderedHTMLfrom'./ShowRenderedHTML.js';exportdefaultfunctionContactUsPage(){return(<ShowRenderedHTML><title>My Site: Contact Us</title><h1>Contact Us</h1><p>Email us at support@example.com</p></ShowRenderedHTML>);}"
        },
        {
          "type": "p",
          "text": "The children of the<title>component must be a single string of text. (Or a single number or a single object with atoStringmethod.) It might not be obvious, but using JSX curly braces like this:"
        },
        {
          "type": "code",
          "code": "<title>Results page{pageNumber}</title>// 🔴 Problem: This is not a single string"
        },
        {
          "type": "p",
          "text": "… actually causes the<title>component to get a two-element array as its children (the string\"Results page\"and the value ofpageNumber). This will cause an error. Instead, use string interpolation to pass<title>a single string:"
        },
        {
          "type": "code",
          "code": "<title>{`Results page${pageNumber}`}</title>"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/createPortal",
      "title": "createPortal – React",
      "content": [
        {
          "type": "p",
          "text": "createPortallets you render some children into a different part of the DOM."
        },
        {
          "type": "code",
          "code": "<div><SomeComponent/>{createPortal(children,domNode,key?)}</div>"
        },
        {
          "type": "list",
          "items": [
            "ReferencecreatePortal(children, domNode, key?)",
            "createPortal(children, domNode, key?)",
            "UsageRendering to a different part of the DOMRendering a modal dialog with a portalRendering React components into non-React server markupRendering React components into non-React DOM nodes",
            "Rendering to a different part of the DOM",
            "Rendering a modal dialog with a portal",
            "Rendering React components into non-React server markup",
            "Rendering React components into non-React DOM nodes"
          ]
        },
        {
          "type": "p",
          "text": "To create a portal, callcreatePortal, passing some JSX, and the DOM node where it should be rendered:"
        },
        {
          "type": "code",
          "code": "import{createPortal}from'react-dom';// ...<div><p>This child is placed in the parent div.</p>{createPortal(<p>This child is placed in the document body.</p>,document.body)}</div>"
        },
        {
          "type": "p",
          "text": "See more examples below. A portal only changes the physical placement of the DOM node. In every other way, the JSX you render into a portal acts as a child node of the React component that renders it. For example, the child can access the context provided by the parent tree, and events bubble up from children to parents according to the React tree."
        },
        {
          "type": "list",
          "items": [
            "children: Anything that can be rendered with React, such as a piece of JSX (e.g.<div />or<SomeComponent />), aFragment(<>...</>), a string or a number, or an array of these.",
            "domNode: Some DOM node, such as those returned bydocument.getElementById(). The node must already exist. Passing a different DOM node during an update will cause the portal content to be recreated.",
            "optionalkey: A unique string or number to be used as the portal’skey."
          ]
        },
        {
          "type": "p",
          "text": "createPortalreturns a React node that can be included into JSX or returned from a React component. If React encounters it in the render output, it will place the providedchildreninside the provideddomNode."
        },
        {
          "type": "list",
          "items": [
            "Events from portals propagate according to the React tree rather than the DOM tree. For example, if you click inside a portal, and the portal is wrapped in<div onClick>, thatonClickhandler will fire. If this causes issues, either stop the event propagation from inside the portal, or move the portal itself up in the React tree."
          ]
        },
        {
          "type": "p",
          "text": "Portalslet your components render some of their children into a different place in the DOM. This lets a part of your component “escape” from whatever containers it may be in. For example, a component can display a modal dialog or a tooltip that appears above and outside of the rest of the page. To create a portal, render the result ofcreatePortalwithsome JSXand theDOM node where it should go:"
        },
        {
          "type": "code",
          "code": "import{createPortal}from'react-dom';functionMyComponent(){return(<divstyle={{border:'2px solid black'}}><p>This child is placed in the parent div.</p>{createPortal(<p>This child is placed in the document body.</p>,document.body)}</div>);}"
        },
        {
          "type": "p",
          "text": "React will put the DOM nodes forthe JSX you passedinside of theDOM node you provided. Without a portal, the second<p>would be placed inside the parent<div>, but the portal “teleported” it into thedocument.body:"
        },
        {
          "type": "code",
          "code": "import{createPortal}from'react-dom';exportdefaultfunctionMyComponent(){return(<divstyle={{border:'2px solid black'}}><p>This child is placed in the parent div.</p>{createPortal(<p>This child is placed in the document body.</p>,document.body)}</div>);}"
        },
        {
          "type": "p",
          "text": "Notice how the second paragraph visually appears outside the parent<div>with the border. If you inspect the DOM structure with developer tools, you’ll see that the second<p>got placed directly into the<body>:"
        },
        {
          "type": "code",
          "code": "<body><divid=\"root\">...<divstyle=\"border:2pxsolidblack\"><p>This child is placed inside the parent div.</p></div>...</div><p>This child is placed in the document body.</p></body>"
        },
        {
          "type": "p",
          "text": "A portal only changes the physical placement of the DOM node. In every other way, the JSX you render into a portal acts as a child node of the React component that renders it. For example, the child can access the context provided by the parent tree, and events still bubble up from children to parents according to the React tree."
        },
        {
          "type": "p",
          "text": "You can use a portal to create a modal dialog that floats above the rest of the page, even if the component that summons the dialog is inside a container withoverflow: hiddenor other styles that interfere with the dialog. In this example, the two containers have styles that disrupt the modal dialog, but the one rendered into a portal is unaffected because, in the DOM, the modal is not contained within the parent JSX elements."
        },
        {
          "type": "code",
          "code": "importNoPortalExamplefrom'./NoPortalExample';importPortalExamplefrom'./PortalExample';exportdefaultfunctionApp(){return(<><divclassName=\"clipping-container\"><NoPortalExample/></div><divclassName=\"clipping-container\"><PortalExample/></div></>);}"
        },
        {
          "type": "p",
          "text": "It’s important to make sure that your app is accessible when using portals. For instance, you may need to manage keyboard focus so that the user can move the focus in and out of the portal in a natural way. Follow theWAI-ARIA Modal Authoring Practiceswhen creating modals. If you use a community package, ensure that it is accessible and follows these guidelines."
        },
        {
          "type": "p",
          "text": "Portals can be useful if your React root is only part of a static or server-rendered page that isn’t built with React. For example, if your page is built with a server framework like Rails, you can create areas of interactivity within static areas such as sidebars. Compared with havingmultiple separate React roots,portals let you treat the app as a single React tree with shared state even though its parts render to different parts of the DOM."
        },
        {
          "type": "code",
          "code": "import{createPortal}from'react-dom';constsidebarContentEl=document.getElementById('sidebar-content');exportdefaultfunctionApp(){return(<><MainContent/>{createPortal(<SidebarContent/>,sidebarContentEl)}</>);}functionMainContent(){return<p>This part is rendered by React</p>;}functionSidebarContent(){return<p>This part is also rendered by React!</p>;}"
        },
        {
          "type": "p",
          "text": "You can also use a portal to manage the content of a DOM node that’s managed outside of React. For example, suppose you’re integrating with a non-React map widget and you want to render React content inside a popup. To do this, declare apopupContainerstate variable to store the DOM node you’re going to render into:"
        },
        {
          "type": "code",
          "code": "const[popupContainer,setPopupContainer]=useState(null);"
        },
        {
          "type": "p",
          "text": "When you create the third-party widget, store the DOM node returned by the widget so you can render into it:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{if(mapRef.current===null){constmap=createMapWidget(containerRef.current);mapRef.current=map;constpopupDiv=addPopupToMapWidget(map);setPopupContainer(popupDiv);}},[]);"
        },
        {
          "type": "p",
          "text": "This lets you usecreatePortalto render React content intopopupContaineronce it becomes available:"
        },
        {
          "type": "code",
          "code": "return(<divstyle={{width:250,height:250}}ref={containerRef}>{popupContainer!==null&&createPortal(<p>Hello from React!</p>,popupContainer)}</div>);"
        },
        {
          "type": "p",
          "text": "Here is a complete example you can play with:"
        },
        {
          "type": "code",
          "code": "import{useRef,useEffect,useState}from'react';import{createPortal}from'react-dom';import{createMapWidget,addPopupToMapWidget}from'./map-widget.js';exportdefaultfunctionMap(){constcontainerRef=useRef(null);constmapRef=useRef(null);const[popupContainer,setPopupContainer]=useState(null);useEffect(()=>{if(mapRef.current===null){constmap=createMapWidget(containerRef.current);mapRef.current=map;constpopupDiv=addPopupToMapWidget(map);setPopupContainer(popupDiv);}},[]);return(<divstyle={{width:250,height:250}}ref={containerRef}>{popupContainer!==null&&createPortal(<p>Hello from React!</p>,popupContainer)}</div>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/flushSync",
      "title": "flushSync – React",
      "content": [
        {
          "type": "p",
          "text": "UsingflushSyncis uncommon and can hurt the performance of your app."
        },
        {
          "type": "p",
          "text": "flushSynclets you force React to flush any updates inside the provided callback synchronously. This ensures that the DOM is updated immediately."
        },
        {
          "type": "code",
          "code": "flushSync(callback)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceflushSync(callback)",
            "flushSync(callback)",
            "UsageFlushing updates for third-party integrations",
            "Flushing updates for third-party integrations"
          ]
        },
        {
          "type": "p",
          "text": "CallflushSyncto force React to flush any pending work and update the DOM synchronously."
        },
        {
          "type": "code",
          "code": "import{flushSync}from'react-dom';flushSync(()=>{setSomething(123);});"
        },
        {
          "type": "p",
          "text": "Most of the time,flushSynccan be avoided. UseflushSyncas last resort. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "callback: A function. React will immediately call this callback and flush any updates it contains synchronously. It may also flush any pending updates, or Effects, or updates inside of Effects. If an update suspends as a result of thisflushSynccall, the fallbacks may be re-shown."
          ]
        },
        {
          "type": "p",
          "text": "flushSyncreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "flushSynccan significantly hurt performance. Use sparingly.",
            "flushSyncmay force pending Suspense boundaries to show theirfallbackstate.",
            "flushSyncmay run pending Effects and synchronously apply any updates they contain before returning.",
            "flushSyncmay flush updates outside the callback when necessary to flush the updates inside the callback. For example, if there are pending updates from a click, React may flush those before flushing the updates inside the callback."
          ]
        },
        {
          "type": "p",
          "text": "When integrating with third-party code such as browser APIs or UI libraries, it may be necessary to force React to flush updates. UseflushSyncto force React to flush anystate updatesinside the callback synchronously:"
        },
        {
          "type": "code",
          "code": "flushSync(()=>{setSomething(123);});// By this line, the DOM is updated."
        },
        {
          "type": "p",
          "text": "This ensures that, by the time the next line of code runs, React has already updated the DOM. UsingflushSyncis uncommon, and using it often can significantly hurt the performance of your app.If your app only uses React APIs, and does not integrate with third-party libraries,flushSyncshould be unnecessary. However, it can be helpful for integrating with third-party code like browser APIs. Some browser APIs expect results inside of callbacks to be written to the DOM synchronously, by the end of the callback, so the browser can do something with the rendered DOM. In most cases, React handles this for you automatically. But in some cases it may be necessary to force a synchronous update. For example, the browseronbeforeprintAPI allows you to change the page immediately before the print dialog opens. This is useful for applying custom print styles that allow the document to display better for printing. In the example below, you useflushSyncinside of theonbeforeprintcallback to immediately “flush” the React state to the DOM. Then, by the time the print dialog opens,isPrintingdisplays “yes”:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{flushSync}from'react-dom';exportdefaultfunctionPrintApp(){const[isPrinting,setIsPrinting]=useState(false);useEffect(()=>{functionhandleBeforePrint(){flushSync(()=>{setIsPrinting(true);})}functionhandleAfterPrint(){setIsPrinting(false);}window.addEventListener('beforeprint',handleBeforePrint);window.addEventListener('afterprint',handleAfterPrint);return()=>{window.removeEventListener('beforeprint',handleBeforePrint);window.removeEventListener('afterprint',handleAfterPrint);}},[]);return(<><h1>isPrinting:{isPrinting?'yes':'no'}</h1><buttononClick={()=>window.print()}>Print</button></>);}"
        },
        {
          "type": "p",
          "text": "WithoutflushSync, the print dialog will displayisPrintingas “no”. This is because React batches the updates asynchronously and the print dialog is displayed before the state is updated."
        },
        {
          "type": "p",
          "text": "flushSynccan significantly hurt performance, and may unexpectedly force pending Suspense boundaries to show their fallback state. Most of the time,flushSynccan be avoided, so useflushSyncas a last resort."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/hooks",
      "title": "Built-in React DOM Hooks – React",
      "content": [
        {
          "type": "p",
          "text": "Thereact-dompackage contains Hooks that are only supported for web applications (which run in the browser DOM environment). These Hooks are not supported in non-browser environments like iOS, Android, or Windows applications. If you are looking for Hooks that are supported in web browsersand other environmentsseethe React Hooks page. This page lists all the Hooks in thereact-dompackage."
        },
        {
          "type": "p",
          "text": "Formslet you create interactive controls for submitting information.  To manage forms in your components, use one of these Hooks:"
        },
        {
          "type": "list",
          "items": [
            "useFormStatusallows you to make updates to the UI based on the status of the a form."
          ]
        },
        {
          "type": "code",
          "code": "functionForm({action}){asyncfunctionincrement(n){returnn+1;}const[count,incrementFormAction]=useActionState(increment,0);return(<formaction={action}><buttonformAction={incrementFormAction}>Count:{count}</button><Button/></form>);}functionButton(){const{pending}=useFormStatus();return(<buttondisabled={pending}type=\"submit\">Submit</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/hooks/useFormState",
      "title": "useActionState – React",
      "content": [
        {
          "type": "p",
          "text": "useActionStateis a Hook that allows you to update state based on the result of a form action."
        },
        {
          "type": "code",
          "code": "const[state,formAction,isPending]=useActionState(fn,initialState,permalink?);"
        },
        {
          "type": "p",
          "text": "In earlier React Canary versions, this API was part of React DOM and calleduseFormState."
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseActionState(action, initialState, permalink?)",
            "useActionState(action, initialState, permalink?)",
            "UsageUsing information returned by a form action",
            "Using information returned by a form action",
            "TroubleshootingMy action can no longer read the submitted form data",
            "My action can no longer read the submitted form data"
          ]
        },
        {
          "type": "p",
          "text": "CalluseActionStateat the top level of your component to create component state that is updatedwhen a form action is invoked. You passuseActionStatean existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state and whether the Action is still pending. The latest form state is also passed to the function that you provided."
        },
        {
          "type": "code",
          "code": "import{useActionState}from\"react\";asyncfunctionincrement(previousState,formData){returnpreviousState+1;}functionStatefulForm({}){const[state,formAction]=useActionState(increment,0);return(<form>{state}<buttonformAction={formAction}>Increment</button></form>)}"
        },
        {
          "type": "p",
          "text": "The form state is the value returned by the action when the form was last submitted. If the form has not yet been submitted, it is the initial state that you pass. If used with a Server Function,useActionStateallows the server’s response from submitting the form to be shown even before hydration has completed. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "fn: The function to be called when the form is submitted or button pressed. When the function is called, it will receive the previous state of the form (initially theinitialStatethat you pass, subsequently its previous return value) as its initial argument, followed by the arguments that a form action normally receives.",
            "initialState: The value you want the state to be initially. It can be any serializable value. This argument is ignored after the action is first invoked.",
            "optionalpermalink: A string containing the unique page URL that this form modifies. For use on pages with dynamic content (eg: feeds) in conjunction with progressive enhancement: iffnis aserver functionand the form is submitted before the JavaScript bundle loads, the browser will navigate to the specified permalink URL, rather than the current page’s URL. Ensure that the same form component is rendered on the destination page (including the same actionfnandpermalink) so that React knows how to pass the state through. Once the form has been hydrated, this parameter has no effect."
          ]
        },
        {
          "type": "p",
          "text": "useActionStatereturns an array with the following values:"
        },
        {
          "type": "list",
          "items": [
            "The current state. During the first render, it will match theinitialStateyou have passed. After the action is invoked, it will match the value returned by the action.",
            "A new action that you can pass as theactionprop to yourformcomponent orformActionprop to anybuttoncomponent within the form.",
            "TheisPendingflag that tells you whether there is a pending Transition."
          ]
        },
        {
          "type": "list",
          "items": [
            "When used with a framework that supports React Server Components,useActionStatelets you make forms interactive before JavaScript has executed on the client. When used without Server Components, it is equivalent to component local state.",
            "The function passed touseActionStatereceives an extra argument, the previous or initial state, as its first argument. This makes its signature different than if it were used directly as a form action without usinguseActionState."
          ]
        },
        {
          "type": "p",
          "text": "CalluseActionStateat the top level of your component to access the return value of an action from the last time a form was submitted."
        },
        {
          "type": "code",
          "code": "import{useActionState}from'react';import{action}from'./actions.js';functionMyComponent(){const[state,formAction]=useActionState(action,null);// ...return(<formaction={formAction}>{/* ... */}</form>);}"
        },
        {
          "type": "p",
          "text": "useActionStatereturns an array with the following items:"
        },
        {
          "type": "list",
          "items": [
            "Thecurrent stateof the form, which is initially set to theinitial stateyou provided, and after the form is submitted is set to the return value of theactionyou provided.",
            "Anew actionthat you pass to<form>as itsactionprop.",
            "Apending statethat you can utilise whilst your action is processing."
          ]
        },
        {
          "type": "p",
          "text": "When the form is submitted, theactionfunction that you provided will be called. Its return value will become the newcurrent stateof the form. Theactionthat you provide will also receive a new first argument, namely thecurrent stateof the form. The first time the form is submitted, this will be theinitial stateyou provided, while with subsequent submissions, it will be the return value from the last time the action was called. The rest of the arguments are the same as ifuseActionStatehad not been used."
        },
        {
          "type": "code",
          "code": "functionaction(currentState,formData){// ...return'next state';}"
        },
        {
          "type": "p",
          "text": "To display messages such as an error message or toast that’s returned by a Server Function, wrap the action in a call touseActionState."
        },
        {
          "type": "code",
          "code": "import{useActionState,useState}from\"react\";import{addToCart}from\"./actions.js\";functionAddToCartForm({itemID,itemTitle}){const[message,formAction,isPending]=useActionState(addToCart,null);return(<formaction={formAction}><h2>{itemTitle}</h2><inputtype=\"hidden\"name=\"itemID\"value={itemID}/><buttontype=\"submit\">Add to Cart</button>{isPending?\"Loading...\":message}</form>);}exportdefaultfunctionApp(){return(<><AddToCartFormitemID=\"1\"itemTitle=\"JavaScript: The Definitive Guide\"/><AddToCartFormitemID=\"2\"itemTitle=\"JavaScript: The Good Parts\"/></>)}"
        },
        {
          "type": "p",
          "text": "When you wrap an action withuseActionState, it gets an extra argumentas its first argument. The submitted form data is therefore itssecondargument instead of its first as it would usually be. The new first argument that gets added is the current state of the form."
        },
        {
          "type": "code",
          "code": "functionaction(currentState,formData){// ...}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/hooks/useFormStatus",
      "title": "useFormStatus – React",
      "content": [
        {
          "type": "p",
          "text": "useFormStatusis a Hook that gives you status information of the last form submission."
        },
        {
          "type": "code",
          "code": "const{pending,data,method,action}=useFormStatus();"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseFormStatus()",
            "useFormStatus()",
            "UsageDisplay a pending state during form submissionRead the form data being submitted",
            "Display a pending state during form submission",
            "Read the form data being submitted",
            "Troubleshootingstatus.pendingis nevertrue",
            "status.pendingis nevertrue"
          ]
        },
        {
          "type": "p",
          "text": "TheuseFormStatusHook provides status information of the last form submission."
        },
        {
          "type": "code",
          "code": "import{useFormStatus}from\"react-dom\";importactionfrom'./actions';functionSubmit(){conststatus=useFormStatus();return<buttondisabled={status.pending}>Submit</button>}exportdefaultfunctionApp(){return(<formaction={action}><Submit/></form>);}"
        },
        {
          "type": "p",
          "text": "To get status information, theSubmitcomponent must be rendered within a<form>. The Hook returns information like thependingproperty which tells you if the form is actively submitting. In the above example,Submituses this information to disable<button>presses while the form is submitting. See more examples below."
        },
        {
          "type": "p",
          "text": "useFormStatusdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "Astatusobject with the following properties:"
        },
        {
          "type": "list",
          "items": [
            "pending: A boolean. Iftrue, this means the parent<form>is pending submission. Otherwise,false.",
            "data: An object implementing theFormData interfacethat contains the data the parent<form>is submitting. If there is no active submission or no parent<form>, it will benull.",
            "method: A string value of either'get'or'post'. This represents whether the parent<form>is submitting with either aGETorPOSTHTTP method. By default, a<form>will use theGETmethod and can be specified by themethodproperty."
          ]
        },
        {
          "type": "list",
          "items": [
            "action: A reference to the function passed to theactionprop on the parent<form>. If there is no parent<form>, the property isnull. If there is a URI value provided to theactionprop, or noactionprop specified,status.actionwill benull."
          ]
        },
        {
          "type": "list",
          "items": [
            "TheuseFormStatusHook must be called from a component that is rendered inside a<form>.",
            "useFormStatuswill only return status information for a parent<form>. It will not return status information for any<form>rendered in that same component or children components."
          ]
        },
        {
          "type": "p",
          "text": "To display a pending state while a form is submitting, you can call theuseFormStatusHook in a component rendered in a<form>and read thependingproperty returned. Here, we use thependingproperty to indicate the form is submitting."
        },
        {
          "type": "code",
          "code": "import{useFormStatus}from\"react-dom\";import{submitForm}from\"./actions.js\";functionSubmit(){const{pending}=useFormStatus();return(<buttontype=\"submit\"disabled={pending}>{pending?\"Submitting...\":\"Submit\"}</button>);}functionForm({action}){return(<formaction={action}><Submit/></form>);}exportdefaultfunctionApp(){return<Formaction={submitForm}/>;}"
        },
        {
          "type": "p",
          "text": "TheuseFormStatusHook only returns status information for a parent<form>and not for any<form>rendered in the same component calling the Hook, or child components."
        },
        {
          "type": "code",
          "code": "functionForm(){// 🚩 `pending` will never be true// useFormStatus does not track the form rendered in this componentconst{pending}=useFormStatus();return<formaction={submit}></form>;}"
        },
        {
          "type": "p",
          "text": "Instead calluseFormStatusfrom inside a component that is located inside<form>."
        },
        {
          "type": "code",
          "code": "functionSubmit(){// ✅ `pending` will be derived from the form that wraps the Submit componentconst{pending}=useFormStatus();return<buttondisabled={pending}>...</button>;}functionForm(){// This is the <form> `useFormStatus` tracksreturn(<formaction={submit}><Submit/></form>);}"
        },
        {
          "type": "p",
          "text": "You can use thedataproperty of the status information returned fromuseFormStatusto display what data is being submitted by the user. Here, we have a form where users can request a username. We can useuseFormStatusto display a temporary status message confirming what username they have requested."
        },
        {
          "type": "code",
          "code": "import{useState,useMemo,useRef}from'react';import{useFormStatus}from'react-dom';exportdefaultfunctionUsernameForm(){const{pending,data}=useFormStatus();return(<div><h3>Request a Username:</h3><inputtype=\"text\"name=\"username\"disabled={pending}/><buttontype=\"submit\"disabled={pending}>Submit</button><br/><p>{data?`Requesting${data?.get(\"username\")}...`:''}</p></div>);}"
        },
        {
          "type": "p",
          "text": "useFormStatuswill only return status information for a parent<form>. If the component that callsuseFormStatusis not nested in a<form>,status.pendingwill always returnfalse. VerifyuseFormStatusis called in a component that is a child of a<form>element. useFormStatuswill not track the status of a<form>rendered in the same component. SeePitfallfor more details."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/preconnect",
      "title": "preconnect – React",
      "content": [
        {
          "type": "p",
          "text": "preconnectlets you eagerly connect to a server that you expect to load resources from."
        },
        {
          "type": "code",
          "code": "preconnect(\"https://example.com\");"
        },
        {
          "type": "list",
          "items": [
            "Referencepreconnect(href)",
            "preconnect(href)",
            "UsagePreconnecting when renderingPreconnecting in an event handler",
            "Preconnecting when rendering",
            "Preconnecting in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To preconnect to a host, call thepreconnectfunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{preconnect}from'react-dom';functionAppRoot(){preconnect(\"https://example.com\");// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. Thepreconnectfunction provides the browser with a hint that it should open a connection to the given server. If the browser chooses to do so, this can speed up the loading of resources from that server."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the server you want to connect to."
          ]
        },
        {
          "type": "p",
          "text": "preconnectreturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple calls topreconnectwith the same server have the same effect as a single call.",
            "In the browser, you can callpreconnectin any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,preconnectonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.",
            "If you know the specific resources you’ll need, you can callother functionsinstead that will start loading the resources right away.",
            "There is no benefit to preconnecting to the same server the webpage itself is hosted from because it’s already been connected to by the time the hint would be given."
          ]
        },
        {
          "type": "p",
          "text": "Callpreconnectwhen rendering a component if you know that its children will load external resources from that host."
        },
        {
          "type": "code",
          "code": "import{preconnect}from'react-dom';functionAppRoot(){preconnect(\"https://example.com\");return...;}"
        },
        {
          "type": "p",
          "text": "Callpreconnectin an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{preconnect}from'react-dom';functionCallToAction(){constonClick=()=>{preconnect('http://example.com');startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/prefetchDNS",
      "title": "prefetchDNS – React",
      "content": [
        {
          "type": "p",
          "text": "prefetchDNSlets you eagerly look up the IP of a server that you expect to load resources from."
        },
        {
          "type": "code",
          "code": "prefetchDNS(\"https://example.com\");"
        },
        {
          "type": "list",
          "items": [
            "ReferenceprefetchDNS(href)",
            "prefetchDNS(href)",
            "UsagePrefetching DNS when renderingPrefetching DNS in an event handler",
            "Prefetching DNS when rendering",
            "Prefetching DNS in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To look up a host, call theprefetchDNSfunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{prefetchDNS}from'react-dom';functionAppRoot(){prefetchDNS(\"https://example.com\");// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. The prefetchDNS function provides the browser with a hint that it should look up the IP address of a given server. If the browser chooses to do so, this can speed up the loading of resources from that server."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the server you want to connect to."
          ]
        },
        {
          "type": "p",
          "text": "prefetchDNSreturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple calls toprefetchDNSwith the same server have the same effect as a single call.",
            "In the browser, you can callprefetchDNSin any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,prefetchDNSonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored.",
            "If you know the specific resources you’ll need, you can callother functionsinstead that will start loading the resources right away.",
            "There is no benefit to prefetching the same server the webpage itself is hosted from because it’s already been looked up by the time the hint would be given.",
            "Compared withpreconnect,prefetchDNSmay be better if you are speculatively connecting to a large number of domains, in which case the overhead of preconnections might outweigh the benefit."
          ]
        },
        {
          "type": "p",
          "text": "CallprefetchDNSwhen rendering a component if you know that its children will load external resources from that host."
        },
        {
          "type": "code",
          "code": "import{prefetchDNS}from'react-dom';functionAppRoot(){prefetchDNS(\"https://example.com\");return...;}"
        },
        {
          "type": "p",
          "text": "CallprefetchDNSin an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{prefetchDNS}from'react-dom';functionCallToAction(){constonClick=()=>{prefetchDNS('http://example.com');startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/preinit",
      "title": "preinit – React",
      "content": [
        {
          "type": "p",
          "text": "React-based frameworksfrequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details."
        },
        {
          "type": "p",
          "text": "preinitlets you eagerly fetch and evaluate a stylesheet or external script."
        },
        {
          "type": "code",
          "code": "preinit(\"https://example.com/script.js\",{as:\"script\"});"
        },
        {
          "type": "list",
          "items": [
            "Referencepreinit(href, options)",
            "preinit(href, options)",
            "UsagePreiniting when renderingPreiniting in an event handler",
            "Preiniting when rendering",
            "Preiniting in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To preinit a script or stylesheet, call thepreinitfunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{preinit}from'react-dom';functionAppRoot(){preinit(\"https://example.com/script.js\",{as:\"script\"});// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. Thepreinitfunction provides the browser with a hint that it should start downloading and executing the given resource, which can save time. Scripts that youpreinitare executed when they finish downloading. Stylesheets that you preinit are inserted into the document, which causes them to go into effect right away."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the resource you want to download and execute.",
            "options: an object. It contains the following properties:as: a required string. The type of resource. Its possible values arescriptandstyle.precedence: a string. Required with stylesheets. Says where to insert the stylesheet relative to others. Stylesheets with higher precedence can override those with lower precedence. The possible values arereset,low,medium,high.crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials. It is required whenasis set to\"fetch\".integrity: a string. A cryptographic hash of the resource, toverify its authenticity.nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.fetchPriority: a string. Suggests a relative priority for fetching the resource. The possible values areauto(the default),high, andlow.",
            "as: a required string. The type of resource. Its possible values arescriptandstyle.",
            "precedence: a string. Required with stylesheets. Says where to insert the stylesheet relative to others. Stylesheets with higher precedence can override those with lower precedence. The possible values arereset,low,medium,high.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials. It is required whenasis set to\"fetch\".",
            "integrity: a string. A cryptographic hash of the resource, toverify its authenticity.",
            "nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.",
            "fetchPriority: a string. Suggests a relative priority for fetching the resource. The possible values areauto(the default),high, andlow."
          ]
        },
        {
          "type": "p",
          "text": "preinitreturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple calls topreinitwith the samehrefhave the same effect as a single call.",
            "In the browser, you can callpreinitin any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,preinitonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "Callpreinitwhen rendering a component if you know that it or its children will use a specific resource, and you’re OK with the resource being evaluated and thereby taking effect immediately upon being downloaded."
        },
        {
          "type": "code",
          "code": "import{preinit}from'react-dom';functionAppRoot(){preinit(\"https://example.com/script.js\",{as:\"script\"});return...;}"
        },
        {
          "type": "p",
          "text": "If you want the browser to download the script but not to execute it right away, usepreloadinstead. If you want to load an ESM module, usepreinitModule."
        },
        {
          "type": "p",
          "text": "Callpreinitin an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{preinit}from'react-dom';functionCallToAction(){constonClick=()=>{preinit(\"https://example.com/wizardStyles.css\",{as:\"style\"});startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/preinitModule",
      "title": "preinitModule – React",
      "content": [
        {
          "type": "p",
          "text": "React-based frameworksfrequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details."
        },
        {
          "type": "p",
          "text": "preinitModulelets you eagerly fetch and evaluate an ESM module."
        },
        {
          "type": "code",
          "code": "preinitModule(\"https://example.com/module.js\",{as:\"script\"});"
        },
        {
          "type": "list",
          "items": [
            "ReferencepreinitModule(href, options)",
            "preinitModule(href, options)",
            "UsagePreloading when renderingPreloading in an event handler",
            "Preloading when rendering",
            "Preloading in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To preinit an ESM module, call thepreinitModulefunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{preinitModule}from'react-dom';functionAppRoot(){preinitModule(\"https://example.com/module.js\",{as:\"script\"});// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. ThepreinitModulefunction provides the browser with a hint that it should start downloading and executing the given module, which can save time. Modules that youpreinitare executed when they finish downloading."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the module you want to download and execute.",
            "options: an object. It contains the following properties:as: a required string. It must be'script'.crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials.integrity: a string. A cryptographic hash of the module, toverify its authenticity.nonce: a string. A cryptographicnonce to allow the modulewhen using a strict Content Security Policy.",
            "as: a required string. It must be'script'.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials.",
            "integrity: a string. A cryptographic hash of the module, toverify its authenticity.",
            "nonce: a string. A cryptographicnonce to allow the modulewhen using a strict Content Security Policy."
          ]
        },
        {
          "type": "p",
          "text": "preinitModulereturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple calls topreinitModulewith the samehrefhave the same effect as a single call.",
            "In the browser, you can callpreinitModulein any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,preinitModuleonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "CallpreinitModulewhen rendering a component if you know that it or its children will use a specific module and you’re OK with the module being evaluated and thereby taking effect immediately upon being downloaded."
        },
        {
          "type": "code",
          "code": "import{preinitModule}from'react-dom';functionAppRoot(){preinitModule(\"https://example.com/module.js\",{as:\"script\"});return...;}"
        },
        {
          "type": "p",
          "text": "If you want the browser to download the module but not to execute it right away, usepreloadModuleinstead. If you want to preinit a script that isn’t an ESM module, usepreinit."
        },
        {
          "type": "p",
          "text": "CallpreinitModulein an event handler before transitioning to a page or state where the module will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{preinitModule}from'react-dom';functionCallToAction(){constonClick=()=>{preinitModule(\"https://example.com/module.js\",{as:\"script\"});startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/preload",
      "title": "preload – React",
      "content": [
        {
          "type": "p",
          "text": "React-based frameworksfrequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details."
        },
        {
          "type": "p",
          "text": "preloadlets you eagerly fetch a resource such as a stylesheet, font, or external script that you expect to use."
        },
        {
          "type": "code",
          "code": "preload(\"https://example.com/font.woff2\",{as:\"font\"});"
        },
        {
          "type": "list",
          "items": [
            "Referencepreload(href, options)",
            "preload(href, options)",
            "UsagePreloading when renderingPreloading in an event handler",
            "Preloading when rendering",
            "Preloading in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To preload a resource, call thepreloadfunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{preload}from'react-dom';functionAppRoot(){preload(\"https://example.com/font.woff2\",{as:\"font\"});// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. Thepreloadfunction provides the browser with a hint that it should start downloading the given resource, which can save time."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the resource you want to download.",
            "options: an object. It contains the following properties:as: a required string. The type of resource. Itspossible valuesareaudio,document,embed,fetch,font,image,object,script,style,track,video,worker.crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials. It is required whenasis set to\"fetch\".referrerPolicy: a string. TheReferrer headerto send when fetching. Its possible values areno-referrer-when-downgrade(the default),no-referrer,origin,origin-when-cross-origin, andunsafe-url.integrity: a string. A cryptographic hash of the resource, toverify its authenticity.type: a string. The MIME type of the resource.nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.fetchPriority: a string. Suggests a relative priority for fetching the resource. The possible values areauto(the default),high, andlow.imageSrcSet: a string. For use only withas: \"image\". Specifies thesource set of the image.imageSizes: a string. For use only withas: \"image\". Specifies thesizes of the image.",
            "as: a required string. The type of resource. Itspossible valuesareaudio,document,embed,fetch,font,image,object,script,style,track,video,worker.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials. It is required whenasis set to\"fetch\".",
            "referrerPolicy: a string. TheReferrer headerto send when fetching. Its possible values areno-referrer-when-downgrade(the default),no-referrer,origin,origin-when-cross-origin, andunsafe-url.",
            "integrity: a string. A cryptographic hash of the resource, toverify its authenticity.",
            "type: a string. The MIME type of the resource.",
            "nonce: a string. A cryptographicnonce to allow the resourcewhen using a strict Content Security Policy.",
            "fetchPriority: a string. Suggests a relative priority for fetching the resource. The possible values areauto(the default),high, andlow.",
            "imageSrcSet: a string. For use only withas: \"image\". Specifies thesource set of the image.",
            "imageSizes: a string. For use only withas: \"image\". Specifies thesizes of the image."
          ]
        },
        {
          "type": "p",
          "text": "preloadreturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple equivalent calls topreloadhave the same effect as a single call. Calls topreloadare considered equivalent according to the following rules:Two calls are equivalent if they have the samehref, except:Ifasis set toimage, two calls are equivalent if they have the samehref,imageSrcSet, andimageSizes.",
            "Two calls are equivalent if they have the samehref, except:",
            "Ifasis set toimage, two calls are equivalent if they have the samehref,imageSrcSet, andimageSizes.",
            "In the browser, you can callpreloadin any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,preloadonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "Callpreloadwhen rendering a component if you know that it or its children will use a specific resource."
        },
        {
          "type": "code",
          "code": "import{preload}from'react-dom';functionAppRoot(){preload(\"https://example.com/script.js\",{as:\"script\"});return...;}"
        },
        {
          "type": "p",
          "text": "If you want the browser to start executing the script immediately (rather than just downloading it), usepreinitinstead. If you want to load an ESM module, usepreloadModule."
        },
        {
          "type": "p",
          "text": "Callpreloadin an event handler before transitioning to a page or state where external resources will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{preload}from'react-dom';functionCallToAction(){constonClick=()=>{preload(\"https://example.com/wizardStyles.css\",{as:\"style\"});startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/preloadModule",
      "title": "preloadModule – React",
      "content": [
        {
          "type": "p",
          "text": "React-based frameworksfrequently handle resource loading for you, so you might not have to call this API yourself. Consult your framework’s documentation for details."
        },
        {
          "type": "p",
          "text": "preloadModulelets you eagerly fetch an ESM module that you expect to use."
        },
        {
          "type": "code",
          "code": "preloadModule(\"https://example.com/module.js\",{as:\"script\"});"
        },
        {
          "type": "list",
          "items": [
            "ReferencepreloadModule(href, options)",
            "preloadModule(href, options)",
            "UsagePreloading when renderingPreloading in an event handler",
            "Preloading when rendering",
            "Preloading in an event handler"
          ]
        },
        {
          "type": "p",
          "text": "To preload an ESM module, call thepreloadModulefunction fromreact-dom."
        },
        {
          "type": "code",
          "code": "import{preloadModule}from'react-dom';functionAppRoot(){preloadModule(\"https://example.com/module.js\",{as:\"script\"});// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below. ThepreloadModulefunction provides the browser with a hint that it should start downloading the given module, which can save time."
        },
        {
          "type": "list",
          "items": [
            "href: a string. The URL of the module you want to download.",
            "options: an object. It contains the following properties:as: a required string. It must be'script'.crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials.integrity: a string. A cryptographic hash of the module, toverify its authenticity.nonce: a string. A cryptographicnonce to allow the modulewhen using a strict Content Security Policy.",
            "as: a required string. It must be'script'.",
            "crossOrigin: a string. TheCORS policyto use. Its possible values areanonymousanduse-credentials.",
            "integrity: a string. A cryptographic hash of the module, toverify its authenticity.",
            "nonce: a string. A cryptographicnonce to allow the modulewhen using a strict Content Security Policy."
          ]
        },
        {
          "type": "p",
          "text": "preloadModulereturns nothing."
        },
        {
          "type": "list",
          "items": [
            "Multiple calls topreloadModulewith the samehrefhave the same effect as a single call.",
            "In the browser, you can callpreloadModulein any situation: while rendering a component, in an Effect, in an event handler, and so on.",
            "In server-side rendering or when rendering Server Components,preloadModuleonly has an effect if you call it while rendering a component or in an async context originating from rendering a component. Any other calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "CallpreloadModulewhen rendering a component if you know that it or its children will use a specific module."
        },
        {
          "type": "code",
          "code": "import{preloadModule}from'react-dom';functionAppRoot(){preloadModule(\"https://example.com/module.js\",{as:\"script\"});return...;}"
        },
        {
          "type": "p",
          "text": "If you want the browser to start executing the module immediately (rather than just downloading it), usepreinitModuleinstead. If you want to load a script that isn’t an ESM module, usepreload."
        },
        {
          "type": "p",
          "text": "CallpreloadModulein an event handler before transitioning to a page or state where the module will be needed. This gets the process started earlier than if you call it during the rendering of the new page or state."
        },
        {
          "type": "code",
          "code": "import{preloadModule}from'react-dom';functionCallToAction(){constonClick=()=>{preloadModule(\"https://example.com/module.js\",{as:\"script\"});startWizard();}return(<buttononClick={onClick}>Start Wizard</button>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/server",
      "title": "Server React DOM APIs – React",
      "content": [
        {
          "type": "p",
          "text": "Thereact-dom/serverAPIs let you server-side render React components to HTML. These APIs are only used on the server at the top level of your app to generate the initial HTML. Aframeworkmay call them for you. Most of your components don’t need to import or use them."
        },
        {
          "type": "p",
          "text": "These methods are only available in the environments withNode.js Streams:"
        },
        {
          "type": "list",
          "items": [
            "renderToPipeableStreamrenders a React tree to a pipeableNode.js Stream."
          ]
        },
        {
          "type": "p",
          "text": "These methods are only available in the environments withWeb Streams, which includes browsers, Deno, and some modern edge runtimes:"
        },
        {
          "type": "list",
          "items": [
            "renderToReadableStreamrenders a React tree to aReadable Web Stream."
          ]
        },
        {
          "type": "p",
          "text": "These methods can be used in the environments that don’t support streams:"
        },
        {
          "type": "list",
          "items": [
            "renderToStringrenders a React tree to a string.",
            "renderToStaticMarkuprenders a non-interactive React tree to a string."
          ]
        },
        {
          "type": "p",
          "text": "They have limited functionality compared to the streaming APIs."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/server/renderToPipeableStream",
      "title": "renderToPipeableStream – React",
      "content": [
        {
          "type": "p",
          "text": "renderToPipeableStreamrenders a React tree to a pipeableNode.js Stream."
        },
        {
          "type": "code",
          "code": "const{pipe,abort}=renderToPipeableStream(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencerenderToPipeableStream(reactNode, options?)",
            "renderToPipeableStream(reactNode, options?)",
            "UsageRendering a React tree as HTML to a Node.js StreamStreaming more content as it loadsSpecifying what goes into the shellLogging crashes on the serverRecovering from errors inside the shellRecovering from errors outside the shellSetting the status codeHandling different errors in different waysWaiting for all content to load for crawlers and static generationAborting server rendering",
            "Rendering a React tree as HTML to a Node.js Stream",
            "Streaming more content as it loads",
            "Specifying what goes into the shell",
            "Logging crashes on the server",
            "Recovering from errors inside the shell",
            "Recovering from errors outside the shell",
            "Setting the status code",
            "Handling different errors in different ways",
            "Waiting for all content to load for crawlers and static generation",
            "Aborting server rendering"
          ]
        },
        {
          "type": "p",
          "text": "This API is specific to Node.js. Environments withWeb Streams,like Deno and modern edge runtimes, should userenderToReadableStreaminstead."
        },
        {
          "type": "p",
          "text": "CallrenderToPipeableStreamto render your React tree as HTML into aNode.js Stream."
        },
        {
          "type": "code",
          "code": "import{renderToPipeableStream}from'react-dom/server';const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.setHeader('content-type','text/html');pipe(response);}});"
        },
        {
          "type": "p",
          "text": "On the client, callhydrateRootto make the server-generated HTML interactive. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX element like<App />. It is expected to represent the entire document, so theAppcomponent should render the<html>tag.",
            "optionaloptions: An object with streaming options.optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.optionalnonce: Anoncestring to allow scripts forscript-srcContent-Security-Policy.optionalonAllReady: A callback that fires when all rendering is complete, including both theshelland all additionalcontent.You can use this instead ofonShellReadyfor crawlers and static generation.If you start streaming here, you won’t get any progressive loading. The stream will contain the final HTML.optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.optionalonShellReady: A callback that fires right after theinitial shellhas been rendered. You canset the status codeand callpipehere to start streaming. React willstream the additional contentafter the shell along with the inline<script>tags that replace the HTML loading fallbacks with the content.optionalonShellError: A callback that fires if there was an error rendering the initial shell.  It receives the error as an argument. No bytes were emitted from the stream yet, and neitheronShellReadynoronAllReadywill get called, so you canoutput a fallback HTML shell.optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.",
            "optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.",
            "optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.",
            "optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.",
            "optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.",
            "optionalnonce: Anoncestring to allow scripts forscript-srcContent-Security-Policy.",
            "optionalonAllReady: A callback that fires when all rendering is complete, including both theshelland all additionalcontent.You can use this instead ofonShellReadyfor crawlers and static generation.If you start streaming here, you won’t get any progressive loading. The stream will contain the final HTML.",
            "optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.",
            "optionalonShellReady: A callback that fires right after theinitial shellhas been rendered. You canset the status codeand callpipehere to start streaming. React willstream the additional contentafter the shell along with the inline<script>tags that replace the HTML loading fallbacks with the content.",
            "optionalonShellError: A callback that fires if there was an error rendering the initial shell.  It receives the error as an argument. No bytes were emitted from the stream yet, and neitheronShellReadynoronAllReadywill get called, so you canoutput a fallback HTML shell.",
            "optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic."
          ]
        },
        {
          "type": "p",
          "text": "renderToPipeableStreamreturns an object with two methods:"
        },
        {
          "type": "list",
          "items": [
            "pipeoutputs the HTML into the providedWritable Node.js Stream.CallpipeinonShellReadyif you want to enable streaming, or inonAllReadyfor crawlers and static generation.",
            "abortlets youabort server renderingand render the rest on the client."
          ]
        },
        {
          "type": "p",
          "text": "CallrenderToPipeableStreamto render your React tree as HTML into aNode.js Stream:"
        },
        {
          "type": "code",
          "code": "import{renderToPipeableStream}from'react-dom/server';// The route handler syntax depends on your backend frameworkapp.use('/',(request,response)=>{const{pipe}=renderToPipeableStream(<App />,{bootstrapScripts:['/main.js'],onShellReady(){response.setHeader('content-type','text/html');pipe(response);}});});"
        },
        {
          "type": "p",
          "text": "Along with theroot component, you need to provide a list ofbootstrap<script>paths. Your root component should returnthe entire document including the root<html>tag. For example, it might look like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<html><head><metacharSet=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><linkrel=\"stylesheet\"href=\"/styles.css\"></link><title>My app</title></head><body><Router/></body></html>);}"
        },
        {
          "type": "p",
          "text": "React will inject thedoctypeand yourbootstrap<script>tagsinto the resulting HTML stream:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><html><!-- ... HTML from your components ... --></html><scriptsrc=\"/main.js\"async=\"\"></script>"
        },
        {
          "type": "p",
          "text": "On the client, your bootstrap script shouldhydrate the entiredocumentwith a call tohydrateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<App />);"
        },
        {
          "type": "p",
          "text": "This will attach event listeners to the server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "The final asset URLs (like JavaScript and CSS files) are often hashed after the build. For example, instead ofstyles.cssyou might end up withstyles.123456.css. Hashing static asset filenames guarantees that every distinct build of the same asset will have a different filename. This is useful because it lets you safely enable long-term caching for static assets: a file with a certain name would never change content. However, if you don’t know the asset URLs until after the build, there’s no way for you to put them in the source code. For example, hardcoding\"/styles.css\"into JSX like earlier wouldn’t work. To keep them out of your source code, your root component can read the real filenames from a map passed as a prop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp({assetMap}){return(<html><head>...<linkrel=\"stylesheet\"href={assetMap['styles.css']}></link>...</head>...</html>);}"
        },
        {
          "type": "p",
          "text": "On the server, render<App assetMap={assetMap} />and pass yourassetMapwith the asset URLs:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling, e.g. read it from the build output.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};app.use('/',(request,response)=>{const{pipe}=renderToPipeableStream(<AppassetMap={assetMap}/>,{bootstrapScripts:[assetMap['main.js']],onShellReady(){response.setHeader('content-type','text/html');pipe(response);}});});"
        },
        {
          "type": "p",
          "text": "Since your server is now rendering<App assetMap={assetMap} />, you need to render it withassetMapon the client too to avoid hydration errors. You can serialize and passassetMapto the client like this:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};app.use('/',(request,response)=>{const{pipe}=renderToPipeableStream(<AppassetMap={assetMap}/>,{// Careful: It's safe to stringify() this because this data isn't user-generated.bootstrapScriptContent:`window.assetMap =${JSON.stringify(assetMap)};`,bootstrapScripts:[assetMap['main.js']],onShellReady(){response.setHeader('content-type','text/html');pipe(response);}});});"
        },
        {
          "type": "p",
          "text": "In the example above, thebootstrapScriptContentoption adds an extra inline<script>tag that sets the globalwindow.assetMapvariable on the client. This lets the client code read the sameassetMap:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<AppassetMap={window.assetMap}/>);"
        },
        {
          "type": "p",
          "text": "Both client and server renderAppwith the sameassetMapprop, so there are no hydration errors."
        },
        {
          "type": "p",
          "text": "Streaming allows the user to start seeing the content even before all the data has loaded on the server. For example, consider a profile page that shows a cover, a sidebar with friends and photos, and a list of posts:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Posts/></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "Imagine that loading data for<Posts />takes some time. Ideally, you’d want to show the rest of the profile page content to the user without waiting for the posts. To do this,wrapPostsin a<Suspense>boundary:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "This tells React to start streaming the HTML beforePostsloads its data. React will send the HTML for the loading fallback (PostsGlimmer) first, and then, whenPostsfinishes loading its data, React will send the remaining HTML along with an inline<script>tag that replaces the loading fallback with that HTML. From the user’s perspective, the page will first appear with thePostsGlimmer, later replaced by thePosts. You can furthernest<Suspense>boundariesto create a more granular loading sequence:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<BigSpinner/>}><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "In this example, React can start streaming the page even earlier. OnlyProfileLayoutandProfileCovermust finish rendering first because they are not wrapped in any<Suspense>boundary. However, ifSidebar,Friends, orPhotosneed to load some data, React will send the HTML for theBigSpinnerfallback instead. Then, as more data becomes available, more content will continue to be revealed until all of it becomes visible. Streaming does not need to wait for React itself to load in the browser, or for your app to become interactive. The HTML content from the server will get progressively revealed before any of the<script>tags load. Read more about how streaming HTML works."
        },
        {
          "type": "p",
          "text": "Only Suspense-enabled data sources will activate the Suspense component.They include:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Suspensedoes notdetect when data is fetched inside an Effect or event handler. The exact way you would load data in thePostscomponent above depends on your framework. If you use a Suspense-enabled framework, you’ll find the details in its data fetching documentation. Suspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React."
        },
        {
          "type": "p",
          "text": "The part of your app outside of any<Suspense>boundaries is calledthe shell:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<BigSpinner/>}><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "It determines the earliest loading state that the user may see:"
        },
        {
          "type": "code",
          "code": "<ProfileLayout><ProfileCover/><BigSpinner/></ProfileLayout>"
        },
        {
          "type": "p",
          "text": "If you wrap the whole app into a<Suspense>boundary at the root, the shell will only contain that spinner. However, that’s not a pleasant user experience because seeing a big spinner on the screen can feel slower and more annoying than waiting a bit more and seeing the real layout. This is why usually you’ll want to place the<Suspense>boundaries so that the shell feelsminimal but complete—like a skeleton of the entire page layout. TheonShellReadycallback fires when the entire shell has been rendered. Usually, you’ll start streaming then:"
        },
        {
          "type": "code",
          "code": "const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.setHeader('content-type','text/html');pipe(response);}});"
        },
        {
          "type": "p",
          "text": "By the timeonShellReadyfires, components in nested<Suspense>boundaries might still be loading data."
        },
        {
          "type": "p",
          "text": "By default, all errors on the server are logged to console. You can override this behavior to log crash reports:"
        },
        {
          "type": "code",
          "code": "const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.setHeader('content-type','text/html');pipe(response);},onError(error){console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "If you provide a customonErrorimplementation, don’t forget to also log errors to the console like above."
        },
        {
          "type": "p",
          "text": "In this example, the shell containsProfileLayout,ProfileCover, andPostsGlimmer:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "If an error occurs while rendering those components, React won’t have any meaningful HTML to send to the client. OverrideonShellErrorto send a fallback HTML that doesn’t rely on server rendering as the last resort:"
        },
        {
          "type": "code",
          "code": "const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.setHeader('content-type','text/html');pipe(response);},onShellError(error){response.statusCode=500;response.setHeader('content-type','text/html');response.send('<h1>Something went wrong</h1>');},onError(error){console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "If there is an error while generating the shell, bothonErrorandonShellErrorwill fire. UseonErrorfor error reporting and useonShellErrorto send the fallback HTML document. Your fallback HTML does not have to be an error page. Instead, you may include an alternative shell that renders your app on the client only."
        },
        {
          "type": "p",
          "text": "In this example, the<Posts />component is wrapped in<Suspense>so it isnota part of the shell:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "If an error happens in thePostscomponent or somewhere inside it, React willtry to recover from it:"
        },
        {
          "type": "list",
          "items": [
            "It will emit the loading fallback for the closest<Suspense>boundary (PostsGlimmer) into the HTML.",
            "It will “give up” on trying to render thePostscontent on the server anymore.",
            "When the JavaScript code loads on the client, React willretryrenderingPostson the client."
          ]
        },
        {
          "type": "p",
          "text": "If retrying renderingPostson the clientalsofails, React will throw the error on the client. As with all the errors thrown during rendering, theclosest parent error boundarydetermines how to present the error to the user. In practice, this means that the user will see a loading indicator until it is certain that the error is not recoverable. If retrying renderingPostson the client succeeds, the loading fallback from the server will be replaced with the client rendering output. The user will not know that there was a server error. However, the serveronErrorcallback and the clientonRecoverableErrorcallbacks will fire so that you can get notified about the error."
        },
        {
          "type": "p",
          "text": "Streaming introduces a tradeoff. You want to start streaming the page as early as possible so that the user can see the content sooner. However, once you start streaming, you can no longer set the response status code. Bydividing your appinto the shell (above all<Suspense>boundaries) and the rest of the content, you’ve already solved a part of this problem. If the shell errors, you’ll get theonShellErrorcallback which lets you set the error status code. Otherwise, you know that the app may recover on the client, so you can send “OK”."
        },
        {
          "type": "code",
          "code": "const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.statusCode=200;response.setHeader('content-type','text/html');pipe(response);},onShellError(error){response.statusCode=500;response.setHeader('content-type','text/html');response.send('<h1>Something went wrong</h1>');},onError(error){console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "If a componentoutsidethe shell (i.e. inside a<Suspense>boundary) throws an error, React will not stop rendering. This means that theonErrorcallback will fire, but you will still getonShellReadyinstead ofonShellError. This is because React will try to recover from that error on the client,as described above. However, if you’d like, you can use the fact that something has errored to set the status code:"
        },
        {
          "type": "code",
          "code": "letdidError=false;const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.statusCode=didError?500:200;response.setHeader('content-type','text/html');pipe(response);},onShellError(error){response.statusCode=500;response.setHeader('content-type','text/html');response.send('<h1>Something went wrong</h1>');},onError(error){didError=true;console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "This will only catch errors outside the shell that happened while generating the initial shell content, so it’s not exhaustive. If knowing whether an error occurred for some content is critical, you can move it up into the shell."
        },
        {
          "type": "p",
          "text": "You cancreate your ownErrorsubclassesand use theinstanceofoperator to check which error is thrown. For example, you can define a customNotFoundErrorand throw it from your component. Then youronError,onShellReady, andonShellErrorcallbacks can do something different depending on the error type:"
        },
        {
          "type": "code",
          "code": "letdidError=false;letcaughtError=null;functiongetStatusCode(){if(didError){if(caughtErrorinstanceofNotFoundError){return404;}else{return500;}}else{return200;}}const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){response.statusCode=getStatusCode();response.setHeader('content-type','text/html');pipe(response);},onShellError(error){response.statusCode=getStatusCode();response.setHeader('content-type','text/html');response.send('<h1>Something went wrong</h1>');},onError(error){didError=true;caughtError=error;console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "Keep in mind that once you emit the shell and start streaming, you can’t change the status code."
        },
        {
          "type": "p",
          "text": "Streaming offers a better user experience because the user can see the content as it becomes available. However, when a crawler visits your page, or if you’re generating the pages at the build time, you might want to let all of the content load first and then produce the final HTML output instead of revealing it progressively. You can wait for all the content to load using theonAllReadycallback:"
        },
        {
          "type": "code",
          "code": "letdidError=false;letisCrawler=// ... depends on your bot detection strategy ...const{pipe}=renderToPipeableStream(<App/>,{bootstrapScripts:['/main.js'],onShellReady(){if(!isCrawler){response.statusCode=didError?500:200;response.setHeader('content-type','text/html');pipe(response);}},onShellError(error){response.statusCode=500;response.setHeader('content-type','text/html');response.send('<h1>Something went wrong</h1>');},onAllReady(){if(isCrawler){response.statusCode=didError?500:200;response.setHeader('content-type','text/html');pipe(response);}},onError(error){didError=true;console.error(error);logServerCrashReport(error);}});"
        },
        {
          "type": "p",
          "text": "A regular visitor will get a stream of progressively loaded content. A crawler will receive the final HTML output after all the data loads. However, this also means that the crawler will have to wait foralldata, some of which might be slow to load or error. Depending on your app, you could choose to send the shell to the crawlers too."
        },
        {
          "type": "p",
          "text": "You can force the server rendering to “give up” after a timeout:"
        },
        {
          "type": "code",
          "code": "const{pipe,abort}=renderToPipeableStream(<App/>,{// ...});setTimeout(()=>{abort();},10000);"
        },
        {
          "type": "p",
          "text": "React will flush the remaining loading fallbacks as HTML, and will attempt to render the rest on the client."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/server/renderToReadableStream",
      "title": "renderToReadableStream – React",
      "content": [
        {
          "type": "p",
          "text": "renderToReadableStreamrenders a React tree to aReadable Web Stream."
        },
        {
          "type": "code",
          "code": "conststream=awaitrenderToReadableStream(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencerenderToReadableStream(reactNode, options?)",
            "renderToReadableStream(reactNode, options?)",
            "UsageRendering a React tree as HTML to a Readable Web StreamStreaming more content as it loadsSpecifying what goes into the shellLogging crashes on the serverRecovering from errors inside the shellRecovering from errors outside the shellSetting the status codeHandling different errors in different waysWaiting for all content to load for crawlers and static generationAborting server rendering",
            "Rendering a React tree as HTML to a Readable Web Stream",
            "Streaming more content as it loads",
            "Specifying what goes into the shell",
            "Logging crashes on the server",
            "Recovering from errors inside the shell",
            "Recovering from errors outside the shell",
            "Setting the status code",
            "Handling different errors in different ways",
            "Waiting for all content to load for crawlers and static generation",
            "Aborting server rendering"
          ]
        },
        {
          "type": "p",
          "text": "This API depends onWeb Streams.For Node.js, userenderToPipeableStreaminstead."
        },
        {
          "type": "p",
          "text": "CallrenderToReadableStreamto render your React tree as HTML into aReadable Web Stream."
        },
        {
          "type": "code",
          "code": "import{renderToReadableStream}from'react-dom/server';asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js']});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "On the client, callhydrateRootto make the server-generated HTML interactive. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX element like<App />. It is expected to represent the entire document, so theAppcomponent should render the<html>tag.",
            "optionaloptions: An object with streaming options.optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.optionalnonce: Anoncestring to allow scripts forscript-srcContent-Security-Policy.optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client.",
            "optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.",
            "optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.",
            "optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.",
            "optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.",
            "optionalnonce: Anoncestring to allow scripts forscript-srcContent-Security-Policy.",
            "optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.",
            "optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.",
            "optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client."
          ]
        },
        {
          "type": "p",
          "text": "renderToReadableStreamreturns a Promise:"
        },
        {
          "type": "list",
          "items": [
            "If rendering theshellis successful, that Promise will resolve to aReadable Web Stream.",
            "If rendering the shell fails, the Promise will be rejected.Use this to output a fallback shell."
          ]
        },
        {
          "type": "p",
          "text": "The returned stream has an additional property:"
        },
        {
          "type": "list",
          "items": [
            "allReady: A Promise that resolves when all rendering is complete, including both theshelland all additionalcontent.You canawait stream.allReadybefore returning a responsefor crawlers and static generation.If you do that, you won’t get any progressive loading. The stream will contain the final HTML."
          ]
        },
        {
          "type": "p",
          "text": "CallrenderToReadableStreamto render your React tree as HTML into aReadable Web Stream:"
        },
        {
          "type": "code",
          "code": "import{renderToReadableStream}from'react-dom/server';asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<App />,{bootstrapScripts:['/main.js']});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "Along with theroot component, you need to provide a list ofbootstrap<script>paths. Your root component should returnthe entire document including the root<html>tag. For example, it might look like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<html><head><metacharSet=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><linkrel=\"stylesheet\"href=\"/styles.css\"></link><title>My app</title></head><body><Router/></body></html>);}"
        },
        {
          "type": "p",
          "text": "React will inject thedoctypeand yourbootstrap<script>tagsinto the resulting HTML stream:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><html><!-- ... HTML from your components ... --></html><scriptsrc=\"/main.js\"async=\"\"></script>"
        },
        {
          "type": "p",
          "text": "On the client, your bootstrap script shouldhydrate the entiredocumentwith a call tohydrateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<App />);"
        },
        {
          "type": "p",
          "text": "This will attach event listeners to the server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "The final asset URLs (like JavaScript and CSS files) are often hashed after the build. For example, instead ofstyles.cssyou might end up withstyles.123456.css. Hashing static asset filenames guarantees that every distinct build of the same asset will have a different filename. This is useful because it lets you safely enable long-term caching for static assets: a file with a certain name would never change content. However, if you don’t know the asset URLs until after the build, there’s no way for you to put them in the source code. For example, hardcoding\"/styles.css\"into JSX like earlier wouldn’t work. To keep them out of your source code, your root component can read the real filenames from a map passed as a prop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp({assetMap}){return(<html><head><title>My app</title><linkrel=\"stylesheet\"href={assetMap['styles.css']}></link></head>...</html>);}"
        },
        {
          "type": "p",
          "text": "On the server, render<App assetMap={assetMap} />and pass yourassetMapwith the asset URLs:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling, e.g. read it from the build output.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<AppassetMap={assetMap}/>,{bootstrapScripts:[assetMap['/main.js']]});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "Since your server is now rendering<App assetMap={assetMap} />, you need to render it withassetMapon the client too to avoid hydration errors. You can serialize and passassetMapto the client like this:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<AppassetMap={assetMap}/>,{// Careful: It's safe to stringify() this because this data isn't user-generated.bootstrapScriptContent:`window.assetMap =${JSON.stringify(assetMap)};`,bootstrapScripts:[assetMap['/main.js']],});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "In the example above, thebootstrapScriptContentoption adds an extra inline<script>tag that sets the globalwindow.assetMapvariable on the client. This lets the client code read the sameassetMap:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<AppassetMap={window.assetMap}/>);"
        },
        {
          "type": "p",
          "text": "Both client and server renderAppwith the sameassetMapprop, so there are no hydration errors."
        },
        {
          "type": "p",
          "text": "Streaming allows the user to start seeing the content even before all the data has loaded on the server. For example, consider a profile page that shows a cover, a sidebar with friends and photos, and a list of posts:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Posts/></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "Imagine that loading data for<Posts />takes some time. Ideally, you’d want to show the rest of the profile page content to the user without waiting for the posts. To do this,wrapPostsin a<Suspense>boundary:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "This tells React to start streaming the HTML beforePostsloads its data. React will send the HTML for the loading fallback (PostsGlimmer) first, and then, whenPostsfinishes loading its data, React will send the remaining HTML along with an inline<script>tag that replaces the loading fallback with that HTML. From the user’s perspective, the page will first appear with thePostsGlimmer, later replaced by thePosts. You can furthernest<Suspense>boundariesto create a more granular loading sequence:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<BigSpinner/>}><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "In this example, React can start streaming the page even earlier. OnlyProfileLayoutandProfileCovermust finish rendering first because they are not wrapped in any<Suspense>boundary. However, ifSidebar,Friends, orPhotosneed to load some data, React will send the HTML for theBigSpinnerfallback instead. Then, as more data becomes available, more content will continue to be revealed until all of it becomes visible. Streaming does not need to wait for React itself to load in the browser, or for your app to become interactive. The HTML content from the server will get progressively revealed before any of the<script>tags load. Read more about how streaming HTML works."
        },
        {
          "type": "p",
          "text": "Only Suspense-enabled data sources will activate the Suspense component.They include:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Suspensedoes notdetect when data is fetched inside an Effect or event handler. The exact way you would load data in thePostscomponent above depends on your framework. If you use a Suspense-enabled framework, you’ll find the details in its data fetching documentation. Suspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React."
        },
        {
          "type": "p",
          "text": "The part of your app outside of any<Suspense>boundaries is calledthe shell:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<BigSpinner/>}><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "It determines the earliest loading state that the user may see:"
        },
        {
          "type": "code",
          "code": "<ProfileLayout><ProfileCover/><BigSpinner/></ProfileLayout>"
        },
        {
          "type": "p",
          "text": "If you wrap the whole app into a<Suspense>boundary at the root, the shell will only contain that spinner. However, that’s not a pleasant user experience because seeing a big spinner on the screen can feel slower and more annoying than waiting a bit more and seeing the real layout. This is why usually you’ll want to place the<Suspense>boundaries so that the shell feelsminimal but complete—like a skeleton of the entire page layout. The async call torenderToReadableStreamwill resolve to astreamas soon as the entire shell has been rendered. Usually, you’ll start streaming then by creating and returning a response with thatstream:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js']});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "By the time thestreamis returned, components in nested<Suspense>boundaries might still be loading data."
        },
        {
          "type": "p",
          "text": "By default, all errors on the server are logged to console. You can override this behavior to log crash reports:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){console.error(error);logServerCrashReport(error);}});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "If you provide a customonErrorimplementation, don’t forget to also log errors to the console like above."
        },
        {
          "type": "p",
          "text": "In this example, the shell containsProfileLayout,ProfileCover, andPostsGlimmer:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "If an error occurs while rendering those components, React won’t have any meaningful HTML to send to the client. Wrap yourrenderToReadableStreamcall in atry...catchto send a fallback HTML that doesn’t rely on server rendering as the last resort:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){try{conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){console.error(error);logServerCrashReport(error);}});returnnewResponse(stream,{headers:{'content-type':'text/html'},});}catch(error){returnnewResponse('<h1>Something went wrong</h1>',{status:500,headers:{'content-type':'text/html'},});}}"
        },
        {
          "type": "p",
          "text": "If there is an error while generating the shell, bothonErrorand yourcatchblock will fire. UseonErrorfor error reporting and use thecatchblock to send the fallback HTML document. Your fallback HTML does not have to be an error page. Instead, you may include an alternative shell that renders your app on the client only."
        },
        {
          "type": "p",
          "text": "In this example, the<Posts />component is wrapped in<Suspense>so it isnota part of the shell:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "If an error happens in thePostscomponent or somewhere inside it, React willtry to recover from it:"
        },
        {
          "type": "list",
          "items": [
            "It will emit the loading fallback for the closest<Suspense>boundary (PostsGlimmer) into the HTML.",
            "It will “give up” on trying to render thePostscontent on the server anymore.",
            "When the JavaScript code loads on the client, React willretryrenderingPostson the client."
          ]
        },
        {
          "type": "p",
          "text": "If retrying renderingPostson the clientalsofails, React will throw the error on the client. As with all the errors thrown during rendering, theclosest parent error boundarydetermines how to present the error to the user. In practice, this means that the user will see a loading indicator until it is certain that the error is not recoverable. If retrying renderingPostson the client succeeds, the loading fallback from the server will be replaced with the client rendering output. The user will not know that there was a server error. However, the serveronErrorcallback and the clientonRecoverableErrorcallbacks will fire so that you can get notified about the error."
        },
        {
          "type": "p",
          "text": "Streaming introduces a tradeoff. You want to start streaming the page as early as possible so that the user can see the content sooner. However, once you start streaming, you can no longer set the response status code. Bydividing your appinto the shell (above all<Suspense>boundaries) and the rest of the content, you’ve already solved a part of this problem. If the shell errors, yourcatchblock will run which lets you set the error status code. Otherwise, you know that the app may recover on the client, so you can send “OK”."
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){try{conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){console.error(error);logServerCrashReport(error);}});returnnewResponse(stream,{status:200,headers:{'content-type':'text/html'},});}catch(error){returnnewResponse('<h1>Something went wrong</h1>',{status:500,headers:{'content-type':'text/html'},});}}"
        },
        {
          "type": "p",
          "text": "If a componentoutsidethe shell (i.e. inside a<Suspense>boundary) throws an error, React will not stop rendering. This means that theonErrorcallback will fire, but your code will continue running without getting into thecatchblock. This is because React will try to recover from that error on the client,as described above. However, if you’d like, you can use the fact that something has errored to set the status code:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){try{letdidError=false;conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){didError=true;console.error(error);logServerCrashReport(error);}});returnnewResponse(stream,{status:didError?500:200,headers:{'content-type':'text/html'},});}catch(error){returnnewResponse('<h1>Something went wrong</h1>',{status:500,headers:{'content-type':'text/html'},});}}"
        },
        {
          "type": "p",
          "text": "This will only catch errors outside the shell that happened while generating the initial shell content, so it’s not exhaustive. If knowing whether an error occurred for some content is critical, you can move it up into the shell."
        },
        {
          "type": "p",
          "text": "You cancreate your ownErrorsubclassesand use theinstanceofoperator to check which error is thrown. For example, you can define a customNotFoundErrorand throw it from your component. Then you can save the error inonErrorand do something different before returning the response depending on the error type:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){letdidError=false;letcaughtError=null;functiongetStatusCode(){if(didError){if(caughtErrorinstanceofNotFoundError){return404;}else{return500;}}else{return200;}}try{conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){didError=true;caughtError=error;console.error(error);logServerCrashReport(error);}});returnnewResponse(stream,{status:getStatusCode(),headers:{'content-type':'text/html'},});}catch(error){returnnewResponse('<h1>Something went wrong</h1>',{status:getStatusCode(),headers:{'content-type':'text/html'},});}}"
        },
        {
          "type": "p",
          "text": "Keep in mind that once you emit the shell and start streaming, you can’t change the status code."
        },
        {
          "type": "p",
          "text": "Streaming offers a better user experience because the user can see the content as it becomes available. However, when a crawler visits your page, or if you’re generating the pages at the build time, you might want to let all of the content load first and then produce the final HTML output instead of revealing it progressively. You can wait for all the content to load by awaiting thestream.allReadyPromise:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){try{letdidError=false;conststream=awaitrenderToReadableStream(<App/>,{bootstrapScripts:['/main.js'],onError(error){didError=true;console.error(error);logServerCrashReport(error);}});letisCrawler=// ... depends on your bot detection strategy ...if(isCrawler){awaitstream.allReady;}returnnewResponse(stream,{status:didError?500:200,headers:{'content-type':'text/html'},});}catch(error){returnnewResponse('<h1>Something went wrong</h1>',{status:500,headers:{'content-type':'text/html'},});}}"
        },
        {
          "type": "p",
          "text": "A regular visitor will get a stream of progressively loaded content. A crawler will receive the final HTML output after all the data loads. However, this also means that the crawler will have to wait foralldata, some of which might be slow to load or error. Depending on your app, you could choose to send the shell to the crawlers too."
        },
        {
          "type": "p",
          "text": "You can force the server rendering to “give up” after a timeout:"
        },
        {
          "type": "code",
          "code": "asyncfunctionhandler(request){try{constcontroller=newAbortController();setTimeout(()=>{controller.abort();},10000);conststream=awaitrenderToReadableStream(<App/>,{signal:controller.signal,bootstrapScripts:['/main.js'],onError(error){didError=true;console.error(error);logServerCrashReport(error);}});// ..."
        },
        {
          "type": "p",
          "text": "React will flush the remaining loading fallbacks as HTML, and will attempt to render the rest on the client."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/server/renderToStaticMarkup",
      "title": "renderToStaticMarkup – React",
      "content": [
        {
          "type": "p",
          "text": "renderToStaticMarkuprenders a non-interactive React tree to an HTML string."
        },
        {
          "type": "code",
          "code": "consthtml=renderToStaticMarkup(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencerenderToStaticMarkup(reactNode, options?)",
            "renderToStaticMarkup(reactNode, options?)",
            "UsageRendering a non-interactive React tree as HTML to a string",
            "Rendering a non-interactive React tree as HTML to a string"
          ]
        },
        {
          "type": "p",
          "text": "On the server, callrenderToStaticMarkupto render your app to HTML."
        },
        {
          "type": "code",
          "code": "import{renderToStaticMarkup}from'react-dom/server';consthtml=renderToStaticMarkup(<Page/>);"
        },
        {
          "type": "p",
          "text": "It will produce non-interactive HTML output of your React components. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX node like<Page />.",
            "optionaloptions: An object for server render.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page."
          ]
        },
        {
          "type": "p",
          "text": "An HTML string."
        },
        {
          "type": "list",
          "items": [
            "renderToStaticMarkupoutput cannot be hydrated.",
            "renderToStaticMarkuphas limited Suspense support. If a component suspends,renderToStaticMarkupimmediately sends its fallback as HTML.",
            "renderToStaticMarkupworks in the browser, but using it in the client code is not recommended. If you need to render a component to HTML in the browser,get the HTML by rendering it into a DOM node."
          ]
        },
        {
          "type": "p",
          "text": "CallrenderToStaticMarkupto render your app to an HTML string which you can send with your server response:"
        },
        {
          "type": "code",
          "code": "import{renderToStaticMarkup}from'react-dom/server';// The route handler syntax depends on your backend frameworkapp.use('/',(request,response)=>{consthtml=renderToStaticMarkup(<Page/>);response.send(html);});"
        },
        {
          "type": "p",
          "text": "This will produce the initial non-interactive HTML output of your React components."
        },
        {
          "type": "p",
          "text": "This method rendersnon-interactive HTML that cannot be hydrated.This is useful if you want to use React as a simple static page generator, or if you’re rendering completely static content like emails. Interactive apps should userenderToStringon the server andhydrateRooton the client."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/server/renderToString",
      "title": "renderToString – React",
      "content": [
        {
          "type": "p",
          "text": "renderToStringdoes not support streaming or waiting for data.See the alternatives."
        },
        {
          "type": "p",
          "text": "renderToStringrenders a React tree to an HTML string."
        },
        {
          "type": "code",
          "code": "consthtml=renderToString(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferencerenderToString(reactNode, options?)",
            "renderToString(reactNode, options?)",
            "UsageRendering a React tree as HTML to a string",
            "Rendering a React tree as HTML to a string",
            "AlternativesMigrating fromrenderToStringto a streaming render on the serverMigrating fromrenderToStringto a static prerender on the serverRemovingrenderToStringfrom the client code",
            "Migrating fromrenderToStringto a streaming render on the server",
            "Migrating fromrenderToStringto a static prerender on the server",
            "RemovingrenderToStringfrom the client code",
            "TroubleshootingWhen a component suspends, the HTML always contains a fallback",
            "When a component suspends, the HTML always contains a fallback"
          ]
        },
        {
          "type": "p",
          "text": "On the server, callrenderToStringto render your app to HTML."
        },
        {
          "type": "code",
          "code": "import{renderToString}from'react-dom/server';consthtml=renderToString(<App/>);"
        },
        {
          "type": "p",
          "text": "On the client, callhydrateRootto make the server-generated HTML interactive. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX node like<App />.",
            "optionaloptions: An object for server render.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot."
          ]
        },
        {
          "type": "p",
          "text": "An HTML string."
        },
        {
          "type": "list",
          "items": [
            "renderToStringhas limited Suspense support. If a component suspends,renderToStringimmediately sends its fallback as HTML.",
            "renderToStringworks in the browser, but using it in the client code isnot recommended."
          ]
        },
        {
          "type": "p",
          "text": "CallrenderToStringto render your app to an HTML string which you can send with your server response:"
        },
        {
          "type": "code",
          "code": "import{renderToString}from'react-dom/server';// The route handler syntax depends on your backend frameworkapp.use('/',(request,response)=>{consthtml=renderToString(<App/>);response.send(html);});"
        },
        {
          "type": "p",
          "text": "This will produce the initial non-interactive HTML output of your React components. On the client, you will need to callhydrateRoottohydratethat server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "renderToStringdoes not support streaming or waiting for data.See the alternatives."
        },
        {
          "type": "p",
          "text": "renderToStringreturns a string immediately, so it does not support streaming content as it loads. When possible, we recommend using these fully-featured alternatives:"
        },
        {
          "type": "list",
          "items": [
            "If you use Node.js, userenderToPipeableStream.",
            "If you use Deno or a modern edge runtime withWeb Streams, userenderToReadableStream."
          ]
        },
        {
          "type": "p",
          "text": "You can continue usingrenderToStringif your server environment does not support streams."
        },
        {
          "type": "p",
          "text": "renderToStringreturns a string immediately, so it does not support waiting for data to load for static HTML generation. We recommend using these fully-featured alternatives:"
        },
        {
          "type": "list",
          "items": [
            "If you use Node.js, useprerenderToNodeStream.",
            "If you use Deno or a modern edge runtime withWeb Streams, useprerender."
          ]
        },
        {
          "type": "p",
          "text": "You can continue usingrenderToStringif your static site generation environment does not support streams."
        },
        {
          "type": "p",
          "text": "Sometimes,renderToStringis used on the client to convert some component to HTML."
        },
        {
          "type": "code",
          "code": "// 🚩 Unnecessary: using renderToString on the clientimport{renderToString}from'react-dom/server';consthtml=renderToString(<MyIcon/>);console.log(html);// For example, \"<svg>...</svg>\""
        },
        {
          "type": "p",
          "text": "Importingreact-dom/serveron the clientunnecessarily increases your bundle size and should be avoided. If you need to render some component to HTML in the browser, usecreateRootand read HTML from the DOM:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';import{flushSync}from'react-dom';constdiv=document.createElement('div');constroot=createRoot(div);flushSync(()=>{root.render(<MyIcon/>);});console.log(div.innerHTML);// For example, \"<svg>...</svg>\""
        },
        {
          "type": "p",
          "text": "TheflushSynccall is necessary so that the DOM is updated before reading itsinnerHTMLproperty."
        },
        {
          "type": "p",
          "text": "renderToStringdoes not fully support Suspense. If some component suspends (for example, because it’s defined withlazyor fetches data),renderToStringwill not wait for its content to resolve. Instead,renderToStringwill find the closest<Suspense>boundary above it and render itsfallbackprop in the HTML. The content will not appear until the client code loads. To solve this, use one of therecommended streaming solutions.For server side rendering, they can stream content in chunks as it resolves on the server so that the user sees the page being progressively filled in before the client code loads. For static site generation, they can wait for all the content to resolve before generating the static HTML."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/static",
      "title": "Static React DOM APIs – React",
      "content": [
        {
          "type": "p",
          "text": "Thereact-dom/staticAPIs let you generate static HTML for React components. They have limited functionality compared to the streaming APIs. Aframeworkmay call them for you. Most of your components don’t need to import or use them."
        },
        {
          "type": "p",
          "text": "These methods are only available in the environments withWeb Streams, which includes browsers, Deno, and some modern edge runtimes:"
        },
        {
          "type": "list",
          "items": [
            "prerenderrenders a React tree to static HTML with aReadable Web Stream."
          ]
        },
        {
          "type": "p",
          "text": "These methods are only available in the environments withNode.js Streams:"
        },
        {
          "type": "list",
          "items": [
            "prerenderToNodeStreamrenders a React tree to static HTML with aNode.js Stream."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/static/prerender",
      "title": "prerender – React",
      "content": [
        {
          "type": "p",
          "text": "prerenderrenders a React tree to a static HTML string using aWeb Stream."
        },
        {
          "type": "code",
          "code": "const{prelude}=awaitprerender(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "Referenceprerender(reactNode, options?)",
            "prerender(reactNode, options?)",
            "UsageRendering a React tree to a stream of static HTMLRendering a React tree to a string of static HTMLWaiting for all data to load",
            "Rendering a React tree to a stream of static HTML",
            "Rendering a React tree to a string of static HTML",
            "Waiting for all data to load",
            "TroubleshootingMy stream doesn’t start until the entire app is rendered",
            "My stream doesn’t start until the entire app is rendered"
          ]
        },
        {
          "type": "p",
          "text": "This API depends onWeb Streams.For Node.js, useprerenderToNodeStreaminstead."
        },
        {
          "type": "p",
          "text": "Callprerenderto render your app to static HTML."
        },
        {
          "type": "code",
          "code": "import{prerender}from'react-dom/static';asyncfunctionhandler(request){const{prelude}=awaitprerender(<App/>,{bootstrapScripts:['/main.js']});returnnewResponse(prelude,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "On the client, callhydrateRootto make the server-generated HTML interactive. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX node like<App />. It is expected to represent the entire document, so the App component should render the<html>tag.",
            "optionaloptions: An object with static generation options.optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client.",
            "optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.",
            "optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.",
            "optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.",
            "optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.",
            "optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.",
            "optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.",
            "optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client."
          ]
        },
        {
          "type": "p",
          "text": "prerenderreturns a Promise:"
        },
        {
          "type": "list",
          "items": [
            "If rendering the is successful, the Promise will resolve to an object containing:prelude: aWeb Streamof HTML. You can use this stream to send a response in chunks, or you can read the entire stream into a string.",
            "prelude: aWeb Streamof HTML. You can use this stream to send a response in chunks, or you can read the entire stream into a string.",
            "If rendering fails, the Promise will be rejected.Use this to output a fallback shell."
          ]
        },
        {
          "type": "p",
          "text": "The staticprerenderAPI is used for static server-side generation (SSG). UnlikerenderToString,prerenderwaits for all data to load before resolving. This makes it suitable for generating static HTML for a full page, including data that needs to be fetched using Suspense. To stream content as it loads, use a streaming server-side render (SSR) API likerenderToReadableStream."
        },
        {
          "type": "p",
          "text": "Callprerenderto render your React tree to static HTML into aReadable Web Stream::"
        },
        {
          "type": "code",
          "code": "import{prerender}from'react-dom/static';asyncfunctionhandler(request){const{prelude}=awaitprerender(<App />,{bootstrapScripts:['/main.js']});returnnewResponse(prelude,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "Along with theroot component, you need to provide a list ofbootstrap<script>paths. Your root component should returnthe entire document including the root<html>tag. For example, it might look like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<html><head><metacharSet=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><linkrel=\"stylesheet\"href=\"/styles.css\"></link><title>My app</title></head><body><Router/></body></html>);}"
        },
        {
          "type": "p",
          "text": "React will inject thedoctypeand yourbootstrap<script>tagsinto the resulting HTML stream:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><html><!-- ... HTML from your components ... --></html><scriptsrc=\"/main.js\"async=\"\"></script>"
        },
        {
          "type": "p",
          "text": "On the client, your bootstrap script shouldhydrate the entiredocumentwith a call tohydrateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<App />);"
        },
        {
          "type": "p",
          "text": "This will attach event listeners to the static server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "The final asset URLs (like JavaScript and CSS files) are often hashed after the build. For example, instead ofstyles.cssyou might end up withstyles.123456.css. Hashing static asset filenames guarantees that every distinct build of the same asset will have a different filename. This is useful because it lets you safely enable long-term caching for static assets: a file with a certain name would never change content. However, if you don’t know the asset URLs until after the build, there’s no way for you to put them in the source code. For example, hardcoding\"/styles.css\"into JSX like earlier wouldn’t work. To keep them out of your source code, your root component can read the real filenames from a map passed as a prop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp({assetMap}){return(<html><head><title>My app</title><linkrel=\"stylesheet\"href={assetMap['styles.css']}></link></head>...</html>);}"
        },
        {
          "type": "p",
          "text": "On the server, render<App assetMap={assetMap} />and pass yourassetMapwith the asset URLs:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling, e.g. read it from the build output.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};asyncfunctionhandler(request){const{prelude}=awaitprerender(<AppassetMap={assetMap}/>,{bootstrapScripts:[assetMap['/main.js']]});returnnewResponse(prelude,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "Since your server is now rendering<App assetMap={assetMap} />, you need to render it withassetMapon the client too to avoid hydration errors. You can serialize and passassetMapto the client like this:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};asyncfunctionhandler(request){const{prelude}=awaitprerender(<AppassetMap={assetMap}/>,{// Careful: It's safe to stringify() this because this data isn't user-generated.bootstrapScriptContent:`window.assetMap =${JSON.stringify(assetMap)};`,bootstrapScripts:[assetMap['/main.js']],});returnnewResponse(prelude,{headers:{'content-type':'text/html'},});}"
        },
        {
          "type": "p",
          "text": "In the example above, thebootstrapScriptContentoption adds an extra inline<script>tag that sets the globalwindow.assetMapvariable on the client. This lets the client code read the sameassetMap:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<AppassetMap={window.assetMap}/>);"
        },
        {
          "type": "p",
          "text": "Both client and server renderAppwith the sameassetMapprop, so there are no hydration errors."
        },
        {
          "type": "p",
          "text": "Callprerenderto render your app to a static HTML string:"
        },
        {
          "type": "code",
          "code": "import{prerender}from'react-dom/static';asyncfunctionrenderToString(){const{prelude}=awaitprerender(<App/>,{bootstrapScripts:['/main.js']});constreader=stream.getReader();letcontent='';while(true){const{done,value}=awaitreader.read();if(done){returncontent;}content+=Buffer.from(value).toString('utf8');}}"
        },
        {
          "type": "p",
          "text": "This will produce the initial non-interactive HTML output of your React components. On the client, you will need to callhydrateRoottohydratethat server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "prerenderwaits for all data to load before finishing the static HTML generation and resolving. For example, consider a profile page that shows a cover, a sidebar with friends and photos, and a list of posts:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "Imagine that<Posts />needs to load some data, which takes some time. Ideally, you’d want wait for the posts to finish so it’s included in the HTML. To do this, you can use Suspense to suspend on the data, andprerenderwill wait for the suspended content to finish before resolving to the static HTML."
        },
        {
          "type": "p",
          "text": "Only Suspense-enabled data sources will activate the Suspense component.They include:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Suspensedoes notdetect when data is fetched inside an Effect or event handler. The exact way you would load data in thePostscomponent above depends on your framework. If you use a Suspense-enabled framework, you’ll find the details in its data fetching documentation. Suspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React."
        },
        {
          "type": "p",
          "text": "Theprerenderresponse waits for the entire app to finish rendering, including waiting for all suspense boundaries to resolve, before resolving. It is designed for static site generation (SSG) ahead of time and does not support streaming more content as it loads. To stream content as it loads, use a streaming server render API likerenderToReadableStream."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/static/prerenderToNodeStream",
      "title": "prerenderToNodeStream – React",
      "content": [
        {
          "type": "p",
          "text": "prerenderrenders a React tree to a static HTML string using aNode.js Stream.."
        },
        {
          "type": "code",
          "code": "const{prelude}=awaitprerenderToNodeStream(reactNode,options?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceprerenderToNodeStream(reactNode, options?)",
            "prerenderToNodeStream(reactNode, options?)",
            "UsageRendering a React tree to a stream of static HTMLRendering a React tree to a string of static HTMLWaiting for all data to load",
            "Rendering a React tree to a stream of static HTML",
            "Rendering a React tree to a string of static HTML",
            "Waiting for all data to load",
            "TroubleshootingMy stream doesn’t start until the entire app is rendered",
            "My stream doesn’t start until the entire app is rendered"
          ]
        },
        {
          "type": "p",
          "text": "This API is specific to Node.js. Environments withWeb Streams,like Deno and modern edge runtimes, should useprerenderinstead."
        },
        {
          "type": "p",
          "text": "CallprerenderToNodeStreamto render your app to static HTML."
        },
        {
          "type": "code",
          "code": "import{prerenderToNodeStream}from'react-dom/static';// The route handler syntax depends on your backend frameworkapp.use('/',async(request,response)=>{const{prelude}=awaitprerenderToNodeStream(<App/>,{bootstrapScripts:['/main.js'],});response.setHeader('Content-Type','text/plain');prelude.pipe(response);});"
        },
        {
          "type": "p",
          "text": "On the client, callhydrateRootto make the server-generated HTML interactive. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reactNode: A React node you want to render to HTML. For example, a JSX node like<App />. It is expected to represent the entire document, so the App component should render the<html>tag.",
            "optionaloptions: An object with static generation options.optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client.",
            "optionalbootstrapScriptContent: If specified, this string will be placed in an inline<script>tag.",
            "optionalbootstrapScripts: An array of string URLs for the<script>tags to emit on the page. Use this to include the<script>that callshydrateRoot.Omit it if you don’t want to run React on the client at all.",
            "optionalbootstrapModules: LikebootstrapScripts, but emits<script type=\"module\">instead.",
            "optionalidentifierPrefix: A string prefix React uses for IDs generated byuseId.Useful to avoid conflicts when using multiple roots on the same page. Must be the same prefix as passed tohydrateRoot.",
            "optionalnamespaceURI: A string with the rootnamespace URIfor the stream. Defaults to regular HTML. Pass'http://www.w3.org/2000/svg'for SVG or'http://www.w3.org/1998/Math/MathML'for MathML.",
            "optionalonError: A callback that fires whenever there is a server error, whetherrecoverableornot.By default, this only callsconsole.error. If you override it tolog crash reports,make sure that you still callconsole.error. You can also use it toadjust the status codebefore the shell is emitted.",
            "optionalprogressiveChunkSize: The number of bytes in a chunk.Read more about the default heuristic.",
            "optionalsignal: Anabort signalthat lets youabort server renderingand render the rest on the client."
          ]
        },
        {
          "type": "p",
          "text": "prerenderToNodeStreamreturns a Promise:"
        },
        {
          "type": "list",
          "items": [
            "If rendering the is successful, the Promise will resolve to an object containing:prelude: aNode.js Stream.of HTML. You can use this stream to send a response in chunks, or you can read the entire stream into a string.",
            "prelude: aNode.js Stream.of HTML. You can use this stream to send a response in chunks, or you can read the entire stream into a string.",
            "If rendering fails, the Promise will be rejected.Use this to output a fallback shell."
          ]
        },
        {
          "type": "p",
          "text": "The staticprerenderToNodeStreamAPI is used for static server-side generation (SSG). UnlikerenderToString,prerenderToNodeStreamwaits for all data to load before resolving. This makes it suitable for generating static HTML for a full page, including data that needs to be fetched using Suspense. To stream content as it loads, use a streaming server-side render (SSR) API likerenderToReadableStream."
        },
        {
          "type": "p",
          "text": "CallprerenderToNodeStreamto render your React tree to static HTML into aNode.js Stream.:"
        },
        {
          "type": "code",
          "code": "import{prerenderToNodeStream}from'react-dom/static';// The route handler syntax depends on your backend frameworkapp.use('/',async(request,response)=>{const{prelude}=awaitprerenderToNodeStream(<App />,{bootstrapScripts:['/main.js'],});response.setHeader('Content-Type','text/plain');prelude.pipe(response);});"
        },
        {
          "type": "p",
          "text": "Along with theroot component, you need to provide a list ofbootstrap<script>paths. Your root component should returnthe entire document including the root<html>tag. For example, it might look like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return(<html><head><metacharSet=\"utf-8\"/><metaname=\"viewport\"content=\"width=device-width, initial-scale=1\"/><linkrel=\"stylesheet\"href=\"/styles.css\"></link><title>My app</title></head><body><Router/></body></html>);}"
        },
        {
          "type": "p",
          "text": "React will inject thedoctypeand yourbootstrap<script>tagsinto the resulting HTML stream:"
        },
        {
          "type": "code",
          "code": "<!DOCTYPE html><html><!-- ... HTML from your components ... --></html><scriptsrc=\"/main.js\"async=\"\"></script>"
        },
        {
          "type": "p",
          "text": "On the client, your bootstrap script shouldhydrate the entiredocumentwith a call tohydrateRoot:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<App />);"
        },
        {
          "type": "p",
          "text": "This will attach event listeners to the static server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "The final asset URLs (like JavaScript and CSS files) are often hashed after the build. For example, instead ofstyles.cssyou might end up withstyles.123456.css. Hashing static asset filenames guarantees that every distinct build of the same asset will have a different filename. This is useful because it lets you safely enable long-term caching for static assets: a file with a certain name would never change content. However, if you don’t know the asset URLs until after the build, there’s no way for you to put them in the source code. For example, hardcoding\"/styles.css\"into JSX like earlier wouldn’t work. To keep them out of your source code, your root component can read the real filenames from a map passed as a prop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp({assetMap}){return(<html><head><title>My app</title><linkrel=\"stylesheet\"href={assetMap['styles.css']}></link></head>...</html>);}"
        },
        {
          "type": "p",
          "text": "On the server, render<App assetMap={assetMap} />and pass yourassetMapwith the asset URLs:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling, e.g. read it from the build output.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};app.use('/',async(request,response)=>{const{prelude}=awaitprerenderToNodeStream(<App/>,{bootstrapScripts:[assetMap['/main.js']]});response.setHeader('Content-Type','text/html');prelude.pipe(response);});"
        },
        {
          "type": "p",
          "text": "Since your server is now rendering<App assetMap={assetMap} />, you need to render it withassetMapon the client too to avoid hydration errors. You can serialize and passassetMapto the client like this:"
        },
        {
          "type": "code",
          "code": "// You'd need to get this JSON from your build tooling.constassetMap={'styles.css':'/styles.123456.css','main.js':'/main.123456.js'};app.use('/',async(request,response)=>{const{prelude}=awaitprerenderToNodeStream(<App/>,{// Careful: It's safe to stringify() this because this data isn't user-generated.bootstrapScriptContent:`window.assetMap =${JSON.stringify(assetMap)};`,bootstrapScripts:[assetMap['/main.js']],});response.setHeader('Content-Type','text/html');prelude.pipe(response);});"
        },
        {
          "type": "p",
          "text": "In the example above, thebootstrapScriptContentoption adds an extra inline<script>tag that sets the globalwindow.assetMapvariable on the client. This lets the client code read the sameassetMap:"
        },
        {
          "type": "code",
          "code": "import{hydrateRoot}from'react-dom/client';importAppfrom'./App.js';hydrateRoot(document,<AppassetMap={window.assetMap}/>);"
        },
        {
          "type": "p",
          "text": "Both client and server renderAppwith the sameassetMapprop, so there are no hydration errors."
        },
        {
          "type": "p",
          "text": "CallprerenderToNodeStreamto render your app to a static HTML string:"
        },
        {
          "type": "code",
          "code": "import{prerenderToNodeStream}from'react-dom/static';asyncfunctionrenderToString(){const{prelude}=awaitprerenderToNodeStream(<App/>,{bootstrapScripts:['/main.js']});returnnewPromise((resolve,reject)=>{letdata='';prelude.on('data',chunk=>{data+=chunk;});prelude.on('end',()=>resolve(data));prelude.on('error',reject);});}"
        },
        {
          "type": "p",
          "text": "This will produce the initial non-interactive HTML output of your React components. On the client, you will need to callhydrateRoottohydratethat server-generated HTML and make it interactive."
        },
        {
          "type": "p",
          "text": "prerenderToNodeStreamwaits for all data to load before finishing the static HTML generation and resolving. For example, consider a profile page that shows a cover, a sidebar with friends and photos, and a list of posts:"
        },
        {
          "type": "code",
          "code": "functionProfilePage(){return(<ProfileLayout><ProfileCover/><Sidebar><Friends/><Photos/></Sidebar><Suspensefallback={<PostsGlimmer/>}><Posts/></Suspense></ProfileLayout>);}"
        },
        {
          "type": "p",
          "text": "Imagine that<Posts />needs to load some data, which takes some time. Ideally, you’d want wait for the posts to finish so it’s included in the HTML. To do this, you can use Suspense to suspend on the data, andprerenderToNodeStreamwill wait for the suspended content to finish before resolving to the static HTML."
        },
        {
          "type": "p",
          "text": "Only Suspense-enabled data sources will activate the Suspense component.They include:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Suspensedoes notdetect when data is fetched inside an Effect or event handler. The exact way you would load data in thePostscomponent above depends on your framework. If you use a Suspense-enabled framework, you’ll find the details in its data fetching documentation. Suspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React."
        },
        {
          "type": "p",
          "text": "TheprerenderToNodeStreamresponse waits for the entire app to finish rendering, including waiting for all suspense boundaries to resolve, before resolving. It is designed for static site generation (SSG) ahead of time and does not support streaming more content as it loads. To stream content as it loads, use a streaming server render API likerenderToPipeableStream."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react-dom/unmountComponentAtNode",
      "title": "unmountComponentAtNode – React",
      "content": [
        {
          "type": "p",
          "text": "This API will be removed in a future major version of React. In React 18,unmountComponentAtNodewas replaced byroot.unmount()."
        },
        {
          "type": "p",
          "text": "unmountComponentAtNoderemoves a mounted React component from the DOM."
        },
        {
          "type": "code",
          "code": "unmountComponentAtNode(domNode)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceunmountComponentAtNode(domNode)",
            "unmountComponentAtNode(domNode)",
            "UsageRemoving a React app from a DOM element",
            "Removing a React app from a DOM element"
          ]
        },
        {
          "type": "p",
          "text": "CallunmountComponentAtNodeto remove a mounted React component from the DOM and clean up its event handlers and state."
        },
        {
          "type": "code",
          "code": "import{unmountComponentAtNode}from'react-dom';constdomNode=document.getElementById('root');render(<App/>,domNode);unmountComponentAtNode(domNode);"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "domNode: ADOM element.React will remove a mounted React component from this element."
          ]
        },
        {
          "type": "p",
          "text": "unmountComponentAtNodereturnstrueif a component was unmounted andfalseotherwise."
        },
        {
          "type": "p",
          "text": "CallunmountComponentAtNodeto remove amounted React componentfrom abrowser DOM nodeand clean up its event handlers and state."
        },
        {
          "type": "code",
          "code": "import{render,unmountComponentAtNode}from'react-dom';importAppfrom'./App.js';constrootNode=document.getElementById('root');render(<App />,rootNode);// ...unmountComponentAtNode(rootNode);"
        },
        {
          "type": "p",
          "text": "Occasionally, you may want to “sprinkle” React on an existing page, or a page that is not fully written in React. In those cases, you may need to “stop” the React app, by removing all of the UI, state, and listeners from the DOM node it was rendered to. In this example, clicking “Render React App” will render a React app. Click “Unmount React App” to destroy it:"
        },
        {
          "type": "code",
          "code": "import'./styles.css';import{render,unmountComponentAtNode}from'react-dom';importAppfrom'./App.js';constdomNode=document.getElementById('root');document.getElementById('render').addEventListener('click',()=>{render(<App/>,domNode);});document.getElementById('unmount').addEventListener('click',()=>{unmountComponentAtNode(domNode);});"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/Children",
      "title": "Children – React",
      "content": [
        {
          "type": "p",
          "text": "UsingChildrenis uncommon and can lead to fragile code.See common alternatives."
        },
        {
          "type": "p",
          "text": "Childrenlets you manipulate and transform the JSX you received as thechildrenprop."
        },
        {
          "type": "code",
          "code": "constmappedChildren=Children.map(children,child=><divclassName=\"Row\">{child}</div>);"
        },
        {
          "type": "list",
          "items": [
            "ReferenceChildren.count(children)Children.forEach(children, fn, thisArg?)Children.map(children, fn, thisArg?)Children.only(children)Children.toArray(children)",
            "Children.count(children)",
            "Children.forEach(children, fn, thisArg?)",
            "Children.map(children, fn, thisArg?)",
            "Children.only(children)",
            "Children.toArray(children)",
            "UsageTransforming childrenRunning some code for each childCounting childrenConverting children to an array",
            "Transforming children",
            "Running some code for each child",
            "Counting children",
            "Converting children to an array",
            "AlternativesExposing multiple componentsAccepting an array of objects as a propCalling a render prop to customize rendering",
            "Exposing multiple components",
            "Accepting an array of objects as a prop",
            "Calling a render prop to customize rendering",
            "TroubleshootingI pass a custom component, but theChildrenmethods don’t show its render result",
            "I pass a custom component, but theChildrenmethods don’t show its render result"
          ]
        },
        {
          "type": "p",
          "text": "CallChildren.count(children)to count the number of children in thechildrendata structure."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';functionRowList({children}){return(<><h1>Total rows:{Children.count(children)}</h1>...</>);}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "children: The value of thechildrenpropreceived by your component."
          ]
        },
        {
          "type": "p",
          "text": "The number of nodes inside thesechildren."
        },
        {
          "type": "list",
          "items": [
            "Empty nodes (null,undefined, and Booleans), strings, numbers, andReact elementscount as individual nodes. Arrays don’t count as individual nodes, but their children do.The traversal does not go deeper than React elements:they don’t get rendered, and their children aren’t traversed.Fragmentsdon’t get traversed."
          ]
        },
        {
          "type": "p",
          "text": "CallChildren.forEach(children, fn, thisArg?)to run some code for each child in thechildrendata structure."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';functionSeparatorList({children}){constresult=[];Children.forEach(children,(child,index)=>{result.push(child);result.push(<hrkey={index}/>);});// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "children: The value of thechildrenpropreceived by your component.",
            "fn: The function you want to run for each child, similar to thearrayforEachmethodcallback. It will be called with the child as the first argument and its index as the second argument. The index starts at0and increments on each call.",
            "optionalthisArg: Thethisvaluewith which thefnfunction should be called. If omitted, it’sundefined."
          ]
        },
        {
          "type": "p",
          "text": "Children.forEachreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Empty nodes (null,undefined, and Booleans), strings, numbers, andReact elementscount as individual nodes. Arrays don’t count as individual nodes, but their children do.The traversal does not go deeper than React elements:they don’t get rendered, and their children aren’t traversed.Fragmentsdon’t get traversed."
          ]
        },
        {
          "type": "p",
          "text": "CallChildren.map(children, fn, thisArg?)to map or transform each child in thechildrendata structure."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';functionRowList({children}){return(<divclassName=\"RowList\">{Children.map(children,child=><divclassName=\"Row\">{child}</div>)}</div>);}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "children: The value of thechildrenpropreceived by your component.",
            "fn: The mapping function, similar to thearraymapmethodcallback. It will be called with the child as the first argument and its index as the second argument. The index starts at0and increments on each call. You need to return a React node from this function. This may be an empty node (null,undefined, or a Boolean), a string, a number, a React element, or an array of other React nodes.",
            "optionalthisArg: Thethisvaluewith which thefnfunction should be called. If omitted, it’sundefined."
          ]
        },
        {
          "type": "p",
          "text": "Ifchildrenisnullorundefined, returns the same value. Otherwise, returns a flat array consisting of the nodes you’ve returned from thefnfunction. The returned array will contain all nodes you returned except fornullandundefined."
        },
        {
          "type": "list",
          "items": [
            "Empty nodes (null,undefined, and Booleans), strings, numbers, andReact elementscount as individual nodes. Arrays don’t count as individual nodes, but their children do.The traversal does not go deeper than React elements:they don’t get rendered, and their children aren’t traversed.Fragmentsdon’t get traversed.",
            "If you return an element or an array of elements with keys fromfn,the returned elements’ keys will be automatically combined with the key of the corresponding original item fromchildren.When you return multiple elements fromfnin an array, their keys only need to be unique locally amongst each other."
          ]
        },
        {
          "type": "p",
          "text": "CallChildren.only(children)to assert thatchildrenrepresent a single React element."
        },
        {
          "type": "code",
          "code": "functionBox({children}){constelement=Children.only(children);// ..."
        },
        {
          "type": "list",
          "items": [
            "children: The value of thechildrenpropreceived by your component."
          ]
        },
        {
          "type": "p",
          "text": "Ifchildrenis a valid element,returns that element. Otherwise, throws an error."
        },
        {
          "type": "list",
          "items": [
            "This method alwaysthrows if you pass an array (such as the return value ofChildren.map) aschildren.In other words, it enforces thatchildrenis a single React element, not that it’s an array with a single element."
          ]
        },
        {
          "type": "p",
          "text": "CallChildren.toArray(children)to create an array out of thechildrendata structure."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';exportdefaultfunctionReversedList({children}){constresult=Children.toArray(children);result.reverse();// ..."
        },
        {
          "type": "list",
          "items": [
            "children: The value of thechildrenpropreceived by your component."
          ]
        },
        {
          "type": "p",
          "text": "Returns a flat array of elements inchildren."
        },
        {
          "type": "list",
          "items": [
            "Empty nodes (null,undefined, and Booleans) will be omitted in the returned array.The returned elements’ keys will be calculated from the original elements’ keys and their level of nesting and position.This ensures that flattening the array does not introduce changes in behavior."
          ]
        },
        {
          "type": "p",
          "text": "To transform the children JSX that your componentreceives as thechildrenprop,callChildren.map:"
        },
        {
          "type": "code",
          "code": "import{Children}from'react';functionRowList({children}){return(<divclassName=\"RowList\">{Children.map(children,child=><divclassName=\"Row\">{child}</div>)}</div>);}"
        },
        {
          "type": "p",
          "text": "In the example above, theRowListwraps every child it receives into a<div className=\"Row\">container. For example, let’s say the parent component passes three<p>tags as thechildrenprop toRowList:"
        },
        {
          "type": "code",
          "code": "<RowList><p>This is the first item.</p><p>This is the second item.</p><p>This is the third item.</p></RowList>"
        },
        {
          "type": "p",
          "text": "Then, with theRowListimplementation above, the final rendered result will look like this:"
        },
        {
          "type": "code",
          "code": "<divclassName=\"RowList\"><divclassName=\"Row\"><p>This is the first item.</p></div><divclassName=\"Row\"><p>This is the second item.</p></div><divclassName=\"Row\"><p>This is the third item.</p></div></div>"
        },
        {
          "type": "p",
          "text": "Children.mapis similar toto transforming arrays withmap().The difference is that thechildrendata structure is consideredopaque.This means that even if it’s sometimes an array, you should not assume it’s an array or any other particular data type. This is why you should useChildren.mapif you need to transform it."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';exportdefaultfunctionRowList({children}){return(<divclassName=\"RowList\">{Children.map(children,child=><divclassName=\"Row\">{child}</div>)}</div>);}"
        },
        {
          "type": "p",
          "text": "In React, thechildrenprop is considered anopaquedata structure. This means that you shouldn’t rely on how it is structured. To transform, filter, or count children, you should use theChildrenmethods. In practice, thechildrendata structure is often represented as an array internally. However, if there is only a single child, then React won’t create an extra array since this would lead to unnecessary memory overhead. As long as you use theChildrenmethods instead of directly introspecting thechildrenprop, your code will not break even if React changes how the data structure is actually implemented. Even whenchildrenis an array,Children.maphas useful special behavior. For example,Children.mapcombines thekeyson the returned elements with the keys on thechildrenyou’ve passed to it. This ensures the original JSX children don’t “lose” keys even if they get wrapped like in the example above."
        },
        {
          "type": "p",
          "text": "Thechildrendata structuredoes not include rendered outputof the components you pass as JSX. In the example below, thechildrenreceived by theRowListonly contains two items rather than three:"
        },
        {
          "type": "list",
          "items": ["<p>This is the first item.</p>", "<MoreRows />"]
        },
        {
          "type": "p",
          "text": "This is why only two row wrappers are generated in this example:"
        },
        {
          "type": "code",
          "code": "importRowListfrom'./RowList.js';exportdefaultfunctionApp(){return(<RowList><p>This is the first item.</p><MoreRows/></RowList>);}functionMoreRows(){return(<><p>This is the second item.</p><p>This is the third item.</p></>);}"
        },
        {
          "type": "p",
          "text": "There is no way to get the rendered output of an inner componentlike<MoreRows />when manipulatingchildren. This is whyit’s usually better to use one of the alternative solutions."
        },
        {
          "type": "p",
          "text": "CallChildren.forEachto iterate over each child in thechildrendata structure. It does not return any value and is similar to thearrayforEachmethod.You can use it to run custom logic like constructing your own array."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';exportdefaultfunctionSeparatorList({children}){constresult=[];Children.forEach(children,(child,index)=>{result.push(child);result.push(<hrkey={index}/>);});result.pop();// Remove the last separatorreturnresult;}"
        },
        {
          "type": "p",
          "text": "As mentioned earlier, there is no way to get the rendered output of an inner component when manipulatingchildren. This is whyit’s usually better to use one of the alternative solutions."
        },
        {
          "type": "p",
          "text": "CallChildren.count(children)to calculate the number of children."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';exportdefaultfunctionRowList({children}){return(<divclassName=\"RowList\"><h1className=\"RowListHeader\">Total rows:{Children.count(children)}</h1>{Children.map(children,child=><divclassName=\"Row\">{child}</div>)}</div>);}"
        },
        {
          "type": "p",
          "text": "As mentioned earlier, there is no way to get the rendered output of an inner component when manipulatingchildren. This is whyit’s usually better to use one of the alternative solutions."
        },
        {
          "type": "p",
          "text": "CallChildren.toArray(children)to turn thechildrendata structure into a regular JavaScript array. This lets you manipulate the array with built-in array methods likefilter,sort, orreverse."
        },
        {
          "type": "code",
          "code": "import{Children}from'react';exportdefaultfunctionReversedList({children}){constresult=Children.toArray(children);result.reverse();returnresult;}"
        },
        {
          "type": "p",
          "text": "As mentioned earlier, there is no way to get the rendered output of an inner component when manipulatingchildren. This is whyit’s usually better to use one of the alternative solutions."
        },
        {
          "type": "p",
          "text": "This section describes alternatives to theChildrenAPI (with capitalC) that’s imported like this:"
        },
        {
          "type": "code",
          "code": "import{Children}from'react';"
        },
        {
          "type": "p",
          "text": "Don’t confuse it withusing thechildrenprop(lowercasec), which is good and encouraged."
        },
        {
          "type": "p",
          "text": "Manipulating children with theChildrenmethods often leads to fragile code. When you pass children to a component in JSX, you don’t usually expect the component to manipulate or transform the individual children. When you can, try to avoid using theChildrenmethods. For example, if you want every child ofRowListto be wrapped in<div className=\"Row\">, export aRowcomponent, and manually wrap every row into it like this:"
        },
        {
          "type": "code",
          "code": "import{RowList,Row}from'./RowList.js';exportdefaultfunctionApp(){return(<RowList><Row><p>This is the first item.</p></Row><Row><p>This is the second item.</p></Row><Row><p>This is the third item.</p></Row></RowList>);}"
        },
        {
          "type": "p",
          "text": "Unlike usingChildren.map, this approach does not wrap every child automatically.However, this approach has a significant benefit compared to theearlier example withChildren.mapbecause it works even if you keep extracting more components.For example, it still works if you extract your ownMoreRowscomponent:"
        },
        {
          "type": "code",
          "code": "import{RowList,Row}from'./RowList.js';exportdefaultfunctionApp(){return(<RowList><Row><p>This is the first item.</p></Row><MoreRows/></RowList>);}functionMoreRows(){return(<><Row><p>This is the second item.</p></Row><Row><p>This is the third item.</p></Row></>);}"
        },
        {
          "type": "p",
          "text": "This wouldn’t work withChildren.mapbecause it would “see”<MoreRows />as a single child (and a single row)."
        },
        {
          "type": "p",
          "text": "You can also explicitly pass an array as a prop. For example, thisRowListaccepts arowsarray as a prop:"
        },
        {
          "type": "code",
          "code": "import{RowList,Row}from'./RowList.js';exportdefaultfunctionApp(){return(<RowListrows={[{id:'first',content:<p>This is the first item.</p>},{id:'second',content:<p>This is the second item.</p>},{id:'third',content:<p>This is the third item.</p>}]}/>);}"
        },
        {
          "type": "p",
          "text": "Sincerowsis a regular JavaScript array, theRowListcomponent can use built-in array methods likemapon it. This pattern is especially useful when you want to be able to pass more information as structured data together with children. In the below example, theTabSwitchercomponent receives an array of objects as thetabsprop:"
        },
        {
          "type": "code",
          "code": "importTabSwitcherfrom'./TabSwitcher.js';exportdefaultfunctionApp(){return(<TabSwitchertabs={[{id:'first',header:'First',content:<p>This is the first item.</p>},{id:'second',header:'Second',content:<p>This is the second item.</p>},{id:'third',header:'Third',content:<p>This is the third item.</p>}]}/>);}"
        },
        {
          "type": "p",
          "text": "Unlike passing the children as JSX, this approach lets you associate some extra data likeheaderwith each item. Because you are working with thetabsdirectly, and it is an array, you do not need theChildrenmethods."
        },
        {
          "type": "p",
          "text": "Instead of producing JSX for every single item, you can also pass a function that returns JSX, and call that function when necessary. In this example, theAppcomponent passes arenderContentfunction to theTabSwitchercomponent. TheTabSwitchercomponent callsrenderContentonly for the selected tab:"
        },
        {
          "type": "code",
          "code": "importTabSwitcherfrom'./TabSwitcher.js';exportdefaultfunctionApp(){return(<TabSwitchertabIds={['first','second','third']}getHeader={tabId=>{returntabId[0].toUpperCase()+tabId.slice(1);}}renderContent={tabId=>{return<p>This is the{tabId}item.</p>;}}/>);}"
        },
        {
          "type": "p",
          "text": "A prop likerenderContentis called arender propbecause it is a prop that specifies how to render a piece of the user interface. However, there is nothing special about it: it is a regular prop which happens to be a function. Render props are functions, so you can pass information to them. For example, thisRowListcomponent passes theidand theindexof each row to therenderRowrender prop, which usesindexto highlight even rows:"
        },
        {
          "type": "code",
          "code": "import{RowList,Row}from'./RowList.js';exportdefaultfunctionApp(){return(<RowListrowIds={['first','second','third']}renderRow={(id,index)=>{return(<RowisHighlighted={index%2===0}><p>This is the{id}item.</p></Row>);}}/>);}"
        },
        {
          "type": "p",
          "text": "This is another example of how parent and child components can cooperate without manipulating the children."
        },
        {
          "type": "p",
          "text": "Suppose you pass two children toRowListlike this:"
        },
        {
          "type": "code",
          "code": "<RowList><p>First item</p><MoreRows/></RowList>"
        },
        {
          "type": "p",
          "text": "If you doChildren.count(children)insideRowList, you will get2. Even ifMoreRowsrenders 10 different items, or if it returnsnull,Children.count(children)will still be2. From theRowList’s perspective, it only “sees” the JSX it has received. It does not “see” the internals of theMoreRowscomponent. The limitation makes it hard to extract a component. This is whyalternativesare preferred to usingChildren."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/Component",
      "title": "Component – React",
      "content": [
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "Componentis the base class for the React components defined asJavaScript classes.Class components are still supported by React, but we don’t recommend using them in new code."
        },
        {
          "type": "code",
          "code": "classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "list",
          "items": [
            "ReferenceComponentcontextpropsstateconstructor(props)componentDidCatch(error, info)componentDidMount()componentDidUpdate(prevProps, prevState, snapshot?)componentWillMount()componentWillReceiveProps(nextProps)componentWillUpdate(nextProps, nextState)componentWillUnmount()forceUpdate(callback?)getSnapshotBeforeUpdate(prevProps, prevState)render()setState(nextState, callback?)shouldComponentUpdate(nextProps, nextState, nextContext)UNSAFE_componentWillMount()UNSAFE_componentWillReceiveProps(nextProps, nextContext)UNSAFE_componentWillUpdate(nextProps, nextState)static contextTypestatic defaultPropsstatic getDerivedStateFromError(error)static getDerivedStateFromProps(props, state)",
            "Component",
            "context",
            "props",
            "state",
            "constructor(props)",
            "componentDidCatch(error, info)",
            "componentDidMount()",
            "componentDidUpdate(prevProps, prevState, snapshot?)",
            "componentWillMount()",
            "componentWillReceiveProps(nextProps)",
            "componentWillUpdate(nextProps, nextState)",
            "componentWillUnmount()",
            "forceUpdate(callback?)",
            "getSnapshotBeforeUpdate(prevProps, prevState)",
            "render()",
            "setState(nextState, callback?)",
            "shouldComponentUpdate(nextProps, nextState, nextContext)",
            "UNSAFE_componentWillMount()",
            "UNSAFE_componentWillReceiveProps(nextProps, nextContext)",
            "UNSAFE_componentWillUpdate(nextProps, nextState)",
            "static contextType",
            "static defaultProps",
            "static getDerivedStateFromError(error)",
            "static getDerivedStateFromProps(props, state)",
            "UsageDefining a class componentAdding state to a class componentAdding lifecycle methods to a class componentCatching rendering errors with an error boundary",
            "Defining a class component",
            "Adding state to a class component",
            "Adding lifecycle methods to a class component",
            "Catching rendering errors with an error boundary",
            "AlternativesMigrating a simple component from a class to a functionMigrating a component with state from a class to a functionMigrating a component with lifecycle methods from a class to a functionMigrating a component with context from a class to a function",
            "Migrating a simple component from a class to a function",
            "Migrating a component with state from a class to a function",
            "Migrating a component with lifecycle methods from a class to a function",
            "Migrating a component with context from a class to a function"
          ]
        },
        {
          "type": "p",
          "text": "To define a React component as a class, extend the built-inComponentclass and define arendermethod:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "p",
          "text": "Only therendermethod is required, other methods are optional. See more examples below."
        },
        {
          "type": "p",
          "text": "Thecontextof a class component is available asthis.context. It is only available if you specifywhichcontext you want to receive usingstatic contextType. A class component can only read one context at a time."
        },
        {
          "type": "code",
          "code": "classButtonextendsComponent{staticcontextType=ThemeContext;render(){consttheme=this.context;constclassName='button-'+theme;return(<buttonclassName={className}>{this.props.children}</button>);}}"
        },
        {
          "type": "p",
          "text": "Readingthis.contextin class components is equivalent touseContextin function components. See how to migrate."
        },
        {
          "type": "p",
          "text": "The props passed to a class component are available asthis.props."
        },
        {
          "type": "code",
          "code": "classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}<Greetingname=\"Taylor\"/>"
        },
        {
          "type": "p",
          "text": "Readingthis.propsin class components is equivalent todeclaring propsin function components. See how to migrate."
        },
        {
          "type": "p",
          "text": "The state of a class component is available asthis.state. Thestatefield must be an object. Do not mutate the state directly. If you wish to change the state, callsetStatewith the new state."
        },
        {
          "type": "code",
          "code": "classCounterextendsComponent{state={age:42,};handleAgeChange=()=>{this.setState({age:this.state.age+1});};render(){return(<><buttononClick={this.handleAgeChange}>Increment age</button><p>You are{this.state.age}.</p></>);}}"
        },
        {
          "type": "p",
          "text": "Definingstatein class components is equivalent to callinguseStatein function components. See how to migrate."
        },
        {
          "type": "p",
          "text": "Theconstructorruns before your class componentmounts(gets added to the screen). Typically, a constructor is only used for two purposes in React. It lets you declare state andbindyour class methods to the class instance:"
        },
        {
          "type": "code",
          "code": "classCounterextendsComponent{constructor(props){super(props);this.state={counter:0};this.handleClick=this.handleClick.bind(this);}handleClick(){// ...}"
        },
        {
          "type": "p",
          "text": "If you use modern JavaScript syntax, constructors are rarely needed. Instead, you can rewrite this code above using thepublic class field syntaxwhich is supported both by modern browsers and tools likeBabel:"
        },
        {
          "type": "code",
          "code": "classCounterextendsComponent{state={counter:0};handleClick=()=>{// ...}"
        },
        {
          "type": "p",
          "text": "A constructor should not contain any side effects or subscriptions."
        },
        {
          "type": "list",
          "items": ["props: The component’s initial props."]
        },
        {
          "type": "p",
          "text": "constructorshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "Do not run any side effects or subscriptions in the constructor. Instead, usecomponentDidMountfor that.",
            "Inside a constructor, you need to callsuper(props)before any other statement. If you don’t do that,this.propswill beundefinedwhile the constructor runs, which can be confusing and cause bugs.",
            "Constructor is the only place where you can assignthis.statedirectly. In all other methods, you need to usethis.setState()instead. Do not callsetStatein the constructor.",
            "When you useserver rendering,the constructor will run on the server too, followed by therendermethod. However, lifecycle methods likecomponentDidMountorcomponentWillUnmountwill not run on the server.",
            "WhenStrict Modeis on, React will callconstructortwice in development and then throw away one of the instances. This helps you notice the accidental side effects that need to be moved out of theconstructor."
          ]
        },
        {
          "type": "p",
          "text": "There is no exact equivalent forconstructorin function components. To declare state in a function component, calluseState.To avoid recalculating the initial state,pass a function touseState."
        },
        {
          "type": "p",
          "text": "If you definecomponentDidCatch, React will call it when some child component (including distant children) throws an error during rendering. This lets you log that error to an error reporting service in production. Typically, it is used together withstatic getDerivedStateFromErrorwhich lets you update state in response to an error and display an error message to the user. A component with these methods is called anerror boundary. See an example."
        },
        {
          "type": "list",
          "items": [
            "error: The error that was thrown. In practice, it will usually be an instance ofErrorbut this is not guaranteed because JavaScript allows tothrowany value, including strings or evennull.",
            "info: An object containing additional information about the error. ItscomponentStackfield contains a stack trace with the component that threw, as well as the names and source locations of all its parent components. In production, the component names will be minified. If you set up production error reporting, you can decode the component stack using sourcemaps the same way as you would do for regular JavaScript error stacks."
          ]
        },
        {
          "type": "p",
          "text": "componentDidCatchshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "In the past, it was common to callsetStateinsidecomponentDidCatchin order to update the UI and display the fallback error message. This is deprecated in favor of definingstatic getDerivedStateFromError.",
            "Production and development builds of React slightly differ in the waycomponentDidCatchhandles errors. In development, the errors will bubble up towindow, which means that anywindow.onerrororwindow.addEventListener('error', callback)will intercept the errors that have been caught bycomponentDidCatch. In production, instead, the errors will not bubble up, which means any ancestor error handler will only receive errors not explicitly caught bycomponentDidCatch."
          ]
        },
        {
          "type": "p",
          "text": "There is no direct equivalent forcomponentDidCatchin function components yet. If you’d like to avoid creating class components, write a singleErrorBoundarycomponent like above and use it throughout your app. Alternatively, you can use thereact-error-boundarypackage which does that for you."
        },
        {
          "type": "p",
          "text": "If you define thecomponentDidMountmethod, React will call it when your component is added(mounted)to the screen. This is a common place to start data fetching, set up subscriptions, or manipulate the DOM nodes. If you implementcomponentDidMount, you usually need to implement other lifecycle methods to avoid bugs. For example, ifcomponentDidMountreads some state or props, you also have to implementcomponentDidUpdateto handle their changes, andcomponentWillUnmountto clean up whatevercomponentDidMountwas doing."
        },
        {
          "type": "code",
          "code": "classChatRoomextendsComponent{state={serverUrl:'https://localhost:1234'};componentDidMount(){this.setupConnection();}componentDidUpdate(prevProps,prevState){if(this.props.roomId!==prevProps.roomId||this.state.serverUrl!==prevState.serverUrl){this.destroyConnection();this.setupConnection();}}componentWillUnmount(){this.destroyConnection();}// ...}"
        },
        {
          "type": "p",
          "text": "See more examples."
        },
        {
          "type": "p",
          "text": "componentDidMountdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "componentDidMountshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "WhenStrict Modeis on, in development React will callcomponentDidMount, then immediately callcomponentWillUnmount,and then callcomponentDidMountagain. This helps you notice if you forgot to implementcomponentWillUnmountor if its logic doesn’t fully “mirror” whatcomponentDidMountdoes.",
            "Although you may callsetStateimmediately incomponentDidMount, it’s best to avoid that when you can. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though therenderwill be called twice in this case, the user won’t see the intermediate state. Use this pattern with caution because it often causes performance issues. In most cases, you should be able to assign the initial state in theconstructorinstead. It can, however, be necessary for cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position."
          ]
        },
        {
          "type": "p",
          "text": "For many use cases, definingcomponentDidMount,componentDidUpdate, andcomponentWillUnmounttogether in class components is equivalent to callinguseEffectin function components. In the rare cases where it’s important for the code to run before browser paint,useLayoutEffectis a closer match. See how to migrate."
        },
        {
          "type": "p",
          "text": "If you define thecomponentDidUpdatemethod, React will call it immediately after your component has been re-rendered with updated props or state.  This method is not called for the initial render. You can use it to manipulate the DOM after an update. This is also a common place to do network requests as long as you compare the current props to previous props (e.g. a network request may not be necessary if the props have not changed). Typically, you’d use it together withcomponentDidMountandcomponentWillUnmount:"
        },
        {
          "type": "code",
          "code": "classChatRoomextendsComponent{state={serverUrl:'https://localhost:1234'};componentDidMount(){this.setupConnection();}componentDidUpdate(prevProps,prevState){if(this.props.roomId!==prevProps.roomId||this.state.serverUrl!==prevState.serverUrl){this.destroyConnection();this.setupConnection();}}componentWillUnmount(){this.destroyConnection();}// ...}"
        },
        {
          "type": "p",
          "text": "See more examples."
        },
        {
          "type": "list",
          "items": [
            "prevProps: Props before the update. CompareprevPropstothis.propsto determine what changed.",
            "prevState: State before the update. CompareprevStatetothis.stateto determine what changed.",
            "snapshot: If you implementedgetSnapshotBeforeUpdate,snapshotwill contain the value you returned from that method. Otherwise, it will beundefined."
          ]
        },
        {
          "type": "p",
          "text": "componentDidUpdateshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "componentDidUpdatewill not get called ifshouldComponentUpdateis defined and returnsfalse.",
            "The logic insidecomponentDidUpdateshould usually be wrapped in conditions comparingthis.propswithprevProps, andthis.statewithprevState. Otherwise, there’s a risk of creating infinite loops.",
            "Although you may callsetStateimmediately incomponentDidUpdate, it’s best to avoid that when you can. It will trigger an extra rendering, but it will happen before the browser updates the screen. This guarantees that even though therenderwill be called twice in this case, the user won’t see the intermediate state. This pattern often causes performance issues, but it may be necessary for rare cases like modals and tooltips when you need to measure a DOM node before rendering something that depends on its size or position."
          ]
        },
        {
          "type": "p",
          "text": "For many use cases, definingcomponentDidMount,componentDidUpdate, andcomponentWillUnmounttogether in class components is equivalent to callinguseEffectin function components. In the rare cases where it’s important for the code to run before browser paint,useLayoutEffectis a closer match. See how to migrate."
        },
        {
          "type": "p",
          "text": "This API has been renamed fromcomponentWillMounttoUNSAFE_componentWillMount.The old name has been deprecated. In a future major version of React, only the new name will work. Run therename-unsafe-lifecyclescodemodto automatically update your components."
        },
        {
          "type": "p",
          "text": "This API has been renamed fromcomponentWillReceivePropstoUNSAFE_componentWillReceiveProps.The old name has been deprecated. In a future major version of React, only the new name will work. Run therename-unsafe-lifecyclescodemodto automatically update your components."
        },
        {
          "type": "p",
          "text": "This API has been renamed fromcomponentWillUpdatetoUNSAFE_componentWillUpdate.The old name has been deprecated. In a future major version of React, only the new name will work. Run therename-unsafe-lifecyclescodemodto automatically update your components."
        },
        {
          "type": "p",
          "text": "If you define thecomponentWillUnmountmethod, React will call it before your component is removed(unmounted)from the screen. This is a common place to cancel data fetching or remove subscriptions. The logic insidecomponentWillUnmountshould “mirror” the logic insidecomponentDidMount.For example, ifcomponentDidMountsets up a subscription,componentWillUnmountshould clean up that subscription. If the cleanup logic in yourcomponentWillUnmountreads some props or state, you will usually also need to implementcomponentDidUpdateto clean up resources (such as subscriptions) corresponding to the old props and state."
        },
        {
          "type": "code",
          "code": "classChatRoomextendsComponent{state={serverUrl:'https://localhost:1234'};componentDidMount(){this.setupConnection();}componentDidUpdate(prevProps,prevState){if(this.props.roomId!==prevProps.roomId||this.state.serverUrl!==prevState.serverUrl){this.destroyConnection();this.setupConnection();}}componentWillUnmount(){this.destroyConnection();}// ...}"
        },
        {
          "type": "p",
          "text": "See more examples."
        },
        {
          "type": "p",
          "text": "componentWillUnmountdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "componentWillUnmountshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "WhenStrict Modeis on, in development React will callcomponentDidMount,then immediately callcomponentWillUnmount, and then callcomponentDidMountagain. This helps you notice if you forgot to implementcomponentWillUnmountor if its logic doesn’t fully “mirror” whatcomponentDidMountdoes."
          ]
        },
        {
          "type": "p",
          "text": "For many use cases, definingcomponentDidMount,componentDidUpdate, andcomponentWillUnmounttogether in class components is equivalent to callinguseEffectin function components. In the rare cases where it’s important for the code to run before browser paint,useLayoutEffectis a closer match. See how to migrate."
        },
        {
          "type": "p",
          "text": "Forces a component to re-render. Usually, this is not necessary. If your component’srendermethod only reads fromthis.props,this.state, orthis.context,it will re-render automatically when you callsetStateinside your component or one of its parents. However, if your component’srendermethod reads directly from an external data source, you have to tell React to update the user interface when that data source changes. That’s whatforceUpdatelets you do. Try to avoid all uses offorceUpdateand only read fromthis.propsandthis.stateinrender."
        },
        {
          "type": "list",
          "items": [
            "optionalcallbackIf specified, React will call thecallbackyou’ve provided after the update is committed."
          ]
        },
        {
          "type": "p",
          "text": "forceUpdatedoes not return anything."
        },
        {
          "type": "list",
          "items": [
            "If you callforceUpdate, React will re-render without callingshouldComponentUpdate."
          ]
        },
        {
          "type": "p",
          "text": "Reading an external data source and forcing class components to re-render in response to its changes withforceUpdatehas been superseded byuseSyncExternalStorein function components."
        },
        {
          "type": "p",
          "text": "If you implementgetSnapshotBeforeUpdate, React will call it immediately before React updates the DOM. It enables your component to capture some information from the DOM (e.g. scroll position) before it is potentially changed. Any value returned by this lifecycle method will be passed as a parameter tocomponentDidUpdate. For example, you can use it in a UI like a chat thread that needs to preserve its scroll position during updates:"
        },
        {
          "type": "code",
          "code": "classScrollingListextendsReact.Component{constructor(props){super(props);this.listRef=React.createRef();}getSnapshotBeforeUpdate(prevProps,prevState){// Are we adding new items to the list?// Capture the scroll position so we can adjust scroll later.if(prevProps.list.length<this.props.list.length){constlist=this.listRef.current;returnlist.scrollHeight-list.scrollTop;}returnnull;}componentDidUpdate(prevProps,prevState,snapshot){// If we have a snapshot value, we've just added new items.// Adjust scroll so these new items don't push the old ones out of view.// (snapshot here is the value returned from getSnapshotBeforeUpdate)if(snapshot!==null){constlist=this.listRef.current;list.scrollTop=list.scrollHeight-snapshot;}}render(){return(<divref={this.listRef}>{/* ...contents... */}</div>);}}"
        },
        {
          "type": "p",
          "text": "In the above example, it is important to read thescrollHeightproperty directly ingetSnapshotBeforeUpdate. It is not safe to read it inrender,UNSAFE_componentWillReceiveProps, orUNSAFE_componentWillUpdatebecause there is a potential time gap between these methods getting called and React updating the DOM."
        },
        {
          "type": "list",
          "items": [
            "prevProps: Props before the update. CompareprevPropstothis.propsto determine what changed.",
            "prevState: State before the update. CompareprevStatetothis.stateto determine what changed."
          ]
        },
        {
          "type": "p",
          "text": "You should return a snapshot value of any type that you’d like, ornull. The value you returned will be passed as the third argument tocomponentDidUpdate."
        },
        {
          "type": "list",
          "items": [
            "getSnapshotBeforeUpdatewill not get called ifshouldComponentUpdateis defined and returnsfalse."
          ]
        },
        {
          "type": "p",
          "text": "At the moment, there is no equivalent togetSnapshotBeforeUpdatefor function components. This use case is very uncommon, but if you have the need for it, for now you’ll have to write a class component."
        },
        {
          "type": "p",
          "text": "Therendermethod is the only required method in a class component. Therendermethod should specify what you want to appear on the screen, for example:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "p",
          "text": "React may callrenderat any moment, so you shouldn’t assume that it runs at a particular time. Usually, therendermethod should return a piece ofJSX, but a fewother return types(like strings) are supported. To calculate the returned JSX, therendermethod can readthis.props,this.state, andthis.context. You should write therendermethod as a pure function, meaning that it should return the same result if props, state, and context are the same. It also shouldn’t contain side effects (like setting up subscriptions) or interact with the browser APIs. Side effects should happen either in event handlers or methods likecomponentDidMount."
        },
        {
          "type": "p",
          "text": "renderdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "rendercan return any valid React node. This includes React elements such as<div />, strings, numbers,portals, empty nodes (null,undefined,true, andfalse), and arrays of React nodes."
        },
        {
          "type": "list",
          "items": [
            "rendershould be written as a pure function of props, state, and context. It should not have side effects.",
            "renderwill not get called ifshouldComponentUpdateis defined and returnsfalse.",
            "WhenStrict Modeis on, React will callrendertwice in development and then throw away one of the results. This helps you notice the accidental side effects that need to be moved out of therendermethod.",
            "There is no one-to-one correspondence between therendercall and the subsequentcomponentDidMountorcomponentDidUpdatecall. Some of therendercall results may be discarded by React when it’s beneficial."
          ]
        },
        {
          "type": "p",
          "text": "CallsetStateto update the state of your React component."
        },
        {
          "type": "code",
          "code": "classFormextendsComponent{state={name:'Taylor',};handleNameChange=(e)=>{constnewName=e.target.value;this.setState({name:newName});}render(){return(<><inputvalue={this.state.name}onChange={this.handleNameChange}/><p>Hello,{this.state.name}.</p></>);}}"
        },
        {
          "type": "p",
          "text": "setStateenqueues changes to the component state. It tells React that this component and its children need to re-render with the new state. This is the main way you’ll update the user interface in response to interactions."
        },
        {
          "type": "p",
          "text": "CallingsetStatedoes notchange the current state in the already executing code:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){console.log(this.state.name);// \"Taylor\"this.setState({name:'Robin'});console.log(this.state.name);// Still \"Taylor\"!}"
        },
        {
          "type": "p",
          "text": "It only affects whatthis.statewill return starting from thenextrender."
        },
        {
          "type": "p",
          "text": "You can also pass a function tosetState. It lets you update state based on the previous state:"
        },
        {
          "type": "code",
          "code": "handleIncreaseAge=()=>{this.setState(prevState=>{return{age:prevState.age+1};});}"
        },
        {
          "type": "p",
          "text": "You don’t have to do this, but it’s handy if you want to update state multiple times during the same event."
        },
        {
          "type": "list",
          "items": [
            "nextState: Either an object or a function.If you pass an object asnextState, it will be shallowly merged intothis.state.If you pass a function asnextState, it will be treated as anupdater function. It must be pure, should take the pending state and props as arguments, and should return the object to be shallowly merged intothis.state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.",
            "If you pass an object asnextState, it will be shallowly merged intothis.state.",
            "If you pass a function asnextState, it will be treated as anupdater function. It must be pure, should take the pending state and props as arguments, and should return the object to be shallowly merged intothis.state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.",
            "optionalcallback: If specified, React will call thecallbackyou’ve provided after the update is committed."
          ]
        },
        {
          "type": "p",
          "text": "setStatedoes not return anything."
        },
        {
          "type": "list",
          "items": [
            "Think ofsetStateas arequestrather than an immediate command to update the component. When multiple components update their state in response to an event, React will batch their updates and re-render them together in a single pass at the end of the event. In the rare case that you need to force a particular state update to be applied synchronously, you may wrap it influshSync,but this may hurt performance.",
            "setStatedoes not updatethis.stateimmediately. This makes readingthis.stateright after callingsetStatea potential pitfall. Instead, usecomponentDidUpdateor the setStatecallbackargument, either of which are guaranteed to fire after the update has been applied. If you need to set the state based on the previous state, you can pass a function tonextStateas described above."
          ]
        },
        {
          "type": "p",
          "text": "CallingsetStatein class components is similar to calling asetfunctionin function components. See how to migrate."
        },
        {
          "type": "p",
          "text": "If you defineshouldComponentUpdate, React will call it to determine whether a re-render can be skipped. If you are confident you want to write it by hand, you may comparethis.propswithnextPropsandthis.statewithnextStateand returnfalseto tell React the update can be skipped."
        },
        {
          "type": "code",
          "code": "classRectangleextendsComponent{state={isHovered:false};shouldComponentUpdate(nextProps,nextState){if(nextProps.position.x===this.props.position.x&&nextProps.position.y===this.props.position.y&&nextProps.size.width===this.props.size.width&&nextProps.size.height===this.props.size.height&&nextState.isHovered===this.state.isHovered){// Nothing has changed, so a re-render is unnecessaryreturnfalse;}returntrue;}// ...}"
        },
        {
          "type": "p",
          "text": "React callsshouldComponentUpdatebefore rendering when new props or state are being received. Defaults totrue. This method is not called for the initial render or whenforceUpdateis used."
        },
        {
          "type": "list",
          "items": [
            "nextProps: The next props that the component is about to render with. ComparenextPropstothis.propsto determine what changed.",
            "nextState: The next state that the component is about to render with. ComparenextStatetothis.stateto determine what changed.",
            "nextContext: The next context that the component is about to render with. ComparenextContexttothis.contextto determine what changed. Only available if you specifystatic contextType."
          ]
        },
        {
          "type": "p",
          "text": "Returntrueif you want the component to re-render. That’s the default behavior. Returnfalseto tell React that re-rendering can be skipped."
        },
        {
          "type": "list",
          "items": [
            "This methodonlyexists as a performance optimization. If your component breaks without it, fix that first.",
            "Consider usingPureComponentinstead of writingshouldComponentUpdateby hand.PureComponentshallowly compares props and state, and reduces the chance that you’ll skip a necessary update.",
            "We do not recommend doing deep equality checks or usingJSON.stringifyinshouldComponentUpdate. It makes performance unpredictable and dependent on the data structure of every prop and state. In the best case, you risk introducing multi-second stalls to your application, and in the worst case you risk crashing it.",
            "Returningfalsedoes not prevent child components from re-rendering whentheirstate changes.",
            "Returningfalsedoes notguaranteethat the component will not re-render. React will use the return value as a hint but it may still choose to re-render your component if it makes sense to do for other reasons."
          ]
        },
        {
          "type": "p",
          "text": "Optimizing class components withshouldComponentUpdateis similar to optimizing function components withmemo.Function components also offer more granular optimization withuseMemo."
        },
        {
          "type": "p",
          "text": "If you defineUNSAFE_componentWillMount, React will call it immediately after theconstructor.It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:"
        },
        {
          "type": "list",
          "items": [
            "To initialize state, declarestateas a class field or setthis.stateinside theconstructor.",
            "If you need to run a side effect or set up a subscription, move that logic tocomponentDidMountinstead."
          ]
        },
        {
          "type": "p",
          "text": "See examples of migrating away from unsafe lifecycles."
        },
        {
          "type": "p",
          "text": "UNSAFE_componentWillMountdoes not take any parameters."
        },
        {
          "type": "p",
          "text": "UNSAFE_componentWillMountshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "UNSAFE_componentWillMountwill not get called if the component implementsstatic getDerivedStateFromPropsorgetSnapshotBeforeUpdate.",
            "Despite its naming,UNSAFE_componentWillMountdoes not guarantee that the componentwillget mounted if your app uses modern React features likeSuspense.If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. This is why this method is “unsafe”. Code that relies on mounting (like adding a subscription) should go intocomponentDidMount.",
            "UNSAFE_componentWillMountis the only lifecycle method that runs duringserver rendering.For all practical purposes, it is identical toconstructor,so you should use theconstructorfor this type of logic instead."
          ]
        },
        {
          "type": "p",
          "text": "CallingsetStateinsideUNSAFE_componentWillMountin a class component to initialize state is equivalent to passing that state as the initial state touseStatein a function component."
        },
        {
          "type": "p",
          "text": "If you defineUNSAFE_componentWillReceiveProps, React will call it when the component receives new props. It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:"
        },
        {
          "type": "list",
          "items": [
            "If you need torun a side effect(for example, fetch data, run an animation, or reinitialize a subscription) in response to prop changes, move that logic tocomponentDidUpdateinstead.",
            "If you need toavoid re-computing some data only when a prop changes,use amemoization helperinstead.",
            "If you need to“reset” some state when a prop changes,consider either making a componentfully controlledorfully uncontrolled with a keyinstead.",
            "If you need to“adjust” some state when a prop changes,check whether you can compute all the necessary information from props alone during rendering. If you can’t, usestatic getDerivedStateFromPropsinstead."
          ]
        },
        {
          "type": "p",
          "text": "See examples of migrating away from unsafe lifecycles."
        },
        {
          "type": "list",
          "items": [
            "nextProps: The next props that the component is about to receive from its parent component. ComparenextPropstothis.propsto determine what changed.",
            "nextContext: The next context that the component is about to receive from the closest provider. ComparenextContexttothis.contextto determine what changed. Only available if you specifystatic contextType."
          ]
        },
        {
          "type": "p",
          "text": "UNSAFE_componentWillReceivePropsshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "UNSAFE_componentWillReceivePropswill not get called if the component implementsstatic getDerivedStateFromPropsorgetSnapshotBeforeUpdate.",
            "Despite its naming,UNSAFE_componentWillReceivePropsdoes not guarantee that the componentwillreceive those props if your app uses modern React features likeSuspense.If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. By the time of the next render attempt, the props might be different. This is why this method is “unsafe”. Code that should run only for committed updates (like resetting a subscription) should go intocomponentDidUpdate.",
            "UNSAFE_componentWillReceivePropsdoes not mean that the component has receiveddifferentprops than the last time. You need to comparenextPropsandthis.propsyourself to check if something changed.",
            "React doesn’t callUNSAFE_componentWillReceivePropswith initial props during mounting. It only calls this method if some of component’s props are going to be updated. For example, callingsetStatedoesn’t generally triggerUNSAFE_componentWillReceivePropsinside the same component."
          ]
        },
        {
          "type": "p",
          "text": "CallingsetStateinsideUNSAFE_componentWillReceivePropsin a class component to “adjust” state is equivalent tocalling thesetfunction fromuseStateduring renderingin a function component."
        },
        {
          "type": "p",
          "text": "If you defineUNSAFE_componentWillUpdate, React will call it before rendering with the new props or state. It only exists for historical reasons and should not be used in any new code. Instead, use one of the alternatives:"
        },
        {
          "type": "list",
          "items": [
            "If you need to run a side effect (for example, fetch data, run an animation, or reinitialize a subscription) in response to prop or state changes, move that logic tocomponentDidUpdateinstead.",
            "If you need to read some information from the DOM (for example, to save the current scroll position) so that you can use it incomponentDidUpdatelater, read it insidegetSnapshotBeforeUpdateinstead."
          ]
        },
        {
          "type": "p",
          "text": "See examples of migrating away from unsafe lifecycles."
        },
        {
          "type": "list",
          "items": [
            "nextProps: The next props that the component is about to render with. ComparenextPropstothis.propsto determine what changed.",
            "nextState: The next state that the component is about to render with. ComparenextStatetothis.stateto determine what changed."
          ]
        },
        {
          "type": "p",
          "text": "UNSAFE_componentWillUpdateshould not return anything."
        },
        {
          "type": "list",
          "items": [
            "UNSAFE_componentWillUpdatewill not get called ifshouldComponentUpdateis defined and returnsfalse.",
            "UNSAFE_componentWillUpdatewill not get called if the component implementsstatic getDerivedStateFromPropsorgetSnapshotBeforeUpdate.",
            "It’s not supported to callsetState(or any method that leads tosetStatebeing called, like dispatching a Redux action) duringcomponentWillUpdate.",
            "Despite its naming,UNSAFE_componentWillUpdatedoes not guarantee that the componentwillupdate if your app uses modern React features likeSuspense.If a render attempt is suspended (for example, because the code for some child component has not loaded yet), React will throw the in-progress tree away and attempt to construct the component from scratch during the next attempt. By the time of the next render attempt, the props and state might be different. This is why this method is “unsafe”. Code that should run only for committed updates (like resetting a subscription) should go intocomponentDidUpdate.",
            "UNSAFE_componentWillUpdatedoes not mean that the component has receiveddifferentprops or state than the last time. You need to comparenextPropswiththis.propsandnextStatewiththis.stateyourself to check if something changed.",
            "React doesn’t callUNSAFE_componentWillUpdatewith initial props and state during mounting."
          ]
        },
        {
          "type": "p",
          "text": "There is no direct equivalent toUNSAFE_componentWillUpdatein function components."
        },
        {
          "type": "p",
          "text": "If you want to readthis.contextfrom your class component, you must specify which context it needs to read. The context you specify as thestatic contextTypemust be a value previously created bycreateContext."
        },
        {
          "type": "code",
          "code": "classButtonextendsComponent{staticcontextType=ThemeContext;render(){consttheme=this.context;constclassName='button-'+theme;return(<buttonclassName={className}>{this.props.children}</button>);}}"
        },
        {
          "type": "p",
          "text": "Readingthis.contextin class components is equivalent touseContextin function components. See how to migrate."
        },
        {
          "type": "p",
          "text": "You can definestatic defaultPropsto set the default props for the class. They will be used forundefinedand missing props, but not fornullprops. For example, here is how you define that thecolorprop should default to'blue':"
        },
        {
          "type": "code",
          "code": "classButtonextendsComponent{staticdefaultProps={color:'blue'};render(){return<buttonclassName={this.props.color}>click me</button>;}}"
        },
        {
          "type": "p",
          "text": "If thecolorprop is not provided or isundefined, it will be set by default to'blue':"
        },
        {
          "type": "code",
          "code": "<>{/* this.props.color is \"blue\" */}<Button/>{/* this.props.color is \"blue\" */}<Buttoncolor={undefined}/>{/* this.props.color is null */}<Buttoncolor={null}/>{/* this.props.color is \"red\" */}<Buttoncolor=\"red\"/></>"
        },
        {
          "type": "p",
          "text": "DefiningdefaultPropsin class components is similar to usingdefault valuesin function components."
        },
        {
          "type": "p",
          "text": "If you definestatic getDerivedStateFromError, React will call it when a child component (including distant children) throws an error during rendering. This lets you display an error message instead of clearing the UI. Typically, it is used together withcomponentDidCatchwhich lets you send the error report to some analytics service. A component with these methods is called anerror boundary. See an example."
        },
        {
          "type": "list",
          "items": [
            "error: The error that was thrown. In practice, it will usually be an instance ofErrorbut this is not guaranteed because JavaScript allows tothrowany value, including strings or evennull."
          ]
        },
        {
          "type": "p",
          "text": "static getDerivedStateFromErrorshould return the state telling the component to display the error message."
        },
        {
          "type": "list",
          "items": [
            "static getDerivedStateFromErrorshould be a pure function. If you want to perform a side effect (for example, to call an analytics service), you need to also implementcomponentDidCatch."
          ]
        },
        {
          "type": "p",
          "text": "There is no direct equivalent forstatic getDerivedStateFromErrorin function components yet. If you’d like to avoid creating class components, write a singleErrorBoundarycomponent like above and use it throughout your app. Alternatively, use thereact-error-boundarypackage which does that."
        },
        {
          "type": "p",
          "text": "If you definestatic getDerivedStateFromProps, React will call it right before callingrender,both on the initial mount and on subsequent updates. It should return an object to update the state, ornullto update nothing. This method exists forrare use caseswhere the state depends on changes in props over time. For example, thisFormcomponent resets theemailstate when theuserIDprop changes:"
        },
        {
          "type": "code",
          "code": "classFormextendsComponent{state={email:this.props.defaultEmail,prevUserID:this.props.userID};staticgetDerivedStateFromProps(props,state){// Any time the current user changes,// Reset any parts of state that are tied to that user.// In this simple example, that's just the email.if(props.userID!==state.prevUserID){return{prevUserID:props.userID,email:props.defaultEmail};}returnnull;}// ...}"
        },
        {
          "type": "p",
          "text": "Note that this pattern requires you to keep a previous value of the prop (likeuserID) in state (likeprevUserID)."
        },
        {
          "type": "p",
          "text": "Deriving state leads to verbose code and makes your components difficult to think about.Make sure you’re familiar with simpler alternatives:"
        },
        {
          "type": "list",
          "items": [
            "If you need toperform a side effect(for example, data fetching or an animation) in response to a change in props, usecomponentDidUpdatemethod instead.",
            "If you want tore-compute some data only when a prop changes,use a memoization helper instead.",
            "If you want to“reset” some state when a prop changes,consider either making a componentfully controlledorfully uncontrolled with a keyinstead."
          ]
        },
        {
          "type": "list",
          "items": [
            "props: The next props that the component is about to render with.",
            "state: The next state that the component is about to render with."
          ]
        },
        {
          "type": "p",
          "text": "static getDerivedStateFromPropsreturn an object to update the state, ornullto update nothing."
        },
        {
          "type": "list",
          "items": [
            "This method is fired oneveryrender, regardless of the cause. This is different fromUNSAFE_componentWillReceiveProps, which only fires when the parent causes a re-render and not as a result of a localsetState.",
            "This method doesn’t have access to the component instance. If you’d like, you can reuse some code betweenstatic getDerivedStateFromPropsand the other class methods by extracting pure functions of the component props and state outside the class definition."
          ]
        },
        {
          "type": "p",
          "text": "Implementingstatic getDerivedStateFromPropsin a class component is equivalent tocalling thesetfunction fromuseStateduring renderingin a function component."
        },
        {
          "type": "p",
          "text": "To define a React component as a class, extend the built-inComponentclass and define arendermethod:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "p",
          "text": "React will call yourrendermethod whenever it needs to figure out what to display on the screen. Usually, you will return someJSXfrom it. Yourrendermethod should be apure function:it should only calculate the JSX. Similarly tofunction components,a class component canreceive information by propsfrom its parent component. However, the syntax for reading props is different. For example, if the parent component renders<Greeting name=\"Taylor\" />, then you can read thenameprop fromthis.props, likethis.props.name:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}exportdefaultfunctionApp(){return(<><Greetingname=\"Sara\"/><Greetingname=\"Cahal\"/><Greetingname=\"Edite\"/></>);}"
        },
        {
          "type": "p",
          "text": "Note that Hooks (functions starting withuse, likeuseState) are not supported inside class components."
        },
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "To addstateto a class, assign an object to a property calledstate. To update state, callthis.setState."
        },
        {
          "type": "code",
          "code": "import{Component}from'react';exportdefaultclassCounterextendsComponent{state={name:'Taylor',age:42,};handleNameChange=(e)=>{this.setState({name:e.target.value});}handleAgeChange=()=>{this.setState({age:this.state.age+1});};render(){return(<><inputvalue={this.state.name}onChange={this.handleNameChange}/><buttononClick={this.handleAgeChange}>Increment age</button><p>Hello,{this.state.name}. You are{this.state.age}.</p></>);}}"
        },
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "There are a few special methods you can define on your class. If you define thecomponentDidMountmethod, React will call it when your component is added(mounted)to the screen. React will callcomponentDidUpdateafter your component re-renders due to changed props or state. React will callcomponentWillUnmountafter your component has been removed(unmounted)from the screen. If you implementcomponentDidMount, you usually need to implement all three lifecycles to avoid bugs. For example, ifcomponentDidMountreads some state or props, you also have to implementcomponentDidUpdateto handle their changes, andcomponentWillUnmountto clean up whatevercomponentDidMountwas doing. For example, thisChatRoomcomponent keeps a chat connection synchronized with props and state:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';import{createConnection}from'./chat.js';exportdefaultclassChatRoomextendsComponent{state={serverUrl:'https://localhost:1234'};componentDidMount(){this.setupConnection();}componentDidUpdate(prevProps,prevState){if(this.props.roomId!==prevProps.roomId||this.state.serverUrl!==prevState.serverUrl){this.destroyConnection();this.setupConnection();}}componentWillUnmount(){this.destroyConnection();}setupConnection(){this.connection=createConnection(this.state.serverUrl,this.props.roomId);this.connection.connect();}destroyConnection(){this.connection.disconnect();this.connection=null;}render(){return(<><label>Server URL:{' '}<inputvalue={this.state.serverUrl}onChange={e=>{this.setState({serverUrl:e.target.value});}}/></label><h1>Welcome to the{this.props.roomId}room!</h1></>);}}"
        },
        {
          "type": "p",
          "text": "Note that in development whenStrict Modeis on, React will callcomponentDidMount, immediately callcomponentWillUnmount, and then callcomponentDidMountagain. This helps you notice if you forgot to implementcomponentWillUnmountor if its logic doesn’t fully “mirror” whatcomponentDidMountdoes."
        },
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "By default, if your application throws an error during rendering, React will remove its UI from the screen. To prevent this, you can wrap a part of your UI into anerror boundary. An error boundary is a special component that lets you display some fallback UI instead of the part that crashed—for example, an error message. To implement an error boundary component, you need to providestatic getDerivedStateFromErrorwhich lets you update state in response to an error and display an error message to the user. You can also optionally implementcomponentDidCatchto add some extra logic, for example, to log the error to an analytics service."
        },
        {
          "type": "code",
          "code": "classErrorBoundaryextendsReact.Component{constructor(props){super(props);this.state={hasError:false};}staticgetDerivedStateFromError(error){// Update state so the next render will show the fallback UI.return{hasError:true};}componentDidCatch(error,info){// Example \"componentStack\"://   in ComponentThatThrows (created by App)//   in ErrorBoundary (created by App)//   in div (created by App)//   in ApplogErrorToMyService(error,info.componentStack);}render(){if(this.state.hasError){// You can render any custom fallback UIreturnthis.props.fallback;}returnthis.props.children;}}"
        },
        {
          "type": "p",
          "text": "Then you can wrap a part of your component tree with it:"
        },
        {
          "type": "code",
          "code": "<ErrorBoundaryfallback={<p>Something went wrong</p>}><Profile/></ErrorBoundary>"
        },
        {
          "type": "p",
          "text": "IfProfileor its child component throws an error,ErrorBoundarywill “catch” that error, display a fallback UI with the error message you’ve provided, and send a production error report to your error reporting service. You don’t need to wrap every component into a separate error boundary. When you think about thegranularity of error boundaries,consider where it makes sense to display an error message. For example, in a messaging app, it makes sense to place an error boundary around the list of conversations. It also makes sense to place one around every individual message. However, it wouldn’t make sense to place a boundary around every avatar."
        },
        {
          "type": "p",
          "text": "There is currently no way to write an error boundary as a function component. However, you don’t have to write the error boundary class yourself. For example, you can usereact-error-boundaryinstead."
        },
        {
          "type": "p",
          "text": "Typically, you willdefine components as functionsinstead. For example, suppose you’re converting thisGreetingclass component to a function:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';classGreetingextendsComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}exportdefaultfunctionApp(){return(<><Greetingname=\"Sara\"/><Greetingname=\"Cahal\"/><Greetingname=\"Edite\"/></>);}"
        },
        {
          "type": "p",
          "text": "Define a function calledGreeting. This is where you will move the body of yourrenderfunction."
        },
        {
          "type": "code",
          "code": "functionGreeting(){// ... move the code from the render method here ...}"
        },
        {
          "type": "p",
          "text": "Instead ofthis.props.name, define thenamepropusing the destructuring syntaxand read it directly:"
        },
        {
          "type": "code",
          "code": "functionGreeting({name}){return<h1>Hello,{name}!</h1>;}"
        },
        {
          "type": "p",
          "text": "Here is a complete example:"
        },
        {
          "type": "code",
          "code": "functionGreeting({name}){return<h1>Hello,{name}!</h1>;}exportdefaultfunctionApp(){return(<><Greetingname=\"Sara\"/><Greetingname=\"Cahal\"/><Greetingname=\"Edite\"/></>);}"
        },
        {
          "type": "p",
          "text": "Suppose you’re converting thisCounterclass component to a function:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';exportdefaultclassCounterextendsComponent{state={name:'Taylor',age:42,};handleNameChange=(e)=>{this.setState({name:e.target.value});}handleAgeChange=(e)=>{this.setState({age:this.state.age+1});};render(){return(<><inputvalue={this.state.name}onChange={this.handleNameChange}/><buttononClick={this.handleAgeChange}>Increment age</button><p>Hello,{this.state.name}. You are{this.state.age}.</p></>);}}"
        },
        {
          "type": "p",
          "text": "Start by declaring a function with the necessarystate variables:"
        },
        {
          "type": "code",
          "code": "import{useState}from'react';functionCounter(){const[name,setName]=useState('Taylor');const[age,setAge]=useState(42);// ..."
        },
        {
          "type": "p",
          "text": "Next, convert the event handlers:"
        },
        {
          "type": "code",
          "code": "functionCounter(){const[name,setName]=useState('Taylor');const[age,setAge]=useState(42);functionhandleNameChange(e){setName(e.target.value);}functionhandleAgeChange(){setAge(age+1);}// ..."
        },
        {
          "type": "p",
          "text": "Finally, replace all references starting withthiswith the variables and functions you defined in your component. For example, replacethis.state.agewithage, and replacethis.handleNameChangewithhandleNameChange. Here is a fully converted component:"
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionCounter(){const[name,setName]=useState('Taylor');const[age,setAge]=useState(42);functionhandleNameChange(e){setName(e.target.value);}functionhandleAgeChange(){setAge(age+1);}return(<><inputvalue={name}onChange={handleNameChange}/><buttononClick={handleAgeChange}>Increment age</button><p>Hello,{name}. You are{age}.</p></>)}"
        },
        {
          "type": "p",
          "text": "Suppose you’re converting thisChatRoomclass component with lifecycle methods to a function:"
        },
        {
          "type": "code",
          "code": "import{Component}from'react';import{createConnection}from'./chat.js';exportdefaultclassChatRoomextendsComponent{state={serverUrl:'https://localhost:1234'};componentDidMount(){this.setupConnection();}componentDidUpdate(prevProps,prevState){if(this.props.roomId!==prevProps.roomId||this.state.serverUrl!==prevState.serverUrl){this.destroyConnection();this.setupConnection();}}componentWillUnmount(){this.destroyConnection();}setupConnection(){this.connection=createConnection(this.state.serverUrl,this.props.roomId);this.connection.connect();}destroyConnection(){this.connection.disconnect();this.connection=null;}render(){return(<><label>Server URL:{' '}<inputvalue={this.state.serverUrl}onChange={e=>{this.setState({serverUrl:e.target.value});}}/></label><h1>Welcome to the{this.props.roomId}room!</h1></>);}}"
        },
        {
          "type": "p",
          "text": "First, verify that yourcomponentWillUnmountdoes the opposite ofcomponentDidMount.In the above example, that’s true: it disconnects the connection thatcomponentDidMountsets up. If such logic is missing, add it first. Next, verify that yourcomponentDidUpdatemethod handles changes to any props and state you’re using incomponentDidMount. In the above example,componentDidMountcallssetupConnectionwhich readsthis.state.serverUrlandthis.props.roomId. This is whycomponentDidUpdatechecks whetherthis.state.serverUrlandthis.props.roomIdhave changed, and resets the connection if they did. If yourcomponentDidUpdatelogic is missing or doesn’t handle changes to all relevant props and state, fix that first. In the above example, the logic inside the lifecycle methods connects the component to a system outside of React (a chat server). To connect a component to an external system,describe this logic as a single Effect:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);// ...}"
        },
        {
          "type": "p",
          "text": "ThisuseEffectcall is equivalent to the logic in the lifecycle methods above. If your lifecycle methods do multiple unrelated things,split them into multiple independent Effects.Here is a complete example you can play with:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{createConnection}from'./chat.js';exportdefaultfunctionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}"
        },
        {
          "type": "p",
          "text": "If your component does not synchronize with any external systems,you might not need an Effect."
        },
        {
          "type": "p",
          "text": "In this example, thePanelandButtonclass components readcontextfromthis.context:"
        },
        {
          "type": "code",
          "code": "import{createContext,Component}from'react';constThemeContext=createContext(null);classPanelextendsComponent{staticcontextType=ThemeContext;render(){consttheme=this.context;constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{this.props.title}</h1>{this.props.children}</section>);}}classButtonextendsComponent{staticcontextType=ThemeContext;render(){consttheme=this.context;constclassName='button-'+theme;return(<buttonclassName={className}>{this.props.children}</button>);}}functionForm(){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button></Panel>);}exportdefaultfunctionMyApp(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>)}"
        },
        {
          "type": "p",
          "text": "When you convert them to function components, replacethis.contextwithuseContextcalls:"
        },
        {
          "type": "code",
          "code": "import{createContext,useContext}from'react';constThemeContext=createContext(null);functionPanel({title,children}){consttheme=useContext(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{title}</h1>{children}</section>)}functionButton({children}){consttheme=useContext(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}>{children}</button>);}functionForm(){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button></Panel>);}exportdefaultfunctionMyApp(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>)}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/Fragment",
      "title": "<Fragment> (<>...</>) – React",
      "content": [
        {
          "type": "p",
          "text": "<Fragment>, often used via<>...</>syntax, lets you group elements without a wrapper node."
        },
        {
          "type": "code",
          "code": "<><OneChild/><AnotherChild/></>"
        },
        {
          "type": "list",
          "items": [
            "Reference<Fragment>",
            "<Fragment>",
            "UsageReturning multiple elementsAssigning multiple elements to a variableGrouping elements with textRendering a list of Fragments",
            "Returning multiple elements",
            "Assigning multiple elements to a variable",
            "Grouping elements with text",
            "Rendering a list of Fragments"
          ]
        },
        {
          "type": "p",
          "text": "Wrap elements in<Fragment>to group them together in situations where you need a single element. Grouping elements inFragmenthas no effect on the resulting DOM; it is the same as if the elements were not grouped. The empty JSX tag<></>is shorthand for<Fragment></Fragment>in most cases."
        },
        {
          "type": "list",
          "items": [
            "optionalkey: Fragments declared with the explicit<Fragment>syntax may havekeys."
          ]
        },
        {
          "type": "list",
          "items": [
            "If you want to passkeyto a Fragment, you can’t use the<>...</>syntax. You have to explicitly importFragmentfrom'react'and render<Fragment key={yourKey}>...</Fragment>.",
            "React does notreset statewhen you go from rendering<><Child /></>to[<Child />]or back, or when you go from rendering<><Child /></>to<Child />and back. This only works a single level deep: for example, going from<><><Child /></></>to<Child />resets the state. See the precise semanticshere."
          ]
        },
        {
          "type": "p",
          "text": "UseFragment, or the equivalent<>...</>syntax, to group multiple elements together. You can use it to put multiple elements in any place where a single element can go. For example, a component can only return one element, but by using a Fragment you can group multiple elements together and then return them as a group:"
        },
        {
          "type": "code",
          "code": "functionPost(){return(<><PostTitle/><PostBody/></>);}"
        },
        {
          "type": "p",
          "text": "Fragments are useful because grouping elements with a Fragment has no effect on layout or styles, unlike if you wrapped the elements in another container like a DOM element. If you inspect this example with the browser tools, you’ll see that all<h1>and<article>DOM nodes appear as siblings without wrappers around them:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionBlog(){return(<><Posttitle=\"An update\"body=\"It's been a while since I posted...\"/><Posttitle=\"My new blog\"body=\"I am starting a new blog!\"/></>)}functionPost({title,body}){return(<><PostTitletitle={title}/><PostBodybody={body}/></>);}functionPostTitle({title}){return<h1>{title}</h1>}functionPostBody({body}){return(<article><p>{body}</p></article>);}"
        },
        {
          "type": "p",
          "text": "The example above is equivalent to importingFragmentfrom React:"
        },
        {
          "type": "code",
          "code": "import{Fragment}from'react';functionPost(){return(<Fragment><PostTitle/><PostBody/></Fragment>);}"
        },
        {
          "type": "p",
          "text": "Usually you won’t need this unless you need topass akeyto yourFragment."
        },
        {
          "type": "p",
          "text": "Like any other element, you can assign Fragment elements to variables, pass them as props, and so on:"
        },
        {
          "type": "code",
          "code": "functionCloseDialog(){constbuttons=(<><OKButton/><CancelButton/></>);return(<AlertDialogbuttons={buttons}>Are you sure you want to leave this page?</AlertDialog>);}"
        },
        {
          "type": "p",
          "text": "You can useFragmentto group text together with components:"
        },
        {
          "type": "code",
          "code": "functionDateRangePicker({start,end}){return(<>From<DatePickerdate={start}/>to<DatePickerdate={end}/></>);}"
        },
        {
          "type": "p",
          "text": "Here’s a situation where you need to writeFragmentexplicitly instead of using the<></>syntax. When yourender multiple elements in a loop, you need to assign akeyto each element. If the elements within the loop are Fragments, you need to use the normal JSX element syntax in order to provide thekeyattribute:"
        },
        {
          "type": "code",
          "code": "functionBlog(){returnposts.map(post=><Fragmentkey={post.id}><PostTitletitle={post.title}/><PostBodybody={post.body}/></Fragment>);}"
        },
        {
          "type": "p",
          "text": "You can inspect the DOM to verify that there are no wrapper elements around the Fragment children:"
        },
        {
          "type": "code",
          "code": "import{Fragment}from'react';constposts=[{id:1,title:'An update',body:\"It's been a while since I posted...\"},{id:2,title:'My new blog',body:'I am starting a new blog!'}];exportdefaultfunctionBlog(){returnposts.map(post=><Fragmentkey={post.id}><PostTitletitle={post.title}/><PostBodybody={post.body}/></Fragment>);}functionPostTitle({title}){return<h1>{title}</h1>}functionPostBody({body}){return(<article><p>{body}</p></article>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/Profiler",
      "title": "<Profiler> – React",
      "content": [
        {
          "type": "p",
          "text": "<Profiler>lets you measure rendering performance of a React tree programmatically."
        },
        {
          "type": "code",
          "code": "<Profilerid=\"App\"onRender={onRender}><App/></Profiler>"
        },
        {
          "type": "list",
          "items": [
            "Reference<Profiler>onRendercallback",
            "<Profiler>",
            "onRendercallback",
            "UsageMeasuring rendering performance programmaticallyMeasuring different parts of the application",
            "Measuring rendering performance programmatically",
            "Measuring different parts of the application"
          ]
        },
        {
          "type": "p",
          "text": "Wrap a component tree in a<Profiler>to measure its rendering performance."
        },
        {
          "type": "code",
          "code": "<Profilerid=\"App\"onRender={onRender}><App/></Profiler>"
        },
        {
          "type": "list",
          "items": [
            "id: A string identifying the part of the UI you are measuring.",
            "onRender: AnonRendercallbackthat React calls every time components within the profiled tree update. It receives information about what was rendered and how much time it took."
          ]
        },
        {
          "type": "list",
          "items": [
            "Profiling adds some additional overhead, soit is disabled in the production build by default.To opt into production profiling, you need to enable aspecial production build with profiling enabled."
          ]
        },
        {
          "type": "p",
          "text": "React will call youronRendercallback with information about what was rendered."
        },
        {
          "type": "code",
          "code": "functiononRender(id,phase,actualDuration,baseDuration,startTime,commitTime){// Aggregate or log render timings...}"
        },
        {
          "type": "list",
          "items": [
            "id: The stringidprop of the<Profiler>tree that has just committed. This lets you identify which part of the tree was committed if you are using multiple profilers.",
            "phase:\"mount\",\"update\"or\"nested-update\". This lets you know whether the tree has just been mounted for the first time or re-rendered due to a change in props, state, or Hooks.",
            "actualDuration: The number of milliseconds spent rendering the<Profiler>and its descendants for the current update. This indicates how well the subtree makes use of memoization (e.g.memoanduseMemo). Ideally this value should decrease significantly after the initial mount as many of the descendants will only need to re-render if their specific props change.",
            "baseDuration: The number of milliseconds estimating how much time it would take to re-render the entire<Profiler>subtree without any optimizations. It is calculated by summing up the most recent render durations of each component in the tree. This value estimates a worst-case cost of rendering (e.g. the initial mount or a tree with no memoization). CompareactualDurationagainst it to see if memoization is working.",
            "startTime: A numeric timestamp for when React began rendering the current update.",
            "commitTime: A numeric timestamp for when React committed the current update. This value is shared between all profilers in a commit, enabling them to be grouped if desirable."
          ]
        },
        {
          "type": "p",
          "text": "Wrap the<Profiler>component around a React tree to measure its rendering performance."
        },
        {
          "type": "code",
          "code": "<App><Profilerid=\"Sidebar\"onRender={onRender}><Sidebar/></Profiler><PageContent/></App>"
        },
        {
          "type": "p",
          "text": "It requires two props: anid(string) and anonRendercallback (function) which React calls any time a component within the tree “commits” an update."
        },
        {
          "type": "p",
          "text": "Profiling adds some additional overhead, soit is disabled in the production build by default.To opt into production profiling, you need to enable aspecial production build with profiling enabled."
        },
        {
          "type": "p",
          "text": "<Profiler>lets you gather measurements programmatically. If you’re looking for an interactive profiler, try the Profiler tab inReact Developer Tools. It exposes similar functionality as a browser extension."
        },
        {
          "type": "p",
          "text": "You can use multiple<Profiler>components to measure different parts of your application:"
        },
        {
          "type": "code",
          "code": "<App><Profilerid=\"Sidebar\"onRender={onRender}><Sidebar/></Profiler><Profilerid=\"Content\"onRender={onRender}><Content/></Profiler></App>"
        },
        {
          "type": "p",
          "text": "You can also nest<Profiler>components:"
        },
        {
          "type": "code",
          "code": "<App><Profilerid=\"Sidebar\"onRender={onRender}><Sidebar/></Profiler><Profilerid=\"Content\"onRender={onRender}><Content><Profilerid=\"Editor\"onRender={onRender}><Editor/></Profiler><Preview/></Content></Profiler></App>"
        },
        {
          "type": "p",
          "text": "Although<Profiler>is a lightweight component, it should be used only when necessary. Each use adds some CPU and memory overhead to an application."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/PureComponent",
      "title": "PureComponent – React",
      "content": [
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "PureComponentis similar toComponentbut it skips re-renders for same props and state. Class components are still supported by React, but we don’t recommend using them in new code."
        },
        {
          "type": "code",
          "code": "classGreetingextendsPureComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "list",
          "items": [
            "ReferencePureComponent",
            "PureComponent",
            "UsageSkipping unnecessary re-renders for class components",
            "Skipping unnecessary re-renders for class components",
            "AlternativesMigrating from aPureComponentclass component to a function",
            "Migrating from aPureComponentclass component to a function"
          ]
        },
        {
          "type": "p",
          "text": "To skip re-rendering a class component for same props and state, extendPureComponentinstead ofComponent:"
        },
        {
          "type": "code",
          "code": "import{PureComponent}from'react';classGreetingextendsPureComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "p",
          "text": "PureComponentis a subclass ofComponentand supportsall theComponentAPIs.ExtendingPureComponentis equivalent to defining a customshouldComponentUpdatemethod that shallowly compares props and state. See more examples below."
        },
        {
          "type": "p",
          "text": "React normally re-renders a component whenever its parent re-renders. As an optimization, you can create a component that React will not re-render when its parent re-renders so long as its new props and state are the same as the old props and state.Class componentscan opt into this behavior by extendingPureComponent:"
        },
        {
          "type": "code",
          "code": "classGreetingextendsPureComponent{render(){return<h1>Hello,{this.props.name}!</h1>;}}"
        },
        {
          "type": "p",
          "text": "A React component should always havepure rendering logic.This means that it must return the same output if its props, state, and context haven’t changed. By usingPureComponent, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props and state haven’t changed. However, your component will still re-render if a context that it’s using changes. In this example, notice that theGreetingcomponent re-renders whenevernameis changed (because that’s one of its props), but not whenaddressis changed (because it’s not passed toGreetingas a prop):"
        },
        {
          "type": "code",
          "code": "import{PureComponent,useState}from'react';classGreetingextendsPureComponent{render(){console.log(\"Greeting was rendered at\",newDate().toLocaleTimeString());return<h3>Hello{this.props.name&&', '}{this.props.name}!</h3>;}}exportdefaultfunctionMyApp(){const[name,setName]=useState('');const[address,setAddress]=useState('');return(<><label>Name{': '}<inputvalue={name}onChange={e=>setName(e.target.value)}/></label><label>Address{': '}<inputvalue={address}onChange={e=>setAddress(e.target.value)}/></label><Greetingname={name}/></>);}"
        },
        {
          "type": "p",
          "text": "We recommend defining components as functions instead of classes.See how to migrate."
        },
        {
          "type": "p",
          "text": "We recommend using function components instead ofclass componentsin new code. If you have some existing class components usingPureComponent, here is how you can convert them. This is the original code:"
        },
        {
          "type": "code",
          "code": "import{PureComponent,useState}from'react';classGreetingextendsPureComponent{render(){console.log(\"Greeting was rendered at\",newDate().toLocaleTimeString());return<h3>Hello{this.props.name&&', '}{this.props.name}!</h3>;}}exportdefaultfunctionMyApp(){const[name,setName]=useState('');const[address,setAddress]=useState('');return(<><label>Name{': '}<inputvalue={name}onChange={e=>setName(e.target.value)}/></label><label>Address{': '}<inputvalue={address}onChange={e=>setAddress(e.target.value)}/></label><Greetingname={name}/></>);}"
        },
        {
          "type": "p",
          "text": "When youconvert this component from a class to a function,wrap it inmemo:"
        },
        {
          "type": "code",
          "code": "import{memo,useState}from'react';constGreeting=memo(functionGreeting({name}){console.log(\"Greeting was rendered at\",newDate().toLocaleTimeString());return<h3>Hello{name&&', '}{name}!</h3>;});exportdefaultfunctionMyApp(){const[name,setName]=useState('');const[address,setAddress]=useState('');return(<><label>Name{': '}<inputvalue={name}onChange={e=>setName(e.target.value)}/></label><label>Address{': '}<inputvalue={address}onChange={e=>setAddress(e.target.value)}/></label><Greetingname={name}/></>);}"
        },
        {
          "type": "p",
          "text": "UnlikePureComponent,memodoes not compare the new and the old state. In function components, calling thesetfunctionwith the same statealready prevents re-renders by default,even withoutmemo."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/StrictMode",
      "title": "<StrictMode> – React",
      "content": [
        {
          "type": "p",
          "text": "<StrictMode>lets you find common bugs in your components early during development."
        },
        {
          "type": "code",
          "code": "<StrictMode><App/></StrictMode>"
        },
        {
          "type": "list",
          "items": [
            "Reference<StrictMode>",
            "<StrictMode>",
            "UsageEnabling Strict Mode for entire appEnabling Strict Mode for a part of the appFixing bugs found by double rendering in developmentFixing bugs found by re-running Effects in developmentFixing bugs found by re-running ref callbacks in developmentFixing deprecation warnings enabled by Strict Mode",
            "Enabling Strict Mode for entire app",
            "Enabling Strict Mode for a part of the app",
            "Fixing bugs found by double rendering in development",
            "Fixing bugs found by re-running Effects in development",
            "Fixing bugs found by re-running ref callbacks in development",
            "Fixing deprecation warnings enabled by Strict Mode"
          ]
        },
        {
          "type": "p",
          "text": "UseStrictModeto enable additional development behaviors and warnings for the component tree inside:"
        },
        {
          "type": "code",
          "code": "import{StrictMode}from'react';import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'));root.render(<StrictMode><App/></StrictMode>);"
        },
        {
          "type": "p",
          "text": "See more examples below. Strict Mode enables the following development-only behaviors:"
        },
        {
          "type": "list",
          "items": [
            "Your components willre-render an extra timeto find bugs caused by impure rendering.",
            "Your components willre-run Effects an extra timeto find bugs caused by missing Effect cleanup.",
            "Your components willre-run refs callbacks an extra timeto find bugs caused by missing ref cleanup.",
            "Your components willbe checked for usage of deprecated APIs."
          ]
        },
        {
          "type": "p",
          "text": "StrictModeaccepts no props."
        },
        {
          "type": "list",
          "items": [
            "There is no way to opt out of Strict Mode inside a tree wrapped in<StrictMode>. This gives you confidence that all components inside<StrictMode>are checked. If two teams working on a product disagree whether they find the checks valuable, they need to either reach consensus or move<StrictMode>down in the tree."
          ]
        },
        {
          "type": "p",
          "text": "Strict Mode enables extra development-only checks for the entire component tree inside the<StrictMode>component. These checks help you find common bugs in your components early in the development process. To enable Strict Mode for your entire app, wrap your root component with<StrictMode>when you render it:"
        },
        {
          "type": "code",
          "code": "import{StrictMode}from'react';import{createRoot}from'react-dom/client';constroot=createRoot(document.getElementById('root'));root.render(<StrictMode><App/></StrictMode>);"
        },
        {
          "type": "p",
          "text": "We recommend wrapping your entire app in Strict Mode, especially for newly created apps. If you use a framework that callscreateRootfor you, check its documentation for how to enable Strict Mode. Although the Strict Mode checksonly run in development,they help you find bugs that already exist in your code but can be tricky to reliably reproduce in production. Strict Mode lets you fix bugs before your users report them."
        },
        {
          "type": "p",
          "text": "Strict Mode enables the following checks in development:"
        },
        {
          "type": "list",
          "items": [
            "Your components willre-render an extra timeto find bugs caused by impure rendering.",
            "Your components willre-run Effects an extra timeto find bugs caused by missing Effect cleanup.",
            "Your components willre-run ref callbacks an extra timeto find bugs caused by missing ref cleanup.",
            "Your components willbe checked for usage of deprecated APIs."
          ]
        },
        {
          "type": "p",
          "text": "All of these checks are development-only and do not impact the production build."
        },
        {
          "type": "p",
          "text": "You can also enable Strict Mode for any part of your application:"
        },
        {
          "type": "code",
          "code": "import{StrictMode}from'react';functionApp(){return(<><Header/><StrictMode><main><Sidebar/><Content/></main></StrictMode><Footer/></>);}"
        },
        {
          "type": "p",
          "text": "In this example, Strict Mode checks will not run against theHeaderandFootercomponents. However, they will run onSidebarandContent, as well as all of the components inside them, no matter how deep."
        },
        {
          "type": "p",
          "text": "React assumes that every component you write is a pure function.This means that React components you write must always return the same JSX given the same inputs (props, state, and context). Components breaking this rule behave unpredictably and cause bugs. To help you find accidentally impure code, Strict Mode calls some of your functions (only the ones that should be pure)twice in development.This includes:"
        },
        {
          "type": "list",
          "items": [
            "Your component function body (only top-level logic, so this doesn’t include code inside event handlers)",
            "Functions that you pass touseState,setfunctions,useMemo, oruseReducer",
            "Some class component methods likeconstructor,render,shouldComponentUpdate(see the whole list)"
          ]
        },
        {
          "type": "p",
          "text": "If a function is pure, running it twice does not change its behavior because a pure function produces the same result every time. However, if a function is impure (for example, it mutates the data it receives), running it twice tends to be noticeable (that’s what makes it impure!) This helps you spot and fix the bug early. Here is an example to illustrate how double rendering in Strict Mode helps you find bugs early. ThisStoryTraycomponent takes an array ofstoriesand adds one last “Create Story” item at the end:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionStoryTray({stories}){constitems=stories;items.push({id:'create',label:'Create Story'});return(<ul>{items.map(story=>(<likey={story.id}>{story.label}</li>))}</ul>);}"
        },
        {
          "type": "p",
          "text": "There is a mistake in the code above. However, it is easy to miss because the initial output appears correct. This mistake will become more noticeable if theStoryTraycomponent re-renders multiple times. For example, let’s make theStoryTrayre-render with a different background color whenever you hover over it:"
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionStoryTray({stories}){const[isHover,setIsHover]=useState(false);constitems=stories;items.push({id:'create',label:'Create Story'});return(<ulonPointerEnter={()=>setIsHover(true)}onPointerLeave={()=>setIsHover(false)}style={{backgroundColor:isHover?'#ddd':'#fff'}}>{items.map(story=>(<likey={story.id}>{story.label}</li>))}</ul>);}"
        },
        {
          "type": "p",
          "text": "Notice how every time you hover over theStoryTraycomponent, “Create Story” gets added to the list again. The intention of the code was to add it once at the end. ButStoryTraydirectly modifies thestoriesarray from the props. Every timeStoryTrayrenders, it adds “Create Story” again at the end of the same array. In other words,StoryTrayis not a pure function—running it multiple times produces different results. To fix this problem, you can make a copy of the array, and modify that copy instead of the original one:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionStoryTray({stories}){constitems=stories.slice();// Clone the array// ✅ Good: Pushing into a new arrayitems.push({id:'create',label:'Create Story'});"
        },
        {
          "type": "p",
          "text": "This wouldmake theStoryTrayfunction pure.Each time it is called, it would only modify a new copy of the array, and would not affect any external objects or variables. This solves the bug, but you had to make the component re-render more often before it became obvious that something is wrong with its behavior. In the original example, the bug wasn’t obvious. Now let’s wrap the original (buggy) code in<StrictMode>:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionStoryTray({stories}){constitems=stories;items.push({id:'create',label:'Create Story'});return(<ul>{items.map(story=>(<likey={story.id}>{story.label}</li>))}</ul>);}"
        },
        {
          "type": "p",
          "text": "Strict Modealwayscalls your rendering function twice, so you can see the mistake right away(“Create Story” appears twice). This lets you notice such mistakes early in the process. When you fix your component to render in Strict Mode, youalsofix many possible future production bugs like the hover functionality from before:"
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionStoryTray({stories}){const[isHover,setIsHover]=useState(false);constitems=stories.slice();// Clone the arrayitems.push({id:'create',label:'Create Story'});return(<ulonPointerEnter={()=>setIsHover(true)}onPointerLeave={()=>setIsHover(false)}style={{backgroundColor:isHover?'#ddd':'#fff'}}>{items.map(story=>(<likey={story.id}>{story.label}</li>))}</ul>);}"
        },
        {
          "type": "p",
          "text": "Without Strict Mode, it was easy to miss the bug until you added more re-renders. Strict Mode made the same bug appear right away. Strict Mode helps you find bugs before you push them to your team and to your users. Read more about keeping components pure."
        },
        {
          "type": "p",
          "text": "If you haveReact DevToolsinstalled, anyconsole.logcalls during the second render call will appear slightly dimmed. React DevTools also offers a setting (off by default) to suppress them completely."
        },
        {
          "type": "p",
          "text": "Strict Mode can also help find bugs inEffects. Every Effect has some setup code and may have some cleanup code. Normally, React calls setup when the componentmounts(is added to the screen) and calls cleanup when the componentunmounts(is removed from the screen). React then calls cleanup and setup again if its dependencies changed since the last render. When Strict Mode is on, React will also runone extra setup+cleanup cycle in development for every Effect.This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually. Here is an example to illustrate how re-running Effects in Strict Mode helps you find bugs early. Consider this example that connects a component to a chat:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';constroot=createRoot(document.getElementById(\"root\"));root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "There is an issue with this code, but it might not be immediately clear. To make the issue more obvious, let’s implement a feature. In the example below,roomIdis not hardcoded. Instead, the user can select theroomIdthat they want to connect to from a dropdown. Click “Open chat” and then select different chat rooms one by one. Keep track of the number of active connections in the console:"
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';constroot=createRoot(document.getElementById(\"root\"));root.render(<App/>);"
        },
        {
          "type": "p",
          "text": "You’ll notice that the number of open connections always keeps growing. In a real app, this would cause performance and network problems. The issue is thatyour Effect is missing a cleanup function:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);"
        },
        {
          "type": "p",
          "text": "Now that your Effect “cleans up” after itself and destroys the outdated connections, the leak is solved. However, notice that the problem did not become visible until you’ve added more features (the select box). In the original example, the bug wasn’t obvious. Now let’s wrap the original (buggy) code in<StrictMode>:"
        },
        {
          "type": "code",
          "code": "import{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';constroot=createRoot(document.getElementById(\"root\"));root.render(<StrictMode><App/></StrictMode>);"
        },
        {
          "type": "p",
          "text": "With Strict Mode, you immediately see that there is a problem(the number of active connections jumps to 2). Strict Mode runs an extra setup+cleanup cycle for every Effect. This Effect has no cleanup logic, so it creates an extra connection but doesn’t destroy it. This is a hint that you’re missing a cleanup function. Strict Mode lets you notice such mistakes early in the process. When you fix your Effect by adding a cleanup function in Strict Mode, youalsofix many possible future production bugs like the select box from before:"
        },
        {
          "type": "code",
          "code": "import{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';constroot=createRoot(document.getElementById(\"root\"));root.render(<StrictMode><App/></StrictMode>);"
        },
        {
          "type": "p",
          "text": "Notice how the active connection count in the console doesn’t keep growing anymore. Without Strict Mode, it was easy to miss that your Effect needed cleanup. By runningsetup → cleanup → setupinstead ofsetupfor your Effect in development, Strict Mode made the missing cleanup logic more noticeable. Read more about implementing Effect cleanup."
        },
        {
          "type": "p",
          "text": "Strict Mode can also help find bugs incallbacks refs. Every callbackrefhas some setup code and may have some cleanup code. Normally, React calls setup when the element iscreated(is added to the DOM) and calls cleanup when the element isremoved(is removed from the DOM). When Strict Mode is on, React will also runone extra setup+cleanup cycle in development for every callbackref.This may feel surprising, but it helps reveal subtle bugs that are hard to catch manually. Consider this example, which allows you to select an animal and then scroll to one of them. Notice when you switch from “Cats” to “Dogs”, the console logs show that the number of animals in the list keeps growing, and the “Scroll to” buttons stop working:"
        },
        {
          "type": "code",
          "code": "import{useRef,useState}from\"react\";exportdefaultfunctionAnimalFriends(){constitemsRef=useRef([]);const[animalList,setAnimalList]=useState(setupAnimalList);const[animal,setAnimal]=useState('cat');functionscrollToAnimal(index){constlist=itemsRef.current;const{node}=list[index];node.scrollIntoView({behavior:\"smooth\",block:\"nearest\",inline:\"center\",});}constanimals=animalList.filter(a=>a.type===animal)return(<><nav><buttononClick={()=>setAnimal('cat')}>Cats</button><buttononClick={()=>setAnimal('dog')}>Dogs</button></nav><hr/><nav><span>Scroll to:</span>{animals.map((animal,index)=>(<buttonkey={animal.src}onClick={()=>scrollToAnimal(index)}>{index}</button>))}</nav><div><ul>{animals.map((animal)=>(<likey={animal.src}ref={(node)=>{constlist=itemsRef.current;constitem={animal:animal,node};list.push(item);console.log(`✅ Adding animal to the map. Total animals:${list.length}`);if(list.length>10){console.log('❌ Too many animals in the list!');}return()=>{// 🚩 No cleanup, this is a bug!}}}><imgsrc={animal.src}/></li>))}</ul></div></>);}functionsetupAnimalList(){constanimalList=[];for(leti=0;i<10;i++){animalList.push({type:'cat',src:\"https://loremflickr.com/320/240/cat?lock=\"+i});}for(leti=0;i<10;i++){animalList.push({type:'dog',src:\"https://loremflickr.com/320/240/dog?lock=\"+i});}returnanimalList;}"
        },
        {
          "type": "p",
          "text": "This is a production bug!Since the ref callback doesn’t remove animals from the list in the cleanup, the list of animals keeps growing. This is a memory leak that can cause performance problems in a real app, and breaks the behavior of the app. The issue is the ref callback doesn’t cleanup after itself:"
        },
        {
          "type": "code",
          "code": "<liref={node=>{constlist=itemsRef.current;constitem={animal,node};list.push(item);return()=>{// 🚩 No cleanup, this is a bug!}}}</li>"
        },
        {
          "type": "p",
          "text": "Now let’s wrap the original (buggy) code in<StrictMode>:"
        },
        {
          "type": "code",
          "code": "import{useRef,useState}from\"react\";exportdefaultfunctionAnimalFriends(){constitemsRef=useRef([]);const[animalList,setAnimalList]=useState(setupAnimalList);const[animal,setAnimal]=useState('cat');functionscrollToAnimal(index){constlist=itemsRef.current;const{node}=list[index];node.scrollIntoView({behavior:\"smooth\",block:\"nearest\",inline:\"center\",});}constanimals=animalList.filter(a=>a.type===animal)return(<><nav><buttononClick={()=>setAnimal('cat')}>Cats</button><buttononClick={()=>setAnimal('dog')}>Dogs</button></nav><hr/><nav><span>Scroll to:</span>{animals.map((animal,index)=>(<buttonkey={animal.src}onClick={()=>scrollToAnimal(index)}>{index}</button>))}</nav><div><ul>{animals.map((animal)=>(<likey={animal.src}ref={(node)=>{constlist=itemsRef.current;constitem={animal:animal,node}list.push(item);console.log(`✅ Adding animal to the map. Total animals:${list.length}`);if(list.length>10){console.log('❌ Too many animals in the list!');}return()=>{// 🚩 No cleanup, this is a bug!}}}><imgsrc={animal.src}/></li>))}</ul></div></>);}functionsetupAnimalList(){constanimalList=[];for(leti=0;i<10;i++){animalList.push({type:'cat',src:\"https://loremflickr.com/320/240/cat?lock=\"+i});}for(leti=0;i<10;i++){animalList.push({type:'dog',src:\"https://loremflickr.com/320/240/dog?lock=\"+i});}returnanimalList;}"
        },
        {
          "type": "p",
          "text": "With Strict Mode, you immediately see that there is a problem. Strict Mode runs an extra setup+cleanup cycle for every callback ref. This callback ref has no cleanup logic, so it adds refs but doesn’t remove them. This is a hint that you’re missing a cleanup function. Strict Mode lets you eagerly find mistakes in callback refs. When you fix your callback by adding a cleanup function in Strict Mode, youalsofix many possible future production bugs like the “Scroll to” bug from before:"
        },
        {
          "type": "code",
          "code": "import{useRef,useState}from\"react\";exportdefaultfunctionAnimalFriends(){constitemsRef=useRef([]);const[animalList,setAnimalList]=useState(setupAnimalList);const[animal,setAnimal]=useState('cat');functionscrollToAnimal(index){constlist=itemsRef.current;const{node}=list[index];node.scrollIntoView({behavior:\"smooth\",block:\"nearest\",inline:\"center\",});}constanimals=animalList.filter(a=>a.type===animal)return(<><nav><buttononClick={()=>setAnimal('cat')}>Cats</button><buttononClick={()=>setAnimal('dog')}>Dogs</button></nav><hr/><nav><span>Scroll to:</span>{animals.map((animal,index)=>(<buttonkey={animal.src}onClick={()=>scrollToAnimal(index)}>{index}</button>))}</nav><div><ul>{animals.map((animal)=>(<likey={animal.src}ref={(node)=>{constlist=itemsRef.current;constitem={animal,node};list.push({animal:animal,node});console.log(`✅ Adding animal to the map. Total animals:${list.length}`);if(list.length>10){console.log('❌ Too many animals in the list!');}return()=>{list.splice(list.indexOf(item));console.log(`❌ Removing animal from the map. Total animals:${itemsRef.current.length}`);}}}><imgsrc={animal.src}/></li>))}</ul></div></>);}functionsetupAnimalList(){constanimalList=[];for(leti=0;i<10;i++){animalList.push({type:'cat',src:\"https://loremflickr.com/320/240/cat?lock=\"+i});}for(leti=0;i<10;i++){animalList.push({type:'dog',src:\"https://loremflickr.com/320/240/dog?lock=\"+i});}returnanimalList;}"
        },
        {
          "type": "p",
          "text": "Now on inital mount in StrictMode, the ref callbacks are all setup, cleaned up, and setup again:"
        },
        {
          "type": "code",
          "code": "...✅Addinganimaltothemap.Totalanimals:10...❌Removinganimalfromthemap.Totalanimals:0...✅Addinganimaltothemap.Totalanimals:10"
        },
        {
          "type": "p",
          "text": "This is expected.Strict Mode confirms that the ref callbacks are cleaned up correctly, so the size never grows above the expected amount. After the fix, there are no memory leaks, and all the features work as expected. Without Strict Mode, it was easy to miss the bug until you clicked around to app to notice broken features. Strict Mode made the bugs appear right away, before you push them to production."
        },
        {
          "type": "p",
          "text": "React warns if some component anywhere inside a<StrictMode>tree uses one of these deprecated APIs:"
        },
        {
          "type": "list",
          "items": [
            "UNSAFE_class lifecycle methods likeUNSAFE_componentWillMount.See alternatives."
          ]
        },
        {
          "type": "p",
          "text": "These APIs are primarily used in olderclass componentsso they rarely appear in modern apps."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/Suspense",
      "title": "<Suspense> – React",
      "content": [
        {
          "type": "p",
          "text": "<Suspense>lets you display a fallback until its children have finished loading."
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading/>}><SomeComponent/></Suspense>"
        },
        {
          "type": "list",
          "items": [
            "Reference<Suspense>",
            "<Suspense>",
            "UsageDisplaying a fallback while content is loadingRevealing content together at onceRevealing nested content as it loadsShowing stale content while fresh content is loadingPreventing already revealed content from hidingIndicating that a Transition is happeningResetting Suspense boundaries on navigationProviding a fallback for server errors and client-only content",
            "Displaying a fallback while content is loading",
            "Revealing content together at once",
            "Revealing nested content as it loads",
            "Showing stale content while fresh content is loading",
            "Preventing already revealed content from hiding",
            "Indicating that a Transition is happening",
            "Resetting Suspense boundaries on navigation",
            "Providing a fallback for server errors and client-only content",
            "TroubleshootingHow do I prevent the UI from being replaced by a fallback during an update?",
            "How do I prevent the UI from being replaced by a fallback during an update?"
          ]
        },
        {
          "type": "list",
          "items": [
            "children: The actual UI you intend to render. Ifchildrensuspends while rendering, the Suspense boundary will switch to renderingfallback.",
            "fallback: An alternate UI to render in place of the actual UI if it has not finished loading. Any valid React node is accepted, though in practice, a fallback is a lightweight placeholder view, such as a loading spinner or skeleton. Suspense will automatically switch tofallbackwhenchildrensuspends, and back tochildrenwhen the data is ready. Iffallbacksuspends while rendering, it will activate the closest parent Suspense boundary."
          ]
        },
        {
          "type": "list",
          "items": [
            "React does not preserve any state for renders that got suspended before they were able to mount for the first time. When the component has loaded, React will retry rendering the suspended tree from scratch.",
            "If Suspense was displaying content for the tree, but then it suspended again, thefallbackwill be shown again unless the update causing it was caused bystartTransitionoruseDeferredValue.",
            "If React needs to hide the already visible content because it suspended again, it will clean uplayout Effectsin the content tree. When the content is ready to be shown again, React will fire the layout Effects again. This ensures that Effects measuring the DOM layout don’t try to do this while the content is hidden.",
            "React includes under-the-hood optimizations likeStreaming Server RenderingandSelective Hydrationthat are integrated with Suspense. Readan architectural overviewand watcha technical talkto learn more."
          ]
        },
        {
          "type": "p",
          "text": "You can wrap any part of your application with a Suspense boundary:"
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading />}><Albums /></Suspense>"
        },
        {
          "type": "p",
          "text": "React will display yourloading fallbackuntil all the code and data needed bythe childrenhas been loaded. In the example below, theAlbumscomponentsuspendswhile fetching the list of albums. Until it’s ready to render, React switches the closest Suspense boundary above to show the fallback—yourLoadingcomponent. Then, when the data loads, React hides theLoadingfallback and renders theAlbumscomponent with data."
        },
        {
          "type": "code",
          "code": "import{Suspense}from'react';importAlbumsfrom'./Albums.js';exportdefaultfunctionArtistPage({artist}){return(<><h1>{artist.name}</h1><Suspensefallback={<Loading/>}><AlbumsartistId={artist.id}/></Suspense></>);}functionLoading(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "Only Suspense-enabled data sources will activate the Suspense component.They include:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a cached Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Suspensedoes notdetect when data is fetched inside an Effect or event handler. The exact way you would load data in theAlbumscomponent above depends on your framework. If you use a Suspense-enabled framework, you’ll find the details in its data fetching documentation. Suspense-enabled data fetching without the use of an opinionated framework is not yet supported. The requirements for implementing a Suspense-enabled data source are unstable and undocumented. An official API for integrating data sources with Suspense will be released in a future version of React."
        },
        {
          "type": "p",
          "text": "By default, the whole tree inside Suspense is treated as a single unit. For example, even ifonly oneof these components suspends waiting for some data,allof them together will be replaced by the loading indicator:"
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading/>}><Biography/><Panel><Albums/></Panel></Suspense>"
        },
        {
          "type": "p",
          "text": "Then, after all of them are ready to be displayed, they will all appear together at once. In the example below, bothBiographyandAlbumsfetch some data. However, because they are grouped under a single Suspense boundary, these components always “pop in” together at the same time."
        },
        {
          "type": "code",
          "code": "import{Suspense}from'react';importAlbumsfrom'./Albums.js';importBiographyfrom'./Biography.js';importPanelfrom'./Panel.js';exportdefaultfunctionArtistPage({artist}){return(<><h1>{artist.name}</h1><Suspensefallback={<Loading/>}><BiographyartistId={artist.id}/><Panel><AlbumsartistId={artist.id}/></Panel></Suspense></>);}functionLoading(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "Components that load data don’t have to be direct children of the Suspense boundary. For example, you can moveBiographyandAlbumsinto a newDetailscomponent. This doesn’t change the behavior.BiographyandAlbumsshare the same closest parent Suspense boundary, so their reveal is coordinated together."
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading/>}><DetailsartistId={artist.id}/></Suspense>functionDetails({artistId}){return(<><BiographyartistId={artistId}/><Panel><AlbumsartistId={artistId}/></Panel></>);}"
        },
        {
          "type": "p",
          "text": "When a component suspends, the closest parent Suspense component shows the fallback. This lets you nest multiple Suspense components to create a loading sequence. Each Suspense boundary’s fallback will be filled in as the next level of content becomes available. For example, you can give the album list its own fallback:"
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<BigSpinner/>}><Biography/><Suspensefallback={<AlbumsGlimmer/>}><Panel><Albums/></Panel></Suspense></Suspense>"
        },
        {
          "type": "p",
          "text": "With this change, displaying theBiographydoesn’t need to “wait” for theAlbumsto load. The sequence will be:"
        },
        {
          "type": "list",
          "items": [
            "IfBiographyhasn’t loaded yet,BigSpinneris shown in place of the entire content area.",
            "OnceBiographyfinishes loading,BigSpinneris replaced by the content.",
            "IfAlbumshasn’t loaded yet,AlbumsGlimmeris shown in place ofAlbumsand its parentPanel.",
            "Finally, onceAlbumsfinishes loading, it replacesAlbumsGlimmer."
          ]
        },
        {
          "type": "code",
          "code": "import{Suspense}from'react';importAlbumsfrom'./Albums.js';importBiographyfrom'./Biography.js';importPanelfrom'./Panel.js';exportdefaultfunctionArtistPage({artist}){return(<><h1>{artist.name}</h1><Suspensefallback={<BigSpinner/>}><BiographyartistId={artist.id}/><Suspensefallback={<AlbumsGlimmer/>}><Panel><AlbumsartistId={artist.id}/></Panel></Suspense></Suspense></>);}functionBigSpinner(){return<h2>🌀 Loading...</h2>;}functionAlbumsGlimmer(){return(<divclassName=\"glimmer-panel\"><divclassName=\"glimmer-line\"/><divclassName=\"glimmer-line\"/><divclassName=\"glimmer-line\"/></div>);}"
        },
        {
          "type": "p",
          "text": "Suspense boundaries let you coordinate which parts of your UI should always “pop in” together at the same time, and which parts should progressively reveal more content in a sequence of loading states. You can add, move, or delete Suspense boundaries in any place in the tree without affecting the rest of your app’s behavior. Don’t put a Suspense boundary around every component. Suspense boundaries should not be more granular than the loading sequence that you want the user to experience. If you work with a designer, ask them where the loading states should be placed—it’s likely that they’ve already included them in their design wireframes."
        },
        {
          "type": "p",
          "text": "In this example, theSearchResultscomponent suspends while fetching the search results. Type\"a\", wait for the results, and then edit it to\"ab\". The results for\"a\"will get replaced by the loading fallback."
        },
        {
          "type": "code",
          "code": "import{Suspense,useState}from'react';importSearchResultsfrom'./SearchResults.js';exportdefaultfunctionApp(){const[query,setQuery]=useState('');return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><SearchResultsquery={query}/></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "A common alternative UI pattern is todeferupdating the list and to keep showing the previous results until the new results are ready. TheuseDeferredValueHook lets you pass a deferred version of the query down:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><SearchResultsquery={deferredQuery}/></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "Thequerywill update immediately, so the input will display the new value. However, thedeferredQuerywill keep its previous value until the data has loaded, soSearchResultswill show the stale results for a bit. To make it more obvious to the user, you can add a visual indication when the stale result list is displayed:"
        },
        {
          "type": "code",
          "code": "<divstyle={{opacity:query!==deferredQuery?0.5:1}}><SearchResultsquery={deferredQuery}/></div>"
        },
        {
          "type": "p",
          "text": "Enter\"a\"in the example below, wait for the results to load, and then edit the input to\"ab\". Notice how instead of the Suspense fallback, you now see the dimmed stale result list until the new results have loaded:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState,useDeferredValue}from'react';importSearchResultsfrom'./SearchResults.js';exportdefaultfunctionApp(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);constisStale=query!==deferredQuery;return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><divstyle={{opacity:isStale?0.5:1}}><SearchResultsquery={deferredQuery}/></div></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "Both deferred values andTransitionslet you avoid showing Suspense fallback in favor of inline indicators. Transitions mark the whole update as non-urgent so they are typically used by frameworks and router libraries for navigation. Deferred values, on the other hand, are mostly useful in application code where you want to mark a part of UI as non-urgent and let it “lag behind” the rest of the UI."
        },
        {
          "type": "p",
          "text": "When a component suspends, the closest parent Suspense boundary switches to showing the fallback. This can lead to a jarring user experience if it was already displaying some content. Try pressing this button:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState}from'react';importIndexPagefrom'./IndexPage.js';importArtistPagefrom'./ArtistPage.js';importLayoutfrom'./Layout.js';exportdefaultfunctionApp(){return(<Suspensefallback={<BigSpinner/>}><Router/></Suspense>);}functionRouter(){const[page,setPage]=useState('/');functionnavigate(url){setPage(url);}letcontent;if(page==='/'){content=(<IndexPagenavigate={navigate}/>);}elseif(page==='/the-beatles'){content=(<ArtistPageartist={{id:'the-beatles',name:'The Beatles',}}/>);}return(<Layout>{content}</Layout>);}functionBigSpinner(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "When you pressed the button, theRoutercomponent renderedArtistPageinstead ofIndexPage. A component insideArtistPagesuspended, so the closest Suspense boundary started showing the fallback. The closest Suspense boundary was near the root, so the whole site layout got replaced byBigSpinner. To prevent this, you can mark the navigation state update as aTransitionwithstartTransition:"
        },
        {
          "type": "code",
          "code": "functionRouter(){const[page,setPage]=useState('/');functionnavigate(url){startTransition(()=>{setPage(url);});}// ..."
        },
        {
          "type": "p",
          "text": "This tells React that the state transition is not urgent, and it’s better to keep showing the previous page instead of hiding any already revealed content. Now clicking the button “waits” for theBiographyto load:"
        },
        {
          "type": "code",
          "code": "import{Suspense,startTransition,useState}from'react';importIndexPagefrom'./IndexPage.js';importArtistPagefrom'./ArtistPage.js';importLayoutfrom'./Layout.js';exportdefaultfunctionApp(){return(<Suspensefallback={<BigSpinner/>}><Router/></Suspense>);}functionRouter(){const[page,setPage]=useState('/');functionnavigate(url){startTransition(()=>{setPage(url);});}letcontent;if(page==='/'){content=(<IndexPagenavigate={navigate}/>);}elseif(page==='/the-beatles'){content=(<ArtistPageartist={{id:'the-beatles',name:'The Beatles',}}/>);}return(<Layout>{content}</Layout>);}functionBigSpinner(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "A Transition doesn’t wait forallcontent to load. It only waits long enough to avoid hiding already revealed content. For example, the websiteLayoutwas already revealed, so it would be bad to hide it behind a loading spinner. However, the nestedSuspenseboundary aroundAlbumsis new, so the Transition doesn’t wait for it."
        },
        {
          "type": "p",
          "text": "Suspense-enabled routers are expected to wrap the navigation updates into Transitions by default."
        },
        {
          "type": "p",
          "text": "In the above example, once you click the button, there is no visual indication that a navigation is in progress. To add an indicator, you can replacestartTransitionwithuseTransitionwhich gives you a booleanisPendingvalue. In the example below, it’s used to change the website header styling while a Transition is happening:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState,useTransition}from'react';importIndexPagefrom'./IndexPage.js';importArtistPagefrom'./ArtistPage.js';importLayoutfrom'./Layout.js';exportdefaultfunctionApp(){return(<Suspensefallback={<BigSpinner/>}><Router/></Suspense>);}functionRouter(){const[page,setPage]=useState('/');const[isPending,startTransition]=useTransition();functionnavigate(url){startTransition(()=>{setPage(url);});}letcontent;if(page==='/'){content=(<IndexPagenavigate={navigate}/>);}elseif(page==='/the-beatles'){content=(<ArtistPageartist={{id:'the-beatles',name:'The Beatles',}}/>);}return(<LayoutisPending={isPending}>{content}</Layout>);}functionBigSpinner(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "During a Transition, React will avoid hiding already revealed content. However, if you navigate to a route with different parameters, you might want to tell React it isdifferentcontent. You can express this with akey:"
        },
        {
          "type": "code",
          "code": "<ProfilePagekey={queryParams.id}/>"
        },
        {
          "type": "p",
          "text": "Imagine you’re navigating within a user’s profile page, and something suspends. If that update is wrapped in a Transition, it will not trigger the fallback for already visible content. That’s the expected behavior. However, now imagine you’re navigating between two different user profiles. In that case, it makes sense to show the fallback. For example, one user’s timeline isdifferent contentfrom another user’s timeline. By specifying akey, you ensure that React treats different users’ profiles as different components, and resets the Suspense boundaries during navigation. Suspense-integrated routers should do this automatically."
        },
        {
          "type": "p",
          "text": "If you use one of thestreaming server rendering APIs(or a framework that relies on them), React will also use your<Suspense>boundaries to handle errors on the server. If a component throws an error on the server, React will not abort the server render. Instead, it will find the closest<Suspense>component above it and include its fallback (such as a spinner) into the generated server HTML. The user will see a spinner at first. On the client, React will attempt to render the same component again. If it errors on the client too, React will throw the error and display the closesterror boundary.However, if it does not error on the client, React will not display the error to the user since the content was eventually displayed successfully. You can use this to opt out some components from rendering on the server. To do this, throw an error in the server environment and then wrap them in a<Suspense>boundary to replace their HTML with fallbacks:"
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading/>}><Chat/></Suspense>functionChat(){if(typeofwindow==='undefined'){throwError('Chat should only render on the client.');}// ...}"
        },
        {
          "type": "p",
          "text": "The server HTML will include the loading indicator. It will be replaced by theChatcomponent on the client."
        },
        {
          "type": "p",
          "text": "Replacing visible UI with a fallback creates a jarring user experience. This can happen when an update causes a component to suspend, and the nearest Suspense boundary is already showing content to the user. To prevent this from happening,mark the update as non-urgent usingstartTransition. During a Transition, React will wait until enough data has loaded to prevent an unwanted fallback from appearing:"
        },
        {
          "type": "code",
          "code": "functionhandleNextPageClick(){// If this update suspends, don't hide the already displayed contentstartTransition(()=>{setCurrentPage(currentPage+1);});}"
        },
        {
          "type": "p",
          "text": "This will avoid hiding existing content. However, any newly renderedSuspenseboundaries will still immediately display fallbacks to avoid blocking the UI and let the user see the content as it becomes available. React will only prevent unwanted fallbacks during non-urgent updates. It will not delay a render if it’s the result of an urgent update. You must opt in with an API likestartTransitionoruseDeferredValue. If your router is integrated with Suspense, it should wrap its updates intostartTransitionautomatically."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/act",
      "title": "act – React",
      "content": [
        {
          "type": "p",
          "text": "actis a test helper to apply pending React updates before making assertions."
        },
        {
          "type": "code",
          "code": "awaitact(asyncactFn)"
        },
        {
          "type": "p",
          "text": "To prepare a component for assertions, wrap the code rendering it and performing updates inside anawait act()call. This makes your test run closer to how React works in the browser."
        },
        {
          "type": "p",
          "text": "You might find usingact()directly a bit too verbose. To avoid some of the boilerplate, you could use a library likeReact Testing Library, whose helpers are wrapped withact()."
        },
        {
          "type": "list",
          "items": [
            "Referenceawait act(async actFn)",
            "await act(async actFn)",
            "UsageRendering components in testsDispatching events in tests",
            "Rendering components in tests",
            "Dispatching events in tests",
            "TroubleshootingI’m getting an error: “The current testing environment is not configured to support act”(…)”",
            "I’m getting an error: “The current testing environment is not configured to support act”(…)”"
          ]
        },
        {
          "type": "p",
          "text": "When writing UI tests, tasks like rendering, user events, or data fetching can be considered as “units” of interaction with a user interface. React provides a helper calledact()that makes sure all updates related to these “units” have been processed and applied to the DOM before you make any assertions. The nameactcomes from theArrange-Act-Assertpattern."
        },
        {
          "type": "code",
          "code": "it('renders with button disabled',async()=>{awaitact(async()=>{root.render(<TestComponent/>)});expect(container.querySelector('button')).toBeDisabled();});"
        },
        {
          "type": "p",
          "text": "We recommend usingactwithawaitand anasyncfunction. Although the sync version works in many cases, it doesn’t work in all cases and due to the way React schedules updates internally, it’s difficult to predict when you can use the sync version. We will deprecate and remove the sync version in the future."
        },
        {
          "type": "list",
          "items": [
            "async actFn: An async function wrapping renders or interactions for components being tested. Any updates triggered within theactFn, are added to an internal act queue, which are then flushed together to process and apply any changes to the DOM. Since it is async, React will also run any code that crosses an async boundary, and flush any updates scheduled."
          ]
        },
        {
          "type": "p",
          "text": "actdoes not return anything."
        },
        {
          "type": "p",
          "text": "When testing a component, you can useactto make assertions about its output. For example, let’s say we have thisCountercomponent, the usage examples below show how to test it:"
        },
        {
          "type": "code",
          "code": "functionCounter(){const[count,setCount]=useState(0);consthandleClick=()=>{setCount(prev=>prev+1);}useEffect(()=>{document.title=`You clicked${this.state.count}times`;},[count]);return(<div><p>You clicked{this.state.count}times</p><buttononClick={this.handleClick}>Click me</button></div>)}"
        },
        {
          "type": "p",
          "text": "To test the render output of a component, wrap the render insideact():"
        },
        {
          "type": "code",
          "code": "import{act}from'react';importReactDOMClientfrom'react-dom/client';importCounterfrom'./Counter';it('can render and update a counter',async()=>{container=document.createElement('div');document.body.appendChild(container);// ✅ Render the component inside act().awaitact(()=>{ReactDOMClient.createRoot(container).render(<Counter/>);});constbutton=container.querySelector('button');constlabel=container.querySelector('p');expect(label.textContent).toBe('You clicked 0 times');expect(document.title).toBe('You clicked 0 times');});"
        },
        {
          "type": "p",
          "text": "Here, we create a container, append it to the document, and render theCountercomponent insideact(). This ensures that the component is rendered and its effects are applied before making assertions. Usingactensures that all updates have been applied before we make assertions."
        },
        {
          "type": "p",
          "text": "To test events, wrap the event dispatch insideact():"
        },
        {
          "type": "code",
          "code": "import{act}from'react';importReactDOMClientfrom'react-dom/client';importCounterfrom'./Counter';it.only('can render and update a counter',async()=>{constcontainer=document.createElement('div');document.body.appendChild(container);awaitact(async()=>{ReactDOMClient.createRoot(container).render(<Counter/>);});// ✅ Dispatch the event inside act().awaitact(async()=>{button.dispatchEvent(newMouseEvent('click',{bubbles:true}));});constbutton=container.querySelector('button');constlabel=container.querySelector('p');expect(label.textContent).toBe('You clicked 1 times');expect(document.title).toBe('You clicked 1 times');});"
        },
        {
          "type": "p",
          "text": "Here, we render the component withact, and then dispatch the event inside anotheract(). This ensures that all updates from the event are applied before making assertions."
        },
        {
          "type": "p",
          "text": "Don’t forget that dispatching DOM events only works when the DOM container is added to the document. You can use a library likeReact Testing Libraryto reduce the boilerplate code."
        },
        {
          "type": "p",
          "text": "Usingactrequires settingglobal.IS_REACT_ACT_ENVIRONMENT=truein your test environment. This is to ensure thatactis only used in the correct environment. If you don’t set the global, you will see an error like this:"
        },
        {
          "type": "p",
          "text": "To fix, add this to your global setup file for React tests:"
        },
        {
          "type": "code",
          "code": "global.IS_REACT_ACT_ENVIRONMENT=true"
        },
        {
          "type": "p",
          "text": "In testing frameworks likeReact Testing Library,IS_REACT_ACT_ENVIRONMENTis already set for you."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/apis",
      "title": "Built-in React APIs – React",
      "content": [
        {
          "type": "p",
          "text": "In addition toHooksandComponents, thereactpackage exports a few other APIs that are useful for defining components. This page lists all the remaining modern React APIs."
        },
        {
          "type": "list",
          "items": [
            "createContextlets you define and provide context to the child components. Used withuseContext.",
            "forwardReflets your component expose a DOM node as a ref to the parent. Used withuseRef.",
            "lazylets you defer loading a component’s code until it’s rendered for the first time.",
            "memolets your component skip re-renders with same props. Used withuseMemoanduseCallback.",
            "startTransitionlets you mark a state update as non-urgent. Similar touseTransition.",
            "actlets you wrap renders and interactions in tests to ensure updates have processed before making assertions."
          ]
        },
        {
          "type": "p",
          "text": "Resourcescan be accessed by a component without having them as part of their state. For example, a component can read a message from a Promise or read styling information from a context. To read a value from a resource, use this API:"
        },
        {
          "type": "list",
          "items": [
            "uselets you read the value of a resource like aPromiseorcontext."
          ]
        },
        {
          "type": "code",
          "code": "functionMessageComponent({messagePromise}){constmessage=use(messagePromise);consttheme=use(ThemeContext);// ...}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/cache",
      "title": "cache – React",
      "content": [
        {
          "type": "p",
          "text": "cacheis only for use withReact Server Components."
        },
        {
          "type": "p",
          "text": "cachelets you cache the result of a data fetch or computation."
        },
        {
          "type": "code",
          "code": "constcachedFn=cache(fn);"
        },
        {
          "type": "list",
          "items": [
            "Referencecache(fn)",
            "cache(fn)",
            "UsageCache an expensive computationShare a snapshot of dataPreload data",
            "Cache an expensive computation",
            "Share a snapshot of data",
            "Preload data",
            "TroubleshootingMy memoized function still runs even though I’ve called it with the same arguments",
            "My memoized function still runs even though I’ve called it with the same arguments"
          ]
        },
        {
          "type": "p",
          "text": "Callcacheoutside of any components to create a version of the function with caching."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';importcalculateMetricsfrom'lib/metrics';constgetMetrics=cache(calculateMetrics);functionChart({data}){constreport=getMetrics(data);// ...}"
        },
        {
          "type": "p",
          "text": "WhengetMetricsis first called withdata,getMetricswill callcalculateMetrics(data)and store the result in cache. IfgetMetricsis called again with the samedata, it will return the cached result instead of callingcalculateMetrics(data)again. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "fn: The function you want to cache results for.fncan take any arguments and return any value."
          ]
        },
        {
          "type": "p",
          "text": "cachereturns a cached version offnwith the same type signature. It does not callfnin the process. When callingcachedFnwith given arguments, it first checks if a cached result exists in the cache. If a cached result exists, it returns the result. If not, it callsfnwith the arguments, stores the result in the cache, and returns the result. The only timefnis called is when there is a cache miss."
        },
        {
          "type": "p",
          "text": "The optimization of caching return values based on inputs is known asmemoization. We refer to the function returned fromcacheas a memoized function."
        },
        {
          "type": "list",
          "items": [
            "React will invalidate the cache for all memoized functions for each server request.",
            "Each call tocachecreates a new function. This means that callingcachewith the same function multiple times will return different memoized functions that do not share the same cache.",
            "cachedFnwill also cache errors. Iffnthrows an error for certain arguments, it will be cached, and the same error is re-thrown whencachedFnis called with those same arguments.",
            "cacheis for use inServer Componentsonly."
          ]
        },
        {
          "type": "p",
          "text": "Usecacheto skip duplicate work."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';importcalculateUserMetricsfrom'lib/user';constgetUserMetrics=cache(calculateUserMetrics);functionProfile({user}){constmetrics=getUserMetrics(user);// ...}functionTeamReport({users}){for(letuserinusers){constmetrics=getUserMetrics(user);// ...}// ...}"
        },
        {
          "type": "p",
          "text": "If the sameuserobject is rendered in bothProfileandTeamReport, the two components can share work and only callcalculateUserMetricsonce for thatuser. AssumeProfileis rendered first. It will callgetUserMetrics, and check if there is a cached result. Since it is the first timegetUserMetricsis called with thatuser, there will be a cache miss.getUserMetricswill then callcalculateUserMetricswith thatuserand write the result to cache. WhenTeamReportrenders its list ofusersand reaches the sameuserobject, it will callgetUserMetricsand read the result from cache."
        },
        {
          "type": "p",
          "text": "To access the same cache, components must call the same memoized function."
        },
        {
          "type": "code",
          "code": "// Temperature.jsimport{cache}from'react';import{calculateWeekReport}from'./report';exportfunctionTemperature({cityData}){// 🚩 Wrong: Calling `cache` in component creates new `getWeekReport` for each renderconstgetWeekReport=cache(calculateWeekReport);constreport=getWeekReport(cityData);// ...}"
        },
        {
          "type": "code",
          "code": "// Precipitation.jsimport{cache}from'react';import{calculateWeekReport}from'./report';// 🚩 Wrong: `getWeekReport` is only accessible for `Precipitation` component.constgetWeekReport=cache(calculateWeekReport);exportfunctionPrecipitation({cityData}){constreport=getWeekReport(cityData);// ...}"
        },
        {
          "type": "p",
          "text": "In the above example,PrecipitationandTemperatureeach callcacheto create a new memoized function with their own cache look-up. If both components render for the samecityData, they will do duplicate work to callcalculateWeekReport. In addition,Temperaturecreates anew memoized functioneach time the component is rendered which doesn’t allow for any cache sharing. To maximize cache hits and reduce work, the two components should call the same memoized function to access the same cache. Instead, define the memoized function in a dedicated module that can beimport-edacross components."
        },
        {
          "type": "code",
          "code": "// getWeekReport.jsimport{cache}from'react';import{calculateWeekReport}from'./report';export default cache(calculateWeekReport);"
        },
        {
          "type": "code",
          "code": "// Temperature.jsimportgetWeekReportfrom'./getWeekReport';exportdefaultfunctionTemperature({cityData}){constreport=getWeekReport(cityData);// ...}"
        },
        {
          "type": "code",
          "code": "// Precipitation.jsimportgetWeekReportfrom'./getWeekReport';exportdefaultfunctionPrecipitation({cityData}){constreport=getWeekReport(cityData);// ...}"
        },
        {
          "type": "p",
          "text": "Here, both components call thesame memoized functionexported from./getWeekReport.jsto read and write to the same cache."
        },
        {
          "type": "p",
          "text": "To share a snapshot of data between components, callcachewith a data-fetching function likefetch. When multiple components make the same data fetch, only one request is made and the data returned is cached and shared across components. All components refer to the same snapshot of data across the server render."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';import{fetchTemperature}from'./api.js';constgetTemperature=cache(async(city)=>{returnawaitfetchTemperature(city);});asyncfunctionAnimatedWeatherCard({city}){consttemperature=awaitgetTemperature(city);// ...}asyncfunctionMinimalWeatherCard({city}){consttemperature=awaitgetTemperature(city);// ...}"
        },
        {
          "type": "p",
          "text": "IfAnimatedWeatherCardandMinimalWeatherCardboth render for the samecity, they will receive the same snapshot of data from thememoized function. IfAnimatedWeatherCardandMinimalWeatherCardsupply differentcityarguments togetTemperature, thenfetchTemperaturewill be called twice and each call site will receive different data. Thecityacts as a cache key."
        },
        {
          "type": "p",
          "text": "Asynchronous renderingis only supported for Server Components."
        },
        {
          "type": "code",
          "code": "asyncfunctionAnimatedWeatherCard({city}){consttemperature=awaitgetTemperature(city);// ...}"
        },
        {
          "type": "p",
          "text": "By caching a long-running data fetch, you can kick off asynchronous work prior to rendering the component."
        },
        {
          "type": "code",
          "code": "constgetUser=cache(async(id)=>{returnawaitdb.user.query(id);});asyncfunctionProfile({id}){constuser=await getUser(id);return(<section><imgsrc={user.profilePic}/><h2>{user.name}</h2></section>);}functionPage({id}){// ✅ Good: start fetching the user datagetUser(id);// ... some computational workreturn(<><Profileid={id}/></>);}"
        },
        {
          "type": "p",
          "text": "When renderingPage, the component callsgetUserbut note that it doesn’t use the returned data. This earlygetUsercall kicks off the asynchronous database query that occurs whilePageis doing other computational work and rendering children. When renderingProfile, we callgetUseragain. If the initialgetUsercall has already returned and cached the user data, whenProfileasks and waits for this data, it can simply read from the cache without requiring another remote procedure call. If theinitial data requesthasn’t been completed, preloading data in this pattern reduces delay in data-fetching."
        },
        {
          "type": "p",
          "text": "When evaluating anasynchronous function, you will receive aPromisefor that work. The promise holds the state of that work (pending,fulfilled,failed) and its eventual settled result. In this example, the asynchronous functionfetchDatareturns a promise that is awaiting thefetch."
        },
        {
          "type": "code",
          "code": "asyncfunctionfetchData(){returnawaitfetch(`https://...`);}constgetData=cache(fetchData);asyncfunctionMyComponent(){getData();// ... some computational workawaitgetData();// ...}"
        },
        {
          "type": "p",
          "text": "In callinggetDatathe first time, the promise returned fromfetchDatais cached. Subsequent look-ups will then return the same promise. Notice that the firstgetDatacall does notawaitwhereas theseconddoes.awaitis a JavaScript operator that will wait and return the settled result of the promise. The firstgetDatacall simply initiates thefetchto cache the promise for the secondgetDatato look-up. If by thesecond callthe promise is stillpending, thenawaitwill pause for the result. The optimization is that while we wait on thefetch, React can continue with computational work, thus reducing the wait time for thesecond call. If the promise is already settled, either to an error or thefulfilledresult,awaitwill return that value immediately. In both outcomes, there is a performance benefit."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';constgetUser=cache(async(userId)=>{returnawaitdb.user.query(userId);});// 🚩 Wrong: Calling memoized function outside of component will not memoize.getUser('demo-id');asyncfunctionDemoProfile(){// ✅ Good: `getUser` will memoize.constuser=awaitgetUser('demo-id');return<Profileuser={user}/>;}"
        },
        {
          "type": "p",
          "text": "React only provides cache access to the memoized function in a component. When callinggetUseroutside of a component, it will still evaluate the function but not read or update the cache. This is because cache access is provided through acontextwhich is only accessible from a component."
        },
        {
          "type": "p",
          "text": "All mentioned APIs offer memoization but the difference is what they’re intended to memoize, who can access the cache, and when their cache is invalidated."
        },
        {
          "type": "p",
          "text": "In general, you should useuseMemofor caching a expensive computation in a Client Component across renders. As an example, to memoize a transformation of data within a component."
        },
        {
          "type": "code",
          "code": "'use client';functionWeatherReport({record}){constavgTemp=useMemo(()=>calculateAvg(record),record);// ...}functionApp(){constrecord=getRecord();return(<><WeatherReportrecord={record}/><WeatherReportrecord={record}/></>);}"
        },
        {
          "type": "p",
          "text": "In this example,Apprenders twoWeatherReports with the same record. Even though both components do the same work, they cannot share work.useMemo’s cache is only local to the component. However,useMemodoes ensure that ifAppre-renders and therecordobject doesn’t change, each component instance would skip work and use the memoized value ofavgTemp.useMemowill only cache the last computation ofavgTempwith the given dependencies."
        },
        {
          "type": "p",
          "text": "In general, you should usecachein Server Components to memoize work that can be shared across components."
        },
        {
          "type": "code",
          "code": "constcachedFetchReport=cache(fetchReport);functionWeatherReport({city}){constreport=cachedFetchReport(city);// ...}functionApp(){constcity=\"Los Angeles\";return(<><WeatherReport city={city} /><WeatherReport city={city} /></>);}"
        },
        {
          "type": "p",
          "text": "Re-writing the previous example to usecache, in this case thesecond instance ofWeatherReportwill be able to skip duplicate work and read from the same cache as thefirstWeatherReport. Another difference from the previous example is thatcacheis also recommended formemoizing data fetches, unlikeuseMemowhich should only be used for computations. At this time,cacheshould only be used in Server Components and the cache will be invalidated across server requests."
        },
        {
          "type": "p",
          "text": "You should usememoto prevent a component re-rendering if its props are unchanged."
        },
        {
          "type": "code",
          "code": "'use client';functionWeatherReport({record}){constavgTemp=calculateAvg(record);// ...}constMemoWeatherReport=memo(WeatherReport);functionApp(){constrecord=getRecord();return(<><MemoWeatherReportrecord={record}/><MemoWeatherReportrecord={record}/></>);}"
        },
        {
          "type": "p",
          "text": "In this example, bothMemoWeatherReportcomponents will callcalculateAvgwhen first rendered. However, ifAppre-renders, with no changes torecord, none of the props have changed andMemoWeatherReportwill not re-render. Compared touseMemo,memomemoizes the component render based on props vs. specific computations. Similar touseMemo, the memoized component only caches the last render with the last prop values. Once the props change, the cache invalidates and the component re-renders."
        },
        {
          "type": "p",
          "text": "See prior mentioned pitfalls"
        },
        {
          "type": "list",
          "items": [
            "Calling different memoized functions will read from different caches.",
            "Calling a memoized function outside of a component will not use the cache."
          ]
        },
        {
          "type": "p",
          "text": "If none of the above apply, it may be a problem with how React checks if something exists in cache. If your arguments are notprimitives(ex. objects, functions, arrays), ensure you’re passing the same object reference. When calling a memoized function, React will look up the input arguments to see if a result is already cached. React will use shallow equality of the arguments to determine if there is a cache hit."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';constcalculateNorm=cache((vector)=>{// ...});functionMapMarker(props){// 🚩 Wrong: props is an object that changes every render.constlength=calculateNorm(props);// ...}functionApp(){return(<><MapMarkerx={10}y={10}z={10}/><MapMarkerx={10}y={10}z={10}/></>);}"
        },
        {
          "type": "p",
          "text": "In this case the twoMapMarkers look like they’re doing the same work and callingcalculateNormwith the same value of{x: 10, y: 10, z:10}. Even though the objects contain the same values, they are not the same object reference as each component creates its ownpropsobject. React will callObject.ison the input to verify if there is a cache hit."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';constcalculateNorm=cache((x,y,z)=>{// ...});functionMapMarker(props){// ✅ Good: Pass primitives to memoized functionconstlength=calculateNorm(props.x,props.y,props.z);// ...}functionApp(){return(<><MapMarkerx={10}y={10}z={10}/><MapMarkerx={10}y={10}z={10}/></>);}"
        },
        {
          "type": "p",
          "text": "One way to address this could be to pass the vector dimensions tocalculateNorm. This works because the dimensions themselves are primitives. Another solution may be to pass the vector object itself as a prop to the component. We’ll need to pass the same object to both component instances."
        },
        {
          "type": "code",
          "code": "import{cache}from'react';constcalculateNorm=cache((vector)=>{// ...});functionMapMarker(props){// ✅ Good: Pass the same `vector` objectconstlength=calculateNorm(props.vector);// ...}functionApp(){constvector=[10,10,10];return(<><MapMarkervector={vector}/><MapMarkervector={vector}/></>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/cloneElement",
      "title": "cloneElement – React",
      "content": [
        {
          "type": "p",
          "text": "UsingcloneElementis uncommon and can lead to fragile code.See common alternatives."
        },
        {
          "type": "p",
          "text": "cloneElementlets you create a new React element using another element as a starting point."
        },
        {
          "type": "code",
          "code": "constclonedElement=cloneElement(element,props,...children)"
        },
        {
          "type": "list",
          "items": [
            "ReferencecloneElement(element, props, ...children)",
            "cloneElement(element, props, ...children)",
            "UsageOverriding props of an element",
            "Overriding props of an element",
            "AlternativesPassing data with a render propPassing data through contextExtracting logic into a custom Hook",
            "Passing data with a render prop",
            "Passing data through context",
            "Extracting logic into a custom Hook"
          ]
        },
        {
          "type": "p",
          "text": "CallcloneElementto create a React element based on theelement, but with differentpropsandchildren:"
        },
        {
          "type": "code",
          "code": "import{cloneElement}from'react';// ...constclonedElement=cloneElement(<Rowtitle=\"Cabbage\">Hello</Row>,{isHighlighted:true},'Goodbye');console.log(clonedElement);// <Row title=\"Cabbage\" isHighlighted={true}>Goodbye</Row>"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "element: Theelementargument must be a valid React element. For example, it could be a JSX node like<Something />, the result of callingcreateElement, or the result of anothercloneElementcall.",
            "props: Thepropsargument must either be an object ornull. If you passnull, the cloned element will retain all of the originalelement.props. Otherwise, for every prop in thepropsobject, the returned element will “prefer” the value frompropsover the value fromelement.props. The rest of the props will be filled from the originalelement.props. If you passprops.keyorprops.ref, they will replace the original ones.",
            "optional...children: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers,portals, empty nodes (null,undefined,true, andfalse), and arrays of React nodes. If you don’t pass any...childrenarguments, the originalelement.props.childrenwill be preserved."
          ]
        },
        {
          "type": "p",
          "text": "cloneElementreturns a React element object with a few properties:"
        },
        {
          "type": "list",
          "items": [
            "type: Same aselement.type.",
            "props: The result of shallowly mergingelement.propswith the overridingpropsyou have passed.",
            "ref: The originalelement.ref, unless it was overridden byprops.ref.",
            "key: The originalelement.key, unless it was overridden byprops.key."
          ]
        },
        {
          "type": "p",
          "text": "Usually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it."
        },
        {
          "type": "list",
          "items": [
            "Cloning an elementdoes not modify the original element.",
            "You should onlypass children as multiple arguments tocloneElementif they are all statically known,likecloneElement(element, null, child1, child2, child3). If your children are dynamic, pass the entire array as the third argument:cloneElement(element, null, listItems). This ensures that React willwarn you about missingkeysfor any dynamic lists. For static lists this is not necessary because they never reorder.",
            "cloneElementmakes it harder to trace the data flow, sotry thealternativesinstead."
          ]
        },
        {
          "type": "p",
          "text": "To override the props of someReact element, pass it tocloneElementwith theprops you want to override:"
        },
        {
          "type": "code",
          "code": "import{cloneElement}from'react';// ...constclonedElement=cloneElement(<Row title=\"Cabbage\" />,{ isHighlighted: true });"
        },
        {
          "type": "p",
          "text": "Here, the resultingcloned elementwill be<Row title=\"Cabbage\" isHighlighted={true} />. Let’s walk through an example to see when it’s useful. Imagine aListcomponent that renders itschildrenas a list of selectable rows with a “Next” button that changes which row is selected. TheListcomponent needs to render the selectedRowdifferently, so it clones every<Row>child that it has received, and adds an extraisHighlighted: trueorisHighlighted: falseprop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionList({children}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{Children.map(children,(child,index)=>cloneElement(child,{isHighlighted:index===selectedIndex}))}"
        },
        {
          "type": "p",
          "text": "Let’s say the original JSX received byListlooks like this:"
        },
        {
          "type": "code",
          "code": "<List><Rowtitle=\"Cabbage\"/><Rowtitle=\"Garlic\"/><Rowtitle=\"Apple\"/></List>"
        },
        {
          "type": "p",
          "text": "By cloning its children, theListcan pass extra information to everyRowinside. The result looks like this:"
        },
        {
          "type": "code",
          "code": "<List><Rowtitle=\"Cabbage\"isHighlighted={true}/><Rowtitle=\"Garlic\"isHighlighted={false}/><Rowtitle=\"Apple\"isHighlighted={false}/></List>"
        },
        {
          "type": "p",
          "text": "Notice how pressing “Next” updates the state of theList, and highlights a different row:"
        },
        {
          "type": "code",
          "code": "import{Children,cloneElement,useState}from'react';exportdefaultfunctionList({children}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{Children.map(children,(child,index)=>cloneElement(child,{isHighlighted:index===selectedIndex}))}<hr/><buttononClick={()=>{setSelectedIndex(i=>(i+1)%Children.count(children));}}>Next</button></div>);}"
        },
        {
          "type": "p",
          "text": "To summarize, theListcloned the<Row />elements it received and added an extra prop to them."
        },
        {
          "type": "p",
          "text": "Cloning children makes it hard to tell how the data flows through your app. Try one of thealternatives."
        },
        {
          "type": "p",
          "text": "Instead of usingcloneElement, consider accepting arender proplikerenderItem. Here,ListreceivesrenderItemas a prop.ListcallsrenderItemfor every item and passesisHighlightedas an argument:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionList({items,renderItem}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{items.map((item,index)=>{constisHighlighted=index===selectedIndex;returnrenderItem(item,isHighlighted);})}"
        },
        {
          "type": "p",
          "text": "TherenderItemprop is called a “render prop” because it’s a prop that specifies how to render something. For example, you can pass arenderItemimplementation that renders a<Row>with the givenisHighlightedvalue:"
        },
        {
          "type": "code",
          "code": "<Listitems={products}renderItem={(product,isHighlighted)=><Rowkey={product.id}title={product.title}isHighlighted={isHighlighted}/>}/>"
        },
        {
          "type": "p",
          "text": "The end result is the same as withcloneElement:"
        },
        {
          "type": "code",
          "code": "<List><Rowtitle=\"Cabbage\"isHighlighted={true}/><Rowtitle=\"Garlic\"isHighlighted={false}/><Rowtitle=\"Apple\"isHighlighted={false}/></List>"
        },
        {
          "type": "p",
          "text": "However, you can clearly trace where theisHighlightedvalue is coming from."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionList({items,renderItem}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{items.map((item,index)=>{constisHighlighted=index===selectedIndex;returnrenderItem(item,isHighlighted);})}<hr/><buttononClick={()=>{setSelectedIndex(i=>(i+1)%items.length);}}>Next</button></div>);}"
        },
        {
          "type": "p",
          "text": "This pattern is preferred tocloneElementbecause it is more explicit."
        },
        {
          "type": "p",
          "text": "Another alternative tocloneElementis topass data through context. For example, you can callcreateContextto define aHighlightContext:"
        },
        {
          "type": "code",
          "code": "exportconstHighlightContext=createContext(false);"
        },
        {
          "type": "p",
          "text": "YourListcomponent can wrap every item it renders into aHighlightContextprovider:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionList({items,renderItem}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{items.map((item,index)=>{constisHighlighted=index===selectedIndex;return(<HighlightContext.Providerkey={item.id}value={isHighlighted}>{renderItem(item)}</HighlightContext.Provider>);})}"
        },
        {
          "type": "p",
          "text": "With this approach,Rowdoes not need to receive anisHighlightedprop at all. Instead, it reads the context:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionRow({title}){constisHighlighted=useContext(HighlightContext);// ..."
        },
        {
          "type": "p",
          "text": "This allows the calling component to not know or worry about passingisHighlightedto<Row>:"
        },
        {
          "type": "code",
          "code": "<Listitems={products}renderItem={product=><Rowtitle={product.title}/>}/>"
        },
        {
          "type": "p",
          "text": "Instead,ListandRowcoordinate the highlighting logic through context."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';import{HighlightContext}from'./HighlightContext.js';exportdefaultfunctionList({items,renderItem}){const[selectedIndex,setSelectedIndex]=useState(0);return(<divclassName=\"List\">{items.map((item,index)=>{constisHighlighted=index===selectedIndex;return(<HighlightContext.Providerkey={item.id}value={isHighlighted}>{renderItem(item)}</HighlightContext.Provider>);})}<hr/><buttononClick={()=>{setSelectedIndex(i=>(i+1)%items.length);}}>Next</button></div>);}"
        },
        {
          "type": "p",
          "text": "Learn more about passing data through context."
        },
        {
          "type": "p",
          "text": "Another approach you can try is to extract the “non-visual” logic into your own Hook, and use the information returned by your Hook to decide what to render. For example, you could write auseListcustom Hook like this:"
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionuseList(items){const[selectedIndex,setSelectedIndex]=useState(0);functiononNext(){setSelectedIndex(i=>(i+1)%items.length);}constselected=items[selectedIndex];return[selected,onNext];}"
        },
        {
          "type": "p",
          "text": "Then you could use it like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){const[selected,onNext]=useList(products);return(<divclassName=\"List\">{products.map(product=><Rowkey={product.id}title={product.title}isHighlighted={selected===product}/>)}<hr/><buttononClick={onNext}>Next</button></div>);}"
        },
        {
          "type": "p",
          "text": "The data flow is explicit, but the state is inside theuseListcustom Hook that you can use from any component:"
        },
        {
          "type": "code",
          "code": "importRowfrom'./Row.js';importuseListfrom'./useList.js';import{products}from'./data.js';exportdefaultfunctionApp(){const[selected,onNext]=useList(products);return(<divclassName=\"List\">{products.map(product=><Rowkey={product.id}title={product.title}isHighlighted={selected===product}/>)}<hr/><buttononClick={onNext}>Next</button></div>);}"
        },
        {
          "type": "p",
          "text": "This approach is particularly useful if you want to reuse this logic between different components."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/components",
      "title": "Built-in React Components – React",
      "content": [
        {
          "type": "p",
          "text": "React exposes a few built-in components that you can use in your JSX."
        },
        {
          "type": "list",
          "items": [
            "<Fragment>, alternatively written as<>...</>, lets you group multiple JSX nodes together.",
            "<Profiler>lets you measure rendering performance of a React tree programmatically.",
            "<Suspense>lets you display a fallback while the child components are loading.",
            "<StrictMode>enables extra development-only checks that help you find bugs early."
          ]
        },
        {
          "type": "p",
          "text": "You can alsodefine your own componentsas JavaScript functions."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/createContext",
      "title": "createContext – React",
      "content": [
        {
          "type": "p",
          "text": "createContextlets you create acontextthat components can provide or read."
        },
        {
          "type": "code",
          "code": "constSomeContext=createContext(defaultValue)"
        },
        {
          "type": "list",
          "items": [
            "ReferencecreateContext(defaultValue)SomeContext.ProviderSomeContext.Consumer",
            "createContext(defaultValue)",
            "SomeContext.Provider",
            "SomeContext.Consumer",
            "UsageCreating contextImporting and exporting context from a file",
            "Creating context",
            "Importing and exporting context from a file",
            "TroubleshootingI can’t find a way to change the context value",
            "I can’t find a way to change the context value"
          ]
        },
        {
          "type": "p",
          "text": "CallcreateContextoutside of any components to create a context."
        },
        {
          "type": "code",
          "code": "import{createContext}from'react';constThemeContext=createContext('light');"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "defaultValue: The value that you want the context to have when there is no matching context provider in the tree above the component that reads context. If you don’t have any meaningful default value, specifynull. The default value is meant as a “last resort” fallback. It is static and never changes over time."
          ]
        },
        {
          "type": "p",
          "text": "createContextreturns a context object. The context object itself does not hold any information.It representswhichcontext other components read or provide. Typically, you will useSomeContext.Providerin components above to specify the context value, and calluseContext(SomeContext)in components below to read it. The context object has a few properties:"
        },
        {
          "type": "list",
          "items": [
            "SomeContext.Providerlets you provide the context value to components.",
            "SomeContext.Consumeris an alternative and rarely used way to read the context value."
          ]
        },
        {
          "type": "p",
          "text": "Wrap your components into a context provider to specify the value of this context for all components inside:"
        },
        {
          "type": "code",
          "code": "functionApp(){const[theme,setTheme]=useState('light');// ...return(<ThemeContext.Providervalue={theme}><Page/></ThemeContext.Provider>);}"
        },
        {
          "type": "list",
          "items": [
            "value: The value that you want to pass to all the components reading this context inside this provider, no matter how deep. The context value can be of any type. A component callinguseContext(SomeContext)inside of the provider receives thevalueof the innermost corresponding context provider above it."
          ]
        },
        {
          "type": "p",
          "text": "BeforeuseContextexisted, there was an older way to read context:"
        },
        {
          "type": "code",
          "code": "functionButton(){// 🟡 Legacy way (not recommended)return(<ThemeContext.Consumer>{theme=>(<buttonclassName={theme}/>)}</ThemeContext.Consumer>);}"
        },
        {
          "type": "p",
          "text": "Although this older way still works, butnewly written code should read context withuseContext()instead:"
        },
        {
          "type": "code",
          "code": "functionButton(){// ✅ Recommended wayconsttheme=useContext(ThemeContext);return<buttonclassName={theme}/>;}"
        },
        {
          "type": "list",
          "items": [
            "children: A function. React will call the function you pass with the current context value determined by the same algorithm asuseContext()does, and render the result you return from this function. React will also re-run this function and update the UI whenever the context from the parent components changes."
          ]
        },
        {
          "type": "p",
          "text": "Context lets componentspass information deep downwithout explicitly passing props. CallcreateContextoutside any components to create one or more contexts."
        },
        {
          "type": "code",
          "code": "import{createContext}from'react';constThemeContext=createContext('light');constAuthContext=createContext(null);"
        },
        {
          "type": "p",
          "text": "createContextreturns acontext object. Components can read context by passing it touseContext():"
        },
        {
          "type": "code",
          "code": "functionButton(){consttheme=useContext(ThemeContext);// ...}functionProfile(){constcurrentUser=useContext(AuthContext);// ...}"
        },
        {
          "type": "p",
          "text": "By default, the values they receive will be thedefault valuesyou have specified when creating the contexts. However, by itself this isn’t useful because the default values never change. Context is useful because you canprovide other, dynamic values from your components:"
        },
        {
          "type": "code",
          "code": "functionApp(){const[theme,setTheme]=useState('dark');const[currentUser,setCurrentUser]=useState({name:'Taylor'});// ...return(<ThemeContext.Providervalue={theme}><AuthContext.Providervalue={currentUser}><Page/></AuthContext.Provider></ThemeContext.Provider>);}"
        },
        {
          "type": "p",
          "text": "Now thePagecomponent and any components inside it, no matter how deep, will “see” the passed context values. If the passed context values change, React will re-render the components reading the context as well. Read more about reading and providing context and see examples."
        },
        {
          "type": "p",
          "text": "Often, components in different files will need access to the same context. This is why it’s common to declare contexts in a separate file. Then you can use theexportstatementto make context available for other files:"
        },
        {
          "type": "code",
          "code": "// Contexts.jsimport{createContext}from'react';exportconstThemeContext=createContext('light');exportconstAuthContext=createContext(null);"
        },
        {
          "type": "p",
          "text": "Components declared in other files can then use theimportstatement to read or provide this context:"
        },
        {
          "type": "code",
          "code": "// Button.jsimport{ThemeContext}from'./Contexts.js';functionButton(){consttheme=useContext(ThemeContext);// ...}"
        },
        {
          "type": "code",
          "code": "// App.jsimport{ThemeContext,AuthContext}from'./Contexts.js';functionApp(){// ...return(<ThemeContext.Providervalue={theme}><AuthContext.Providervalue={currentUser}><Page/></AuthContext.Provider></ThemeContext.Provider>);}"
        },
        {
          "type": "p",
          "text": "This works similar toimporting and exporting components."
        },
        {
          "type": "p",
          "text": "Code like this specifies thedefaultcontext value:"
        },
        {
          "type": "code",
          "code": "constThemeContext=createContext('light');"
        },
        {
          "type": "p",
          "text": "This value never changes. React only uses this value as a fallback if it can’t find a matching provider above. To make context change over time,add state and wrap components in a context provider."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/createElement",
      "title": "createElement – React",
      "content": [
        {
          "type": "p",
          "text": "createElementlets you create a React element. It serves as an alternative to writingJSX."
        },
        {
          "type": "code",
          "code": "constelement=createElement(type,props,...children)"
        },
        {
          "type": "list",
          "items": [
            "ReferencecreateElement(type, props, ...children)",
            "createElement(type, props, ...children)",
            "UsageCreating an element without JSX",
            "Creating an element without JSX"
          ]
        },
        {
          "type": "p",
          "text": "CallcreateElementto create a React element with the giventype,props, andchildren."
        },
        {
          "type": "code",
          "code": "import{createElement}from'react';functionGreeting({name}){returncreateElement('h1',{className:'greeting'},'Hello');}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "type: Thetypeargument must be a valid React component type. For example, it could be a tag name string (such as'div'or'span'), or a React component (a function, a class, or a special component likeFragment).",
            "props: Thepropsargument must either be an object ornull. If you passnull, it will be treated the same as an empty object. React will create an element with props matching thepropsyou have passed. Note thatrefandkeyfrom yourpropsobject are special and willnotbe available aselement.props.refandelement.props.keyon the returnedelement. They will be available aselement.refandelement.key.",
            "optional...children: Zero or more child nodes. They can be any React nodes, including React elements, strings, numbers,portals, empty nodes (null,undefined,true, andfalse), and arrays of React nodes."
          ]
        },
        {
          "type": "p",
          "text": "createElementreturns a React element object with a few properties:"
        },
        {
          "type": "list",
          "items": [
            "type: Thetypeyou have passed.",
            "props: Thepropsyou have passed except forrefandkey.",
            "ref: Therefyou have passed. If missing,null.",
            "key: Thekeyyou have passed, coerced to a string. If missing,null."
          ]
        },
        {
          "type": "p",
          "text": "Usually, you’ll return the element from your component or make it a child of another element. Although you may read the element’s properties, it’s best to treat every element as opaque after it’s created, and only render it."
        },
        {
          "type": "list",
          "items": [
            "You musttreat React elements and their props asimmutableand never change their contents after creation. In development, React willfreezethe returned element and itspropsproperty shallowly to enforce this.",
            "When you use JSX,you must start a tag with a capital letter to render your own custom component.In other words,<Something />is equivalent tocreateElement(Something), but<something />(lowercase) is equivalent tocreateElement('something')(note it’s a string, so it will be treated as a built-in HTML tag).",
            "You should onlypass children as multiple arguments tocreateElementif they are all statically known,likecreateElement('h1', {}, child1, child2, child3). If your children are dynamic, pass the entire array as the third argument:createElement('ul', {}, listItems). This ensures that React willwarn you about missingkeysfor any dynamic lists. For static lists this is not necessary because they never reorder."
          ]
        },
        {
          "type": "p",
          "text": "If you don’t likeJSXor can’t use it in your project, you can usecreateElementas an alternative. To create an element without JSX, callcreateElementwith sometype,props, andchildren:"
        },
        {
          "type": "code",
          "code": "import{createElement}from'react';functionGreeting({name}){returncreateElement('h1',{ className: 'greeting' },'Hello ',createElement('i', null, name),'. Welcome!');}"
        },
        {
          "type": "p",
          "text": "Thechildrenare optional, and you can pass as many as you need (the example above has three children). This code will display a<h1>header with a greeting. For comparison, here is the same example rewritten with JSX:"
        },
        {
          "type": "code",
          "code": "functionGreeting({name}){return(<h1className=\"greeting\">Hello <i>{name}</i>. Welcome!</h1>);}"
        },
        {
          "type": "p",
          "text": "To render your own React component, pass a function likeGreetingas thetypeinstead of a string like'h1':"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){returncreateElement(Greeting,{ name: 'Taylor' });}"
        },
        {
          "type": "p",
          "text": "With JSX, it would look like this:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){return<Greetingname=\"Taylor\"/>;}"
        },
        {
          "type": "p",
          "text": "Here is a complete example written withcreateElement:"
        },
        {
          "type": "code",
          "code": "import{createElement}from'react';functionGreeting({name}){returncreateElement('h1',{className:'greeting'},'Hello ',createElement('i',null,name),'. Welcome!');}exportdefaultfunctionApp(){returncreateElement(Greeting,{name:'Taylor'});}"
        },
        {
          "type": "p",
          "text": "And here is the same example written using JSX:"
        },
        {
          "type": "code",
          "code": "functionGreeting({name}){return(<h1className=\"greeting\">Hello<i>{name}</i>. Welcome!</h1>);}exportdefaultfunctionApp(){return<Greetingname=\"Taylor\"/>;}"
        },
        {
          "type": "p",
          "text": "Both coding styles are fine, so you can use whichever one you prefer for your project. The main benefit of using JSX compared tocreateElementis that it’s easy to see which closing tag corresponds to which opening tag."
        },
        {
          "type": "p",
          "text": "An element is a lightweight description of a piece of the user interface. For example, both<Greeting name=\"Taylor\" />andcreateElement(Greeting, { name: 'Taylor' })produce an object like this:"
        },
        {
          "type": "code",
          "code": "// Slightly simplified{type:Greeting,props:{name:'Taylor'},key:null,ref:null,}"
        },
        {
          "type": "p",
          "text": "Note that creating this object does not render theGreetingcomponent or create any DOM elements. A React element is more like a description—an instruction for React to later render theGreetingcomponent. By returning this object from yourAppcomponent, you tell React what to do next. Creating elements is extremely cheap so you don’t need to try to optimize or avoid it."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/createRef",
      "title": "createRef – React",
      "content": [
        {
          "type": "p",
          "text": "createRefis mostly used forclass components.Function components typically rely onuseRefinstead."
        },
        {
          "type": "p",
          "text": "createRefcreates arefobject which can contain arbitrary value."
        },
        {
          "type": "code",
          "code": "classMyInputextendsComponent{inputRef=createRef();// ...}"
        },
        {
          "type": "list",
          "items": [
            "ReferencecreateRef()",
            "createRef()",
            "UsageDeclaring a ref in a class component",
            "Declaring a ref in a class component",
            "AlternativesMigrating from a class withcreateRefto a function withuseRef",
            "Migrating from a class withcreateRefto a function withuseRef"
          ]
        },
        {
          "type": "p",
          "text": "CallcreateRefto declare arefinside aclass component."
        },
        {
          "type": "code",
          "code": "import{createRef,Component}from'react';classMyComponentextendsComponent{intervalRef=createRef();inputRef=createRef();// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "createReftakes no parameters."
        },
        {
          "type": "p",
          "text": "createRefreturns an object with a single property:"
        },
        {
          "type": "list",
          "items": [
            "current: Initially, it’s set to thenull. You can later set it to something else. If you pass the ref object to React as arefattribute to a JSX node, React will set itscurrentproperty."
          ]
        },
        {
          "type": "list",
          "items": [
            "createRefalways returns adifferentobject. It’s equivalent to writing{ current: null }yourself.",
            "In a function component, you probably wantuseRefinstead which always returns the same object.",
            "const ref = useRef()is equivalent toconst [ref, _] = useState(() => createRef(null))."
          ]
        },
        {
          "type": "p",
          "text": "To declare a ref inside aclass component,callcreateRefand assign its result to a class field:"
        },
        {
          "type": "code",
          "code": "import{Component,createRef}from'react';classFormextendsComponent{inputRef=createRef();// ...}"
        },
        {
          "type": "p",
          "text": "If you now passref={this.inputRef}to an<input>in your JSX, React will populatethis.inputRef.currentwith the input DOM node. For example, here is how you make a button that focuses the input:"
        },
        {
          "type": "code",
          "code": "import{Component,createRef}from'react';exportdefaultclassFormextendsComponent{inputRef=createRef();handleClick=()=>{this.inputRef.current.focus();}render(){return(<><inputref={this.inputRef}/><buttononClick={this.handleClick}>Focus the input</button></>);}}"
        },
        {
          "type": "p",
          "text": "createRefis mostly used forclass components.Function components typically rely onuseRefinstead."
        },
        {
          "type": "p",
          "text": "We recommend using function components instead ofclass componentsin new code. If you have some existing class components usingcreateRef, here is how you can convert them. This is the original code:"
        },
        {
          "type": "code",
          "code": "import{Component,createRef}from'react';exportdefaultclassFormextendsComponent{inputRef=createRef();handleClick=()=>{this.inputRef.current.focus();}render(){return(<><inputref={this.inputRef}/><buttononClick={this.handleClick}>Focus the input</button></>);}}"
        },
        {
          "type": "p",
          "text": "When youconvert this component from a class to a function,replace calls tocreateRefwith calls touseRef:"
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/experimental_taintObjectReference",
      "title": "experimental_taintObjectReference – React",
      "content": [
        {
          "type": "p",
          "text": "This API is experimental and is not available in a stable version of React yet. You can try it by upgrading React packages to the most recent experimental version:"
        },
        {
          "type": "list",
          "items": [
            "react@experimental",
            "react-dom@experimental",
            "eslint-plugin-react-hooks@experimental"
          ]
        },
        {
          "type": "p",
          "text": "Experimental versions of React may contain bugs. Don’t use them in production. This API is only available inside React Server Components."
        },
        {
          "type": "p",
          "text": "taintObjectReferencelets you prevent a specific object instance from being passed to a Client Component like auserobject."
        },
        {
          "type": "code",
          "code": "experimental_taintObjectReference(message,object);"
        },
        {
          "type": "p",
          "text": "To prevent passing a key, hash or token, seetaintUniqueValue."
        },
        {
          "type": "list",
          "items": [
            "ReferencetaintObjectReference(message, object)",
            "taintObjectReference(message, object)",
            "UsagePrevent user data from unintentionally reaching the client",
            "Prevent user data from unintentionally reaching the client"
          ]
        },
        {
          "type": "p",
          "text": "CalltaintObjectReferencewith an object to register it with React as something that should not be allowed to be passed to the Client as is:"
        },
        {
          "type": "code",
          "code": "import{experimental_taintObjectReference}from'react';experimental_taintObjectReference('Do not pass ALL environment variables to the client.',process.env);"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "message: The message you want to display if the object gets passed to a Client Component. This message will be displayed as a part of the Error that will be thrown if the object gets passed to a Client Component.",
            "object: The object to be tainted. Functions and class instances can be passed totaintObjectReferenceasobject. Functions and classes are already blocked from being passed to Client Components but the React’s default error message will be replaced by what you defined inmessage. When a specific instance of a Typed Array is passed totaintObjectReferenceasobject, any other copies of the Typed Array will not be tainted."
          ]
        },
        {
          "type": "p",
          "text": "experimental_taintObjectReferencereturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Recreating or cloning a tainted object creates a new untainted object which may contain sensitive data. For example, if you have a tainteduserobject,const userInfo = {name: user.name, ssn: user.ssn}or{...user}will create new objects which are not tainted.taintObjectReferenceonly protects against simple mistakes when the object is passed through to a Client Component unchanged."
          ]
        },
        {
          "type": "p",
          "text": "Do not rely on just tainting for security.Tainting an object doesn’t prevent leaking of every possible derived value. For example, the clone of a tainted object will create a new untainted object. Using data from a tainted object (e.g.{secret: taintedObj.secret}) will create a new value or object that is not tainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns."
        },
        {
          "type": "p",
          "text": "A Client Component should never accept objects that carry sensitive data. Ideally, the data fetching functions should not expose data that the current user should not have access to. Sometimes mistakes happen during refactoring. To protect against these mistakes happening down the line we can “taint” the user object in our data API."
        },
        {
          "type": "code",
          "code": "import{experimental_taintObjectReference}from'react';exportasyncfunctiongetUser(id){constuser=awaitdb`SELECT * FROM users WHERE id =${id}`;experimental_taintObjectReference('Do not pass the entire user object to the client. '+'Instead, pick off the specific properties you need for this use case.',user,);returnuser;}"
        },
        {
          "type": "p",
          "text": "Now whenever anyone tries to pass this object to a Client Component, an error will be thrown with the passed in error message instead."
        },
        {
          "type": "p",
          "text": "If you’re running a Server Components environment that has access to sensitive data, you have to be careful not to pass objects straight through:"
        },
        {
          "type": "code",
          "code": "// api.jsexportasyncfunctiongetUser(id){constuser=awaitdb`SELECT * FROM users WHERE id =${id}`;returnuser;}"
        },
        {
          "type": "code",
          "code": "import{getUser}from'api.js';import{InfoCard}from'components.js';exportasyncfunctionProfile(props){constuser=awaitgetUser(props.userId);// DO NOT DO THISreturn<InfoCarduser={user}/>;}"
        },
        {
          "type": "code",
          "code": "// components.js\"use client\";exportasyncfunctionInfoCard({user}){return<div>{user.name}</div>;}"
        },
        {
          "type": "p",
          "text": "Ideally, thegetUsershould not expose data that the current user should not have access to. To prevent passing theuserobject to a Client Component down the line we can “taint” the user object:"
        },
        {
          "type": "code",
          "code": "// api.jsimport{experimental_taintObjectReference}from'react';exportasyncfunctiongetUser(id){constuser=awaitdb`SELECT * FROM users WHERE id =${id}`;experimental_taintObjectReference('Do not pass the entire user object to the client. '+'Instead, pick off the specific properties you need for this use case.',user,);returnuser;}"
        },
        {
          "type": "p",
          "text": "Now if anyone tries to pass theuserobject to a Client Component, an error will be thrown with the passed in error message."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/experimental_taintUniqueValue",
      "title": "experimental_taintUniqueValue – React",
      "content": [
        {
          "type": "p",
          "text": "This API is experimental and is not available in a stable version of React yet. You can try it by upgrading React packages to the most recent experimental version:"
        },
        {
          "type": "list",
          "items": [
            "react@experimental",
            "react-dom@experimental",
            "eslint-plugin-react-hooks@experimental"
          ]
        },
        {
          "type": "p",
          "text": "Experimental versions of React may contain bugs. Don’t use them in production. This API is only available insideReact Server Components."
        },
        {
          "type": "p",
          "text": "taintUniqueValuelets you prevent unique values from being passed to Client Components like passwords, keys, or tokens."
        },
        {
          "type": "code",
          "code": "taintUniqueValue(errMessage,lifetime,value)"
        },
        {
          "type": "p",
          "text": "To prevent passing an object containing sensitive data, seetaintObjectReference."
        },
        {
          "type": "list",
          "items": [
            "ReferencetaintUniqueValue(message, lifetime, value)",
            "taintUniqueValue(message, lifetime, value)",
            "UsagePrevent a token from being passed to Client Components",
            "Prevent a token from being passed to Client Components"
          ]
        },
        {
          "type": "p",
          "text": "CalltaintUniqueValuewith a password, token, key or hash to register it with React as something that should not be allowed to be passed to the Client as is:"
        },
        {
          "type": "code",
          "code": "import{experimental_taintUniqueValue}from'react';experimental_taintUniqueValue('Do not pass secret keys to the client.',process,process.env.SECRET_KEY);"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "message: The message you want to display ifvalueis passed to a Client Component. This message will be displayed as a part of the Error that will be thrown ifvalueis passed to a Client Component.",
            "lifetime: Any object that indicates how longvalueshould be tainted.valuewill be blocked from being sent to any Client Component while this object still exists. For example, passingglobalThisblocks the value for the lifetime of an app.lifetimeis typically an object whose properties containsvalue.",
            "value: A string, bigint or TypedArray.valuemust be a unique sequence of characters or bytes with high entropy such as a cryptographic token, private key, hash, or a long password.valuewill be blocked from being sent to any Client Component."
          ]
        },
        {
          "type": "p",
          "text": "experimental_taintUniqueValuereturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Deriving new values from tainted values can compromise tainting protection. New values created by uppercasing tainted values, concatenating tainted string values into a larger string, converting tainted values to base64, substringing tainted values, and other similar transformations are not tainted unless you explicitly calltaintUniqueValueon these newly created values.",
            "Do not usetaintUniqueValueto protect low-entropy values such as PIN codes or phone numbers. If any value in a request is controlled by an attacker, they could infer which value is tainted by enumerating all possible values of the secret."
          ]
        },
        {
          "type": "p",
          "text": "To ensure that sensitive information such as passwords, session tokens, or other unique values do not inadvertently get passed to Client Components, thetaintUniqueValuefunction provides a layer of protection. When a value is tainted, any attempt to pass it to a Client Component will result in an error. Thelifetimeargument defines the duration for which the value remains tainted. For values that should remain tainted indefinitely, objects likeglobalThisorprocesscan serve as thelifetimeargument. These objects have a lifespan that spans the entire duration of your app’s execution."
        },
        {
          "type": "code",
          "code": "import{experimental_taintUniqueValue}from'react';experimental_taintUniqueValue('Do not pass a user password to the client.',globalThis,process.env.SECRET_KEY);"
        },
        {
          "type": "p",
          "text": "If the tainted value’s lifespan is tied to a object, thelifetimeshould be the object that encapsulates the value. This ensures the tainted value remains protected for the lifetime of the encapsulating object."
        },
        {
          "type": "code",
          "code": "import{experimental_taintUniqueValue}from'react';exportasyncfunctiongetUser(id){constuser=awaitdb`SELECT * FROM users WHERE id =${id}`;experimental_taintUniqueValue('Do not pass a user session token to the client.',user,user.session.token);returnuser;}"
        },
        {
          "type": "p",
          "text": "In this example, theuserobject serves as thelifetimeargument. If this object gets stored in a global cache or is accessible by another request, the session token remains tainted."
        },
        {
          "type": "p",
          "text": "Do not rely solely on tainting for security.Tainting a value doesn’t block every possible derived value. For example, creating a new value by upper casing a tainted string will not taint the new value."
        },
        {
          "type": "code",
          "code": "import{experimental_taintUniqueValue}from'react';constpassword='correct horse battery staple';experimental_taintUniqueValue('Do not pass the password to the client.',globalThis,password);constuppercasePassword=password.toUpperCase()// `uppercasePassword` is not tainted"
        },
        {
          "type": "p",
          "text": "In this example, the constantpasswordis tainted. Thenpasswordis used to create a new valueuppercasePasswordby calling thetoUpperCasemethod onpassword. The newly createduppercasePasswordis not tainted. Other similar ways of deriving new values from tainted values like concatenating it into a larger string, converting it to base64, or returning a substring create untained values. Tainting only protects against simple mistakes like explicitly passing secret values to the client. Mistakes in calling thetaintUniqueValuelike using a global store outside of React, without the corresponding lifetime object, can cause the tainted value to become untainted. Tainting is a layer of protection; a secure app will have multiple layers of protection, well designed APIs, and isolation patterns."
        },
        {
          "type": "p",
          "text": "If you’re running a Server Components environment that has access to private keys or passwords such as database passwords, you have to be careful not to pass that to a Client Component."
        },
        {
          "type": "code",
          "code": "exportasyncfunctionDashboard(props){// DO NOT DO THISreturn<Overviewpassword={process.env.API_PASSWORD}/>;}"
        },
        {
          "type": "code",
          "code": "\"use client\";import{useEffect}from'...'exportasyncfunctionOverview({password}){useEffect(()=>{constheaders={Authorization:password};fetch(url,{headers}).then(...);},[password]);...}"
        },
        {
          "type": "p",
          "text": "This example would leak the secret API token to the client. If this API token can be used to access data this particular user shouldn’t have access to, it could lead to a data breach. Ideally, secrets like this are abstracted into a single helper file that can only be imported by trusted data utilities on the server. The helper can even be tagged withserver-onlyto ensure that this file isn’t imported on the client."
        },
        {
          "type": "code",
          "code": "import\"server-only\";exportfunctionfetchAPI(url){constheaders={Authorization:process.env.API_PASSWORD};returnfetch(url,{headers});}"
        },
        {
          "type": "p",
          "text": "Sometimes mistakes happen during refactoring and not all of your colleagues might know about this.\nTo protect against this mistakes happening down the line we can “taint” the actual password:"
        },
        {
          "type": "code",
          "code": "import\"server-only\";import{experimental_taintUniqueValue}from'react';experimental_taintUniqueValue('Do not pass the API token password to the client. '+'Instead do all fetches on the server.'process,process.env.API_PASSWORD);"
        },
        {
          "type": "p",
          "text": "Now whenever anyone tries to pass this password to a Client Component, or send the password to a Client Component with a Server Function, an error will be thrown with message you defined when you calledtaintUniqueValue."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/experimental_useEffectEvent",
      "title": "experimental_useEffectEvent – React",
      "content": [
        {
          "type": "p",
          "text": "This API is experimental and is not available in a stable version of React yet. You can try it by upgrading React packages to the most recent experimental version:"
        },
        {
          "type": "list",
          "items": [
            "react@experimental",
            "react-dom@experimental",
            "eslint-plugin-react-hooks@experimental"
          ]
        },
        {
          "type": "p",
          "text": "Experimental versions of React may contain bugs. Don’t use them in production."
        },
        {
          "type": "p",
          "text": "useEffectEventis a React Hook that lets you extract non-reactive logic into anEffect Event."
        },
        {
          "type": "code",
          "code": "constonSomething=useEffectEvent(callback)"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/forwardRef",
      "title": "forwardRef – React",
      "content": [
        {
          "type": "p",
          "text": "In React 19,forwardRefis no longer necessary. Passrefas a prop instead. forwardRefwill deprecated in a future release. Learn morehere."
        },
        {
          "type": "p",
          "text": "forwardReflets your component expose a DOM node to parent component with aref."
        },
        {
          "type": "code",
          "code": "constSomeComponent=forwardRef(render)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceforwardRef(render)renderfunction",
            "forwardRef(render)",
            "renderfunction",
            "UsageExposing a DOM node to the parent componentForwarding a ref through multiple componentsExposing an imperative handle instead of a DOM node",
            "Exposing a DOM node to the parent component",
            "Forwarding a ref through multiple components",
            "Exposing an imperative handle instead of a DOM node",
            "TroubleshootingMy component is wrapped inforwardRef, but therefto it is alwaysnull",
            "My component is wrapped inforwardRef, but therefto it is alwaysnull"
          ]
        },
        {
          "type": "p",
          "text": "CallforwardRef()to let your component receive a ref and forward it to a child component:"
        },
        {
          "type": "code",
          "code": "import{forwardRef}from'react';constMyInput=forwardRef(functionMyInput(props,ref){// ...});"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "render: The render function for your component. React calls this function with the props andrefthat your component received from its parent. The JSX you return will be the output of your component."
          ]
        },
        {
          "type": "p",
          "text": "forwardRefreturns a React component that you can render in JSX. Unlike React components defined as plain functions, a component returned byforwardRefis also able to receive arefprop."
        },
        {
          "type": "list",
          "items": [
            "In Strict Mode, React willcall your render function twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. If your render function is pure (as it should be), this should not affect the logic of your component. The result from one of the calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "forwardRefaccepts a render function as an argument. React calls this function withpropsandref:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput(props,ref){return(<label>{props.label}<inputref={ref}/></label>);});"
        },
        {
          "type": "list",
          "items": [
            "props: The props passed by the parent component.",
            "ref:  Therefattribute passed by the parent component. Therefcan be an object or a function. If the parent component has not passed a ref, it will benull. You should either pass therefyou receive to another component, or pass it touseImperativeHandle."
          ]
        },
        {
          "type": "p",
          "text": "forwardRefreturns a React component that you can render in JSX. Unlike React components defined as plain functions, the component returned byforwardRefis able to take arefprop."
        },
        {
          "type": "p",
          "text": "By default, each component’s DOM nodes are private. However, sometimes it’s useful to expose a DOM node to the parent—for example, to allow focusing it. To opt in, wrap your component definition intoforwardRef():"
        },
        {
          "type": "code",
          "code": "import{forwardRef}from'react';constMyInput=forwardRef(functionMyInput(props,ref){const{label,...otherProps}=props;return(<label>{label}<input{...otherProps}/></label>);});"
        },
        {
          "type": "p",
          "text": "You will receive arefas the second argument after props. Pass it to the DOM node that you want to expose:"
        },
        {
          "type": "code",
          "code": "import{forwardRef}from'react';constMyInput=forwardRef(functionMyInput(props,ref){const{label,...otherProps}=props;return(<label>{label}<input{...otherProps}ref={ref}/></label>);});"
        },
        {
          "type": "p",
          "text": "This lets the parentFormcomponent access the<input>DOM nodeexposed byMyInput:"
        },
        {
          "type": "code",
          "code": "functionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();}return(<form><MyInputlabel=\"Enter your name:\"ref={ref}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "ThisFormcomponentpasses a reftoMyInput. TheMyInputcomponentforwardsthat ref to the<input>browser tag. As a result, theFormcomponent can access that<input>DOM node and callfocus()on it. Keep in mind that exposing a ref to the DOM node inside your component makes it harder to change your component’s internals later. You will typically expose DOM nodes from reusable low-level components like buttons or text inputs, but you won’t do it for application-level components like an avatar or a comment."
        },
        {
          "type": "p",
          "text": "Clicking the button will focus the input. TheFormcomponent defines a ref and passes it to theMyInputcomponent. TheMyInputcomponent forwards that ref to the browser<input>. This lets theFormcomponent focus the<input>."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';importMyInputfrom'./MyInput.js';exportdefaultfunctionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();}return(<form><MyInputlabel=\"Enter your name:\"ref={ref}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "Instead of forwarding arefto a DOM node, you can forward it to your own component likeMyInput:"
        },
        {
          "type": "code",
          "code": "constFormField=forwardRef(functionFormField(props,ref){// ...return(<><MyInputref={ref}/>...</>);});"
        },
        {
          "type": "p",
          "text": "If thatMyInputcomponent forwards a ref to its<input>, a ref toFormFieldwill give you that<input>:"
        },
        {
          "type": "code",
          "code": "functionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();}return(<form><FormFieldlabel=\"Enter your name:\"ref={ref}isRequired={true}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "TheFormcomponent defines a ref and passes it toFormField. TheFormFieldcomponent forwards that ref toMyInput, which forwards it to a browser<input>DOM node. This is howFormaccesses that DOM node."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';importFormFieldfrom'./FormField.js';exportdefaultfunctionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();}return(<form><FormFieldlabel=\"Enter your name:\"ref={ref}isRequired={true}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "Instead of exposing an entire DOM node, you can expose a custom object, called animperative handle,with a more constrained set of methods. To do this, you’d need to define a separate ref to hold the DOM node:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput(props,ref){constinputRef=useRef(null);// ...return<input{...props}ref={inputRef}/>;});"
        },
        {
          "type": "p",
          "text": "Pass therefyou received touseImperativeHandleand specify the value you want to expose to theref:"
        },
        {
          "type": "code",
          "code": "import{forwardRef,useRef,useImperativeHandle}from'react';constMyInput=forwardRef(functionMyInput(props,ref){constinputRef=useRef(null);useImperativeHandle(ref,()=>{return{focus(){inputRef.current.focus();},scrollIntoView(){inputRef.current.scrollIntoView();},};},[]);return<input{...props}ref={inputRef}/>;});"
        },
        {
          "type": "p",
          "text": "If some component gets a ref toMyInput, it will only receive your{ focus, scrollIntoView }object instead of the DOM node. This lets you limit the information you expose about your DOM node to the minimum."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';importMyInputfrom'./MyInput.js';exportdefaultfunctionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();// This won't work because the DOM node isn't exposed:// ref.current.style.opacity = 0.5;}return(<form><MyInputplaceholder=\"Enter your name\"ref={ref}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "Read more about using imperative handles."
        },
        {
          "type": "p",
          "text": "Do not overuse refs.You should only use refs forimperativebehaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on. If you can express something as a prop, you should not use a ref.For example, instead of exposing an imperative handle like{ open, close }from aModalcomponent, it is better to takeisOpenas a prop like<Modal isOpen={isOpen} />.Effectscan help you expose imperative behaviors via props."
        },
        {
          "type": "p",
          "text": "This usually means that you forgot to actually use therefthat you received. For example, this component doesn’t do anything with itsref:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput({label},ref){return(<label>{label}<input/></label>);});"
        },
        {
          "type": "p",
          "text": "To fix it, pass therefdown to a DOM node or another component that can accept a ref:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput({label},ref){return(<label>{label}<inputref={ref}/></label>);});"
        },
        {
          "type": "p",
          "text": "ThereftoMyInputcould also benullif some of the logic is conditional:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput({label,showInput},ref){return(<label>{label}{showInput&&<inputref={ref}/>}</label>);});"
        },
        {
          "type": "p",
          "text": "IfshowInputisfalse, then the ref won’t be forwarded to any node, and a ref toMyInputwill remain empty. This is particularly easy to miss if the condition is hidden inside another component, likePanelin this example:"
        },
        {
          "type": "code",
          "code": "constMyInput=forwardRef(functionMyInput({label,showInput},ref){return(<label>{label}<PanelisExpanded={showInput}><inputref={ref}/></Panel></label>);});"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/hooks",
      "title": "Built-in React Hooks – React",
      "content": [
        {
          "type": "p",
          "text": "Hookslet you use different React features from your components. You can either use the built-in Hooks or combine them to build your own. This page lists all built-in Hooks in React."
        },
        {
          "type": "p",
          "text": "Statelets a component“remember” information like user input.For example, a form component can use state to store the input value, while an image gallery component can use state to store the selected image index. To add state to a component, use one of these Hooks:"
        },
        {
          "type": "list",
          "items": [
            "useStatedeclares a state variable that you can update directly.",
            "useReducerdeclares a state variable with the update logic inside areducer function."
          ]
        },
        {
          "type": "code",
          "code": "functionImageGallery(){const[index,setIndex]=useState(0);// ..."
        },
        {
          "type": "p",
          "text": "Contextlets a componentreceive information from distant parents without passing it as props.For example, your app’s top-level component can pass the current UI theme to all components below, no matter how deep."
        },
        {
          "type": "list",
          "items": ["useContextreads and subscribes to a context."]
        },
        {
          "type": "code",
          "code": "functionButton(){consttheme=useContext(ThemeContext);// ..."
        },
        {
          "type": "p",
          "text": "Refslet a componenthold some information that isn’t used for rendering,like a DOM node or a timeout ID. Unlike with state, updating a ref does not re-render your component. Refs are an “escape hatch” from the React paradigm. They are useful when you need to work with non-React systems, such as the built-in browser APIs."
        },
        {
          "type": "list",
          "items": [
            "useRefdeclares a ref. You can hold any value in it, but most often it’s used to hold a DOM node.",
            "useImperativeHandlelets you customize the ref exposed by your component. This is rarely used."
          ]
        },
        {
          "type": "code",
          "code": "functionForm(){constinputRef=useRef(null);// ..."
        },
        {
          "type": "p",
          "text": "Effectslet a componentconnect to and synchronize with external systems.This includes dealing with network, browser DOM, animations, widgets written using a different UI library, and other non-React code."
        },
        {
          "type": "list",
          "items": ["useEffectconnects a component to an external system."]
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(roomId);connection.connect();return()=>connection.disconnect();},[roomId]);// ..."
        },
        {
          "type": "p",
          "text": "Effects are an “escape hatch” from the React paradigm. Don’t use Effects to orchestrate the data flow of your application. If you’re not interacting with an external system,you might not need an Effect. There are two rarely used variations ofuseEffectwith differences in timing:"
        },
        {
          "type": "list",
          "items": [
            "useLayoutEffectfires before the browser repaints the screen. You can measure layout here.",
            "useInsertionEffectfires before React makes changes to the DOM. Libraries can insert dynamic CSS here."
          ]
        },
        {
          "type": "p",
          "text": "A common way to optimize re-rendering performance is to skip unnecessary work. For example, you can tell React to reuse a cached calculation or to skip a re-render if the data has not changed since the previous render. To skip calculations and unnecessary re-rendering, use one of these Hooks:"
        },
        {
          "type": "list",
          "items": [
            "useMemolets you cache the result of an expensive calculation.",
            "useCallbacklets you cache a function definition before passing it down to an optimized component."
          ]
        },
        {
          "type": "code",
          "code": "functionTodoList({todos,tab,theme}){constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);// ...}"
        },
        {
          "type": "p",
          "text": "Sometimes, you can’t skip re-rendering because the screen actually needs to update. In that case, you can improve performance by separating blocking updates that must be synchronous (like typing into an input) from non-blocking updates which don’t need to block the user interface (like updating a chart). To prioritize rendering, use one of these Hooks:"
        },
        {
          "type": "list",
          "items": [
            "useTransitionlets you mark a state transition as non-blocking and allow other updates to interrupt it.",
            "useDeferredValuelets you defer updating a non-critical part of the UI and let other parts update first."
          ]
        },
        {
          "type": "p",
          "text": "These Hooks are mostly useful to library authors and aren’t commonly used in the application code."
        },
        {
          "type": "list",
          "items": [
            "useDebugValuelets you customize the label React DevTools displays for your custom Hook.",
            "useIdlets a component associate a unique ID with itself. Typically used with accessibility APIs.",
            "useSyncExternalStorelets a component subscribe to an external store."
          ]
        },
        {
          "type": "list",
          "items": ["useActionStateallows you to manage state of actions."]
        },
        {
          "type": "p",
          "text": "You can alsodefine your own custom Hooksas JavaScript functions."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/isValidElement",
      "title": "isValidElement – React",
      "content": [
        {
          "type": "p",
          "text": "isValidElementchecks whether a value is a React element."
        },
        {
          "type": "code",
          "code": "constisElement=isValidElement(value)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceisValidElement(value)",
            "isValidElement(value)",
            "UsageChecking if something is a React element",
            "Checking if something is a React element"
          ]
        },
        {
          "type": "p",
          "text": "CallisValidElement(value)to check whethervalueis a React element."
        },
        {
          "type": "code",
          "code": "import{isValidElement,createElement}from'react';// ✅ React elementsconsole.log(isValidElement(<p/>));// trueconsole.log(isValidElement(createElement('p')));// true// ❌ Not React elementsconsole.log(isValidElement(25));// falseconsole.log(isValidElement('Hello'));// falseconsole.log(isValidElement({age:42}));// false"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "value: Thevalueyou want to check. It can be any a value of any type."
          ]
        },
        {
          "type": "p",
          "text": "isValidElementreturnstrueif thevalueis a React element. Otherwise, it returnsfalse."
        },
        {
          "type": "list",
          "items": [
            "OnlyJSX tagsand objects returned bycreateElementare considered to be React elements.For example, even though a number like42is a valid Reactnode(and can be returned from a component), it is not a valid React element. Arrays and portals created withcreatePortalare alsonotconsidered to be React elements."
          ]
        },
        {
          "type": "p",
          "text": "CallisValidElementto check if some value is aReact element. React elements are:"
        },
        {
          "type": "list",
          "items": [
            "Values produced by writing aJSX tag",
            "Values produced by callingcreateElement"
          ]
        },
        {
          "type": "p",
          "text": "For React elements,isValidElementreturnstrue:"
        },
        {
          "type": "code",
          "code": "import{isValidElement,createElement}from'react';// ✅ JSX tags are React elementsconsole.log(isValidElement(<p/>));// trueconsole.log(isValidElement(<MyComponent/>));// true// ✅ Values returned by createElement are React elementsconsole.log(isValidElement(createElement('p')));// trueconsole.log(isValidElement(createElement(MyComponent)));// true"
        },
        {
          "type": "p",
          "text": "Any other values, such as strings, numbers, or arbitrary objects and arrays, are not React elements. For them,isValidElementreturnsfalse:"
        },
        {
          "type": "code",
          "code": "// ❌ These are *not* React elementsconsole.log(isValidElement(null));// falseconsole.log(isValidElement(25));// falseconsole.log(isValidElement('Hello'));// falseconsole.log(isValidElement({age:42}));// falseconsole.log(isValidElement([<div/>,<div/>]));// falseconsole.log(isValidElement(MyComponent));// false"
        },
        {
          "type": "p",
          "text": "It is very uncommon to needisValidElement. It’s mostly useful if you’re calling another API thatonlyaccepts elements (likecloneElementdoes) and you want to avoid an error when your argument is not a React element. Unless you have some very specific reason to add anisValidElementcheck, you probably don’t need it."
        },
        {
          "type": "p",
          "text": "When you write a component, you can return any kind ofReact nodefrom it:"
        },
        {
          "type": "code",
          "code": "functionMyComponent(){// ... you can return any React node ...}"
        },
        {
          "type": "p",
          "text": "A React node can be:"
        },
        {
          "type": "list",
          "items": [
            "A React element created like<div />orcreateElement('div')",
            "A portal created withcreatePortal",
            "A string",
            "A number",
            "true,false,null, orundefined(which are not displayed)",
            "An array of other React nodes"
          ]
        },
        {
          "type": "p",
          "text": "NoteisValidElementchecks whether the argument is aReact element,not whether it’s a React node.For example,42is not a valid React element. However, it is a perfectly valid React node:"
        },
        {
          "type": "code",
          "code": "functionMyComponent(){return42;// It's ok to return a number from component}"
        },
        {
          "type": "p",
          "text": "This is why you shouldn’t useisValidElementas a way to check whether something can be rendered."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/lazy",
      "title": "lazy – React",
      "content": [
        {
          "type": "p",
          "text": "lazylets you defer loading component’s code until it is rendered for the first time."
        },
        {
          "type": "code",
          "code": "constSomeComponent=lazy(load)"
        },
        {
          "type": "list",
          "items": [
            "Referencelazy(load)loadfunction",
            "lazy(load)",
            "loadfunction",
            "UsageLazy-loading components with Suspense",
            "Lazy-loading components with Suspense",
            "TroubleshootingMylazycomponent’s state gets reset unexpectedly",
            "Mylazycomponent’s state gets reset unexpectedly"
          ]
        },
        {
          "type": "p",
          "text": "Calllazyoutside your components to declare a lazy-loaded React component:"
        },
        {
          "type": "code",
          "code": "import{lazy}from'react';constMarkdownPreview=lazy(()=>import('./MarkdownPreview.js'));"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "load: A function that returns aPromiseor anotherthenable(a Promise-like object with athenmethod). React will not callloaduntil the first time you attempt to render the returned component. After React first callsload, it will wait for it to resolve, and then render the resolved value’s.defaultas a React component. Both the returned Promise and the Promise’s resolved value will be cached, so React will not callloadmore than once. If the Promise rejects, React willthrowthe rejection reason for the nearest Error Boundary to handle."
          ]
        },
        {
          "type": "p",
          "text": "lazyreturns a React component you can render in your tree. While the code for the lazy component is still loading, attempting to render it willsuspend.Use<Suspense>to display a loading indicator while it’s loading."
        },
        {
          "type": "p",
          "text": "loadreceives no parameters."
        },
        {
          "type": "p",
          "text": "You need to return aPromiseor some otherthenable(a Promise-like object with athenmethod). It needs to eventually resolve to an object whose.defaultproperty is a valid React component type, such as a function,memo, or aforwardRefcomponent."
        },
        {
          "type": "p",
          "text": "Usually, you import components with the staticimportdeclaration:"
        },
        {
          "type": "code",
          "code": "importMarkdownPreviewfrom'./MarkdownPreview.js';"
        },
        {
          "type": "p",
          "text": "To defer loading this component’s code until it’s rendered for the first time, replace this import with:"
        },
        {
          "type": "code",
          "code": "import{lazy}from'react';constMarkdownPreview=lazy(()=>import('./MarkdownPreview.js'));"
        },
        {
          "type": "p",
          "text": "This code relies ondynamicimport(),which might require support from your bundler or framework. Using this pattern requires that the lazy component you’re importing was exported as thedefaultexport. Now that your component’s code loads on demand, you also need to specify what should be displayed while it is loading. You can do this by wrapping the lazy component or any of its parents into a<Suspense>boundary:"
        },
        {
          "type": "code",
          "code": "<Suspensefallback={<Loading/>}><h2>Preview</h2><MarkdownPreview/></Suspense>"
        },
        {
          "type": "p",
          "text": "In this example, the code forMarkdownPreviewwon’t be loaded until you attempt to render it. IfMarkdownPreviewhasn’t loaded yet,Loadingwill be shown in its place. Try ticking the checkbox:"
        },
        {
          "type": "code",
          "code": "import{useState,Suspense,lazy}from'react';importLoadingfrom'./Loading.js';constMarkdownPreview=lazy(()=>delayForDemo(import('./MarkdownPreview.js')));exportdefaultfunctionMarkdownEditor(){const[showPreview,setShowPreview]=useState(false);const[markdown,setMarkdown]=useState('Hello, **world**!');return(<><textareavalue={markdown}onChange={e=>setMarkdown(e.target.value)}/><label><inputtype=\"checkbox\"checked={showPreview}onChange={e=>setShowPreview(e.target.checked)}/>Show preview</label><hr/>{showPreview&&(<Suspensefallback={<Loading/>}><h2>Preview</h2><MarkdownPreviewmarkdown={markdown}/></Suspense>)}</>);}// Add a fixed delay so you can see the loading statefunctiondelayForDemo(promise){returnnewPromise(resolve=>{setTimeout(resolve,2000);}).then(()=>promise);}"
        },
        {
          "type": "p",
          "text": "This demo loads with an artificial delay. The next time you untick and tick the checkbox,Previewwill be cached, so there will be no loading state. To see the loading state again, click “Reset” on the sandbox. Learn more about managing loading states with Suspense."
        },
        {
          "type": "p",
          "text": "Do not declarelazycomponentsinsideother components:"
        },
        {
          "type": "code",
          "code": "import{lazy}from'react';functionEditor(){// 🔴 Bad: This will cause all state to be reset on re-rendersconstMarkdownPreview=lazy(()=>import('./MarkdownPreview.js'));// ...}"
        },
        {
          "type": "p",
          "text": "Instead, always declare them at the top level of your module:"
        },
        {
          "type": "code",
          "code": "import{lazy}from'react';// ✅ Good: Declare lazy components outside of your componentsconstMarkdownPreview=lazy(()=>import('./MarkdownPreview.js'));functionEditor(){// ...}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/legacy",
      "title": "Legacy React APIs – React",
      "content": [
        {
          "type": "p",
          "text": "These APIs are exported from thereactpackage, but they are not recommended for use in newly written code. See the linked individual API pages for the suggested alternatives."
        },
        {
          "type": "list",
          "items": [
            "Childrenlets you manipulate and transform the JSX received as thechildrenprop.See alternatives.",
            "cloneElementlets you create a React element using another element as a starting point.See alternatives.",
            "Componentlets you define a React component as a JavaScript class.See alternatives.",
            "createElementlets you create a React element. Typically, you’ll use JSX instead.",
            "createRefcreates a ref object which can contain arbitrary value.See alternatives.",
            "forwardReflets your component expose a DOM node to parent component with aref.",
            "isValidElementchecks whether a value is a React element. Typically used withcloneElement.",
            "PureComponentis similar toComponent,but it skip re-renders with same props.See alternatives."
          ]
        },
        {
          "type": "p",
          "text": "These APIs were removed in React 19:"
        },
        {
          "type": "list",
          "items": [
            "createFactory: use JSX instead.",
            "Class Components:static contextTypes: usestatic contextTypeinstead.",
            "Class Components:static childContextTypes: usestatic contextTypeinstead.",
            "Class Components:static getChildContext: useContext.Providerinstead.",
            "Class Components:static propTypes: use a type system likeTypeScriptinstead.",
            "Class Components:this.refs: usecreateRefinstead."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/memo",
      "title": "memo – React",
      "content": [
        {
          "type": "p",
          "text": "memolets you skip re-rendering a component when its props are unchanged."
        },
        {
          "type": "code",
          "code": "constMemoizedComponent=memo(SomeComponent,arePropsEqual?)"
        },
        {
          "type": "list",
          "items": [
            "Referencememo(Component, arePropsEqual?)",
            "memo(Component, arePropsEqual?)",
            "UsageSkipping re-rendering when props are unchangedUpdating a memoized component using stateUpdating a memoized component using a contextMinimizing props changesSpecifying a custom comparison function",
            "Skipping re-rendering when props are unchanged",
            "Updating a memoized component using state",
            "Updating a memoized component using a context",
            "Minimizing props changes",
            "Specifying a custom comparison function",
            "TroubleshootingMy component re-renders when a prop is an object, array, or function",
            "My component re-renders when a prop is an object, array, or function"
          ]
        },
        {
          "type": "p",
          "text": "Wrap a component inmemoto get amemoizedversion of that component. This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed. But React may still re-render it: memoization is a performance optimization, not a guarantee."
        },
        {
          "type": "code",
          "code": "import{memo}from'react';constSomeComponent=memo(functionSomeComponent(props){// ...});"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "Component: The component that you want to memoize. Thememodoes not modify this component, but returns a new, memoized component instead. Any valid React component, including functions andforwardRefcomponents, is accepted.",
            "optionalarePropsEqual: A function that accepts two arguments: the component’s previous props, and its new props. It should returntrueif the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should returnfalse. Usually, you will not specify this function. By default, React will compare each prop withObject.is."
          ]
        },
        {
          "type": "p",
          "text": "memoreturns a new React component. It behaves the same as the component provided tomemoexcept that React will not always re-render it when its parent is being re-rendered unless its props have changed."
        },
        {
          "type": "p",
          "text": "React normally re-renders a component whenever its parent re-renders. Withmemo, you can create a component that React will not re-render when its parent re-renders so long as its new props are the same as the old props. Such a component is said to bememoized. To memoize a component, wrap it inmemoand use the value that it returns in place of your original component:"
        },
        {
          "type": "code",
          "code": "constGreeting=memo(functionGreeting({name}){return<h1>Hello,{name}!</h1>;});exportdefaultGreeting;"
        },
        {
          "type": "p",
          "text": "A React component should always havepure rendering logic.This means that it must return the same output if its props, state, and context haven’t changed. By usingmemo, you are telling React that your component complies with this requirement, so React doesn’t need to re-render as long as its props haven’t changed. Even withmemo, your component will re-render if its own state changes or if a context that it’s using changes. In this example, notice that theGreetingcomponent re-renders whenevernameis changed (because that’s one of its props), but not whenaddressis changed (because it’s not passed toGreetingas a prop):"
        },
        {
          "type": "code",
          "code": "import{memo,useState}from'react';exportdefaultfunctionMyApp(){const[name,setName]=useState('');const[address,setAddress]=useState('');return(<><label>Name{': '}<inputvalue={name}onChange={e=>setName(e.target.value)}/></label><label>Address{': '}<inputvalue={address}onChange={e=>setAddress(e.target.value)}/></label><Greetingname={name}/></>);}constGreeting=memo(functionGreeting({name}){console.log(\"Greeting was rendered at\",newDate().toLocaleTimeString());return<h3>Hello{name&&', '}{name}!</h3>;});"
        },
        {
          "type": "p",
          "text": "You should only rely onmemoas a performance optimization.If your code doesn’t work without it, find the underlying problem and fix it first. Then you may addmemoto improve performance."
        },
        {
          "type": "p",
          "text": "If your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful. Optimizing withmemois only valuable when your component re-renders often with the same exact props, and its re-rendering logic is expensive. If there is no perceptible lag when your component re-renders,memois unnecessary. Keep in mind thatmemois completely useless if the props passed to your component arealways different,such as if you pass an object or a plain function defined during rendering. This is why you will often needuseMemoanduseCallbacktogether withmemo. There is no benefit to wrapping a component inmemoin other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside of this approach is that code becomes less readable. Also, not all memoization is effective: a single value that’s “always new” is enough to break memoization for an entire component. In practice, you can make a lot of memoization unnecessary by following a few principles:"
        },
        {
          "type": "list",
          "items": [
            "When a component visually wraps other components, let itaccept JSX as children.This way, when the wrapper component updates its own state, React knows that its children don’t need to re-render.",
            "Prefer local state and don’tlift state upany further than necessary. For example, don’t keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.",
            "Keep yourrendering logic pure.If re-rendering a component causes a problem or produces some noticeable visual artifact, it’s a bug in your component! Fix the bug instead of adding memoization.",
            "Avoidunnecessary Effects that update state.Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.",
            "Try toremove unnecessary dependencies from your Effects.For example, instead of memoization, it’s often simpler to move some object or a function inside an Effect or outside the component."
          ]
        },
        {
          "type": "p",
          "text": "If a specific interaction still feels laggy,use the React Developer Tools profilerto see which components would benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it’s good to follow them in any case. In the long term, we’re researchingdoing granular memoization automaticallyto solve this once and for all."
        },
        {
          "type": "p",
          "text": "Even when a component is memoized, it will still re-render when its own state changes. Memoization only has to do with props that are passed to the component from its parent."
        },
        {
          "type": "code",
          "code": "import{memo,useState}from'react';exportdefaultfunctionMyApp(){const[name,setName]=useState('');const[address,setAddress]=useState('');return(<><label>Name{': '}<inputvalue={name}onChange={e=>setName(e.target.value)}/></label><label>Address{': '}<inputvalue={address}onChange={e=>setAddress(e.target.value)}/></label><Greetingname={name}/></>);}constGreeting=memo(functionGreeting({name}){console.log('Greeting was rendered at',newDate().toLocaleTimeString());const[greeting,setGreeting]=useState('Hello');return(<><h3>{greeting}{name&&', '}{name}!</h3><GreetingSelectorvalue={greeting}onChange={setGreeting}/></>);});functionGreetingSelector({value,onChange}){return(<><label><inputtype=\"radio\"checked={value==='Hello'}onChange={e=>onChange('Hello')}/>Regular greeting</label><label><inputtype=\"radio\"checked={value==='Hello and welcome'}onChange={e=>onChange('Hello and welcome')}/>Enthusiastic greeting</label></>);}"
        },
        {
          "type": "p",
          "text": "If you set a state variable to its current value, React will skip re-rendering your component even withoutmemo. You may still see your component function being called an extra time, but the result will be discarded."
        },
        {
          "type": "p",
          "text": "Even when a component is memoized, it will still re-render when a context that it’s using changes. Memoization only has to do with props that are passed to the component from its parent."
        },
        {
          "type": "code",
          "code": "import{createContext,memo,useContext,useState}from'react';constThemeContext=createContext(null);exportdefaultfunctionMyApp(){const[theme,setTheme]=useState('dark');functionhandleClick(){setTheme(theme==='dark'?'light':'dark');}return(<ThemeContext.Providervalue={theme}><buttononClick={handleClick}>Switch theme</button><Greetingname=\"Taylor\"/></ThemeContext.Provider>);}constGreeting=memo(functionGreeting({name}){console.log(\"Greeting was rendered at\",newDate().toLocaleTimeString());consttheme=useContext(ThemeContext);return(<h3className={theme}>Hello,{name}!</h3>);});"
        },
        {
          "type": "p",
          "text": "To make your component re-render only when apartof some context changes, split your component in two. Read what you need from the context in the outer component, and pass it down to a memoized child as a prop."
        },
        {
          "type": "p",
          "text": "When you usememo, your component re-renders whenever any prop is notshallowly equalto what it was previously. This means that React compares every prop in your component with its previous value using theObject.iscomparison. Note thatObject.is(3, 3)istrue, butObject.is({}, {})isfalse. To get the most out ofmemo, minimize the times that the props change. For example, if the prop is an object, prevent the parent component from re-creating that object every time by usinguseMemo:"
        },
        {
          "type": "code",
          "code": "functionPage(){const[name,setName]=useState('Taylor');const[age,setAge]=useState(42);constperson=useMemo(()=>({name,age}),[name,age]);return<Profileperson={person}/>;}constProfile=memo(functionProfile({person}){// ...});"
        },
        {
          "type": "p",
          "text": "A better way to minimize props changes is to make sure the component accepts the minimum necessary information in its props. For example, it could accept individual values instead of a whole object:"
        },
        {
          "type": "code",
          "code": "functionPage(){const[name,setName]=useState('Taylor');const[age,setAge]=useState(42);return<Profilename={name}age={age}/>;}constProfile=memo(functionProfile({name,age}){// ...});"
        },
        {
          "type": "p",
          "text": "Even individual values can sometimes be projected to ones that change less frequently. For example, here a component accepts a boolean indicating the presence of a value rather than the value itself:"
        },
        {
          "type": "code",
          "code": "functionGroupsLanding({person}){consthasGroups=person.groups!==null;return<CallToActionhasGroups={hasGroups}/>;}constCallToAction=memo(functionCallToAction({hasGroups}){// ...});"
        },
        {
          "type": "p",
          "text": "When you need to pass a function to memoized component, either declare it outside your component so that it never changes, oruseCallbackto cache its definition between re-renders."
        },
        {
          "type": "p",
          "text": "In rare cases it may be infeasible to minimize the props changes of a memoized component. In that case, you can provide a custom comparison function, which React will use to compare the old and new props instead of using shallow equality. This function is passed as a second argument tomemo. It should returntrueonly if the new props would result in the same output as the old props; otherwise it should returnfalse."
        },
        {
          "type": "code",
          "code": "constChart=memo(functionChart({dataPoints}){// ...},arePropsEqual);functionarePropsEqual(oldProps,newProps){return(oldProps.dataPoints.length===newProps.dataPoints.length&&oldProps.dataPoints.every((oldPoint,index)=>{constnewPoint=newProps.dataPoints[index];returnoldPoint.x===newPoint.x&&oldPoint.y===newPoint.y;}));}"
        },
        {
          "type": "p",
          "text": "If you do this, use the Performance panel in your browser developer tools to make sure that your comparison function is actually faster than re-rendering the component. You might be surprised. When you do performance measurements, make sure that React is running in the production mode."
        },
        {
          "type": "p",
          "text": "If you provide a customarePropsEqualimplementation,you must compare every prop, including functions.Functions oftenclose overthe props and state of parent components. If you returntruewhenoldProps.onClick !== newProps.onClick, your component will keep “seeing” the props and state from a previous render inside itsonClickhandler, leading to very confusing bugs. Avoid doing deep equality checks insidearePropsEqualunless you are 100% sure that the data structure you’re working with has a known limited depth.Deep equality checks can become incredibly slowand can freeze your app for many seconds if someone changes the data structure later."
        },
        {
          "type": "p",
          "text": "React compares old and new props by shallow equality: that is, it considers whether each new prop is reference-equal to the old prop. If you create a new object or array each time the parent is re-rendered, even if the individual elements are each the same, React will still consider it to be changed. Similarly, if you create a new function when rendering the parent component, React will consider it to have changed even if the function has the same definition. To avoid this,simplify props or memoize props in the parent component."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/startTransition",
      "title": "startTransition – React",
      "content": [
        {
          "type": "p",
          "text": "startTransitionlets you render a part of the UI in the background."
        },
        {
          "type": "code",
          "code": "startTransition(action)"
        },
        {
          "type": "list",
          "items": [
            "ReferencestartTransition(action)",
            "startTransition(action)",
            "UsageMarking a state update as a non-blocking Transition",
            "Marking a state update as a non-blocking Transition"
          ]
        },
        {
          "type": "p",
          "text": "ThestartTransitionfunction lets you mark a state update as a Transition."
        },
        {
          "type": "code",
          "code": "import{startTransition}from'react';functionTabContainer(){const[tab,setTab]=useState('about');functionselectTab(nextTab){startTransition(()=>{setTab(nextTab);});}// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "action: A function that updates some state by calling one or moresetfunctions. React callsactionimmediately with no parameters and marks all state updates scheduled synchronously during theactionfunction call as Transitions. Any async calls awaited in theactionwill be included in the transition, but currently require wrapping anysetfunctions after theawaitin an additionalstartTransition(seeTroubleshooting). State updates marked as Transitions will benon-blockingandwill not display unwanted loading indicators.."
          ]
        },
        {
          "type": "p",
          "text": "startTransitiondoes not return anything."
        },
        {
          "type": "list",
          "items": [
            "startTransitiondoes not provide a way to track whether a Transition is pending. To show a pending indicator while the Transition is ongoing, you needuseTransitioninstead.",
            "You can wrap an update into a Transition only if you have access to thesetfunction of that state. If you want to start a Transition in response to some prop or a custom Hook return value, tryuseDeferredValueinstead.",
            "The function you pass to the ofstartTransitionis called immediately, marking all state updates that happen while it executes as Transitions. If you try to perform state updates in asetTimeout, for example, they won’t be marked as Transitions.",
            "You must wrap any state updates after any async requests in anotherstartTransitionto mark them as Transitions. This is a known limitation that we will fix in the future (seeTroubleshooting).",
            "A state update marked as a Transition will be interrupted by other state updates. For example, if you update a chart component inside a Transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input state update.",
            "Transition updates can’t be used to control text inputs.",
            "If there are multiple ongoing Transitions, React currently batches them together. This is a limitation that may be removed in a future release."
          ]
        },
        {
          "type": "p",
          "text": "You can mark a state update as aTransitionby wrapping it in astartTransitioncall:"
        },
        {
          "type": "code",
          "code": "import{startTransition}from'react';functionTabContainer(){const[tab,setTab]=useState('about');functionselectTab(nextTab){startTransition(()=>{setTab(nextTab);});}// ...}"
        },
        {
          "type": "p",
          "text": "Transitions let you keep the user interface updates responsive even on slow devices. With a Transition, your UI stays responsive in the middle of a re-render. For example, if the user clicks a tab but then change their mind and click another tab, they can do that without waiting for the first re-render to finish."
        },
        {
          "type": "p",
          "text": "startTransitionis very similar touseTransition, except that it does not provide theisPendingflag to track whether a Transition is ongoing. You can callstartTransitionwhenuseTransitionis not available. For example,startTransitionworks outside components, such as from a data library. Learn about Transitions and see examples on theuseTransitionpage."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/use",
      "title": "use – React",
      "content": [
        {
          "type": "p",
          "text": "useis a React API that lets you read the value of a resource like aPromiseorcontext."
        },
        {
          "type": "code",
          "code": "constvalue=use(resource);"
        },
        {
          "type": "list",
          "items": [
            "Referenceuse(resource)",
            "use(resource)",
            "UsageReading context withuseStreaming data from the server to the clientDealing with rejected Promises",
            "Reading context withuse",
            "Streaming data from the server to the client",
            "Dealing with rejected Promises",
            "Troubleshooting“Suspense Exception: This is not a real error!”",
            "“Suspense Exception: This is not a real error!”"
          ]
        },
        {
          "type": "p",
          "text": "Callusein your component to read the value of a resource like aPromiseorcontext."
        },
        {
          "type": "code",
          "code": "import{use}from'react';functionMessageComponent({messagePromise}){constmessage=use(messagePromise);consttheme=use(ThemeContext);// ..."
        },
        {
          "type": "p",
          "text": "Unlike React Hooks,usecan be called within loops and conditional statements likeif. Like React Hooks, the function that callsusemust be a Component or Hook. When called with a Promise, theuseAPI integrates withSuspenseanderror boundaries. The component callingusesuspendswhile the Promise passed touseis pending. If the component that callsuseis wrapped in a Suspense boundary, the fallback will be displayed.  Once the Promise is resolved, the Suspense fallback is replaced by the rendered components using the data returned by theuseAPI. If the Promise passed touseis rejected, the fallback of the nearest Error Boundary will be displayed. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "resource: this is the source of the data you want to read a value from. A resource can be aPromiseor acontext."
          ]
        },
        {
          "type": "p",
          "text": "TheuseAPI returns the value that was read from the resource like the resolved value of aPromiseorcontext."
        },
        {
          "type": "list",
          "items": [
            "TheuseAPI must be called inside a Component or a Hook.",
            "When fetching data in aServer Component, preferasyncandawaitoveruse.asyncandawaitpick up rendering from the point whereawaitwas invoked, whereasusere-renders the component after the data is resolved.",
            "Prefer creating Promises inServer Componentsand passing them toClient Componentsover creating Promises in Client Components. Promises created in Client Components are recreated on every render. Promises passed from a Server Component to a Client Component are stable across re-renders.See this example."
          ]
        },
        {
          "type": "p",
          "text": "When acontextis passed touse, it works similarly touseContext. WhileuseContextmust be called at the top level of your component,usecan be called inside conditionals likeifand loops likefor.useis preferred overuseContextbecause it is more flexible."
        },
        {
          "type": "code",
          "code": "import{use}from'react';functionButton(){consttheme=use(ThemeContext);// ..."
        },
        {
          "type": "p",
          "text": "usereturns thecontext valuefor thecontextyou passed. To determine the context value, React searches the component tree and findsthe closest context provider abovefor that particular context. To pass context to aButton, wrap it or one of its parent components into the corresponding context provider."
        },
        {
          "type": "code",
          "code": "functionMyPage(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>);}functionForm(){// ... renders buttons inside ...}"
        },
        {
          "type": "p",
          "text": "It doesn’t matter how many layers of components there are between the provider and theButton. When aButtonanywhereinside ofFormcallsuse(ThemeContext), it will receive\"dark\"as the value. UnlikeuseContext,usecan be called in conditionals and loops likeif."
        },
        {
          "type": "code",
          "code": "functionHorizontalRule({show}){if(show){consttheme=use(ThemeContext);return<hrclassName={theme}/>;}returnfalse;}"
        },
        {
          "type": "p",
          "text": "useis called from inside aifstatement, allowing you to conditionally read values from a Context."
        },
        {
          "type": "p",
          "text": "LikeuseContext,use(context)always looks for the closest context providerabovethe component that calls it. It searches upwards anddoes notconsider context providers in the component from which you’re callinguse(context)."
        },
        {
          "type": "code",
          "code": "import{createContext,use}from'react';constThemeContext=createContext(null);exportdefaultfunctionMyApp(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>)}functionForm(){return(<Paneltitle=\"Welcome\"><Buttonshow={true}>Sign up</Button><Buttonshow={false}>Log in</Button></Panel>);}functionPanel({title,children}){consttheme=use(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{title}</h1>{children}</section>)}functionButton({show,children}){if(show){consttheme=use(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}>{children}</button>);}returnfalse}"
        },
        {
          "type": "p",
          "text": "Data can be streamed from the server to the client by passing a Promise as a prop from aServer Componentto aClient Component."
        },
        {
          "type": "code",
          "code": "import{fetchMessage}from'./lib.js';import{Message}from'./message.js';exportdefaultfunctionApp(){constmessagePromise=fetchMessage();return(<Suspensefallback={<p>waiting for message...</p>}><MessagemessagePromise={messagePromise}/></Suspense>);}"
        },
        {
          "type": "p",
          "text": "TheClient Componentthen takesthe Promise it received as a propand passes it to theuseAPI. This allows theClient Componentto read the value fromthe Promisethat was initially created by the Server Component."
        },
        {
          "type": "code",
          "code": "// message.js'use client';import{use}from'react';exportfunctionMessage({messagePromise}){constmessageContent=use(messagePromise);return<p>Here is the message:{messageContent}</p>;}"
        },
        {
          "type": "p",
          "text": "BecauseMessageis wrapped inSuspense, the fallback will be displayed until the Promise is resolved. When the Promise is resolved, the value will be read by theuseAPI and theMessagecomponent will replace the Suspense fallback."
        },
        {
          "type": "code",
          "code": "\"use client\";import{use,Suspense}from\"react\";functionMessage({messagePromise}){constmessageContent=use(messagePromise);return<p>Here is the message:{messageContent}</p>;}exportfunctionMessageContainer({messagePromise}){return(<Suspensefallback={<p>⌛Downloading message...</p>}><MessagemessagePromise={messagePromise}/></Suspense>);}"
        },
        {
          "type": "p",
          "text": "When passing a Promise from a Server Component to a Client Component, its resolved value must be serializable to pass between server and client. Data types like functions aren’t serializable and cannot be the resolved value of such a Promise."
        },
        {
          "type": "p",
          "text": "A Promise can be passed from a Server Component to a Client Component and resolved in the Client Component with theuseAPI. You can also resolve the Promise in a Server Component withawaitand pass the required data to the Client Component as a prop."
        },
        {
          "type": "code",
          "code": "exportdefaultasyncfunctionApp(){constmessageContent=awaitfetchMessage();return<MessagemessageContent={messageContent}/>}"
        },
        {
          "type": "p",
          "text": "But usingawaitin aServer Componentwill block its rendering until theawaitstatement is finished. Passing a Promise from a Server Component to a Client Component prevents the Promise from blocking the rendering of the Server Component."
        },
        {
          "type": "p",
          "text": "In some cases a Promise passed tousecould be rejected. You can handle rejected Promises by either:"
        },
        {
          "type": "list",
          "items": [
            "Displaying an error to users with an error boundary.",
            "Providing an alternative value withPromise.catch"
          ]
        },
        {
          "type": "p",
          "text": "usecannot be called in a try-catch block. Instead of a try-catch blockwrap your component in an Error Boundary, orprovide an alternative value to use with the Promise’s.catchmethod."
        },
        {
          "type": "p",
          "text": "If you’d like to display an error to your users when a Promise is rejected, you can use anerror boundary. To use an error boundary, wrap the component where you are calling theuseAPI in an error boundary. If the Promise passed touseis rejected the fallback for the error boundary will be displayed."
        },
        {
          "type": "code",
          "code": "\"use client\";import{use,Suspense}from\"react\";import{ErrorBoundary}from\"react-error-boundary\";exportfunctionMessageContainer({messagePromise}){return(<ErrorBoundaryfallback={<p>⚠️Something went wrong</p>}><Suspensefallback={<p>⌛Downloading message...</p>}><MessagemessagePromise={messagePromise}/></Suspense></ErrorBoundary>);}functionMessage({messagePromise}){constcontent=use(messagePromise);return<p>Here is the message:{content}</p>;}"
        },
        {
          "type": "p",
          "text": "If you’d like to provide an alternative value when the Promise passed touseis rejected you can use the Promise’scatchmethod."
        },
        {
          "type": "code",
          "code": "import{Message}from'./message.js';exportdefaultfunctionApp(){constmessagePromise=newPromise((resolve,reject)=>{reject();}).catch(()=>{return\"no new message found.\";});return(<Suspensefallback={<p>waiting for message...</p>}><MessagemessagePromise={messagePromise}/></Suspense>);}"
        },
        {
          "type": "p",
          "text": "To use the Promise’scatchmethod, callcatchon the Promise object.catchtakes a single argument: a function that takes an error message as an argument. Whatever isreturnedby the function passed tocatchwill be used as the resolved value of the Promise."
        },
        {
          "type": "p",
          "text": "You are either callinguseoutside of a React Component or Hook function, or callingusein a try–catch block. If you are callinguseinside a try–catch block, wrap your component in an error boundary, or call the Promise’scatchto catch the error and resolve the Promise with another value.See these examples. If you are callinguseoutside a React Component or Hook function, move theusecall to a React Component or Hook function."
        },
        {
          "type": "code",
          "code": "functionMessageComponent({messagePromise}){functiondownload(){// ❌ the function calling `use` is not a Component or Hookconstmessage=use(messagePromise);// ..."
        },
        {
          "type": "p",
          "text": "Instead, calluseoutside any component closures, where the function that callsuseis a Component or Hook."
        },
        {
          "type": "code",
          "code": "functionMessageComponent({messagePromise}){// ✅ `use` is being called from a component.constmessage=use(messagePromise);// ..."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useActionState",
      "title": "useActionState – React",
      "content": [
        {
          "type": "p",
          "text": "useActionStateis a Hook that allows you to update state based on the result of a form action."
        },
        {
          "type": "code",
          "code": "const[state,formAction,isPending]=useActionState(fn,initialState,permalink?);"
        },
        {
          "type": "p",
          "text": "In earlier React Canary versions, this API was part of React DOM and calleduseFormState."
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseActionState(action, initialState, permalink?)",
            "useActionState(action, initialState, permalink?)",
            "UsageUsing information returned by a form action",
            "Using information returned by a form action",
            "TroubleshootingMy action can no longer read the submitted form data",
            "My action can no longer read the submitted form data"
          ]
        },
        {
          "type": "p",
          "text": "CalluseActionStateat the top level of your component to create component state that is updatedwhen a form action is invoked. You passuseActionStatean existing form action function as well as an initial state, and it returns a new action that you use in your form, along with the latest form state and whether the Action is still pending. The latest form state is also passed to the function that you provided."
        },
        {
          "type": "code",
          "code": "import{useActionState}from\"react\";asyncfunctionincrement(previousState,formData){returnpreviousState+1;}functionStatefulForm({}){const[state,formAction]=useActionState(increment,0);return(<form>{state}<buttonformAction={formAction}>Increment</button></form>)}"
        },
        {
          "type": "p",
          "text": "The form state is the value returned by the action when the form was last submitted. If the form has not yet been submitted, it is the initial state that you pass. If used with a Server Function,useActionStateallows the server’s response from submitting the form to be shown even before hydration has completed. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "fn: The function to be called when the form is submitted or button pressed. When the function is called, it will receive the previous state of the form (initially theinitialStatethat you pass, subsequently its previous return value) as its initial argument, followed by the arguments that a form action normally receives.",
            "initialState: The value you want the state to be initially. It can be any serializable value. This argument is ignored after the action is first invoked.",
            "optionalpermalink: A string containing the unique page URL that this form modifies. For use on pages with dynamic content (eg: feeds) in conjunction with progressive enhancement: iffnis aserver functionand the form is submitted before the JavaScript bundle loads, the browser will navigate to the specified permalink URL, rather than the current page’s URL. Ensure that the same form component is rendered on the destination page (including the same actionfnandpermalink) so that React knows how to pass the state through. Once the form has been hydrated, this parameter has no effect."
          ]
        },
        {
          "type": "p",
          "text": "useActionStatereturns an array with the following values:"
        },
        {
          "type": "list",
          "items": [
            "The current state. During the first render, it will match theinitialStateyou have passed. After the action is invoked, it will match the value returned by the action.",
            "A new action that you can pass as theactionprop to yourformcomponent orformActionprop to anybuttoncomponent within the form.",
            "TheisPendingflag that tells you whether there is a pending Transition."
          ]
        },
        {
          "type": "list",
          "items": [
            "When used with a framework that supports React Server Components,useActionStatelets you make forms interactive before JavaScript has executed on the client. When used without Server Components, it is equivalent to component local state.",
            "The function passed touseActionStatereceives an extra argument, the previous or initial state, as its first argument. This makes its signature different than if it were used directly as a form action without usinguseActionState."
          ]
        },
        {
          "type": "p",
          "text": "CalluseActionStateat the top level of your component to access the return value of an action from the last time a form was submitted."
        },
        {
          "type": "code",
          "code": "import{useActionState}from'react';import{action}from'./actions.js';functionMyComponent(){const[state,formAction]=useActionState(action,null);// ...return(<formaction={formAction}>{/* ... */}</form>);}"
        },
        {
          "type": "p",
          "text": "useActionStatereturns an array with the following items:"
        },
        {
          "type": "list",
          "items": [
            "Thecurrent stateof the form, which is initially set to theinitial stateyou provided, and after the form is submitted is set to the return value of theactionyou provided.",
            "Anew actionthat you pass to<form>as itsactionprop.",
            "Apending statethat you can utilise whilst your action is processing."
          ]
        },
        {
          "type": "p",
          "text": "When the form is submitted, theactionfunction that you provided will be called. Its return value will become the newcurrent stateof the form. Theactionthat you provide will also receive a new first argument, namely thecurrent stateof the form. The first time the form is submitted, this will be theinitial stateyou provided, while with subsequent submissions, it will be the return value from the last time the action was called. The rest of the arguments are the same as ifuseActionStatehad not been used."
        },
        {
          "type": "code",
          "code": "functionaction(currentState,formData){// ...return'next state';}"
        },
        {
          "type": "p",
          "text": "To display messages such as an error message or toast that’s returned by a Server Function, wrap the action in a call touseActionState."
        },
        {
          "type": "code",
          "code": "import{useActionState,useState}from\"react\";import{addToCart}from\"./actions.js\";functionAddToCartForm({itemID,itemTitle}){const[message,formAction,isPending]=useActionState(addToCart,null);return(<formaction={formAction}><h2>{itemTitle}</h2><inputtype=\"hidden\"name=\"itemID\"value={itemID}/><buttontype=\"submit\">Add to Cart</button>{isPending?\"Loading...\":message}</form>);}exportdefaultfunctionApp(){return(<><AddToCartFormitemID=\"1\"itemTitle=\"JavaScript: The Definitive Guide\"/><AddToCartFormitemID=\"2\"itemTitle=\"JavaScript: The Good Parts\"/></>)}"
        },
        {
          "type": "p",
          "text": "When you wrap an action withuseActionState, it gets an extra argumentas its first argument. The submitted form data is therefore itssecondargument instead of its first as it would usually be. The new first argument that gets added is the current state of the form."
        },
        {
          "type": "code",
          "code": "functionaction(currentState,formData){// ...}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useCallback",
      "title": "useCallback – React",
      "content": [
        {
          "type": "p",
          "text": "useCallbackis a React Hook that lets you cache a function definition between re-renders."
        },
        {
          "type": "code",
          "code": "constcachedFn=useCallback(fn,dependencies)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseCallback(fn, dependencies)",
            "useCallback(fn, dependencies)",
            "UsageSkipping re-rendering of componentsUpdating state from a memoized callbackPreventing an Effect from firing too oftenOptimizing a custom Hook",
            "Skipping re-rendering of components",
            "Updating state from a memoized callback",
            "Preventing an Effect from firing too often",
            "Optimizing a custom Hook",
            "TroubleshootingEvery time my component renders,useCallbackreturns a different functionI need to calluseCallbackfor each list item in a loop, but it’s not allowed",
            "Every time my component renders,useCallbackreturns a different function",
            "I need to calluseCallbackfor each list item in a loop, but it’s not allowed"
          ]
        },
        {
          "type": "p",
          "text": "CalluseCallbackat the top level of your component to cache a function definition between re-renders:"
        },
        {
          "type": "code",
          "code": "import{useCallback}from'react';exportdefaultfunctionProductPage({productId,referrer,theme}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId,referrer]);"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "fn: The function value that you want to cache. It can take any arguments and return any values. React will return (not call!) your function back to you during the initial render. On next renders, React will give you the same function again if thedependencieshave not changed since the last render. Otherwise, it will give you the function that you have passed during the current render, and store it in case it can be reused later. React will not call your function. The function is returned to you so you can decide when and whether to call it.",
            "dependencies: The list of all reactive values referenced inside of thefncode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison algorithm."
          ]
        },
        {
          "type": "p",
          "text": "On the initial render,useCallbackreturns thefnfunction you have passed. During subsequent renders, it will either return an already storedfnfunction from the last render (if the dependencies haven’t changed), or return thefnfunction you have passed during this render."
        },
        {
          "type": "list",
          "items": [
            "useCallbackis a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "Reactwill not throw away the cached function unless there is a specific reason to do that.For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should match your expectations if you rely onuseCallbackas a performance optimization. Otherwise, astate variableor arefmay be more appropriate."
          ]
        },
        {
          "type": "p",
          "text": "When you optimize rendering performance, you will sometimes need to cache the functions that you pass to child components. Let’s first look at the syntax for how to do this, and then see in which cases it’s useful. To cache a function between re-renders of your component, wrap its definition into theuseCallbackHook:"
        },
        {
          "type": "code",
          "code": "import{useCallback}from'react';functionProductPage({productId,referrer,theme}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId, referrer]);// ..."
        },
        {
          "type": "p",
          "text": "You need to pass two things touseCallback:"
        },
        {
          "type": "list",
          "items": [
            "A function definition that you want to cache between re-renders.",
            "Alist of dependenciesincluding every value within your component that’s used inside your function."
          ]
        },
        {
          "type": "p",
          "text": "On the initial render, thereturned functionyou’ll get fromuseCallbackwill be the function you passed. On the following renders, React will compare thedependencieswith the dependencies you passed during the previous render. If none of the dependencies have changed (compared withObject.is),useCallbackwill return the same function as before. Otherwise,useCallbackwill return the function you passed onthisrender. In other words,useCallbackcaches a function between re-renders until its dependencies change. Let’s walk through an example to see when this is useful. Say you’re passing ahandleSubmitfunction down from theProductPageto theShippingFormcomponent:"
        },
        {
          "type": "code",
          "code": "functionProductPage({productId,referrer,theme}){// ...return(<divclassName={theme}><ShippingFormonSubmit={handleSubmit}/></div>);"
        },
        {
          "type": "p",
          "text": "You’ve noticed that toggling thethemeprop freezes the app for a moment, but if you remove<ShippingForm />from your JSX, it feels fast. This tells you that it’s worth trying to optimize theShippingFormcomponent. By default, when a component re-renders, React re-renders all of its children recursively.This is why, whenProductPagere-renders with a differenttheme, theShippingFormcomponentalsore-renders. This is fine for components that don’t require much calculation to re-render. But if you verified a re-render is slow, you can tellShippingFormto skip re-rendering when its props are the same as on last render by wrapping it inmemo:"
        },
        {
          "type": "code",
          "code": "import{memo}from'react';constShippingForm=memo(functionShippingForm({onSubmit}){// ...});"
        },
        {
          "type": "p",
          "text": "With this change,ShippingFormwill skip re-rendering if all of its props are thesameas on the last render.This is when caching a function becomes important! Let’s say you definedhandleSubmitwithoutuseCallback:"
        },
        {
          "type": "code",
          "code": "functionProductPage({productId,referrer,theme}){// Every time the theme changes, this will be a different function...functionhandleSubmit(orderDetails){post('/product/'+productId+'/buy',{referrer,orderDetails,});}return(<divclassName={theme}>{/* ... so ShippingForm's props will never be the same, and it will re-render every time */}<ShippingFormonSubmit={handleSubmit}/></div>);}"
        },
        {
          "type": "p",
          "text": "In JavaScript, afunction () {}or() => {}always creates adifferentfunction,similar to how the{}object literal always creates a new object. Normally, this wouldn’t be a problem, but it means thatShippingFormprops will never be the same, and yourmemooptimization won’t work. This is whereuseCallbackcomes in handy:"
        },
        {
          "type": "code",
          "code": "functionProductPage({productId,referrer,theme}){// Tell React to cache your function between re-renders...consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId,referrer]);// ...so as long as these dependencies don't change...return(<divclassName={theme}>{/* ...ShippingForm will receive the same props and can skip re-rendering */}<ShippingFormonSubmit={handleSubmit}/></div>);}"
        },
        {
          "type": "p",
          "text": "By wrappinghandleSubmitinuseCallback, you ensure that it’s thesamefunction between the re-renders(until dependencies change). You don’thave towrap a function inuseCallbackunless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped inmemo,and this lets it skip re-rendering. There are other reasons you might needuseCallbackwhich are described further on this page."
        },
        {
          "type": "p",
          "text": "You should only rely onuseCallbackas a performance optimization.If your code doesn’t work without it, find the underlying problem and fix it first. Then you may adduseCallbackback."
        },
        {
          "type": "p",
          "text": "You will often seeuseMemoalongsideuseCallback. They are both useful when you’re trying to optimize a child component. They let youmemoize(or, in other words, cache) something you’re passing down:"
        },
        {
          "type": "code",
          "code": "import{useMemo,useCallback}from'react';functionProductPage({productId,referrer}){constproduct=useData('/product/'+productId);constrequirements=useMemo(()=>{// Calls your function and caches its resultreturncomputeRequirements(product);},[product]);consthandleSubmit=useCallback((orderDetails)=>{// Caches your function itselfpost('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId,referrer]);return(<divclassName={theme}><ShippingFormrequirements={requirements}onSubmit={handleSubmit}/></div>);}"
        },
        {
          "type": "p",
          "text": "The difference is inwhatthey’re letting you cache:"
        },
        {
          "type": "list",
          "items": [
            "useMemocaches theresultof calling your function.In this example, it caches the result of callingcomputeRequirements(product)so that it doesn’t change unlessproducthas changed. This lets you pass therequirementsobject down without unnecessarily re-renderingShippingForm. When necessary, React will call the function you’ve passed during rendering to calculate the result.",
            "useCallbackcachesthe function itself.UnlikeuseMemo, it does not call the function you provide. Instead, it caches the function you provided so thathandleSubmititselfdoesn’t change unlessproductIdorreferrerhas changed. This lets you pass thehandleSubmitfunction down without unnecessarily re-renderingShippingForm. Your code won’t run until the user submits the form."
          ]
        },
        {
          "type": "p",
          "text": "If you’re already familiar withuseMemo,you might find it helpful to think ofuseCallbackas this:"
        },
        {
          "type": "code",
          "code": "// Simplified implementation (inside React)functionuseCallback(fn,dependencies){returnuseMemo(()=>fn,dependencies);}"
        },
        {
          "type": "p",
          "text": "Read more about the difference betweenuseMemoanduseCallback."
        },
        {
          "type": "p",
          "text": "If your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful. Caching a function withuseCallbackis only valuable in a few cases:"
        },
        {
          "type": "list",
          "items": [
            "You pass it as a prop to a component wrapped inmemo.You want to skip re-rendering if the value hasn’t changed. Memoization lets your component re-render only if dependencies changed.",
            "The function you’re passing is later used as a dependency of some Hook. For example, another function wrapped inuseCallbackdepends on it, or you depend on this function fromuseEffect."
          ]
        },
        {
          "type": "p",
          "text": "There is no benefit to wrapping a function inuseCallbackin other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside is that code becomes less readable. Also, not all memoization is effective: a single value that’s “always new” is enough to break memoization for an entire component. Note thatuseCallbackdoes not preventcreatingthe function. You’re always creating a function (and that’s fine!), but React ignores it and gives you back a cached function if nothing changed. In practice, you can make a lot of memoization unnecessary by following a few principles:"
        },
        {
          "type": "list",
          "items": [
            "When a component visually wraps other components, let itaccept JSX as children.Then, if the wrapper component updates its own state, React knows that its children don’t need to re-render.",
            "Prefer local state and don’tlift state upany further than necessary. Don’t keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.",
            "Keep yourrendering logic pure.If re-rendering a component causes a problem or produces some noticeable visual artifact, it’s a bug in your component! Fix the bug instead of adding memoization.",
            "Avoidunnecessary Effects that update state.Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.",
            "Try toremove unnecessary dependencies from your Effects.For example, instead of memoization, it’s often simpler to move some object or a function inside an Effect or outside the component."
          ]
        },
        {
          "type": "p",
          "text": "If a specific interaction still feels laggy,use the React Developer Tools profilerto see which components benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it’s good to follow them in any case. In long term, we’re researchingdoing memoization automaticallyto solve this once and for all."
        },
        {
          "type": "p",
          "text": "In this example, theShippingFormcomponent isartificially slowed downso that you can see what happens when a React component you’re rendering is genuinely slow. Try incrementing the counter and toggling the theme. Incrementing the counter feels slow because it forces the slowed downShippingFormto re-render. That’s expected because the counter has changed, and so you need to reflect the user’s new choice on the screen. Next, try toggling the theme.Thanks touseCallbacktogether withmemo, it’s fast despite the artificial slowdown!ShippingFormskipped re-rendering because thehandleSubmitfunction has not changed. ThehandleSubmitfunction has not changed because bothproductIdandreferrer(youruseCallbackdependencies) haven’t changed since last render."
        },
        {
          "type": "code",
          "code": "import{useCallback}from'react';importShippingFormfrom'./ShippingForm.js';exportdefaultfunctionProductPage({productId,referrer,theme}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId,referrer]);return(<divclassName={theme}><ShippingFormonSubmit={handleSubmit}/></div>);}functionpost(url,data){// Imagine this sends a request...console.log('POST /'+url);console.log(data);}"
        },
        {
          "type": "p",
          "text": "Sometimes, you might need to update state based on previous state from a memoized callback. ThishandleAddTodofunction specifiestodosas a dependency because it computes the next todos from it:"
        },
        {
          "type": "code",
          "code": "functionTodoList(){const[todos,setTodos]=useState([]);consthandleAddTodo=useCallback((text)=>{constnewTodo={id:nextId++,text};setTodos([...todos,newTodo]);},[todos]);// ..."
        },
        {
          "type": "p",
          "text": "You’ll usually want memoized functions to have as few dependencies as possible. When you read some state only to calculate the next state, you can remove that dependency by passing anupdater functioninstead:"
        },
        {
          "type": "code",
          "code": "functionTodoList(){const[todos,setTodos]=useState([]);consthandleAddTodo=useCallback((text)=>{constnewTodo={id:nextId++,text};setTodos(todos=>[...todos,newTodo]);},[]);// ✅ No need for the todos dependency// ..."
        },
        {
          "type": "p",
          "text": "Here, instead of makingtodosa dependency and reading it inside, you pass an instruction abouthowto update the state (todos => [...todos, newTodo]) to React.Read more about updater functions."
        },
        {
          "type": "p",
          "text": "Sometimes, you might want to call a function from inside anEffect:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');functioncreateOptions(){return{serverUrl:'https://localhost:1234',roomId:roomId};}useEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();// ..."
        },
        {
          "type": "p",
          "text": "This creates a problem.Every reactive value must be declared as a dependency of your Effect.However, if you declarecreateOptionsas a dependency, it will cause your Effect to constantly reconnect to the chat room:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[createOptions]);// 🔴 Problem: This dependency changes on every render// ..."
        },
        {
          "type": "p",
          "text": "To solve this, you can wrap the function you need to call from an Effect intouseCallback:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');constcreateOptions=useCallback(()=>{return{serverUrl:'https://localhost:1234',roomId:roomId};},[roomId]);// ✅ Only changes when roomId changesuseEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[createOptions]);// ✅ Only changes when createOptions changes// ..."
        },
        {
          "type": "p",
          "text": "This ensures that thecreateOptionsfunction is the same between re-renders if theroomIdis the same.However, it’s even better to remove the need for a function dependency.Move your functioninsidethe Effect:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{functioncreateOptions(){// ✅ No need for useCallback or function dependencies!return{serverUrl:'https://localhost:1234',roomId:roomId};}constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// ✅ Only changes when roomId changes// ..."
        },
        {
          "type": "p",
          "text": "Now your code is simpler and doesn’t needuseCallback.Learn more about removing Effect dependencies."
        },
        {
          "type": "p",
          "text": "If you’re writing acustom Hook,it’s recommended to wrap any functions that it returns intouseCallback:"
        },
        {
          "type": "code",
          "code": "functionuseRouter(){const{dispatch}=useContext(RouterStateContext);constnavigate=useCallback((url)=>{dispatch({type:'navigate',url});},[dispatch]);constgoBack=useCallback(()=>{dispatch({type:'back'});},[dispatch]);return{navigate,goBack,};}"
        },
        {
          "type": "p",
          "text": "This ensures that the consumers of your Hook can optimize their own code when needed."
        },
        {
          "type": "p",
          "text": "Make sure you’ve specified the dependency array as a second argument! If you forget the dependency array,useCallbackwill return a new function every time:"
        },
        {
          "type": "code",
          "code": "functionProductPage({productId,referrer}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});});// 🔴 Returns a new function every time: no dependency array// ..."
        },
        {
          "type": "p",
          "text": "This is the corrected version passing the dependency array as a second argument:"
        },
        {
          "type": "code",
          "code": "functionProductPage({productId,referrer}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails,});},[productId,referrer]);// ✅ Does not return a new function unnecessarily// ..."
        },
        {
          "type": "p",
          "text": "If this doesn’t help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:"
        },
        {
          "type": "code",
          "code": "consthandleSubmit=useCallback((orderDetails)=>{// ..},[productId,referrer]);console.log([productId,referrer]);"
        },
        {
          "type": "p",
          "text": "You can then right-click on the arrays from different re-renders in the console and select “Store as a global variable” for both of them. Assuming the first one got saved astemp1and the second one got saved astemp2, you can then use the browser console to check whether each dependency in both arrays is the same:"
        },
        {
          "type": "code",
          "code": "Object.is(temp1[0],temp2[0]);// Is the first dependency the same between the arrays?Object.is(temp1[1],temp2[1]);// Is the second dependency the same between the arrays?Object.is(temp1[2],temp2[2]);// ... and so on for every dependency ..."
        },
        {
          "type": "p",
          "text": "When you find which dependency is breaking memoization, either find a way to remove it, ormemoize it as well."
        },
        {
          "type": "p",
          "text": "Suppose theChartcomponent is wrapped inmemo. You want to skip re-rendering everyChartin the list when theReportListcomponent re-renders. However, you can’t calluseCallbackin a loop:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){return(<article>{items.map(item=>{// 🔴 You can't call useCallback in a loop like this:consthandleClick=useCallback(()=>{sendReport(item)},[item]);return(<figurekey={item.id}><ChartonClick={handleClick}/></figure>);})}</article>);}"
        },
        {
          "type": "p",
          "text": "Instead, extract a component for an individual item, and putuseCallbackthere:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){return(<article>{items.map(item=><Reportkey={item.id}item={item}/>)}</article>);}functionReport({item}){// ✅ Call useCallback at the top level:consthandleClick=useCallback(()=>{sendReport(item)},[item]);return(<figure><ChartonClick={handleClick}/></figure>);}"
        },
        {
          "type": "p",
          "text": "Alternatively, you could removeuseCallbackin the last snippet and instead wrapReportitself inmemo.If theitemprop does not change,Reportwill skip re-rendering, soChartwill skip re-rendering too:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){// ...}constReport=memo(functionReport({item}){functionhandleClick(){sendReport(item);}return(<figure><ChartonClick={handleClick}/></figure>);});"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useContext",
      "title": "useContext – React",
      "content": [
        {
          "type": "p",
          "text": "useContextis a React Hook that lets you read and subscribe tocontextfrom your component."
        },
        {
          "type": "code",
          "code": "constvalue=useContext(SomeContext)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseContext(SomeContext)",
            "useContext(SomeContext)",
            "UsagePassing data deeply into the treeUpdating data passed via contextSpecifying a fallback default valueOverriding context for a part of the treeOptimizing re-renders when passing objects and functions",
            "Passing data deeply into the tree",
            "Updating data passed via context",
            "Specifying a fallback default value",
            "Overriding context for a part of the tree",
            "Optimizing re-renders when passing objects and functions",
            "TroubleshootingMy component doesn’t see the value from my providerI am always gettingundefinedfrom my context although the default value is different",
            "My component doesn’t see the value from my provider",
            "I am always gettingundefinedfrom my context although the default value is different"
          ]
        },
        {
          "type": "p",
          "text": "CalluseContextat the top level of your component to read and subscribe tocontext."
        },
        {
          "type": "code",
          "code": "import{useContext}from'react';functionMyComponent(){consttheme=useContext(ThemeContext);// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "SomeContext: The context that you’ve previously created withcreateContext. The context itself does not hold the information, it only represents the kind of information you can provide or read from components."
          ]
        },
        {
          "type": "p",
          "text": "useContextreturns the context value for the calling component. It is determined as thevaluepassed to the closestSomeContext.Providerabove the calling component in the tree. If there is no such provider, then the returned value will be thedefaultValueyou have passed tocreateContextfor that context. The returned value is always up-to-date. React automatically re-renders components that read some context if it changes."
        },
        {
          "type": "list",
          "items": [
            "useContext()call in a component is not affected by providers returned from thesamecomponent. The corresponding<Context.Provider>needs to beabovethe component doing theuseContext()call.",
            "Reactautomatically re-rendersall the children that use a particular context starting from the provider that receives a differentvalue. The previous and the next values are compared with theObject.iscomparison. Skipping re-renders withmemodoes not prevent the children receiving fresh context values.",
            "If your build system produces duplicates modules in the output (which can happen with symlinks), this can break context. Passing something via context only works ifSomeContextthat you use to provide context andSomeContextthat you use to read it areexactlythe same object, as determined by a===comparison."
          ]
        },
        {
          "type": "p",
          "text": "CalluseContextat the top level of your component to read and subscribe tocontext."
        },
        {
          "type": "code",
          "code": "import{useContext}from'react';functionButton(){consttheme=useContext(ThemeContext);// ..."
        },
        {
          "type": "p",
          "text": "useContextreturns thecontext valuefor thecontextyou passed. To determine the context value, React searches the component tree and findsthe closest context provider abovefor that particular context. To pass context to aButton, wrap it or one of its parent components into the corresponding context provider:"
        },
        {
          "type": "code",
          "code": "functionMyPage(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>);}functionForm(){// ... renders buttons inside ...}"
        },
        {
          "type": "p",
          "text": "It doesn’t matter how many layers of components there are between the provider and theButton. When aButtonanywhereinside ofFormcallsuseContext(ThemeContext), it will receive\"dark\"as the value."
        },
        {
          "type": "p",
          "text": "useContext()always looks for the closest providerabovethe component that calls it. It searches upwards anddoes notconsider providers in the component from which you’re callinguseContext()."
        },
        {
          "type": "code",
          "code": "import{createContext,useContext}from'react';constThemeContext=createContext(null);exportdefaultfunctionMyApp(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>)}functionForm(){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button></Panel>);}functionPanel({title,children}){consttheme=useContext(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{title}</h1>{children}</section>)}functionButton({children}){consttheme=useContext(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "Often, you’ll want the context to change over time. To update context, combine it withstate.Declare a state variable in the parent component, and pass the current state down as thecontext valueto the provider."
        },
        {
          "type": "code",
          "code": "functionMyPage(){const[theme,setTheme]=useState('dark');return(<ThemeContext.Providervalue={theme}><Form/><ButtononClick={()=>{setTheme('light');}}>Switch to light theme</Button></ThemeContext.Provider>);}"
        },
        {
          "type": "p",
          "text": "Now anyButtoninside of the provider will receive the currentthemevalue. If you callsetThemeto update thethemevalue that you pass to the provider, allButtoncomponents will re-render with the new'light'value."
        },
        {
          "type": "p",
          "text": "In this example, theMyAppcomponent holds a state variable which is then passed to theThemeContextprovider. Checking the “Dark mode” checkbox updates the state. Changing the provided value re-renders all the components using that context."
        },
        {
          "type": "code",
          "code": "import{createContext,useContext,useState}from'react';constThemeContext=createContext(null);exportdefaultfunctionMyApp(){const[theme,setTheme]=useState('light');return(<ThemeContext.Providervalue={theme}><Form/><label><inputtype=\"checkbox\"checked={theme==='dark'}onChange={(e)=>{setTheme(e.target.checked?'dark':'light')}}/>Use dark mode</label></ThemeContext.Provider>)}functionForm({children}){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button></Panel>);}functionPanel({title,children}){consttheme=useContext(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{title}</h1>{children}</section>)}functionButton({children}){consttheme=useContext(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "Note thatvalue=\"dark\"passes the\"dark\"string, butvalue={theme}passes the value of the JavaScriptthemevariable withJSX curly braces.Curly braces also let you pass context values that aren’t strings."
        },
        {
          "type": "p",
          "text": "If React can’t find any providers of that particularcontextin the parent tree, the context value returned byuseContext()will be equal to thedefault valuethat you specified when youcreated that context:"
        },
        {
          "type": "code",
          "code": "constThemeContext=createContext(null);"
        },
        {
          "type": "p",
          "text": "The default valuenever changes. If you want to update context, use it with state asdescribed above. Often, instead ofnull, there is some more meaningful value you can use as a default, for example:"
        },
        {
          "type": "code",
          "code": "constThemeContext=createContext('light');"
        },
        {
          "type": "p",
          "text": "This way, if you accidentally render some component without a corresponding provider, it won’t break. This also helps your components work well in a test environment without setting up a lot of providers in the tests. In the example below, the “Toggle theme” button is always light because it’soutside any theme context providerand the default context theme value is'light'. Try editing the default theme to be'dark'."
        },
        {
          "type": "code",
          "code": "import{createContext,useContext,useState}from'react';constThemeContext=createContext('light');exportdefaultfunctionMyApp(){const[theme,setTheme]=useState('light');return(<><ThemeContext.Providervalue={theme}><Form/></ThemeContext.Provider><ButtononClick={()=>{setTheme(theme==='dark'?'light':'dark');}}>Toggle theme</Button></>)}functionForm({children}){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button></Panel>);}functionPanel({title,children}){consttheme=useContext(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}><h1>{title}</h1>{children}</section>)}functionButton({children,onClick}){consttheme=useContext(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}onClick={onClick}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "You can override the context for a part of the tree by wrapping that part in a provider with a different value."
        },
        {
          "type": "code",
          "code": "<ThemeContext.Providervalue=\"dark\">...<ThemeContext.Providervalue=\"light\"><Footer/></ThemeContext.Provider>...</ThemeContext.Provider>"
        },
        {
          "type": "p",
          "text": "You can nest and override providers as many times as you need."
        },
        {
          "type": "p",
          "text": "Here, the buttoninsidetheFooterreceives a different context value (\"light\") than the buttons outside (\"dark\")."
        },
        {
          "type": "code",
          "code": "import{createContext,useContext}from'react';constThemeContext=createContext(null);exportdefaultfunctionMyApp(){return(<ThemeContext.Providervalue=\"dark\"><Form/></ThemeContext.Provider>)}functionForm(){return(<Paneltitle=\"Welcome\"><Button>Sign up</Button><Button>Log in</Button><ThemeContext.Providervalue=\"light\"><Footer/></ThemeContext.Provider></Panel>);}functionFooter(){return(<footer><Button>Settings</Button></footer>);}functionPanel({title,children}){consttheme=useContext(ThemeContext);constclassName='panel-'+theme;return(<sectionclassName={className}>{title&&<h1>{title}</h1>}{children}</section>)}functionButton({children}){consttheme=useContext(ThemeContext);constclassName='button-'+theme;return(<buttonclassName={className}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "You can pass any values via context, including objects and functions."
        },
        {
          "type": "code",
          "code": "functionMyApp(){const[currentUser,setCurrentUser]=useState(null);functionlogin(response){storeCredentials(response.credentials);setCurrentUser(response.user);}return(<AuthContext.Providervalue={{ currentUser, login }}><Page/></AuthContext.Provider>);}"
        },
        {
          "type": "p",
          "text": "Here, thecontext valueis a JavaScript object with two properties, one of which is a function. WheneverMyAppre-renders (for example, on a route update), this will be adifferentobject pointing at adifferentfunction, so React will also have to re-render all components deep in the tree that calluseContext(AuthContext). In smaller apps, this is not a problem. However, there is no need to re-render them if the underlying data, likecurrentUser, has not changed. To help React take advantage of that fact, you may wrap theloginfunction withuseCallbackand wrap the object creation intouseMemo. This is a performance optimization:"
        },
        {
          "type": "code",
          "code": "import{useCallback,useMemo}from'react';functionMyApp(){const[currentUser,setCurrentUser]=useState(null);constlogin=useCallback((response)=>{storeCredentials(response.credentials);setCurrentUser(response.user);},[]);constcontextValue=useMemo(()=>({currentUser,login}),[currentUser,login]);return(<AuthContext.Providervalue={contextValue}><Page/></AuthContext.Provider>);}"
        },
        {
          "type": "p",
          "text": "As a result of this change, even ifMyAppneeds to re-render, the components callinguseContext(AuthContext)won’t need to re-render unlesscurrentUserhas changed. Read more aboutuseMemoanduseCallback."
        },
        {
          "type": "p",
          "text": "There are a few common ways that this can happen:"
        },
        {
          "type": "list",
          "items": [
            "You’re rendering<SomeContext.Provider>in the same component (or below) as where you’re callinguseContext(). Move<SomeContext.Provider>above and outsidethe component callinguseContext().",
            "You may have forgotten to wrap your component with<SomeContext.Provider>, or you might have put it in a different part of the tree than you thought. Check whether the hierarchy is right usingReact DevTools.",
            "You might be running into some build issue with your tooling that causesSomeContextas seen from the providing component andSomeContextas seen by the reading component to be two different objects. This can happen if you use symlinks, for example. You can verify this by assigning them to globals likewindow.SomeContext1andwindow.SomeContext2and then checking whetherwindow.SomeContext1 === window.SomeContext2in the console. If they’re not the same, fix that issue on the build tool level."
          ]
        },
        {
          "type": "p",
          "text": "You might have a provider without avaluein the tree:"
        },
        {
          "type": "code",
          "code": "// 🚩 Doesn't work: no value prop<ThemeContext.Provider><Button/></ThemeContext.Provider>"
        },
        {
          "type": "p",
          "text": "If you forget to specifyvalue, it’s like passingvalue={undefined}. You may have also mistakingly used a different prop name by mistake:"
        },
        {
          "type": "code",
          "code": "// 🚩 Doesn't work: prop should be called \"value\"<ThemeContext.Providertheme={theme}><Button/></ThemeContext.Provider>"
        },
        {
          "type": "p",
          "text": "In both of these cases you should see a warning from React in the console. To fix them, call the propvalue:"
        },
        {
          "type": "code",
          "code": "// ✅ Passing the value prop<ThemeContext.Providervalue={theme}><Button/></ThemeContext.Provider>"
        },
        {
          "type": "p",
          "text": "Note that thedefault value from yourcreateContext(defaultValue)callis only usedif there is no matching provider above at all.If there is a<SomeContext.Provider value={undefined}>component somewhere in the parent tree, the component callinguseContext(SomeContext)willreceiveundefinedas the context value."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useDebugValue",
      "title": "useDebugValue – React",
      "content": [
        {
          "type": "p",
          "text": "useDebugValueis a React Hook that lets you add a label to a custom Hook inReact DevTools."
        },
        {
          "type": "code",
          "code": "useDebugValue(value,format?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseDebugValue(value, format?)",
            "useDebugValue(value, format?)",
            "UsageAdding a label to a custom HookDeferring formatting of a debug value",
            "Adding a label to a custom Hook",
            "Deferring formatting of a debug value"
          ]
        },
        {
          "type": "p",
          "text": "CalluseDebugValueat the top level of yourcustom Hookto display a readable debug value:"
        },
        {
          "type": "code",
          "code": "import{useDebugValue}from'react';functionuseOnlineStatus(){// ...useDebugValue(isOnline?'Online':'Offline');// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "value: The value you want to display in React DevTools. It can have any type.",
            "optionalformat: A formatting function. When the component is inspected, React DevTools will call the formatting function with thevalueas the argument, and then display the returned formatted value (which may have any type). If you don’t specify the formatting function, the originalvalueitself will be displayed."
          ]
        },
        {
          "type": "p",
          "text": "useDebugValuedoes not return anything."
        },
        {
          "type": "p",
          "text": "CalluseDebugValueat the top level of yourcustom Hookto display a readabledebug valueforReact DevTools."
        },
        {
          "type": "code",
          "code": "import{useDebugValue}from'react';functionuseOnlineStatus(){// ...useDebugValue(isOnline ? 'Online' : 'Offline');// ...}"
        },
        {
          "type": "p",
          "text": "This gives components callinguseOnlineStatusa label likeOnlineStatus: \"Online\"when you inspect them:"
        },
        {
          "type": "p",
          "text": "Without theuseDebugValuecall, only the underlying data (in this example,true) would be displayed."
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore,useDebugValue}from'react';exportfunctionuseOnlineStatus(){constisOnline=useSyncExternalStore(subscribe,()=>navigator.onLine,()=>true);useDebugValue(isOnline?'Online':'Offline');returnisOnline;}functionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}"
        },
        {
          "type": "p",
          "text": "Don’t add debug values to every custom Hook. It’s most valuable for custom Hooks that are part of shared libraries and that have a complex internal data structure that’s difficult to inspect."
        },
        {
          "type": "p",
          "text": "You can also pass a formatting function as the second argument touseDebugValue:"
        },
        {
          "type": "code",
          "code": "useDebugValue(date,date=>date.toDateString());"
        },
        {
          "type": "p",
          "text": "Your formatting function will receive thedebug valueas a parameter and should return aformatted display value. When your component is inspected, React DevTools will call this function and display its result. This lets you avoid running potentially expensive formatting logic unless the component is actually inspected. For example, ifdateis a Date value, this avoids callingtoDateString()on it for every render."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useDeferredValue",
      "title": "useDeferredValue – React",
      "content": [
        {
          "type": "p",
          "text": "useDeferredValueis a React Hook that lets you defer updating a part of the UI."
        },
        {
          "type": "code",
          "code": "constdeferredValue=useDeferredValue(value)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseDeferredValue(value, initialValue?)",
            "useDeferredValue(value, initialValue?)",
            "UsageShowing stale content while fresh content is loadingIndicating that the content is staleDeferring re-rendering for a part of the UI",
            "Showing stale content while fresh content is loading",
            "Indicating that the content is stale",
            "Deferring re-rendering for a part of the UI"
          ]
        },
        {
          "type": "p",
          "text": "CalluseDeferredValueat the top level of your component to get a deferred version of that value."
        },
        {
          "type": "code",
          "code": "import{useState,useDeferredValue}from'react';functionSearchPage(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "value: The value you want to defer. It can have any type.",
            "optionalinitialValue: A value to use during the initial render of a component. If this option is omitted,useDeferredValuewill not defer during the initial render, because there’s no previous version ofvaluethat it can render instead."
          ]
        },
        {
          "type": "list",
          "items": [
            "currentValue: During the initial render, the returned deferred value will be theinitialValue, or the same as the value you provided. During updates, React will first attempt a re-render with the old value (so it will return the old value), and then try another re-render in the background with the new value (so it will return the updated value)."
          ]
        },
        {
          "type": "list",
          "items": [
            "When an update is inside a Transition,useDeferredValuealways returns the newvalueand does not spawn a deferred render, since the update is already deferred.",
            "The values you pass touseDeferredValueshould either be primitive values (like strings and numbers) or objects created outside of rendering. If you create a new object during rendering and immediately pass it touseDeferredValue, it will be different on every render, causing unnecessary background re-renders.",
            "WhenuseDeferredValuereceives a different value (compared withObject.is), in addition to the current render (when it still uses the previous value), it schedules a re-render in the background with the new value. The background re-render is interruptible: if there’s another update to thevalue, React will restart the background re-render from scratch. For example, if the user is typing into an input faster than a chart receiving its deferred value can re-render, the chart will only re-render after the user stops typing.",
            "useDeferredValueis integrated with<Suspense>.If the background update caused by a new value suspends the UI, the user will not see the fallback. They will see the old deferred value until the data loads.",
            "useDeferredValuedoes not by itself prevent extra network requests.",
            "There is no fixed delay caused byuseDeferredValueitself. As soon as React finishes the original re-render, React will immediately start working on the background re-render with the new deferred value. Any updates caused by events (like typing) will interrupt the background re-render and get prioritized over it.",
            "The background re-render caused byuseDeferredValuedoes not fire Effects until it’s committed to the screen. If the background re-render suspends, its Effects will run after the data loads and the UI updates."
          ]
        },
        {
          "type": "p",
          "text": "CalluseDeferredValueat the top level of your component to defer updating some part of your UI."
        },
        {
          "type": "code",
          "code": "import{useState,useDeferredValue}from'react';functionSearchPage(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);// ...}"
        },
        {
          "type": "p",
          "text": "During the initial render, thedeferred valuewill be the same as thevalueyou provided. During updates, thedeferred valuewill “lag behind” the latestvalue. In particular, React will first re-renderwithoutupdating the deferred value, and then try to re-render with the newly received value in the background. Let’s walk through an example to see when this is useful."
        },
        {
          "type": "p",
          "text": "This example assumes you use a Suspense-enabled data source:"
        },
        {
          "type": "list",
          "items": [
            "Data fetching with Suspense-enabled frameworks likeRelayandNext.js",
            "Lazy-loading component code withlazy",
            "Reading the value of a Promise withuse"
          ]
        },
        {
          "type": "p",
          "text": "Learn more about Suspense and its limitations."
        },
        {
          "type": "p",
          "text": "In this example, theSearchResultscomponentsuspendswhile fetching the search results. Try typing\"a\", waiting for the results, and then editing it to\"ab\". The results for\"a\"get replaced by the loading fallback."
        },
        {
          "type": "code",
          "code": "import{Suspense,useState}from'react';importSearchResultsfrom'./SearchResults.js';exportdefaultfunctionApp(){const[query,setQuery]=useState('');return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><SearchResultsquery={query}/></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "A common alternative UI pattern is todeferupdating the list of results and to keep showing the previous results until the new results are ready. CalluseDeferredValueto pass a deferred version of the query down:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionApp(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><SearchResultsquery={deferredQuery}/></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "Thequerywill update immediately, so the input will display the new value. However, thedeferredQuerywill keep its previous value until the data has loaded, soSearchResultswill show the stale results for a bit. Enter\"a\"in the example below, wait for the results to load, and then edit the input to\"ab\". Notice how instead of the Suspense fallback, you now see the stale result list until the new results have loaded:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState,useDeferredValue}from'react';importSearchResultsfrom'./SearchResults.js';exportdefaultfunctionApp(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><SearchResultsquery={deferredQuery}/></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "You can think of it as happening in two steps:"
        },
        {
          "type": "list",
          "items": [
            "First, React re-renders with the newquery(\"ab\") but with the olddeferredQuery(still\"a\").ThedeferredQueryvalue, which you pass to the result list, isdeferred:it “lags behind” thequeryvalue.",
            "In the background, React tries to re-render withbothqueryanddeferredQueryupdated to\"ab\".If this re-render completes, React will show it on the screen. However, if it suspends (the results for\"ab\"have not loaded yet), React will abandon this rendering attempt, and retry this re-render again after the data has loaded. The user will keep seeing the stale deferred value until the data is ready."
          ]
        },
        {
          "type": "p",
          "text": "The deferred “background” rendering is interruptible. For example, if you type into the input again, React will abandon it and restart with the new value. React will always use the latest provided value. Note that there is still a network request per each keystroke. What’s being deferred here is displaying results (until they’re ready), not the network requests themselves. Even if the user continues typing, responses for each keystroke get cached, so pressing Backspace is instant and doesn’t fetch again."
        },
        {
          "type": "p",
          "text": "In the example above, there is no indication that the result list for the latest query is still loading. This can be confusing to the user if the new results take a while to load. To make it more obvious to the user that the result list does not match the latest query, you can add a visual indication when the stale result list is displayed:"
        },
        {
          "type": "code",
          "code": "<divstyle={{opacity:query!==deferredQuery?0.5:1,}}><SearchResultsquery={deferredQuery}/></div>"
        },
        {
          "type": "p",
          "text": "With this change, as soon as you start typing, the stale result list gets slightly dimmed until the new result list loads. You can also add a CSS transition to delay dimming so that it feels gradual, like in the example below:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState,useDeferredValue}from'react';importSearchResultsfrom'./SearchResults.js';exportdefaultfunctionApp(){const[query,setQuery]=useState('');constdeferredQuery=useDeferredValue(query);constisStale=query!==deferredQuery;return(<><label>Search albums:<inputvalue={query}onChange={e=>setQuery(e.target.value)}/></label><Suspensefallback={<h2>Loading...</h2>}><divstyle={{opacity:isStale?0.5:1,transition:isStale?'opacity 0.2s 0.2s linear':'opacity 0s 0s linear'}}><SearchResultsquery={deferredQuery}/></div></Suspense></>);}"
        },
        {
          "type": "p",
          "text": "You can also applyuseDeferredValueas a performance optimization. It is useful when a part of your UI is slow to re-render, there’s no easy way to optimize it, and you want to prevent it from blocking the rest of the UI. Imagine you have a text field and a component (like a chart or a long list) that re-renders on every keystroke:"
        },
        {
          "type": "code",
          "code": "functionApp(){const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><SlowListtext={text}/></>);}"
        },
        {
          "type": "p",
          "text": "First, optimizeSlowListto skip re-rendering when its props are the same. To do this,wrap it inmemo:"
        },
        {
          "type": "code",
          "code": "constSlowList=memo(functionSlowList({text}){// ...});"
        },
        {
          "type": "p",
          "text": "However, this only helps if theSlowListprops arethe sameas during the previous render. The problem you’re facing now is that it’s slow when they’redifferent,and when you actually need to show different visual output. Concretely, the main performance problem is that whenever you type into the input, theSlowListreceives new props, and re-rendering its entire tree makes the typing feel janky. In this case,useDeferredValuelets you prioritize updating the input (which must be fast) over updating the result list (which is allowed to be slower):"
        },
        {
          "type": "code",
          "code": "functionApp(){const[text,setText]=useState('');constdeferredText=useDeferredValue(text);return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><SlowListtext={deferredText}/></>);}"
        },
        {
          "type": "p",
          "text": "This does not make re-rendering of theSlowListfaster. However, it tells React that re-rendering the list can be deprioritized so that it doesn’t block the keystrokes. The list will “lag behind” the input and then “catch up”. Like before, React will attempt to update the list as soon as possible, but will not block the user from typing."
        },
        {
          "type": "p",
          "text": "In this example, each item in theSlowListcomponent isartificially slowed downso that you can see howuseDeferredValuelets you keep the input responsive. Type into the input and notice that typing feels snappy while the list “lags behind” it."
        },
        {
          "type": "code",
          "code": "import{useState,useDeferredValue}from'react';importSlowListfrom'./SlowList.js';exportdefaultfunctionApp(){const[text,setText]=useState('');constdeferredText=useDeferredValue(text);return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><SlowListtext={deferredText}/></>);}"
        },
        {
          "type": "p",
          "text": "This optimization requiresSlowListto be wrapped inmemo.This is because whenever thetextchanges, React needs to be able to re-render the parent component quickly. During that re-render,deferredTextstill has its previous value, soSlowListis able to skip re-rendering (its props have not changed). Withoutmemo,it would have to re-render anyway, defeating the point of the optimization."
        },
        {
          "type": "p",
          "text": "There are two common optimization techniques you might have used before in this scenario:"
        },
        {
          "type": "list",
          "items": [
            "Debouncingmeans you’d wait for the user to stop typing (e.g. for a second) before updating the list.",
            "Throttlingmeans you’d update the list every once in a while (e.g. at most once a second)."
          ]
        },
        {
          "type": "p",
          "text": "While these techniques are helpful in some cases,useDeferredValueis better suited to optimizing rendering because it is deeply integrated with React itself and adapts to the user’s device. Unlike debouncing or throttling, it doesn’t require choosing any fixed delay. If the user’s device is fast (e.g. powerful laptop), the deferred re-render would happen almost immediately and wouldn’t be noticeable. If the user’s device is slow, the list would “lag behind” the input proportionally to how slow the device is. Also, unlike with debouncing or throttling, deferred re-renders done byuseDeferredValueare interruptible by default. This means that if React is in the middle of re-rendering a large list, but the user makes another keystroke, React will abandon that re-render, handle the keystroke, and then start rendering in the background again. By contrast, debouncing and throttling still produce a janky experience because they’reblocking:they merely postpone the moment when rendering blocks the keystroke. If the work you’re optimizing doesn’t happen during rendering, debouncing and throttling are still useful. For example, they can let you fire fewer network requests. You can also use these techniques together."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useEffect",
      "title": "useEffect – React",
      "content": [
        {
          "type": "p",
          "text": "useEffectis a React Hook that lets yousynchronize a component with an external system."
        },
        {
          "type": "code",
          "code": "useEffect(setup,dependencies?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseEffect(setup, dependencies?)",
            "useEffect(setup, dependencies?)",
            "UsageConnecting to an external systemWrapping Effects in custom HooksControlling a non-React widgetFetching data with EffectsSpecifying reactive dependenciesUpdating state based on previous state from an EffectRemoving unnecessary object dependenciesRemoving unnecessary function dependenciesReading the latest props and state from an EffectDisplaying different content on the server and the client",
            "Connecting to an external system",
            "Wrapping Effects in custom Hooks",
            "Controlling a non-React widget",
            "Fetching data with Effects",
            "Specifying reactive dependencies",
            "Updating state based on previous state from an Effect",
            "Removing unnecessary object dependencies",
            "Removing unnecessary function dependencies",
            "Reading the latest props and state from an Effect",
            "Displaying different content on the server and the client",
            "TroubleshootingMy Effect runs twice when the component mountsMy Effect runs after every re-renderMy Effect keeps re-running in an infinite cycleMy cleanup logic runs even though my component didn’t unmountMy Effect does something visual, and I see a flicker before it runs",
            "My Effect runs twice when the component mounts",
            "My Effect runs after every re-render",
            "My Effect keeps re-running in an infinite cycle",
            "My cleanup logic runs even though my component didn’t unmount",
            "My Effect does something visual, and I see a flicker before it runs"
          ]
        },
        {
          "type": "p",
          "text": "CalluseEffectat the top level of your component to declare an Effect:"
        },
        {
          "type": "code",
          "code": "import{useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "setup: The function with your Effect’s logic. Your setup function may also optionally return acleanupfunction. When your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. After your component is removed from the DOM, React will run your cleanup function.",
            "optionaldependencies: The list of all reactive values referenced inside of thesetupcode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison. If you omit this argument, your Effect will re-run after every re-render of the component.See the difference between passing an array of dependencies, an empty array, and no dependencies at all."
          ]
        },
        {
          "type": "p",
          "text": "useEffectreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "useEffectis a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "If you’renot trying to synchronize with some external system,you probably don’t need an Effect.",
            "When Strict Mode is on, React willrun one extra development-only setup+cleanup cyclebefore the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem,implement the cleanup function.",
            "If some of your dependencies are objects or functions defined inside the component, there is a risk that they willcause the Effect to re-run more often than needed.To fix this, remove unnecessaryobjectandfunctiondependencies. You can alsoextract state updatesandnon-reactive logicoutside of your Effect.",
            "If your Effect wasn’t caused by an interaction (like a click), React will generally let the browserpaint the updated screen first before running your Effect.If your Effect is doing something visual (for example, positioning a tooltip), and the delay is noticeable (for example, it flickers), replaceuseEffectwithuseLayoutEffect.",
            "If your Effect is caused by an interaction (like a click),React may run your Effect before the browser paints the updated screen. This ensures that the result of the Effect can be observed by the event system. Usually, this works as expected. However, if you must defer the work until after paint, such as analert(), you can usesetTimeout. Seereactwg/react-18/128for more information.",
            "Even if your Effect was caused by an interaction (like a click),React may allow the browser to repaint the screen before processing the state updates inside your Effect.Usually, this works as expected. However, if you must block the browser from repainting the screen, you need to replaceuseEffectwithuseLayoutEffect.",
            "Effectsonly run on the client.They don’t run during server rendering."
          ]
        },
        {
          "type": "p",
          "text": "Some components need to stay connected to the network, some browser API, or a third-party library, while they are displayed on the page. These systems aren’t controlled by React, so they are calledexternal. Toconnect your component to some external system,calluseEffectat the top level of your component:"
        },
        {
          "type": "code",
          "code": "import{useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{const connection = createConnection(serverUrl, roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl, roomId]);// ...}"
        },
        {
          "type": "p",
          "text": "You need to pass two arguments touseEffect:"
        },
        {
          "type": "list",
          "items": [
            "Asetup functionwithsetup codethat connects to that system.It should return acleanup functionwithcleanup codethat disconnects from that system.",
            "It should return acleanup functionwithcleanup codethat disconnects from that system.",
            "Alist of dependenciesincluding every value from your component used inside of those functions."
          ]
        },
        {
          "type": "p",
          "text": "React calls your setup and cleanup functions whenever it’s necessary, which may happen multiple times:"
        },
        {
          "type": "list",
          "items": [
            "Yoursetup coderuns when your component is added to the page(mounts).",
            "After every re-render of your component where thedependencieshave changed:First, yourcleanup coderuns with the old props and state.Then, yoursetup coderuns with the new props and state.",
            "First, yourcleanup coderuns with the old props and state.",
            "Then, yoursetup coderuns with the new props and state.",
            "Yourcleanup coderuns one final time after your component is removed from the page(unmounts)."
          ]
        },
        {
          "type": "p",
          "text": "Let’s illustrate this sequence for the example above. When theChatRoomcomponent above gets added to the page, it will connect to the chat room with the initialserverUrlandroomId. If eitherserverUrlorroomIdchange as a result of a re-render (say, if the user picks a different chat room in a dropdown), your Effect willdisconnect from the previous room, and connect to the next one.When theChatRoomcomponent is removed from the page, your Effect will disconnect one last time. Tohelp you find bugs,in development React runssetupandcleanupone extra time before thesetup.This is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and asetup→cleanup→setupsequence (as in development).See common solutions. Try towrite every Effect as an independent processandthink about a single setup/cleanup cycle at a time.It shouldn’t matter whether your component is mounting, updating, or unmounting. When your cleanup logic correctly “mirrors” the setup logic, your Effect is resilient to running setup and cleanup as often as needed."
        },
        {
          "type": "p",
          "text": "An Effect lets youkeep your component synchronizedwith some external system (like a chat service). Here,external systemmeans any piece of code that’s not controlled by React, such as:"
        },
        {
          "type": "list",
          "items": [
            "A timer managed withsetInterval()andclearInterval().",
            "An event subscription usingwindow.addEventListener()andwindow.removeEventListener().",
            "A third-party animation library with an API likeanimation.start()andanimation.reset()."
          ]
        },
        {
          "type": "p",
          "text": "If you’re not connecting to any external system,you probably don’t need an Effect."
        },
        {
          "type": "p",
          "text": "In this example, theChatRoomcomponent uses an Effect to stay connected to an external system defined inchat.js. Press “Open chat” to make theChatRoomcomponent appear. This sandbox runs in development mode, so there is an extra connect-and-disconnect cycle, asexplained here.Try changing theroomIdandserverUrlusing the dropdown and the input, and see how the Effect re-connects to the chat. Press “Close chat” to see the Effect disconnect one last time."
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[roomId,serverUrl]);return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}"
        },
        {
          "type": "p",
          "text": "Effects are an“escape hatch”:you use them when you need to “step outside React” and when there is no better built-in solution for your use case. If you find yourself often needing to manually write Effects, it’s usually a sign that you need to extract somecustom Hooksfor common behaviors your components rely on. For example, thisuseChatRoomcustom Hook “hides” the logic of your Effect behind a more declarative API:"
        },
        {
          "type": "code",
          "code": "functionuseChatRoom({serverUrl,roomId}){useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId,serverUrl]);}"
        },
        {
          "type": "p",
          "text": "Then you can use it from any component like this:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});// ..."
        },
        {
          "type": "p",
          "text": "There are also many excellent custom Hooks for every purpose available in the React ecosystem. Learn more about wrapping Effects in custom Hooks."
        },
        {
          "type": "p",
          "text": "This example is identical to one of theearlier examples,but the logic is extracted to a custom Hook."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';import{useChatRoom}from'./useChatRoom.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useChatRoom({roomId:roomId,serverUrl:serverUrl});return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');const[show,setShow]=useState(false);return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}"
        },
        {
          "type": "p",
          "text": "Sometimes, you want to keep an external system synchronized to some prop or state of your component. For example, if you have a third-party map widget or a video player component written without React, you can use an Effect to call methods on it that make its state match the current state of your React component. This Effect creates an instance of aMapWidgetclass defined inmap-widget.js. When you change thezoomLevelprop of theMapcomponent, the Effect calls thesetZoom()on the class instance to keep it synchronized:"
        },
        {
          "type": "code",
          "code": "import{useRef,useEffect}from'react';import{MapWidget}from'./map-widget.js';exportdefaultfunctionMap({zoomLevel}){constcontainerRef=useRef(null);constmapRef=useRef(null);useEffect(()=>{if(mapRef.current===null){mapRef.current=newMapWidget(containerRef.current);}constmap=mapRef.current;map.setZoom(zoomLevel);},[zoomLevel]);return(<divstyle={{width:200,height:200}}ref={containerRef}/>);}"
        },
        {
          "type": "p",
          "text": "In this example, a cleanup function is not needed because theMapWidgetclass manages only the DOM node that was passed to it. After theMapReact component is removed from the tree, both the DOM node and theMapWidgetclass instance will be automatically garbage-collected by the browser JavaScript engine."
        },
        {
          "type": "p",
          "text": "You can use an Effect to fetch data for your component. Note thatif you use a framework,using your framework’s data fetching mechanism will be a lot more efficient than writing Effects manually. If you want to fetch data from an Effect manually, your code might look like this:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{fetchBio}from'./api.js';exportdefaultfunctionPage(){const[person,setPerson]=useState('Alice');const[bio,setBio]=useState(null);useEffect(()=>{letignore=false;setBio(null);fetchBio(person).then(result=>{if(!ignore){setBio(result);}});return()=>{ignore=true;};},[person]);// ..."
        },
        {
          "type": "p",
          "text": "Note theignorevariable which is initialized tofalse, and is set totrueduring cleanup. This ensuresyour code doesn’t suffer from “race conditions”:network responses may arrive in a different order than you sent them."
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{fetchBio}from'./api.js';exportdefaultfunctionPage(){const[person,setPerson]=useState('Alice');const[bio,setBio]=useState(null);useEffect(()=>{letignore=false;setBio(null);fetchBio(person).then(result=>{if(!ignore){setBio(result);}});return()=>{ignore=true;}},[person]);return(<><selectvalue={person}onChange={e=>{setPerson(e.target.value);}}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option><optionvalue=\"Taylor\">Taylor</option></select><hr/><p><i>{bio??'Loading...'}</i></p></>);}"
        },
        {
          "type": "p",
          "text": "You can also rewrite using theasync/awaitsyntax, but you still need to provide a cleanup function:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{fetchBio}from'./api.js';exportdefaultfunctionPage(){const[person,setPerson]=useState('Alice');const[bio,setBio]=useState(null);useEffect(()=>{asyncfunctionstartFetching(){setBio(null);constresult=awaitfetchBio(person);if(!ignore){setBio(result);}}letignore=false;startFetching();return()=>{ignore=true;}},[person]);return(<><selectvalue={person}onChange={e=>{setPerson(e.target.value);}}><optionvalue=\"Alice\">Alice</option><optionvalue=\"Bob\">Bob</option><optionvalue=\"Taylor\">Taylor</option></select><hr/><p><i>{bio??'Loading...'}</i></p></>);}"
        },
        {
          "type": "p",
          "text": "Writing data fetching directly in Effects gets repetitive and makes it difficult to add optimizations like caching and server rendering later.It’s easier to use a custom Hook—either your own or maintained by the community."
        },
        {
          "type": "p",
          "text": "Writingfetchcalls inside Effects is apopular way to fetch data, especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:"
        },
        {
          "type": "list",
          "items": [
            "Effects don’t run on the server.This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.",
            "Fetching directly in Effects makes it easy to create “network waterfalls”.You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.",
            "Fetching directly in Effects usually means you don’t preload or cache data.For example, if the component unmounts and then mounts again, it would have to fetch the data again.",
            "It’s not very ergonomic.There’s quite a bit of boilerplate code involved when writingfetchcalls in a way that doesn’t suffer from bugs likerace conditions."
          ]
        },
        {
          "type": "p",
          "text": "This list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:"
        },
        {
          "type": "list",
          "items": [
            "If you use aframework, use its built-in data fetching mechanism.Modern React frameworks have integrated data fetching mechanisms that are efficient and don’t suffer from the above pitfalls.",
            "Otherwise, consider using or building a client-side cache.Popular open source solutions includeReact Query,useSWR, andReact Router 6.4+.You can build your own solution too, in which case you would use Effects under the hood but also add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes)."
          ]
        },
        {
          "type": "p",
          "text": "You can continue fetching data directly in Effects if neither of these approaches suit you."
        },
        {
          "type": "p",
          "text": "Notice that you can’t “choose” the dependencies of your Effect.Everyreactive valueused by your Effect’s code must be declared as a dependency. Your Effect’s dependency list is determined by the surrounding code:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){// This is a reactive valueconst[serverUrl,setServerUrl]=useState('https://localhost:1234');// This is a reactive value toouseEffect(()=>{constconnection=createConnection(serverUrl,roomId);// This Effect reads these reactive valuesconnection.connect();return()=>connection.disconnect();},[serverUrl,roomId]);// ✅ So you must specify them as dependencies of your Effect// ...}"
        },
        {
          "type": "p",
          "text": "If eitherserverUrlorroomIdchange, your Effect will reconnect to the chat using the new values. Reactive valuesinclude props and all variables and functions declared directly inside of your component.SinceroomIdandserverUrlare reactive values, you can’t remove them from the dependencies. If you try to omit them andyour linter is correctly configured for React,the linter will flag this as a mistake you need to fix:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// 🔴 React Hook useEffect has missing dependencies: 'roomId' and 'serverUrl'// ...}"
        },
        {
          "type": "p",
          "text": "To remove a dependency, you need to“prove” to the linter that itdoesn’t needto be a dependency.For example, you can moveserverUrlout of your component to prove that it’s not reactive and won’t change on re-renders:"
        },
        {
          "type": "code",
          "code": "constserverUrl='https://localhost:1234';// Not a reactive value anymorefunctionChatRoom({roomId}){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[roomId]);// ✅ All dependencies declared// ...}"
        },
        {
          "type": "p",
          "text": "Now thatserverUrlis not a reactive value (and can’t change on a re-render), it doesn’t need to be a dependency.If your Effect’s code doesn’t use any reactive values, its dependency list should be empty ([]):"
        },
        {
          "type": "code",
          "code": "constserverUrl='https://localhost:1234';// Not a reactive value anymoreconstroomId='music';// Not a reactive value anymorefunctionChatRoom(){useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>connection.disconnect();},[]);// ✅ All dependencies declared// ...}"
        },
        {
          "type": "p",
          "text": "An Effect with empty dependenciesdoesn’t re-run when any of your component’s props or state change."
        },
        {
          "type": "p",
          "text": "If you have an existing codebase, you might have some Effects that suppress the linter like this:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{// ...// 🔴 Avoid suppressing the linter like this:// eslint-ignore-next-line react-hooks/exhaustive-deps},[]);"
        },
        {
          "type": "p",
          "text": "When dependencies don’t match the code, there is a high risk of introducing bugs.By suppressing the linter, you “lie” to React about the values your Effect depends on.Instead, prove they’re unnecessary."
        },
        {
          "type": "p",
          "text": "If you specify the dependencies, your Effect runsafter the initial renderandafter re-renders with changed dependencies."
        },
        {
          "type": "code",
          "code": "useEffect(()=>{// ...},[a,b]);// Runs again if a or b are different"
        },
        {
          "type": "p",
          "text": "In the below example,serverUrlandroomIdarereactive values,so they both must be specified as dependencies. As a result, selecting a different room in the dropdown or editing the server URL input causes the chat to re-connect. However, sincemessageisn’t used in the Effect (and so it isn’t a dependency), editing the message doesn’t re-connect to the chat."
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{createConnection}from'./chat.js';functionChatRoom({roomId}){const[serverUrl,setServerUrl]=useState('https://localhost:1234');const[message,setMessage]=useState('');useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);return(<><label>Server URL:{' '}<inputvalue={serverUrl}onChange={e=>setServerUrl(e.target.value)}/></label><h1>Welcome to the{roomId}room!</h1><label>Your message:{' '}<inputvalue={message}onChange={e=>setMessage(e.target.value)}/></label></>);}exportdefaultfunctionApp(){const[show,setShow]=useState(false);const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select><buttononClick={()=>setShow(!show)}>{show?'Close chat':'Open chat'}</button></label>{show&&<hr/>}{show&&<ChatRoomroomId={roomId}/>}</>);}"
        },
        {
          "type": "p",
          "text": "When you want to update state based on previous state from an Effect, you might run into a problem:"
        },
        {
          "type": "code",
          "code": "functionCounter(){const[count,setCount]=useState(0);useEffect(()=>{constintervalId=setInterval(()=>{setCount(count+1);// You want to increment the counter every second...},1000)return()=>clearInterval(intervalId);},[count]);// 🚩 ... but specifying `count` as a dependency always resets the interval.// ...}"
        },
        {
          "type": "p",
          "text": "Sincecountis a reactive value, it must be specified in the list of dependencies. However, that causes the Effect to cleanup and setup again every time thecountchanges. This is not ideal. To fix this,pass thec => c + 1state updatertosetCount:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';exportdefaultfunctionCounter(){const[count,setCount]=useState(0);useEffect(()=>{constintervalId=setInterval(()=>{setCount(c=>c+1);// ✅ Pass a state updater},1000);return()=>clearInterval(intervalId);},[]);// ✅ Now count is not a dependencyreturn<h1>{count}</h1>;}"
        },
        {
          "type": "p",
          "text": "Now that you’re passingc => c + 1instead ofcount + 1,your Effect no longer needs to depend oncount.As a result of this fix, it won’t need to cleanup and setup the interval again every time thecountchanges."
        },
        {
          "type": "p",
          "text": "If your Effect depends on an object or a function created during rendering, it might run too often. For example, this Effect re-connects after every render because theoptionsobject isdifferent for every render:"
        },
        {
          "type": "code",
          "code": "constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');constoptions={// 🚩 This object is created from scratch on every re-renderserverUrl:serverUrl,roomId:roomId};useEffect(()=>{constconnection=createConnection(options);// It's used inside the Effectconnection.connect();return()=>connection.disconnect();},[options]);// 🚩 As a result, these dependencies are always different on a re-render// ..."
        },
        {
          "type": "p",
          "text": "Avoid using an object created during rendering as a dependency. Instead, create the object inside the Effect:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={serverUrl:serverUrl,roomId:roomId};constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}"
        },
        {
          "type": "p",
          "text": "Now that you create theoptionsobject inside the Effect, the Effect itself only depends on theroomIdstring. With this fix, typing into the input doesn’t reconnect the chat. Unlike an object which gets re-created, a string likeroomIddoesn’t change unless you set it to another value.Read more about removing dependencies."
        },
        {
          "type": "p",
          "text": "If your Effect depends on an object or a function created during rendering, it might run too often. For example, this Effect re-connects after every render because thecreateOptionsfunction isdifferent for every render:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');functioncreateOptions(){// 🚩 This function is created from scratch on every re-renderreturn{serverUrl:serverUrl,roomId:roomId};}useEffect(()=>{constoptions=createOptions();// It's used inside the Effectconstconnection=createConnection();connection.connect();return()=>connection.disconnect();},[createOptions]);// 🚩 As a result, these dependencies are always different on a re-render// ..."
        },
        {
          "type": "p",
          "text": "By itself, creating a function from scratch on every re-render is not a problem. You don’t need to optimize that. However, if you use it as a dependency of your Effect, it will cause your Effect to re-run after every re-render. Avoid using a function created during rendering as a dependency. Instead, declare it inside the Effect:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';import{createConnection}from'./chat.js';constserverUrl='https://localhost:1234';functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{functioncreateOptions(){return{serverUrl:serverUrl,roomId:roomId};}constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);return(<><h1>Welcome to the{roomId}room!</h1><inputvalue={message}onChange={e=>setMessage(e.target.value)}/></>);}exportdefaultfunctionApp(){const[roomId,setRoomId]=useState('general');return(<><label>Choose the chat room:{' '}<selectvalue={roomId}onChange={e=>setRoomId(e.target.value)}><optionvalue=\"general\">general</option><optionvalue=\"travel\">travel</option><optionvalue=\"music\">music</option></select></label><hr/><ChatRoomroomId={roomId}/></>);}"
        },
        {
          "type": "p",
          "text": "Now that you define thecreateOptionsfunction inside the Effect, the Effect itself only depends on theroomIdstring. With this fix, typing into the input doesn’t reconnect the chat. Unlike a function which gets re-created, a string likeroomIddoesn’t change unless you set it to another value.Read more about removing dependencies."
        },
        {
          "type": "p",
          "text": "This section describes anexperimental API that has not yet been releasedin a stable version of React."
        },
        {
          "type": "p",
          "text": "By default, when you read a reactive value from an Effect, you have to add it as a dependency. This ensures that your Effect “reacts” to every change of that value. For most dependencies, that’s the behavior you want. However, sometimes you’ll want to read thelatestprops and state from an Effect without “reacting” to them.For example, imagine you want to log the number of the items in the shopping cart for every page visit:"
        },
        {
          "type": "code",
          "code": "functionPage({url,shoppingCart}){useEffect(()=>{logVisit(url,shoppingCart.length);},[url,shoppingCart]);// ✅ All dependencies declared// ...}"
        },
        {
          "type": "p",
          "text": "What if you want to log a new page visit after everyurlchange, butnotif only theshoppingCartchanges?You can’t excludeshoppingCartfrom dependencies without breaking thereactivity rules.However, you can express that youdon’t wanta piece of code to “react” to changes even though it is called from inside an Effect.Declare anEffect Eventwith theuseEffectEventHook, and move the code readingshoppingCartinside of it:"
        },
        {
          "type": "code",
          "code": "functionPage({url,shoppingCart}){constonVisit=useEffectEvent(visitedUrl=>{logVisit(visitedUrl,shoppingCart.length)});useEffect(()=>{onVisit(url);},[url]);// ✅ All dependencies declared// ...}"
        },
        {
          "type": "p",
          "text": "Effect Events are not reactive and must always be omitted from dependencies of your Effect.This is what lets you put non-reactive code (where you can read the latest value of some props and state) inside of them. By readingshoppingCartinside ofonVisit, you ensure thatshoppingCartwon’t re-run your Effect. Read more about how Effect Events let you separate reactive and non-reactive code."
        },
        {
          "type": "p",
          "text": "If your app uses server rendering (eitherdirectlyor via aframework), your component will render in two different environments. On the server, it will render to produce the initial HTML. On the client, React will run the rendering code again so that it can attach your event handlers to that HTML. This is why, forhydrationto work, your initial render output must be identical on the client and the server. In rare cases, you might need to display different content on the client. For example, if your app reads some data fromlocalStorage, it can’t possibly do that on the server. Here is how you could implement this:"
        },
        {
          "type": "code",
          "code": "functionMyComponent(){const[didMount,setDidMount]=useState(false);useEffect(()=>{setDidMount(true);},[]);if(didMount){// ... return client-only JSX ...}else{// ... return initial JSX ...}}"
        },
        {
          "type": "p",
          "text": "While the app is loading, the user will see the initial render output. Then, when it’s loaded and hydrated, your Effect will run and setdidMounttotrue, triggering a re-render. This will switch to the client-only render output. Effects don’t run on the server, so this is whydidMountwasfalseduring the initial server render. Use this pattern sparingly. Keep in mind that users with a slow connection will see the initial content for quite a bit of time—potentially, many seconds—so you don’t want to make jarring changes to your component’s appearance. In many cases, you can avoid the need for this by conditionally showing different things with CSS."
        },
        {
          "type": "p",
          "text": "When Strict Mode is on, in development, React runs setup and cleanup one extra time before the actual setup. This is a stress-test that verifies your Effect’s logic is implemented correctly. If this causes visible issues, your cleanup function is missing some logic. The cleanup function should stop or undo whatever the setup function was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the setup being called once (as in production) and a setup → cleanup → setup sequence (as in development). Read more abouthow this helps find bugsandhow to fix your logic."
        },
        {
          "type": "p",
          "text": "First, check that you haven’t forgotten to specify the dependency array:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{// ...});// 🚩 No dependency array: re-runs after every render!"
        },
        {
          "type": "p",
          "text": "If you’ve specified the dependency array but your Effect still re-runs in a loop, it’s because one of your dependencies is different on every re-render. You can debug this problem by manually logging your dependencies to the console:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{// ..},[serverUrl,roomId]);console.log([serverUrl,roomId]);"
        },
        {
          "type": "p",
          "text": "You can then right-click on the arrays from different re-renders in the console and select “Store as a global variable” for both of them. Assuming the first one got saved astemp1and the second one got saved astemp2, you can then use the browser console to check whether each dependency in both arrays is the same:"
        },
        {
          "type": "code",
          "code": "Object.is(temp1[0],temp2[0]);// Is the first dependency the same between the arrays?Object.is(temp1[1],temp2[1]);// Is the second dependency the same between the arrays?Object.is(temp1[2],temp2[2]);// ... and so on for every dependency ..."
        },
        {
          "type": "p",
          "text": "When you find the dependency that is different on every re-render, you can usually fix it in one of these ways:"
        },
        {
          "type": "list",
          "items": [
            "Updating state based on previous state from an Effect",
            "Removing unnecessary object dependencies",
            "Removing unnecessary function dependencies",
            "Reading the latest props and state from an Effect"
          ]
        },
        {
          "type": "p",
          "text": "As a last resort (if these methods didn’t help), wrap its creation withuseMemooruseCallback(for functions)."
        },
        {
          "type": "p",
          "text": "If your Effect runs in an infinite cycle, these two things must be true:"
        },
        {
          "type": "list",
          "items": [
            "Your Effect is updating some state.",
            "That state leads to a re-render, which causes the Effect’s dependencies to change."
          ]
        },
        {
          "type": "p",
          "text": "Before you start fixing the problem, ask yourself whether your Effect is connecting to some external system (like DOM, network, a third-party widget, and so on). Why does your Effect need to set state? Does it synchronize with that external system? Or are you trying to manage your application’s data flow with it? If there is no external system, consider whetherremoving the Effect altogetherwould simplify your logic. If you’re genuinely synchronizing with some external system, think about why and under what conditions your Effect should update the state. Has something changed that affects your component’s visual output? If you need to keep track of some data that isn’t used by rendering, aref(which doesn’t trigger re-renders) might be more appropriate. Verify your Effect doesn’t update the state (and trigger re-renders) more than needed. Finally, if your Effect is updating the state at the right time, but there is still a loop, it’s because that state update leads to one of the Effect’s dependencies changing.Read how to debug dependency changes."
        },
        {
          "type": "p",
          "text": "The cleanup function runs not only during unmount, but before every re-render with changed dependencies. Additionally, in development, Reactruns setup+cleanup one extra time immediately after component mounts. If you have cleanup code without corresponding setup code, it’s usually a code smell:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{// 🔴 Avoid: Cleanup logic without corresponding setup logicreturn()=>{doSomething();};},[]);"
        },
        {
          "type": "p",
          "text": "Your cleanup logic should be “symmetrical” to the setup logic, and should stop or undo whatever setup did:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{constconnection=createConnection(serverUrl,roomId);connection.connect();return()=>{connection.disconnect();};},[serverUrl,roomId]);"
        },
        {
          "type": "p",
          "text": "Learn how the Effect lifecycle is different from the component’s lifecycle."
        },
        {
          "type": "p",
          "text": "If your Effect must block the browser frompainting the screen,replaceuseEffectwithuseLayoutEffect. Note thatthis shouldn’t be needed for the vast majority of Effects.You’ll only need this if it’s crucial to run your Effect before the browser paint: for example, to measure and position a tooltip before the user sees it."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useId",
      "title": "useId – React",
      "content": [
        {
          "type": "p",
          "text": "useIdis a React Hook for generating unique IDs that can be passed to accessibility attributes."
        },
        {
          "type": "code",
          "code": "constid=useId()"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseId()",
            "useId()",
            "UsageGenerating unique IDs for accessibility attributesGenerating IDs for several related elementsSpecifying a shared prefix for all generated IDsUsing the same ID prefix on the client and the server",
            "Generating unique IDs for accessibility attributes",
            "Generating IDs for several related elements",
            "Specifying a shared prefix for all generated IDs",
            "Using the same ID prefix on the client and the server"
          ]
        },
        {
          "type": "p",
          "text": "CalluseIdat the top level of your component to generate a unique ID:"
        },
        {
          "type": "code",
          "code": "import{useId}from'react';functionPasswordField(){constpasswordHintId=useId();// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "useIddoes not take any parameters."
        },
        {
          "type": "p",
          "text": "useIdreturns a unique ID string associated with this particularuseIdcall in this particular component."
        },
        {
          "type": "list",
          "items": [
            "useIdis a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "useIdshould not be used to generate keysin a list.Keys should be generated from your data."
          ]
        },
        {
          "type": "p",
          "text": "Do not calluseIdto generate keys in a list.Keys should be generated from your data."
        },
        {
          "type": "p",
          "text": "CalluseIdat the top level of your component to generate a unique ID:"
        },
        {
          "type": "code",
          "code": "import{useId}from'react';functionPasswordField(){constpasswordHintId=useId();// ..."
        },
        {
          "type": "p",
          "text": "You can then pass thegenerated IDto different attributes:"
        },
        {
          "type": "code",
          "code": "<><inputtype=\"password\"aria-describedby={passwordHintId}/><pid={passwordHintId}></>"
        },
        {
          "type": "p",
          "text": "Let’s walk through an example to see when this is useful. HTML accessibility attributeslikearia-describedbylet you specify that two tags are related to each other. For example, you can specify that an element (like an input) is described by another element (like a paragraph). In regular HTML, you would write it like this:"
        },
        {
          "type": "code",
          "code": "<label>Password:<inputtype=\"password\"aria-describedby=\"password-hint\"/></label><pid=\"password-hint\">The password should contain at least 18 characters</p>"
        },
        {
          "type": "p",
          "text": "However, hardcoding IDs like this is not a good practice in React. A component may be rendered more than once on the page—but IDs have to be unique! Instead of hardcoding an ID, generate a unique ID withuseId:"
        },
        {
          "type": "code",
          "code": "import{useId}from'react';functionPasswordField(){constpasswordHintId=useId();return(<><label>Password:<inputtype=\"password\"aria-describedby={passwordHintId}/></label><pid={passwordHintId}>The password should contain at least 18 characters</p></>);}"
        },
        {
          "type": "p",
          "text": "Now, even ifPasswordFieldappears multiple times on the screen, the generated IDs won’t clash."
        },
        {
          "type": "code",
          "code": "import{useId}from'react';functionPasswordField(){constpasswordHintId=useId();return(<><label>Password:<inputtype=\"password\"aria-describedby={passwordHintId}/></label><pid={passwordHintId}>The password should contain at least 18 characters</p></>);}exportdefaultfunctionApp(){return(<><h2>Choose password</h2><PasswordField/><h2>Confirm password</h2><PasswordField/></>);}"
        },
        {
          "type": "p",
          "text": "Watch this videoto see the difference in the user experience with assistive technologies."
        },
        {
          "type": "p",
          "text": "Withserver rendering,useIdrequires an identical component tree on the server and the client. If the trees you render on the server and the client don’t match exactly, the generated IDs won’t match."
        },
        {
          "type": "p",
          "text": "You might be wondering whyuseIdis better than incrementing a global variable likenextId++. The primary benefit ofuseIdis that React ensures that it works withserver rendering.During server rendering, your components generate HTML output. Later, on the client,hydrationattaches your event handlers to the generated HTML. For hydration to work, the client output must match the server HTML. This is very difficult to guarantee with an incrementing counter because the order in which the Client Components are hydrated may not match the order in which the server HTML was emitted. By callinguseId, you ensure that hydration will work, and the output will match between the server and the client. Inside React,useIdis generated from the “parent path” of the calling component. This is why, if the client and the server tree are the same, the “parent path” will match up regardless of rendering order."
        },
        {
          "type": "p",
          "text": "If you need to give IDs to multiple related elements, you can calluseIdto generate a shared prefix for them:"
        },
        {
          "type": "code",
          "code": "import{useId}from'react';exportdefaultfunctionForm(){constid=useId();return(<form><labelhtmlFor={id+'-firstName'}>First Name:</label><inputid={id+'-firstName'}type=\"text\"/><hr/><labelhtmlFor={id+'-lastName'}>Last Name:</label><inputid={id+'-lastName'}type=\"text\"/></form>);}"
        },
        {
          "type": "p",
          "text": "This lets you avoid callinguseIdfor every single element that needs a unique ID."
        },
        {
          "type": "p",
          "text": "If you render multiple independent React applications on a single page, passidentifierPrefixas an option to yourcreateRootorhydrateRootcalls. This ensures that the IDs generated by the two different apps never clash because every identifier generated withuseIdwill start with the distinct prefix you’ve specified."
        },
        {
          "type": "code",
          "code": "import{createRoot}from'react-dom/client';importAppfrom'./App.js';import'./styles.css';constroot1=createRoot(document.getElementById('root1'),{identifierPrefix:'my-first-app-'});root1.render(<App/>);constroot2=createRoot(document.getElementById('root2'),{identifierPrefix:'my-second-app-'});root2.render(<App/>);"
        },
        {
          "type": "p",
          "text": "If yourender multiple independent React apps on the same page, and some of these apps are server-rendered, make sure that theidentifierPrefixyou pass to thehydrateRootcall on the client side is the same as theidentifierPrefixyou pass to theserver APIssuch asrenderToPipeableStream."
        },
        {
          "type": "code",
          "code": "// Serverimport{renderToPipeableStream}from'react-dom/server';const{pipe}=renderToPipeableStream(<App/>,{identifierPrefix:'react-app1'});"
        },
        {
          "type": "code",
          "code": "// Clientimport{hydrateRoot}from'react-dom/client';constdomNode=document.getElementById('root');constroot=hydrateRoot(domNode,reactNode,{identifierPrefix:'react-app1'});"
        },
        {
          "type": "p",
          "text": "You do not need to passidentifierPrefixif you only have one React app on the page."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useImperativeHandle",
      "title": "useImperativeHandle – React",
      "content": [
        {
          "type": "p",
          "text": "useImperativeHandleis a React Hook that lets you customize the handle exposed as aref."
        },
        {
          "type": "code",
          "code": "useImperativeHandle(ref,createHandle,dependencies?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseImperativeHandle(ref, createHandle, dependencies?)",
            "useImperativeHandle(ref, createHandle, dependencies?)",
            "UsageExposing a custom ref handle to the parent componentExposing your own imperative methods",
            "Exposing a custom ref handle to the parent component",
            "Exposing your own imperative methods"
          ]
        },
        {
          "type": "p",
          "text": "CalluseImperativeHandleat the top level of your component to customize the ref handle it exposes:"
        },
        {
          "type": "code",
          "code": "import{forwardRef,useImperativeHandle}from'react';constMyInput=forwardRef(functionMyInput(props,ref){useImperativeHandle(ref,()=>{return{// ... your methods ...};},[]);// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "ref: Therefyou received as the second argument from theforwardRefrender function.",
            "createHandle: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.",
            "optionaldependencies: The list of all reactive values referenced inside of thecreateHandlecode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison. If a re-render resulted in a change to some dependency, or if you omitted this argument, yourcreateHandlefunction will re-execute, and the newly created handle will be assigned to the ref."
          ]
        },
        {
          "type": "p",
          "text": "useImperativeHandlereturnsundefined."
        },
        {
          "type": "p",
          "text": "By default, components don’t expose their DOM nodes to parent components. For example, if you want the parent component ofMyInputtohave accessto the<input>DOM node, you have to opt in withforwardRef:"
        },
        {
          "type": "code",
          "code": "import{forwardRef}from'react';constMyInput=forwardRef(functionMyInput(props,ref){return<input{...props}ref={ref}/>;});"
        },
        {
          "type": "p",
          "text": "With the code above,a ref toMyInputwill receive the<input>DOM node.However, you can expose a custom value instead. To customize the exposed handle, calluseImperativeHandleat the top level of your component:"
        },
        {
          "type": "code",
          "code": "import{forwardRef,useImperativeHandle}from'react';constMyInput=forwardRef(functionMyInput(props,ref){useImperativeHandle(ref,()=>{return{// ... your methods ...};},[]);return<input{...props}/>;});"
        },
        {
          "type": "p",
          "text": "Note that in the code above, therefis no longer forwarded to the<input>. For example, suppose you don’t want to expose the entire<input>DOM node, but you want to expose two of its methods:focusandscrollIntoView. To do this, keep the real browser DOM in a separate ref. Then useuseImperativeHandleto expose a handle with only the methods that you want the parent component to call:"
        },
        {
          "type": "code",
          "code": "import{forwardRef,useRef,useImperativeHandle}from'react';constMyInput=forwardRef(functionMyInput(props,ref){constinputRef=useRef(null);useImperativeHandle(ref,()=>{return{focus(){inputRef.current.focus();},scrollIntoView(){inputRef.current.scrollIntoView();},};},[]);return<input{...props}ref={inputRef}/>;});"
        },
        {
          "type": "p",
          "text": "Now, if the parent component gets a ref toMyInput, it will be able to call thefocusandscrollIntoViewmethods on it. However, it will not have full access to the underlying<input>DOM node."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';importMyInputfrom'./MyInput.js';exportdefaultfunctionForm(){constref=useRef(null);functionhandleClick(){ref.current.focus();// This won't work because the DOM node isn't exposed:// ref.current.style.opacity = 0.5;}return(<form><MyInputplaceholder=\"Enter your name\"ref={ref}/><buttontype=\"button\"onClick={handleClick}>Edit</button></form>);}"
        },
        {
          "type": "p",
          "text": "The methods you expose via an imperative handle don’t have to match the DOM methods exactly. For example, thisPostcomponent exposes ascrollAndFocusAddCommentmethod via an imperative handle. This lets the parentPagescroll the list of commentsandfocus the input field when you click the button:"
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';importPostfrom'./Post.js';exportdefaultfunctionPage(){constpostRef=useRef(null);functionhandleClick(){postRef.current.scrollAndFocusAddComment();}return(<><buttononClick={handleClick}>Write a comment</button><Postref={postRef}/></>);}"
        },
        {
          "type": "p",
          "text": "Do not overuse refs.You should only use refs forimperativebehaviors that you can’t express as props: for example, scrolling to a node, focusing a node, triggering an animation, selecting text, and so on. If you can express something as a prop, you should not use a ref.For example, instead of exposing an imperative handle like{ open, close }from aModalcomponent, it is better to takeisOpenas a prop like<Modal isOpen={isOpen} />.Effectscan help you expose imperative behaviors via props."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useInsertionEffect",
      "title": "useInsertionEffect – React",
      "content": [
        {
          "type": "p",
          "text": "useInsertionEffectis for CSS-in-JS library authors. Unless you are working on a CSS-in-JS library and need a place to inject the styles, you probably wantuseEffectoruseLayoutEffectinstead."
        },
        {
          "type": "p",
          "text": "useInsertionEffectallows inserting elements into the DOM before any layout Effects fire."
        },
        {
          "type": "code",
          "code": "useInsertionEffect(setup,dependencies?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseInsertionEffect(setup, dependencies?)",
            "useInsertionEffect(setup, dependencies?)",
            "UsageInjecting dynamic styles from CSS-in-JS libraries",
            "Injecting dynamic styles from CSS-in-JS libraries"
          ]
        },
        {
          "type": "p",
          "text": "CalluseInsertionEffectto insert styles before any Effects fire that may need to read layout:"
        },
        {
          "type": "code",
          "code": "import{useInsertionEffect}from'react';// Inside your CSS-in-JS libraryfunctionuseCSS(rule){useInsertionEffect(()=>{// ... inject <style> tags here ...});returnrule;}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "setup: The function with your Effect’s logic. Your setup function may also optionally return acleanupfunction. When your component is added to the DOM, but before any layout Effects fire, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. When your component is removed from the DOM, React will run your cleanup function.",
            "optionaldependencies: The list of all reactive values referenced inside of thesetupcode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison algorithm. If you don’t specify the dependencies at all, your Effect will re-run after every re-render of the component."
          ]
        },
        {
          "type": "p",
          "text": "useInsertionEffectreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "Effects only run on the client. They don’t run during server rendering.",
            "You can’t update state from insideuseInsertionEffect.",
            "By the timeuseInsertionEffectruns, refs are not attached yet.",
            "useInsertionEffectmay run either before or after the DOM has been updated. You shouldn’t rely on the DOM being updated at any particular time.",
            "Unlike other types of Effects, which fire cleanup for every Effect and then setup for every Effect,useInsertionEffectwill fire both cleanup and setup one component at a time. This results in an “interleaving” of the cleanup and setup functions."
          ]
        },
        {
          "type": "p",
          "text": "Traditionally, you would style React components using plain CSS."
        },
        {
          "type": "code",
          "code": "// In your JS file:<buttonclassName=\"success\"/>// In your CSS file:.success{color:green;}"
        },
        {
          "type": "p",
          "text": "Some teams prefer to author styles directly in JavaScript code instead of writing CSS files. This usually requires using a CSS-in-JS library or a tool. There are three common approaches to CSS-in-JS:"
        },
        {
          "type": "list",
          "items": [
            "Static extraction to CSS files with a compiler",
            "Inline styles, e.g.<div style={{ opacity: 1 }}>",
            "Runtime injection of<style>tags"
          ]
        },
        {
          "type": "p",
          "text": "If you use CSS-in-JS, we recommend a combination of the first two approaches (CSS files for static styles, inline styles for dynamic styles).We don’t recommend runtime<style>tag injection for two reasons:"
        },
        {
          "type": "list",
          "items": [
            "Runtime injection forces the browser to recalculate the styles a lot more often.",
            "Runtime injection can be very slow if it happens at the wrong time in the React lifecycle."
          ]
        },
        {
          "type": "p",
          "text": "The first problem is not solvable, butuseInsertionEffecthelps you solve the second problem. CalluseInsertionEffectto insert the styles before any layout Effects fire:"
        },
        {
          "type": "code",
          "code": "// Inside your CSS-in-JS libraryletisInserted=newSet();functionuseCSS(rule){useInsertionEffect(()=>{// As explained earlier, we don't recommend runtime injection of <style> tags.// But if you have to do it, then it's important to do in useInsertionEffect.if(!isInserted.has(rule)){isInserted.add(rule);document.head.appendChild(getStyleForRule(rule));}});returnrule;}functionButton(){constclassName=useCSS('...');return<divclassName={className}/>;}"
        },
        {
          "type": "p",
          "text": "Similarly touseEffect,useInsertionEffectdoes not run on the server. If you need to collect which CSS rules have been used on the server, you can do it during rendering:"
        },
        {
          "type": "code",
          "code": "letcollectedRulesSet=newSet();functionuseCSS(rule){if(typeofwindow==='undefined'){collectedRulesSet.add(rule);}useInsertionEffect(()=>{// ...});returnrule;}"
        },
        {
          "type": "p",
          "text": "Read more about upgrading CSS-in-JS libraries with runtime injection touseInsertionEffect."
        },
        {
          "type": "p",
          "text": "If you insert styles during rendering and React is processing anon-blocking update,the browser will recalculate the styles every single frame while rendering a component tree, which can beextremely slow. useInsertionEffectis better than inserting styles duringuseLayoutEffectoruseEffectbecause it ensures that by the time other Effects run in your components, the<style>tags have already been inserted. Otherwise, layout calculations in regular Effects would be wrong due to outdated styles."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useLayoutEffect",
      "title": "useLayoutEffect – React",
      "content": [
        {
          "type": "p",
          "text": "useLayoutEffectcan hurt performance. PreferuseEffectwhen possible."
        },
        {
          "type": "p",
          "text": "useLayoutEffectis a version ofuseEffectthat fires before the browser repaints the screen."
        },
        {
          "type": "code",
          "code": "useLayoutEffect(setup,dependencies?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseLayoutEffect(setup, dependencies?)",
            "useLayoutEffect(setup, dependencies?)",
            "UsageMeasuring layout before the browser repaints the screen",
            "Measuring layout before the browser repaints the screen",
            "TroubleshootingI’m getting an error: “useLayoutEffectdoes nothing on the server”",
            "I’m getting an error: “useLayoutEffectdoes nothing on the server”"
          ]
        },
        {
          "type": "p",
          "text": "CalluseLayoutEffectto perform the layout measurements before the browser repaints the screen:"
        },
        {
          "type": "code",
          "code": "import{useState,useRef,useLayoutEffect}from'react';functionTooltip(){constref=useRef(null);const[tooltipHeight,setTooltipHeight]=useState(0);useLayoutEffect(()=>{const{height}=ref.current.getBoundingClientRect();setTooltipHeight(height);},[]);// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "setup: The function with your Effect’s logic. Your setup function may also optionally return acleanupfunction. Before your component is added to the DOM, React will run your setup function. After every re-render with changed dependencies, React will first run the cleanup function (if you provided it) with the old values, and then run your setup function with the new values. Before your component is removed from the DOM, React will run your cleanup function.",
            "optionaldependencies: The list of all reactive values referenced inside of thesetupcode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison. If you omit this argument, your Effect will re-run after every re-render of the component."
          ]
        },
        {
          "type": "p",
          "text": "useLayoutEffectreturnsundefined."
        },
        {
          "type": "list",
          "items": [
            "useLayoutEffectis a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a component and move the Effect there.",
            "When Strict Mode is on, React willrun one extra development-only setup+cleanup cyclebefore the first real setup. This is a stress-test that ensures that your cleanup logic “mirrors” your setup logic and that it stops or undoes whatever the setup is doing. If this causes a problem,implement the cleanup function.",
            "If some of your dependencies are objects or functions defined inside the component, there is a risk that they willcause the Effect to re-run more often than needed.To fix this, remove unnecessaryobjectandfunctiondependencies. You can alsoextract state updatesandnon-reactive logicoutside of your Effect.",
            "Effectsonly run on the client.They don’t run during server rendering.",
            "The code insideuseLayoutEffectand all state updates scheduled from itblock the browser from repainting the screen.When used excessively, this makes your app slow. When possible, preferuseEffect.",
            "If you trigger a state update insideuseLayoutEffect, React will execute all remaining Effects immediately includinguseEffect."
          ]
        },
        {
          "type": "p",
          "text": "Most components don’t need to know their position and size on the screen to decide what to render. They only return some JSX. Then the browser calculates theirlayout(position and size) and repaints the screen. Sometimes, that’s not enough. Imagine a tooltip that appears next to some element on hover. If there’s enough space, the tooltip should appear above the element, but if it doesn’t fit, it should appear below. In order to render the tooltip at the right final position, you need to know its height (i.e. whether it fits at the top). To do this, you need to render in two passes:"
        },
        {
          "type": "list",
          "items": [
            "Render the tooltip anywhere (even with a wrong position).",
            "Measure its height and decide where to place the tooltip.",
            "Render the tooltipagainin the correct place."
          ]
        },
        {
          "type": "p",
          "text": "All of this needs to happen before the browser repaints the screen.You don’t want the user to see the tooltip moving. CalluseLayoutEffectto perform the layout measurements before the browser repaints the screen:"
        },
        {
          "type": "code",
          "code": "functionTooltip(){constref=useRef(null);const[tooltipHeight,setTooltipHeight]=useState(0);// You don't know real height yetuseLayoutEffect(()=>{const{height}=ref.current.getBoundingClientRect();setTooltipHeight(height);// Re-render now that you know the real height},[]);// ...use tooltipHeight in the rendering logic below...}"
        },
        {
          "type": "p",
          "text": "Here’s how this works step by step:"
        },
        {
          "type": "list",
          "items": [
            "Tooltiprenders with the initialtooltipHeight = 0(so the tooltip may be wrongly positioned).",
            "React places it in the DOM and runs the code inuseLayoutEffect.",
            "YouruseLayoutEffectmeasures the heightof the tooltip content and triggers an immediate re-render.",
            "Tooltiprenders again with the realtooltipHeight(so the tooltip is correctly positioned).",
            "React updates it in the DOM, and the browser finally displays the tooltip."
          ]
        },
        {
          "type": "p",
          "text": "Hover over the buttons below and see how the tooltip adjusts its position depending on whether it fits:"
        },
        {
          "type": "code",
          "code": "import{useRef,useLayoutEffect,useState}from'react';import{createPortal}from'react-dom';importTooltipContainerfrom'./TooltipContainer.js';exportdefaultfunctionTooltip({children,targetRect}){constref=useRef(null);const[tooltipHeight,setTooltipHeight]=useState(0);useLayoutEffect(()=>{const{height}=ref.current.getBoundingClientRect();setTooltipHeight(height);console.log('Measured tooltip height: '+height);},[]);lettooltipX=0;lettooltipY=0;if(targetRect!==null){tooltipX=targetRect.left;tooltipY=targetRect.top-tooltipHeight;if(tooltipY<0){// It doesn't fit above, so place below.tooltipY=targetRect.bottom;}}returncreatePortal(<TooltipContainerx={tooltipX}y={tooltipY}contentRef={ref}>{children}</TooltipContainer>,document.body);}"
        },
        {
          "type": "p",
          "text": "Notice that even though theTooltipcomponent has to render in two passes (first, withtooltipHeightinitialized to0and then with the real measured height), you only see the final result. This is why you needuseLayoutEffectinstead ofuseEffectfor this example. Let’s look at the difference in detail below."
        },
        {
          "type": "p",
          "text": "React guarantees that the code insideuseLayoutEffectand any state updates scheduled inside it will be processedbefore the browser repaints the screen.This lets you render the tooltip, measure it, and re-render the tooltip again without the user noticing the first extra render. In other words,useLayoutEffectblocks the browser from painting."
        },
        {
          "type": "code",
          "code": "import{useRef,useLayoutEffect,useState}from'react';import{createPortal}from'react-dom';importTooltipContainerfrom'./TooltipContainer.js';exportdefaultfunctionTooltip({children,targetRect}){constref=useRef(null);const[tooltipHeight,setTooltipHeight]=useState(0);useLayoutEffect(()=>{const{height}=ref.current.getBoundingClientRect();setTooltipHeight(height);},[]);lettooltipX=0;lettooltipY=0;if(targetRect!==null){tooltipX=targetRect.left;tooltipY=targetRect.top-tooltipHeight;if(tooltipY<0){// It doesn't fit above, so place below.tooltipY=targetRect.bottom;}}returncreatePortal(<TooltipContainerx={tooltipX}y={tooltipY}contentRef={ref}>{children}</TooltipContainer>,document.body);}"
        },
        {
          "type": "p",
          "text": "Rendering in two passes and blocking the browser hurts performance. Try to avoid this when you can."
        },
        {
          "type": "p",
          "text": "The purpose ofuseLayoutEffectis to let your componentuse layout information for rendering:"
        },
        {
          "type": "list",
          "items": [
            "Render the initial content.",
            "Measure the layoutbefore the browser repaints the screen.",
            "Render the final content using the layout information you’ve read."
          ]
        },
        {
          "type": "p",
          "text": "When you or your framework usesserver rendering, your React app renders to HTML on the server for the initial render. This lets you show the initial HTML before the JavaScript code loads. The problem is that on the server, there is no layout information. In theearlier example, theuseLayoutEffectcall in theTooltipcomponent lets it position itself correctly (either above or below content) depending on the content height. If you tried to renderTooltipas a part of the initial server HTML, this would be impossible to determine. On the server, there is no layout yet! So, even if you rendered it on the server, its position would “jump” on the client after the JavaScript loads and runs. Usually, components that rely on layout information don’t need to render on the server anyway. For example, it probably doesn’t make sense to show aTooltipduring the initial render. It is triggered by a client interaction. However, if you’re running into this problem, you have a few different options:"
        },
        {
          "type": "list",
          "items": [
            "ReplaceuseLayoutEffectwithuseEffect.This tells React that it’s okay to display the initial render result without blocking the paint (because the original HTML will become visible before your Effect runs).",
            "Alternatively,mark your component as client-only.This tells React to replace its content up to the closest<Suspense>boundary with a loading fallback (for example, a spinner or a glimmer) during server rendering.",
            "Alternatively, you can render a component withuseLayoutEffectonly after hydration. Keep a booleanisMountedstate that’s initialized tofalse, and set it totrueinside auseEffectcall. Your rendering logic can then be likereturn isMounted ? <RealContent /> : <FallbackContent />. On the server and during the hydration, the user will seeFallbackContentwhich should not calluseLayoutEffect. Then React will replace it withRealContentwhich runs on the client only and can includeuseLayoutEffectcalls.",
            "If you synchronize your component with an external data store and rely onuseLayoutEffectfor different reasons than measuring layout, consideruseSyncExternalStoreinstead whichsupports server rendering."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useMemo",
      "title": "useMemo – React",
      "content": [
        {
          "type": "p",
          "text": "useMemois a React Hook that lets you cache the result of a calculation between re-renders."
        },
        {
          "type": "code",
          "code": "constcachedValue=useMemo(calculateValue,dependencies)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseMemo(calculateValue, dependencies)",
            "useMemo(calculateValue, dependencies)",
            "UsageSkipping expensive recalculationsSkipping re-rendering of componentsPreventing an Effect from firing too oftenMemoizing a dependency of another HookMemoizing a function",
            "Skipping expensive recalculations",
            "Skipping re-rendering of components",
            "Preventing an Effect from firing too often",
            "Memoizing a dependency of another Hook",
            "Memoizing a function",
            "TroubleshootingMy calculation runs twice on every re-renderMyuseMemocall is supposed to return an object, but returns undefinedEvery time my component renders, the calculation inuseMemore-runsI need to calluseMemofor each list item in a loop, but it’s not allowed",
            "My calculation runs twice on every re-render",
            "MyuseMemocall is supposed to return an object, but returns undefined",
            "Every time my component renders, the calculation inuseMemore-runs",
            "I need to calluseMemofor each list item in a loop, but it’s not allowed"
          ]
        },
        {
          "type": "p",
          "text": "CalluseMemoat the top level of your component to cache a calculation between re-renders:"
        },
        {
          "type": "code",
          "code": "import{useMemo}from'react';functionTodoList({todos,tab}){constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "calculateValue: The function calculating the value that you want to cache. It should be pure, should take no arguments, and should return a value of any type. React will call your function during the initial render. On next renders, React will return the same value again if thedependencieshave not changed since the last render. Otherwise, it will callcalculateValue, return its result, and store it so it can be reused later.",
            "dependencies: The list of all reactive values referenced inside of thecalculateValuecode. Reactive values include props, state, and all the variables and functions declared directly inside your component body. If your linter isconfigured for React, it will verify that every reactive value is correctly specified as a dependency. The list of dependencies must have a constant number of items and be written inline like[dep1, dep2, dep3]. React will compare each dependency with its previous value using theObject.iscomparison."
          ]
        },
        {
          "type": "p",
          "text": "On the initial render,useMemoreturns the result of callingcalculateValuewith no arguments. During next renders, it will either return an already stored value from the last render (if the dependencies haven’t changed), or callcalculateValueagain, and return the result thatcalculateValuehas returned."
        },
        {
          "type": "list",
          "items": [
            "useMemois a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "In Strict Mode, React willcall your calculation function twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. If your calculation function is pure (as it should be), this should not affect your logic. The result from one of the calls will be ignored.",
            "Reactwill not throw away the cached value unless there is a specific reason to do that.For example, in development, React throws away the cache when you edit the file of your component. Both in development and in production, React will throw away the cache if your component suspends during the initial mount. In the future, React may add more features that take advantage of throwing away the cache—for example, if React adds built-in support for virtualized lists in the future, it would make sense to throw away the cache for items that scroll out of the virtualized table viewport. This should be fine if you rely onuseMemosolely as a performance optimization. Otherwise, astate variableor arefmay be more appropriate."
          ]
        },
        {
          "type": "p",
          "text": "Caching return values like this is also known asmemoization,which is why this Hook is calleduseMemo."
        },
        {
          "type": "p",
          "text": "To cache a calculation between re-renders, wrap it in auseMemocall at the top level of your component:"
        },
        {
          "type": "code",
          "code": "import{useMemo}from'react';functionTodoList({todos,tab,theme}){constvisibleTodos=useMemo(() => filterTodos(todos, tab),[todos, tab]);// ...}"
        },
        {
          "type": "p",
          "text": "You need to pass two things touseMemo:"
        },
        {
          "type": "list",
          "items": [
            "Acalculation functionthat takes no arguments, like() =>, and returns what you wanted to calculate.",
            "Alist of dependenciesincluding every value within your component that’s used inside your calculation."
          ]
        },
        {
          "type": "p",
          "text": "On the initial render, thevalueyou’ll get fromuseMemowill be the result of calling yourcalculation. On every subsequent render, React will compare thedependencieswith the dependencies you passed during the last render. If none of the dependencies have changed (compared withObject.is),useMemowill return the value you already calculated before. Otherwise, React will re-run your calculation and return the new value. In other words,useMemocaches a calculation result between re-renders until its dependencies change. Let’s walk through an example to see when this is useful. By default, React will re-run the entire body of your component every time that it re-renders. For example, if thisTodoListupdates its state or receives new props from its parent, thefilterTodosfunction will re-run:"
        },
        {
          "type": "code",
          "code": "functionTodoList({todos,tab,theme}){constvisibleTodos=filterTodos(todos,tab);// ...}"
        },
        {
          "type": "p",
          "text": "Usually, this isn’t a problem because most calculations are very fast. However, if you’re filtering or transforming a large array, or doing some expensive computation, you might want to skip doing it again if data hasn’t changed. If bothtodosandtabare the same as they were during the last render, wrapping the calculation inuseMemolike earlier lets you reusevisibleTodosyou’ve already calculated before. This type of caching is calledmemoization."
        },
        {
          "type": "p",
          "text": "You should only rely onuseMemoas a performance optimization.If your code doesn’t work without it, find the underlying problem and fix it first. Then you may adduseMemoto improve performance."
        },
        {
          "type": "p",
          "text": "In general, unless you’re creating or looping over thousands of objects, it’s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:"
        },
        {
          "type": "code",
          "code": "console.time('filter array');constvisibleTodos=filterTodos(todos,tab);console.timeEnd('filter array');"
        },
        {
          "type": "p",
          "text": "Perform the interaction you’re measuring (for example, typing into the input). You will then see logs likefilter array: 0.15msin your console. If the overall logged time adds up to a significant amount (say,1msor more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation inuseMemoto verify whether the total logged time has decreased for that interaction or not:"
        },
        {
          "type": "code",
          "code": "console.time('filter array');constvisibleTodos=useMemo(()=>{returnfilterTodos(todos,tab);// Skipped if todos and tab haven't changed},[todos,tab]);console.timeEnd('filter array');"
        },
        {
          "type": "p",
          "text": "useMemowon’t make thefirstrender faster. It only helps you skip unnecessary work on updates. Keep in mind that your machine is probably faster than your users’ so it’s a good idea to test the performance with an artificial slowdown. For example, Chrome offers aCPU Throttlingoption for this. Also note that measuring performance in development will not give you the most accurate results. (For example, whenStrict Modeis on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have."
        },
        {
          "type": "p",
          "text": "If your app is like this site, and most interactions are coarse (like replacing a page or an entire section), memoization is usually unnecessary. On the other hand, if your app is more like a drawing editor, and most interactions are granular (like moving shapes), then you might find memoization very helpful. Optimizing withuseMemois only valuable in a few cases:"
        },
        {
          "type": "list",
          "items": [
            "The calculation you’re putting inuseMemois noticeably slow, and its dependencies rarely change.",
            "You pass it as a prop to a component wrapped inmemo.You want to skip re-rendering if the value hasn’t changed. Memoization lets your component re-render only when dependencies aren’t the same.",
            "The value you’re passing is later used as a dependency of some Hook. For example, maybe anotheruseMemocalculation value depends on it. Or maybe you are depending on this value fromuseEffect."
          ]
        },
        {
          "type": "p",
          "text": "There is no benefit to wrapping a calculation inuseMemoin other cases. There is no significant harm to doing that either, so some teams choose to not think about individual cases, and memoize as much as possible. The downside of this approach is that code becomes less readable. Also, not all memoization is effective: a single value that’s “always new” is enough to break memoization for an entire component. In practice, you can make a lot of memoization unnecessary by following a few principles:"
        },
        {
          "type": "list",
          "items": [
            "When a component visually wraps other components, let itaccept JSX as children.This way, when the wrapper component updates its own state, React knows that its children don’t need to re-render.",
            "Prefer local state and don’tlift state upany further than necessary. For example, don’t keep transient state like forms and whether an item is hovered at the top of your tree or in a global state library.",
            "Keep yourrendering logic pure.If re-rendering a component causes a problem or produces some noticeable visual artifact, it’s a bug in your component! Fix the bug instead of adding memoization.",
            "Avoidunnecessary Effects that update state.Most performance problems in React apps are caused by chains of updates originating from Effects that cause your components to render over and over.",
            "Try toremove unnecessary dependencies from your Effects.For example, instead of memoization, it’s often simpler to move some object or a function inside an Effect or outside the component."
          ]
        },
        {
          "type": "p",
          "text": "If a specific interaction still feels laggy,use the React Developer Tools profilerto see which components would benefit the most from memoization, and add memoization where needed. These principles make your components easier to debug and understand, so it’s good to follow them in any case. In the long term, we’re researchingdoing granular memoization automaticallyto solve this once and for all."
        },
        {
          "type": "p",
          "text": "In this example, thefilterTodosimplementation isartificially slowed downso that you can see what happens when some JavaScript function you’re calling during rendering is genuinely slow. Try switching the tabs and toggling the theme. Switching the tabs feels slow because it forces the slowed downfilterTodosto re-execute. That’s expected because thetabhas changed, and so the entire calculationneedsto re-run. (If you’re curious why it runs twice, it’s explainedhere.) Toggle the theme.Thanks touseMemo, it’s fast despite the artificial slowdown!The slowfilterTodoscall was skipped because bothtodosandtab(which you pass as dependencies touseMemo) haven’t changed since the last render."
        },
        {
          "type": "code",
          "code": "import{useMemo}from'react';import{filterTodos}from'./utils.js'exportdefaultfunctionTodoList({todos,theme,tab}){constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);return(<divclassName={theme}><p><b>Note:<code>filterTodos</code>is artificially slowed down!</b></p><ul>{visibleTodos.map(todo=>(<likey={todo.id}>{todo.completed?<s>{todo.text}</s>:todo.text}</li>))}</ul></div>);}"
        },
        {
          "type": "p",
          "text": "In some cases,useMemocan also help you optimize performance of re-rendering child components. To illustrate this, let’s say thisTodoListcomponent passes thevisibleTodosas a prop to the childListcomponent:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTodoList({todos,tab,theme}){// ...return(<divclassName={theme}><Listitems={visibleTodos}/></div>);}"
        },
        {
          "type": "p",
          "text": "You’ve noticed that toggling thethemeprop freezes the app for a moment, but if you remove<List />from your JSX, it feels fast. This tells you that it’s worth trying to optimize theListcomponent. By default, when a component re-renders, React re-renders all of its children recursively.This is why, whenTodoListre-renders with a differenttheme, theListcomponentalsore-renders. This is fine for components that don’t require much calculation to re-render. But if you’ve verified that a re-render is slow, you can tellListto skip re-rendering when its props are the same as on last render by wrapping it inmemo:"
        },
        {
          "type": "code",
          "code": "import{memo}from'react';constList=memo(functionList({items}){// ...});"
        },
        {
          "type": "p",
          "text": "With this change,Listwill skip re-rendering if all of its props are thesameas on the last render.This is where caching the calculation becomes important! Imagine that you calculatedvisibleTodoswithoutuseMemo:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTodoList({todos,tab,theme}){// Every time the theme changes, this will be a different array...constvisibleTodos=filterTodos(todos,tab);return(<divclassName={theme}>{/* ... so List's props will never be the same, and it will re-render every time */}<Listitems={visibleTodos}/></div>);}"
        },
        {
          "type": "p",
          "text": "In the above example, thefilterTodosfunction always creates adifferentarray,similar to how the{}object literal always creates a new object. Normally, this wouldn’t be a problem, but it means thatListprops will never be the same, and yourmemooptimization won’t work. This is whereuseMemocomes in handy:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTodoList({todos,tab,theme}){// Tell React to cache your calculation between re-renders...constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]// ...so as long as these dependencies don't change...);return(<divclassName={theme}>{/* ...List will receive the same props and can skip re-rendering */}<Listitems={visibleTodos}/></div>);}"
        },
        {
          "type": "p",
          "text": "By wrapping thevisibleTodoscalculation inuseMemo, you ensure that it has thesamevalue between the re-renders(until dependencies change). You don’thave towrap a calculation inuseMemounless you do it for some specific reason. In this example, the reason is that you pass it to a component wrapped inmemo,and this lets it skip re-rendering. There are a few other reasons to adduseMemowhich are described further on this page."
        },
        {
          "type": "p",
          "text": "Instead of wrappingListinmemo, you could wrap the<List />JSX node itself inuseMemo:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTodoList({todos,tab,theme}){constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);constchildren=useMemo(()=><Listitems={visibleTodos}/>,[visibleTodos]);return(<divclassName={theme}>{children}</div>);}"
        },
        {
          "type": "p",
          "text": "The behavior would be the same. If thevisibleTodoshaven’t changed,Listwon’t be re-rendered. A JSX node like<List items={visibleTodos} />is an object like{ type: List, props: { items: visibleTodos } }. Creating this object is very cheap, but React doesn’t know whether its contents is the same as last time or not. This is why by default, React will re-render theListcomponent. However, if React sees the same exact JSX as during the previous render, it won’t try to re-render your component. This is because JSX nodes areimmutable.A JSX node object could not have changed over time, so React knows it’s safe to skip a re-render. However, for this to work, the node has toactually be the same object, not merely look the same in code. This is whatuseMemodoes in this example. Manually wrapping JSX nodes intouseMemois not convenient. For example, you can’t do this conditionally. This is usually why you would wrap components withmemoinstead of wrapping JSX nodes."
        },
        {
          "type": "p",
          "text": "In this example, theListcomponent isartificially slowed downso that you can see what happens when a React component you’re rendering is genuinely slow. Try switching the tabs and toggling the theme. Switching the tabs feels slow because it forces the slowed downListto re-render. That’s expected because thetabhas changed, and so you need to reflect the user’s new choice on the screen. Next, try toggling the theme.Thanks touseMemotogether withmemo, it’s fast despite the artificial slowdown!TheListskipped re-rendering because thevisibleTodosarray has not changed since the last render. ThevisibleTodosarray has not changed because bothtodosandtab(which you pass as dependencies touseMemo) haven’t changed since the last render."
        },
        {
          "type": "code",
          "code": "import{useMemo}from'react';importListfrom'./List.js';import{filterTodos}from'./utils.js'exportdefaultfunctionTodoList({todos,theme,tab}){constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);return(<divclassName={theme}><p><b>Note:<code>List</code>is artificially slowed down!</b></p><Listitems={visibleTodos}/></div>);}"
        },
        {
          "type": "p",
          "text": "Sometimes, you might want to use a value inside anEffect:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');constoptions={serverUrl:'https://localhost:1234',roomId:roomId}useEffect(()=>{constconnection=createConnection(options);connection.connect();// ..."
        },
        {
          "type": "p",
          "text": "This creates a problem.Every reactive value must be declared as a dependency of your Effect.However, if you declareoptionsas a dependency, it will cause your Effect to constantly reconnect to the chat room:"
        },
        {
          "type": "code",
          "code": "useEffect(()=>{constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// 🔴 Problem: This dependency changes on every render// ..."
        },
        {
          "type": "p",
          "text": "To solve this, you can wrap the object you need to call from an Effect inuseMemo:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');constoptions=useMemo(()=>{return{serverUrl:'https://localhost:1234',roomId:roomId};},[roomId]);// ✅ Only changes when roomId changesuseEffect(()=>{constoptions=createOptions();constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[options]);// ✅ Only changes when createOptions changes// ..."
        },
        {
          "type": "p",
          "text": "This ensures that theoptionsobject is the same between re-renders ifuseMemoreturns the cached object. However, sinceuseMemois performance optimization, not a semantic guarantee, React may throw away the cached value ifthere is a specific reason to do that. This will also cause the effect to re-fire,so it’s even better to remove the need for a function dependencyby moving your objectinsidethe Effect:"
        },
        {
          "type": "code",
          "code": "functionChatRoom({roomId}){const[message,setMessage]=useState('');useEffect(()=>{constoptions={// ✅ No need for useMemo or object dependencies!serverUrl:'https://localhost:1234',roomId:roomId}constconnection=createConnection(options);connection.connect();return()=>connection.disconnect();},[roomId]);// ✅ Only changes when roomId changes// ..."
        },
        {
          "type": "p",
          "text": "Now your code is simpler and doesn’t needuseMemo.Learn more about removing Effect dependencies."
        },
        {
          "type": "p",
          "text": "Suppose you have a calculation that depends on an object created directly in the component body:"
        },
        {
          "type": "code",
          "code": "functionDropdown({allItems,text}){constsearchOptions={matchMode:'whole-word',text};constvisibleItems=useMemo(()=>{returnsearchItems(allItems,searchOptions);},[allItems,searchOptions]);// 🚩 Caution: Dependency on an object created in the component body// ..."
        },
        {
          "type": "p",
          "text": "Depending on an object like this defeats the point of memoization. When a component re-renders, all of the code directly inside the component body runs again.The lines of code creating thesearchOptionsobject will also run on every re-render.SincesearchOptionsis a dependency of youruseMemocall, and it’s different every time, React knows the dependencies are different, and recalculatesearchItemsevery time. To fix this, you could memoize thesearchOptionsobjectitselfbefore passing it as a dependency:"
        },
        {
          "type": "code",
          "code": "functionDropdown({allItems,text}){constsearchOptions=useMemo(()=>{return{matchMode:'whole-word',text};},[text]);// ✅ Only changes when text changesconstvisibleItems=useMemo(()=>{returnsearchItems(allItems,searchOptions);},[allItems,searchOptions]);// ✅ Only changes when allItems or searchOptions changes// ..."
        },
        {
          "type": "p",
          "text": "In the example above, if thetextdid not change, thesearchOptionsobject also won’t change. However, an even better fix is to move thesearchOptionsobject declarationinsideof theuseMemocalculation function:"
        },
        {
          "type": "code",
          "code": "functionDropdown({allItems,text}){constvisibleItems=useMemo(()=>{constsearchOptions={matchMode:'whole-word',text};returnsearchItems(allItems,searchOptions);},[allItems,text]);// ✅ Only changes when allItems or text changes// ..."
        },
        {
          "type": "p",
          "text": "Now your calculation depends ontextdirectly (which is a string and can’t “accidentally” become different)."
        },
        {
          "type": "p",
          "text": "Suppose theFormcomponent is wrapped inmemo.You want to pass a function to it as a prop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionProductPage({productId,referrer}){functionhandleSubmit(orderDetails){post('/product/'+productId+'/buy',{referrer,orderDetails});}return<FormonSubmit={handleSubmit}/>;}"
        },
        {
          "type": "p",
          "text": "Just as{}creates a different object, function declarations likefunction() {}and expressions like() => {}produce adifferentfunction on every re-render. By itself, creating a new function is not a problem. This is not something to avoid! However, if theFormcomponent is memoized, presumably you want to skip re-rendering it when no props have changed. A prop that isalwaysdifferent would defeat the point of memoization. To memoize a function withuseMemo, your calculation function would have to return another function:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage({productId,referrer}){consthandleSubmit=useMemo(()=>{return(orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails});};},[productId,referrer]);return<FormonSubmit={handleSubmit}/>;}"
        },
        {
          "type": "p",
          "text": "This looks clunky!Memoizing functions is common enough that React has a built-in Hook specifically for that. Wrap your functions intouseCallbackinstead ofuseMemoto avoid having to write an extra nested function:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionPage({productId,referrer}){consthandleSubmit=useCallback((orderDetails)=>{post('/product/'+productId+'/buy',{referrer,orderDetails});},[productId,referrer]);return<FormonSubmit={handleSubmit}/>;}"
        },
        {
          "type": "p",
          "text": "The two examples above are completely equivalent. The only benefit touseCallbackis that it lets you avoid writing an extra nested function inside. It doesn’t do anything else.Read more aboutuseCallback."
        },
        {
          "type": "p",
          "text": "InStrict Mode, React will call some of your functions twice instead of once:"
        },
        {
          "type": "code",
          "code": "functionTodoList({todos,tab}){// This component function will run twice for every render.constvisibleTodos=useMemo(()=>{// This calculation will run twice if any of the dependencies change.returnfilterTodos(todos,tab);},[todos,tab]);// ..."
        },
        {
          "type": "p",
          "text": "This is expected and shouldn’t break your code. Thisdevelopment-onlybehavior helps youkeep components pure.React uses the result of one of the calls, and ignores the result of the other call. As long as your component and calculation functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice and fix the mistake. For example, this impure calculation function mutates an array you received as a prop:"
        },
        {
          "type": "code",
          "code": "constvisibleTodos=useMemo(()=>{// 🚩 Mistake: mutating a proptodos.push({id:'last',text:'Go for a walk!'});constfiltered=filterTodos(todos,tab);returnfiltered;},[todos,tab]);"
        },
        {
          "type": "p",
          "text": "React calls your function twice, so you’d notice the todo is added twice. Your calculation shouldn’t change any existing objects, but it’s okay to change anynewobjects you created during the calculation. For example, if thefilterTodosfunction always returns adifferentarray, you can mutatethatarray instead:"
        },
        {
          "type": "code",
          "code": "constvisibleTodos=useMemo(()=>{constfiltered=filterTodos(todos,tab);// ✅ Correct: mutating an object you created during the calculationfiltered.push({id:'last',text:'Go for a walk!'});returnfiltered;},[todos,tab]);"
        },
        {
          "type": "p",
          "text": "Readkeeping components pureto learn more about purity. Also, check out the guides onupdating objectsandupdating arrayswithout mutation."
        },
        {
          "type": "p",
          "text": "This code doesn’t work:"
        },
        {
          "type": "code",
          "code": "// 🔴 You can't return an object from an arrow function with () => {constsearchOptions=useMemo(()=>{matchMode:'whole-word',text:text},[text]);"
        },
        {
          "type": "p",
          "text": "In JavaScript,() => {starts the arrow function body, so the{brace is not a part of your object. This is why it doesn’t return an object, and leads to mistakes. You could fix it by adding parentheses like({and}):"
        },
        {
          "type": "code",
          "code": "// This works, but is easy for someone to break againconstsearchOptions=useMemo(()=>({matchMode:'whole-word',text:text}),[text]);"
        },
        {
          "type": "p",
          "text": "However, this is still confusing and too easy for someone to break by removing the parentheses. To avoid this mistake, write areturnstatement explicitly:"
        },
        {
          "type": "code",
          "code": "// ✅ This works and is explicitconstsearchOptions=useMemo(()=>{return{matchMode:'whole-word',text:text};},[text]);"
        },
        {
          "type": "p",
          "text": "Make sure you’ve specified the dependency array as a second argument! If you forget the dependency array,useMemowill re-run the calculation every time:"
        },
        {
          "type": "code",
          "code": "functionTodoList({todos,tab}){// 🔴 Recalculates every time: no dependency arrayconstvisibleTodos=useMemo(()=>filterTodos(todos,tab));// ..."
        },
        {
          "type": "p",
          "text": "This is the corrected version passing the dependency array as a second argument:"
        },
        {
          "type": "code",
          "code": "functionTodoList({todos,tab}){// ✅ Does not recalculate unnecessarilyconstvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);// ..."
        },
        {
          "type": "p",
          "text": "If this doesn’t help, then the problem is that at least one of your dependencies is different from the previous render. You can debug this problem by manually logging your dependencies to the console:"
        },
        {
          "type": "code",
          "code": "constvisibleTodos=useMemo(()=>filterTodos(todos,tab),[todos,tab]);console.log([todos,tab]);"
        },
        {
          "type": "p",
          "text": "You can then right-click on the arrays from different re-renders in the console and select “Store as a global variable” for both of them. Assuming the first one got saved astemp1and the second one got saved astemp2, you can then use the browser console to check whether each dependency in both arrays is the same:"
        },
        {
          "type": "code",
          "code": "Object.is(temp1[0],temp2[0]);// Is the first dependency the same between the arrays?Object.is(temp1[1],temp2[1]);// Is the second dependency the same between the arrays?Object.is(temp1[2],temp2[2]);// ... and so on for every dependency ..."
        },
        {
          "type": "p",
          "text": "When you find which dependency breaks memoization, either find a way to remove it, ormemoize it as well."
        },
        {
          "type": "p",
          "text": "Suppose theChartcomponent is wrapped inmemo. You want to skip re-rendering everyChartin the list when theReportListcomponent re-renders. However, you can’t calluseMemoin a loop:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){return(<article>{items.map(item=>{// 🔴 You can't call useMemo in a loop like this:constdata=useMemo(()=>calculateReport(item),[item]);return(<figurekey={item.id}><Chartdata={data}/></figure>);})}</article>);}"
        },
        {
          "type": "p",
          "text": "Instead, extract a component for each item and memoize data for individual items:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){return(<article>{items.map(item=><Reportkey={item.id}item={item}/>)}</article>);}functionReport({item}){// ✅ Call useMemo at the top level:constdata=useMemo(()=>calculateReport(item),[item]);return(<figure><Chartdata={data}/></figure>);}"
        },
        {
          "type": "p",
          "text": "Alternatively, you could removeuseMemoand instead wrapReportitself inmemo.If theitemprop does not change,Reportwill skip re-rendering, soChartwill skip re-rendering too:"
        },
        {
          "type": "code",
          "code": "functionReportList({items}){// ...}constReport=memo(functionReport({item}){constdata=calculateReport(item);return(<figure><Chartdata={data}/></figure>);});"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useOptimistic",
      "title": "useOptimistic – React",
      "content": [
        {
          "type": "p",
          "text": "useOptimisticis a React Hook that lets you optimistically update the UI."
        },
        {
          "type": "code",
          "code": "const[optimisticState,addOptimistic]=useOptimistic(state,updateFn);"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseOptimistic(state, updateFn)",
            "useOptimistic(state, updateFn)",
            "UsageOptimistically updating forms",
            "Optimistically updating forms"
          ]
        },
        {
          "type": "p",
          "text": "useOptimisticis a React Hook that lets you show a different state while an async action is underway. It accepts some state as an argument and returns a copy of that state that can be different during the duration of an async action such as a network request. You provide a function that takes the current state and the input to the action, and returns the optimistic state to be used while the action is pending. This state is called the “optimistic” state because it is usually used to immediately present the user with the result of performing an action, even though the action actually takes time to complete."
        },
        {
          "type": "code",
          "code": "import{useOptimistic}from'react';functionAppContainer(){const[optimisticState,addOptimistic]=useOptimistic(state,// updateFn(currentState,optimisticValue)=>{// merge and return new state// with optimistic value});}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "state: the value to be returned initially and whenever no action is pending.",
            "updateFn(currentState, optimisticValue): a function that takes the current state and the optimistic value passed toaddOptimisticand returns the resulting optimistic state. It must be a pure function.updateFntakes in two parameters. ThecurrentStateand theoptimisticValue. The return value will be the merged value of thecurrentStateandoptimisticValue."
          ]
        },
        {
          "type": "list",
          "items": [
            "optimisticState: The resulting optimistic state. It is equal tostateunless an action is pending, in which case it is equal to the value returned byupdateFn.",
            "addOptimistic:addOptimisticis the dispatching function to call when you have an optimistic update. It takes one argument,optimisticValue, of any type and will call theupdateFnwithstateandoptimisticValue."
          ]
        },
        {
          "type": "p",
          "text": "TheuseOptimisticHook provides a way to optimistically update the user interface before a background operation, like a network request, completes. In the context of forms, this technique helps to make apps feel more responsive. When a user submits a form, instead of waiting for the server’s response to reflect the changes, the interface is immediately updated with the expected outcome. For example, when a user types a message into the form and hits the “Send” button, theuseOptimisticHook allows the message to immediately appear in the list with a “Sending…” label, even before the message is actually sent to a server. This “optimistic” approach gives the impression of speed and responsiveness. The form then attempts to truly send the message in the background. Once the server confirms the message has been received, the “Sending…” label is removed."
        },
        {
          "type": "code",
          "code": "import{useOptimistic,useState,useRef}from\"react\";import{deliverMessage}from\"./actions.js\";functionThread({messages,sendMessage}){constformRef=useRef();asyncfunctionformAction(formData){addOptimisticMessage(formData.get(\"message\"));formRef.current.reset();awaitsendMessage(formData);}const[optimisticMessages,addOptimisticMessage]=useOptimistic(messages,(state,newMessage)=>[...state,{text:newMessage,sending:true}]);return(<>{optimisticMessages.map((message,index)=>(<divkey={index}>{message.text}{!!message.sending&&<small>(Sending...)</small>}</div>))}<formaction={formAction}ref={formRef}><inputtype=\"text\"name=\"message\"placeholder=\"Hello!\"/><buttontype=\"submit\">Send</button></form></>);}exportdefaultfunctionApp(){const[messages,setMessages]=useState([{text:\"Hello there!\",sending:false,key:1}]);asyncfunctionsendMessage(formData){constsentMessage=awaitdeliverMessage(formData.get(\"message\"));setMessages((messages)=>[...messages,{text:sentMessage}]);}return<Threadmessages={messages}sendMessage={sendMessage}/>;}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useReducer",
      "title": "useReducer – React",
      "content": [
        {
          "type": "p",
          "text": "useReduceris a React Hook that lets you add areducerto your component."
        },
        {
          "type": "code",
          "code": "const[state,dispatch]=useReducer(reducer,initialArg,init?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseReducer(reducer, initialArg, init?)dispatchfunction",
            "useReducer(reducer, initialArg, init?)",
            "dispatchfunction",
            "UsageAdding a reducer to a componentWriting the reducer functionAvoiding recreating the initial state",
            "Adding a reducer to a component",
            "Writing the reducer function",
            "Avoiding recreating the initial state",
            "TroubleshootingI’ve dispatched an action, but logging gives me the old state valueI’ve dispatched an action, but the screen doesn’t updateA part of my reducer state becomes undefined after dispatchingMy entire reducer state becomes undefined after dispatchingI’m getting an error: “Too many re-renders”My reducer or initializer function runs twice",
            "I’ve dispatched an action, but logging gives me the old state value",
            "I’ve dispatched an action, but the screen doesn’t update",
            "A part of my reducer state becomes undefined after dispatching",
            "My entire reducer state becomes undefined after dispatching",
            "I’m getting an error: “Too many re-renders”",
            "My reducer or initializer function runs twice"
          ]
        },
        {
          "type": "p",
          "text": "CalluseReducerat the top level of your component to manage its state with areducer."
        },
        {
          "type": "code",
          "code": "import{useReducer}from'react';functionreducer(state,action){// ...}functionMyComponent(){const[state,dispatch]=useReducer(reducer,{age:42});// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "reducer: The reducer function that specifies how the state gets updated. It must be pure, should take the state and action as arguments, and should return the next state. State and action can be of any types.",
            "initialArg: The value from which the initial state is calculated. It can be a value of any type. How the initial state is calculated from it depends on the nextinitargument.",
            "optionalinit: The initializer function that should return the initial state. If it’s not specified, the initial state is set toinitialArg. Otherwise, the initial state is set to the result of callinginit(initialArg)."
          ]
        },
        {
          "type": "p",
          "text": "useReducerreturns an array with exactly two values:"
        },
        {
          "type": "list",
          "items": [
            "The current state. During the first render, it’s set toinit(initialArg)orinitialArg(if there’s noinit).",
            "Thedispatchfunctionthat lets you update the state to a different value and trigger a re-render."
          ]
        },
        {
          "type": "list",
          "items": [
            "useReduceris a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "Thedispatchfunction has a stable identity, so you will often see it omitted from Effect dependencies, but including it will not cause the Effect to fire. If the linter lets you omit a dependency without errors, it is safe to do.Learn more about removing Effect dependencies.",
            "In Strict Mode, React willcall your reducer and initializer twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. If your reducer and initializer are pure (as they should be), this should not affect your logic. The result from one of the calls is ignored."
          ]
        },
        {
          "type": "p",
          "text": "Thedispatchfunction returned byuseReducerlets you update the state to a different value and trigger a re-render. You need to pass the action as the only argument to thedispatchfunction:"
        },
        {
          "type": "code",
          "code": "const[state,dispatch]=useReducer(reducer,{age:42});functionhandleClick(){dispatch({type:'incremented_age'});// ..."
        },
        {
          "type": "p",
          "text": "React will set the next state to the result of calling thereducerfunction you’ve provided with the currentstateand the action you’ve passed todispatch."
        },
        {
          "type": "list",
          "items": [
            "action: The action performed by the user. It can be a value of any type. By convention, an action is usually an object with atypeproperty identifying it and, optionally, other properties with additional information."
          ]
        },
        {
          "type": "p",
          "text": "dispatchfunctions do not have a return value."
        },
        {
          "type": "list",
          "items": [
            "Thedispatchfunctiononly updates the state variable for thenextrender. If you read the state variable after calling thedispatchfunction,you will still get the old valuethat was on the screen before your call.",
            "If the new value you provide is identical to the currentstate, as determined by anObject.iscomparison, React willskip re-rendering the component and its children.This is an optimization. React may still need to call your component before ignoring the result, but it shouldn’t affect your code.",
            "Reactbatches state updates.It updates the screenafter all the event handlers have runand have called theirsetfunctions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can useflushSync."
          ]
        },
        {
          "type": "p",
          "text": "CalluseReducerat the top level of your component to manage state with areducer."
        },
        {
          "type": "code",
          "code": "import{useReducer}from'react';functionreducer(state,action){// ...}functionMyComponent(){const[state,dispatch]=useReducer(reducer,{ age: 42 });// ..."
        },
        {
          "type": "p",
          "text": "useReducerreturns an array with exactly two items:"
        },
        {
          "type": "list",
          "items": [
            "Thecurrent stateof this state variable, initially set to theinitial stateyou provided.",
            "Thedispatchfunctionthat lets you change it in response to interaction."
          ]
        },
        {
          "type": "p",
          "text": "To update what’s on the screen, calldispatchwith an object representing what the user did, called anaction:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){dispatch({type:'incremented_age'});}"
        },
        {
          "type": "p",
          "text": "React will pass the current state and the action to yourreducer function. Your reducer will calculate and return the next state. React will store that next state, render your component with it, and update the UI."
        },
        {
          "type": "code",
          "code": "import{useReducer}from'react';functionreducer(state,action){if(action.type==='incremented_age'){return{age:state.age+1};}throwError('Unknown action.');}exportdefaultfunctionCounter(){const[state,dispatch]=useReducer(reducer,{age:42});return(<><buttononClick={()=>{dispatch({type:'incremented_age'})}}>Increment age</button><p>Hello! You are{state.age}.</p></>);}"
        },
        {
          "type": "p",
          "text": "useReduceris very similar touseState, but it lets you move the state update logic from event handlers into a single function outside of your component. Read more aboutchoosing betweenuseStateanduseReducer."
        },
        {
          "type": "p",
          "text": "A reducer function is declared like this:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){// ...}"
        },
        {
          "type": "p",
          "text": "Then you need to fill in the code that will calculate and return the next state. By convention, it is common to write it as aswitchstatement.For eachcasein theswitch, calculate and return some next state."
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{return{name:state.name,age:state.age+1};}case'changed_name':{return{name:action.nextName,age:state.age};}}throwError('Unknown action: '+action.type);}"
        },
        {
          "type": "p",
          "text": "Actions can have any shape. By convention, it’s common to pass objects with atypeproperty identifying the action. It should include the minimal necessary information that the reducer needs to compute the next state."
        },
        {
          "type": "code",
          "code": "functionForm(){const[state,dispatch]=useReducer(reducer,{name:'Taylor',age:42});functionhandleButtonClick(){dispatch({type:'incremented_age'});}functionhandleInputChange(e){dispatch({type:'changed_name',nextName:e.target.value});}// ..."
        },
        {
          "type": "p",
          "text": "The action type names are local to your component.Each action describes a single interaction, even if that leads to multiple changes in data.The shape of the state is arbitrary, but usually it’ll be an object or an array. Readextracting state logic into a reducerto learn more."
        },
        {
          "type": "p",
          "text": "State is read-only. Don’t modify any objects or arrays in state:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{// 🚩 Don't mutate an object in state like this:state.age=state.age+1;returnstate;}"
        },
        {
          "type": "p",
          "text": "Instead, always return new objects from your reducer:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{// ✅ Instead, return a new objectreturn{...state,age:state.age+1};}"
        },
        {
          "type": "p",
          "text": "Readupdating objects in stateandupdating arrays in stateto learn more."
        },
        {
          "type": "p",
          "text": "In this example, the reducer manages a state object with two fields:nameandage."
        },
        {
          "type": "code",
          "code": "import{useReducer}from'react';functionreducer(state,action){switch(action.type){case'incremented_age':{return{name:state.name,age:state.age+1};}case'changed_name':{return{name:action.nextName,age:state.age};}}throwError('Unknown action: '+action.type);}constinitialState={name:'Taylor',age:42};exportdefaultfunctionForm(){const[state,dispatch]=useReducer(reducer,initialState);functionhandleButtonClick(){dispatch({type:'incremented_age'});}functionhandleInputChange(e){dispatch({type:'changed_name',nextName:e.target.value});}return(<><inputvalue={state.name}onChange={handleInputChange}/><buttononClick={handleButtonClick}>Increment age</button><p>Hello,{state.name}. You are{state.age}.</p></>);}"
        },
        {
          "type": "p",
          "text": "React saves the initial state once and ignores it on the next renders."
        },
        {
          "type": "code",
          "code": "functioncreateInitialState(username){// ...}functionTodoList({username}){const[state,dispatch]=useReducer(reducer,createInitialState(username));// ..."
        },
        {
          "type": "p",
          "text": "Although the result ofcreateInitialState(username)is only used for the initial render, you’re still calling this function on every render. This can be wasteful if it’s creating large arrays or performing expensive calculations. To solve this, you maypass it as aninitializerfunctiontouseReduceras the third argument instead:"
        },
        {
          "type": "code",
          "code": "functioncreateInitialState(username){// ...}functionTodoList({username}){const[state,dispatch]=useReducer(reducer,username,createInitialState);// ..."
        },
        {
          "type": "p",
          "text": "Notice that you’re passingcreateInitialState, which is thefunction itself, and notcreateInitialState(), which is the result of calling it. This way, the initial state does not get re-created after initialization. In the above example,createInitialStatetakes ausernameargument. If your initializer doesn’t need any information to compute the initial state, you may passnullas the second argument touseReducer."
        },
        {
          "type": "p",
          "text": "This example passes the initializer function, so thecreateInitialStatefunction only runs during initialization. It does not run when component re-renders, such as when you type into the input."
        },
        {
          "type": "code",
          "code": "import{useReducer}from'react';functioncreateInitialState(username){constinitialTodos=[];for(leti=0;i<50;i++){initialTodos.push({id:i,text:username+\"'s task #\"+(i+1)});}return{draft:'',todos:initialTodos,};}functionreducer(state,action){switch(action.type){case'changed_draft':{return{draft:action.nextDraft,todos:state.todos,};};case'added_todo':{return{draft:'',todos:[{id:state.todos.length,text:state.draft},...state.todos]}}}throwError('Unknown action: '+action.type);}exportdefaultfunctionTodoList({username}){const[state,dispatch]=useReducer(reducer,username,createInitialState);return(<><inputvalue={state.draft}onChange={e=>{dispatch({type:'changed_draft',nextDraft:e.target.value})}}/><buttononClick={()=>{dispatch({type:'added_todo'});}}>Add</button><ul>{state.todos.map(item=>(<likey={item.id}>{item.text}</li>))}</ul></>);}"
        },
        {
          "type": "p",
          "text": "Calling thedispatchfunctiondoes not change state in the running code:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){console.log(state.age);// 42dispatch({type:'incremented_age'});// Request a re-render with 43console.log(state.age);// Still 42!setTimeout(()=>{console.log(state.age);// Also 42!},5000);}"
        },
        {
          "type": "p",
          "text": "This is becausestates behaves like a snapshot.Updating state requests another render with the new state value, but does not affect thestateJavaScript variable in your already-running event handler. If you need to guess the next state value, you can calculate it manually by calling the reducer yourself:"
        },
        {
          "type": "code",
          "code": "constaction={type:'incremented_age'};dispatch(action);constnextState=reducer(state,action);console.log(state);// { age: 42 }console.log(nextState);// { age: 43 }"
        },
        {
          "type": "p",
          "text": "React willignore your update if the next state is equal to the previous state,as determined by anObject.iscomparison. This usually happens when you change an object or an array in state directly:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{// 🚩 Wrong: mutating existing objectstate.age++;returnstate;}case'changed_name':{// 🚩 Wrong: mutating existing objectstate.name=action.nextName;returnstate;}// ...}}"
        },
        {
          "type": "p",
          "text": "You mutated an existingstateobject and returned it, so React ignored the update. To fix this, you need to ensure that you’re alwaysupdating objects in stateandupdating arrays in stateinstead of mutating them:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{// ✅ Correct: creating a new objectreturn{...state,age:state.age+1};}case'changed_name':{// ✅ Correct: creating a new objectreturn{...state,name:action.nextName};}// ...}}"
        },
        {
          "type": "p",
          "text": "Make sure that everycasebranchcopies all of the existing fieldswhen returning the new state:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{return{...state,// Don't forget this!age:state.age+1};}// ..."
        },
        {
          "type": "p",
          "text": "Without...stateabove, the returned next state would only contain theagefield and nothing else."
        },
        {
          "type": "p",
          "text": "If your state unexpectedly becomesundefined, you’re likely forgetting toreturnstate in one of the cases, or your action type doesn’t match any of thecasestatements. To find why, throw an error outside theswitch:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'incremented_age':{// ...}case'edited_name':{// ...}}throwError('Unknown action: '+action.type);}"
        },
        {
          "type": "p",
          "text": "You can also use a static type checker like TypeScript to catch such mistakes."
        },
        {
          "type": "p",
          "text": "You might get an error that says:Too many re-renders. React limits the number of renders to prevent an infinite loop.Typically, this means that you’re unconditionally dispatching an actionduring render, so your component enters a loop: render, dispatch (which causes a render), render, dispatch (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler:"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: calls the handler during renderreturn<buttononClick={handleClick()}>Click me</button>// ✅ Correct: passes down the event handlerreturn<buttononClick={handleClick}>Click me</button>// ✅ Correct: passes down an inline functionreturn<buttononClick={(e)=>handleClick(e)}>Click me</button>"
        },
        {
          "type": "p",
          "text": "If you can’t find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specificdispatchfunction call responsible for the error."
        },
        {
          "type": "p",
          "text": "InStrict Mode, React will call your reducer and initializer functions twice. This shouldn’t break your code. Thisdevelopment-onlybehavior helps youkeep components pure.React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and reducer functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice the mistakes. For example, this impure reducer function mutates an array in state:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'added_todo':{// 🚩 Mistake: mutating statestate.todos.push({id:nextId++,text:action.text});returnstate;}// ...}}"
        },
        {
          "type": "p",
          "text": "Because React calls your reducer function twice, you’ll see the todo was added twice, so you’ll know that there is a mistake. In this example, you can fix the mistake byreplacing the array instead of mutating it:"
        },
        {
          "type": "code",
          "code": "functionreducer(state,action){switch(action.type){case'added_todo':{// ✅ Correct: replacing with new statereturn{...state,todos:[...state.todos,{id:nextId++,text:action.text}]};}// ...}}"
        },
        {
          "type": "p",
          "text": "Now that this reducer function is pure, calling it an extra time doesn’t make a difference in behavior. This is why React calling it twice helps you find mistakes.Only component, initializer, and reducer functions need to be pure.Event handlers don’t need to be pure, so React will never call your event handlers twice. Readkeeping components pureto learn more."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useRef",
      "title": "useRef – React",
      "content": [
        {
          "type": "p",
          "text": "useRefis a React Hook that lets you reference a value that’s not needed for rendering."
        },
        {
          "type": "code",
          "code": "constref=useRef(initialValue)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseRef(initialValue)",
            "useRef(initialValue)",
            "UsageReferencing a value with a refManipulating the DOM with a refAvoiding recreating the ref contents",
            "Referencing a value with a ref",
            "Manipulating the DOM with a ref",
            "Avoiding recreating the ref contents",
            "TroubleshootingI can’t get a ref to a custom component",
            "I can’t get a ref to a custom component"
          ]
        },
        {
          "type": "p",
          "text": "CalluseRefat the top level of your component to declare aref."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';functionMyComponent(){constintervalRef=useRef(0);constinputRef=useRef(null);// ..."
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "initialValue: The value you want the ref object’scurrentproperty to be initially. It can be a value of any type. This argument is ignored after the initial render."
          ]
        },
        {
          "type": "p",
          "text": "useRefreturns an object with a single property:"
        },
        {
          "type": "list",
          "items": [
            "current: Initially, it’s set to theinitialValueyou have passed. You can later set it to something else. If you pass the ref object to React as arefattribute to a JSX node, React will set itscurrentproperty."
          ]
        },
        {
          "type": "p",
          "text": "On the next renders,useRefwill return the same object."
        },
        {
          "type": "list",
          "items": [
            "You can mutate theref.currentproperty. Unlike state, it is mutable. However, if it holds an object that is used for rendering (for example, a piece of your state), then you shouldn’t mutate that object.",
            "When you change theref.currentproperty, React does not re-render your component. React is not aware of when you change it because a ref is a plain JavaScript object.",
            "Do not writeor readref.currentduring rendering, except forinitialization.This makes your component’s behavior unpredictable.",
            "In Strict Mode, React willcall your component function twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. Each ref object will be created twice, but one of the versions will be discarded. If your component function is pure (as it should be), this should not affect the behavior."
          ]
        },
        {
          "type": "p",
          "text": "CalluseRefat the top level of your component to declare one or morerefs."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';functionStopwatch(){constintervalRef=useRef(0);// ..."
        },
        {
          "type": "p",
          "text": "useRefreturns aref objectwith a singlecurrentpropertyinitially set to theinitial valueyou provided. On the next renders,useRefwill return the same object. You can change itscurrentproperty to store information and read it later. This might remind you ofstate, but there is an important difference. Changing a ref does not trigger a re-render.This means refs are perfect for storing information that doesn’t affect the visual output of your component. For example, if you need to store aninterval IDand retrieve it later, you can put it in a ref. To update the value inside the ref, you need to manually change itscurrentproperty:"
        },
        {
          "type": "code",
          "code": "functionhandleStartClick(){constintervalId=setInterval(()=>{// ...},1000);intervalRef.current=intervalId;}"
        },
        {
          "type": "p",
          "text": "Later, you can read that interval ID from the ref so that you can callclear that interval:"
        },
        {
          "type": "code",
          "code": "functionhandleStopClick(){constintervalId=intervalRef.current;clearInterval(intervalId);}"
        },
        {
          "type": "p",
          "text": "By using a ref, you ensure that:"
        },
        {
          "type": "list",
          "items": [
            "You canstore informationbetween re-renders (unlike regular variables, which reset on every render).",
            "Changing itdoes not trigger a re-render(unlike state variables, which trigger a re-render).",
            "Theinformation is localto each copy of your component (unlike the variables outside, which are shared)."
          ]
        },
        {
          "type": "p",
          "text": "Changing a ref does not trigger a re-render, so refs are not appropriate for storing information you want to display on the screen. Use state for that instead. Read more aboutchoosing betweenuseRefanduseState."
        },
        {
          "type": "p",
          "text": "This component uses a ref to keep track of how many times the button was clicked. Note that it’s okay to use a ref instead of state here because the click count is only read and written in an event handler."
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';exportdefaultfunctionCounter(){letref=useRef(0);functionhandleClick(){ref.current=ref.current+1;alert('You clicked '+ref.current+' times!');}return(<buttononClick={handleClick}>Click me!</button>);}"
        },
        {
          "type": "p",
          "text": "If you show{ref.current}in the JSX, the number won’t update on click. This is because settingref.currentdoes not trigger a re-render. Information that’s used for rendering should be state instead."
        },
        {
          "type": "p",
          "text": "Do not writeor readref.currentduring rendering. React expects that the body of your componentbehaves like a pure function:"
        },
        {
          "type": "list",
          "items": [
            "If the inputs (props,state, andcontext) are the same, it should return exactly the same JSX.",
            "Calling it in a different order or with different arguments should not affect the results of other calls."
          ]
        },
        {
          "type": "p",
          "text": "Reading or writing a refduring renderingbreaks these expectations."
        },
        {
          "type": "code",
          "code": "functionMyComponent(){// ...// 🚩 Don't write a ref during renderingmyRef.current=123;// ...// 🚩 Don't read a ref during renderingreturn<h1>{myOtherRef.current}</h1>;}"
        },
        {
          "type": "p",
          "text": "You can read or write refsfrom event handlers or effects instead."
        },
        {
          "type": "code",
          "code": "functionMyComponent(){// ...useEffect(()=>{// ✅ You can read or write refs in effectsmyRef.current=123;});// ...functionhandleClick(){// ✅ You can read or write refs in event handlersdoSomething(myOtherRef.current);}// ...}"
        },
        {
          "type": "p",
          "text": "If youhave toreador writesomething during rendering,use stateinstead. When you break these rules, your component might still work, but most of the newer features we’re adding to React will rely on these expectations. Read more aboutkeeping your components pure."
        },
        {
          "type": "p",
          "text": "It’s particularly common to use a ref to manipulate theDOM.React has built-in support for this. First, declare aref objectwith aninitial valueofnull:"
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';functionMyComponent(){constinputRef=useRef(null);// ..."
        },
        {
          "type": "p",
          "text": "Then pass your ref object as therefattribute to the JSX of the DOM node you want to manipulate:"
        },
        {
          "type": "code",
          "code": "// ...return<inputref={inputRef}/>;"
        },
        {
          "type": "p",
          "text": "After React creates the DOM node and puts it on the screen, React will set thecurrentpropertyof your ref object to that DOM node. Now you can access the<input>’s DOM node and call methods likefocus():"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){inputRef.current.focus();}"
        },
        {
          "type": "p",
          "text": "React will set thecurrentproperty back tonullwhen the node is removed from the screen. Read more aboutmanipulating the DOM with refs."
        },
        {
          "type": "p",
          "text": "In this example, clicking the button will focus the input:"
        },
        {
          "type": "code",
          "code": "import{useRef}from'react';exportdefaultfunctionForm(){constinputRef=useRef(null);functionhandleClick(){inputRef.current.focus();}return(<><inputref={inputRef}/><buttononClick={handleClick}>Focus the input</button></>);}"
        },
        {
          "type": "p",
          "text": "React saves the initial ref value once and ignores it on the next renders."
        },
        {
          "type": "code",
          "code": "functionVideo(){constplayerRef=useRef(newVideoPlayer());// ..."
        },
        {
          "type": "p",
          "text": "Although the result ofnew VideoPlayer()is only used for the initial render, you’re still calling this function on every render. This can be wasteful if it’s creating expensive objects. To solve it, you may initialize the ref like this instead:"
        },
        {
          "type": "code",
          "code": "functionVideo(){constplayerRef=useRef(null);if(playerRef.current===null){playerRef.current=newVideoPlayer();}// ..."
        },
        {
          "type": "p",
          "text": "Normally, writing or readingref.currentduring render is not allowed. However, it’s fine in this case because the result is always the same, and the condition only executes during initialization so it’s fully predictable."
        },
        {
          "type": "p",
          "text": "If you use a type checker and don’t want to always check fornull, you can try a pattern like this instead:"
        },
        {
          "type": "code",
          "code": "functionVideo(){constplayerRef=useRef(null);functiongetPlayer(){if(playerRef.current!==null){returnplayerRef.current;}constplayer=newVideoPlayer();playerRef.current=player;returnplayer;}// ..."
        },
        {
          "type": "p",
          "text": "Here, theplayerRefitself is nullable. However, you should be able to convince your type checker that there is no case in whichgetPlayer()returnsnull. Then usegetPlayer()in your event handlers."
        },
        {
          "type": "p",
          "text": "If you try to pass arefto your own component like this:"
        },
        {
          "type": "code",
          "code": "constinputRef=useRef(null);return<MyInputref={inputRef}/>;"
        },
        {
          "type": "p",
          "text": "You might get an error in the console:"
        },
        {
          "type": "p",
          "text": "By default, your own components don’t expose refs to the DOM nodes inside them. To fix this, find the component that you want to get a ref to:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionMyInput({value,onChange}){return(<inputvalue={value}onChange={onChange}/>);}"
        },
        {
          "type": "p",
          "text": "And then wrap it inforwardReflike this:"
        },
        {
          "type": "code",
          "code": "import{forwardRef}from'react';constMyInput=forwardRef(({value,onChange},ref)=>{return(<inputvalue={value}onChange={onChange}ref={ref}/>);});exportdefaultMyInput;"
        },
        {
          "type": "p",
          "text": "Then the parent component can get a ref to it. Read more aboutaccessing another component’s DOM nodes."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useState",
      "title": "useState – React",
      "content": [
        {
          "type": "p",
          "text": "useStateis a React Hook that lets you add astate variableto your component."
        },
        {
          "type": "code",
          "code": "const[state,setState]=useState(initialState)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseState(initialState)setfunctions, likesetSomething(nextState)",
            "useState(initialState)",
            "setfunctions, likesetSomething(nextState)",
            "UsageAdding state to a componentUpdating state based on the previous stateUpdating objects and arrays in stateAvoiding recreating the initial stateResetting state with a keyStoring information from previous renders",
            "Adding state to a component",
            "Updating state based on the previous state",
            "Updating objects and arrays in state",
            "Avoiding recreating the initial state",
            "Resetting state with a key",
            "Storing information from previous renders",
            "TroubleshootingI’ve updated the state, but logging gives me the old valueI’ve updated the state, but the screen doesn’t updateI’m getting an error: “Too many re-renders”My initializer or updater function runs twiceI’m trying to set state to a function, but it gets called instead",
            "I’ve updated the state, but logging gives me the old value",
            "I’ve updated the state, but the screen doesn’t update",
            "I’m getting an error: “Too many re-renders”",
            "My initializer or updater function runs twice",
            "I’m trying to set state to a function, but it gets called instead"
          ]
        },
        {
          "type": "p",
          "text": "CalluseStateat the top level of your component to declare astate variable."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';functionMyComponent(){const[age,setAge]=useState(28);const[name,setName]=useState('Taylor');const[todos,setTodos]=useState(()=>createTodos());// ..."
        },
        {
          "type": "p",
          "text": "The convention is to name state variables like[something, setSomething]usingarray destructuring. See more examples below."
        },
        {
          "type": "list",
          "items": [
            "initialState: The value you want the state to be initially. It can be a value of any type, but there is a special behavior for functions. This argument is ignored after the initial render.If you pass a function asinitialState, it will be treated as aninitializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.See an example below.",
            "If you pass a function asinitialState, it will be treated as aninitializer function. It should be pure, should take no arguments, and should return a value of any type. React will call your initializer function when initializing the component, and store its return value as the initial state.See an example below."
          ]
        },
        {
          "type": "p",
          "text": "useStatereturns an array with exactly two values:"
        },
        {
          "type": "list",
          "items": [
            "The current state. During the first render, it will match theinitialStateyou have passed.",
            "Thesetfunctionthat lets you update the state to a different value and trigger a re-render."
          ]
        },
        {
          "type": "list",
          "items": [
            "useStateis a Hook, so you can only call itat the top level of your componentor your own Hooks. You can’t call it inside loops or conditions. If you need that, extract a new component and move the state into it.",
            "In Strict Mode, React willcall your initializer function twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. If your initializer function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "Thesetfunction returned byuseStatelets you update the state to a different value and trigger a re-render. You can pass the next state directly, or a function that calculates it from the previous state:"
        },
        {
          "type": "code",
          "code": "const[name,setName]=useState('Edward');functionhandleClick(){setName('Taylor');setAge(a=>a+1);// ..."
        },
        {
          "type": "list",
          "items": [
            "nextState: The value that you want the state to be. It can be a value of any type, but there is a special behavior for functions.If you pass a function asnextState, it will be treated as anupdater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.See an example below.",
            "If you pass a function asnextState, it will be treated as anupdater function. It must be pure, should take the pending state as its only argument, and should return the next state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.See an example below."
          ]
        },
        {
          "type": "p",
          "text": "setfunctions do not have a return value."
        },
        {
          "type": "list",
          "items": [
            "Thesetfunctiononly updates the state variable for thenextrender. If you read the state variable after calling thesetfunction,you will still get the old valuethat was on the screen before your call.",
            "If the new value you provide is identical to the currentstate, as determined by anObject.iscomparison, React willskip re-rendering the component and its children.This is an optimization. Although in some cases React may still need to call your component before skipping the children, it shouldn’t affect your code.",
            "Reactbatches state updates.It updates the screenafter all the event handlers have runand have called theirsetfunctions. This prevents multiple re-renders during a single event. In the rare case that you need to force React to update the screen earlier, for example to access the DOM, you can useflushSync.",
            "Thesetfunction has a stable identity, so you will often see it omitted from Effect dependencies, but including it will not cause the Effect to fire. If the linter lets you omit a dependency without errors, it is safe to do.Learn more about removing Effect dependencies.",
            "Calling thesetfunctionduring renderingis only allowed from within the currently rendering component. React will discard its output and immediately attempt to render it again with the new state. This pattern is rarely needed, but you can use it tostore information from the previous renders.See an example below.",
            "In Strict Mode, React willcall your updater function twicein order tohelp you find accidental impurities.This is development-only behavior and does not affect production. If your updater function is pure (as it should be), this should not affect the behavior. The result from one of the calls will be ignored."
          ]
        },
        {
          "type": "p",
          "text": "CalluseStateat the top level of your component to declare one or morestate variables."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';functionMyComponent(){const[age,setAge]=useState(42);const[name,setName]=useState('Taylor');// ..."
        },
        {
          "type": "p",
          "text": "The convention is to name state variables like[something, setSomething]usingarray destructuring. useStatereturns an array with exactly two items:"
        },
        {
          "type": "list",
          "items": [
            "Thecurrent stateof this state variable, initially set to theinitial stateyou provided.",
            "Thesetfunctionthat lets you change it to any other value in response to interaction."
          ]
        },
        {
          "type": "p",
          "text": "To update what’s on the screen, call thesetfunction with some next state:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){setName('Robin');}"
        },
        {
          "type": "p",
          "text": "React will store the next state, render your component again with the new values, and update the UI."
        },
        {
          "type": "p",
          "text": "Calling thesetfunctiondoes notchange the current state in the already executing code:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){setName('Robin');console.log(name);// Still \"Taylor\"!}"
        },
        {
          "type": "p",
          "text": "It only affects whatuseStatewill return starting from thenextrender."
        },
        {
          "type": "p",
          "text": "In this example, thecountstate variable holds a number. Clicking the button increments it."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionCounter(){const[count,setCount]=useState(0);functionhandleClick(){setCount(count+1);}return(<buttononClick={handleClick}>You pressed me{count}times</button>);}"
        },
        {
          "type": "p",
          "text": "Suppose theageis42. This handler callssetAge(age + 1)three times:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){setAge(age+1);// setAge(42 + 1)setAge(age+1);// setAge(42 + 1)setAge(age+1);// setAge(42 + 1)}"
        },
        {
          "type": "p",
          "text": "However, after one click,agewill only be43rather than45! This is because calling thesetfunctiondoes not updatetheagestate variable in the already running code. So eachsetAge(age + 1)call becomessetAge(43). To solve this problem,you may pass anupdater functiontosetAgeinstead of the next state:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){setAge(a=>a + 1);// setAge(42 => 43)setAge(a=>a + 1);// setAge(43 => 44)setAge(a=>a + 1);// setAge(44 => 45)}"
        },
        {
          "type": "p",
          "text": "Here,a => a + 1is your updater function. It takes thepending stateand calculates thenext statefrom it. React puts your updater functions in aqueue.Then, during the next render, it will call them in the same order:"
        },
        {
          "type": "list",
          "items": [
            "a => a + 1will receive42as the pending state and return43as the next state.",
            "a => a + 1will receive43as the pending state and return44as the next state.",
            "a => a + 1will receive44as the pending state and return45as the next state."
          ]
        },
        {
          "type": "p",
          "text": "There are no other queued updates, so React will store45as the current state in the end. By convention, it’s common to name the pending state argument for the first letter of the state variable name, likeaforage. However, you may also call it likeprevAgeor something else that you find clearer. React maycall your updaters twicein development to verify that they arepure."
        },
        {
          "type": "p",
          "text": "You might hear a recommendation to always write code likesetAge(a => a + 1)if the state you’re setting is calculated from the previous state. There is no harm in it, but it is also not always necessary. In most cases, there is no difference between these two approaches. React always makes sure that for intentional user actions, like clicks, theagestate variable would be updated before the next click. This means there is no risk of a click handler seeing a “stale”ageat the beginning of the event handler. However, if you do multiple updates within the same event, updaters can be helpful. They’re also helpful if accessing the state variable itself is inconvenient (you might run into this when optimizing re-renders). If you prefer consistency over slightly more verbose syntax, it’s reasonable to always write an updater if the state you’re setting is calculated from the previous state. If it’s calculated from the previous state of someotherstate variable, you might want to combine them into one object anduse a reducer."
        },
        {
          "type": "p",
          "text": "This example passes the updater function, so the “+3” button works."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionCounter(){const[age,setAge]=useState(42);functionincrement(){setAge(a=>a+1);}return(<><h1>Your age:{age}</h1><buttononClick={()=>{increment();increment();increment();}}>+3</button><buttononClick={()=>{increment();}}>+1</button></>);}"
        },
        {
          "type": "p",
          "text": "You can put objects and arrays into state. In React, state is considered read-only, soyou shouldreplaceit rather thanmutateyour existing objects. For example, if you have aformobject in state, don’t mutate it:"
        },
        {
          "type": "code",
          "code": "// 🚩 Don't mutate an object in state like this:form.firstName='Taylor';"
        },
        {
          "type": "p",
          "text": "Instead, replace the whole object by creating a new one:"
        },
        {
          "type": "code",
          "code": "// ✅ Replace state with a new objectsetForm({...form,firstName:'Taylor'});"
        },
        {
          "type": "p",
          "text": "Readupdating objects in stateandupdating arrays in stateto learn more."
        },
        {
          "type": "p",
          "text": "In this example, theformstate variable holds an object. Each input has a change handler that callssetFormwith the next state of the entire form. The{ ...form }spread syntax ensures that the state object is replaced rather than mutated."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionForm(){const[form,setForm]=useState({firstName:'Barbara',lastName:'Hepworth',email:'bhepworth@sculpture.com',});return(<><label>First name:<inputvalue={form.firstName}onChange={e=>{setForm({...form,firstName:e.target.value});}}/></label><label>Last name:<inputvalue={form.lastName}onChange={e=>{setForm({...form,lastName:e.target.value});}}/></label><label>Email:<inputvalue={form.email}onChange={e=>{setForm({...form,email:e.target.value});}}/></label><p>{form.firstName}{' '}{form.lastName}{' '}({form.email})</p></>);}"
        },
        {
          "type": "p",
          "text": "React saves the initial state once and ignores it on the next renders."
        },
        {
          "type": "code",
          "code": "functionTodoList(){const[todos,setTodos]=useState(createInitialTodos());// ..."
        },
        {
          "type": "p",
          "text": "Although the result ofcreateInitialTodos()is only used for the initial render, you’re still calling this function on every render. This can be wasteful if it’s creating large arrays or performing expensive calculations. To solve this, you maypass it as aninitializerfunctiontouseStateinstead:"
        },
        {
          "type": "code",
          "code": "functionTodoList(){const[todos,setTodos]=useState(createInitialTodos);// ..."
        },
        {
          "type": "p",
          "text": "Notice that you’re passingcreateInitialTodos, which is thefunction itself, and notcreateInitialTodos(), which is the result of calling it. If you pass a function touseState, React will only call it during initialization. React maycall your initializers twicein development to verify that they arepure."
        },
        {
          "type": "p",
          "text": "This example passes the initializer function, so thecreateInitialTodosfunction only runs during initialization. It does not run when component re-renders, such as when you type into the input."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';functioncreateInitialTodos(){constinitialTodos=[];for(leti=0;i<50;i++){initialTodos.push({id:i,text:'Item '+(i+1)});}returninitialTodos;}exportdefaultfunctionTodoList(){const[todos,setTodos]=useState(createInitialTodos);const[text,setText]=useState('');return(<><inputvalue={text}onChange={e=>setText(e.target.value)}/><buttononClick={()=>{setText('');setTodos([{id:todos.length,text:text},...todos]);}}>Add</button><ul>{todos.map(item=>(<likey={item.id}>{item.text}</li>))}</ul></>);}"
        },
        {
          "type": "p",
          "text": "You’ll often encounter thekeyattribute whenrendering lists.However, it also serves another purpose. You canreset a component’s state by passing a differentkeyto a component.In this example, the Reset button changes theversionstate variable, which we pass as akeyto theForm. When thekeychanges, React re-creates theFormcomponent (and all of its children) from scratch, so its state gets reset. Readpreserving and resetting stateto learn more."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionApp(){const[version,setVersion]=useState(0);functionhandleReset(){setVersion(version+1);}return(<><buttononClick={handleReset}>Reset</button><Formkey={version}/></>);}functionForm(){const[name,setName]=useState('Taylor');return(<><inputvalue={name}onChange={e=>setName(e.target.value)}/><p>Hello,{name}.</p></>);}"
        },
        {
          "type": "p",
          "text": "Usually, you will update state in event handlers. However, in rare cases you might want to adjust state in response to rendering — for example, you might want to change a state variable when a prop changes. In most cases, you don’t need this:"
        },
        {
          "type": "list",
          "items": [
            "If the value you need can be computed entirely from the current props or other state,remove that redundant state altogether.If you’re worried about recomputing too often, theuseMemoHookcan help.",
            "If you want to reset the entire component tree’s state,pass a differentkeyto your component.",
            "If you can, update all the relevant state in the event handlers."
          ]
        },
        {
          "type": "p",
          "text": "In the rare case that none of these apply, there is a pattern you can use to update state based on the values that have been rendered so far, by calling asetfunction while your component is rendering. Here’s an example. ThisCountLabelcomponent displays thecountprop passed to it:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionCountLabel({count}){return<h1>{count}</h1>}"
        },
        {
          "type": "p",
          "text": "Say you want to show whether the counter hasincreased or decreasedsince the last change. Thecountprop doesn’t tell you this — you need to keep track of its previous value. Add theprevCountstate variable to track it. Add another state variable calledtrendto hold whether the count has increased or decreased. CompareprevCountwithcount, and if they’re not equal, update bothprevCountandtrend. Now you can show both the current count prop andhow it has changed since the last render."
        },
        {
          "type": "code",
          "code": "import{useState}from'react';exportdefaultfunctionCountLabel({count}){const[prevCount,setPrevCount]=useState(count);const[trend,setTrend]=useState(null);if(prevCount!==count){setPrevCount(count);setTrend(count>prevCount?'increasing':'decreasing');}return(<><h1>{count}</h1>{trend&&<p>The count is{trend}</p>}</>);}"
        },
        {
          "type": "p",
          "text": "Note that if you call asetfunction while rendering, it must be inside a condition likeprevCount !== count, and there must be a call likesetPrevCount(count)inside of the condition. Otherwise, your component would re-render in a loop until it crashes. Also, you can only update the state of thecurrently renderingcomponent like this. Calling thesetfunction ofanothercomponent during rendering is an error. Finally, yoursetcall should stillupdate state without mutation— this doesn’t mean you can break other rules ofpure functions. This pattern can be hard to understand and is usually best avoided. However, it’s better than updating state in an effect. When you call thesetfunction during render, React will re-render that component immediately after your component exits with areturnstatement, and before rendering the children. This way, children don’t need to render twice. The rest of your component function will still execute (and the result will be thrown away). If your condition is below all the Hook calls, you may add an earlyreturn;to restart rendering earlier."
        },
        {
          "type": "p",
          "text": "Calling thesetfunctiondoes not change state in the running code:"
        },
        {
          "type": "code",
          "code": "functionhandleClick(){console.log(count);// 0setCount(count+1);// Request a re-render with 1console.log(count);// Still 0!setTimeout(()=>{console.log(count);// Also 0!},5000);}"
        },
        {
          "type": "p",
          "text": "This is becausestates behaves like a snapshot.Updating state requests another render with the new state value, but does not affect thecountJavaScript variable in your already-running event handler. If you need to use the next state, you can save it in a variable before passing it to thesetfunction:"
        },
        {
          "type": "code",
          "code": "constnextCount=count+1;setCount(nextCount);console.log(count);// 0console.log(nextCount);// 1"
        },
        {
          "type": "p",
          "text": "React willignore your update if the next state is equal to the previous state,as determined by anObject.iscomparison. This usually happens when you change an object or an array in state directly:"
        },
        {
          "type": "code",
          "code": "obj.x=10;// 🚩 Wrong: mutating existing objectsetObj(obj);// 🚩 Doesn't do anything"
        },
        {
          "type": "p",
          "text": "You mutated an existingobjobject and passed it back tosetObj, so React ignored the update. To fix this, you need to ensure that you’re alwaysreplacingobjects and arrays in state instead ofmutatingthem:"
        },
        {
          "type": "code",
          "code": "// ✅ Correct: creating a new objectsetObj({...obj,x:10});"
        },
        {
          "type": "p",
          "text": "You might get an error that says:Too many re-renders. React limits the number of renders to prevent an infinite loop.Typically, this means that you’re unconditionally setting stateduring render, so your component enters a loop: render, set state (which causes a render), render, set state (which causes a render), and so on. Very often, this is caused by a mistake in specifying an event handler:"
        },
        {
          "type": "code",
          "code": "// 🚩 Wrong: calls the handler during renderreturn<buttononClick={handleClick()}>Click me</button>// ✅ Correct: passes down the event handlerreturn<buttononClick={handleClick}>Click me</button>// ✅ Correct: passes down an inline functionreturn<buttononClick={(e)=>handleClick(e)}>Click me</button>"
        },
        {
          "type": "p",
          "text": "If you can’t find the cause of this error, click on the arrow next to the error in the console and look through the JavaScript stack to find the specificsetfunction call responsible for the error."
        },
        {
          "type": "p",
          "text": "InStrict Mode, React will call some of your functions twice instead of once:"
        },
        {
          "type": "code",
          "code": "functionTodoList(){// This component function will run twice for every render.const[todos,setTodos]=useState(()=>{// This initializer function will run twice during initialization.returncreateTodos();});functionhandleClick(){setTodos(prevTodos=>{// This updater function will run twice for every click.return[...prevTodos,createTodo()];});}// ..."
        },
        {
          "type": "p",
          "text": "This is expected and shouldn’t break your code. Thisdevelopment-onlybehavior helps youkeep components pure.React uses the result of one of the calls, and ignores the result of the other call. As long as your component, initializer, and updater functions are pure, this shouldn’t affect your logic. However, if they are accidentally impure, this helps you notice the mistakes. For example, this impure updater function mutates an array in state:"
        },
        {
          "type": "code",
          "code": "setTodos(prevTodos=>{// 🚩 Mistake: mutating stateprevTodos.push(createTodo());});"
        },
        {
          "type": "p",
          "text": "Because React calls your updater function twice, you’ll see the todo was added twice, so you’ll know that there is a mistake. In this example, you can fix the mistake byreplacing the array instead of mutating it:"
        },
        {
          "type": "code",
          "code": "setTodos(prevTodos=>{// ✅ Correct: replacing with new statereturn[...prevTodos,createTodo()];});"
        },
        {
          "type": "p",
          "text": "Now that this updater function is pure, calling it an extra time doesn’t make a difference in behavior. This is why React calling it twice helps you find mistakes.Only component, initializer, and updater functions need to be pure.Event handlers don’t need to be pure, so React will never call your event handlers twice. Readkeeping components pureto learn more."
        },
        {
          "type": "p",
          "text": "You can’t put a function into state like this:"
        },
        {
          "type": "code",
          "code": "const[fn,setFn]=useState(someFunction);functionhandleClick(){setFn(someOtherFunction);}"
        },
        {
          "type": "p",
          "text": "Because you’re passing a function, React assumes thatsomeFunctionis aninitializer function, and thatsomeOtherFunctionis anupdater function, so it tries to call them and store the result. To actuallystorea function, you have to put() =>before them in both cases. Then React will store the functions you pass."
        },
        {
          "type": "code",
          "code": "const[fn,setFn]=useState(()=>someFunction);functionhandleClick(){setFn(()=>someOtherFunction);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useSyncExternalStore",
      "title": "useSyncExternalStore – React",
      "content": [
        {
          "type": "p",
          "text": "useSyncExternalStoreis a React Hook that lets you subscribe to an external store."
        },
        {
          "type": "code",
          "code": "constsnapshot=useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot?)"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)",
            "useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)",
            "UsageSubscribing to an external storeSubscribing to a browser APIExtracting the logic to a custom HookAdding support for server rendering",
            "Subscribing to an external store",
            "Subscribing to a browser API",
            "Extracting the logic to a custom Hook",
            "Adding support for server rendering",
            "TroubleshootingI’m getting an error: “The result ofgetSnapshotshould be cached”Mysubscribefunction gets called after every re-render",
            "I’m getting an error: “The result ofgetSnapshotshould be cached”",
            "Mysubscribefunction gets called after every re-render"
          ]
        },
        {
          "type": "p",
          "text": "CalluseSyncExternalStoreat the top level of your component to read a value from an external data store."
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';import{todosStore}from'./todoStore.js';functionTodosApp(){consttodos=useSyncExternalStore(todosStore.subscribe,todosStore.getSnapshot);// ...}"
        },
        {
          "type": "p",
          "text": "It returns the snapshot of the data in the store. You need to pass two functions as arguments:"
        },
        {
          "type": "list",
          "items": [
            "Thesubscribefunction should subscribe to the store and return a function that unsubscribes.",
            "ThegetSnapshotfunction should read a snapshot of the data from the store."
          ]
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "list",
          "items": [
            "subscribe: A function that takes a singlecallbackargument and subscribes it to the store. When the store changes, it should invoke the providedcallback, which will cause React to re-callgetSnapshotand (if needed) re-render the component. Thesubscribefunction should return a function that cleans up the subscription.",
            "getSnapshot: A function that returns a snapshot of the data in the store that’s needed by the component. While the store has not changed, repeated calls togetSnapshotmust return the same value. If the store changes and the returned value is different (as compared byObject.is), React re-renders the component.",
            "optionalgetServerSnapshot: A function that returns the initial snapshot of the data in the store. It will be used only during server rendering and during hydration of server-rendered content on the client. The server snapshot must be the same between the client and the server, and is usually serialized and passed from the server to the client. If you omit this argument, rendering the component on the server will throw an error."
          ]
        },
        {
          "type": "p",
          "text": "The current snapshot of the store which you can use in your rendering logic."
        },
        {
          "type": "list",
          "items": [
            "The store snapshot returned bygetSnapshotmust be immutable. If the underlying store has mutable data, return a new immutable snapshot if the data has changed. Otherwise, return a cached last snapshot.",
            "If a differentsubscribefunction is passed during a re-render, React will re-subscribe to the store using the newly passedsubscribefunction. You can prevent this by declaringsubscribeoutside the component.",
            "If the store is mutated during anon-blocking Transition update, React will fall back to performing that update as blocking. Specifically, for every Transition update, React will callgetSnapshota second time just before applying changes to the DOM. If it returns a different value than when it was called originally, React will restart the update from scratch, this time applying it as a blocking update, to ensure that every component on screen is reflecting the same version of the store.",
            "It’s not recommended tosuspenda render based on a store value returned byuseSyncExternalStore. The reason is that mutations to the external store cannot be marked asnon-blocking Transition updates, so they will trigger the nearestSuspensefallback, replacing already-rendered content on screen with a loading spinner, which typically makes a poor UX.For example, the following are discouraged:constLazyProductDetailPage=lazy(()=>import('./ProductDetailPage.js'));functionShoppingApp(){constselectedProductId=useSyncExternalStore(...);// ❌ Calling `use` with a Promise dependent on `selectedProductId`constdata=use(fetchItem(selectedProductId))// ❌ Conditionally rendering a lazy component based on `selectedProductId`returnselectedProductId!=null?<LazyProductDetailPage/>:<FeaturedProducts/>;}"
          ]
        },
        {
          "type": "p",
          "text": "Most of your React components will only read data from theirprops,state,andcontext.However, sometimes a component needs to read some data from some store outside of React that changes over time. This includes:"
        },
        {
          "type": "list",
          "items": [
            "Third-party state management libraries that hold state outside of React.",
            "Browser APIs that expose a mutable value and events to subscribe to its changes."
          ]
        },
        {
          "type": "p",
          "text": "CalluseSyncExternalStoreat the top level of your component to read a value from an external data store."
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';import{todosStore}from'./todoStore.js';functionTodosApp(){consttodos=useSyncExternalStore(todosStore.subscribe,todosStore.getSnapshot);// ...}"
        },
        {
          "type": "p",
          "text": "It returns thesnapshotof the data in the store. You need to pass two functions as arguments:"
        },
        {
          "type": "list",
          "items": [
            "Thesubscribefunctionshould subscribe to the store and return a function that unsubscribes.",
            "ThegetSnapshotfunctionshould read a snapshot of the data from the store."
          ]
        },
        {
          "type": "p",
          "text": "React will use these functions to keep your component subscribed to the store and re-render it on changes. For example, in the sandbox below,todosStoreis implemented as an external store that stores data outside of React. TheTodosAppcomponent connects to that external store with theuseSyncExternalStoreHook."
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';import{todosStore}from'./todoStore.js';exportdefaultfunctionTodosApp(){consttodos=useSyncExternalStore(todosStore.subscribe,todosStore.getSnapshot);return(<><buttononClick={()=>todosStore.addTodo()}>Add todo</button><hr/><ul>{todos.map(todo=>(<likey={todo.id}>{todo.text}</li>))}</ul></>);}"
        },
        {
          "type": "p",
          "text": "When possible, we recommend using built-in React state withuseStateanduseReducerinstead. TheuseSyncExternalStoreAPI is mostly useful if you need to integrate with existing non-React code."
        },
        {
          "type": "p",
          "text": "Another reason to adduseSyncExternalStoreis when you want to subscribe to some value exposed by the browser that changes over time. For example, suppose that you want your component to display whether the network connection is active. The browser exposes this information via a property callednavigator.onLine. This value can change without React’s knowledge, so you should read it withuseSyncExternalStore."
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';functionChatIndicator(){constisOnline=useSyncExternalStore(subscribe,getSnapshot);// ...}"
        },
        {
          "type": "p",
          "text": "To implement thegetSnapshotfunction, read the current value from the browser API:"
        },
        {
          "type": "code",
          "code": "functiongetSnapshot(){returnnavigator.onLine;}"
        },
        {
          "type": "p",
          "text": "Next, you need to implement thesubscribefunction. For example, whennavigator.onLinechanges, the browser fires theonlineandofflineevents on thewindowobject. You need to subscribe thecallbackargument to the corresponding events, and then return a function that cleans up the subscriptions:"
        },
        {
          "type": "code",
          "code": "functionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}"
        },
        {
          "type": "p",
          "text": "Now React knows how to read the value from the externalnavigator.onLineAPI and how to subscribe to its changes. Disconnect your device from the network and notice that the component re-renders in response:"
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';exportdefaultfunctionChatIndicator(){constisOnline=useSyncExternalStore(subscribe,getSnapshot);return<h1>{isOnline?'✅ Online':'❌ Disconnected'}</h1>;}functiongetSnapshot(){returnnavigator.onLine;}functionsubscribe(callback){window.addEventListener('online',callback);window.addEventListener('offline',callback);return()=>{window.removeEventListener('online',callback);window.removeEventListener('offline',callback);};}"
        },
        {
          "type": "p",
          "text": "Usually you won’t writeuseSyncExternalStoredirectly in your components. Instead, you’ll typically call it from your own custom Hook. This lets you use the same external store from different components. For example, this customuseOnlineStatusHook tracks whether the network is online:"
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';exportfunctionuseOnlineStatus(){constisOnline=useSyncExternalStore(subscribe,getSnapshot);returnisOnline;}functiongetSnapshot(){// ...}functionsubscribe(callback){// ...}"
        },
        {
          "type": "p",
          "text": "Now different components can calluseOnlineStatuswithout repeating the underlying implementation:"
        },
        {
          "type": "code",
          "code": "import{useOnlineStatus}from'./useOnlineStatus.js';functionStatusBar(){constisOnline=useOnlineStatus();return<h1>{isOnline?'✅ Online':'❌ Disconnected'}</h1>;}functionSaveButton(){constisOnline=useOnlineStatus();functionhandleSaveClick(){console.log('✅ Progress saved');}return(<buttondisabled={!isOnline}onClick={handleSaveClick}>{isOnline?'Save progress':'Reconnecting...'}</button>);}exportdefaultfunctionApp(){return(<><SaveButton/><StatusBar/></>);}"
        },
        {
          "type": "p",
          "text": "If your React app usesserver rendering,your React components will also run outside the browser environment to generate the initial HTML. This creates a few challenges when connecting to an external store:"
        },
        {
          "type": "list",
          "items": [
            "If you’re connecting to a browser-only API, it won’t work because it does not exist on the server.",
            "If you’re connecting to a third-party data store, you’ll need its data to match between the server and client."
          ]
        },
        {
          "type": "p",
          "text": "To solve these issues, pass agetServerSnapshotfunction as the third argument touseSyncExternalStore:"
        },
        {
          "type": "code",
          "code": "import{useSyncExternalStore}from'react';exportfunctionuseOnlineStatus(){constisOnline=useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);returnisOnline;}functiongetSnapshot(){returnnavigator.onLine;}functiongetServerSnapshot(){returntrue;// Always show \"Online\" for server-generated HTML}functionsubscribe(callback){// ...}"
        },
        {
          "type": "p",
          "text": "ThegetServerSnapshotfunction is similar togetSnapshot, but it runs only in two situations:"
        },
        {
          "type": "list",
          "items": [
            "It runs on the server when generating the HTML.",
            "It runs on the client duringhydration, i.e. when React takes the server HTML and makes it interactive."
          ]
        },
        {
          "type": "p",
          "text": "This lets you provide the initial snapshot value which will be used before the app becomes interactive. If there is no meaningful initial value for the server rendering, omit this argument toforce rendering on the client."
        },
        {
          "type": "p",
          "text": "Make sure thatgetServerSnapshotreturns the same exact data on the initial client render as it returned on the server. For example, ifgetServerSnapshotreturned some prepopulated store content on the server, you need to transfer this content to the client. One way to do this is to emit a<script>tag during server rendering that sets a global likewindow.MY_STORE_DATA, and read from that global on the client ingetServerSnapshot. Your external store should provide instructions on how to do that."
        },
        {
          "type": "p",
          "text": "This error means yourgetSnapshotfunction returns a new object every time it’s called, for example:"
        },
        {
          "type": "code",
          "code": "functiongetSnapshot(){// 🔴 Do not return always different objects from getSnapshotreturn{todos:myStore.todos};}"
        },
        {
          "type": "p",
          "text": "React will re-render the component ifgetSnapshotreturn value is different from the last time. This is why, if you always return a different value, you will enter an infinite loop and get this error. YourgetSnapshotobject should only return a different object if something has actually changed. If your store contains immutable data, you can return that data directly:"
        },
        {
          "type": "code",
          "code": "functiongetSnapshot(){// ✅ You can return immutable datareturnmyStore.todos;}"
        },
        {
          "type": "p",
          "text": "If your store data is mutable, yourgetSnapshotfunction should return an immutable snapshot of it. This means itdoesneed to create new objects, but it shouldn’t do this for every single call. Instead, it should store the last calculated snapshot, and return the same snapshot as the last time if the data in the store has not changed. How you determine whether mutable data has changed depends on your mutable store."
        },
        {
          "type": "p",
          "text": "Thissubscribefunction is definedinsidea component so it is different on every re-render:"
        },
        {
          "type": "code",
          "code": "functionChatIndicator(){constisOnline=useSyncExternalStore(subscribe,getSnapshot);// 🚩 Always a different function, so React will resubscribe on every re-renderfunctionsubscribe(){// ...}// ...}"
        },
        {
          "type": "p",
          "text": "React will resubscribe to your store if you pass a differentsubscribefunction between re-renders. If this causes performance issues and you’d like to avoid resubscribing, move thesubscribefunction outside:"
        },
        {
          "type": "code",
          "code": "functionChatIndicator(){constisOnline=useSyncExternalStore(subscribe,getSnapshot);// ...}// ✅ Always the same function, so React won't need to resubscribefunctionsubscribe(){// ...}"
        },
        {
          "type": "p",
          "text": "Alternatively, wrapsubscribeintouseCallbackto only resubscribe when some argument changes:"
        },
        {
          "type": "code",
          "code": "functionChatIndicator({userId}){constisOnline=useSyncExternalStore(subscribe,getSnapshot);// ✅ Same function as long as userId doesn't changeconstsubscribe=useCallback(()=>{// ...},[userId]);// ...}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/react/useTransition",
      "title": "useTransition – React",
      "content": [
        {
          "type": "p",
          "text": "useTransitionis a React Hook that lets you render a part of the UI in the background."
        },
        {
          "type": "code",
          "code": "const[isPending,startTransition]=useTransition()"
        },
        {
          "type": "list",
          "items": [
            "ReferenceuseTransition()startTransition(action)",
            "useTransition()",
            "startTransition(action)",
            "UsagePerform non-blocking updates with ActionsExposingactionprop from componentsDisplaying a pending visual statePreventing unwanted loading indicatorsBuilding a Suspense-enabled routerDisplaying an error to users with an error boundary",
            "Perform non-blocking updates with Actions",
            "Exposingactionprop from components",
            "Displaying a pending visual state",
            "Preventing unwanted loading indicators",
            "Building a Suspense-enabled router",
            "Displaying an error to users with an error boundary",
            "TroubleshootingUpdating an input in a Transition doesn’t workReact doesn’t treat my state update as a TransitionReact doesn’t treat my state update afterawaitas a TransitionI want to calluseTransitionfrom outside a componentThe function I pass tostartTransitionexecutes immediatelyMy state updates in Transitions are out of order",
            "Updating an input in a Transition doesn’t work",
            "React doesn’t treat my state update as a Transition",
            "React doesn’t treat my state update afterawaitas a Transition",
            "I want to calluseTransitionfrom outside a component",
            "The function I pass tostartTransitionexecutes immediately",
            "My state updates in Transitions are out of order"
          ]
        },
        {
          "type": "p",
          "text": "CalluseTransitionat the top level of your component to mark some state updates as Transitions."
        },
        {
          "type": "code",
          "code": "import{useTransition}from'react';functionTabContainer(){const[isPending,startTransition]=useTransition();// ...}"
        },
        {
          "type": "p",
          "text": "See more examples below."
        },
        {
          "type": "p",
          "text": "useTransitiondoes not take any parameters."
        },
        {
          "type": "p",
          "text": "useTransitionreturns an array with exactly two items:"
        },
        {
          "type": "list",
          "items": [
            "TheisPendingflag that tells you whether there is a pending Transition.",
            "ThestartTransitionfunctionthat lets you mark updates as a Transition."
          ]
        },
        {
          "type": "p",
          "text": "ThestartTransitionfunction returned byuseTransitionlets you mark a updates as a Transition."
        },
        {
          "type": "code",
          "code": "functionTabContainer(){const[isPending,startTransition]=useTransition();const[tab,setTab]=useState('about');functionselectTab(nextTab){startTransition(()=>{setTab(nextTab);});}// ...}"
        },
        {
          "type": "p",
          "text": "The function passed tostartTransitionis called an “Action”. By convention, any callback called insidestartTransition(such as a callback prop) should be namedactionor include the “Action” suffix:"
        },
        {
          "type": "code",
          "code": "functionSubmitButton({submitAction}){const[isPending,startTransition]=useTransition();return(<buttondisabled={isPending}onClick={()=>{startTransition(()=>{submitAction();});}}>Submit</button>);}"
        },
        {
          "type": "list",
          "items": [
            "action: A function that updates some state by calling one or moresetfunctions. React callsactionimmediately with no parameters and marks all state updates scheduled synchronously during theactionfunction call as Transitions. Any async calls that are awaited in theactionwill be included in the Transition, but currently require wrapping anysetfunctions after theawaitin an additionalstartTransition(seeTroubleshooting). State updates marked as Transitions will benon-blockingandwill not display unwanted loading indicators."
          ]
        },
        {
          "type": "p",
          "text": "startTransitiondoes not return anything."
        },
        {
          "type": "list",
          "items": [
            "useTransitionis a Hook, so it can only be called inside components or custom Hooks. If you need to start a Transition somewhere else (for example, from a data library), call the standalonestartTransitioninstead.",
            "You can wrap an update into a Transition only if you have access to thesetfunction of that state. If you want to start a Transition in response to some prop or a custom Hook value, tryuseDeferredValueinstead.",
            "The function you pass tostartTransitionis called immediately, marking all state updates that happen while it executes as Transitions. If you try to perform state updates in asetTimeout, for example, they won’t be marked as Transitions.",
            "You must wrap any state updates after any async requests in anotherstartTransitionto mark them as Transitions. This is a known limitation that we will fix in the future (seeTroubleshooting).",
            "ThestartTransitionfunction has a stable identity, so you will often see it omitted from Effect dependencies, but including it will not cause the Effect to fire. If the linter lets you omit a dependency without errors, it is safe to do.Learn more about removing Effect dependencies.",
            "A state update marked as a Transition will be interrupted by other state updates. For example, if you update a chart component inside a Transition, but then start typing into an input while the chart is in the middle of a re-render, React will restart the rendering work on the chart component after handling the input update.",
            "Transition updates can’t be used to control text inputs.",
            "If there are multiple ongoing Transitions, React currently batches them together. This is a limitation that may be removed in a future release."
          ]
        },
        {
          "type": "p",
          "text": "CalluseTransitionat the top of your component to create Actions, and access the pending state:"
        },
        {
          "type": "code",
          "code": "import{useState,useTransition}from'react';functionCheckoutForm(){const[isPending,startTransition]=useTransition();// ...}"
        },
        {
          "type": "p",
          "text": "useTransitionreturns an array with exactly two items:"
        },
        {
          "type": "list",
          "items": [
            "TheisPendingflagthat tells you whether there is a pending Transition.",
            "ThestartTransitionfunctionthat lets you create an Action."
          ]
        },
        {
          "type": "p",
          "text": "To start a Transition, pass a function tostartTransitionlike this:"
        },
        {
          "type": "code",
          "code": "import{useState,useTransition}from'react';import{updateQuantity}from'./api';functionCheckoutForm(){const[isPending,startTransition]=useTransition();const[quantity,setQuantity]=useState(1);functiononSubmit(newQuantity){startTransition(asyncfunction(){constsavedQuantity=awaitupdateQuantity(newQuantity);startTransition(()=>{setQuantity(savedQuantity);});});}// ...}"
        },
        {
          "type": "p",
          "text": "The function passed tostartTransitionis called the “Action”. You can update state and (optionally) perform side effects within an Action, and the work will be done in the background without blocking user interactions on the page. A Transition can include multiple Actions, and while a Transition is in progress, your UI stays responsive. For example, if the user clicks a tab but then changes their mind and clicks another tab, the second click will be immediately handled without waiting for the first update to finish. To give the user feedback about in-progress Transitions, toisPendingstate switches totrueat the first call tostartTransition, and staystrueuntil all Actions complete and the final state is shown to the user. Transitions ensure side effects in Actions to complete in order toprevent unwanted loading indicators, and you can provide immediate feedback while the Transition is in progress withuseOptimistic."
        },
        {
          "type": "p",
          "text": "In this example, theupdateQuantityfunction simulates a request to the server to update the item’s quantity in the cart. This function isartificially slowed downso that it takes at least a second to complete the request. Update the quantity multiple times quickly. Notice that the pending “Total” state is shown while any requests are in progress, and the “Total” updates only after the final request is complete. Because the update is in an Action, the “quantity” can continue to be updated while the request is in progress."
        },
        {
          "type": "code",
          "code": "import{useState,useTransition}from\"react\";import{updateQuantity}from\"./api\";importItemfrom\"./Item\";importTotalfrom\"./Total\";exportdefaultfunctionApp({}){const[quantity,setQuantity]=useState(1);const[isPending,startTransition]=useTransition();constupdateQuantityAction=asyncnewQuantity=>{// To access the pending state of a transition,// call startTransition again.startTransition(async()=>{constsavedQuantity=awaitupdateQuantity(newQuantity);startTransition(()=>{setQuantity(savedQuantity);});});};return(<div><h1>Checkout</h1><Itemaction={updateQuantityAction}/><hr/><Totalquantity={quantity}isPending={isPending}/></div>);}"
        },
        {
          "type": "p",
          "text": "This is a basic example to demonstrate how Actions work, but this example does not handle requests completing out of order. When updating the quantity multiple times, it’s possible for the previous requests to finish after later requests causing the quantity to update out of order. This is a known limitation that we will fix in the future (seeTroubleshootingbelow). For common use cases, React provides built-in abstractions such as:"
        },
        {
          "type": "list",
          "items": ["useActionState", "<form>actions", "Server Actions"]
        },
        {
          "type": "p",
          "text": "These solutions handle request ordering for you. When using Transitions to build your own custom hooks or libraries that manage async state transitions, you have greater control over the request ordering, but you must handle it yourself."
        },
        {
          "type": "p",
          "text": "You can expose anactionprop from a component to allow a parent to call an Action. For example, thisTabButtoncomponent wraps itsonClicklogic in anactionprop:"
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionTabButton({action,children,isActive}){const[isPending,startTransition]=useTransition();if(isActive){return<b>{children}</b>}return(<buttononClick={()=>{startTransition(()=>{action();});}}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "Because the parent component updates its state inside theaction, that state update gets marked as a Transition. This means you can click on “Posts” and then immediately click “Contact” and it does not block user interactions:"
        },
        {
          "type": "code",
          "code": "import{useTransition}from'react';exportdefaultfunctionTabButton({action,children,isActive}){const[isPending,startTransition]=useTransition();if(isActive){return<b>{children}</b>}return(<buttononClick={()=>{startTransition(()=>{action();});}}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "You can use theisPendingboolean value returned byuseTransitionto indicate to the user that a Transition is in progress. For example, the tab button can have a special “pending” visual state:"
        },
        {
          "type": "code",
          "code": "functionTabButton({action,children,isActive}){const[isPending,startTransition]=useTransition();// ...if(isPending){return<bclassName=\"pending\">{children}</b>;}// ..."
        },
        {
          "type": "p",
          "text": "Notice how clicking “Posts” now feels more responsive because the tab button itself updates right away:"
        },
        {
          "type": "code",
          "code": "import{useTransition}from'react';exportdefaultfunctionTabButton({action,children,isActive}){const[isPending,startTransition]=useTransition();if(isActive){return<b>{children}</b>}if(isPending){return<bclassName=\"pending\">{children}</b>;}return(<buttononClick={()=>{startTransition(()=>{action();});}}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "In this example, thePostsTabcomponent fetches some data usinguse. When you click the “Posts” tab, thePostsTabcomponentsuspends, causing the closest loading fallback to appear:"
        },
        {
          "type": "code",
          "code": "import{Suspense,useState}from'react';importTabButtonfrom'./TabButton.js';importAboutTabfrom'./AboutTab.js';importPostsTabfrom'./PostsTab.js';importContactTabfrom'./ContactTab.js';exportdefaultfunctionTabContainer(){const[tab,setTab]=useState('about');return(<Suspensefallback={<h1>🌀 Loading...</h1>}><TabButtonisActive={tab==='about'}action={()=>setTab('about')}>About</TabButton><TabButtonisActive={tab==='posts'}action={()=>setTab('posts')}>Posts</TabButton><TabButtonisActive={tab==='contact'}action={()=>setTab('contact')}>Contact</TabButton><hr/>{tab==='about'&&<AboutTab/>}{tab==='posts'&&<PostsTab/>}{tab==='contact'&&<ContactTab/>}</Suspense>);}"
        },
        {
          "type": "p",
          "text": "Hiding the entire tab container to show a loading indicator leads to a jarring user experience. If you adduseTransitiontoTabButton, you can instead display the pending state in the tab button instead. Notice that clicking “Posts” no longer replaces the entire tab container with a spinner:"
        },
        {
          "type": "code",
          "code": "import{useTransition}from'react';exportdefaultfunctionTabButton({action,children,isActive}){const[isPending,startTransition]=useTransition();if(isActive){return<b>{children}</b>}if(isPending){return<bclassName=\"pending\">{children}</b>;}return(<buttononClick={()=>{startTransition(()=>{action();});}}>{children}</button>);}"
        },
        {
          "type": "p",
          "text": "Read more about using Transitions with Suspense."
        },
        {
          "type": "p",
          "text": "Transitions only “wait” long enough to avoid hidingalready revealedcontent (like the tab container). If the Posts tab had anested<Suspense>boundary,the Transition would not “wait” for it."
        },
        {
          "type": "p",
          "text": "If you’re building a React framework or a router, we recommend marking page navigations as Transitions."
        },
        {
          "type": "code",
          "code": "functionRouter(){const[page,setPage]=useState('/');const[isPending,startTransition]=useTransition();functionnavigate(url){startTransition(()=>{setPage(url);});}// ..."
        },
        {
          "type": "p",
          "text": "This is recommended for three reasons:"
        },
        {
          "type": "list",
          "items": [
            "Transitions are interruptible,which lets the user click away without waiting for the re-render to complete.",
            "Transitions prevent unwanted loading indicators,which lets the user avoid jarring jumps on navigation.",
            "Transitions wait for all pending actionswhich lets the user wait for side effects to complete before the new page is shown."
          ]
        },
        {
          "type": "p",
          "text": "Here is a simplified router example using Transitions for navigations."
        },
        {
          "type": "code",
          "code": "import{Suspense,useState,useTransition}from'react';importIndexPagefrom'./IndexPage.js';importArtistPagefrom'./ArtistPage.js';importLayoutfrom'./Layout.js';exportdefaultfunctionApp(){return(<Suspensefallback={<BigSpinner/>}><Router/></Suspense>);}functionRouter(){const[page,setPage]=useState('/');const[isPending,startTransition]=useTransition();functionnavigate(url){startTransition(()=>{setPage(url);});}letcontent;if(page==='/'){content=(<IndexPagenavigate={navigate}/>);}elseif(page==='/the-beatles'){content=(<ArtistPageartist={{id:'the-beatles',name:'The Beatles',}}/>);}return(<LayoutisPending={isPending}>{content}</Layout>);}functionBigSpinner(){return<h2>🌀 Loading...</h2>;}"
        },
        {
          "type": "p",
          "text": "Suspense-enabledrouters are expected to wrap the navigation updates into Transitions by default."
        },
        {
          "type": "p",
          "text": "If a function passed tostartTransitionthrows an error, you can display an error to your user with anerror boundary. To use an error boundary, wrap the component where you are calling theuseTransitionin an error boundary. Once the function passed tostartTransitionerrors, the fallback for the error boundary will be displayed."
        },
        {
          "type": "code",
          "code": "import{useTransition}from\"react\";import{ErrorBoundary}from\"react-error-boundary\";exportfunctionAddCommentContainer(){return(<ErrorBoundaryfallback={<p>⚠️Something went wrong</p>}><AddCommentButton/></ErrorBoundary>);}functionaddComment(comment){// For demonstration purposes to show Error Boundaryif(comment==null){thrownewError(\"Example Error: An error thrown to trigger error boundary\");}}functionAddCommentButton(){const[pending,startTransition]=useTransition();return(<buttondisabled={pending}onClick={()=>{startTransition(()=>{// Intentionally not passing a comment// so error gets thrownaddComment();});}}>Add comment</button>);}"
        },
        {
          "type": "p",
          "text": "You can’t use a Transition for a state variable that controls an input:"
        },
        {
          "type": "code",
          "code": "const[text,setText]=useState('');// ...functionhandleChange(e){// ❌ Can't use Transitions for controlled input statestartTransition(()=>{setText(e.target.value);});}// ...return<inputvalue={text}onChange={handleChange}/>;"
        },
        {
          "type": "p",
          "text": "This is because Transitions are non-blocking, but updating an input in response to the change event should happen synchronously. If you want to run a Transition in response to typing, you have two options:"
        },
        {
          "type": "list",
          "items": [
            "You can declare two separate state variables: one for the input state (which always updates synchronously), and one that you will update in a Transition. This lets you control the input using the synchronous state, and pass the Transition state variable (which will “lag behind” the input) to the rest of your rendering logic.",
            "Alternatively, you can have one state variable, and adduseDeferredValuewhich will “lag behind” the real value. It will trigger non-blocking re-renders to “catch up” with the new value automatically."
          ]
        },
        {
          "type": "p",
          "text": "When you wrap a state update in a Transition, make sure that it happensduringthestartTransitioncall:"
        },
        {
          "type": "code",
          "code": "startTransition(()=>{// ✅ Setting state *during* startTransition callsetPage('/about');});"
        },
        {
          "type": "p",
          "text": "The function you pass tostartTransitionmust be synchronous. You can’t mark an update as a Transition like this:"
        },
        {
          "type": "code",
          "code": "startTransition(()=>{// ❌ Setting state *after* startTransition callsetTimeout(()=>{setPage('/about');},1000);});"
        },
        {
          "type": "p",
          "text": "Instead, you could do this:"
        },
        {
          "type": "code",
          "code": "setTimeout(()=>{startTransition(()=>{// ✅ Setting state *during* startTransition callsetPage('/about');});},1000);"
        },
        {
          "type": "p",
          "text": "When you useawaitinside astartTransitionfunction, the state updates that happen after theawaitare not marked as Transitions. You must wrap state updates after eachawaitin astartTransitioncall:"
        },
        {
          "type": "code",
          "code": "startTransition(async()=>{awaitsomeAsyncFunction();// ❌ Not using startTransition after awaitsetPage('/about');});"
        },
        {
          "type": "p",
          "text": "However, this works instead:"
        },
        {
          "type": "code",
          "code": "startTransition(async()=>{awaitsomeAsyncFunction();// ✅ Using startTransition *after* awaitstartTransition(()=>{setPage('/about');});});"
        },
        {
          "type": "p",
          "text": "This is a JavaScript limitation due to React losing the scope of the async context. In the future, whenAsyncContextis available, this limitation will be removed."
        },
        {
          "type": "p",
          "text": "You can’t calluseTransitionoutside a component because it’s a Hook. In this case, use the standalonestartTransitionmethod instead. It works the same way, but it doesn’t provide theisPendingindicator."
        },
        {
          "type": "p",
          "text": "If you run this code, it will print 1, 2, 3:"
        },
        {
          "type": "code",
          "code": "console.log(1);startTransition(()=>{console.log(2);setPage('/about');});console.log(3);"
        },
        {
          "type": "p",
          "text": "It is expected to print 1, 2, 3.The function you pass tostartTransitiondoes not get delayed. Unlike with the browsersetTimeout, it does not run the callback later. React executes your function immediately, but any state updates scheduledwhile it is runningare marked as Transitions. You can imagine that it works like this:"
        },
        {
          "type": "code",
          "code": "// A simplified version of how React worksletisInsideTransition=false;functionstartTransition(scope){isInsideTransition=true;scope();isInsideTransition=false;}functionsetState(){if(isInsideTransition){// ... schedule a Transition state update ...}else{// ... schedule an urgent state update ...}}"
        },
        {
          "type": "p",
          "text": "If youawaitinsidestartTransition, you might see the updates happen out of order. In this example, theupdateQuantityfunction simulates a request to the server to update the item’s quantity in the cart. This functionartificially returns the every other request after the previousto simulate race conditions for network requests. Try updating the quantity once, then update it quickly multiple times. You might see the incorrect total:"
        },
        {
          "type": "code",
          "code": "import{useState,useTransition}from\"react\";import{updateQuantity}from\"./api\";importItemfrom\"./Item\";importTotalfrom\"./Total\";exportdefaultfunctionApp({}){const[quantity,setQuantity]=useState(1);const[isPending,startTransition]=useTransition();// Store the actual quantity in separate state to show the mismatch.const[clientQuantity,setClientQuantity]=useState(1);constupdateQuantityAction=newQuantity=>{setClientQuantity(newQuantity);// Access the pending state of the transition,// by wrapping in startTransition again.startTransition(async()=>{constsavedQuantity=awaitupdateQuantity(newQuantity);startTransition(()=>{setQuantity(savedQuantity);});});};return(<div><h1>Checkout</h1><Itemaction={updateQuantityAction}/><hr/><TotalclientQuantity={clientQuantity}savedQuantity={quantity}isPending={isPending}/></div>);}"
        },
        {
          "type": "p",
          "text": "When clicking multiple times, it’s possible for previous requests to finish after later requests. When this happens, React currently has no way to know the intended order. This is because the updates are scheduled asynchronously, and React loses context of the order across the async boundary. This is expected, because Actions within a Transition do not guarantee execution order. For common use cases, React provides higher-level abstractions likeuseActionStateand<form>actionsthat handle ordering for you. For advanced use cases, you’ll need to implement your own queuing and abort logic to handle this."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/directives",
      "title": "Directives – React",
      "content": [
        {
          "type": "p",
          "text": "Directives are for use inReact Server Components."
        },
        {
          "type": "p",
          "text": "Directives provide instructions tobundlers compatible with React Server Components."
        },
        {
          "type": "list",
          "items": [
            "'use client'lets you mark what code runs on the client.",
            "'use server'marks server-side functions that can be called from client-side code."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/server-actions",
      "title": "Server Functions – React",
      "content": [
        {
          "type": "p",
          "text": "Server Functions are for use inReact Server Components. Note:Until September 2024, we referred to all Server Functions as “Server Actions”. If a Server Function is passed to an action prop or called from inside an action then it is a Server Action, but not all Server Functions are Server Actions. The naming in this documentation has been updated to reflect that Server Functions can be used for multiple purposes."
        },
        {
          "type": "p",
          "text": "Server Functions allow Client Components to call async functions executed on the server."
        },
        {
          "type": "p",
          "text": "While Server Functions in React 19 are stable and will not break between major versions, the underlying APIs used to implement Server Functions in a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. To support Server Functions as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement Server Functions in the future."
        },
        {
          "type": "p",
          "text": "When a Server Functions is defined with the\"use server\"directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result. Server Functions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components."
        },
        {
          "type": "p",
          "text": "Server Components can define Server Functions with the\"use server\"directive:"
        },
        {
          "type": "code",
          "code": "// Server ComponentimportButtonfrom'./Button';functionEmptyNote(){asyncfunctioncreateNoteAction(){// Server Function'use server';awaitdb.notes.create();}return<ButtononClick={createNoteAction}/>;}"
        },
        {
          "type": "p",
          "text": "When React renders theEmptyNoteServer Function, it will create a reference to thecreateNoteActionfunction, and pass that reference to theButtonClient Component. When the button is clicked, React will send a request to the server to execute thecreateNoteActionfunction with the reference provided:"
        },
        {
          "type": "code",
          "code": "\"use client\";exportdefaultfunctionButton({onClick}){console.log(onClick);// {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNoteAction'}return<buttononClick={()=>onClick()}>Create Empty Note</button>}"
        },
        {
          "type": "p",
          "text": "For more, see the docs for\"use server\"."
        },
        {
          "type": "p",
          "text": "Client Components can import Server Functions from files that use the\"use server\"directive:"
        },
        {
          "type": "code",
          "code": "\"use server\";exportasyncfunctioncreateNote(){awaitdb.notes.create();}"
        },
        {
          "type": "p",
          "text": "When the bundler builds theEmptyNoteClient Component, it will create a reference to thecreateNoteActionfunction in the bundle. When thebuttonis clicked, React will send a request to the server to execute thecreateNoteActionfunction using the reference provided:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{createNote}from'./actions';functionEmptyNote(){console.log(createNote);// {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNoteAction'}<buttononClick={()=>createNote()}/>}"
        },
        {
          "type": "p",
          "text": "For more, see the docs for\"use server\"."
        },
        {
          "type": "p",
          "text": "Server Functions can be called from Actions on the client:"
        },
        {
          "type": "code",
          "code": "\"use server\";exportasyncfunctionupdateName(name){if(!name){return{error:'Name is required'};}awaitdb.users.updateName(name);}"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[name,setName]=useState('');const[error,setError]=useState(null);const[isPending,startTransition]=useTransition();constsubmitAction=async()=>{startTransition(async()=>{const{error}=awaitupdateName(name);if(!error){setError(error);}else{setName('');}})}return(<formaction={submitAction}><inputtype=\"text\"name=\"name\"disabled={isPending}/>{state.error&&<span>Failed:{state.error}</span>}</form>)}"
        },
        {
          "type": "p",
          "text": "This allows you to access theisPendingstate of the Server Function by wrapping it in an Action on the client. For more, see the docs forCalling a Server Function outside of<form>"
        },
        {
          "type": "p",
          "text": "Server Functions work with the new Form features in React 19. You can pass a Server Function to a Form to automatically submit the form to the server:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){return(<formaction={updateName}><inputtype=\"text\"name=\"name\"/></form>)}"
        },
        {
          "type": "p",
          "text": "When the Form submission succeeds, React will automatically reset the form. You can adduseActionStateto access the pending state, last response, or to support progressive enhancement. For more, see the docs forServer Functions in Forms."
        },
        {
          "type": "p",
          "text": "You can call Server Functions withuseActionStatefor the common case where you just need access to the action pending state and last returned response:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[state,submitAction,isPending]=useActionState(updateName,{error:null});return(<formaction={submitAction}><inputtype=\"text\"name=\"name\"disabled={isPending}/>{state.error&&<span>Failed:{state.error}</span>}</form>);}"
        },
        {
          "type": "p",
          "text": "When usinguseActionStatewith Server Functions, React will also automatically replay form submissions entered before hydration finishes. This means users can interact with your app even before the app has hydrated. For more, see the docs foruseActionState."
        },
        {
          "type": "p",
          "text": "Server Functions also support progressive enhancement with the third argument ofuseActionState."
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[,submitAction]=useActionState(updateName,null,`/name/update`);return(<formaction={submitAction}>...</form>);}"
        },
        {
          "type": "p",
          "text": "When thepermalinkis provided touseActionState, React will redirect to the provided URL if the form is submitted before the JavaScript bundle loads. For more, see the docs foruseActionState."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/server-components",
      "title": "Server Components – React",
      "content": [
        {
          "type": "p",
          "text": "Sever Components are for use inReact Server Components."
        },
        {
          "type": "p",
          "text": "Server Components are a new type of Component that renders ahead of time, before bundling, in an environment separate from your client app or SSR server."
        },
        {
          "type": "p",
          "text": "This separate environment is the “server” in React Server Components. Server Components can run once at build time on your CI server, or they can be run for each request using a web server."
        },
        {
          "type": "list",
          "items": [
            "Server Components without a Server",
            "Server Components with a Server",
            "Adding interactivity to Server Components",
            "Async components with Server Components"
          ]
        },
        {
          "type": "p",
          "text": "While React Server Components in React 19 are stable and will not break between major versions, the underlying APIs used to implement a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. To support React Server Components as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement React Server Components in the future."
        },
        {
          "type": "p",
          "text": "Server components can run at build time to read from the filesystem or fetch static content, so a web server is not required. For example, you may want to read static data from a content management system. Without Server Components, it’s common to fetch static data on the client with an Effect:"
        },
        {
          "type": "code",
          "code": "// bundle.jsimportmarkedfrom'marked';// 35.9K (11.2K gzipped)importsanitizeHtmlfrom'sanitize-html';// 206K (63.3K gzipped)functionPage({page}){const[content,setContent]=useState('');// NOTE: loads *after* first page render.useEffect(()=>{fetch(`/api/content/${page}`).then((data)=>{setContent(data.content);});},[page]);return<div>{sanitizeHtml(marked(content))}</div>;}"
        },
        {
          "type": "code",
          "code": "// api.jsapp.get(`/api/content/:page`,async(req,res)=>{constpage=req.params.page;constcontent=awaitfile.readFile(`${page}.md`);res.send({content});});"
        },
        {
          "type": "p",
          "text": "This pattern means users need to download and parse an additional 75K (gzipped) of libraries, and wait for a second request to fetch the data after the page loads, just to render static content that will not change for the lifetime of the page. With Server Components, you can render these components once at build time:"
        },
        {
          "type": "code",
          "code": "importmarkedfrom'marked';// Not included in bundleimportsanitizeHtmlfrom'sanitize-html';// Not included in bundleasyncfunctionPage({page}){// NOTE: loads *during* render, when the app is built.constcontent=awaitfile.readFile(`${page}.md`);return<div>{sanitizeHtml(marked(content))}</div>;}"
        },
        {
          "type": "p",
          "text": "The rendered output can then be server-side rendered (SSR) to HTML and uploaded to a CDN. When the app loads, the client will not see the originalPagecomponent, or the expensive libraries for rendering the markdown. The client will only see the rendered output:"
        },
        {
          "type": "code",
          "code": "<div><!-- html for markdown --></div>"
        },
        {
          "type": "p",
          "text": "This means the content is visible during first page load, and the bundle does not include the expensive libraries needed to render the static content."
        },
        {
          "type": "p",
          "text": "You may notice that the Server Component above is an async function:"
        },
        {
          "type": "code",
          "code": "asyncfunctionPage({page}){//...}"
        },
        {
          "type": "p",
          "text": "Async Components are a new feature of Server Components that allow you toawaitin render. SeeAsync components with Server Componentsbelow."
        },
        {
          "type": "p",
          "text": "Server Components can also run on a web server during a request for a page, letting you access your data layer without having to build an API. They are rendered before your application is bundled, and can pass data and JSX as props to Client Components. Without Server Components, it’s common to fetch dynamic data on the client in an Effect:"
        },
        {
          "type": "code",
          "code": "// bundle.jsfunctionNote({id}){const[note,setNote]=useState('');// NOTE: loads *after* first render.useEffect(()=>{fetch(`/api/notes/${id}`).then(data=>{setNote(data.note);});},[id]);return(<div><Authorid={note.authorId}/><p>{note}</p></div>);}functionAuthor({id}){const[author,setAuthor]=useState('');// NOTE: loads *after* Note renders.// Causing an expensive client-server waterfall.useEffect(()=>{fetch(`/api/authors/${id}`).then(data=>{setAuthor(data.author);});},[id]);return<span>By:{author.name}</span>;}"
        },
        {
          "type": "code",
          "code": "// apiimportdbfrom'./database';app.get(`/api/notes/:id`,async(req,res)=>{constnote=awaitdb.notes.get(id);res.send({note});});app.get(`/api/authors/:id`,async(req,res)=>{constauthor=awaitdb.authors.get(id);res.send({author});});"
        },
        {
          "type": "p",
          "text": "With Server Components, you can read the data and render it in the component:"
        },
        {
          "type": "code",
          "code": "importdbfrom'./database';asyncfunctionNote({id}){// NOTE: loads *during* render.constnote=awaitdb.notes.get(id);return(<div><Authorid={note.authorId}/><p>{note}</p></div>);}asyncfunctionAuthor({id}){// NOTE: loads *after* Note,// but is fast if data is co-located.constauthor=awaitdb.authors.get(id);return<span>By:{author.name}</span>;}"
        },
        {
          "type": "p",
          "text": "The bundler then combines the data, rendered Server Components and dynamic Client Components into a bundle. Optionally, that bundle can then be server-side rendered (SSR) to create the initial HTML for the page. When the page loads, the browser does not see the originalNoteandAuthorcomponents; only the rendered output is sent to the client:"
        },
        {
          "type": "code",
          "code": "<div><span>By: The React Team</span><p>React 19 is...</p></div>"
        },
        {
          "type": "p",
          "text": "Server Components can be made dynamic by re-fetching them from a server, where they can access the data and render again. This new application architecture combines the simple “request/response” mental model of server-centric Multi-Page Apps with the seamless interactivity of client-centric Single-Page Apps, giving you the best of both worlds."
        },
        {
          "type": "p",
          "text": "Server Components are not sent to the browser, so they cannot use interactive APIs likeuseState. To add interactivity to Server Components, you can compose them with Client Component using the\"use client\"directive."
        },
        {
          "type": "p",
          "text": "A common misunderstanding is that Server Components are denoted by\"use server\", but there is no directive for Server Components. The\"use server\"directive is used for Server Functions. For more info, see the docs forDirectives."
        },
        {
          "type": "p",
          "text": "In the following example, theNotesServer Component imports anExpandableClient Component that uses state to toggle itsexpandedstate:"
        },
        {
          "type": "code",
          "code": "// Server ComponentimportExpandablefrom'./Expandable';asyncfunctionNotes(){constnotes=awaitdb.notes.getAll();return(<div>{notes.map(note=>(<Expandablekey={note.id}><pnote={note}/></Expandable>))}</div>)}"
        },
        {
          "type": "code",
          "code": "// Client Component\"use client\"exportdefaultfunctionExpandable({children}){const[expanded,setExpanded]=useState(false);return(<div><buttononClick={()=>setExpanded(!expanded)}>Toggle</button>{expanded&&children}</div>)}"
        },
        {
          "type": "p",
          "text": "This works by first renderingNotesas a Server Component, and then instructing the bundler to create a bundle for the Client ComponentExpandable. In the browser, the Client Components will see output of the Server Components passed as props:"
        },
        {
          "type": "code",
          "code": "<head><!-- the bundle for Client Components --><scriptsrc=\"bundle.js\"/></head><body><div><Expandablekey={1}><p>this is the first note</p></Expandable><Expandablekey={2}><p>this is the second note</p></Expandable><!--...--></div></body>"
        },
        {
          "type": "p",
          "text": "Server Components introduce a new way to write Components using async/await. When youawaitin an async component, React will suspend and wait for the promise to resolve before resuming rendering. This works across server/client boundaries with streaming support for Suspense. You can even create a promise on the server, and await it on the client:"
        },
        {
          "type": "code",
          "code": "// Server Componentimportdbfrom'./database';asyncfunctionPage({id}){// Will suspend the Server Component.constnote=awaitdb.notes.get(id);// NOTE: not awaited, will start here and await on the client.constcommentsPromise=db.comments.get(note.id);return(<div>{note}<Suspensefallback={<p>Loading Comments...</p>}><CommentscommentsPromise={commentsPromise}/></Suspense></div>);}"
        },
        {
          "type": "code",
          "code": "// Client Component\"use client\";import{use}from'react';functionComments({commentsPromise}){// NOTE: this will resume the promise from the server.// It will suspend until the data is available.constcomments=use(commentsPromise);returncomments.map(commment=><p>{comment}</p>);}"
        },
        {
          "type": "p",
          "text": "Thenotecontent is important data for the page to render, so weawaitit on the server. The comments are below the fold and lower-priority, so we start the promise on the server, and wait for it on the client with theuseAPI. This will Suspend on the client, without blocking thenotecontent from rendering. Since async components arenot supported on the client, we await the promise withuse."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/server-functions",
      "title": "Server Functions – React",
      "content": [
        {
          "type": "p",
          "text": "Server Functions are for use inReact Server Components. Note:Until September 2024, we referred to all Server Functions as “Server Actions”. If a Server Function is passed to an action prop or called from inside an action then it is a Server Action, but not all Server Functions are Server Actions. The naming in this documentation has been updated to reflect that Server Functions can be used for multiple purposes."
        },
        {
          "type": "p",
          "text": "Server Functions allow Client Components to call async functions executed on the server."
        },
        {
          "type": "p",
          "text": "While Server Functions in React 19 are stable and will not break between major versions, the underlying APIs used to implement Server Functions in a React Server Components bundler or framework do not follow semver and may break between minors in React 19.x. To support Server Functions as a bundler or framework, we recommend pinning to a specific React version, or using the Canary release. We will continue working with bundlers and frameworks to stabilize the APIs used to implement Server Functions in the future."
        },
        {
          "type": "p",
          "text": "When a Server Functions is defined with the\"use server\"directive, your framework will automatically create a reference to the server function, and pass that reference to the Client Component. When that function is called on the client, React will send a request to the server to execute the function, and return the result. Server Functions can be created in Server Components and passed as props to Client Components, or they can be imported and used in Client Components."
        },
        {
          "type": "p",
          "text": "Server Components can define Server Functions with the\"use server\"directive:"
        },
        {
          "type": "code",
          "code": "// Server ComponentimportButtonfrom'./Button';functionEmptyNote(){asyncfunctioncreateNoteAction(){// Server Function'use server';awaitdb.notes.create();}return<ButtononClick={createNoteAction}/>;}"
        },
        {
          "type": "p",
          "text": "When React renders theEmptyNoteServer Function, it will create a reference to thecreateNoteActionfunction, and pass that reference to theButtonClient Component. When the button is clicked, React will send a request to the server to execute thecreateNoteActionfunction with the reference provided:"
        },
        {
          "type": "code",
          "code": "\"use client\";exportdefaultfunctionButton({onClick}){console.log(onClick);// {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNoteAction'}return<buttononClick={()=>onClick()}>Create Empty Note</button>}"
        },
        {
          "type": "p",
          "text": "For more, see the docs for\"use server\"."
        },
        {
          "type": "p",
          "text": "Client Components can import Server Functions from files that use the\"use server\"directive:"
        },
        {
          "type": "code",
          "code": "\"use server\";exportasyncfunctioncreateNote(){awaitdb.notes.create();}"
        },
        {
          "type": "p",
          "text": "When the bundler builds theEmptyNoteClient Component, it will create a reference to thecreateNoteActionfunction in the bundle. When thebuttonis clicked, React will send a request to the server to execute thecreateNoteActionfunction using the reference provided:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{createNote}from'./actions';functionEmptyNote(){console.log(createNote);// {$$typeof: Symbol.for(\"react.server.reference\"), $$id: 'createNoteAction'}<buttononClick={()=>createNote()}/>}"
        },
        {
          "type": "p",
          "text": "For more, see the docs for\"use server\"."
        },
        {
          "type": "p",
          "text": "Server Functions can be called from Actions on the client:"
        },
        {
          "type": "code",
          "code": "\"use server\";exportasyncfunctionupdateName(name){if(!name){return{error:'Name is required'};}awaitdb.users.updateName(name);}"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[name,setName]=useState('');const[error,setError]=useState(null);const[isPending,startTransition]=useTransition();constsubmitAction=async()=>{startTransition(async()=>{const{error}=awaitupdateName(name);if(!error){setError(error);}else{setName('');}})}return(<formaction={submitAction}><inputtype=\"text\"name=\"name\"disabled={isPending}/>{state.error&&<span>Failed:{state.error}</span>}</form>)}"
        },
        {
          "type": "p",
          "text": "This allows you to access theisPendingstate of the Server Function by wrapping it in an Action on the client. For more, see the docs forCalling a Server Function outside of<form>"
        },
        {
          "type": "p",
          "text": "Server Functions work with the new Form features in React 19. You can pass a Server Function to a Form to automatically submit the form to the server:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){return(<formaction={updateName}><inputtype=\"text\"name=\"name\"/></form>)}"
        },
        {
          "type": "p",
          "text": "When the Form submission succeeds, React will automatically reset the form. You can adduseActionStateto access the pending state, last response, or to support progressive enhancement. For more, see the docs forServer Functions in Forms."
        },
        {
          "type": "p",
          "text": "You can call Server Functions withuseActionStatefor the common case where you just need access to the action pending state and last returned response:"
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[state,submitAction,isPending]=useActionState(updateName,{error:null});return(<formaction={submitAction}><inputtype=\"text\"name=\"name\"disabled={isPending}/>{state.error&&<span>Failed:{state.error}</span>}</form>);}"
        },
        {
          "type": "p",
          "text": "When usinguseActionStatewith Server Functions, React will also automatically replay form submissions entered before hydration finishes. This means users can interact with your app even before the app has hydrated. For more, see the docs foruseActionState."
        },
        {
          "type": "p",
          "text": "Server Functions also support progressive enhancement with the third argument ofuseActionState."
        },
        {
          "type": "code",
          "code": "\"use client\";import{updateName}from'./actions';functionUpdateName(){const[,submitAction]=useActionState(updateName,null,`/name/update`);return(<formaction={submitAction}>...</form>);}"
        },
        {
          "type": "p",
          "text": "When thepermalinkis provided touseActionState, React will redirect to the provided URL if the form is submitted before the JavaScript bundle loads. For more, see the docs foruseActionState."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/use-client",
      "title": "'use client' directive – React",
      "content": [
        {
          "type": "p",
          "text": "'use client'is for use withReact Server Components."
        },
        {
          "type": "p",
          "text": "'use client'lets you mark what code runs on the client."
        },
        {
          "type": "list",
          "items": [
            "Reference'use client'How'use client'marks client codeWhen to use'use client'Serializable types returned by Server Components",
            "'use client'",
            "How'use client'marks client code",
            "When to use'use client'",
            "Serializable types returned by Server Components",
            "UsageBuilding with interactivity and stateUsing client APIsUsing third-party libraries",
            "Building with interactivity and state",
            "Using client APIs",
            "Using third-party libraries"
          ]
        },
        {
          "type": "p",
          "text": "Add'use client'at the top of a file to mark the module and its transitive dependencies as client code."
        },
        {
          "type": "code",
          "code": "'use client';import{useState}from'react';import{formatDate}from'./formatters';importButtonfrom'./button';exportdefaultfunctionRichTextEditor({timestamp,text}){constdate=formatDate(timestamp);// ...consteditButton=<Button/>;// ...}"
        },
        {
          "type": "p",
          "text": "When a file marked with'use client'is imported from a Server Component,compatible bundlerswill treat the module import as a boundary between server-run and client-run code. As dependencies ofRichTextEditor,formatDateandButtonwill also be evaluated on the client regardless of whether their modules contain a'use client'directive. Note that a single module may be evaluated on the server when imported from server code and on the client when imported from client code."
        },
        {
          "type": "list",
          "items": [
            "'use client'must be at the very beginning of a file, above any imports or other code (comments are OK). They must be written with single or double quotes, but not backticks.",
            "When a'use client'module is imported from another client-rendered module, the directive has no effect.",
            "When a component module contains a'use client'directive, any usage of that component is guaranteed to be a Client Component. However, a component can still be evaluated on the client even if it does not have a'use client'directive.A component usage is considered a Client Component if it is defined in module with'use client'directive or when it is a transitive dependency of a module that contains a'use client'directive. Otherwise, it is a Server Component.",
            "A component usage is considered a Client Component if it is defined in module with'use client'directive or when it is a transitive dependency of a module that contains a'use client'directive. Otherwise, it is a Server Component.",
            "Code that is marked for client evaluation is not limited to components. All code that is a part of the Client module sub-tree is sent to and run by the client.",
            "When a server evaluated module imports values from a'use client'module, the values must either be a React component orsupported serializable prop valuesto be passed to a Client Component. Any other use case will throw an exception."
          ]
        },
        {
          "type": "p",
          "text": "In a React app, components are often split into separate files, ormodules. For apps that use React Server Components, the app is server-rendered by default.'use client'introduces a server-client boundary in themodule dependency tree, effectively creating a subtree of Client modules. To better illustrate this, consider the following React Server Components app."
        },
        {
          "type": "code",
          "code": "importFancyTextfrom'./FancyText';importInspirationGeneratorfrom'./InspirationGenerator';importCopyrightfrom'./Copyright';exportdefaultfunctionApp(){return(<><FancyTexttitletext=\"Get Inspired App\"/><InspirationGenerator><Copyrightyear={2004}/></InspirationGenerator></>);}"
        },
        {
          "type": "p",
          "text": "In the module dependency tree of this example app, the'use client'directive inInspirationGenerator.jsmarks that module and all of its transitive dependencies as Client modules. The subtree starting atInspirationGenerator.jsis now marked as Client modules."
        },
        {
          "type": "p",
          "text": "'use client'segments the module dependency tree of the React Server Components app, markingInspirationGenerator.jsand all of its dependencies as client-rendered."
        },
        {
          "type": "p",
          "text": "During render, the framework will server-render the root component and continue through therender tree, opting-out of evaluating any code imported from client-marked code. The server-rendered portion of the render tree is then sent to the client. The client, with its client code downloaded, then completes rendering the rest of the tree."
        },
        {
          "type": "p",
          "text": "The render tree for the React Server Components app.InspirationGeneratorand its child componentFancyTextare components exported from client-marked code and considered Client Components."
        },
        {
          "type": "p",
          "text": "We introduce the following definitions:"
        },
        {
          "type": "list",
          "items": [
            "Client Componentsare components in a render tree that are rendered on the client.",
            "Server Componentsare components in a render tree that are rendered on the server."
          ]
        },
        {
          "type": "p",
          "text": "Working through the example app,App,FancyTextandCopyrightare all server-rendered and considered Server Components. AsInspirationGenerator.jsand its transitive dependencies are marked as client code, the componentInspirationGeneratorand its child componentFancyTextare Client Components."
        },
        {
          "type": "p",
          "text": "By the above definitions, the componentFancyTextis both a Server and Client Component, how can that be? First, let’s clarify that the term “component” is not very precise. Here are just two ways “component” can be understood:"
        },
        {
          "type": "list",
          "items": [
            "A “component” can refer to acomponent definition. In most cases this will be a function."
          ]
        },
        {
          "type": "code",
          "code": "// This is a definition of a componentfunctionMyComponent(){return<p>My Component</p>}"
        },
        {
          "type": "list",
          "items": [
            "A “component” can also refer to acomponent usageof its definition."
          ]
        },
        {
          "type": "code",
          "code": "importMyComponentfrom'./MyComponent';functionApp(){// This is a usage of a componentreturn<MyComponent/>;}"
        },
        {
          "type": "p",
          "text": "Often, the imprecision is not important when explaining concepts, but in this case it is. When we talk about Server or Client Components, we are referring to component usages."
        },
        {
          "type": "list",
          "items": [
            "If the component is defined in a module with a'use client'directive, or the component is imported and called in a Client Component, then the component usage is a Client Component.",
            "Otherwise, the component usage is a Server Component."
          ]
        },
        {
          "type": "p",
          "text": "Back to the question ofFancyText, we see that the component definition doesnothave a'use client'directive and it has two usages. The usage ofFancyTextas a child ofApp, marks that usage as a Server Component. WhenFancyTextis imported and called underInspirationGenerator, that usage ofFancyTextis a Client Component asInspirationGeneratorcontains a'use client'directive. This means that the component definition forFancyTextwill both be evaluated on the server and also downloaded by the client to render its Client Component usage."
        },
        {
          "type": "p",
          "text": "BecauseCopyrightis rendered as a child of the Client ComponentInspirationGenerator, you might be surprised that it is a Server Component. Recall that'use client'defines the boundary between server and client code on themodule dependency tree, not the render tree."
        },
        {
          "type": "p",
          "text": "'use client'defines the boundary between server and client code on the module dependency tree."
        },
        {
          "type": "p",
          "text": "In the module dependency tree, we see thatApp.jsimports and callsCopyrightfrom theCopyright.jsmodule. AsCopyright.jsdoes not contain a'use client'directive, the component usage is rendered on the server.Appis rendered on the server as it is the root component. Client Components can render Server Components because you can pass JSX as props. In this case,InspirationGeneratorreceivesCopyrightaschildren. However, theInspirationGeneratormodule never directly imports theCopyrightmodule nor calls the component, all of that is done byApp. In fact, theCopyrightcomponent is fully executed beforeInspirationGeneratorstarts rendering. The takeaway is that a parent-child render relationship between components does not guarantee the same render environment."
        },
        {
          "type": "p",
          "text": "With'use client', you can determine when components are Client Components. As Server Components are default, here is a brief overview of the advantages and limitations to Server Components to determine when you need to mark something as client rendered. For simplicity, we talk about Server Components, but the same principles apply to all code in your app that is server run."
        },
        {
          "type": "list",
          "items": [
            "Server Components can reduce the amount of code sent and run by the client. Only Client modules are bundled and evaluated by the client.",
            "Server Components benefit from running on the server. They can access the local filesystem and may experience low latency for data fetches and network requests."
          ]
        },
        {
          "type": "list",
          "items": [
            "Server Components cannot support interaction as event handlers must be registered and triggered by a client.For example, event handlers likeonClickcan only be defined in Client Components.",
            "For example, event handlers likeonClickcan only be defined in Client Components.",
            "Server Components cannot use most Hooks.When Server Components are rendered, their output is essentially a list of components for the client to render. Server Components do not persist in memory after render and cannot have their own state.",
            "When Server Components are rendered, their output is essentially a list of components for the client to render. Server Components do not persist in memory after render and cannot have their own state."
          ]
        },
        {
          "type": "p",
          "text": "As in any React app, parent components pass data to child components. As they are rendered in different environments, passing data from a Server Component to a Client Component requires extra consideration. Prop values passed from a Server Component to Client Component must be serializable. Serializable props include:"
        },
        {
          "type": "list",
          "items": [
            "Primitivesstringnumberbigintbooleanundefinednullsymbol, only symbols registered in the global Symbol registry viaSymbol.for",
            "string",
            "number",
            "bigint",
            "boolean",
            "undefined",
            "null",
            "symbol, only symbols registered in the global Symbol registry viaSymbol.for",
            "Iterables containing serializable valuesStringArrayMapSetTypedArrayandArrayBuffer",
            "String",
            "Array",
            "Map",
            "Set",
            "TypedArrayandArrayBuffer",
            "Date",
            "Plainobjects: those created withobject initializers, with serializable properties",
            "Functions that areServer Functions",
            "Client or Server Component elements (JSX)",
            "Promises"
          ]
        },
        {
          "type": "p",
          "text": "Notably, these are not supported:"
        },
        {
          "type": "list",
          "items": [
            "Functionsthat are not exported from client-marked modules or marked with'use server'",
            "Classes",
            "Objects that are instances of any class (other than the built-ins mentioned) or objects witha null prototype",
            "Symbols not registered globally, ex.Symbol('my new symbol')"
          ]
        },
        {
          "type": "code",
          "code": "'use client';import{useState}from'react';exportdefaultfunctionCounter({initialValue=0}){const[countValue,setCountValue]=useState(initialValue);constincrement=()=>setCountValue(countValue+1);constdecrement=()=>setCountValue(countValue-1);return(<><h2>Count Value:{countValue}</h2><buttononClick={increment}>+1</button><buttononClick={decrement}>-1</button></>);}"
        },
        {
          "type": "p",
          "text": "AsCounterrequires both theuseStateHook and event handlers to increment or decrement the value, this component must be a Client Component and will require a'use client'directive at the top. In contrast, a component that renders UI without interaction will not need to be a Client Component."
        },
        {
          "type": "code",
          "code": "import{readFile}from'node:fs/promises';importCounterfrom'./Counter';exportdefaultasyncfunctionCounterContainer(){constinitialValue=awaitreadFile('/path/to/counter_value');return<CounterinitialValue={initialValue}/>}"
        },
        {
          "type": "p",
          "text": "For example,Counter’s parent component,CounterContainer, does not require'use client'as it is not interactive and does not use state. In addition,CounterContainermust be a Server Component as it reads from the local file system on the server, which is possible only in a Server Component. There are also components that don’t use any server or client-only features and can be agnostic to where they render. In our earlier example,FancyTextis one such component."
        },
        {
          "type": "code",
          "code": "exportdefaultfunctionFancyText({title,text}){returntitle?<h1className='fancy title'>{text}</h1>:<h3className='fancy cursive'>{text}</h3>}"
        },
        {
          "type": "p",
          "text": "In this case, we don’t add the'use client'directive, resulting inFancyText’soutput(rather than its source code) to be sent to the browser when referenced from a Server Component. As demonstrated in the earlier Inspirations app example,FancyTextis used as both a Server or Client Component, depending on where it is imported and used. But ifFancyText’s HTML output was large relative to its source code (including dependencies), it might be more efficient to force it to always be a Client Component. Components that return a long SVG path string are one case where it may be more efficient to force a component to be a Client Component."
        },
        {
          "type": "p",
          "text": "Your React app may use client-specific APIs, such as the browser’s APIs for web storage, audio and video manipulation, and device hardware, amongothers. In this example, the component usesDOM APIsto manipulate acanvaselement. Since those APIs are only available in the browser, it must be marked as a Client Component."
        },
        {
          "type": "code",
          "code": "'use client';import{useRef,useEffect}from'react';exportdefaultfunctionCircle(){constref=useRef(null);useLayoutEffect(()=>{constcanvas=ref.current;constcontext=canvas.getContext('2d');context.reset();context.beginPath();context.arc(100,75,50,0,2*Math.PI);context.stroke();});return<canvasref={ref}/>;}"
        },
        {
          "type": "p",
          "text": "Often in a React app, you’ll leverage third-party libraries to handle common UI patterns or logic. These libraries may rely on component Hooks or client APIs. Third-party components that use any of the following React APIs must run on the client:"
        },
        {
          "type": "list",
          "items": [
            "createContext",
            "reactandreact-domHooks, excludinguseanduseId",
            "forwardRef",
            "memo",
            "startTransition",
            "If they use client APIs, ex. DOM insertion or native platform views"
          ]
        },
        {
          "type": "p",
          "text": "If these libraries have been updated to be compatible with React Server Components, then they will already include'use client'markers of their own, allowing you to use them directly from your Server Components. If a library hasn’t been updated, or if a component needs props like event handlers that can only be specified on the client, you may need to add your own Client Component file in between the third-party Client Component and your Server Component where you’d like to use it."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rsc/use-server",
      "title": "'use server' directive – React",
      "content": [
        {
          "type": "p",
          "text": "'use server'is for use withusing React Server Components."
        },
        {
          "type": "p",
          "text": "'use server'marks server-side functions that can be called from client-side code."
        },
        {
          "type": "list",
          "items": [
            "Reference'use server'Security considerationsSerializable arguments and return values",
            "'use server'",
            "Security considerations",
            "Serializable arguments and return values",
            "UsageServer Functions in formsCalling a Server Function outside of<form>",
            "Server Functions in forms",
            "Calling a Server Function outside of<form>"
          ]
        },
        {
          "type": "p",
          "text": "Add'use server'at the top of an async function body to mark the function as callable by the client. We call these functionsServer Functions."
        },
        {
          "type": "code",
          "code": "asyncfunctionaddToCart(data){'use server';// ...}"
        },
        {
          "type": "p",
          "text": "When calling a Server Function on the client, it will make a network request to the server that includes a serialized copy of any arguments passed. If the Server Function returns a value, that value will be serialized and returned to the client. Instead of individually marking functions with'use server', you can add the directive to the top of a file to mark all exports within that file as Server Functions that can be used anywhere, including imported in client code."
        },
        {
          "type": "list",
          "items": [
            "'use server'must be at the very beginning of their function or module; above any other code including imports (comments above directives are OK). They must be written with single or double quotes, not backticks.",
            "'use server'can only be used in server-side files. The resulting Server Functions can be passed to Client Components through props. See supportedtypes for serialization.",
            "To import a Server Functions fromclient code, the directive must be used on a module level.",
            "Because the underlying network calls are always asynchronous,'use server'can only be used on async functions.",
            "Always treat arguments to Server Functions as untrusted input and authorize any mutations. Seesecurity considerations.",
            "Server Functions should be called in aTransition. Server Functions passed to<form action>orformActionwill automatically be called in a transition.",
            "Server Functions are designed for mutations that update server-side state; they are not recommended for data fetching. Accordingly, frameworks implementing Server Functions typically process one action at a time and do not have a way to cache the return value."
          ]
        },
        {
          "type": "p",
          "text": "Arguments to Server Functions are fully client-controlled. For security, always treat them as untrusted input, and make sure to validate and escape arguments as appropriate. In any Server Function, make sure to validate that the logged-in user is allowed to perform that action."
        },
        {
          "type": "p",
          "text": "To prevent sending sensitive data from a Server Function, there are experimental taint APIs to prevent unique values and objects from being passed to client code. Seeexperimental_taintUniqueValueandexperimental_taintObjectReference."
        },
        {
          "type": "p",
          "text": "Since client code calls the Server Function over the network, any arguments passed will need to be serializable. Here are supported types for Server Function arguments:"
        },
        {
          "type": "list",
          "items": [
            "Primitivesstringnumberbigintbooleanundefinednullsymbol, only symbols registered in the global Symbol registry viaSymbol.for",
            "string",
            "number",
            "bigint",
            "boolean",
            "undefined",
            "null",
            "symbol, only symbols registered in the global Symbol registry viaSymbol.for",
            "Iterables containing serializable valuesStringArrayMapSetTypedArrayandArrayBuffer",
            "String",
            "Array",
            "Map",
            "Set",
            "TypedArrayandArrayBuffer",
            "Date",
            "FormDatainstances",
            "Plainobjects: those created withobject initializers, with serializable properties",
            "Functions that are Server Functions",
            "Promises"
          ]
        },
        {
          "type": "p",
          "text": "Notably, these are not supported:"
        },
        {
          "type": "list",
          "items": [
            "React elements, orJSX",
            "Functions, including component functions or any other function that is not a Server Function",
            "Classes",
            "Objects that are instances of any class (other than the built-ins mentioned) or objects witha null prototype",
            "Symbols not registered globally, ex.Symbol('my new symbol')",
            "Events from event handlers"
          ]
        },
        {
          "type": "p",
          "text": "Supported serializable return values are the same asserializable propsfor a boundary Client Component."
        },
        {
          "type": "p",
          "text": "The most common use case of Server Functions will be calling functions that mutate data. On the browser, theHTML form elementis the traditional approach for a user to submit a mutation. With React Server Components, React introduces first-class support for Server Functions as Actions informs. Here is a form that allows a user to request a username."
        },
        {
          "type": "code",
          "code": "// App.jsasyncfunctionrequestUsername(formData){'use server';constusername=formData.get('username');// ...}exportdefaultfunctionApp(){return(<formaction={requestUsername}><inputtype=\"text\"name=\"username\"/><buttontype=\"submit\">Request</button></form>);}"
        },
        {
          "type": "p",
          "text": "In this examplerequestUsernameis a Server Function passed to a<form>. When a user submits this form, there is a network request to the server functionrequestUsername. When calling a Server Function in a form, React will supply the form’sFormDataas the first argument to the Server Function. By passing a Server Function to the formaction, React canprogressively enhancethe form. This means that forms can be submitted before the JavaScript bundle is loaded."
        },
        {
          "type": "p",
          "text": "In the username request form, there might be the chance that a username is not available.requestUsernameshould tell us if it fails or not. To update the UI based on the result of a Server Function while supporting progressive enhancement, useuseActionState."
        },
        {
          "type": "code",
          "code": "// requestUsername.js'use server';exportdefaultasyncfunctionrequestUsername(formData){constusername=formData.get('username');if(canRequest(username)){// ...return'successful';}return'failed';}"
        },
        {
          "type": "code",
          "code": "// UsernameForm.js'use client';import{useActionState}from'react';importrequestUsernamefrom'./requestUsername';functionUsernameForm(){const[state,action]=useActionState(requestUsername,null,'n/a');return(<><formaction={action}><inputtype=\"text\"name=\"username\"/><buttontype=\"submit\">Request</button></form><p>Last submission request returned:{state}</p></>);}"
        },
        {
          "type": "p",
          "text": "Note that like most Hooks,useActionStatecan only be called inclient code."
        },
        {
          "type": "p",
          "text": "Server Functions are exposed server endpoints and can be called anywhere in client code. When using a Server Function outside aform, call the Server Function in aTransition, which allows you to display a loading indicator, showoptimistic state updates, and handle unexpected errors. Forms will automatically wrap Server Functions in transitions."
        },
        {
          "type": "code",
          "code": "importincrementLikefrom'./actions';import{useState,useTransition}from'react';functionLikeButton(){const[isPending,startTransition]=useTransition();const[likeCount,setLikeCount]=useState(0);constonClick=()=>{startTransition(async()=>{constcurrentCount=awaitincrementLike();setLikeCount(currentCount);});};return(<><p>Total Likes:{likeCount}</p><buttononClick={onClick}disabled={isPending}>Like</button>;</>);}"
        },
        {
          "type": "code",
          "code": "// actions.js'use server';letlikeCount=0;exportdefaultasyncfunctionincrementLike(){likeCount++;returnlikeCount;}"
        },
        {
          "type": "p",
          "text": "To read a Server Function return value, you’ll need toawaitthe promise returned."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rules",
      "title": "Rules of React – React",
      "content": [
        {
          "type": "p",
          "text": "Just as different programming languages have their own ways of expressing concepts, React has its own idioms — or rules — for how to express patterns in a way that is easy to understand and yields high-quality applications."
        },
        {
          "type": "list",
          "items": [
            "Components and Hooks must be pure",
            "React calls Components and Hooks",
            "Rules of Hooks"
          ]
        },
        {
          "type": "p",
          "text": "To learn more about expressing UIs with React, we recommend readingThinking in React."
        },
        {
          "type": "p",
          "text": "This section describes the rules you need to follow to write idiomatic React code. Writing idiomatic React code can help you write well organized, safe, and composable applications. These properties make your app more resilient to changes and makes it easier to work with other developers, libraries, and tools. These rules are known as theRules of React. They are rules – and not just guidelines – in the sense that if they are broken, your app likely has bugs. Your code also becomes unidiomatic and harder to understand and reason about. We strongly recommend usingStrict Modealongside React’sESLint pluginto help your codebase follow the Rules of React. By following the Rules of React, you’ll be able to find and address these bugs and keep your application maintainable."
        },
        {
          "type": "p",
          "text": "Purity in Components and Hooksis a key rule of React that makes your app predictable, easy to debug, and allows React to automatically optimize your code."
        },
        {
          "type": "list",
          "items": [
            "Components must be idempotent– React components are assumed to always return the same output with respect to their inputs – props, state, and context.",
            "Side effects must run outside of render– Side effects should not run in render, as React can render components multiple times to create the best possible user experience.",
            "Props and state are immutable– A component’s props and state are immutable snapshots with respect to a single render. Never mutate them directly.",
            "Return values and arguments to Hooks are immutable– Once values are passed to a Hook, you should not modify them. Like props in JSX, values become immutable when passed to a Hook.",
            "Values are immutable after being passed to JSX– Don’t mutate values after they’ve been used in JSX. Move the mutation before the JSX is created."
          ]
        },
        {
          "type": "p",
          "text": "React is responsible for rendering components and hooks when necessary to optimize the user experience.It is declarative: you tell React what to render in your component’s logic, and React will figure out how best to display it to your user."
        },
        {
          "type": "list",
          "items": [
            "Never call component functions directly– Components should only be used in JSX. Don’t call them as regular functions.",
            "Never pass around hooks as regular values– Hooks should only be called inside of components. Never pass it around as a regular value."
          ]
        },
        {
          "type": "p",
          "text": "Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called. You need to follow theRules of Hookswhen using them."
        },
        {
          "type": "list",
          "items": [
            "Only call Hooks at the top level– Don’t call Hooks inside loops, conditions, or nested functions. Instead, always use Hooks at the top level of your React function, before any early returns.",
            "Only call Hooks from React functions– Don’t call Hooks from regular JavaScript functions."
          ]
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rules/components-and-hooks-must-be-pure",
      "title": "Components and Hooks must be pure – React",
      "content": [
        {
          "type": "p",
          "text": "Pure functions only perform a calculation and nothing more. It makes your code easier to understand, debug, and allows React to automatically optimize your components and Hooks correctly."
        },
        {
          "type": "p",
          "text": "This reference page covers advanced topics and requires familiarity with the concepts covered in theKeeping Components Purepage."
        },
        {
          "type": "list",
          "items": [
            "Why does purity matter?",
            "Components and Hooks must be idempotent",
            "Side effects must run outside of renderWhen is it okay to have mutation?",
            "When is it okay to have mutation?",
            "Props and state are immutableDon’t mutate PropsDon’t mutate State",
            "Don’t mutate Props",
            "Don’t mutate State",
            "Return values and arguments to Hooks are immutable",
            "Values are immutable after being passed to JSX"
          ]
        },
        {
          "type": "p",
          "text": "One of the key concepts that makes React,Reactispurity. A pure component or hook is one that is:"
        },
        {
          "type": "list",
          "items": [
            "Idempotent– Youalways get the same result every timeyou run it with the same inputs – props, state, context for component inputs; and arguments for hook inputs.",
            "Has no side effects in render– Code with side effects should runseparately from rendering. For example as anevent handler– where the user interacts with the UI and causes it to update; or as anEffect– which runs after render.",
            "Does not mutate non-local values: Components and Hooks shouldnever modify values that aren’t created locallyin render."
          ]
        },
        {
          "type": "p",
          "text": "When render is kept pure, React can understand how to prioritize which updates are most important for the user to see first. This is made possible because of render purity: since components don’t have side effectsin render, React can pause rendering components that aren’t as important to update, and only come back to them later when it’s needed. Concretely, this means that rendering logic can be run multiple times in a way that allows React to give your user a pleasant user experience. However, if your component has an untracked side effect – like modifying the value of a global variableduring render– when React runs your rendering code again, your side effects will be triggered in a way that won’t match what you want. This often leads to unexpected bugs that can degrade how your users experience your app. You can see anexample of this in the Keeping Components Pure page."
        },
        {
          "type": "p",
          "text": "React is declarative: you tell Reactwhatto render, and React will figure outhowbest to display it to your user. To do this, React has a few phases where it runs your code. You don’t need to know about all of these phases to use React well. But at a high level, you should know about what code runs inrender, and what runs outside of it. Renderingrefers to calculating what the next version of your UI should look like. After rendering,Effectsareflushed(meaning they are run until there are no more left) and may update the calculation if the Effects have impacts on layout. React takes this new calculation and compares it to the calculation used to create the previous version of your UI, thencommitsjust the minimum changes needed to theDOM(what your user actually sees) to catch it up to the latest version."
        },
        {
          "type": "p",
          "text": "One quick heuristic to tell if code runs during render is to examine where it is: if it’s written at the top level like in the example below, there’s a good chance it runs during render."
        },
        {
          "type": "code",
          "code": "functionDropdown(){constselectedItems=newSet();// created during render// ...}"
        },
        {
          "type": "p",
          "text": "Event handlers and Effects don’t run in render:"
        },
        {
          "type": "code",
          "code": "functionDropdown(){constselectedItems=newSet();constonSelect=(item)=>{// this code is in an event handler, so it's only run when the user triggers thisselectedItems.add(item);}}"
        },
        {
          "type": "code",
          "code": "functionDropdown(){constselectedItems=newSet();useEffect(()=>{// this code is inside of an Effect, so it only runs after renderinglogForAnalytics(selectedItems);},[selectedItems]);}"
        },
        {
          "type": "p",
          "text": "Components must always return the same output with respect to their inputs – props, state, and context. This is known asidempotency.Idempotencyis a term popularized in functional programming. It refers to the idea that youalways get the same result every timeyou run that piece of code with the same inputs. This means thatallcode that runsduring rendermust also be idempotent in order for this rule to hold. For example, this line of code is not idempotent (and therefore, neither is the component):"
        },
        {
          "type": "code",
          "code": "functionClock(){consttime=newDate();// 🔴 Bad: always returns a different result!return<span>{time.toLocaleString()}</span>}"
        },
        {
          "type": "p",
          "text": "new Date()is not idempotent as it always returns the current date and changes its result every time it’s called. When you render the above component, the time displayed on the screen will stay stuck on the time that the component was rendered. Similarly, functions likeMath.random()also aren’t idempotent, because they return different results every time they’re called, even when the inputs are the same. This doesn’t mean you shouldn’t use non-idempotent functions likenew Date()at all– you should just avoid using themduring render. In this case, we cansynchronizethe latest date to this component using anEffect:"
        },
        {
          "type": "code",
          "code": "import{useState,useEffect}from'react';functionuseTime(){// 1. Keep track of the current date's state. `useState` receives an initializer function as its//    initial state. It only runs once when the hook is called, so only the current date at the//    time the hook is called is set first.const[time,setTime]=useState(()=>newDate());useEffect(()=>{// 2. Update the current date every second using `setInterval`.constid=setInterval(()=>{setTime(newDate());// ✅ Good: non-idempotent code no longer runs in render},1000);// 3. Return a cleanup function so we don't leak the `setInterval` timer.return()=>clearInterval(id);},[]);returntime;}exportdefaultfunctionClock(){consttime=useTime();return<span>{time.toLocaleString()}</span>;}"
        },
        {
          "type": "p",
          "text": "By wrapping the non-idempotentnew Date()call in an Effect, it moves that calculationoutside of rendering. If you don’t need to synchronize some external state with React, you can also consider using anevent handlerif it only needs to be updated in response to a user interaction."
        },
        {
          "type": "p",
          "text": "Side effectsshould not runin render, as React can render components multiple times to create the best possible user experience."
        },
        {
          "type": "p",
          "text": "Side effects are a broader term than Effects. Effects specifically refer to code that’s wrapped inuseEffect, while a side effect is a general term for code that has any observable effect other than its primary result of returning a value to the caller. Side effects are typically written inside ofevent handlersor Effects. But never during render."
        },
        {
          "type": "p",
          "text": "While render must be kept pure, side effects are necessary at some point in order for your app to do anything interesting, like showing something on the screen! The key point of this rule is that side effects should not runin render, as React can render components multiple times. In most cases, you’ll useevent handlersto handle side effects. Using an event handler explicitly tells React that this code doesn’t need to run during render, keeping render pure. If you’ve exhausted all options – and only as a last resort – you can also handle side effects usinguseEffect."
        },
        {
          "type": "p",
          "text": "One common example of a side effect is mutation, which in JavaScript refers to changing the value of a non-primitivevalue. In general, while mutation is not idiomatic in React,localmutation is absolutely fine:"
        },
        {
          "type": "code",
          "code": "functionFriendList({friends}){constitems=[];// ✅ Good: locally createdfor(leti=0;i<friends.length;i++){constfriend=friends[i];items.push(<Friendkey={friend.id}friend={friend}/>);// ✅ Good: local mutation is okay}return<section>{items}</section>;}"
        },
        {
          "type": "p",
          "text": "There is no need to contort your code to avoid local mutation.Array.mapcould also be used here for brevity, but there is nothing wrong with creating a local array and then pushing items into itduring render. Even though it looks like we are mutatingitems, the key point to note is that this code only does solocally– the mutation isn’t “remembered” when the component is rendered again. In other words,itemsonly stays around as long as the component does. Becauseitemsis alwaysrecreatedevery time<FriendList />is rendered, the component will always return the same result. On the other hand, ifitemswas created outside of the component, it holds on to its previous values and remembers changes:"
        },
        {
          "type": "code",
          "code": "constitems=[];// 🔴 Bad: created outside of the componentfunctionFriendList({friends}){for(leti=0;i<friends.length;i++){constfriend=friends[i];items.push(<Friendkey={friend.id}friend={friend}/>);// 🔴 Bad: mutates a value created outside of render}return<section>{items}</section>;}"
        },
        {
          "type": "p",
          "text": "When<FriendList />runs again, we will continue appendingfriendstoitemsevery time that component is run, leading to multiple duplicated results. This version of<FriendList />has observable side effectsduring renderandbreaks the rule."
        },
        {
          "type": "p",
          "text": "Lazy initialization is also fine despite not being fully “pure”:"
        },
        {
          "type": "code",
          "code": "functionExpenseForm(){SuperCalculator.initializeIfNotReady();// ✅ Good: if it doesn't affect other components// Continue rendering...}"
        },
        {
          "type": "p",
          "text": "Side effects that are directly visible to the user are not allowed in the render logic of React components. In other words, merely calling a component function shouldn’t by itself produce a change on the screen."
        },
        {
          "type": "code",
          "code": "functionProductDetailPage({product}){document.title=product.title;// 🔴 Bad: Changes the DOM}"
        },
        {
          "type": "p",
          "text": "One way to achieve the desired result of updatingdocument.titleoutside of render is tosynchronize the component withdocument. As long as calling a component multiple times is safe and doesn’t affect the rendering of other components, React doesn’t care if it’s 100% pure in the strict functional programming sense of the word. It is more important thatcomponents must be idempotent."
        },
        {
          "type": "p",
          "text": "A component’s props and state are immutablesnapshots. Never mutate them directly. Instead, pass new props down, and use the setter function fromuseState. You can think of the props and state values as snapshots that are updated after rendering. For this reason, you don’t modify the props or state variables directly: instead you pass new props, or use the setter function provided to you to tell React that state needs to update the next time the component is rendered."
        },
        {
          "type": "p",
          "text": "Props are immutable because if you mutate them, the application will produce inconsistent output, which can be hard to debug since it may or may not work depending on the circumstance."
        },
        {
          "type": "code",
          "code": "functionPost({item}){item.url=newUrl(item.url,base);// 🔴 Bad: never mutate props directlyreturn<Linkurl={item.url}>{item.title}</Link>;}"
        },
        {
          "type": "code",
          "code": "functionPost({item}){consturl=newUrl(item.url,base);// ✅ Good: make a copy insteadreturn<Linkurl={url}>{item.title}</Link>;}"
        },
        {
          "type": "p",
          "text": "useStatereturns the state variable and a setter to update that state."
        },
        {
          "type": "code",
          "code": "const[stateVariable,setter]=useState(0);"
        },
        {
          "type": "p",
          "text": "Rather than updating the state variable in-place, we need to update it using the setter function that is returned byuseState. Changing values on the state variable doesn’t cause the component to update, leaving your users with an outdated UI. Using the setter function informs React that the state has changed, and that we need to queue a re-render to update the UI."
        },
        {
          "type": "code",
          "code": "functionCounter(){const[count,setCount]=useState(0);functionhandleClick(){count=count+1;// 🔴 Bad: never mutate state directly}return(<buttononClick={handleClick}>You pressed me{count}times</button>);}"
        },
        {
          "type": "code",
          "code": "functionCounter(){const[count,setCount]=useState(0);functionhandleClick(){setCount(count+1);// ✅ Good: use the setter function returned by useState}return(<buttononClick={handleClick}>You pressed me{count}times</button>);}"
        },
        {
          "type": "p",
          "text": "Once values are passed to a hook, you should not modify them. Like props in JSX, values become immutable when passed to a hook."
        },
        {
          "type": "code",
          "code": "functionuseIconStyle(icon){consttheme=useContext(ThemeContext);if(icon.enabled){icon.className=computeStyle(icon,theme);// 🔴 Bad: never mutate hook arguments directly}returnicon;}"
        },
        {
          "type": "code",
          "code": "functionuseIconStyle(icon){consttheme=useContext(ThemeContext);constnewIcon={...icon};// ✅ Good: make a copy insteadif(icon.enabled){newIcon.className=computeStyle(icon,theme);}returnnewIcon;}"
        },
        {
          "type": "p",
          "text": "One important principle in React islocal reasoning: the ability to understand what a component or hook does by looking at its code in isolation. Hooks should be treated like “black boxes” when they are called. For example, a custom hook might have used its arguments as dependencies to memoize values inside it:"
        },
        {
          "type": "code",
          "code": "functionuseIconStyle(icon){consttheme=useContext(ThemeContext);returnuseMemo(()=>{constnewIcon={...icon};if(icon.enabled){newIcon.className=computeStyle(icon,theme);}returnnewIcon;},[icon,theme]);}"
        },
        {
          "type": "p",
          "text": "If you were to mutate the Hooks arguments, the custom hook’s memoization will become incorrect,  so it’s important to avoid doing that."
        },
        {
          "type": "code",
          "code": "style=useIconStyle(icon);// `style` is memoized based on `icon`icon.enabled=false;// Bad: 🔴 never mutate hook arguments directlystyle=useIconStyle(icon);// previously memoized result is returned"
        },
        {
          "type": "code",
          "code": "style=useIconStyle(icon);// `style` is memoized based on `icon`icon={...icon,enabled:false};// Good: ✅ make a copy insteadstyle=useIconStyle(icon);// new value of `style` is calculated"
        },
        {
          "type": "p",
          "text": "Similarly, it’s important to not modify the return values of Hooks, as they may have been memoized."
        },
        {
          "type": "p",
          "text": "Don’t mutate values after they’ve been used in JSX. Move the mutation before the JSX is created. When you use JSX in an expression, React may eagerly evaluate the JSX before the component finishes rendering. This means that mutating values after they’ve been passed to JSX can lead to outdated UIs, as React won’t know to update the component’s output."
        },
        {
          "type": "code",
          "code": "functionPage({colour}){conststyles={colour,size:\"large\"};constheader=<Headerstyles={styles}/>;styles.size=\"small\";// 🔴 Bad: styles was already used in the JSX aboveconstfooter=<Footerstyles={styles}/>;return(<>{header}<Content/>{footer}</>);}"
        },
        {
          "type": "code",
          "code": "functionPage({colour}){constheaderStyles={colour,size:\"large\"};constheader=<Headerstyles={headerStyles}/>;constfooterStyles={colour,size:\"small\"};// ✅ Good: we created a new valueconstfooter=<Footerstyles={footerStyles}/>;return(<>{header}<Content/>{footer}</>);}"
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rules/react-calls-components-and-hooks",
      "title": "React calls Components and Hooks – React",
      "content": [
        {
          "type": "p",
          "text": "React is responsible for rendering components and Hooks when necessary to optimize the user experience. It is declarative: you tell React what to render in your component’s logic, and React will figure out how best to display it to your user."
        },
        {
          "type": "list",
          "items": [
            "Never call component functions directly",
            "Never pass around Hooks as regular valuesDon’t dynamically mutate a HookDon’t dynamically use Hooks",
            "Don’t dynamically mutate a Hook",
            "Don’t dynamically use Hooks"
          ]
        },
        {
          "type": "p",
          "text": "Components should only be used in JSX. Don’t call them as regular functions. React should call it. React must decide when your component function is calledduring rendering. In React, you do this using JSX."
        },
        {
          "type": "code",
          "code": "functionBlogPost(){return<Layout><Article/></Layout>;// ✅ Good: Only use components in JSX}"
        },
        {
          "type": "code",
          "code": "functionBlogPost(){return<Layout>{Article()}</Layout>;// 🔴 Bad: Never call them directly}"
        },
        {
          "type": "p",
          "text": "If a component contains Hooks, it’s easy to violate theRules of Hookswhen components are called directly in a loop or conditionally. Letting React orchestrate rendering also allows a number of benefits:"
        },
        {
          "type": "list",
          "items": [
            "Components become more than functions.React can augment them with features likelocal statethrough Hooks that are tied to the component’s identity in the tree.",
            "Component types participate in reconciliation.By letting React call your components, you also tell it more about the conceptual structure of your tree. For example, when you move from rendering<Feed>to the<Profile>page, React won’t attempt to re-use them.",
            "React can enhance your user experience.For example, it can let the browser do some work between component calls so that re-rendering a large component tree doesn’t block the main thread.",
            "A better debugging story.If components are first-class citizens that the library is aware of, we can build rich developer tools for introspection in development.",
            "More efficient reconciliation.React can decide exactly which components in the tree need re-rendering and skip over the ones that don’t. That makes your app faster and more snappy."
          ]
        },
        {
          "type": "p",
          "text": "Hooks should only be called inside of components or Hooks. Never pass it around as a regular value. Hooks allow you to augment a component with React features. They should always be called as a function, and never passed around as a regular value. This enableslocal reasoning, or the ability for developers to understand everything a component can do by looking at that component in isolation. Breaking this rule will cause React to not automatically optimize your component."
        },
        {
          "type": "p",
          "text": "Hooks should be as “static” as possible. This means you shouldn’t dynamically mutate them. For example, this means you shouldn’t write higher order Hooks:"
        },
        {
          "type": "code",
          "code": "functionChatInput(){constuseDataWithLogging=withLogging(useData);// 🔴 Bad: don't write higher order Hooksconstdata=useDataWithLogging();}"
        },
        {
          "type": "p",
          "text": "Hooks should be immutable and not be mutated. Instead of mutating a Hook dynamically, create a static version of the Hook with the desired functionality."
        },
        {
          "type": "code",
          "code": "functionChatInput(){constdata=useDataWithLogging();// ✅ Good: Create a new version of the Hook}functionuseDataWithLogging(){// ... Create a new version of the Hook and inline the logic here}"
        },
        {
          "type": "p",
          "text": "Hooks should also not be dynamically used: for example, instead of doing dependency injection in a component by passing a Hook as a value:"
        },
        {
          "type": "code",
          "code": "functionChatInput(){return<ButtonuseData={useDataWithLogging}/>// 🔴 Bad: don't pass Hooks as props}"
        },
        {
          "type": "p",
          "text": "You should always inline the call of the Hook into that component and handle any logic in there."
        },
        {
          "type": "code",
          "code": "functionChatInput(){return<Button/>}functionButton(){constdata=useDataWithLogging();// ✅ Good: Use the Hook directly}functionuseDataWithLogging(){// If there's any conditional logic to change the Hook's behavior, it should be inlined into// the Hook}"
        },
        {
          "type": "p",
          "text": "This way,<Button />is much easier to understand and debug. When Hooks are used in dynamic ways, it increases the complexity of your app greatly and inhibits local reasoning, making your team less productive in the long term. It also makes it easier to accidentally break theRules of Hooksthat Hooks should not be called conditionally. If you find yourself needing to mock components for tests, it’s better to mock the server instead to respond with canned data. If possible, it’s also usually more effective to test your app with end-to-end tests."
        }
      ]
    },
    {
      "url": "https://react.dev/reference/rules/rules-of-hooks",
      "title": "Rules of Hooks – React",
      "content": [
        {
          "type": "p",
          "text": "Hooks are defined using JavaScript functions, but they represent a special type of reusable UI logic with restrictions on where they can be called."
        },
        {
          "type": "list",
          "items": [
            "Only call Hooks at the top level",
            "Only call Hooks from React functions"
          ]
        },
        {
          "type": "p",
          "text": "Functions whose names start withuseare calledHooksin React. Don’t call Hooks inside loops, conditions, nested functions, ortry/catch/finallyblocks.Instead, always use Hooks at the top level of your React function, before any early returns. You can only call Hooks while React is rendering a function component:"
        },
        {
          "type": "list",
          "items": [
            "✅ Call them at the top level in the body of afunction component.",
            "✅ Call them at the top level in the body of acustom Hook."
          ]
        },
        {
          "type": "code",
          "code": "functionCounter(){// ✅ Good: top-level in a function componentconst[count,setCount]=useState(0);// ...}functionuseWindowWidth(){// ✅ Good: top-level in a custom Hookconst[width,setWidth]=useState(window.innerWidth);// ...}"
        },
        {
          "type": "p",
          "text": "It’snotsupported to call Hooks (functions starting withuse) in any other cases, for example:"
        },
        {
          "type": "list",
          "items": [
            "🔴 Do not call Hooks inside conditions or loops.",
            "🔴 Do not call Hooks after a conditionalreturnstatement.",
            "🔴 Do not call Hooks in event handlers.",
            "🔴 Do not call Hooks in class components.",
            "🔴 Do not call Hooks inside functions passed touseMemo,useReducer, oruseEffect.",
            "🔴 Do not call Hooks insidetry/catch/finallyblocks."
          ]
        },
        {
          "type": "p",
          "text": "If you break these rules, you might see this error."
        },
        {
          "type": "code",
          "code": "functionBad({cond}){if(cond){// 🔴 Bad: inside a condition (to fix, move it outside!)consttheme=useContext(ThemeContext);}// ...}functionBad(){for(leti=0;i<10;i++){// 🔴 Bad: inside a loop (to fix, move it outside!)consttheme=useContext(ThemeContext);}// ...}functionBad({cond}){if(cond){return;}// 🔴 Bad: after a conditional return (to fix, move it before the return!)consttheme=useContext(ThemeContext);// ...}functionBad(){functionhandleClick(){// 🔴 Bad: inside an event handler (to fix, move it outside!)consttheme=useContext(ThemeContext);}// ...}functionBad(){conststyle=useMemo(()=>{// 🔴 Bad: inside useMemo (to fix, move it outside!)consttheme=useContext(ThemeContext);returncreateStyle(theme);});// ...}classBadextendsReact.Component{render(){// 🔴 Bad: inside a class component (to fix, write a function component instead of a class!)useEffect(()=>{})// ...}}functionBad(){try{// 🔴 Bad: inside try/catch/finally block (to fix, move it outside!)const[x,setX]=useState(0);}catch{const[x,setX]=useState(1);}}"
        },
        {
          "type": "p",
          "text": "You can use theeslint-plugin-react-hookspluginto catch these mistakes."
        },
        {
          "type": "p",
          "text": "Custom Hooksmaycall other Hooks (that’s their whole purpose). This works because custom Hooks are also supposed to only be called while a function component is rendering."
        },
        {
          "type": "p",
          "text": "Don’t call Hooks from regular JavaScript functions. Instead, you can: ✅ Call Hooks from React function components.\n✅ Call Hooks fromcustom Hooks. By following this rule, you ensure that all stateful logic in a component is clearly visible from its source code."
        },
        {
          "type": "code",
          "code": "functionFriendList(){const[onlineStatus,setOnlineStatus]=useOnlineStatus();// ✅}functionsetOnlineStatus(){// ❌ Not a component or custom Hook!const[onlineStatus,setOnlineStatus]=useOnlineStatus();}"
        }
      ]
    }
  ]
}
