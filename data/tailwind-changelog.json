[{"source": "https://tailwindcss.com/blog/tailwindcss-v4-alpha", "title": "Open-sourcing our progress on Tailwind CSS v4.0 - Tailwind CSS", "text": "Open-sourcing our progress on Tailwind CSS v4.0\n- Date\n- Adam Wathan\nLast summer at Tailwind Connect I shared a preview of Oxide \u2014 a new high-performance engine for Tailwind CSS that we\u2019ve been working on, designed to simplify the developer experience and take advantage of how the web platform has evolved in recent years.\nThe new engine was originally going to ship as a v3.x release, but even though we\u2019re committed to backwards compatibility, this feels so clearly like a new generation of the framework that it deserves to be v4.0.\nIt\u2019s still early and we\u2019ve got a lot of work to do, but today we\u2019re open-sourcing our progress and tagging the first public v4.0.0-alpha so you can start experimenting with it and help us get to a stable release later this year.\nI\u2019ll try keep it brief to save some of the excitement for the stable release, but if you like to play with very early and experimental stuff, there should be plenty of information here to get you going.\nA new engine, built for speed\nThe new engine is a ground-up rewrite, using everything we know about the framework now to better model the problem space, making things faster with a lot less code.\n- Up to 10x faster \u2014 we can do a full build of the Tailwind CSS website in 105ms instead of 960ms, or our Catalyst UI kit in 55ms instead of 341ms.\n- Smaller footprint \u2014 the new engine is over 35% smaller installed, even with the heavier native packages we ship like the parts we\u2019ve rewritten in Rust and Lightning CSS.\n- Rust where it counts \u2014 we\u2019ve migrated some of the most expensive and parallelizable parts of the framework to Rust, while keeping the core of the framework in TypeScript for extensibility.\n- One dependency \u2014 the only thing the new engine depends on is Lightning CSS.\n- Custom parser \u2014 we wrote our own CSS parser and designed our own data structures tailored to our needs, making parsing over 2x as fast for us as it was with PostCSS.\nUnified toolchain\nTailwind CSS v4 isn\u2019t just a plugin anymore \u2014 it\u2019s an all-in-one tool for processing your CSS. We\u2019ve integrated Lightning CSS directly into the framework so you don\u2019t have to configure anything about your CSS pipeline.\n- Built-in\n@import\nhandling \u2014 no need to setup and configure a tool likepostcss-import\n. - Built-in vendor prefixing \u2014 you don\u2019t have to add\nautoprefixer\nto your projects anymore. - Built-in nesting support \u2014 no plugins needed to flatten nested CSS, it works out of the box.\n- Syntax transforms \u2014 modern CSS features like\noklch()\ncolors and media query ranges are transpiled to syntax with better browser support.\nWe\u2019re still shipping a PostCSS plugin, but we\u2019re also exploring first-party bundler plugins, and we\u2019re shipping an official Vite plugin with this first alpha release that you can try out today.\nDesigned for the modern web\nWe\u2019re looking into the future with Tailwind CSS v4 and trying to build a framework that\u2019s going to feel cutting edge for years to come.\n- Native cascade layers \u2014 we\u2019re using real\n@layer\nrules now, which solves a ton of specificity problems we\u2019ve wrestled with in the past. - Explicitly defined custom properties \u2014 we use\n@property\nto define our internal custom properties with proper types and constraints, making it possible to do things like transition background gradients. - Using\ncolor-mix\nfor opacity modifiers \u2014 making it easier than ever to use our opacity modifier syntax when using CSS variables for colors, or even adjusting the opacity ofcurrentColor\n. - Container queries in core \u2014 we\u2019ve added support for container queries directly to core, with new\n@min-*\nand@max-*\nvariants to support container query ranges.\nWe\u2019re also working on refreshing our color palette with wide gamut colors, and introducing support for other modern CSS features like @starting-style\n, anchor positioning, and more.\nComposable variants\nThe new architecture makes it possible to compose together variants that act on other selectors, like group-*\n, peer-*\n, has-*\n, and a new not-*\nvariant we\u2019re introducing for v4.\nIn earlier releases, variants like group-has-*\nwere explicitly defined in the framework, but now group-*\ncan compose with the existing has-*\nvariant, which can compose with other variants like focus\n:\n<div class=\"group\">\n<div class=\"group-has-[&:focus]:opacity-100\">\n<div class=\"group-has-focus:opacity-100\">\n<!-- ... -->\n</div>\n</div>\nThere\u2019s no limits to this composability, and you can even write stuff like group-not-has-peer-not-data-active:underline\nif for some horrible reason that\u2019s what you need to do.\nZero-configuration content detection\nYou\u2019ll notice that at least in these early alpha releases, it\u2019s not even possible to configure your content\npaths. For most projects, you\u2019re never going to need to do this ever again \u2014 Tailwind just finds your template files for you.\nWe do this using one of two ways depending on how you\u2019ve integrated Tailwind into your project:\n-\nUsing the PostCSS plugin or the CLI, Tailwind will crawl your entire project looking for template files, using a bunch of heuristics we\u2019ve built in to keep things fast, like not crawling directories that are in your\n.gitignore\nfile, and ignoring binary file formats. -\nUsing the Vite plugin, we rely on the module graph. This is amazing because we know exactly what files you\u2019re actually using, so it\u2019s maximally performant, and with no false positives or negatives. We\u2019re hoping to expand this approach outside of the Vite ecosystem with other bundler plugins in the future.\nWe\u2019ll introduce a way to configure content paths explicitly in the future for sure, but we\u2019re curious to see how well this automatic approach works for everyone \u2014 it\u2019s working awesome in our own projects.\nCSS-first configuration\nA major goal of Tailwind CSS v4.0 is making the framework feel CSS-native, and less like a JavaScript library.\nOnce you\u2019ve installed it, you add it to your project with a regular CSS @import\nstatement:\n@import \"tailwindcss\";\nAnd instead of setting up all of your customizations in a JavaScript configuration file, you just use CSS variables:\n@import \"tailwindcss\";\n@theme {\n--font-family-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n--color-neon-pink: oklch(71.7% 0.25 360);\n--color-neon-lime: oklch(91.5% 0.258 129);\n--color-neon-cyan: oklch(91.3% 0.139 195.8);\n}\nThe special @theme\ndirective tells Tailwind to make new utilities and variants available based on those variables, letting you use classes like 3xl:text-neon-lime\nin your markup:\n<div class=\"max-w-lg 3xl:max-w-xl\">\n<h1 class=\"font-display text-4xl\">\nData to <span class=\"text-neon-cyan\">enrich</span> your online business\n</h1>\n</div>\nAdding new CSS variables behaves like extend\ndid in earlier versions of the framework, but you can override a whole set of variables by clearing the namespace with syntax like --color-*: initial\nbefore defining all of your custom values:\n@import \"tailwindcss\";\n@theme {\n--color-*: initial;\n--color-gray-50: #f8fafc;\n--color-gray-100: #f1f5f9;\n--color-gray-200: #e2e8f0;\n/* ... */\n--color-green-800: #3f6212;\n--color-green-900: #365314;\n--color-green-950: #1a2e05;\n}\nWe\u2019re still fine-tuning some of the naming conventions, but you can explore the default theme on GitHub to see what\u2019s available to customize.\nIf you don\u2019t want to explicitly clear the default theme and would rather start from scratch, you can import \"tailwindcss/preflight\"\nand \"tailwindcss/utilities\"\ndirectly to skip importing the default theme:\n@import \"tailwindcss\";\n@import \"tailwindcss/preflight\" layer(base);\n@import \"tailwindcss/utilities\" layer(utilities);\n@theme {\n--color-*: initial;\n--color-gray-50: #f8fafc;\n--color-gray-100: #f1f5f9;\n--color-gray-200: #e2e8f0;\n/* ... */\n--color-green-800: #3f6212;\n--color-green-900: #365314;\n--color-green-950: #1a2e05;\n}\nWe also make all of your theme values available as native CSS variables in your custom CSS:\n:root {\n--color-gray-50: #f8fafc;\n--color-gray-100: #f1f5f9;\n--color-gray-200: #e2e8f0;\n/* ... */\n--color-green-800: #3f6212;\n--color-green-900: #365314;\n--color-green-950: #1a2e05;\n}\nThis makes it easy to reference any of your theme values in arbitrary values without needing the theme()\nfunction:\n<div class=\"p-[calc(var(--spacing-6)-1px)]\">\n<!-- ... -->\n</div>\nIt also makes it possible to use your theme values when working with UI libraries like Framer Motion, without having to use the resolveConfig()\nfunction:\nimport { motion } from \"framer-motion\"\nexport const MyComponent = () => (\n<motion.div\ninitial={{ y: 'var(--spacing-8)' }}\nanimate={{ y: 0 }}\nexit={{ y: 'var(--spacing-8)' }}\n>\n{children}\n</motion.div>\n)\nWhat\u2019s changed\nWe don\u2019t take breaking changes lightly, but there are a few things we\u2019re doing differently in v4 so far that are worth sharing:\n- Removed deprecated utilities \u2014 we\u2019ve removed utilities we stopped documenting a long time ago like\ntext-opacity-*\n,flex-grow-*\n, anddecoration-slice\nin favor of their modern replacements liketext-{color}/*\n,grow-*\n, andbox-decoration-slice\n. - PostCSS plugin and CLI are separate packages \u2014 the main\ntailwindcss\npackage doesn\u2019t include these anymore since not everyone needs them, instead they should be installed separately using@tailwindcss/postcss\nand@tailwindcss/cli\n. - No default border color \u2014 the\nborder\nutility used to default togray-200\n, but now it defaults tocurrentColor\nlike the browser does. We made this change to make it harder to accidentally introduce a wrong gray into your project if you\u2019re usingzinc\norslate\nor something else as your main gray. - Rings are 1px by default \u2014 the\nring\nutility used to be a 3px blue ring by default, now it\u2019s a 1px ring usingcurrentColor\n. We find ourselves using thering-*\nutilities as an alternative to borders in our projects, and usingoutline-*\nfor focus rings, so we think making things consistent here is a helpful change.\nThere are a handful of other really low-level implementation detail changes that might surface in some way in your projects, but nothing deliberate like these changes. If you bump into anything surprising, let us know.\nRoadmap to v4.0\nThis new engine is a ground-up rewrite, and up until now we\u2019ve been focused entirely on this reimagined developer experience using the new configuration approach.\nWe put an enormous amount of value in backwards compatibility, and that\u2019s where the bulk of the work lies before we can tag a stable v4.0 release later this year.\n- Support for JavaScript configuration files \u2014 reintroducing compatibility with the classic\ntailwind.config.js\nfile to make migrating to v4 easy. - Explicit content path configuration \u2014 making it possible to tell Tailwind exactly where your templates are when automatic content detection isn\u2019t good enough for your setup.\n- Support for other dark modes \u2014 right now we only support dark mode using media queries, and still need to reimplement the selector and variant strategies.\n- Plugins and custom utilities \u2014 we don\u2019t have support for plugins, or for writing custom utilities that automatically work with variants yet. Obviously we will make this work before a stable release.\n- Prefix support \u2014 there\u2019s no way to configure a prefix for your classes yet, but we\u2019ll bring it back for sure.\n- Safelists and blocklists \u2014 can\u2019t force Tailwind to generate certain classes or prevent it from generating other classes yet.\n- Support for\nimportant\nconfiguration \u2014 there\u2019s no way to make utilities all generate with!important\nright now, but we plan to implement it. - Support for the\ntheme()\nfunction \u2014 this isn\u2019t needed for new projects because you can usevar()\nnow, but we\u2019ll implement it for backwards compatibility. - Standalone CLI \u2014 we haven\u2019t worked on a standalone CLI for the new engine yet, but will absolutely have it before the v4.0 release.\nAside from that, I\u2019m sure we\u2019ll find a lot of bugs to fix, some exciting new CSS features to sneak in, and refine some of these new APIs that need some more polish before a proper release.\nI don\u2019t want to make promises on a specific release timeline, but I\u2019d personally love to mark v4.0 as stable before the summer holiday season kicks in.\nTry out the alpha\nWe\u2019ve tagged a couple alpha releases already, and you can start playing with it in your projects today.\nIf you\u2019re using the Tailwind CSS IntelliSense extension for VS Code, make sure you switch to the prerelease version from the extension page, and if you\u2019re using our Prettier plugin, make sure you install the latest version.\nIf you find an issue, please let us know on GitHub. We really want this thing to be bullet-proof before we tag a stable release and reporting any problems you find will help us a lot.\nUsing Vite\nInstall the Tailwind CSS v4 alpha and our new Vite plugin:\n$ npm install tailwindcss@next @tailwindcss/vite@next\nThen add our plugin to your vite.config.ts\nfile:\nimport tailwindcss from '@tailwindcss/vite'\nimport { defineConfig } from 'vite'\nexport default defineConfig({\nplugins: [tailwindcss()],\n})\nFinally, import Tailwind in your main CSS file:\n@import \"tailwindcss\";\nUsing PostCSS\nInstall the Tailwind CSS v4 alpha and the separate PostCSS plugin package:\n$ npm install tailwindcss@next @tailwindcss/postcss@next\nThen add our plugin to your postcss.config.js\nfile:\nmodule.exports = {\nplugins: {\n'@tailwindcss/postcss': {}\n}\n}\nFinally, import Tailwind in your main CSS file:\n@import \"tailwindcss\";\nUsing the CLI\nInstall the Tailwind CSS v4 alpha and the separate CLI package:\n$ npm install tailwindcss@next @tailwindcss/cli@next\nNext, import Tailwind in your main CSS file:\n@import \"tailwindcss\";\nFinally, compile your CSS using the CLI tool:\n$ npx @tailwindcss/cli@next -i app.css -o dist/app.css"},
{"source": "https://tailwindcss.com/blog/tailwindcss-v4-beta", "title": "Tailwind CSS v4.0 Beta 1 - Tailwind CSS", "text": "Tailwind CSS v4.0 Beta 1\n- Date\n- Adam Wathan\nAbout eight months ago we open-sourced our progress on Tailwind CSS v4.0. Hundreds of hours of fixing bugs, soul-crushing backward compatibility work, and troubleshooting Windows CI failures later, I\u2019m excited to finally tag the first public beta release.\nAs I talked about when we published the first alpha, Tailwind CSS v4.0 is an all-new engine built for performance, and designed for the modern web.\n- Built for performance \u2014 full builds in the new engine are up to 5x faster, and incremental builds are over 100x faster \u2014 and measured in microseconds.\n- Unified toolchain \u2014 built-in import handling, vendor prefixing, and syntax transforms, with no additional tooling required.\n- CSS-first configuration \u2014 a reimagined developer experience where you customize and extend the framework directly in CSS instead of a JavaScript configuration file.\n- Designed for the modern web \u2014 built on native cascade layers, wide-gamut colors, and including first-class support for modern CSS features like container queries,\n@starting-style\n, popovers, and more.\nThere\u2019s so much more to say, but everything you need to get started is in the new beta documentation we published today:\nGet started with Tailwind CSS v4.0 Beta 1 \u2192\nStart building and help us bullet-proof this thing for the stable release early in the new year."},
{"source": "https://tailwindcss.com/docs/v4-beta", "title": "Tailwind CSS v4.0 Beta - Tailwind CSS", "text": "Prerelease Documentation\nPreview what's coming in the next version of Tailwind CSS.\nAfter a long alpha period, we\u2019re pumped to finally promote Tailwind CSS v4.0 to beta!\nThere are definitely some rough edges and things we want to improve, but we\u2019re confident that we\u2019re not going to make any more breaking changes between now and the stable release.\nThis documentation is a work-in-progress and we\u2019ll continue to improve it over the course of the beta period, but it should be enough to get you up and running.\nIf you run into any snags, let us know on GitHub so we can bullet-proof this thing for the stable release a couple months down the road.\nIf you\u2019re using Vite or a Vite-powered framework like SvelteKit or Remix, install Tailwind along with our new dedicated Vite plugin:\n$ npm install tailwindcss@next @tailwindcss/vite@next\nNext, add our Vite plugin to your vite.config.ts\nfile:\nimport { defineConfig } from 'vite';\nimport tailwindcss from '@tailwindcss/vite';\nexport default defineConfig({\nplugins: [\ntailwindcss()\n],\n});\nFinally, import Tailwind into your main CSS file:\n@import \"tailwindcss\";\nIf your project uses PostCSS or you\u2019re using a framework like Next.js that supports PostCSS plugins, install Tailwind along with our new dedicated PostCSS plugin:\n$ npm install tailwindcss@next @tailwindcss/postcss@next\nNext, add our PostCSS plugin to your postcss.config.mjs\nfile:\nexport default {\nplugins: {\n'@tailwindcss/postcss': {},\n},\n};\nFinally, import Tailwind into your main CSS file:\n@import \"tailwindcss\";\nIf you want to use our dedicated CLI tool, install Tailwind along with our new dedicated CLI package:\n$ npm install tailwindcss@next @tailwindcss/cli@next\nNext, import Tailwind into your main CSS file:\n@import \"tailwindcss\";\nThen compile your CSS using the CLI tool:\n$ npx @tailwindcss/cli -i input.css -o output.css\nYou can also download standalone builds of the new CLI tool from GitHub for projects that don\u2019t otherwise depend on the Node.js ecosystem.\nIf you\u2019d like to try upgrading a project from v3 to the v4 beta releases, you can use our upgrade tool to do the vast majority of the heavy lifting for you:\n$ npx @tailwindcss/upgrade@next\nFor most projects, the upgrade tool will automate the entire migration process including updating your dependencies, migrating your configuration file to CSS, and handling any changes to your template files.\nThe upgrade tool requires Node.js 20 or higher, so ensure your environment is updated before running it.\nWe recommend running the upgrade tool in a new branch, then carefully reviewing the diff and testing your project in the browser to make sure all of the changes look correct. You may need to tweak a few things by hand in complex projects, but the tool will save you a ton of time either way.\nIt\u2019s also a good idea to go over all of the breaking changes in v4.0 and get a good understanding of what\u2019s changed, in case there are other things you need to update in your project that the upgrade tool doesn\u2019t catch.\nTailwind CSS v4.0 is a ground-up rewrite of the framework, taking everything we\u2019ve learned about the architecture over the years and optimizing it to be as fast as possible.\nWhen benchmarking it on our own projects, we\u2019ve found full rebuilds to be over 3.5x faster, and incremental builds to be over 8x faster.\nHere are the median build times we saw when we benchmarked Tailwind CSS v4.0 against Catalyst:\n| v3.4 | v4.0 Beta | Improvement | |\n|---|---|---|---|\n| Full build | 378ms | 100ms | 3.78x |\n| Incremental rebuild with new CSS | 44ms | 5ms | 8.8x |\n| Incremental rebuild with no new CSS | 35ms | 192\u00b5s | 182x |\nThe most impressive improvement is on incremental builds that don\u2019t actually need to compile any new CSS \u2014 these builds are over 100x faster and complete in microseconds. And the longer you work on a project, the more of these builds you run into because you\u2019re just using classes you\u2019ve already used before, like flex\n, col-span-2\n, or font-bold\n.\nOne of the biggest changes in Tailwind CSS v4.0 is the shift from configuring your project in JavaScript to configuring it in CSS.\nInstead of a tailwind.config.js\nfile, you can configure all of your customizations directly in the CSS file where you import Tailwind, giving you one less file to worry about in your project:\n@import \"tailwindcss\";\n@theme {\n--font-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n--color-avocado-100: oklch(0.99 0 0);\n--color-avocado-200: oklch(0.98 0.04 113.22);\n--color-avocado-300: oklch(0.94 0.11 115.03);\n--color-avocado-400: oklch(0.92 0.19 114.08);\n--color-avocado-500: oklch(0.84 0.18 117.33);\n--color-avocado-600: oklch(0.53 0.12 118.34);\n--ease-fluid: cubic-bezier(0.3, 0, 0, 1);\n--ease-snappy: cubic-bezier(0.2, 0, 0, 1);\n/* ... */\n}\nThe new CSS-first configuration lets you do just about everything you could do in your tailwind.config.js\nfile, including configuring your design tokens, setting up content sources, defining custom utilities and variants, installing plugins, and more.\nTo learn more about how it all works, read the CSS configuration in-depth documentation.\nTailwind CSS v4.0 takes all of your design tokens and makes them available as CSS variables by default, so you can reference any value you need at run-time using just CSS.\nUsing the example @theme\nfrom earlier, all of these values will be added to your CSS to as regular custom properties:\n:root {\n--font-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n--color-avocado-100: oklch(0.99 0 0);\n--color-avocado-200: oklch(0.98 0.04 113.22);\n--color-avocado-300: oklch(0.94 0.11 115.03);\n--color-avocado-400: oklch(0.92 0.19 114.08);\n--color-avocado-500: oklch(0.84 0.18 117.33);\n--color-avocado-600: oklch(0.53 0.12 118.34);\n--ease-fluid: cubic-bezier(0.3, 0, 0, 1);\n--ease-snappy: cubic-bezier(0.2, 0, 0, 1);\n/* ... */\n}\nThis makes it easy to reuse these values as inline styles or pass them to libraries like Motion to animate them.\nWe\u2019re using real CSS cascade layers in v4.0, which make it easier than ever to control the precedence of styles and how they interact with each other.\nHere\u2019s what the output looks like when you build your CSS with v4.0:\nWe\u2019ve had layers as a concept in Tailwind for years, but native cascade layers can do things that we couldn\u2019t easily replicate at build-time, like isolating styles within a layer even if they have a higher specificity than styles in another layer. Less code for us to maintain too!\nYou know how you always had to configure that annoying content\narray in Tailwind CSS v3? In v4.0, we came up with a bunch of heuristics for detecting all of that stuff automatically so you don\u2019t have to configure it at all.\nFor example, we automatically ignore anything in your .gitignore\nfile to avoid scanning dependencies or generated files that aren\u2019t under version control:\n# dependencies\n/node_modules\n# testing\n/coverage\n# caches\n/.next/\n# production\n/build\nWe also automatically ignore all binary extensions like images, videos, .zip files, and more.\nAnd if you ever need to explicitly add a source that\u2019s excluded by default, you can always add it with the @source\ndirective, right in your CSS file:\n@import \"tailwindcss\";\n@source \"../node_modules/@my-company/ui-lib\";\nThe @source\ndirective uses the same heuristics under the hood, so it will exclude binary file types for example as well, without you having to specify all of the extensions to scan explicitly.\nBefore v4.0, if you wanted to inline other CSS files using @import\nyou\u2019d have to configure another plugin like postcss-import\nto handle it for you.\nNow we handle this out of the box, so you don\u2019t need any other tools:\nexport default {\nplugins: {\n'postcss-import': {},\n'@tailwindcss/postcss': {},\n},\n};\nOur import system is purpose-built for Tailwind CSS, so we\u2019ve also been able to make it even faster by tightly integrating it with our engine.\nWhen building for production, Tailwind CSS v4.0 runs your CSS through Lightning CSS automatically, which handles things like vendor prefixes, modern feature transpilation, minification, and more.\nThis means you can remove tools like autoprefixer\nand postcss-preset-env\nfrom your project as well:\nexport default {\nplugins: {\n'@tailwindcss/postcss': {},\n'postcss-preset-env': {},\n'autoprefixer': {},\n},\n};\nIn v4.0, Tailwind CSS is the only thing you need to set up to handle your entire CSS pipeline \u2014 no other tooling required.\nIn v4.0, we\u2019ve really slimmed down the amount of theme configuration you need to do, especially for things that aren\u2019t really design tokens.\nUtilities like grid-cols-12\n, z-40\n, and opacity-70\nare no longer based on your theme \u2014 they just work. Whether you need a 5 column grid or a 73 column grid, you don\u2019t need to configure anything to make it happen.\n<div class=\"grid grid-cols-73\">\n<div>1</div>\n<!-- ... -->\n<div>73</div>\n</div>\nWe\u2019ve applied the same simplifications to variants like data-*\nas well \u2014 you don\u2019t need to configure these at all anymore or use arbitrary values for simple boolean attributes:\n<div class=\"opacity-50 data-[selected]:opacity-100\" data-selected>\n<div class=\"opacity-50 data-selected:opacity-100\" data-selected>\n<!-- ... -->\n</div>\nThese changes mean you touch your theme configuration way less frequently, and it stays focused on the design tokens that matter, like your typography, color palette, and breakpoints.\nWe\u2019ve simplified the way spacing utilities like px-*\n, mt-*\n, w-*\n, h-*\n, and more work by deriving them all from a single spacing scale value, defined as 0.25rem\nin the default theme:\n@theme {\n--spacing: 0.25rem;\n}\nWhen you define your spacing scale this way, every multiple of 0.25rem\nis available in your spacing scale. This means utilities like mt-21\nwill work with no extra configuration, unlike in v3 where you had to choose between mt-20\nand mt-24\nor drop down to using an arbitrary value.\nAnd if you want more constraints, you can always disable the --spacing\nvariable and provide your own explicit scale:\n@theme {\n--spacing: initial\n--spacing-1: 0.25rem\n--spacing-2: 0.5rem\n--spacing-4: 1rem\n--spacing-8: 2rem\n--spacing-12: 3rem\n}\nWe\u2019ve upgraded the entire default color palette from rgb\nto oklch\n, taking advantage of the wider gamut to make the colors more vivid in places where we were previously limited by the sRGB color space.\nWe\u2019ve tried to keep the balance between all the colors the same as it was in v3, so even though we\u2019ve refreshed things across the board, it shouldn\u2019t feel like a breaking change when upgrading your existing projects.\nIf you were using CSS variables in your color palette in v3, you might remember having to do weird things like define your colors as just a list of numbers without including the rgb(\u2026)\nfunction, or having to use the <alpha-value>\nplaceholder so that opacity modifiers would work.\nThanks to the new CSS color-mix(\u2026)\nfunction, none of that is necessary in v4.0 \u2014 you just define your colors as variables and all of the opacity modifier features work automatically:\n@import \"tailwindcss\";\n@theme {\n--color-primary: var(--color-blue-500);\n--color-error: var(--color-red-500);\n/* ... */\n}\nNow when you go to use a utility like bg-primary/50\n, it just works \u2014 no cryptic workarounds necessary:\n<div class=\"bg-primary/50\">\n<!-- ... -->\n</div>\nWe\u2019ve brought container query support into core for v4.0, so you don\u2019t need the @tailwindcss/container-queries\nplugin anymore:\n<div class=\"@container\">\n<div class=\"grid grid-cols-1 @sm:grid-cols-3 @lg:grid-cols-4\">\n<!-- ... -->\n</div>\n</div>\nWe\u2019ve also added support for max-width container queries using the new @max-*\nvariant:\n<div class=\"@container\">\n<div class=\"grid grid-cols-3 @max-md:grid-cols-1\">\n<!-- ... -->\n</div>\n</div>\nLike our regular breakpoint variants, you can also stack @min-*\nand @max-*\nvariants to define container query ranges:\n<div class=\"@container\">\n<div class=\"flex @min-md:@max-xl:hidden\">\n<!-- ... -->\n</div>\n</div>\nBrowser support for container queries is really great now, and I\u2019m excited to make it even easier to start using them in your projects in v4.0.\nWe\u2019ve finally added APIs for doing 3D transforms, like rotate-x-*\n, rotate-y-*\n, scale-z-*\n, translate-z-*\n, and tons more.\n<div class=\"perspective-distant\">\n<article class=\"... transform-3d rotate-x-51 rotate-z-43 shadow-xl transition-all duration-500 hover:-translate-y-4 hover:rotate-x-49 hover:rotate-z-38 hover:shadow-2xl\">\n<!-- ... -->\n</article>\n</div>\nUse the transform-3d\nutility to enable 3D transforms by setting the right transform-style\nUse the rotate-x-*\n, rotate-y-*\n, and rotate-z-*\nutilities to rotate elements in 3D space.\nAll of these utilities support any numeric value automatically out of the box, but here are a few examples for reference:\nUse the new scale-z-*\nutilities to scale elements on the z-axis.\nYou can use any numeric value you want automatically out of the box, but here are a few examples for reference:\nUse the new translate-z-*\nutilities to move elements closer or further away:\nThis utility uses your spacing scale by default and supports all of those values out of the box, but here are a few examples for reference:\nUse utilities like perspective-near\n, perspective-normal\n, and perspective-distant\nalong with the new perspective-origin-*\nutilities to control the perspective used for 3D transforms:\nThe perspective-*\nutilities can all be customized using the --perspective-*\nnamespace in your theme.\nUse the new backface-visible\nand backface-hidden\nutilities to control whether the back of an element is visible when transformed in 3D space.\nLinear gradients now support angles as values, so you can use utilities like bg-linear-45\nto create a gradient on a 45 degree angle:\n<div class=\"bg-linear-45 from-indigo-500 via-purple-500 to-pink-500\"></div>\nYou may notice we\u2019ve renamed bg-gradient-*\nto bg-linear-*\ntoo \u2014 you\u2019ll see why shortly!\nWe\u2019ve added the ability to control the color interpolation mode for gradients using a modifier, so a class like bg-linear-to-r/srgb\ninterpolates using sRGB, and bg-linear-to-r/oklch\ninterpolates using OKLCH:\n<div class=\"bg-linear-to-r/srgb from-indigo-500 to-teal-400\"></div>\n<div class=\"bg-linear-to-r/oklch from-indigo-500 to-teal-400\"></div>\nUsing polar color spaces like OKLCH or HSL can lead to much more vivid gradients when the from-*\nand to-*\ncolors are far apart on the color wheel. We\u2019re using OKLAB by default in v4.0 but you can always interpolate using a different color space by adding one of these modifiers.\nWe\u2019ve added new bg-conic-*\nand bg-radial-*\nutilities for creating conic and radial gradients:\n<div class=\"bg-conic/[in_hsl_longer_hue] from-red-600 to-red-600 size-24 rounded-full\"></div>\n<div class=\"bg-radial-[at_25%_25%] from-white to-zinc-900 to-75% size-24 rounded-full\"></div>\nThese new utilities work alongside the existing from-*\n, via-*\n, and to-*\nutilities to let you create conic and radial gradients the same way you create linear gradients, and include modifiers for setting the color interpolation method and arbitrary value support for controlling details like the gradient position.\nWe\u2019ve added dedicated inset-shadow-*\nand inset-ring-*\nutilities in v4.0 that can be composed with the existing shadow-*\nand ring-*\nutilities, giving you four layers of shadows you can stack to create the effects you need for your projects.\nSend\nSend\n<button class=\"shadow-md inset-shadow-sm inset-shadow-white/20 ring ring-blue-600 inset-ring inset-ring-white/15 ...\">\n<!-- ... -->\n</button>\nThe inset-ring-*\nutilities support any width value just like the ring-*\nutilities, and the inset-shadow-*\nutilities ship with 2xs\n, xs\n, and sm\nsizes out of the box. We may add more down the road but those ones feel the most useful right now.\n@theme {\n--inset-shadow-2xs: inset 0 1px rgb(0 0 0 / 0.05);\n--inset-shadow-xs: inset 0 1px 1px rgb(0 0 0 / 0.05);\n--inset-shadow-sm: inset 0 2px 4px rgb(0 0 0 / 0.05);\n}\nJust like the regular shadow-*\nand ring-*\nutilities, these both support colors as well using classes like inset-shadow-black/25\nand inset-ring-white/50\n.\nWe\u2019ve added utilities for the new field-sizing\nproperty that lets you create auto-resizing textareas with just CSS:\nType in the textarea to see the effect\n<label class=\"block\">\n<span class=\"block text-sm/6 font-medium text-gray-900 dark:text-white\">Add your comment</span>\n<textarea class=\"field-sizing-content ...\"></textarea>\n</label>\nUse field-sizing-content\nto make the control resize to fit its contents, or field-sizing-fixed\nto give the control a fixed size.\nEver been annoyed that your app was showing light scrollbars in dark mode? You want these new color-scheme\nutilities.\nScroll the content to see the scrollbar themes\nLight mode\nRight now there are six-hundred Titleists that I got from the driving range in the trunk of my car. Why don't we drive out to Rock-a-Way\u2026 and hit `em into the ocean! Now picture this. we find a nice sweet spot between the dunes, we take out our drivers, we tee up and, that ball goes sailing up into the sky holds there for a moment and then.. gulp!\nDark mode\nRight now there are six-hundred Titleists that I got from the driving range in the trunk of my car. Why don't we drive out to Rock-a-Way\u2026 and hit `em into the ocean! Now picture this. we find a nice sweet spot between the dunes, we take out our drivers, we tee up and, that ball goes sailing up into the sky holds there for a moment and then.. gulp!\n<div class=\"grid grid-cols-2\">\n<div class=\"bg-white overflow-y-scroll scheme-light\">\n...\n</div>\n<div class=\"bg-slate-800 overflow-y-scroll scheme-dark\">\n...\n</div>\n</div>\nHere\u2019s a full list of all the new APIs:\nThrow scheme-light dark:scheme-dark\non your html\nor body\nelement and your scrollbars will always look good, no matter which dark mode strategy you use.\nWe\u2019ve added utilities for the new-ish font-stretch\nproperty, which helps you style variable fonts that support different widths:\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nThe quick brown fox jumps over the lazy dog.\nLooks like the name of this is changing to font-width\nat some point but no browsers actually support it yet, looking forward to dealing with that.\nIn the new v4.0 engine, certain variants can be chained with other variants, letting you use simple named APIs for things that needed complex arbitrary variants in v3:\n<div class=\"group\">\n<div class=\"group-has-[&[data-potato]]:opacity-100\">\n<div class=\"group-has-data-potato:opacity-100\">\n<!-- ... -->\n</div>\n<div data-potato>\n<!-- ... -->\n</div>\n</div>\nThis works with any variant where it makes sense, including group-*\n, peer-*\n, has-*\n, and the new not-*\nand in-*\nvariants. You can chain as many of them as you want, so even totally useless classes like group-not-has-peer-not-data-active:underline\nwill generate real CSS.\nThe new starting\nvariant adds support for the new CSS @starting-style\nfeature, making it possible to transition element properties when an element is first displayed:\nClick the button to see the popover animate in\n<div>\n<button popovertarget=\"my-popover\">Check for updates</button>\n<div popover id=\"my-popover\" class=\"opacity-0 transition-all duration-500 transition-discrete open:opacity-100 starting:open:opacity-0\">\n<!-- ... -->\n</div>\n</div>\nThe new not-*\nvariant adds support for the :not(\u2026)\npseudo-class, letting you style things when certain conditions are not true.\nFor example, only adding hover styles to a button when the button is not focused:\n<button class=\"bg-indigo-600 hover:not-focus:bg-indigo-700\">\n<!-- ... -->\n</button>\nYou can also combine the not-*\nvariant with media query variants like forced-colors\nto only style an element when forced colors mode is not active:\n<input type=\"radio\" class=\"not-forced-colors:appearance-none\" />\nIt works with supports-*\nvariants too, so you can style an element based on the lack of browser support for a specific CSS feature:\n<div class=\"not-supports-[display:grid]:flex\">\n<!-- ... -->\n</div>\nThe new inert\nvariant lets you style elements marked with the inert\nattribute:\n<main inert class=\"inert:opacity-50 inert:blur\">\n<!-- ... -->\n</main>\nThis is useful for adding visual cues that make it clear that an element isn\u2019t interactive.\nWe\u2019ve added four new variants for the :nth-child(\u2026)\n, :nth-last-child(\u2026)\n, :nth-of-type(\u2026)\n, and :nth-last-of-type(\u2026)\npseudo-classes:\n<div class=\"nth-3:underline\">\u2026</div>\n<div class=\"nth-last-5:underline\">\u2026</div>\n<div class=\"nth-of-type-4:underline\">\u2026</div>\n<div class=\"nth-last-of-type-6:underline\">\u2026</div>\nYou can pass any number you want to these by default, and use arbitrary values for more complex expressions like nth-[2n+1_of_li]\n.\nYou know our group-*\nvariants like group-focus\n? The new in-*\nvariant is just like that except you don\u2019t need to add group\nto the parent element:\n<div tabindex=\"0\" class=\"group\">\n<div class=\"opacity-50 group-focus:opacity-100\">\n<div tabindex=\"0\">\n<div class=\"opacity-50 in-focus:opacity-100\">\n<!-- ... -->\n</div>\n</div>\nYou\u2019ll still want the group-*\nstuff a lot of the time when you need fine control, but this will save you some characters the rest of the time.\nWe\u2019ve updated our existing open\nvariant to target the :popover-open\npseudo-class as well as the [open]\nattribute:\n<div>\n<button popovertarget=\"my-popover\">Open Popover</button>\n<div popover id=\"my-popover\" class=\"opacity-0 open:opacity-100 ...\">\n<!-- ... -->\n</div>\n</div>\nI\u2019m sure I\u2019m eventually going to regret not making it a separate popover-open\nvariant but I thought really hard about it and couldn\u2019t think of any situations where an element would use both [open]\nand :popover-open\nand have different styles for each condition. Someone is going to update the spec and screw me on this one down the road though for sure.\nYou know the *\nvariant we shipped a while ago for targeting direct children?\n<ul class=\"*:p-4\">\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ul>\nIn v4.0 we\u2019ve added a new **\nvariant for targeting all descendants \u2014 most useful in my opinion if you combine it with another variant for narrowing the thing you\u2019re selecting:\n<div class=\"**:data-avatar:rounded-full\">\n<div>\n<img src=\"\u2026\" data-avatar /> <!-- This element will be round -->\n</div>\n<p>\u2026</p>\n</div>\nFun fact \u2014 the syntax is inspired by globs, for better or for worse.\nTo customize your theme in Tailwind CSS v4.0, use the new @theme\ndirective directly in your CSS:\n@import \"tailwindcss\";\n@theme {\n--font-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n--color-avocado-100: oklch(0.99 0 0);\n--color-avocado-200: oklch(0.98 0.04 113.22);\n--color-avocado-300: oklch(0.94 0.11 115.03);\n--color-avocado-400: oklch(0.92 0.19 114.08);\n--color-avocado-500: oklch(0.84 0.18 117.33);\n--color-avocado-600: oklch(0.53 0.12 118.34);\n--ease-fluid: cubic-bezier(0.3, 0, 0, 1);\n--ease-snappy: cubic-bezier(0.2, 0, 0, 1);\n/* ... */\n}\nEach CSS variable you define here tells Tailwind to make new utilities and variants available based on those values, letting you use classes like font-display\n, 3xl:max-w-xl\n, text-avocado-400\n, and hover:ease-fluid\nin your markup:\n<div class=\"max-w-lg 3xl:max-w-xl\">\n<h1 class=\"font-display text-4xl\">\nData to <span class=\"text-avocado-400\">enrich</span> your online business\n</h1>\n</div>\nEach set of variables is part of a namespace that links them to the corresponding utilities, for example the font size utilities reference the --font-*\nnamespace, all of the color utilities reference the --color-*\nnamespace, and the transition-timing-function utilities reference the --ease-*\nnamespace.\nFor a full list, see the theme namespace reference.\nBy default, adding new CSS variables behaves like extend\nin Tailwind CSS v3:\n@import \"tailwindcss\";\n@theme {\n/* These values are added in addition to the defaults */\n--font-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n}\nTo override an entire namespace, unset the namespace using syntax like --font-*: initial\n:\n@import \"tailwindcss\";\n@theme {\n--font-*: initial;\n--font-display: \"Satoshi\", \"sans-serif\";\n}\nNow the default font-sans\n, font-serif\n, and font-mono\nutilities won\u2019t exist in your project and font-display\nwill be the only available font family utility.\nYou can also unset the entire default theme using --*: initial\nif you want to start completely from scratch:\n@import \"tailwindcss\";\n@theme {\n--*: initial;\n}\nThis will remove all of the default design tokens, including all of the default fonts, the typography scale, the color palette, and more.\nTo set the default line height, font weight, or letter spacing for a custom font size, add a supporting variable using double-dashes like --text-big--line-height\n:\n@theme {\n--text-big: 16rem;\n--text-big--line-height: 18rem;\n--text-big--font-weight: 550;\n--text-big--letter-spacing: -0.025em;\n}\nBy default, Tailwind CSS v4.0 preserves any custom @keyframes\nrules you add to your CSS, even if you don\u2019t use the corresponding animation utilities in your project.\nTo make sure unused @keyframes\nrules are removed, configure them under @theme\ninstead of at the root of your CSS:\n@theme {\n--animate-marquee: marquee 3s linear infinite;\n@keyframes marquee {\nto {\ntransform: translateY(-50%);\n}\n}\n}\nSince we\u2019ve dramatically simplified theme configuration in Tailwind CSS v4.0, you\u2019ll only generally work with these namespaces:\n| Namespace | Utilities |\n|---|---|\n--color-* | Color utilities like bg-white , text-black , or fill-blue-500 |\n--font-* | Font family utilities like font-sans |\n--text-* | Font size utilities like text-sm |\n--font-weight-* | Font weight utilities like font-bold |\n--tracking-* | Letter spacing utilities like tracking-tight |\n--leading-* | Line height utilities like leading-relaxed |\n--spacing-* | Spacing and sizing utilities like pt-5 , mr-2 , and h-8 |\n--breakpoint-* | Breakpoint variants like md:* and lg:* |\n--container-* | Container query variants like @md:* and width utilities like w-sm and max-w-lg |\n--radius-* | Border radius utilities like rounded-md |\n--shadow-* | Box shadow utilities like shadow-lg |\n--inset-shadow-* | Inset box shadow utilities like inset-shadow-sm |\n--drop-shadow-* | Drop shadow utilities like drop-shadow-xl |\n--ease-* | Transition timing function utilities like ease-out |\n--animate-* | Animation utilities like animate-spin |\nIf you need more fine-grained control, most utilities can also be configured under a namespace that matches the CSS property name. For example custom background-image\nutilities like bg-grid-pattern\ncan be configured using --background-image-grid-pattern: url(\u2026)\n.\nBy default, the dark\nvariant in Tailwind CSS v4.0 uses the prefers-color-scheme\nmedia query.\nIf you want to use a selector-based strategy in your project for dark mode, override the dark\nvariant with the selector you want to use:\n@import \"tailwindcss\";\n@variant dark (&:where(.dark, .dark *));\nIf the automatic source detection in Tailwind CSS v4.0 is too broad and including files you don\u2019t want it to include (maybe you\u2019re working in a large monorepo for example), you can use the source(\u2026)\nfunction when importing Tailwind to specify the base path for automatic source detection:\n@import \"tailwindcss\" source(\"../src\");\nThis path should be relative to the CSS file where it\u2019s used.\nIf you need to add additional content sources that aren\u2019t being picked up by default (like something that is in your .gitignore\nfile), add it using @source\n:\n@import \"tailwindcss\";\n@source \"../node_modules/@my-company/ui-lib/src/components\";\nFor situations like this, it can also be helpful to export a CSS file from your library and move the @source\ndirective there instead so you can just import the CSS file:\n@source \"./src/components\";\n@import \"tailwindcss\";\n@import \"@my-company/ui-lib\";\nThe @source\ndirective can also be useful when you\u2019re using the Vite plugin but need to include content sources that aren\u2019t naturally part of the module graph, like PHP templates in a Laravel project:\n@import \"tailwindcss\";\n@source \"../../resources/views\";\n@source \"../../app\";\nIf you need disable automatic source detection for any reason, use source(none)\nwhen importing Tailwind:\n@import \"tailwindcss\" source(none);\nWith source detection disabled, you can then just use @source\nto configure all of your content sources explicitly.\nIf you need to disable Tailwind\u2019s base styles, you can import the pieces of Tailwind that you need separately:\n@layer theme, base, components, utilities;\n@import \"tailwindcss/theme\" layer(theme);\n@import \"tailwindcss/utilities\" layer(utilities);\nTo prefix your utilities and theme variables to avoid conflicts with existing CSS, use the prefix(\u2026)\nfunction when importing Tailwind:\n@import \"tailwindcss\" prefix(tw);\nPrefixes work a little differently than in v3 \u2014 now they look like variants and are always at the beginning of the class name:\n<div class=\"tw:flex tw:bg-red-500 tw:hover:bg-red-600\">\n<!-- ... -->\n</div>\nWhen using a prefix, you should still configure your theme variables as if you aren\u2019t using a prefix:\n@import \"tailwindcss\" prefix(tw);\n@theme {\n--font-display: \"Satoshi\", \"sans-serif\";\n--breakpoint-3xl: 1920px;\n--color-avocado-100: oklch(0.99 0 0);\n--color-avocado-200: oklch(0.98 0.04 113.22);\n--color-avocado-300: oklch(0.94 0.11 115.03);\n/* ... */\n}\nThe generated CSS variables will include a prefix though to avoid conflicts with any existing variables in your project:\n:root {\n--tw-font-display: \"Satoshi\", \"sans-serif\";\n--tw-breakpoint-3xl: 1920px;\n--tw-color-avocado-100: oklch(0.99 0 0);\n--tw-color-avocado-200: oklch(0.98 0.04 113.22);\n--tw-color-avocado-300: oklch(0.94 0.11 115.03);\n/* ... */\n}\nTo add a custom utility in v4.0, use the new @utility\ndirective:\n@import \"tailwindcss\";\n@utility tab-4 {\ntab-size: 4;\n}\nCustom utilities are automatically inserted into the utilities\nlayer along with all of the built-in utilities in the framework.\nTo add a custom variant in v4.0, use the new @variant\ndirective:\n@import \"tailwindcss\";\n@variant pointer-coarse (@media (pointer: coarse));\n@variant theme-midnight (&:where([data-theme=\"midnight\"] *));\nThis lets you write utilities like pointer-coarse:size-48\nand theme-midnight:bg-slate-900\n.\nTo load a plugin in v4.0, use the the new @plugin\ndirective:\n@import \"tailwindcss\";\n@plugin \"@tailwindcss/typography\";\nThe @plugin\ndirective takes either a package name or a local path.\nTo use an existing JS configuration file in v4.0, load it with the @config\ndirective:\n@import \"tailwindcss\";\n@config \"../../tailwind.config.js\";\nNote that not every feature of the JS config is supported in v4.0. Options like corePlugins\n, important\n, and separator\nwill likely not be supported at all in the stable v4.0 release, and options like safelist\nmay return but with differences in behavior.\nIf you want to use @apply\nin the <style>\nblock of a Vue or Svelte component, you will need to import your theme configuration to make those values available in that context.\nTo do this without duplicating the CSS variables in your CSS output, use theme(reference)\nwhen importing your theme:\n<template>\n<h1>Hello world!</h1>\n</template>\n<style>\n@import \"../../my-theme.css\" theme(reference);\nh1 {\n@apply font-bold text-2xl text-red-500;\n}\n</style>\nIf you\u2019re just using the default theme, you can import \"tailwindcss/theme\"\ndirectly:\n<template>\n<h1>Hello world!</h1>\n</template>\n<style>\n@import \"tailwindcss/theme\" theme(reference);\nh1 {\n@apply font-bold text-2xl text-red-500;\n}\n</style>\nTailwind CSS v4.0 is a new major version of the framework, and while we strive to preserve backward compatibility as much as possible, there are several breaking changes we\u2019ve had to make to make the improvements we wanted for the new release.\nTo make the upgrade as painless as possible, we\u2019ve built a really awesome migration tool that will automate basically all of these changes for you.\nTo upgrade your project automatically, run the upgrade tool from your project root on the command-line:\n$ npx @tailwindcss/upgrade@next\nOnce it\u2019s done, review all of the changes and test your project to make sure everything is working as expected, and with any luck you\u2019ll be off to the races.\nBut here\u2019s a list of all of the changes in detail in case you run into issues using the migration tool.\nIn Tailwind CSS v3, the tailwindcss\npackage was a PostCSS plugin, but in v4.0 the PostCSS plugin lives in a dedicated @tailwindcss/postcss\npackage.\nTailwind CSS v4.0 also handles CSS imports and vendor prefixing for you, so you can remove postcss-import\nand autoprefixer\nif they are in your project:\nexport default {\nplugins: {\n'postcss-import': {},\n'tailwindcss': {},\n'autoprefixer': {},\n'@tailwindcss/postcss': {},\n},\n};\nIf you\u2019re using Vite, we recommend migrating from the PostCSS plugin to our new dedicated Vite plugin:\nimport { defineConfig } from 'vite';\nimport tailwindcss from '@tailwindcss/vite';\nexport default defineConfig({\nplugins: [\ntailwindcss()\n],\n});\nIn v4.0, Tailwind CLI lives in a dedicated @tailwindcss/cli\npackage. Update any of your build commands to use the new package instead:\nnpx tailwindcss -i input.css -o output.css\nnpx @tailwindcss/cli -i input.css -o output.css\nIn Tailwind CSS v4.0, you import Tailwind using a regular CSS @import\nstatement, not using the @tailwind\ndirectives you used in v3:\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n@import \"tailwindcss\";\nWe\u2019ve removed any utilities that were deprecated in v3 and have been undocumented for several years. Here\u2019s a list of what\u2019s been removed along with the modern alternative:\n| Deprecated | Replacement |\n|---|---|\nbg-opacity-* | Use opacity modifiers like bg-black/50 |\ntext-opacity-* | Use opacity modifiers like text-black/50 |\nborder-opacity-* | Use opacity modifiers like border-black/50 |\ndivide-opacity-* | Use opacity modifiers like divide-black/50 |\nring-opacity-* | Use opacity modifiers like ring-black/50 |\nplaceholder-opacity-* | Use opacity modifiers like placeholder-black/50 |\nflex-shrink-* | shrink-* |\nflex-grow-* | grow-* |\noverflow-ellipsis | text-ellipsis |\ndecoration-slice | box-decoration-slice |\ndecoration-clone | box-decoration-clone |\nIn v3, the container\nutility had several configuration options like center\nand padding\nthat no longer exist in v4.0. To customize the container\nutility in v4.0, extend it with @utility\n:\n@import \"tailwindcss\";\n@utility container {\nmargin-inline: auto;\npadding-inline: 2rem;\n}\nWe\u2019ve shifted things around a bit in the default shadow scales to make sure every shadow utility has a named value.\nTo do this, we\u2019ve renamed shadow\nto shadow-sm\n, shadow-sm\nto shadow-xs\n, drop-shadow\nto drop-shadow-sm\n, and drop-shadow-sm\nto drop-shadow-xs\n:\n| v3 | v4 |\n|---|---|\nshadow-sm | shadow-xs |\nshadow | shadow-sm |\ndrop-shadow-sm | drop-shadow-xs |\ndrop-shadow | drop-shadow-sm |\nThe shadow\nand drop-shadow\nutilities will still work for backward compatibility, but shadow-sm\nand drop-shadow-sm\nwill look different in your project if you don\u2019t replace each instance with shadow-xs\nand drop-shadow-xs\ninstead.\nWe\u2019ve shifted things around a bit in the default blur scale to make sure every blur utility has a named value.\nTo do this, we\u2019ve renamed blur\nto blur-sm\n, and blur-sm\nto blur-xs\n:\n| v3 | v4 |\n|---|---|\nblur-sm | blur-xs |\nblur | blur-sm |\nThe blur\nutility will still work for backward compatibility, but blur-sm\nwill look different in your project if you don\u2019t replace each instance with blur-xs\ninstead.\nWe\u2019ve shifted things around a bit in the default border radius scale to make sure every border radius utility has a named value.\nTo do this, we\u2019ve renamed rounded\nto rounded-sm\n, and rounded-sm\nto rounded-xs\n:\n| v3 | v4 |\n|---|---|\nrounded-sm | rounded-xs |\nrounded | rounded-sm |\nThe rounded\nutility will still work for backward compatibility, but rounded-sm\nwill look different in your project if you don\u2019t replace each instance with rounded-xs\ninstead.\nIn v3, borders used your configured gray-200\ncolor by default. We\u2019ve updated this in v4 to be just currentColor\n, which matches the default behavior of all browsers.\nTo update your project for this change, make sure anywhere you\u2019re using a border color utility anywhere you\u2019re using the border\nutility, or add these lines of CSS to your project to preserve the v3 behavior:\n@import \"tailwindcss\";\n@layer base {\n*,\n::after,\n::before,\n::backdrop,\n::file-selector-button {\nborder-color: var(--color-gray-200, currentColor);\n}\n}\nIn v3, the ring\nutility added a 3px ring. We\u2019ve changed this in v4 to be 1px to make it consistent with borders and outlines.\nTo update your project for this change, replace any usage of ring\nwith ring-3\n:\n<div class=\"ring ring-blue-500\">\n<div class=\"ring-3 ring-blue-500\">\n<!-- ... -->\n</div>\nIn v3, placeholder text used your configured gray-400\ncolor by default. We\u2019ve simplified this in v4 to just use the current text color at 50% opacity.\nYou probably won\u2019t even notice this change (it might even make your project look better), but if you want to preserve the v3 behavior, add this CSS to your project:\n@import \"tailwindcss\";\n@layer base {\ninput::placeholder,\ntextarea::placeholder {\ncolor: theme(--color-gray-400);\n}\n}\nIn v3, the outline-none\nutility was actually a complex class that didn\u2019t just set outline-style: none\n:\n/* v3 */\n.outline-none {\noutline: 2px solid transparent;\noutline-offset: 2px;\n}\nWhat it really did was add an invisible 2px outline that would still show up in forced colors mode for accessibility reasons.\nWe\u2019ve simplified this in v4.0 and now outline-none\njust sets outline-style: none\nlike you\u2019d expect:\n/* v4 */\n.outline-none {\noutline-style: none;\n}\nWe\u2019ve added a new outline-hidden\nutility that does what outline-none\ndid in v3, since it\u2019s still a very useful feature.\nTo update your project for this change, replace any use of outline-none\nwith outline-hidden\n, unless you really do want outline-style: none\n:\n<input class=\"focus:outline-none\">\n<input class=\"focus:outline-hidden\">\nIn v3, any custom classes you defined within @layer utilities\nwould get picked up by Tailwind as a true utility class and would automatically work with variants like hover\n, focus\n, or lg\n.\nIn v4.0 we are using native cascade layers and no longer hijacking the @layer\nat-rule, so we\u2019ve introduced the @utility\nAPI as a replacement:\n@layer utilities {\n.tab-4 {\ntab-size: 4;\n}\n}\n@utility tab-4 {\ntab-size: 4;\n}\nCustom utilities must be a single class name in v4.0 and not a complex selector. If your custom utility is more complex than a single class name, use nesting to define the utility:\n@utility scrollbar-hidden {\n&::-webkit-scrollbar {\ndisplay: none;\n}\n}\nIn v3, stacked variants were applied from right to left, but in v4 we\u2019ve updated them to apply left to right to look more like CSS syntax.\nTo update your project for this change, reverse the order of any order-sensitive stacked variants in your project:\n<ul class=\"py-4 first:*:pt-0 last:*:pb-0\">\n<ul class=\"py-4 *:first:pt-0 *:last:pb-0\">\n<li>One</li>\n<li>Two</li>\n<li>Three</li>\n</ul>\nYou likely have very few of these if any \u2014 the direct child variant (*\n) and any typography plugin variants (prose-headings\n) are the most likely ones you might be using, and even then it\u2019s only if you\u2019ve stacked them with other variants.\nIn v3 you were able to use CSS variables as arbitrary values without var(\u2026)\n, but recent updates to CSS mean that this can often be ambiguous, so we\u2019ve changed the syntax for this in v4.0 to use parentheses instead of square brackets.\nTo update your project for this change, replace usage of the old variable shorthand syntax with the new variable shorthand syntax:\n<div class=\"bg-[--brand-color]\">\n<div class=\"bg-(--brand-color)\">\n<!-- ... -->\n</div>\nIn v3 we exported a resolveConfig\nfunction that you could use to turn your JS config into a flat object that you could use in your other JavaScript.\nWe\u2019ve removed this in v4 in hopes that people can use the CSS variables we generate directly instead, which is much simpler and will significantly reduce your bundle size.\nIn v4.0 we\u2019ve updated the hover\nvariant to only apply when the primary input device supports hover:\n@media (hover: hover) {\n.hover\\:underline:hover {\ntext-decoration: underline;\n}\n}\nThis can create problems if you\u2019ve built your site in a way that depends on touch devices triggering hover on tap. If this is an issue for you, you can override the hover\nvariant with your own variant that uses the old implementation:\n@import \"tailwindcss\";\n@variant hover (&:hover);\nGenerally though I\u2019d recommend treating hover functionality as an enhancement, and not depending on it for your site to work since touch devices don\u2019t truly have the ability to hover.\nIn v3 there was a corePlugins\noption you could use to completely disable certain utilities in the framework. This is no longer supported in v4.0, but we\u2019re planning to explore different ideas for solving the same type of problems that feature was often used to solve in later beta releases.\nSince Tailwind CSS v4.0 includes CSS variables for all of your theme values, we recommend using those variables instead of the theme()\nfunction whenever possible:\n@import \"tailwindcss\";\n.my-class {\nbackground-color: theme(colors.red.500);\nbackground-color: var(--color-red-500);\n}\nFor cases where you still need to use the theme()\nfunction (like in media queries where CSS variables aren\u2019t supported), you should use the CSS variable name instead of the old dot notation:\n@import \"tailwindcss\";\n@media (width >= theme(screens.xl)) {\n@media (width >= theme(--breakpoint-xl)) {\n/* ... */\n}\nJavaScript config files are still supported for backward compatibility, but they are no longer detected automatically in v4.0.\nIf you still need to use a JavaScript config file, make sure to load it explicitly using @config\n:\n@import \"tailwindcss\";\n@config \"../../tailwind.config.js\";"}]