[{"source": "https://tailwindcss.com/blog/tailwindcss-v4", "title": "Tailwind CSS v4.0", "text": "Holy shit actually done \u2014 tagged Tailwind CSS v4.0. Tailwind CSS v4.0 all-new version framework optimized performance flexibility, reimagined configuration customization experience, taking full advantage latest advancements web platform offer. - New high-performance engine \u2014 full builds 5x faster, incremental builds 100x faster \u2014 measured microseconds. - Designed modern web \u2014 built cutting-edge CSS features like cascade layers, registered custom properties @property , andcolor-mix() . - Simplified installation \u2014 fewer dependencies, zero configuration, single line code CSS file. - First-party Vite plugin \u2014 tight integration maximum performance minimum configuration. - Automatic content detection \u2014 template files discovered automatically, configuration required. - Built-in import support \u2014 additional tooling necessary bundle multiple CSS files. - CSS-first configuration \u2014 reimagined developer experience customize extend framework directly CSS instead JavaScript configuration file. - CSS theme variables \u2014 design tokens exposed native CSS variables access anywhere. - Dynamic utility values variants \u2014 stop guessing values exist spacing scale, extending configuration things like basic data attributes. - Modernized P3 color palette \u2014 redesigned, vivid color palette takes full advantage modern display technology. - Container queries \u2014 first-class APIs styling elements based container size, plugins required. - New 3D transform utilities \u2014 transform elements 3D space directly HTML. - Expanded gradient APIs \u2014 radial conic gradients, interpolation modes, more. - @starting-style support \u2014 new variant use create enter exit transitions, without need JavaScript. - not-* variant \u2014 style element match another variant, custom selector, media feature query. - Even new utilities variants \u2014 including support color-scheme ,field-sizing , complex shadows,inert , more. Start using Tailwind CSS v4.0 today installing new project, playing directly browser Tailwind Play. existing projects, published comprehensive upgrade guide built automated upgrade tool get latest version quickly painlessly possible. New high-performance engine Tailwind CSS v4.0 ground-up rewrite framework, taking everything learned architecture years optimizing fast possible. benchmarking projects, found full rebuilds 3.5x faster, incremental builds 8x faster. median build times saw benchmarked Tailwind CSS v4.0 Catalyst: | v3.4 | v4.0 | Improvement | | |---|---|---|---| | Full build | 378ms | 100ms | 3.78x | | Incremental rebuild new CSS | 44ms | 5ms | 8.8x | | Incremental rebuild new CSS | 35ms | 192\u00b5s | 182x | impressive improvement incremental builds actually need compile new CSS \u2014 builds 100x faster complete microseconds. longer work project, builds run using classes already used before, like flex , col-span-2 , font-bold . Designed modern web platform evolved lot since released Tailwind CSS v3.0, v4.0 takes full advantage many improvements. @layer theme, base, components, utilities;@layer utilities { .mx-6 { margin-inline: calc(var(--spacing) * 6); } .bg-blue-500\\/50 { background-color: color-mix(in oklab, var(--color-blue-500) 50%, transparent); }}@property --tw-gradient-from { syntax: \"<color>\"; inherits: false; initial-value: #0000;} leveraging modern CSS features like: - Native cascade layers \u2014 giving us control ever different style rules interact other. - Registered custom properties \u2014 making possible things like animate gradients, significantly improving performance large pages. - color-mix() \u2014 lets us adjust opacity color value, including CSS variables currentColor . - Logical properties \u2014 simplifying RTL support reducing size generated CSS. Many features even simplified Tailwind internally, reducing surface area bugs making framework easier us maintain. Simplified installation streamlined setup process ton v4.0, reducing number steps removing lot boilerplate. npm tailwindcss @tailwindcss/postcss; export default { plugins: [\"@tailwindcss/postcss\"],}; @import \"tailwindcss\"; improvements made process v4.0, Tailwind feels light-weight ever: - one-line CSS \u2014 @tailwind directives, add@import \"tailwindcss\" start building. - Zero configuration \u2014 start using framework without configuring anything, even paths template files. - external plugins required \u2014 bundle @import rules box, use Lightning CSS hood vendor prefixing modern syntax transforms. Sure go per project, adds starting abandoning different side-project every weekend. First-party Vite plugin Vite user, integrate Tailwind using @tailwindcss/vite instead PostCSS: import { defineConfig } \"vite\";import tailwindcss \"@tailwindcss/vite\";export default defineConfig({ plugins: [ tailwindcss(), ],}); Tailwind CSS v4.0 incredibly fast used PostCSS plugin, get even better performance using Vite plugin. Automatic content detection know always configure annoying content array Tailwind CSS v3? v4.0, came bunch heuristics detecting stuff automatically don\u2019t configure all. example, automatically ignore anything .gitignore file avoid scanning dependencies generated files aren\u2019t version control: /node_modules/coverage/.next//build also automatically ignore binary extensions like images, videos, .zip files, more. ever need explicitly add source that's excluded default, always add @source directive, right CSS file: @import \"tailwindcss\";@source \"../node_modules/@my-company/ui-lib\"; @source directive uses heuristics hood, exclude binary file types example well, without specify extensions scan explicitly. Learn new documentation detecting classes source files. Built-in import support v4.0, wanted inline CSS files using @import configure another plugin like postcss-import handle you. handle box, need tools: export default { plugins: [ \"postcss-import\", \"@tailwindcss/postcss\", ],}; import system purpose-built Tailwind CSS, also able make even faster tightly integrating engine. CSS-first configuration One biggest changes Tailwind CSS v4.0 shift configuring project JavaScript configuring CSS. Instead tailwind.config.js file, configure customizations directly CSS file import Tailwind, giving one less file worry project: @import \"tailwindcss\";@theme { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); --color-avocado-400: oklch(0.92 0.19 114.08); --color-avocado-500: oklch(0.84 0.18 117.33); --color-avocado-600: oklch(0.53 0.12 118.34); --ease-fluid: cubic-bezier(0.3, 0, 0, 1); --ease-snappy: cubic-bezier(0.2, 0, 0, 1); /* ... */} new CSS-first configuration lets everything could tailwind.config.js file, including configuring design tokens, defining custom utilities variants, more. learn works, read new theme variables documentation. CSS theme variables Tailwind CSS v4.0 takes design tokens makes available CSS variables default, reference value need run-time using CSS. Using example @theme earlier, values added CSS regular custom properties: :root { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); --color-avocado-400: oklch(0.92 0.19 114.08); --color-avocado-500: oklch(0.84 0.18 117.33); --color-avocado-600: oklch(0.53 0.12 118.34); --ease-fluid: cubic-bezier(0.3, 0, 0, 1); --ease-snappy: cubic-bezier(0.2, 0, 0, 1); /* ... */} makes easy reuse values inline styles pass libraries like Motion animate them. Dynamic utility values variants simplified way many utilities variants work v4.0 effectively allowing accept certain types arbitrary values, without need configuration dropping arbitrary value syntax. example, Tailwind CSS v4.0 create grids size box: <div class=\"grid grid-cols-15\"> <!-- ... --></div> also target custom boolean data attributes without needing define them: <div data-current class=\"opacity-75 data-current:opacity-100\"> <!-- ... --></div> Even spacing utilities like px-* , mt-* , w-* , h-* , dynamically derived single spacing scale variable accept value box: @layer theme { :root { --spacing: 0.25rem; }}@layer utilities { .mt-8 { margin-top: calc(var(--spacing) * 8); } .w-17 { width: calc(var(--spacing) * 17); } .pr-29 { padding-right: calc(var(--spacing) * 29); }} upgrade tool released alongside v4.0 even simplify utilities automatically notices using arbitrary value that's longer needed. Modernized P3 color palette upgraded entire default color palette rgb oklch , taking advantage wider gamut make colors vivid places previously limited sRGB color space. tried keep balance colors v3, even though refreshed things across board, feel like breaking change upgrading existing projects. Container queries brought container query support core v4.0, need @tailwindcss/container-queries plugin anymore: <div class=\"@container\"> <div class=\"grid grid-cols-1 @sm:grid-cols-3 @lg:grid-cols-4\"> <!-- ... --> </div></div> also added support max-width container queries using new @max-* variant: <div class=\"@container\"> <div class=\"grid grid-cols-3 @max-md:grid-cols-1\"> <!-- ... --> </div></div> Like regular breakpoint variants, also stack @min-* @max-* variants define container query ranges: <div class=\"@container\"> <div class=\"flex @min-md:@max-xl:hidden\"> <!-- ... --> </div></div> Learn all-new container queries documentation. New 3D transform utilities finally added APIs 3D transforms, like rotate-x-* , rotate-y-* , scale-z-* , translate-z-* , tons more. Check updated transform-style , rotate , perspective , perspective-origin documentation get started. Expanded gradient APIs added ton new gradient features v4.0, pull even fancier effects without write custom CSS. Linear gradient angles Linear gradients support angles values, use utilities like bg-linear-45 create gradient 45 degree angle: may notice renamed bg-gradient-* bg-linear-* \u2014 see shortly! Gradient interpolation modifiers added ability control color interpolation mode gradients using modifier, class like bg-linear-to-r/srgb interpolates using sRGB, bg-linear-to-r/oklch interpolates using OKLCH: Using polar color spaces like OKLCH HSL lead much vivid gradients from-* to-* colors far apart color wheel. using OKLAB default v4.0 always interpolate using different color space adding one modifiers. Conic radial gradients added new bg-conic-* bg-radial-* utilities creating conic radial gradients: new utilities work alongside existing from-* , via-* , to-* utilities let create conic radial gradients way create linear gradients, include modifiers setting color interpolation method arbitrary value support controlling details like gradient position. @starting-style support new starting variant adds support new CSS @starting-style feature, making possible transition element properties element first displayed: @starting-style , finally animate elements appear page without need JavaScript all. Browser support probably quite yet teams, getting close! not-* variant added new not-* variant finally adds support CSS :not() pseudo-class: <div class=\"not-hover:opacity-75\"> <!-- ... --></div> .not-hover\\:opacity-75:not(*:hover) { opacity: 75%;}@media (hover: hover) { .not-hover\\:opacity-75 { opacity: 75%; }} double duty also lets negate media queries @supports queries: <div class=\"not-supports-hanging-punctuation:px-4\"> <!-- ... --></div> .not-supports-hanging-punctuation\\:px-4 { @supports (hanging-punctuation: var(--tw)) { padding-inline: calc(var(--spacing) * 4); }} Check new not-* documentation learn more. Even new utilities variants added ton new utilities variants v4.0 too, including: - New inset-shadow-* andinset-ring-* utilities \u2014 making possible stack four layers box shadows single element. - New field-sizing utilities \u2014 auto-resizing textareas without writing single line JavaScript. - New color-scheme utilities \u2014 finally get rid ugly light scrollbars dark mode. - New font-stretch utilities \u2014 carefully tweaking variable fonts support different widths. - New inert variant \u2014 styling non-interactive elements marked theinert attribute. - New nth-* variants \u2014 really clever things eventually regret. - New in-* variant \u2014 lot likegroup-* , without need thegroup class. - Support :popover-open \u2014 using existingopen variant also target open popovers. - New descendant variant \u2014 styling descendant elements, better worse. Check relevant documentation features learn more. that's \u2014 that's Tailwind CSS v4.0. years work get point, extremely proud release can't wait see build it. Check out, play it, maybe even break it, definitely let us know think. bug reports tomorrow please \u2014 let us least enjoy one celebratory team dinner maybe relax hot tub hotel bit believing somehow really ship flawless software."},
{"source": "https://tailwindcss.com/blog/tailwindcss-v4-alpha", "title": "Open-sourcing our progress on Tailwind CSS v4.0 - Tailwind CSS", "text": "Open-sourcing progress Tailwind CSS v4.0 - Date - Adam Wathan Last summer Tailwind Connect shared preview Oxide \u2014 new high-performance engine Tailwind CSS we\u2019ve working on, designed simplify developer experience take advantage web platform evolved recent years. new engine originally going ship v3.x release, even though we\u2019re committed backwards compatibility, feels clearly like new generation framework deserves v4.0. It\u2019s still early we\u2019ve got lot work do, today we\u2019re open-sourcing progress tagging first public v4.0.0-alpha start experimenting help us get stable release later year. I\u2019ll try keep brief save excitement stable release, like play early experimental stuff, plenty information get going. new engine, built speed new engine ground-up rewrite, using everything know framework better model problem space, making things faster lot less code. - 10x faster \u2014 full build Tailwind CSS website 105ms instead 960ms, Catalyst UI kit 55ms instead 341ms. - Smaller footprint \u2014 new engine 35% smaller installed, even heavier native packages ship like parts we\u2019ve rewritten Rust Lightning CSS. - Rust counts \u2014 we\u2019ve migrated expensive parallelizable parts framework Rust, keeping core framework TypeScript extensibility. - One dependency \u2014 thing new engine depends Lightning CSS. - Custom parser \u2014 wrote CSS parser designed data structures tailored needs, making parsing 2x fast us PostCSS. Unified toolchain Tailwind CSS v4 isn\u2019t plugin anymore \u2014 it\u2019s all-in-one tool processing CSS. We\u2019ve integrated Lightning CSS directly framework don\u2019t configure anything CSS pipeline. - Built-in @import handling \u2014 need setup configure tool likepostcss-import . - Built-in vendor prefixing \u2014 don\u2019t add autoprefixer projects anymore. - Built-in nesting support \u2014 plugins needed flatten nested CSS, works box. - Syntax transforms \u2014 modern CSS features like oklch() colors media query ranges transpiled syntax better browser support. We\u2019re still shipping PostCSS plugin, we\u2019re also exploring first-party bundler plugins, we\u2019re shipping official Vite plugin first alpha release try today. Designed modern web We\u2019re looking future Tailwind CSS v4 trying build framework that\u2019s going feel cutting edge years come. - Native cascade layers \u2014 we\u2019re using real @layer rules now, solves ton specificity problems we\u2019ve wrestled past. - Explicitly defined custom properties \u2014 use @property define internal custom properties proper types constraints, making possible things like transition background gradients. - Using color-mix opacity modifiers \u2014 making easier ever use opacity modifier syntax using CSS variables colors, even adjusting opacity ofcurrentColor . - Container queries core \u2014 we\u2019ve added support container queries directly core, new @min-* and@max-* variants support container query ranges. We\u2019re also working refreshing color palette wide gamut colors, introducing support modern CSS features like @starting-style , anchor positioning, more. Composable variants new architecture makes possible compose together variants act selectors, like group-* , peer-* , has-* , new not-* variant we\u2019re introducing v4. earlier releases, variants like group-has-* explicitly defined framework, group-* compose existing has-* variant, compose variants like focus : <div class=\"group\"> <div class=\"group-has-[&:focus]:opacity-100\"> <div class=\"group-has-focus:opacity-100\"> <!-- ... --> </div> </div> There\u2019s limits composability, even write stuff like group-not-has-peer-not-data-active:underline horrible reason that\u2019s need do. Zero-configuration content detection You\u2019ll notice least early alpha releases, it\u2019s even possible configure content paths. projects, you\u2019re never going need ever \u2014 Tailwind finds template files you. using one two ways depending you\u2019ve integrated Tailwind project: - Using PostCSS plugin CLI, Tailwind crawl entire project looking template files, using bunch heuristics we\u2019ve built keep things fast, like crawling directories .gitignore file, ignoring binary file formats. - Using Vite plugin, rely module graph. amazing know exactly files you\u2019re actually using, it\u2019s maximally performant, false positives negatives. We\u2019re hoping expand approach outside Vite ecosystem bundler plugins future. We\u2019ll introduce way configure content paths explicitly future sure, we\u2019re curious see well automatic approach works everyone \u2014 it\u2019s working awesome projects. CSS-first configuration major goal Tailwind CSS v4.0 making framework feel CSS-native, less like JavaScript library. you\u2019ve installed it, add project regular CSS @import statement: @import \"tailwindcss\"; instead setting customizations JavaScript configuration file, use CSS variables: @import \"tailwindcss\"; @theme { --font-family-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-neon-pink: oklch(71.7% 0.25 360); --color-neon-lime: oklch(91.5% 0.258 129); --color-neon-cyan: oklch(91.3% 0.139 195.8); } special @theme directive tells Tailwind make new utilities variants available based variables, letting use classes like 3xl:text-neon-lime markup: <div class=\"max-w-lg 3xl:max-w-xl\"> <h1 class=\"font-display text-4xl\"> Data <span class=\"text-neon-cyan\">enrich</span> online business </h1> </div> Adding new CSS variables behaves like extend earlier versions framework, override whole set variables clearing namespace syntax like --color-*: initial defining custom values: @import \"tailwindcss\"; @theme { --color-*: initial; --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } We\u2019re still fine-tuning naming conventions, explore default theme GitHub see what\u2019s available customize. don\u2019t want explicitly clear default theme would rather start scratch, import \"tailwindcss/preflight\" \"tailwindcss/utilities\" directly skip importing default theme: @import \"tailwindcss\"; @import \"tailwindcss/preflight\" layer(base); @import \"tailwindcss/utilities\" layer(utilities); @theme { --color-*: initial; --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } also make theme values available native CSS variables custom CSS: :root { --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } makes easy reference theme values arbitrary values without needing theme() function: <div class=\"p-[calc(var(--spacing-6)-1px)]\"> <!-- ... --> </div> also makes possible use theme values working UI libraries like Framer Motion, without use resolveConfig() function: import { motion } \"framer-motion\" export const MyComponent = () => ( <motion.div initial={{ y: 'var(--spacing-8)' }} animate={{ y: 0 }} exit={{ y: 'var(--spacing-8)' }} > {children} </motion.div> ) What\u2019s changed don\u2019t take breaking changes lightly, things we\u2019re differently v4 far worth sharing: - Removed deprecated utilities \u2014 we\u2019ve removed utilities stopped documenting long time ago like text-opacity-* ,flex-grow-* , anddecoration-slice favor modern replacements liketext-{color}/* ,grow-* , andbox-decoration-slice . - PostCSS plugin CLI separate packages \u2014 main tailwindcss package doesn\u2019t include anymore since everyone needs them, instead installed separately using@tailwindcss/postcss and@tailwindcss/cli . - default border color \u2014 border utility used default togray-200 , defaults tocurrentColor like browser does. made change make harder accidentally introduce wrong gray project you\u2019re usingzinc orslate something else main gray. - Rings 1px default \u2014 ring utility used 3px blue ring default, it\u2019s 1px ring usingcurrentColor . find using thering-* utilities alternative borders projects, usingoutline-* focus rings, think making things consistent helpful change. handful really low-level implementation detail changes might surface way projects, nothing deliberate like changes. bump anything surprising, let us know. Roadmap v4.0 new engine ground-up rewrite, we\u2019ve focused entirely reimagined developer experience using new configuration approach. put enormous amount value backwards compatibility, that\u2019s bulk work lies tag stable v4.0 release later year. - Support JavaScript configuration files \u2014 reintroducing compatibility classic tailwind.config.js file make migrating v4 easy. - Explicit content path configuration \u2014 making possible tell Tailwind exactly templates automatic content detection isn\u2019t good enough setup. - Support dark modes \u2014 right support dark mode using media queries, still need reimplement selector variant strategies. - Plugins custom utilities \u2014 don\u2019t support plugins, writing custom utilities automatically work variants yet. Obviously make work stable release. - Prefix support \u2014 there\u2019s way configure prefix classes yet, we\u2019ll bring back sure. - Safelists blocklists \u2014 can\u2019t force Tailwind generate certain classes prevent generating classes yet. - Support important configuration \u2014 there\u2019s way make utilities generate with!important right now, plan implement it. - Support theme() function \u2014 isn\u2019t needed new projects usevar() now, we\u2019ll implement backwards compatibility. - Standalone CLI \u2014 haven\u2019t worked standalone CLI new engine yet, absolutely v4.0 release. Aside that, I\u2019m sure we\u2019ll find lot bugs fix, exciting new CSS features sneak in, refine new APIs need polish proper release. don\u2019t want make promises specific release timeline, I\u2019d personally love mark v4.0 stable summer holiday season kicks in. Try alpha We\u2019ve tagged couple alpha releases already, start playing projects today. you\u2019re using Tailwind CSS IntelliSense extension VS Code, make sure switch prerelease version extension page, you\u2019re using Prettier plugin, make sure install latest version. find issue, please let us know GitHub. really want thing bullet-proof tag stable release reporting problems find help us lot. Using Vite Install Tailwind CSS v4 alpha new Vite plugin: $ npm install tailwindcss@next @tailwindcss/vite@next add plugin vite.config.ts file: import tailwindcss '@tailwindcss/vite' import { defineConfig } 'vite' export default defineConfig({ plugins: [tailwindcss()], }) Finally, import Tailwind main CSS file: @import \"tailwindcss\"; Using PostCSS Install Tailwind CSS v4 alpha separate PostCSS plugin package: $ npm install tailwindcss@next @tailwindcss/postcss@next add plugin postcss.config.js file: module.exports = { plugins: { '@tailwindcss/postcss': {} } } Finally, import Tailwind main CSS file: @import \"tailwindcss\"; Using CLI Install Tailwind CSS v4 alpha separate CLI package: $ npm install tailwindcss@next @tailwindcss/cli@next Next, import Tailwind main CSS file: @import \"tailwindcss\"; Finally, compile CSS using CLI tool: $ npx @tailwindcss/cli@next -i app.css -o dist/app.css"},
{"source": "https://tailwindcss.com/blog/tailwindcss-v4-beta", "title": "Tailwind CSS v4.0 Beta 1 - Tailwind CSS", "text": "Tailwind CSS v4.0 Beta 1 - Date - Adam Wathan eight months ago open-sourced progress Tailwind CSS v4.0. Hundreds hours fixing bugs, soul-crushing backward compatibility work, troubleshooting Windows CI failures later, I\u2019m excited finally tag first public beta release. talked published first alpha, Tailwind CSS v4.0 all-new engine built performance, designed modern web. - Built performance \u2014 full builds new engine 5x faster, incremental builds 100x faster \u2014 measured microseconds. - Unified toolchain \u2014 built-in import handling, vendor prefixing, syntax transforms, additional tooling required. - CSS-first configuration \u2014 reimagined developer experience customize extend framework directly CSS instead JavaScript configuration file. - Designed modern web \u2014 built native cascade layers, wide-gamut colors, including first-class support modern CSS features like container queries, @starting-style , popovers, more. There\u2019s much say, everything need get started new beta documentation published today: Get started Tailwind CSS v4.0 Beta 1 \u2192 Start building help us bullet-proof thing stable release early new year."}]