[{"source": "https://tailwindcss.com/blog/tailwindcss-v4-alpha", "title": "Open-sourcing our progress on Tailwind CSS v4.0 - Tailwind CSS", "text": "Open-sourcing progress Tailwind CSS v4.0 - Date - Adam Wathan Last summer Tailwind Connect shared preview Oxide \u2014 new high-performance engine Tailwind CSS we\u2019ve working on, designed simplify developer experience take advantage web platform evolved recent years. new engine originally going ship v3.x release, even though we\u2019re committed backwards compatibility, feels clearly like new generation framework deserves v4.0. It\u2019s still early we\u2019ve got lot work do, today we\u2019re open-sourcing progress tagging first public v4.0.0-alpha start experimenting help us get stable release later year. I\u2019ll try keep brief save excitement stable release, like play early experimental stuff, plenty information get going. new engine, built speed new engine ground-up rewrite, using everything know framework better model problem space, making things faster lot less code. - 10x faster \u2014 full build Tailwind CSS website 105ms instead 960ms, Catalyst UI kit 55ms instead 341ms. - Smaller footprint \u2014 new engine 35% smaller installed, even heavier native packages ship like parts we\u2019ve rewritten Rust Lightning CSS. - Rust counts \u2014 we\u2019ve migrated expensive parallelizable parts framework Rust, keeping core framework TypeScript extensibility. - One dependency \u2014 thing new engine depends Lightning CSS. - Custom parser \u2014 wrote CSS parser designed data structures tailored needs, making parsing 2x fast us PostCSS. Unified toolchain Tailwind CSS v4 isn\u2019t plugin anymore \u2014 it\u2019s all-in-one tool processing CSS. We\u2019ve integrated Lightning CSS directly framework don\u2019t configure anything CSS pipeline. - Built-in @import handling \u2014 need setup configure tool likepostcss-import . - Built-in vendor prefixing \u2014 don\u2019t add autoprefixer projects anymore. - Built-in nesting support \u2014 plugins needed flatten nested CSS, works box. - Syntax transforms \u2014 modern CSS features like oklch() colors media query ranges transpiled syntax better browser support. We\u2019re still shipping PostCSS plugin, we\u2019re also exploring first-party bundler plugins, we\u2019re shipping official Vite plugin first alpha release try today. Designed modern web We\u2019re looking future Tailwind CSS v4 trying build framework that\u2019s going feel cutting edge years come. - Native cascade layers \u2014 we\u2019re using real @layer rules now, solves ton specificity problems we\u2019ve wrestled past. - Explicitly defined custom properties \u2014 use @property define internal custom properties proper types constraints, making possible things like transition background gradients. - Using color-mix opacity modifiers \u2014 making easier ever use opacity modifier syntax using CSS variables colors, even adjusting opacity ofcurrentColor . - Container queries core \u2014 we\u2019ve added support container queries directly core, new @min-* and@max-* variants support container query ranges. We\u2019re also working refreshing color palette wide gamut colors, introducing support modern CSS features like @starting-style , anchor positioning, more. Composable variants new architecture makes possible compose together variants act selectors, like group-* , peer-* , has-* , new not-* variant we\u2019re introducing v4. earlier releases, variants like group-has-* explicitly defined framework, group-* compose existing has-* variant, compose variants like focus : <div class=\"group\"> <div class=\"group-has-[&:focus]:opacity-100\"> <div class=\"group-has-focus:opacity-100\"> <!-- ... --> </div> </div> There\u2019s limits composability, even write stuff like group-not-has-peer-not-data-active:underline horrible reason that\u2019s need do. Zero-configuration content detection You\u2019ll notice least early alpha releases, it\u2019s even possible configure content paths. projects, you\u2019re never going need ever \u2014 Tailwind finds template files you. using one two ways depending you\u2019ve integrated Tailwind project: - Using PostCSS plugin CLI, Tailwind crawl entire project looking template files, using bunch heuristics we\u2019ve built keep things fast, like crawling directories .gitignore file, ignoring binary file formats. - Using Vite plugin, rely module graph. amazing know exactly files you\u2019re actually using, it\u2019s maximally performant, false positives negatives. We\u2019re hoping expand approach outside Vite ecosystem bundler plugins future. We\u2019ll introduce way configure content paths explicitly future sure, we\u2019re curious see well automatic approach works everyone \u2014 it\u2019s working awesome projects. CSS-first configuration major goal Tailwind CSS v4.0 making framework feel CSS-native, less like JavaScript library. you\u2019ve installed it, add project regular CSS @import statement: @import \"tailwindcss\"; instead setting customizations JavaScript configuration file, use CSS variables: @import \"tailwindcss\"; @theme { --font-family-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-neon-pink: oklch(71.7% 0.25 360); --color-neon-lime: oklch(91.5% 0.258 129); --color-neon-cyan: oklch(91.3% 0.139 195.8); } special @theme directive tells Tailwind make new utilities variants available based variables, letting use classes like 3xl:text-neon-lime markup: <div class=\"max-w-lg 3xl:max-w-xl\"> <h1 class=\"font-display text-4xl\"> Data <span class=\"text-neon-cyan\">enrich</span> online business </h1> </div> Adding new CSS variables behaves like extend earlier versions framework, override whole set variables clearing namespace syntax like --color-*: initial defining custom values: @import \"tailwindcss\"; @theme { --color-*: initial; --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } We\u2019re still fine-tuning naming conventions, explore default theme GitHub see what\u2019s available customize. don\u2019t want explicitly clear default theme would rather start scratch, import \"tailwindcss/preflight\" \"tailwindcss/utilities\" directly skip importing default theme: @import \"tailwindcss\"; @import \"tailwindcss/preflight\" layer(base); @import \"tailwindcss/utilities\" layer(utilities); @theme { --color-*: initial; --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } also make theme values available native CSS variables custom CSS: :root { --color-gray-50: #f8fafc; --color-gray-100: #f1f5f9; --color-gray-200: #e2e8f0; /* ... */ --color-green-800: #3f6212; --color-green-900: #365314; --color-green-950: #1a2e05; } makes easy reference theme values arbitrary values without needing theme() function: <div class=\"p-[calc(var(--spacing-6)-1px)]\"> <!-- ... --> </div> also makes possible use theme values working UI libraries like Framer Motion, without use resolveConfig() function: import { motion } \"framer-motion\" export const MyComponent = () => ( <motion.div initial={{ y: 'var(--spacing-8)' }} animate={{ y: 0 }} exit={{ y: 'var(--spacing-8)' }} > {children} </motion.div> ) What\u2019s changed don\u2019t take breaking changes lightly, things we\u2019re differently v4 far worth sharing: - Removed deprecated utilities \u2014 we\u2019ve removed utilities stopped documenting long time ago like text-opacity-* ,flex-grow-* , anddecoration-slice favor modern replacements liketext-{color}/* ,grow-* , andbox-decoration-slice . - PostCSS plugin CLI separate packages \u2014 main tailwindcss package doesn\u2019t include anymore since everyone needs them, instead installed separately using@tailwindcss/postcss and@tailwindcss/cli . - default border color \u2014 border utility used default togray-200 , defaults tocurrentColor like browser does. made change make harder accidentally introduce wrong gray project you\u2019re usingzinc orslate something else main gray. - Rings 1px default \u2014 ring utility used 3px blue ring default, it\u2019s 1px ring usingcurrentColor . find using thering-* utilities alternative borders projects, usingoutline-* focus rings, think making things consistent helpful change. handful really low-level implementation detail changes might surface way projects, nothing deliberate like changes. bump anything surprising, let us know. Roadmap v4.0 new engine ground-up rewrite, we\u2019ve focused entirely reimagined developer experience using new configuration approach. put enormous amount value backwards compatibility, that\u2019s bulk work lies tag stable v4.0 release later year. - Support JavaScript configuration files \u2014 reintroducing compatibility classic tailwind.config.js file make migrating v4 easy. - Explicit content path configuration \u2014 making possible tell Tailwind exactly templates automatic content detection isn\u2019t good enough setup. - Support dark modes \u2014 right support dark mode using media queries, still need reimplement selector variant strategies. - Plugins custom utilities \u2014 don\u2019t support plugins, writing custom utilities automatically work variants yet. Obviously make work stable release. - Prefix support \u2014 there\u2019s way configure prefix classes yet, we\u2019ll bring back sure. - Safelists blocklists \u2014 can\u2019t force Tailwind generate certain classes prevent generating classes yet. - Support important configuration \u2014 there\u2019s way make utilities generate with!important right now, plan implement it. - Support theme() function \u2014 isn\u2019t needed new projects usevar() now, we\u2019ll implement backwards compatibility. - Standalone CLI \u2014 haven\u2019t worked standalone CLI new engine yet, absolutely v4.0 release. Aside that, I\u2019m sure we\u2019ll find lot bugs fix, exciting new CSS features sneak in, refine new APIs need polish proper release. don\u2019t want make promises specific release timeline, I\u2019d personally love mark v4.0 stable summer holiday season kicks in. Try alpha We\u2019ve tagged couple alpha releases already, start playing projects today. you\u2019re using Tailwind CSS IntelliSense extension VS Code, make sure switch prerelease version extension page, you\u2019re using Prettier plugin, make sure install latest version. find issue, please let us know GitHub. really want thing bullet-proof tag stable release reporting problems find help us lot. Using Vite Install Tailwind CSS v4 alpha new Vite plugin: $ npm install tailwindcss@next @tailwindcss/vite@next add plugin vite.config.ts file: import tailwindcss '@tailwindcss/vite' import { defineConfig } 'vite' export default defineConfig({ plugins: [tailwindcss()], }) Finally, import Tailwind main CSS file: @import \"tailwindcss\"; Using PostCSS Install Tailwind CSS v4 alpha separate PostCSS plugin package: $ npm install tailwindcss@next @tailwindcss/postcss@next add plugin postcss.config.js file: module.exports = { plugins: { '@tailwindcss/postcss': {} } } Finally, import Tailwind main CSS file: @import \"tailwindcss\"; Using CLI Install Tailwind CSS v4 alpha separate CLI package: $ npm install tailwindcss@next @tailwindcss/cli@next Next, import Tailwind main CSS file: @import \"tailwindcss\"; Finally, compile CSS using CLI tool: $ npx @tailwindcss/cli@next -i app.css -o dist/app.css"},
{"source": "https://tailwindcss.com/blog/tailwindcss-v4-beta", "title": "Tailwind CSS v4.0 Beta 1 - Tailwind CSS", "text": "Tailwind CSS v4.0 Beta 1 - Date - Adam Wathan eight months ago open-sourced progress Tailwind CSS v4.0. Hundreds hours fixing bugs, soul-crushing backward compatibility work, troubleshooting Windows CI failures later, I\u2019m excited finally tag first public beta release. talked published first alpha, Tailwind CSS v4.0 all-new engine built performance, designed modern web. - Built performance \u2014 full builds new engine 5x faster, incremental builds 100x faster \u2014 measured microseconds. - Unified toolchain \u2014 built-in import handling, vendor prefixing, syntax transforms, additional tooling required. - CSS-first configuration \u2014 reimagined developer experience customize extend framework directly CSS instead JavaScript configuration file. - Designed modern web \u2014 built native cascade layers, wide-gamut colors, including first-class support modern CSS features like container queries, @starting-style , popovers, more. There\u2019s much say, everything need get started new beta documentation published today: Get started Tailwind CSS v4.0 Beta 1 \u2192 Start building help us bullet-proof thing stable release early new year."},
{"source": "https://tailwindcss.com/docs/v4-beta", "title": "Tailwind CSS v4.0 Beta - Tailwind CSS", "text": "Prerelease Documentation Preview what's coming next version Tailwind CSS. long alpha period, we\u2019re pumped finally promote Tailwind CSS v4.0 beta! definitely rough edges things want improve, we\u2019re confident we\u2019re going make breaking changes stable release. documentation work-in-progress we\u2019ll continue improve course beta period, enough get running. run snags, let us know GitHub bullet-proof thing stable release couple months road. you\u2019re using Vite Vite-powered framework like SvelteKit Remix, install Tailwind along new dedicated Vite plugin: $ npm install tailwindcss@next @tailwindcss/vite@next Next, add Vite plugin vite.config.ts file: import { defineConfig } 'vite'; import tailwindcss '@tailwindcss/vite'; export default defineConfig({ plugins: [ tailwindcss() ], }); Finally, import Tailwind main CSS file: @import \"tailwindcss\"; project uses PostCSS you\u2019re using framework like Next.js supports PostCSS plugins, install Tailwind along new dedicated PostCSS plugin: $ npm install tailwindcss@next @tailwindcss/postcss@next Next, add PostCSS plugin postcss.config.mjs file: export default { plugins: { '@tailwindcss/postcss': {}, }, }; Finally, import Tailwind main CSS file: @import \"tailwindcss\"; want use dedicated CLI tool, install Tailwind along new dedicated CLI package: $ npm install tailwindcss@next @tailwindcss/cli@next Next, import Tailwind main CSS file: @import \"tailwindcss\"; compile CSS using CLI tool: $ npx @tailwindcss/cli -i input.css -o output.css also download standalone builds new CLI tool GitHub projects don\u2019t otherwise depend Node.js ecosystem. you\u2019d like try upgrading project v3 v4 beta releases, use upgrade tool vast majority heavy lifting you: $ npx @tailwindcss/upgrade@next projects, upgrade tool automate entire migration process including updating dependencies, migrating configuration file CSS, handling changes template files. upgrade tool requires Node.js 20 higher, ensure environment updated running it. recommend running upgrade tool new branch, carefully reviewing diff testing project browser make sure changes look correct. may need tweak things hand complex projects, tool save ton time either way. It\u2019s also good idea go breaking changes v4.0 get good understanding what\u2019s changed, case things need update project upgrade tool doesn\u2019t catch. Tailwind CSS v4.0 ground-up rewrite framework, taking everything we\u2019ve learned architecture years optimizing fast possible. benchmarking projects, we\u2019ve found full rebuilds 3.5x faster, incremental builds 8x faster. median build times saw benchmarked Tailwind CSS v4.0 Catalyst: | v3.4 | v4.0 Beta | Improvement | | |---|---|---|---| | Full build | 378ms | 100ms | 3.78x | | Incremental rebuild new CSS | 44ms | 5ms | 8.8x | | Incremental rebuild new CSS | 35ms | 192\u00b5s | 182x | impressive improvement incremental builds don\u2019t actually need compile new CSS \u2014 builds 100x faster complete microseconds. longer work project, builds run you\u2019re using classes you\u2019ve already used before, like flex , col-span-2 , font-bold . One biggest changes Tailwind CSS v4.0 shift configuring project JavaScript configuring CSS. Instead tailwind.config.js file, configure customizations directly CSS file import Tailwind, giving one less file worry project: @import \"tailwindcss\"; @theme { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); --color-avocado-400: oklch(0.92 0.19 114.08); --color-avocado-500: oklch(0.84 0.18 117.33); --color-avocado-600: oklch(0.53 0.12 118.34); --ease-fluid: cubic-bezier(0.3, 0, 0, 1); --ease-snappy: cubic-bezier(0.2, 0, 0, 1); /* ... */ } new CSS-first configuration lets everything could tailwind.config.js file, including configuring design tokens, setting content sources, defining custom utilities variants, installing plugins, more. learn works, read CSS configuration in-depth documentation. Tailwind CSS v4.0 takes design tokens makes available CSS variables default, reference value need run-time using CSS. Using example @theme earlier, values added CSS regular custom properties: :root { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); --color-avocado-400: oklch(0.92 0.19 114.08); --color-avocado-500: oklch(0.84 0.18 117.33); --color-avocado-600: oklch(0.53 0.12 118.34); --ease-fluid: cubic-bezier(0.3, 0, 0, 1); --ease-snappy: cubic-bezier(0.2, 0, 0, 1); /* ... */ } makes easy reuse values inline styles pass libraries like Motion animate them. We\u2019re using real CSS cascade layers v4.0, make easier ever control precedence styles interact other. Here\u2019s output looks like build CSS v4.0: We\u2019ve layers concept Tailwind years, native cascade layers things couldn\u2019t easily replicate build-time, like isolating styles within layer even higher specificity styles another layer. Less code us maintain too! know always configure annoying content array Tailwind CSS v3? v4.0, came bunch heuristics detecting stuff automatically don\u2019t configure all. example, automatically ignore anything .gitignore file avoid scanning dependencies generated files aren\u2019t version control: # dependencies /node_modules # testing /coverage # caches /.next/ # production /build also automatically ignore binary extensions like images, videos, .zip files, more. ever need explicitly add source that\u2019s excluded default, always add @source directive, right CSS file: @import \"tailwindcss\"; @source \"../node_modules/@my-company/ui-lib\"; @source directive uses heuristics hood, exclude binary file types example well, without specify extensions scan explicitly. v4.0, wanted inline CSS files using @import you\u2019d configure another plugin like postcss-import handle you. handle box, don\u2019t need tools: export default { plugins: { 'postcss-import': {}, '@tailwindcss/postcss': {}, }, }; import system purpose-built Tailwind CSS, we\u2019ve also able make even faster tightly integrating engine. building production, Tailwind CSS v4.0 runs CSS Lightning CSS automatically, handles things like vendor prefixes, modern feature transpilation, minification, more. means remove tools like autoprefixer postcss-preset-env project well: export default { plugins: { '@tailwindcss/postcss': {}, 'postcss-preset-env': {}, 'autoprefixer': {}, }, }; v4.0, Tailwind CSS thing need set handle entire CSS pipeline \u2014 tooling required. v4.0, we\u2019ve really slimmed amount theme configuration need do, especially things aren\u2019t really design tokens. Utilities like grid-cols-12 , z-40 , opacity-70 longer based theme \u2014 work. Whether need 5 column grid 73 column grid, don\u2019t need configure anything make happen. <div class=\"grid grid-cols-73\"> <div>1</div> <!-- ... --> <div>73</div> </div> We\u2019ve applied simplifications variants like data-* well \u2014 don\u2019t need configure anymore use arbitrary values simple boolean attributes: <div class=\"opacity-50 data-[selected]:opacity-100\" data-selected> <div class=\"opacity-50 data-selected:opacity-100\" data-selected> <!-- ... --> </div> changes mean touch theme configuration way less frequently, stays focused design tokens matter, like typography, color palette, breakpoints. We\u2019ve simplified way spacing utilities like px-* , mt-* , w-* , h-* , work deriving single spacing scale value, defined 0.25rem default theme: @theme { --spacing: 0.25rem; } define spacing scale way, every multiple 0.25rem available spacing scale. means utilities like mt-21 work extra configuration, unlike v3 choose mt-20 mt-24 drop using arbitrary value. want constraints, always disable --spacing variable provide explicit scale: @theme { --spacing: initial --spacing-1: 0.25rem --spacing-2: 0.5rem --spacing-4: 1rem --spacing-8: 2rem --spacing-12: 3rem } We\u2019ve upgraded entire default color palette rgb oklch , taking advantage wider gamut make colors vivid places previously limited sRGB color space. We\u2019ve tried keep balance colors v3, even though we\u2019ve refreshed things across board, shouldn\u2019t feel like breaking change upgrading existing projects. using CSS variables color palette v3, might remember weird things like define colors list numbers without including rgb(\u2026) function, use <alpha-value> placeholder opacity modifiers would work. Thanks new CSS color-mix(\u2026) function, none necessary v4.0 \u2014 define colors variables opacity modifier features work automatically: @import \"tailwindcss\"; @theme { --color-primary: var(--color-blue-500); --color-error: var(--color-red-500); /* ... */ } go use utility like bg-primary/50 , works \u2014 cryptic workarounds necessary: <div class=\"bg-primary/50\"> <!-- ... --> </div> We\u2019ve brought container query support core v4.0, don\u2019t need @tailwindcss/container-queries plugin anymore: <div class=\"@container\"> <div class=\"grid grid-cols-1 @sm:grid-cols-3 @lg:grid-cols-4\"> <!-- ... --> </div> </div> We\u2019ve also added support max-width container queries using new @max-* variant: <div class=\"@container\"> <div class=\"grid grid-cols-3 @max-md:grid-cols-1\"> <!-- ... --> </div> </div> Like regular breakpoint variants, also stack @min-* @max-* variants define container query ranges: <div class=\"@container\"> <div class=\"flex @min-md:@max-xl:hidden\"> <!-- ... --> </div> </div> Browser support container queries really great now, I\u2019m excited make even easier start using projects v4.0. We\u2019ve finally added APIs 3D transforms, like rotate-x-* , rotate-y-* , scale-z-* , translate-z-* , tons more. <div class=\"perspective-distant\"> <article class=\"... transform-3d rotate-x-51 rotate-z-43 shadow-xl transition-all duration-500 hover:-translate-y-4 hover:rotate-x-49 hover:rotate-z-38 hover:shadow-2xl\"> <!-- ... --> </article> </div> Use transform-3d utility enable 3D transforms setting right transform-style Use rotate-x-* , rotate-y-* , rotate-z-* utilities rotate elements 3D space. utilities support numeric value automatically box, examples reference: Use new scale-z-* utilities scale elements z-axis. use numeric value want automatically box, examples reference: Use new translate-z-* utilities move elements closer away: utility uses spacing scale default supports values box, examples reference: Use utilities like perspective-near , perspective-normal , perspective-distant along new perspective-origin-* utilities control perspective used 3D transforms: perspective-* utilities customized using --perspective-* namespace theme. Use new backface-visible backface-hidden utilities control whether back element visible transformed 3D space. Linear gradients support angles values, use utilities like bg-linear-45 create gradient 45 degree angle: <div class=\"bg-linear-45 from-indigo-500 via-purple-500 to-pink-500\"></div> may notice we\u2019ve renamed bg-gradient-* bg-linear-* \u2014 you\u2019ll see shortly! We\u2019ve added ability control color interpolation mode gradients using modifier, class like bg-linear-to-r/srgb interpolates using sRGB, bg-linear-to-r/oklch interpolates using OKLCH: <div class=\"bg-linear-to-r/srgb from-indigo-500 to-teal-400\"></div> <div class=\"bg-linear-to-r/oklch from-indigo-500 to-teal-400\"></div> Using polar color spaces like OKLCH HSL lead much vivid gradients from-* to-* colors far apart color wheel. We\u2019re using OKLAB default v4.0 always interpolate using different color space adding one modifiers. We\u2019ve added new bg-conic-* bg-radial-* utilities creating conic radial gradients: <div class=\"bg-conic/[in_hsl_longer_hue] from-red-600 to-red-600 size-24 rounded-full\"></div> <div class=\"bg-radial-[at_25%_25%] from-white to-zinc-900 to-75% size-24 rounded-full\"></div> new utilities work alongside existing from-* , via-* , to-* utilities let create conic radial gradients way create linear gradients, include modifiers setting color interpolation method arbitrary value support controlling details like gradient position. We\u2019ve added dedicated inset-shadow-* inset-ring-* utilities v4.0 composed existing shadow-* ring-* utilities, giving four layers shadows stack create effects need projects. Send Send <button class=\"shadow-md inset-shadow-sm inset-shadow-white/20 ring ring-blue-600 inset-ring inset-ring-white/15 ...\"> <!-- ... --> </button> inset-ring-* utilities support width value like ring-* utilities, inset-shadow-* utilities ship 2xs , xs , sm sizes box. may add road ones feel useful right now. @theme { --inset-shadow-2xs: inset 0 1px rgb(0 0 0 / 0.05); --inset-shadow-xs: inset 0 1px 1px rgb(0 0 0 / 0.05); --inset-shadow-sm: inset 0 2px 4px rgb(0 0 0 / 0.05); } like regular shadow-* ring-* utilities, support colors well using classes like inset-shadow-black/25 inset-ring-white/50 . We\u2019ve added utilities new field-sizing property lets create auto-resizing textareas CSS: Type textarea see effect <label class=\"block\"> <span class=\"block text-sm/6 font-medium text-gray-900 dark:text-white\">Add comment</span> <textarea class=\"field-sizing-content ...\"></textarea> </label> Use field-sizing-content make control resize fit contents, field-sizing-fixed give control fixed size. Ever annoyed app showing light scrollbars dark mode? want new color-scheme utilities. Scroll content see scrollbar themes Light mode Right six-hundred Titleists got driving range trunk car. drive Rock-a-Way\u2026 hit `em ocean! picture this. find nice sweet spot dunes, take drivers, tee and, ball goes sailing sky holds moment then.. gulp! Dark mode Right six-hundred Titleists got driving range trunk car. drive Rock-a-Way\u2026 hit `em ocean! picture this. find nice sweet spot dunes, take drivers, tee and, ball goes sailing sky holds moment then.. gulp! <div class=\"grid grid-cols-2\"> <div class=\"bg-white overflow-y-scroll scheme-light\"> ... </div> <div class=\"bg-slate-800 overflow-y-scroll scheme-dark\"> ... </div> </div> Here\u2019s full list new APIs: Throw scheme-light dark:scheme-dark html body element scrollbars always look good, matter dark mode strategy use. We\u2019ve added utilities new-ish font-stretch property, helps style variable fonts support different widths: quick brown fox jumps lazy dog. quick brown fox jumps lazy dog. quick brown fox jumps lazy dog. Looks like name changing font-width point browsers actually support yet, looking forward dealing that. new v4.0 engine, certain variants chained variants, letting use simple named APIs things needed complex arbitrary variants v3: <div class=\"group\"> <div class=\"group-has-[&[data-potato]]:opacity-100\"> <div class=\"group-has-data-potato:opacity-100\"> <!-- ... --> </div> <div data-potato> <!-- ... --> </div> </div> works variant makes sense, including group-* , peer-* , has-* , new not-* in-* variants. chain many want, even totally useless classes like group-not-has-peer-not-data-active:underline generate real CSS. new starting variant adds support new CSS @starting-style feature, making possible transition element properties element first displayed: Click button see popover animate <div> <button popovertarget=\"my-popover\">Check updates</button> <div popover id=\"my-popover\" class=\"opacity-0 transition-all duration-500 transition-discrete open:opacity-100 starting:open:opacity-0\"> <!-- ... --> </div> </div> new not-* variant adds support :not(\u2026) pseudo-class, letting style things certain conditions true. example, adding hover styles button button focused: <button class=\"bg-indigo-600 hover:not-focus:bg-indigo-700\"> <!-- ... --> </button> also combine not-* variant media query variants like forced-colors style element forced colors mode active: <input type=\"radio\" class=\"not-forced-colors:appearance-none\" /> works supports-* variants too, style element based lack browser support specific CSS feature: <div class=\"not-supports-[display:grid]:flex\"> <!-- ... --> </div> new inert variant lets style elements marked inert attribute: <main inert class=\"inert:opacity-50 inert:blur\"> <!-- ... --> </main> useful adding visual cues make clear element isn\u2019t interactive. We\u2019ve added four new variants :nth-child(\u2026) , :nth-last-child(\u2026) , :nth-of-type(\u2026) , :nth-last-of-type(\u2026) pseudo-classes: <div class=\"nth-3:underline\">\u2026</div> <div class=\"nth-last-5:underline\">\u2026</div> <div class=\"nth-of-type-4:underline\">\u2026</div> <div class=\"nth-last-of-type-6:underline\">\u2026</div> pass number want default, use arbitrary values complex expressions like nth-[2n+1_of_li] . know group-* variants like group-focus ? new in-* variant like except don\u2019t need add group parent element: <div tabindex=\"0\" class=\"group\"> <div class=\"opacity-50 group-focus:opacity-100\"> <div tabindex=\"0\"> <div class=\"opacity-50 in-focus:opacity-100\"> <!-- ... --> </div> </div> You\u2019ll still want group-* stuff lot time need fine control, save characters rest time. We\u2019ve updated existing open variant target :popover-open pseudo-class well [open] attribute: <div> <button popovertarget=\"my-popover\">Open Popover</button> <div popover id=\"my-popover\" class=\"opacity-0 open:opacity-100 ...\"> <!-- ... --> </div> </div> I\u2019m sure I\u2019m eventually going regret making separate popover-open variant thought really hard couldn\u2019t think situations element would use [open] :popover-open different styles condition. Someone going update spec screw one road though sure. know * variant shipped ago targeting direct children? <ul class=\"*:p-4\"> <li>One</li> <li>Two</li> <li>Three</li> </ul> v4.0 we\u2019ve added new ** variant targeting descendants \u2014 useful opinion combine another variant narrowing thing you\u2019re selecting: <div class=\"**:data-avatar:rounded-full\"> <div> <img src=\"\u2026\" data-avatar /> <!-- element round --> </div> <p>\u2026</p> </div> Fun fact \u2014 syntax inspired globs, better worse. customize theme Tailwind CSS v4.0, use new @theme directive directly CSS: @import \"tailwindcss\"; @theme { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); --color-avocado-400: oklch(0.92 0.19 114.08); --color-avocado-500: oklch(0.84 0.18 117.33); --color-avocado-600: oklch(0.53 0.12 118.34); --ease-fluid: cubic-bezier(0.3, 0, 0, 1); --ease-snappy: cubic-bezier(0.2, 0, 0, 1); /* ... */ } CSS variable define tells Tailwind make new utilities variants available based values, letting use classes like font-display , 3xl:max-w-xl , text-avocado-400 , hover:ease-fluid markup: <div class=\"max-w-lg 3xl:max-w-xl\"> <h1 class=\"font-display text-4xl\"> Data <span class=\"text-avocado-400\">enrich</span> online business </h1> </div> set variables part namespace links corresponding utilities, example font size utilities reference --font-* namespace, color utilities reference --color-* namespace, transition-timing-function utilities reference --ease-* namespace. full list, see theme namespace reference. default, adding new CSS variables behaves like extend Tailwind CSS v3: @import \"tailwindcss\"; @theme { /* values added addition defaults */ --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; } override entire namespace, unset namespace using syntax like --font-*: initial : @import \"tailwindcss\"; @theme { --font-*: initial; --font-display: \"Satoshi\", \"sans-serif\"; } default font-sans , font-serif , font-mono utilities won\u2019t exist project font-display available font family utility. also unset entire default theme using --*: initial want start completely scratch: @import \"tailwindcss\"; @theme { --*: initial; } remove default design tokens, including default fonts, typography scale, color palette, more. set default line height, font weight, letter spacing custom font size, add supporting variable using double-dashes like --text-big--line-height : @theme { --text-big: 16rem; --text-big--line-height: 18rem; --text-big--font-weight: 550; --text-big--letter-spacing: -0.025em; } default, Tailwind CSS v4.0 preserves custom @keyframes rules add CSS, even don\u2019t use corresponding animation utilities project. make sure unused @keyframes rules removed, configure @theme instead root CSS: @theme { --animate-marquee: marquee 3s linear infinite; @keyframes marquee { { transform: translateY(-50%); } } } Since we\u2019ve dramatically simplified theme configuration Tailwind CSS v4.0, you\u2019ll generally work namespaces: | Namespace | Utilities | |---|---| --color-* | Color utilities like bg-white , text-black , fill-blue-500 | --font-* | Font family utilities like font-sans | --text-* | Font size utilities like text-sm | --font-weight-* | Font weight utilities like font-bold | --tracking-* | Letter spacing utilities like tracking-tight | --leading-* | Line height utilities like leading-relaxed | --spacing-* | Spacing sizing utilities like pt-5 , mr-2 , h-8 | --breakpoint-* | Breakpoint variants like md:* lg:* | --container-* | Container query variants like @md:* width utilities like w-sm max-w-lg | --radius-* | Border radius utilities like rounded-md | --shadow-* | Box shadow utilities like shadow-lg | --inset-shadow-* | Inset box shadow utilities like inset-shadow-sm | --drop-shadow-* | Drop shadow utilities like drop-shadow-xl | --ease-* | Transition timing function utilities like ease-out | --animate-* | Animation utilities like animate-spin | need fine-grained control, utilities also configured namespace matches CSS property name. example custom background-image utilities like bg-grid-pattern configured using --background-image-grid-pattern: url(\u2026) . default, dark variant Tailwind CSS v4.0 uses prefers-color-scheme media query. want use selector-based strategy project dark mode, override dark variant selector want use: @import \"tailwindcss\"; @variant dark (&:where(.dark, .dark *)); automatic source detection Tailwind CSS v4.0 broad including files don\u2019t want include (maybe you\u2019re working large monorepo example), use source(\u2026) function importing Tailwind specify base path automatic source detection: @import \"tailwindcss\" source(\"../src\"); path relative CSS file it\u2019s used. need add additional content sources aren\u2019t picked default (like something .gitignore file), add using @source : @import \"tailwindcss\"; @source \"../node_modules/@my-company/ui-lib/src/components\"; situations like this, also helpful export CSS file library move @source directive instead import CSS file: @source \"./src/components\"; @import \"tailwindcss\"; @import \"@my-company/ui-lib\"; @source directive also useful you\u2019re using Vite plugin need include content sources aren\u2019t naturally part module graph, like PHP templates Laravel project: @import \"tailwindcss\"; @source \"../../resources/views\"; @source \"../../app\"; need disable automatic source detection reason, use source(none) importing Tailwind: @import \"tailwindcss\" source(none); source detection disabled, use @source configure content sources explicitly. need disable Tailwind\u2019s base styles, import pieces Tailwind need separately: @layer theme, base, components, utilities; @import \"tailwindcss/theme\" layer(theme); @import \"tailwindcss/utilities\" layer(utilities); prefix utilities theme variables avoid conflicts existing CSS, use prefix(\u2026) function importing Tailwind: @import \"tailwindcss\" prefix(tw); Prefixes work little differently v3 \u2014 look like variants always beginning class name: <div class=\"tw:flex tw:bg-red-500 tw:hover:bg-red-600\"> <!-- ... --> </div> using prefix, still configure theme variables aren\u2019t using prefix: @import \"tailwindcss\" prefix(tw); @theme { --font-display: \"Satoshi\", \"sans-serif\"; --breakpoint-3xl: 1920px; --color-avocado-100: oklch(0.99 0 0); --color-avocado-200: oklch(0.98 0.04 113.22); --color-avocado-300: oklch(0.94 0.11 115.03); /* ... */ } generated CSS variables include prefix though avoid conflicts existing variables project: :root { --tw-font-display: \"Satoshi\", \"sans-serif\"; --tw-breakpoint-3xl: 1920px; --tw-color-avocado-100: oklch(0.99 0 0); --tw-color-avocado-200: oklch(0.98 0.04 113.22); --tw-color-avocado-300: oklch(0.94 0.11 115.03); /* ... */ } add custom utility v4.0, use new @utility directive: @import \"tailwindcss\"; @utility tab-4 { tab-size: 4; } Custom utilities automatically inserted utilities layer along built-in utilities framework. add custom variant v4.0, use new @variant directive: @import \"tailwindcss\"; @variant pointer-coarse (@media (pointer: coarse)); @variant theme-midnight (&:where([data-theme=\"midnight\"] *)); lets write utilities like pointer-coarse:size-48 theme-midnight:bg-slate-900 . load plugin v4.0, use new @plugin directive: @import \"tailwindcss\"; @plugin \"@tailwindcss/typography\"; @plugin directive takes either package name local path. use existing JS configuration file v4.0, load @config directive: @import \"tailwindcss\"; @config \"../../tailwind.config.js\"; Note every feature JS config supported v4.0. Options like corePlugins , important , separator likely supported stable v4.0 release, options like safelist may return differences behavior. want use @apply <style> block Vue Svelte component, need import theme configuration make values available context. without duplicating CSS variables CSS output, use theme(reference) importing theme: <template> <h1>Hello world!</h1> </template> <style> @import \"../../my-theme.css\" theme(reference); h1 { @apply font-bold text-2xl text-red-500; } </style> you\u2019re using default theme, import \"tailwindcss/theme\" directly: <template> <h1>Hello world!</h1> </template> <style> @import \"tailwindcss/theme\" theme(reference); h1 { @apply font-bold text-2xl text-red-500; } </style> Tailwind CSS v4.0 new major version framework, strive preserve backward compatibility much possible, several breaking changes we\u2019ve make make improvements wanted new release. make upgrade painless possible, we\u2019ve built really awesome migration tool automate basically changes you. upgrade project automatically, run upgrade tool project root command-line: $ npx @tailwindcss/upgrade@next it\u2019s done, review changes test project make sure everything working expected, luck you\u2019ll races. here\u2019s list changes detail case run issues using migration tool. Tailwind CSS v3, tailwindcss package PostCSS plugin, v4.0 PostCSS plugin lives dedicated @tailwindcss/postcss package. Tailwind CSS v4.0 also handles CSS imports vendor prefixing you, remove postcss-import autoprefixer project: export default { plugins: { 'postcss-import': {}, 'tailwindcss': {}, 'autoprefixer': {}, '@tailwindcss/postcss': {}, }, }; you\u2019re using Vite, recommend migrating PostCSS plugin new dedicated Vite plugin: import { defineConfig } 'vite'; import tailwindcss '@tailwindcss/vite'; export default defineConfig({ plugins: [ tailwindcss() ], }); v4.0, Tailwind CLI lives dedicated @tailwindcss/cli package. Update build commands use new package instead: npx tailwindcss -i input.css -o output.css npx @tailwindcss/cli -i input.css -o output.css Tailwind CSS v4.0, import Tailwind using regular CSS @import statement, using @tailwind directives used v3: @tailwind base; @tailwind components; @tailwind utilities; @import \"tailwindcss\"; We\u2019ve removed utilities deprecated v3 undocumented several years. Here\u2019s list what\u2019s removed along modern alternative: | Deprecated | Replacement | |---|---| bg-opacity-* | Use opacity modifiers like bg-black/50 | text-opacity-* | Use opacity modifiers like text-black/50 | border-opacity-* | Use opacity modifiers like border-black/50 | divide-opacity-* | Use opacity modifiers like divide-black/50 | ring-opacity-* | Use opacity modifiers like ring-black/50 | placeholder-opacity-* | Use opacity modifiers like placeholder-black/50 | flex-shrink-* | shrink-* | flex-grow-* | grow-* | overflow-ellipsis | text-ellipsis | decoration-slice | box-decoration-slice | decoration-clone | box-decoration-clone | v3, container utility several configuration options like center padding longer exist v4.0. customize container utility v4.0, extend @utility : @import \"tailwindcss\"; @utility container { margin-inline: auto; padding-inline: 2rem; } We\u2019ve shifted things around bit default shadow scales make sure every shadow utility named value. this, we\u2019ve renamed shadow shadow-sm , shadow-sm shadow-xs , drop-shadow drop-shadow-sm , drop-shadow-sm drop-shadow-xs : | v3 | v4 | |---|---| shadow-sm | shadow-xs | shadow | shadow-sm | drop-shadow-sm | drop-shadow-xs | drop-shadow | drop-shadow-sm | shadow drop-shadow utilities still work backward compatibility, shadow-sm drop-shadow-sm look different project don\u2019t replace instance shadow-xs drop-shadow-xs instead. We\u2019ve shifted things around bit default blur scale make sure every blur utility named value. this, we\u2019ve renamed blur blur-sm , blur-sm blur-xs : | v3 | v4 | |---|---| blur-sm | blur-xs | blur | blur-sm | blur utility still work backward compatibility, blur-sm look different project don\u2019t replace instance blur-xs instead. We\u2019ve shifted things around bit default border radius scale make sure every border radius utility named value. this, we\u2019ve renamed rounded rounded-sm , rounded-sm rounded-xs : | v3 | v4 | |---|---| rounded-sm | rounded-xs | rounded | rounded-sm | rounded utility still work backward compatibility, rounded-sm look different project don\u2019t replace instance rounded-xs instead. v3, borders used configured gray-200 color default. We\u2019ve updated v4 currentColor , matches default behavior browsers. update project change, make sure anywhere you\u2019re using border color utility anywhere you\u2019re using border utility, add lines CSS project preserve v3 behavior: @import \"tailwindcss\"; @layer base { *, ::after, ::before, ::backdrop, ::file-selector-button { border-color: var(--color-gray-200, currentColor); } } v3, ring utility added 3px ring. We\u2019ve changed v4 1px make consistent borders outlines. update project change, replace usage ring ring-3 : <div class=\"ring ring-blue-500\"> <div class=\"ring-3 ring-blue-500\"> <!-- ... --> </div> v3, placeholder text used configured gray-400 color default. We\u2019ve simplified v4 use current text color 50% opacity. probably won\u2019t even notice change (it might even make project look better), want preserve v3 behavior, add CSS project: @import \"tailwindcss\"; @layer base { input::placeholder, textarea::placeholder { color: theme(--color-gray-400); } } v3, outline-none utility actually complex class didn\u2019t set outline-style: none : /* v3 */ .outline-none { outline: 2px solid transparent; outline-offset: 2px; } really add invisible 2px outline would still show forced colors mode accessibility reasons. We\u2019ve simplified v4.0 outline-none sets outline-style: none like you\u2019d expect: /* v4 */ .outline-none { outline-style: none; } We\u2019ve added new outline-hidden utility outline-none v3, since it\u2019s still useful feature. update project change, replace use outline-none outline-hidden , unless really want outline-style: none : <input class=\"focus:outline-none\"> <input class=\"focus:outline-hidden\"> v3, custom classes defined within @layer utilities would get picked Tailwind true utility class would automatically work variants like hover , focus , lg . v4.0 using native cascade layers longer hijacking @layer at-rule, we\u2019ve introduced @utility API replacement: @layer utilities { .tab-4 { tab-size: 4; } } @utility tab-4 { tab-size: 4; } Custom utilities must single class name v4.0 complex selector. custom utility complex single class name, use nesting define utility: @utility scrollbar-hidden { &::-webkit-scrollbar { display: none; } } v3, stacked variants applied right left, v4 we\u2019ve updated apply left right look like CSS syntax. update project change, reverse order order-sensitive stacked variants project: <ul class=\"py-4 first:*:pt-0 last:*:pb-0\"> <ul class=\"py-4 *:first:pt-0 *:last:pb-0\"> <li>One</li> <li>Two</li> <li>Three</li> </ul> likely \u2014 direct child variant (* ) typography plugin variants (prose-headings ) likely ones might using, even it\u2019s you\u2019ve stacked variants. v3 able use CSS variables arbitrary values without var(\u2026) , recent updates CSS mean often ambiguous, we\u2019ve changed syntax v4.0 use parentheses instead square brackets. update project change, replace usage old variable shorthand syntax new variable shorthand syntax: <div class=\"bg-[--brand-color]\"> <div class=\"bg-(--brand-color)\"> <!-- ... --> </div> v3 exported resolveConfig function could use turn JS config flat object could use JavaScript. We\u2019ve removed v4 hopes people use CSS variables generate directly instead, much simpler significantly reduce bundle size. v4.0 we\u2019ve updated hover variant apply primary input device supports hover: @media (hover: hover) { .hover\\:underline:hover { text-decoration: underline; } } create problems you\u2019ve built site way depends touch devices triggering hover tap. issue you, override hover variant variant uses old implementation: @import \"tailwindcss\"; @variant hover (&:hover); Generally though I\u2019d recommend treating hover functionality enhancement, depending site work since touch devices don\u2019t truly ability hover. v3 corePlugins option could use completely disable certain utilities framework. longer supported v4.0, we\u2019re planning explore different ideas solving type problems feature often used solve later beta releases. Since Tailwind CSS v4.0 includes CSS variables theme values, recommend using variables instead theme() function whenever possible: @import \"tailwindcss\"; .my-class { background-color: theme(colors.red.500); background-color: var(--color-red-500); } cases still need use theme() function (like media queries CSS variables aren\u2019t supported), use CSS variable name instead old dot notation: @import \"tailwindcss\"; @media (width >= theme(screens.xl)) { @media (width >= theme(--breakpoint-xl)) { /* ... */ } JavaScript config files still supported backward compatibility, longer detected automatically v4.0. still need use JavaScript config file, make sure load explicitly using @config : @import \"tailwindcss\"; @config \"../../tailwind.config.js\";"}]