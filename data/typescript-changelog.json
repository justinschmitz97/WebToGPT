[{"summary": "TypeScript 5.6 introduces several new features and improvements, including stricter checks for truthy and nullish expressions, enhanced iterator support, and new compiler options for better build management. These updates aim to catch more bugs, improve performance, and provide more flexibility in TypeScript projects.", "changes": [{"type": "Feature", "title": "Disallowed Nullish and Truthy Checks", "description": "TypeScript 5.6 now errors when it can syntactically determine a truthy or nullish check will always evaluate in a specific way. This helps catch bugs where expressions are always truthy or nullish, such as regex without .test() or incorrect operator usage."}, {"type": "Feature", "title": "Iterator Helper Methods", "description": "TypeScript now supports new iterator methods like map and take on IterableIterators, aligning with recent ECMAScript proposals. This allows for more functional programming patterns directly on iterators."}, {"type": "Feature", "title": "Strict Builtin Iterator Checks", "description": "Introduces BuiltinIteratorReturn and --strictBuiltinIteratorReturn to improve type safety for iterators, ensuring that the value property is correctly typed and preventing common errors."}, {"type": "Feature", "title": "Support for Arbitrary Module Identifiers", "description": "TypeScript 5.6 allows the use of arbitrary module identifiers, enabling interoperability with other languages and tools that may use non-standard identifier names."}, {"type": "Feature", "title": "The --noUncheckedSideEffectImports Option", "description": "A new compiler option that errors on unresolved side effect imports, helping catch typos and ensuring all imports are intentional and valid."}, {"type": "Feature", "title": "The --noCheck Option", "description": "Introduces --noCheck to skip type checking for faster builds, useful for separating JavaScript generation from type-checking or running tasks in parallel."}, {"type": "Feature", "title": "Allow --build with Intermediate Errors", "description": "TypeScript's --build mode now continues building projects even if there are errors in dependencies, facilitating upgrades and iterative development."}, {"type": "Performance", "title": "Region-Prioritized Diagnostics in Editors", "description": "Improves editor responsiveness by providing diagnostics for the currently visible region of a file first, reducing wait times for error feedback in large files."}, {"type": "Feature", "title": "Granular Commit Characters", "description": "TypeScript now provides commit characters for each completion item, allowing editors to auto-complete more intelligently based on the next character typed."}, {"type": "Feature", "title": "Exclude Patterns for Auto-Imports", "description": "Allows specifying regex patterns to exclude certain auto-import suggestions, providing more control over import behavior in TypeScript projects."}, {"type": "Fix", "title": "Correct override Checks on Computed Properties", "description": "Fixes issues where computed properties with override were not correctly checked against base class members, ensuring proper use of the override modifier."}], "source": "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-6.html"},
{"summary": "TypeScript 5.7 introduces several key updates, including enhanced checks for never-initialized variables, path rewriting for relative imports, support for ECMAScript 2024 features, improved project ownership checks in editors, and performance enhancements through V8 compile caching. These changes aim to improve code reliability, compatibility with modern JavaScript environments, and development efficiency.", "changes": [{"type": "Feature", "title": "Checks for Never-Initialized Variables", "description": "TypeScript 5.7 improves its type system to report errors when variables have never been initialized at all, even when accessed in separate functions. This enhancement helps catch potential runtime errors earlier in the development process."}, {"type": "Feature", "title": "Path Rewriting for Relative Paths", "description": "A new compiler option --rewriteRelativeImportExtensions allows TypeScript to rewrite import paths from TypeScript extensions (.ts, .tsx, etc.) to JavaScript extensions (.js, .jsx, etc.) for relative paths. This supports scenarios where TypeScript code is run in-place and later compiled to JavaScript."}, {"type": "Feature", "title": "Support for --target es2024 and --lib es2024", "description": "TypeScript 5.7 adds support for targeting ECMAScript 2024 with --target es2024 and --lib es2024, introducing features like SharedArrayBuffer, Object.groupBy, and Promise.withResolvers. TypedArrays are now generic over ArrayBufferLike to accommodate changes in ECMAScript 2024."}, {"type": "Performance", "title": "Faster Project Ownership Checks in Editors", "description": "TypeScript 5.7 optimizes project ownership checks in editors for composite projects by only checking if a file belongs to the root set of files, avoiding loading entire projects unnecessarily. This reduces delays when opening stray script files in large codebases."}, {"type": "Performance", "title": "Support for V8 Compile Caching in Node.js", "description": "TypeScript 5.7 leverages Node.js 22's module.enableCompileCache() API to reuse parsing and compilation work, resulting in a 2.5x speed-up in running tsc --version. This enhancement improves the efficiency of TypeScript operations in Node.js environments."}, {"type": "Breaking Change", "title": "Validated JSON Imports in --module nodenext", "description": "When importing JSON files under --module nodenext, TypeScript now requires a 'type: \"json\"' import attribute to prevent runtime errors. JSON imports will not generate named exports, and contents are accessible only via a default export."}, {"type": "Breaking Change", "title": "TypedArrays Are Now Generic Over ArrayBufferLike", "description": "TypedArrays in TypeScript 5.7 are now generic over ArrayBufferLike to align with ECMAScript 2024 changes. This may require updates to @types/node if encountering type assignment errors involving TypedArrays."}, {"type": "Other", "title": "Creating Index Signatures from Non-Literal Method Names in Classes", "description": "TypeScript 5.7 now generates index signatures for methods in classes declared with non-literal computed property names, providing consistent behavior with object literals."}, {"type": "Other", "title": "More Implicit any Errors on Functions Returning null and undefined", "description": "TypeScript now provides implicit any errors for function expressions returning null or undefined when contextually typed by a signature returning a generic type, enhancing type safety under noImplicitAny."}], "source": "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-7.html"},
{"summary": "TypeScript 5.8 introduces several key updates including improved type checking for conditional expressions in return statements, support for requiring ECMAScript modules from CommonJS in Node.js 22, and new flags for module and syntax handling. These changes enhance error detection, module interoperability, and performance optimizations.", "changes": [{"type": "Feature", "title": "Granular Checks for Branches in Return Expressions", "description": "TypeScript 5.8 now checks each branch of a conditional expression in return statements against the declared return type, allowing it to catch type mismatches that were previously overlooked. This helps prevent bugs where the type system loses information due to the 'any' type."}, {"type": "Feature", "title": "Support for require() of ECMAScript Modules in --module nodenext", "description": "Node.js 22 allows require() calls from CommonJS to ECMAScript modules, except for modules with top-level await. TypeScript 5.8 supports this behavior with the --module nodenext flag, facilitating ESM support without dual-publishing."}, {"type": "Feature", "title": "--erasableSyntaxOnly Option", "description": "Introduces the --erasableSyntaxOnly flag, which errors on TypeScript-specific constructs with runtime behavior, ensuring compatibility with Node.js's --experimental-strip-types mode."}, {"type": "Feature", "title": "Preserved Computed Property Names in Declaration Files", "description": "TypeScript 5.8 preserves computed property names in declaration files, allowing more predictable emits. This change supports computed properties with entity names, though it may affect backward compatibility with TypeScript 5.7."}, {"type": "Performance", "title": "Optimizations on Program Loads and Updates", "description": "Introduces optimizations that reduce array allocations during path normalization and avoid re-validating unchanged project options, improving responsiveness in large projects."}, {"type": "Breaking Change", "title": "Restrictions on Import Assertions Under --module nodenext", "description": "Import assertions using the 'assert' keyword are no longer accepted in Node.js 22. TypeScript 5.8 issues errors for these assertions when --module nodenext is enabled, recommending the use of 'with' instead."}], "source": "https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-8.html"}]