{
    "name": "https://garden.zendesk.com",
    "url": "https://https://garden.zendesk.com",
    "pages": [
        {
            "url": "https://garden.zendesk.com",
            "title": "Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "The source of truth for tools, standards, and best practices when building products at Zendesk. This site is an evolving library of shared knowledge that intentionally blurs the line between design, content strategy, and engineering to reinforce a cohesive user experience throughout Zendesk’s product suite. Opinionated design recipes that combine best practices from content, design, and engineering to create high-quality user interfaces quickly. Article byVedran Arnautovic Article byRyan Seddon Article byGinny Wood Article byRoss Moody Article byAllison Shaw"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components",
            "title": "Components overview / Components / Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "Development instructions for building effective user interfaces."
                },
                {
                    "type": "list",
                    "items": []
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/accordion",
            "title": "Accordion / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBareExpandableSize",
                        "Default",
                        "Bare",
                        "Expandable",
                        "Size",
                        "Configuration",
                        "APIAccordion",
                        "Accordion"
                    ]
                },
                {
                    "type": "p",
                    "text": "Accordions are headers that can be expanded to reveal content or collapsed to hide it."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBareExpandableSize",
                        "Default",
                        "Bare",
                        "Expandable",
                        "Size",
                        "Configuration",
                        "APIAccordion",
                        "Accordion"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To organize related information into sections",
                        "To surface information through progressive disclosure"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To guide users through a process use aStepperinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, the accordion can open or collapse one section at a time. Section borders are removed usingisBare. Multiple sections can be open or closed at the same time usingisExpandable. An accordion can be default or compact."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-accordions",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Accordion }from '@zendeskgarden/react-accordions'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Accordion component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Accordion><Accordion.Section><Accordion.Header><Accordion.Label/></Accordion.Header><Accordion.Panel/></Accordion.Section>{/* other sections */}</Accordion>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> The Accordion component provides state and accessibility attributes to its children. It follows theW3C Accordion pattern. Sets the default expanded sections in an uncontrolled accordion Sets the expanded sections in a controlled accordion Animates section expansion and collapse Hides section borders Allows uncontrolled accordion sections to collapse Applies compact styling Enables simultaneous expansion of uncontrolled accordion sections Setsaria-levelheading rank in the document structure"
                },
                {
                    "type": "code",
                    "code": "((expanded:any)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles accordion expansion changes A section value ExtendsHTMLAttributes<HTMLDivElement> A Header acts as the trigger for the correspondingPanelto be expanded or collapsed. It\nrenders an icon to show the current expansion state. Nest it within aSectioncomponent. ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest the Label within aHeadercomponent. ExtendsHTMLAttributes<HTMLElement> Nest a Panel within aSectioncomponent. ExtendsHTMLAttributes<HTMLElement> Wrap each section’sHeaderand correspondingPaneltogether with\nthe Section component."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/alerts",
            "title": "Alerts / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultType",
                        "Default",
                        "Type",
                        "Configuration",
                        "APIAlert",
                        "Alert"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Alert provides urgent contextual feedback in response to user action or system activity."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultType",
                        "Default",
                        "Type",
                        "Configuration",
                        "APIAlert",
                        "Alert"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For urgent feedback",
                        "For contextual communication inline with page content"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For a passive system update, use aNotificationinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, an Alert will be read first by a screen reader and is persistent\nuntil the user dismisses it. Types indicate what kind of message is in the alert and help the user understand\nhow to respond. They can be info, warning, error, or success."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-notifications",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Alert }from '@zendeskgarden/react-notifications'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Applies alert type styles ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLParagraphElement> ExtendsHTMLAttributes<HTMLDivElement> Applies regular (non-bold) font weight"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/anchor",
            "title": "Anchor / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerExternal anchorHidden underline",
                        "Default",
                        "Danger",
                        "External anchor",
                        "Hidden underline",
                        "Configuration",
                        "APIAnchor",
                        "Anchor"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Anchor is a link that helps users navigate from one location to another."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerExternal anchorHidden underline",
                        "Default",
                        "Danger",
                        "External anchor",
                        "Hidden underline",
                        "Configuration",
                        "APIAnchor",
                        "Anchor"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To navigate from one page to another",
                        "To navigate within a page",
                        "To display links alongside text"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To prompt an action or submit data, use aButtoninstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Anchor component is a styled<a>tag. It accepts all standard anchor attributes and\nsignals a way to navigate. Danger styling communicates that navigating away from your current location will have destructive\nresults. An icon appended to the end of an Anchor signals that the link will open in a new window or tab. Hide an anchor’s underline to reduce visual fatigue when multiple are displayed."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Anchor }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsAnchorHTMLAttributes<HTMLAnchorElement> The Anchor component applies appropriate attributes, icon, and styles based on the props provided. Allows a customized/translated text label to be passed to the external link icon, making that icon accessible to assistive technology Applies danger styling Attachestarget=\"_blank\"andrel=\"noopener noreferrer\"to an anchor that navigates to an external resource. This ensures that the anchor is a safecross-origin destination link. Determines if the anchor has underline styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/avatar",
            "title": "Avatar / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itShapeSizeStatusType",
                        "Shape",
                        "Size",
                        "Status",
                        "Type",
                        "How to use it wellSelect the right shape for the job",
                        "Select the right shape for the job",
                        "Configuration",
                        "APIAvatar",
                        "Avatar"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Avatar is a visual way to represent a person or brand in the product. They can display text, icons, or images."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itShapeSizeStatusType",
                        "Shape",
                        "Size",
                        "Status",
                        "Type",
                        "How to use it wellSelect the right shape for the job",
                        "Select the right shape for the job",
                        "Configuration",
                        "APIAvatar",
                        "Avatar"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To visually represent a person, brand, or product"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Avatar can be a circle or rounded square. Seewhich shape to use. You have 5 sizes to choose from. The default size ismedium. A colored ring outside the Avatar indicates a user’s status. The options are away, available, or active. An Avatar can contain an icon, an image, or text. Use circles to represent people and rounded squares for objects, brands, or products. This helps a\nuser distinguish between the two when scanning a page. Use a circular Avatar for people. Use a rounded square Avatar for objects, brands, or Zendesk products."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-avatars",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Avatar }from '@zendeskgarden/react-avatars'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Avatar component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Avatar>{/* One of icon, img, or Avatar.Text */}</Avatar>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLElement> Sets the avatar background color. Accepts acolor variablekey (i.e.background.emphasis) to render based on light/dark mode, or any hex value. Sets the badge text and applies active styling Sets the color for child SVG orAvatar.Textcomponents. Accepts acolor variablekey (i.e.foreground.onEmphasis) to render based on light/dark mode, or any hex value. Applies system styling for representing objects, brands, or products Specifies the avatar size Applies status styling Specifies the status label Provides surface color for an avatar placed on a non-default background. Accepts acolor variablekey (i.e.background.subtle) to render based on light/dark mode, or any hex value. ExtendsHTMLAttributes<HTMLSpanElement> The Text component applies appropriate styles to child text. Nest it within anAvatarcomponent.\nSeetype example."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/breadcrumbs",
            "title": "Breadcrumbs / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefault",
                        "Default",
                        "Configuration",
                        "APIBreadcrumb",
                        "Breadcrumb"
                    ]
                },
                {
                    "type": "p",
                    "text": "Breadcrumbs mark and communicate a user’s location in the product."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefault",
                        "Default",
                        "Configuration",
                        "APIBreadcrumb",
                        "Breadcrumb"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To show the user where they are in a nested navigation",
                        "To provide a quick way to navigate to ancestor pages"
                    ]
                },
                {
                    "type": "p",
                    "text": "Breadcrumbs and theAnchorcomponent work together. Each element (a “crumb” if\nyou will) is separated from the others with an arrow."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-breadcrumbs",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Breadcrumb }from '@zendeskgarden/react-breadcrumbs'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLElement>"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/button",
            "title": "Button / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledMediaSizeStretchedType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Media",
                        "Size",
                        "Stretched",
                        "Type",
                        "Configuration",
                        "APIButton",
                        "Button"
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons let users take action quickly. Use a Button to enable actions or decisions that are important to a user’s workflow."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledMediaSizeStretchedType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Media",
                        "Size",
                        "Stretched",
                        "Type",
                        "Configuration",
                        "APIButton",
                        "Button"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To enable user action",
                        "To draw attention to relevant actions in a user’s workflow"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To navigate to another page, useAnchorinstead",
                        "To help users choose from parallel actions, useSplit buttoninstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Button component. Use danger styling for Buttons that enable destructive action. A disabled Button prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not read\naloud by a screenreader. Media elements add even more context to a button. Buttons come in small, medium, and large. The default size is medium. Buttons can stretch to fill the width of their container. There are 3 types of Buttons: default, primary, and basic."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Button }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Button component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Button><Button.StartIcon/>{/* optional */}{/* button text */}<Button.EndIcon/>{/* optional */}</Button>"
                },
                {
                    "type": "p",
                    "text": "ExtendsButtonHTMLAttributes<HTMLButtonElement> The Button component applies appropriate styles based on its usage and the props provided. Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies link (anchor) button styling Applies neutral button styling Applies pill button styling Applies primary button styling Stretches the button fill to its container width Specifies the button size ExtendsSVGAttributes<SVGElement> The EndIcon component appropriately positions its child icon within the button. Nest it within theButtoncomponent as the last child. Seemedia example. Rotates icon 180 degrees ExtendsSVGAttributes<SVGElement> The StartIcon component appropriately positions its child icon within the button. Nest it within theButtoncomponent as the first child. Seemedia example. Rotates icon 180 degrees"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/checkbox",
            "title": "Checkbox / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textIndeterminateRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Indeterminate",
                        "Regular weight label",
                        "Validation",
                        "How to use it wellUse to select any number of options",
                        "Use to select any number of options",
                        "Configuration",
                        "APICheckboxField",
                        "Checkbox",
                        "Field"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Checkbox lets users select and unselect options from a list."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textIndeterminateRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Indeterminate",
                        "Regular weight label",
                        "Validation",
                        "How to use it wellUse to select any number of options",
                        "Use to select any number of options",
                        "Configuration",
                        "APICheckboxField",
                        "Checkbox",
                        "Field"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users compare options from a list and select all, any, or none of those items",
                        "To turn a single option on or off"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To give the user a mutually exclusive choice, use theRadiocomponent instead",
                        "To let users activate an option that takes effect immediately, use aToggleinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Checkbox’s label is part of its touch target. A disabled Checkbox prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not\nbe read aloud by a screenreader. Checkbox labels can be hidden. Use Hint to add more context to the label. If the children of a Checkbox have different states (some on, some off) the parent Checkbox will\nshow an indeterminate state. Checkbox labels are bold by default, but they can be regular weight too. Show success, warning, and danger validation messages with the Message component. Use to turn a standalone setting on and off, as a favorable alternative to aToggle. Don’t use to select exactly one option from a set of two or more. UseRadiosinstead."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Checkbox, Field }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Checkbox component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Checkbox><Field.Label/><Field.Hint/></Checkbox><Field.Message/></Field>"
                },
                {
                    "type": "p",
                    "text": "ExtendsInputHTMLAttributes<HTMLInputElement> Nest a Checkbox within aFieldcomponent. Sets the checkbox state toindeterminate Applies compact styling A Field provides accessibility attributes to its childCheckboxfield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within theCheckboxcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within theCheckboxcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/chrome",
            "title": "Chrome / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultGlobal alertStandalone headerNavigation panelIcons",
                        "Default",
                        "Global alert",
                        "Standalone header",
                        "Navigation panel",
                        "Icons",
                        "Configuration",
                        "APIBodyChromeContentFooterHeaderMainNavSkipNav",
                        "Body",
                        "Chrome",
                        "Content",
                        "Footer",
                        "Header",
                        "Main",
                        "Nav",
                        "SkipNav"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Chrome component provides a high-level layout structure and sets a framework for navigating around Zendesk products."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultGlobal alertStandalone headerNavigation panelIcons",
                        "Default",
                        "Global alert",
                        "Standalone header",
                        "Navigation panel",
                        "Icons",
                        "Configuration",
                        "APIBodyChromeContentFooterHeaderMainNavSkipNav",
                        "Body",
                        "Chrome",
                        "Content",
                        "Footer",
                        "Header",
                        "Main",
                        "Nav",
                        "SkipNav"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To give Zendesk products a consistent dashboard and navigation experience"
                    ]
                },
                {
                    "type": "p",
                    "text": "A typical usage of a Chrome component framework. Remember to adjust Chrome height with the addition ofGlobal alerts. A Header component can be used in isolation while still displaying Zendesk product logos. The panel can be expanded to display labels alongside nav icons. A subnav can be\nshown for additional items. Thehuecan be modified to change the nav\nbackground color. Note this may result in inaccessible contrast levels on nav\nbuttons. Always test the resulting contrast values to ensure they’re compliant\nwith WCAG guidelines. Chrome uses26px sized iconsmade specifically for this component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-chrome",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Chrome, SkipNav, Body, Content, Main, Footer, Header, Nav }from '@zendeskgarden/react-chrome'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLDivElement> Applies a custom hue to the chrome navigation Prevents fixed positioning from being applied to the<html>element ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLElement> ExtendsHTMLAttributes<HTMLElement> Displays logo for standlone usage ExtendsButtonHTMLAttributes<HTMLButtonElement> Applies header logo styles to the item Rounds the border radius of the item Maximizes the width of a flex item in the header Maximizes the height of the item (i.e. contains a search input) Applies abrand colorto the product logo ExtendsSVGAttributes<SVGElement> ExtendsHTMLAttributes<HTMLSpanElement> Hides item text. Text remains accessible to screen readers. ExtendsHTMLAttributes<HTMLDivElement> Rounds the border radius of the item Maximizes the width of a flex item in the header Maximizes the height of the item (i.e. contains a search input) ExtendsHTMLAttributes<HTMLElement> Expands the nav area to display the item text ExtendsButtonHTMLAttributes<HTMLButtonElement> Indicates that the item contains the company brandmark Indicates that the item contains a product logo Indicates that the item is current in the nav Applies a product-specific color palette ExtendsSVGAttributes<SVGElement> ExtendsHTMLAttributes<HTMLSpanElement> Wraps overflow item text instead of truncating long strings with an ellipsis ExtendsHTMLAttributes<HTMLUListElement> ExtendsAnchorHTMLAttributes<HTMLAnchorElement> Sets the ID of the element to navigate to Sets thez-indexof the element"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/code",
            "title": "Code / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APICode",
                        "Code"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Code to style and format inline fragments of computer code."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APICode",
                        "Code"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Code to style and format<code>elements. You can also change background and text color. Code comes in small, medium, and large. By default, size is inherited from\nthe parent element."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Code }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLElement> Applies color to the background and the text Adjusts the font size. By default font size is inherited from the surrounding text."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/code-block",
            "title": "Code block / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLight modeLanguageLine highlightsLine numbersSizeSource diff",
                        "Default",
                        "Light mode",
                        "Language",
                        "Line highlights",
                        "Line numbers",
                        "Size",
                        "Source diff",
                        "Configuration",
                        "APICodeBlock",
                        "CodeBlock"
                    ]
                },
                {
                    "type": "p",
                    "text": "Code block is used to display text with code formatting. It uses syntax highlighting to make code more legible."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLight modeLanguageLine highlightsLine numbersSizeSource diff",
                        "Default",
                        "Light mode",
                        "Language",
                        "Line highlights",
                        "Line numbers",
                        "Size",
                        "Source diff",
                        "Configuration",
                        "APICodeBlock",
                        "CodeBlock"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display read-only text with code formatting",
                        "To display code snippets for users to copy"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For editing code",
                        "For simple, single-line usage, use theCodecomponent"
                    ]
                },
                {
                    "type": "p",
                    "text": "Code block renders code with syntax highlighting. By default, Code block is dark. Shed some light on it usingisLight. Use thelanguageprop to specify the syntax highlighting language. Default istsx. Use thehighlightLinesprop to call attention to particular lines of code. Line numbers make it easier to reference specific lines of code. You can turn\nthis on with theisNumberedprop. By default, Code block text is medium-sized, but it can also be small or large. Use Code block to highlight source code changes."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ CodeBlock }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLPreElement> Passes props to the code block container Determines the lines to highlight Applies light mode styling Displays line numbers Selects the language used by thePrismtokenizer Specifies the font size"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/color-picker",
            "title": "Color picker / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom triggerDialogForm inputOpaque",
                        "Default",
                        "Custom trigger",
                        "Dialog",
                        "Form input",
                        "Opaque",
                        "Configuration",
                        "APIColorPickerColorPickerDialog",
                        "ColorPicker",
                        "ColorPickerDialog"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Color picker allows users to choose colors using sliders and input fields."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom triggerDialogForm inputOpaque",
                        "Default",
                        "Custom trigger",
                        "Dialog",
                        "Form input",
                        "Opaque",
                        "Configuration",
                        "APIColorPickerColorPickerDialog",
                        "ColorPicker",
                        "ColorPickerDialog"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users change or update brand colors",
                        "To let users configure chart colors"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Color picker allows users to choose colors using sliders and input fields. The Color picker can be displayed using a trigger, e.g. an icon button. The Color picker can be shown inside a dialog using<ColorPickerDialog>. The Color picker dialog can be used in an input group. Remove alpha transparency using theisOpaqueprop."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-colorpickers",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ ColorPicker, ColorPickerDialog }from '@zendeskgarden/react-colorpickers'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Sets the color for a controlled color picker Sets the color for an uncontrolled color picker Hides alpha transparency fields Replaces label text within the color picker"
                },
                {
                    "type": "code",
                    "code": "((color:IColor)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles color picker changes A color picker state ExtendsHTMLAttributes<HTMLDivElement> Passes HTML attributes to the color dialog button element Sets the color for a controlled color picker Sets the color for an uncontrolled color picker Disables the color dialog button Applies insetbox-shadowstyling on focus Adds an arrow to the color dialog Animates the color dialog Hides alpha transparency fields Opens the dialog in a controlled color picker dialog Replaces label text within the color picker"
                },
                {
                    "type": "code",
                    "code": "((color:IColor)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles color picker changes A color picker state"
                },
                {
                    "type": "code",
                    "code": "((color:IColor)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles close actions. Can be triggered from the backdrop. A color picker state"
                },
                {
                    "type": "code",
                    "code": "((changes:{isOpen:boolean;})=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles dialog changes The changed dialog state Adjusts the placement of the color dialog Sets thez-indexof the color dialog"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/color-swatch",
            "title": "Color swatch / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom triggerDialog",
                        "Default",
                        "Custom trigger",
                        "Dialog",
                        "APIColorSwatchColorSwatchDialog",
                        "ColorSwatch",
                        "ColorSwatchDialog"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Color swatch allows users to select a single predefined color."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom triggerDialog",
                        "Default",
                        "Custom trigger",
                        "Dialog",
                        "APIColorSwatchColorSwatchDialog",
                        "ColorSwatch",
                        "ColorSwatchDialog"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users change, update, or add predefined colors"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For more finite control over color selection, use theColor picker"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Color swatch allows users to select a single predefined color. The Color swatch can be displayed using a trigger, e.g. anIcon button. The Color swatch can be shown inside a dialog using<ColorSwatchDialog>. ExtendsHTMLAttributes<HTMLTableElement> Sets the two-dimension array of labeled HEX and RGB/A string colors Sets the default selected column index in an uncontrolled color swatch Sets the default selected row index in an uncontrolled color swatch Determines if the color swatch is backed by radio (default) or checkbox inputs Sets the name used to reference the value of the control"
                },
                {
                    "type": "code",
                    "code": "((rowIndex:number|null,colIndex:number|null)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles color swatch select event Sets the selected column index in a controlled color swatch Sets the selected row index in a controlled color swatch ExtendsHTMLAttributes<HTMLDivElement> Passes HTML attributes to the color dialog button element Sets the two-dimension array of labeled HEX and RGB/A string colors Sets the default selected column index in an uncontrolled color swatch Sets the default selected row index in an uncontrolled color swatch Disables the color dialog button Applies insetbox-shadowstyling on focus Adds an arrow to the color dialog Animates the color dialog Determines if the color swatch is backed by radio (default) or checkbox inputs Opens the dialog in a controlled color swatch dialog Sets the name used to reference the value of the control"
                },
                {
                    "type": "code",
                    "code": "((changes:{isOpen:boolean;})=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles dialog changes The changed dialog state"
                },
                {
                    "type": "code",
                    "code": "((rowIndex:number|null,colIndex:number|null)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles color swatch select event Adjusts the placement of the color dialog Sets the selected column index in a controlled color swatch Sets the selected row index in a controlled color swatch Sets thez-indexof the color dialog"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/combobox",
            "title": "Combobox / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAutocompleteDisabledGrouped optionsHidden labelHint textMediaMultiselectMultiselect tagsNestedNested multiselectSearchSelect onlySizeValidation",
                        "Default",
                        "Autocomplete",
                        "Disabled",
                        "Grouped options",
                        "Hidden label",
                        "Hint text",
                        "Media",
                        "Multiselect",
                        "Multiselect tags",
                        "Nested",
                        "Nested multiselect",
                        "Search",
                        "Select only",
                        "Size",
                        "Validation",
                        "How to use it wellNarrow down optionsApply icons consistently",
                        "Narrow down options",
                        "Apply icons consistently",
                        "Configuration",
                        "APIComboboxFieldOptionOptGroupTag",
                        "Combobox",
                        "Field",
                        "Option",
                        "OptGroup",
                        "Tag"
                    ]
                },
                {
                    "type": "p",
                    "text": "Combobox is an input plus a listbox that appears beneath it. It searches and filters down options, allowing the user to select."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAutocompleteDisabledGrouped optionsHidden labelHint textMediaMultiselectMultiselect tagsNestedNested multiselectSearchSelect onlySizeValidation",
                        "Default",
                        "Autocomplete",
                        "Disabled",
                        "Grouped options",
                        "Hidden label",
                        "Hint text",
                        "Media",
                        "Multiselect",
                        "Multiselect tags",
                        "Nested",
                        "Nested multiselect",
                        "Search",
                        "Select only",
                        "Size",
                        "Validation",
                        "How to use it wellNarrow down optionsApply icons consistently",
                        "Narrow down options",
                        "Apply icons consistently",
                        "Configuration",
                        "APIComboboxFieldOptionOptGroupTag",
                        "Combobox",
                        "Field",
                        "Option",
                        "OptGroup",
                        "Tag"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To filter down a large list of options",
                        "To make a selection from a list of options"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To pick an option from a list on mobile devices, useSelectinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, the Combobox presents a list of suggested options upon value entry. In conjunction with user-provided filtering, theisAutocompleteprop\nhighlights an option for selection. A disabled Combobox prevents user interaction. It doesn’t appear in the tab\norder, can’t receive focus, and may not be read aloud by a screenreader. Use grouped options for categorization. Combobox labels can be hidden. Hint text gives further clarification. Media elements add even more context to a Combobox and its options. Use theisMultiselectableprop to allow multiple selections. Follow Avatarguidelinesby using\nOptiontagPropsto alter the appearance of multiselect tags. A Combobox listbox can contain nested levels for additional categorization of options. A multiselect requires additional consideration for seleting options at nested levels. Combobox can be used to provide search suggestions. AddisEditable={false}to make Combobox behave like a native<select>. Combobox can be default or compact in size. Show success, warning, and error validation messages with the Message component. Combobox is useful for lists that are too long to read in full (for example, company\nemployees) or that accumulate items over time (for example, an inventory). Always place the magnifying glass icon at the start of the input when using the Combobox for\nsearch."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-dropdowns",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Combobox, Field, OptGroup, Option, Tag }from '@zendeskgarden/react-dropdowns'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Combobox component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Combobox><Option/><Option/><OptGroup><Option/></OptGroup>{/* etc. */}</Combobox></Field>"
                },
                {
                    "type": "p",
                    "text": "UseArray.mapto iterate over options."
                },
                {
                    "type": "code",
                    "code": "constOPTIONS=[{value:'Sunflower'},{label:'More flowers',options:[{value:'Violet'},{value:'Daisy'},]}]<Combobox>{OPTIONS.map(option=>option.options?(<OptGroupkey={option.label}label={option.label}>{option.options.map(groupOption=>(<Optionkey={groupOption.value}{...groupOption}/>))}</OptGroup>):(<Optionkey={option.value}{...option}/>))}</Combobox>"
                },
                {
                    "type": "p",
                    "text": "MatchOptionandOptGroupprop signatures when using wrapper components."
                },
                {
                    "type": "code",
                    "code": "constOptionComponent=forwardRef((props,ref)=>(<Option{...props}ref={ref}/>))constOptGroupComponent=forwardRef((props,ref)=>(<OptGroup{...props}ref={ref}/>))<Combobox><OptGroupComponentlabel=\"Flowers\"><OptionComponentvalue=\"Violet\"/><OptionComponentvalue=\"Sunflower\"/><OptionComponentvalue=\"Daisy\"/></OptGroupComponent></Combobox>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Nest a Combobox within aFieldcomponent. Sets the currently active option index in a controlled combobox Sets the default active option index in an uncontrolled combobox Determines default listbox expansion in an uncontrolled combobox Accepts an \"end\" icon to display Applies insetbox-shadowstyling on focus Identifies the combobox Passes HTML attributes to the input element Sets the input value in a controlled combobox Indicates that the combobox provides autocompletion Removes borders and padding Applies compact styling Indicates that the combobox is not interactive Determines whether the combobox is editable or select-only Determines listbox expansion in a controlled combobox Determines whether multiple options can be selected Appends the lisbox to the element provided Specifies the listboxaria-label Sets themax-heightof the listbox Overrides themin-heightof the listbox Sets thez-indexof the listbox Overrides themax-heightof the combobox Determines the maximum number of tags displayed when a multiselectable combobox is collapsed"
                },
                {
                    "type": "code",
                    "code": "((changes:{type:string;isExpanded?:boolean;selectionValue?:string|string[]|null;inputValue?:string|undefined;activeIndex?:number|undefined;})=>void)|undefined"
                },
                {
                    "type": "p",
                    "text": "Handles combobox state changes The event type that triggered the change The updated listbox expansion The updated selection value(s) The updated input value The updated active option index Defines text that appears in the element when no items are selected"
                },
                {
                    "type": "code",
                    "code": "((value:number)=>string)"
                },
                {
                    "type": "p",
                    "text": "Overrides the \"+ N more\" text displayed when the total number of multiselectable tags exceedsmaxTags The number of hidden items replacement for the \"+ N more\" text"
                },
                {
                    "type": "code",
                    "code": "((options:{selection:ISelectedOption|ISelectedOption[]|null;inputValue?:string;})=>ReactNode)"
                },
                {
                    "type": "p",
                    "text": "Overrides theinputValueorplaceholdertext displayed when the combobox is not focused Current selection Current input value for the current combobox value Sets the selection value (orisMultiselectablevalues) in a controlled combobox Accepts a \"start\" icon to display Applies validation state styling ExtendsHTMLAttributes<HTMLDivElement> A Field provides accessibility attributes to the childComboboxfield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest a Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest a Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines thearia-labelfor the validation icon ExtendsLiHTMLAttributes<HTMLLIElement> Nest an Option within aComboboxorOptGroupcomponent. Accepts an icon to display Indicates that the option is not interactive Hides the option while retaining props (i.e. selectedtagProps) Determines the initial selection state for the option Sets the text label of the option (defaults tovalue) Overrides props (includingchildren) for the associated tag Determines the option type Sets the unique value that is returned upon selection ExtendsHTMLAttributes<HTMLDivElement> Nest Meta within anOptioncomponent. ExtendsLiHTMLAttributes<HTMLLIElement> Nest an OptGroup within aComboboxcomponent. Renders content for the option group (defaults tolabeltext) Accepts an icon to display Sets the text label of the option group ExtendsHTMLAttributes<HTMLDivElement> The Tag is not intended to be used directly. It is used internally by the\nCombobox component to render selected options. Reference the props below for\noverridingOptiontagProps. Sets the color of the tag. Refer to themingcolorsorPALETTEfor available colors. Useprimary hues–blue,green,grey,kale,red,yelloworprimaryHue,successHue,neutralHue,chromeHue,dangerHue,warningHue– to apply color based on light/dark mode. Accepts any hex value. Applies pill styling Applies regular (non-bold) font weight Sets thearia-labeland tooltip for the remove icon ExtendsHTMLAttributes<HTMLElement> Use Avatar to renderchildrenofOptiontagPropswith an\nassociated image."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/date-picker",
            "title": "Date picker / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom date formatDate rangeLocalizationSizeTime window",
                        "Default",
                        "Custom date format",
                        "Date range",
                        "Localization",
                        "Size",
                        "Time window",
                        "Configuration",
                        "APIDatePickerDatePickerRange",
                        "DatePicker",
                        "DatePickerRange"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Date picker lets users select a date by showing them a calendar. It works in combination with a text input."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCustom date formatDate rangeLocalizationSizeTime window",
                        "Default",
                        "Custom date format",
                        "Date range",
                        "Localization",
                        "Size",
                        "Time window",
                        "Configuration",
                        "APIDatePickerDatePickerRange",
                        "DatePicker",
                        "DatePickerRange"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To select a single date, use a Date picker",
                        "To select a start and an end date, use a Date picker range"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Date picker component. Dates are formatted using theIntl.DateTimeFormatutility. For other formats, consider using a library likedate-fns. Date range picker works in combination with two text inputs. It displays a\ncalendar that lets users choose a start and end date. Dates are localized using theIntl.DateTimeFormatutility. For other formats, usecustomParseDateprop, and formatting libraries\nlikedate-fnsormomentjs. Date picker can be default or compact. Options before and after a certain date can be disabled, limiting users to a specific time window."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-datepickers",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ DatePicker, DatePickerRange }from '@zendeskgarden/react-datepickers'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Appends the calendar to the element provided"
                },
                {
                    "type": "code",
                    "code": "((inputValue:string)=>Date)"
                },
                {
                    "type": "p",
                    "text": "Overrides default date parsing A localized input value parsed date"
                },
                {
                    "type": "code",
                    "code": "((date:Date)=>string)"
                },
                {
                    "type": "p",
                    "text": "Customizes the input element's date formatting The selected date formatted date string Animates the calendar Applies compact styling Applies locale-based formatting. Accepts all validIntllocales. Disables dates after this value on the calendar Disables dates before this value on the calendar"
                },
                {
                    "type": "code",
                    "code": "((date:Date)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles date change The selected date Adjusts the position of the calendar Defines the ref key used to position the calendar Sets the selected date Overrides the locale default start day of week Sets thez-indexof the calendar"
                },
                {
                    "type": "code",
                    "code": "((inputValue?:string)=>Date)"
                },
                {
                    "type": "p",
                    "text": "Overrides the default date parsing A date string parsed date Sets the end date"
                },
                {
                    "type": "code",
                    "code": "((date:Date)=>string)"
                },
                {
                    "type": "p",
                    "text": "Customizes the input element's date formatting The selected date formatted date string Applies compact styling Applies locale-based formatting. Accepts all validIntllocales. Disables dates after this value on the calendar Disables dates before this value on the calendar"
                },
                {
                    "type": "code",
                    "code": "((values:{startValue?:Date;endValue?:Date;})=>void)|undefined"
                },
                {
                    "type": "p",
                    "text": "Handles start and end date changes The selected dates Optional start date Optional end date Sets the start date Overrides the locale default start day of week ExtendsHTMLAttributes<HTMLDivElement>"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/dots",
            "title": "Dots / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIDots",
                        "Dots"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Dots loader communicates ongoing activity after a user takes an action. It tells them that something is taking place."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIDots",
                        "Dots"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To indicate that a single component, like a Button or Search input, is doing something"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To communicate a page is loading, use aSkeletonloader orSpinnerinstead",
                        "To communicate typing status, use anInlineloader instead",
                        "To communicate progress, use aProgressloader instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The default application of a Dots loader includes accessibility attributes that\nidentify it as an indeterminate progress bar. By default, color is inherited from the parent element unless specified. By default, size is inherited from font size unless specified."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-loaders",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Dots }from '@zendeskgarden/react-loaders'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsSVGAttributes<SVGSVGElement> Sets the fill color. Accepts acolor variablekey (i.e.foreground.primary) to render based on light/dark mode, or any hex value. Inherits the parent'scolorby default. Delays displaying the loader to prevent a render flash during normal loading times * Sets the length of the animation cycle in milliseconds * Sets the height and width in pixels. Inherits the parent's font size by default."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/draggable",
            "title": "Draggable / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBareContentDisabledPlaceholderSize",
                        "Default",
                        "Bare",
                        "Content",
                        "Disabled",
                        "Placeholder",
                        "Size",
                        "Draggable listDefaultHorizontalIndicator",
                        "Default",
                        "Horizontal",
                        "Indicator",
                        "DropzoneDefaultDanger",
                        "Default",
                        "Danger",
                        "Configuration",
                        "APIDraggableDraggableListDropzone",
                        "Draggable",
                        "DraggableList",
                        "Dropzone"
                    ]
                },
                {
                    "type": "p",
                    "text": "The draggable is an interactive element that can be “grabbed”, dragged, and dropped to another location. This lets users rearrange and/or organize items."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBareContentDisabledPlaceholderSize",
                        "Default",
                        "Bare",
                        "Content",
                        "Disabled",
                        "Placeholder",
                        "Size",
                        "Draggable listDefaultHorizontalIndicator",
                        "Default",
                        "Horizontal",
                        "Indicator",
                        "DropzoneDefaultDanger",
                        "Default",
                        "Danger",
                        "Configuration",
                        "APIDraggableDraggableListDropzone",
                        "Draggable",
                        "DraggableList",
                        "Dropzone"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Reordering a list",
                        "Moving objects between lists"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users upload files, useFile uploadinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Draggable has a content area and a grip to communicate it can be dragged and dropped. Borders can be removed usingisBareprop. The Draggable content area can accept other components and text. The Draggable can be disabled to prevent interaction. It doesn’t appear in the tab order,\ncan’t receive focus, and may not be read aloud by a screenreader. A Placeholder is used to indicate where the Draggable will be placed when dropped. Can be default or compact in size. This changes the vertical padding. Use the list component to organizeDraggableitems into a vertical list. UseisHorizontalto display items in a row. Use indicators to communicate where theDraggablewill land between other items. The Dropzone allows users to designate an area as a drop target. This example usesdnd-kit. Danger styling communicates that items dropped will be removed or deleted. This example usesdnd-kit."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-draggable",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Draggable, DraggableList, Dropzone }from '@zendeskgarden/react-draggable'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ADraggablecomponent can be used independently from aDraggableList.\nThey follow this structure:"
                },
                {
                    "type": "code",
                    "code": "<DraggableList><DraggableList.Item><Draggable><Draggable.Grip/><Draggable.Content>{/* content */}</Draggable.Content></Draggable></DraggableList.Item>{/* other items */}</DraggableList>"
                },
                {
                    "type": "p",
                    "text": "TheDropzonecomponent may or may not be a sibling to theDraggablecomponent.\nIt follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Dropzone><Dropzone.Icon><Icon/></Dropzone.Icon><Dropzone.Message>{/* message */}</Dropzone.Message></Dropzone>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Applies insetbox-shadowstyling on focus Removes borders Applies compact spacing Disables the draggable Applies grab styling Hides content and applies placeholder background styling Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLDivElement> Provides visual indication that aDraggablecan be grabbed and moved. ExtendsHTMLAttributes<HTMLUListElement> Flows list items inline ExtendsLiHTMLAttributes<HTMLLIElement> Indicates the position where aDraggableList.Itembeing dragged will be inserted into aDraggableList. ExtendsLiHTMLAttributes<HTMLLIElement> Nest an Item within aDraggableListcomponent. ExtendsHTMLAttributes<HTMLDivElement> Indicates a drop is possible during a drag Applies danger styling Disables the dropzone Indicates a draggable is on a droppable area Aligns dropzone message content vertically Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Nest a customiconinDropzone.Icon. ExtendsHTMLAttributes<HTMLParagraphElement> Nest content within aDropzone.Messageto apply appropriate styles."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/drawer",
            "title": "Drawer / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefault",
                        "Default",
                        "Configuration",
                        "APIDrawer",
                        "Drawer"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Drawer is a container for supplementary content that is anchored to the edge of a page."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefault",
                        "Default",
                        "Configuration",
                        "APIDrawer",
                        "Drawer"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display information or actions that are supplementary to the screen’s primary content",
                        "To display a list of actions that affect the screen’s content, such as filtering data"
                    ]
                },
                {
                    "type": "p",
                    "text": "When the Drawer opens, focus moves to it so users who rely on a keyboard and/or\nscreen reader can access the content within. Focus is kept in the Drawer until\nit is dismissed."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-modals",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Drawer }from '@zendeskgarden/react-modals'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Defines the DOM element that the modal will attatch to Passes HTML attributes to the backdrop element Directs keyboard focus to the modal on mount Opens the modal"
                },
                {
                    "type": "code",
                    "code": "((event:KeyboardEvent<Element>|MouseEvent<Element,MouseEvent>)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles close actions. Can be triggered from the backdrop and from the close icon. The DOM event that triggered the close action Returns keyboard focus to the element that triggered the modal ExtendsHTMLAttributes<HTMLDivElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLDivElement> Updates the element's HTML tag"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/file-upload",
            "title": "File upload / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledFilesSizeValidation",
                        "Default",
                        "Disabled",
                        "Files",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFieldFileFileListFileUploadInput",
                        "Field",
                        "File",
                        "FileList",
                        "FileUpload",
                        "Input"
                    ]
                },
                {
                    "type": "p",
                    "text": "File upload lets users select and upload files."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledFilesSizeValidation",
                        "Default",
                        "Disabled",
                        "Files",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFieldFileFileListFileUploadInput",
                        "Field",
                        "File",
                        "FileList",
                        "FileUpload",
                        "Input"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users attach a file or image to something else",
                        "To let users add images to their avatars"
                    ]
                },
                {
                    "type": "p",
                    "text": "Users drag and drop files on to the target or click to select which files to upload. A disabled File upload prevents user interaction. It doesn’t appear in the tab order and can’t receive focus. A File can have an icon and be dismissed. Files work together with aProgressloader to show upload status. Use in\ncombination withFileListto display a list of files. File upload can be default or compact. Show success and error validation with the File component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ FileUpload, Input, Field, FileList, File }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The FileUpload component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Field.Hint/><FileUpload><Input/></FileUpload></Field><FileList><FileList.Item><File><File.Close/><Progress/></File></FileList.Item>{/* etc. */}</FileList>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to its childFileUploadfield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. ExtendsHTMLAttributes<HTMLDivElement> The File component displays an icon based on the provided type, or a generic one when type is not specified.\nIn case of multiple File components, nest each within anItemcomponent. Applies insetbox-shadowstyling on focus Applies compact styling Determines the icon to display Applies validation state styling ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLUListElement> Use the FileList component when displaying a list of multiple files. ExtendsLiHTMLAttributes<HTMLLIElement> Nest an Item within aFileListcomponent. ExtendsHTMLAttributes<HTMLDivElement> The FileUpload component works together with a library likereact-dropzone. Nest it within aFieldcomponent. Indicates that the element is not interactive Applies compact styling Applies drag styling ExtendsInputHTMLAttributes<HTMLInputElement> Nest the Input within theFileUploadcomponent. Seedefault exampleusage. Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Applies validation state styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/global-alert",
            "title": "Global alert / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultType",
                        "Default",
                        "Type",
                        "How to use it wellClearly actionableAllow users to dismissDo not time out",
                        "Clearly actionable",
                        "Allow users to dismiss",
                        "Do not time out",
                        "Configuration",
                        "APIGlobalAlert",
                        "GlobalAlert"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Global alert provides system-wide feedback and updates to users."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultType",
                        "Default",
                        "Type",
                        "How to use it wellClearly actionableAllow users to dismissDo not time out",
                        "Clearly actionable",
                        "Allow users to dismiss",
                        "Do not time out",
                        "Configuration",
                        "APIGlobalAlert",
                        "GlobalAlert"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Announce new versions of products",
                        "Inform users of trial status",
                        "Let users know they are in an editing mode",
                        "Communicate system maintenance or disconnection from servers"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For more contextual feedback about an action or task, use anAlert"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Global alert is the first element of a page and pushes content down. It is read first\nby a screen reader and is persistent until the user dismisses it or the issue has been resolved. Types indicate what kind of message is in the Global alert and help the user understand\nhow to respond. They can be info, warning, error, or success. Provide one button to address the issue, and an optional way to “learn more”. Global alerts should have one clear action Allow users to close the Global alert if it does not impede the use of the product. Passive, informational messages should be dismissible Global alerts are persistent. They should either be dismissed temporarily\nby the user or dismissed automatically when the issue is resolved. Global alerts are always visible until the issue has been resolved or the alert is manually\ndismissed by the user"
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-notifications",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ GlobalAlert }from '@zendeskgarden/react-notifications'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Global alert component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<GlobalAlert><GlobalAlert.Content>{/* main text content and nested anchors */}<GlobalAlert.Title>{/* a title for global alert */}</GlobalAlert.Title></GlobalAlert.Content><GlobalAlert.Button>{/* optional action for global alert */}</GlobalAlert.Button><GlobalAlert.Closearia-label=\"Close Button\"/></GlobalAlert>"
                },
                {
                    "type": "p",
                    "text": "The Global alert component applies appropriate icon, and styles based on the type provided. ExtendsHTMLAttributes<HTMLDivElement> Applies global alert type styles Nest the Button within aGlobalAlertcomponent. ExtendsButtonHTMLAttributes<HTMLButtonElement> Applies basic button styling Nest a Close button within aGlobalAlertcomponent as the last child for consistent tab order. ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest the Content within aGlobalAlertcomponent. ExtendsHTMLAttributes<HTMLDivElement> Nest the Title within aGlobalAlertcomponent. ExtendsHTMLAttributes<HTMLDivElement> Applies regular (non-bold) font weight"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/grid",
            "title": "Grid / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itAuto layoutResponsive layoutsAlignmentOffsetting columnsNesting",
                        "Auto layout",
                        "Responsive layouts",
                        "Alignment",
                        "Offsetting columns",
                        "Nesting",
                        "Configuration",
                        "APIGrid",
                        "Grid"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Grid component is a framework for building modular layouts."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itAuto layoutResponsive layoutsAlignmentOffsetting columnsNesting",
                        "Auto layout",
                        "Responsive layouts",
                        "Alignment",
                        "Offsetting columns",
                        "Nesting",
                        "Configuration",
                        "APIGrid",
                        "Grid"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To structure the layout of a page"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Grid component is modeled on Bootstrap’s Grid system. The following examples\nlink to corresponding Bootstrap documentation and demonstrate how advanced layouts\ncan be achieved using Grid."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-grid",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Grid }from '@zendeskgarden/react-grid'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Defines the number of individual columns that the grid contains Highlights the columns for layout debugging Specifies the grid column gutter width. The valuefalsecollapses the gutters ExtendsHTMLAttributes<HTMLDivElement> Applies thealign-selfflex item property, overridingRow alignItemsvertical alignment on all screen sizes Applies thealign-selfflex item property to the column on large screens Applies thealign-selfflex item property to the column on medium screens Applies thealign-selfflex item property to the column on small screens Applies thealign-selfflex item property to the column on extra-large screens Applies thealign-selfflex item property to the column on extra-small screens Defines the column size on large screens Defines the column size on medium screens Offsets the column relative to the total number ofcolumnsin the grid on all screen sizes Applies offset to the column on large screens Applies offset to the column on medium screens Applies offset to the column on small screens Applies offset to the column on extra-large screens Applies offset to the column on extra-small screens Applies theorderflex item property to the column on all screen sizes. Note that order modification can introduce accessibility problems by confusing tab ordering. Rely on semantic DOM ordering whenever possible. Sets theorderflex item property of the column on large screens Sets theorderflex item property of the column on medium screens Sets theorderflex item property of the column on small screens Sets theorderflex item property of the column on extra-large screens Sets theorderflex item property of the column on extra-small screens Sets the total number of gridcolumnsthat the column spans on all screen sizes Defines the column size on small screens Applies the RTL-awaretext-alignproperty to the column on all screen sizes Applies thetext-alignproperty to the column on large screens Applies thetext-alignproperty to the column on medium screens Applies thetext-alignproperty to the column on small screens Applies thetext-alignproperty to the column on extra-large screens Applies thetext-alignproperty to the column on extra-small screens Defines the column size on extra-large screens Defines the column size on extra-small screens. Seebreakpoints. ExtendsHTMLAttributes<HTMLDivElement> Applies thealign-itemsflex container property to the row. This affects verticalColalignment on all screen sizes. Applies thealign-itemsflex container property to the row on large screens Applies thealign-itemsflex container property to the row on medium screens Applies thealign-itemsflex container property to the row on small screens Applies thealign-itemsflex container property to the row on extra-large screens Applies thealign-itemsflex container property to the row on extra-small screens Applies thejustify-contentflex container property to the row. This affects horizontalColalignment on all screen sizes. Applies thejustify-contentflex container property to the row on large screens Applies thejustify-contentflex container property to the row on medium screens Applies thejustify-contentflex container property to the row on small screens Applies thejustify-contentflex container property to the row on extra-large screens Applies thejustify-contentflex container property to the row on extra-small screens Applies theflex-wrapcontainer property to the row. This affectsColwrapping on all screen sizes. Applies theflex-wrapcontainer property to the row on large screens Applies theflex-wrapcontainer property to the row on medium screens Applies theflex-wrapcontainer property to the row on small screens Applies theflex-wrapcontainer property to the row on extra-large screens Applies theflex-wrapcontainer property to the row on extra-small screens"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/icon-button",
            "title": "Icon button / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledShapeSizeType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Shape",
                        "Size",
                        "Type",
                        "How to use it wellDon't leave users in the dark",
                        "Don't leave users in the dark",
                        "Configuration",
                        "APIIconButton",
                        "IconButton"
                    ]
                },
                {
                    "type": "p",
                    "text": "Icon buttons (like Buttons) let users take action. They are used for repeated or persistent actions on a page and lack visible labels to simplify the UI."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledShapeSizeType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Shape",
                        "Size",
                        "Type",
                        "How to use it wellDon't leave users in the dark",
                        "Don't leave users in the dark",
                        "Configuration",
                        "APIIconButton",
                        "IconButton"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To simplify the appearance of repeated or persistent actions on a page",
                        "To enable action in a toolbar"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To enable primary and secondary actions on a page, use aButtoninstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of an Icon button component. Use danger styling for Icon buttons that enable destructive action. A disabled Icon button prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not\nbe read aloud by a screenreader. Icon buttons are circular by default, but they can be squares too. Icon buttons can be small, medium, or large. The default size is medium. Icon buttons have 3 types: basic, outline, and primary. The default type is basic. Include aTooltipto help any users who may be unfamiliar with the\nicon."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ IconButton }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The IconButton component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Tooltip>{/* recommended */}<IconButton>{/* icon here */}</IconButton></Tooltip>"
                },
                {
                    "type": "p",
                    "text": "ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest the IconButton within aTooltipand provide anaria-labelto ensure it is accessible.\nSeedefault example. Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies neutral button styling Applies pill button styling Applies primary button styling Rotates icon 180 degrees Specifies the button size"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/inline",
            "title": "Inline / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIInline",
                        "Inline"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Inline loader is used as a typing indicator. This signals the other party is present and preparing a reply."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIInline",
                        "Inline"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "As a typing indicator"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To show a loading state, use theDotsloader instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Inline loader is used to represent someone typing. Color can be explicitly set, but will be inherited from the parent element’s\ncolor by default. The width of the loader can be set using thesizeproperty."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-loaders",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Inline }from '@zendeskgarden/react-loaders'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsSVGAttributes<SVGSVGElement> Sets the fill color. Accepts acolor variablekey (i.e.foreground.primary) to render based on light/dark mode, or any hex value. Inherits the parent'scolorby default. Sets the width in pixels and scales the loader proportionally"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/input",
            "title": "Input / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledFaux inputFocus insetHidden labelHint textMedia inputPlaceholderRead-onlySizeValidation",
                        "Default",
                        "Disabled",
                        "Faux input",
                        "Focus inset",
                        "Hidden label",
                        "Hint text",
                        "Media input",
                        "Placeholder",
                        "Read-only",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFauxInputFieldInputMediaInput",
                        "FauxInput",
                        "Field",
                        "Input",
                        "MediaInput"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Input lets users enter text into a field."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledFaux inputFocus insetHidden labelHint textMedia inputPlaceholderRead-onlySizeValidation",
                        "Default",
                        "Disabled",
                        "Faux input",
                        "Focus inset",
                        "Hidden label",
                        "Hint text",
                        "Media input",
                        "Placeholder",
                        "Read-only",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFauxInputFieldInputMediaInput",
                        "FauxInput",
                        "Field",
                        "Input",
                        "MediaInput"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let the user enter data into a field",
                        "To enter multiline text, use aTextarea"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Input comes with a label indicating what goes into the field. A disabled Input prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not read\naloud by a screenreader. Provide input styling without native input backing. Set focus styling inside the element using thefocusInsetprop. (Useful when an Input is flush\nwith another component.) Input labels can be hidden. To provide additional context, use hint text with the label. Media elements add even more context to an input. Placeholder text provides the user with example content or additional context.\nUse an icon to provide a visual affordance when thelabel is hidden(for example, search). A read-only Input prevents user modification but allows selection. An Input can be default or compact. Show success, warning, and danger validation messages with the Message component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Input, MediaInput, Field, FauxInput }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Input component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Field.Hint/><Input/><Field.Message/></Field>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Nest a FauxInput within aFieldcomponent. Indicates that the element is not interactive Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Applies focus stying Applies hover stying Applies read-only styling Applies validation state styling A Field provides accessibility attributes to its childInputfield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsInputHTMLAttributes<HTMLInputElement> Nest an Input within aFieldcomponent. Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Applies validation state styling ExtendsInputHTMLAttributes<HTMLInputElement> A MediaInput displays provided media elements at the start and/or end of the input. Nest\nit within aFieldcomponent. Accepts an \"end\" icon to display Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Accepts a \"start\" icon to display Applies validation state styling Applies props to the wrappingFauxInputelement Applies a ref to the wrappingFauxInputelement"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/input-group",
            "title": "Input group / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultButton placementDisabledRead-onlySize",
                        "Default",
                        "Button placement",
                        "Disabled",
                        "Read-only",
                        "Size",
                        "Configuration",
                        "APIInputGroup",
                        "InputGroup"
                    ]
                },
                {
                    "type": "p",
                    "text": "An Input group combines two components, a Button and an Input, to let users take quick action on entered information."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultButton placementDisabledRead-onlySize",
                        "Default",
                        "Button placement",
                        "Disabled",
                        "Read-only",
                        "Size",
                        "Configuration",
                        "APIInputGroup",
                        "InputGroup"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users select data in a field",
                        "To let users copy data in a field"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To submit a form, separate yourButtonsfrom yourInputs"
                    ]
                },
                {
                    "type": "p",
                    "text": "The basic usage of an Input group component. Buttons can be placed before or after the input. A disabled Input group prevents user interaction. Field content can be made read-only. Input group comes in two sizes: default and compact."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ InputGroup }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The InputGroup component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Field.Hint/><InputGroup/></Field>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> An InputGroup provides styles for grouping child inputs and buttons together. Nest an InputGroup within aFieldcomponent. Applies compact styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/lists",
            "title": "Lists / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultNestingSize",
                        "Default",
                        "Nesting",
                        "Size",
                        "Configuration",
                        "APIOrderedListUnorderedList",
                        "OrderedList",
                        "UnorderedList"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Lists to style and format ordered and unordered lists."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultNestingSize",
                        "Default",
                        "Nesting",
                        "Size",
                        "Configuration",
                        "APIOrderedListUnorderedList",
                        "OrderedList",
                        "UnorderedList"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Lists to style and format ordered (<ol>) and unordered (<ul>) lists. You can nest lists, setting the markertypefor an outline style treatment. Lists come in small, medium, and large. The default size is medium."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ OrderedList, UnorderedList }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsOlHTMLAttributes<HTMLOListElement> Adjusts the vertical spacing between list items Sets the marker style ExtendsLiHTMLAttributes<HTMLLIElement> ExtendsHTMLAttributes<HTMLUListElement> Adjusts the vertical spacing between list items Sets the marker style ExtendsLiHTMLAttributes<HTMLLIElement>"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/menu",
            "title": "Menu / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultButtonArrowDangerDisabledMedia itemsMeta textGrouped itemsNestedPlacementSize",
                        "Default",
                        "Button",
                        "Arrow",
                        "Danger",
                        "Disabled",
                        "Media items",
                        "Meta text",
                        "Grouped items",
                        "Nested",
                        "Placement",
                        "Size",
                        "Configuration",
                        "APIMenuItemItemGroupSeparator",
                        "Menu",
                        "Item",
                        "ItemGroup",
                        "Separator"
                    ]
                },
                {
                    "type": "p",
                    "text": "Menus help users choose items from a list."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultButtonArrowDangerDisabledMedia itemsMeta textGrouped itemsNestedPlacementSize",
                        "Default",
                        "Button",
                        "Arrow",
                        "Danger",
                        "Disabled",
                        "Media items",
                        "Meta text",
                        "Grouped items",
                        "Nested",
                        "Placement",
                        "Size",
                        "Configuration",
                        "APIMenuItemItemGroupSeparator",
                        "Menu",
                        "Item",
                        "ItemGroup",
                        "Separator"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users see and choose one thing from a list of items",
                        "To limit user selection within groups of items"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users type or select options in a form, useComboboxinstead",
                        "To move between views, useTabsinstead",
                        "To let users see and choose one thing from a list of parallel actions, use in combination with aSplit button"
                    ]
                },
                {
                    "type": "p",
                    "text": "Display a list of menu items. Uses a default GardenButtoninternally. Configure a custom menu trigger. An arrow can be added to the Menu to give the user a sense of what element is triggering it. Use danger styling for Menu items that enable destructive action. Items within a Menu can be disabled to prevent a user from interacting with them. Media elements add even more context to a Menu. Meta text can also be paired with Menu items for additional clarity. Group items together if they are associated or to enable selection. Menus can contain nested levels for additional categorization of menu items. Menu placement can be oriented around a trigger element in different positions. The default\nplacement isbottom-start. This example demonstrates thetopplacement. OptionalfallbackPlacementscan be set for fine-tuned repositioning control. Can be default or compact in size. This reduces vertical padding on menu items."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-dropdowns",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Item, ItemGroup, Menu, Separator }from '@zendeskgarden/react-dropdowns'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Menu component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Menu><Item/><Item/><ItemGroup><Item/></ItemGroup>{/* etc. */}</Menu>"
                },
                {
                    "type": "p",
                    "text": "UseArray.mapto iterate over items."
                },
                {
                    "type": "code",
                    "code": "constITEMS=[{value:'Sunflower'},{legend:'More flowers',items:[{value:'Violet'},{value:'Daisy'},]}]<Menu>{ITEMS.map(item=>item.items?(<ItemGroupkey={item.legend}legend={item.legend}>{item.items.map(groupItem=>(<Itemkey={groupItem.value}{...groupItem}/>))}</ItemGroup>):(<Itemkey={item.value}{...item}/>))}</Menu>"
                },
                {
                    "type": "p",
                    "text": "MatchItemandItemGroupprop signatures when using wrapper components."
                },
                {
                    "type": "code",
                    "code": "constItemComponent=forwardRef((props,ref)=>(<Item{...props}ref={ref}/>))constItemGroupComponent=forwardRef((props,ref)=>(<ItemGroup{...props}ref={ref}/>))<Menu><ItemGroupComponentlegend=\"Flowers\"><ItemComponentvalue=\"Violet\"/><ItemComponentvalue=\"Sunflower\"/><ItemComponentvalue=\"Daisy\"/></ItemGroupComponent></Menu>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLUListElement> A Menu manages placement, positioning and layout of its child Item components. Appends the menu to the element provided"
                },
                {
                    "type": "code",
                    "code": "string|((props:IButtonProps&{ref:RefObject<HTMLButtonElement>;})=>ReactNode)"
                },
                {
                    "type": "p",
                    "text": "Sets the menu button label or renders a provided trigger element Provides additional props to the menuButton Determines default expansion in an uncontrolled menu Determines focused value on menu initialization Provides a list of acceptable fallback placements Sets the focused value in a controlled menu Attaches an arrow that points towards the menu trigger Applies compact styling Sets the expansion in a controlled menu Sets themax-heightof the menu Sets themin-heightof the menu"
                },
                {
                    "type": "code",
                    "code": "((changes:{type:string;value?:string;isExpanded?:boolean;focusedValue?:string|null|undefined;selectedItems?:ISelectedItem[]|undefined;})=>void)|undefined"
                },
                {
                    "type": "p",
                    "text": "Handles menu state changes The event type that triggered the change The updated menu expansion The updated selection values The updated focused value Adjusts the placement of the menu Returns keyboard focus to the element that triggered the menu Sets the selected items in a controlled menu Sets thez-indexof the menu ExtendsLiHTMLAttributes<HTMLLIElement> Nest an Item within a Menu component. It requires a value prop. Accepts an icon to display Indicates that the item is not interactive Determines the initial selection state for the item Sets the text label of the item (defaults tovalue) Associates the item in a radio item group Determines the item type Sets the unique value that is returned upon selection ExtendsHTMLAttributes<HTMLDivElement> An ItemMeta provides additional information about a menu item. Nest it within an Item component. ExtendsLiHTMLAttributes<HTMLLIElement> Provides a semantic grouping to its child Item components. Optionally configures its Items as\nselectable. Renders content for the item group (defaults tolegendtext) Accepts an icon to display Sets the text label of the item group Configures the selection type for items within the group ExtendsLiHTMLAttributes<HTMLLIElement> A semantic separator between Item components."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/modal",
            "title": "Modal / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerSize",
                        "Default",
                        "Danger",
                        "Size",
                        "Configuration",
                        "APIModal",
                        "Modal"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Modal is a dialog box that sits on the top of the current page. Modals block access to the rest of the page and force user interaction."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerSize",
                        "Default",
                        "Danger",
                        "Size",
                        "Configuration",
                        "APIModal",
                        "Modal"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To interrupt users with a dialog that requests information or an action"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To provide users with information that doesn’t require interruption, use aNotificationinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Modal component. Use Danger styling for modals that enable a destructive action. A modal can be default or large."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-modals",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Modal }from '@zendeskgarden/react-modals'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Defines the DOM element that the modal will attatch to Passes HTML attributes to the backdrop element Directs keyboard focus to the modal on mount Animates the modal Centers the modal on the backdrop Applies large styling"
                },
                {
                    "type": "code",
                    "code": "((event:KeyboardEvent<Element>|MouseEvent<Element,MouseEvent>)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles close actions. Can be triggered from the backdrop and from the close icon. The DOM event that triggered the close action Returns keyboard focus to the element that triggered the modal ExtendsHTMLAttributes<HTMLDivElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLDivElement> Applies danger styling Updates the element's HTML tag"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/notifications",
            "title": "Notifications / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacementType",
                        "Default",
                        "Placement",
                        "Type",
                        "Configuration",
                        "APINotificationToastProvider",
                        "Notification",
                        "ToastProvider"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Notification is a passive status update that keeps users informed of system progress."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacementType",
                        "Default",
                        "Placement",
                        "Type",
                        "Configuration",
                        "APINotificationToastProvider",
                        "Notification",
                        "ToastProvider"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For a passive status update about user or system activity"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For contextual feedback that may require action or decision, use anAlertinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Notification component. There are 6 placement options available. The Notification occupies thetop-endposition by default. Types indicate what kind of message is in the notification and help the user understand\nhow to respond. They can be info, warning, error, or success."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-notifications",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Notification, ToastProvider }from '@zendeskgarden/react-notifications'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Applies notification type styles ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLParagraphElement> ExtendsHTMLAttributes<HTMLDivElement> Applies regular (non-bold) font weight Limits the number of visible toasts Passes placement-based customization props to the toast's parent element Sets thez-indexof the toast"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/pagination",
            "title": "Pagination / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itCursor paginationGap indicatorPage paddingOffset pagination",
                        "Cursor pagination",
                        "Gap indicator",
                        "Page padding",
                        "Offset pagination",
                        "Configuration",
                        "APICursorPaginationOffsetPagination",
                        "CursorPagination",
                        "OffsetPagination"
                    ]
                },
                {
                    "type": "p",
                    "text": "Pagination separates content into pages and allows users to navigate between those pages."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itCursor paginationGap indicatorPage paddingOffset pagination",
                        "Cursor pagination",
                        "Gap indicator",
                        "Page padding",
                        "Offset pagination",
                        "Configuration",
                        "APICursorPaginationOffsetPagination",
                        "CursorPagination",
                        "OffsetPagination"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To divide large amounts of data into manageable chunks"
                    ]
                },
                {
                    "type": "p",
                    "text": "Cursor-based pagination works by returning a pointer to a specific item in a\ndataset. There is no concept of the total number of pages or results in the set. The position of a gap indicator (…) can be set in the sequence to represent\noverflowing pages. Sets the number of pages that appear between the current page and a gap\nindicator. Offset-based pagination allows users to see the total number of pages and jump\nto a specific position within the set."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-pagination",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ CursorPagination, OffsetPagination }from '@zendeskgarden/react-pagination'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLUListElement> Sets the current page. Pages start at 1"
                },
                {
                    "type": "code",
                    "code": "(Record<'next'|'previous'|'gap',string>&{renderPage:(p:number)=>string;})"
                },
                {
                    "type": "p",
                    "text": "Provides localized labels to pagination elements"
                },
                {
                    "type": "code",
                    "code": "((currentPage:number)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles page change events The current page Positions the leading and trailing gap indicator, based on the current and total pages Sets the number of pages that appear between the current page and a gap indicator Defines the total number of pages"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/palette",
            "title": "Palette / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "What it isPALETTE",
                        "PALETTE",
                        "Configuration"
                    ]
                },
                {
                    "type": "p",
                    "text": "The palette provides the colors used within Garden."
                },
                {
                    "type": "list",
                    "items": [
                        "What it isPALETTE",
                        "PALETTE",
                        "Configuration"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To reference brand colors specific to Zendesk products",
                        "To directly accesshue[shade]color hex values"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To style custom components with Garden, access the palette through thetheme.paletteAPI instead",
                        "To extend Garden with reusable components that respond to theming, use thegetColorutility with thetheme.colorsAPI instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following JSON displays the palette object in its entirety."
                },
                {
                    "type": "code",
                    "code": "{\"black\":\"#000\",\"white\":\"#fff\",\"product\":{\"support\":\"#00a656\",\"explore\":\"#30aabc\",\"gather\":\"#f6c8be\",\"guide\":\"#eb4962\",\"chat\":\"#f79a3e\",\"talk\":\"#efc93d\",\"sell\":\"#c38f00\"},\"grey\":{\"100\":\"#f8f9f9\",\"200\":\"#e8eaec\",\"300\":\"#d8dcde\",\"400\":\"#b0b8be\",\"500\":\"#919ca5\",\"600\":\"#848f99\",\"700\":\"#5c6970\",\"800\":\"#39434b\",\"900\":\"#293239\",\"1000\":\"#1c2227\",\"1100\":\"#151a1e\",\"1200\":\"#0a0d0e\"},\"blue\":{\"100\":\"#edf7ff\",\"200\":\"#ddecf8\",\"300\":\"#cce0f1\",\"400\":\"#93bcdc\",\"500\":\"#66a0cd\",\"600\":\"#2694d6\",\"700\":\"#1f73b7\",\"800\":\"#13456d\",\"900\":\"#0f3655\",\"1000\":\"#0a2338\",\"1100\":\"#061420\",\"1200\":\"#040d15\"},\"red\":{\"100\":\"#fff2f3\",\"200\":\"#fee3e5\",\"300\":\"#f5d5d8\",\"400\":\"#f2a1a8\",\"500\":\"#ea7881\",\"600\":\"#eb5c69\",\"700\":\"#cd3642\",\"800\":\"#7e1d25\",\"900\":\"#671219\",\"1000\":\"#3d1418\",\"1100\":\"#1d1011\",\"1200\":\"#100b0c\"},\"yellow\":{\"100\":\"#fff3e4\",\"200\":\"#ffe6cb\",\"300\":\"#fed6a9\",\"400\":\"#fca347\",\"500\":\"#e38215\",\"600\":\"#d67305\",\"700\":\"#ac5918\",\"800\":\"#673515\",\"900\":\"#4c2c17\",\"1000\":\"#2d1e15\",\"1100\":\"#18120f\",\"1200\":\"#0e0c0b\"},\"green\":{\"100\":\"#eef8f4\",\"200\":\"#daeee6\",\"300\":\"#cae3d9\",\"400\":\"#94c1b0\",\"500\":\"#4eab89\",\"600\":\"#26a178\",\"700\":\"#037f52\",\"800\":\"#104b35\",\"900\":\"#0b3b29\",\"1000\":\"#0c261c\",\"1100\":\"#0a1511\",\"1200\":\"#080d0c\"},\"kale\":{\"100\":\"#ecf9f9\",\"200\":\"#daeded\",\"300\":\"#cbe2e1\",\"400\":\"#97bfbf\",\"500\":\"#6ba4a5\",\"600\":\"#4a9999\",\"700\":\"#40787a\",\"800\":\"#16494f\",\"900\":\"#063940\",\"1000\":\"#03252a\",\"1100\":\"#061517\",\"1200\":\"#060e0e\"},\"fuschia\":{\"100\":\"#fbf3f8\",\"200\":\"#f7e6f1\",\"300\":\"#f2d5e7\",\"400\":\"#e3a4cc\",\"500\":\"#d77db7\",\"600\":\"#d16aac\",\"700\":\"#b34496\",\"800\":\"#78116c\",\"900\":\"#5a0d51\",\"1000\":\"#3f0939\",\"1100\":\"#31072c\",\"1200\":\"#1b0418\"},\"pink\":{\"100\":\"#fcf3f4\",\"200\":\"#f7e5e8\",\"300\":\"#f3d6dc\",\"400\":\"#e5a6b4\",\"500\":\"#d98193\",\"600\":\"#d96b81\",\"700\":\"#d62054\",\"800\":\"#75263d\",\"900\":\"#561d2e\",\"1000\":\"#3c141f\",\"1100\":\"#2e0f18\",\"1200\":\"#17080c\"},\"crimson\":{\"100\":\"#fbf3f2\",\"200\":\"#f7e7e4\",\"300\":\"#f1d7d2\",\"400\":\"#e2aaa0\",\"500\":\"#d58678\",\"600\":\"#cf7464\",\"700\":\"#be4938\",\"800\":\"#811b12\",\"900\":\"#61140d\",\"1000\":\"#440e09\",\"1100\":\"#340b07\",\"1200\":\"#1c0604\"},\"orange\":{\"100\":\"#fdf3ed\",\"200\":\"#fae7d8\",\"300\":\"#f7d7be\",\"400\":\"#eda875\",\"500\":\"#e58035\",\"600\":\"#d57428\",\"700\":\"#af5626\",\"800\":\"#693317\",\"900\":\"#4d2711\",\"1000\":\"#361a0c\",\"1100\":\"#291409\",\"1200\":\"#150a04\"},\"lemon\":{\"100\":\"#fff7d4\",\"200\":\"#ffea97\",\"300\":\"#ffdc4f\",\"400\":\"#efab00\",\"500\":\"#c79100\",\"600\":\"#b68500\",\"700\":\"#8f6900\",\"800\":\"#563e00\",\"900\":\"#3f2e00\",\"1000\":\"#2b2000\",\"1100\":\"#221800\",\"1200\":\"#110c00\"},\"lime\":{\"100\":\"#ecfae7\",\"200\":\"#d1f3c7\",\"300\":\"#b3eda3\",\"400\":\"#4fd12b\",\"500\":\"#45b025\",\"600\":\"#509f2d\",\"700\":\"#3d7e19\",\"800\":\"#2c491b\",\"900\":\"#203614\",\"1000\":\"#16250e\",\"1100\":\"#111d0a\",\"1200\":\"#090e05\"},\"mint\":{\"100\":\"#d6ffeb\",\"200\":\"#9affce\",\"300\":\"#0afe89\",\"400\":\"#00d26d\",\"500\":\"#01b15c\",\"600\":\"#16a260\",\"700\":\"#2d7e55\",\"800\":\"#1b4b33\",\"900\":\"#143726\",\"1000\":\"#0e261a\",\"1100\":\"#0b1d14\",\"1200\":\"#050e0a\"},\"teal\":{\"100\":\"#d4fefa\",\"200\":\"#88fdf1\",\"300\":\"#0bf8e1\",\"400\":\"#03cdb8\",\"500\":\"#02ad9c\",\"600\":\"#2a9d8f\",\"700\":\"#367a74\",\"800\":\"#254846\",\"900\":\"#1b3534\",\"1000\":\"#122423\",\"1100\":\"#0e1c1a\",\"1200\":\"#070d0d\"},\"azure\":{\"100\":\"#eff7fe\",\"200\":\"#d9ecfc\",\"300\":\"#c4e0fa\",\"400\":\"#82bcf4\",\"500\":\"#4b9fee\",\"600\":\"#3191ea\",\"700\":\"#2770c3\",\"800\":\"#23446b\",\"900\":\"#1a3250\",\"1000\":\"#122238\",\"1100\":\"#0e1a2a\",\"1200\":\"#070d14\"},\"royal\":{\"100\":\"#f4f5fc\",\"200\":\"#e7e9f8\",\"300\":\"#d8dcf4\",\"400\":\"#acb4e7\",\"500\":\"#8a96dd\",\"600\":\"#7a88d9\",\"700\":\"#4c67d3\",\"800\":\"#1833ab\",\"900\":\"#122680\",\"1000\":\"#0d1a5a\",\"1100\":\"#0a1445\",\"1200\":\"#050a25\"},\"purple\":{\"100\":\"#f9f3fb\",\"200\":\"#f2e7f6\",\"300\":\"#e9d8f1\",\"400\":\"#d0a9e0\",\"500\":\"#bb86d3\",\"600\":\"#b276cd\",\"700\":\"#9256b1\",\"800\":\"#58209a\",\"900\":\"#411973\",\"1000\":\"#2e1150\",\"1100\":\"#230d3f\",\"1200\":\"#120720\"}}"
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-theming",
                        "Depsnpm install react react-dom styled-components",
                        "Importimport{ PALETTE }from '@zendeskgarden/react-theming'"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/pane",
            "title": "Pane / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itVerticalHorizontalGrid",
                        "Vertical",
                        "Horizontal",
                        "Grid",
                        "CustomizationVertical collapseHorizontal collapseSplitter button position",
                        "Vertical collapse",
                        "Horizontal collapse",
                        "Splitter button position",
                        "Configuration",
                        "APIPaneProviderPane",
                        "PaneProvider",
                        "Pane"
                    ]
                },
                {
                    "type": "p",
                    "text": "Panes give users a quick way to resize layouts vertically or horizontally by interacting with the splitter. They can also be used to create expandable or collapsible layouts."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itVerticalHorizontalGrid",
                        "Vertical",
                        "Horizontal",
                        "Grid",
                        "CustomizationVertical collapseHorizontal collapseSplitter button position",
                        "Vertical collapse",
                        "Horizontal collapse",
                        "Splitter button position",
                        "Configuration",
                        "APIPaneProviderPane",
                        "PaneProvider",
                        "Pane"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To make a structured layout resizable, expandable, or collapsible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Panes can be used in a vertical orientation. The panes resize up to the values\nthat you set. Panes can be used in a horizontal orientation as well. Panes can be resized in both vertical and horizontal directions for a complex\ngrid flexible layout. Panes can be collapsed or expanded by using theSplitterButton. TheSplitterButtoncan be positioned at the start, center or end of the\nsplitter. Its default position is at the start when used in vertical orientation and at the\ncenter when used in horizontal orientation."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-grid",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Pane, PaneProvider }from '@zendeskgarden/react-grid'"
                    ]
                },
                {
                    "type": "code",
                    "code": "(({id,getColumnValue,getRowValue,getGridTemplateRows,getGridTemplateColumns}:{id:string;getColumnValue:(splitterKey:string,isPixels?:boolean)=>number;getRowValue:(splitterKey:string,isPixels?:boolean)=>number;getGridTemplateRows:(isPixels?:boolean|undefined)=>str..."
                },
                {
                    "type": "p",
                    "text": "Surfaces render props for applying splitter state to the supporting layout Provides theidprop, if specified; otherwise, a generated ID. Gets column value by key Gets row value by key Gets grid template rows track Gets grid template columns track Defines column values, infrunits, for a controlled layout. The values are keyed by splitter. Defines default column values, infrunits, for an uncontrolled layout. The values are keyed by splitter. Defines default row values, infrunits, for an uncontrolled layout. The values are keyed by splitter. Identifies the pane provider"
                },
                {
                    "type": "code",
                    "code": "((rowValues:Record<string,number>,columnValues:Record<string,number>)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles splitter position changes The updated row values The updated column values Defines row values, infrunits, for a controlled layout. The values are keyed by splitter. Provides the total height, inpxunits, of all panes in the layout Provides the total width, inpxunits, of all panes in the layout ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLDivElement> Determines if the splitter only toggles betweenminandmax Specifies the splitter key Sets a maximum, infrunits, for splitter position Sets a minimum, infrunits, for splitter position Determines splitter orientation within a pane Identifies the associatedPaneProvider. Assumes the closest parent provider, by default. ExtendsButtonHTMLAttributes<HTMLButtonElement> Renders the provided label text inside a tooltip Adjusts the placement of the splitter button. Assumes start when vertical and center when horizontal, by default."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/paragraph",
            "title": "Paragraph / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultSize",
                        "Default",
                        "Size",
                        "Configuration",
                        "APILGMDParagraphSM",
                        "LG",
                        "MD",
                        "Paragraph",
                        "SM"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Paragraph to render blocks of text with Garden styling."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultSize",
                        "Default",
                        "Size",
                        "Configuration",
                        "APILGMDParagraphSM",
                        "LG",
                        "MD",
                        "Paragraph",
                        "SM"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Paragraph to style and format<p>elements. Size controls the space between Paragraphs. The default size is medium, and\nyou can choose small or large too. Usetypographyto choose an appropriate type scale."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ LG, MD, Paragraph, SM }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLParagraphElement> Controls the spacing between sibling paragraphs ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/progress",
            "title": "Progress / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIProgress",
                        "Progress"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Progress loader communicates progress when downloading or uploading content."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APIProgress",
                        "Progress"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To communicate the amount of time left when downloading or uploading content"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When the loading time is unknown, use aSpinnerinstead",
                        "When loading page content, use aSkeletonloader instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Progress loader represents the percent complete from 0 to 100. The default foreground color of the Progress loader bar is the success color. It\ncan be changed. A Progress loader is medium by default. It can also be small or large."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-loaders",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Progress }from '@zendeskgarden/react-loaders'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Sets the foreground bar's fill color. Accepts acolor variablekey (i.e.border.primaryEmphasis) to render based on light/dark mode, or any hex value.  Defaults to theborder.successEmphasisthemevalue. Adjusts the height Sets the progress as a value between 0 and 100"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/radio",
            "title": "Radio / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Regular weight label",
                        "Validation",
                        "Configuration",
                        "APIFieldFieldsetRadio",
                        "Field",
                        "Fieldset",
                        "Radio"
                    ]
                },
                {
                    "type": "p",
                    "text": "Radio buttons let users choose a single option among two or more mutually exclusive options."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Regular weight label",
                        "Validation",
                        "Configuration",
                        "APIFieldFieldsetRadio",
                        "Field",
                        "Fieldset",
                        "Radio"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For choices or options that can’t occur at the same time",
                        "To indicate that two or more options are mutually exclusive"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If the user can choose more than one option at once, use aCheckboxinstead",
                        "To select from a long list of options, useComboboxinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Radio’s label is part of its touch target. A disabled Radio prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not read\naloud by a screenreader. Radio labels can be hidden. Hint text adds additional context to a Radio label. Radio labels are bold by default, but can be regular weight too. Success, warning, and danger validation messages are shown using the Message component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Radio, Field, Fieldset }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Radio component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Radio><Field.Label/><Field.Hint/></Radio><Message/></Field>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to its childRadiofield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within theRadiocomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within theRadiocomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsFieldsetHTMLAttributes<HTMLFieldSetElement> The Fieldset component provides styles for grouping child form inputs. Wrap relatedFieldcomponents and aLegendtogether within a Fieldset component. Seevalidation exampleusage. Applies compact styling ExtendsHTMLAttributes<HTMLLegendElement> Nest a Legend within aFieldsetcomponent. ExtendsInputHTMLAttributes<HTMLInputElement> Nest a Radio within aFieldcomponent. Applies compact styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/range",
            "title": "Range / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Validation",
                        "Configuration",
                        "APIFieldRange",
                        "Field",
                        "Range"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Range lets users choose a single number between two values by using a slider."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Validation",
                        "Configuration",
                        "APIFieldRange",
                        "Field",
                        "Range"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To choose a number within a range with minimum and maximum values"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "If the choices aren’t in a continuous range, use aMenuinstead",
                        "To compare between several options, use aRadioinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Range has one thumb. Its label is part of its touch target. A disabled Range is not interactive, and not perceived by a screen reader. Range labels can be hidden. Hint adds additional context to the Range label. Success, warning, or danger validation messages are shown using the Message component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Range, Field }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Range component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Field.Hint/><Range/><Field.Message/></Field>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to its childRangefield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsInputHTMLAttributes<HTMLInputElement> Nest a Range within aFieldcomponent."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/select",
            "title": "Select / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textSizeValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFieldSelect",
                        "Field",
                        "Select"
                    ]
                },
                {
                    "type": "p",
                    "text": "A native Select allows a user to pick an option from a list."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textSizeValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Size",
                        "Validation",
                        "Configuration",
                        "APIFieldSelect",
                        "Field",
                        "Select"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To select from a list on mobile devices",
                        "To make a selection in performance-constrained environments"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To make selection from a list in Zendesk products, useComboboxinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "Select uses a native menu to display available options. A disabled Select prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not read\naloud by a screenreader. Select labels can be hidden. Hint text gives further clarification. Select can be default or compact in size. Show success, warning, and danger validation messages with the Message component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Select, Field }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The native Select component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Field.Hint/><Select><option/><option/>{/* etc. */}</Select></Field>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to the childSelectfield by\nassociating it with the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest a Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest a Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsSelectHTMLAttributes<HTMLSelectElement> The Select component applies state and accessibility attributes to its children. Nest it within aFieldcomponent. Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Applies validation state styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/sheet",
            "title": "Sheet / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultFootersHeadersPlacementSize",
                        "Default",
                        "Footers",
                        "Headers",
                        "Placement",
                        "Size",
                        "Configuration",
                        "APISheet",
                        "Sheet"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Sheet component is a container that acts as a supplementary view, providing access to important contextual information."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultFootersHeadersPlacementSize",
                        "Default",
                        "Footers",
                        "Headers",
                        "Placement",
                        "Size",
                        "Configuration",
                        "APISheet",
                        "Sheet"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display additional information that aids the primary view"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For an experience where the primary view is obscured to display supplementary information or actions, use aDrawer"
                    ]
                },
                {
                    "type": "p",
                    "text": "A typical usage of a Sheet component. Sheet footers comes in three variations: no footer, footer with anAnchor,\nand footer withButtons. Sheet headers come in three variations: no title, title, and title with description. Sheets can be placed at the start or end of the container. End is the default placement. Sheets default to 380px in width. You can customize the width based on your intended\nexperience to any size using pixels or ourgrid system."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-chrome",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Sheet }from '@zendeskgarden/react-chrome'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Sheet component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Sheet><Sheet.Header><Sheet.Title>{/* a text to label the sheet */}</Sheet.Title><Sheet.Description>{/* a text describing the sheet */}</Sheet.Description></Sheet.Header><Sheet.Body>{/* main content of the sheet */}</Sheet.Body><Sheet.Footer><Sheet.FooterItem>{/* items to set in the footer, such as buttons */}</Sheet.FooterItem></Sheet.Footer><Sheet.Close/></Sheet>"
                },
                {
                    "type": "p",
                    "text": "Please keep the subcomponent structure in the order displayed in the example above. ExtendsHTMLAttributes<HTMLElement> The Sheet component provides state and accessibility attributes to its children. Directs keyboard focus to the sheet on mount Determines whether animation for opening and closing the sheet is used Opens the sheet Adjusts the placement of the sheet Returns keyboard focus to the element that triggered the sheet Sets the size of the open sheet ExtendsHTMLAttributes<HTMLDivElement> A Body requires additional accessible functionality to make the\nelement focusable for keyboard scrolling. Nest it within theSheetcomponent. ExtendsHTMLAttributes<HTMLDivElement> A Title labels the Sheet for assistive technology. Nest it within aHeadercomponent. ExtendsHTMLAttributes<HTMLDivElement> A Description describes the Sheet for assistive technology.\nNest it within aHeadercomponent. ExtendsHTMLAttributes<HTMLElement> Nest a Header within theSheetcomponent. If neitherTitlenorDescriptionare used, the Header should be omitted. ExtendsHTMLAttributes<HTMLElement> Nest a Footer within theSheetcomponent. Applies compact styling and centers the elements ExtendsHTMLAttributes<HTMLDivElement> Nest a FooterItem within theFootercomponent. ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest a Close button within aSheetcomponent as the last child for consistent tab order."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/skeleton",
            "title": "Skeleton / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLightSize",
                        "Default",
                        "Light",
                        "Size",
                        "Configuration",
                        "APISkeleton",
                        "Skeleton"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Skeleton loader shows users a blank version of a page or section of a page into which content is gradually loaded. It provides a visual estimate of the space needed."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLightSize",
                        "Default",
                        "Light",
                        "Size",
                        "Configuration",
                        "APISkeleton",
                        "Skeleton"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Skeleton is the default loader, used whenever the system can predict the format of the loading content",
                        "To progressively load different parts of a page",
                        "To avoid large layout shifts"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When the system doesn’t have control over the content that is loading, use aSpinnerinstead",
                        "To indicate that a component (like a button or search input) is busy, useDotsinstead",
                        "To communicate a typing status, useInlineinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "Skeleton loaders are the same color as the text color at 10% opacity. Skeleton loaders can be inverted for use on dark backgrounds. By default, a Skeleton loader’s height is 60% of the font size. To\nmake placeholders for other components, such as buttons, height and width can be\nexplicitly set."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-loaders",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Skeleton }from '@zendeskgarden/react-loaders'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Sets the height as a percentage of parent element's height if the height is not already inherited byline-height Inverts the color for use on dark backgrounds Sets the width as a percentage of the the parent element's width"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/span",
            "title": "Span / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itBoldHueIconsMonospace",
                        "Bold",
                        "Hue",
                        "Icons",
                        "Monospace",
                        "Configuration",
                        "APIMDParagraphSpan",
                        "MD",
                        "Paragraph",
                        "Span"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Span to style and format inline text elements."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itBoldHueIconsMonospace",
                        "Bold",
                        "Hue",
                        "Icons",
                        "Monospace",
                        "Configuration",
                        "APIMDParagraphSpan",
                        "MD",
                        "Paragraph",
                        "Span"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To apply styles to short strings of text",
                        "To include icons inline with text"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To style an entire block of text, useParagraphinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "To apply bold styling without indicating semantic importance, useisBold. The color of a span is specified withhue. Use acolor variablekey orPALETTEcolor when possible. To include an icon at the beginning of a span, use<Span.StartIcon>. To include an icon anywhere else in the span, use<Span.Icon>. Apply a fixed-width type treatment usingisMonospace."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ MD, Paragraph, Span }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLParagraphElement> Controls the spacing between sibling paragraphs ExtendsHTMLAttributes<HTMLSpanElement> Hides the span visually without hiding it from screen readers Applies a font color. Use acolor variablekey (i.e.foreground.subtle) orPALETTEcolors when possible. Accepts all hex values. Applies bold font style. Font weight is inherited by default. Renders with monospace font Updates the element's HTML tag ExtendsSVGAttributes<SVGElement> ExtendsSVGAttributes<SVGElement>"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/spinner",
            "title": "Spinner / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APISpinner",
                        "Spinner"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Spinner appears before a page is loaded to assure a user that the content is on its way."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultColorSize",
                        "Default",
                        "Color",
                        "Size",
                        "Configuration",
                        "APISpinner",
                        "Spinner"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When the content to be loaded is unknown or unpredictable"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "When page content is easily estimated, use aSkeletoninstead",
                        "To indicate a loading state within a component (like menus, inputs, or buttons) useDotsinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "Spinners communicate a loading state for an unspecified amount of time. By default, color is inherited from the parent element. Color can be explicitly set. By default, the size is inherited from the font size of the parent element. Size can be explicitly set."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-loaders",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Spinner }from '@zendeskgarden/react-loaders'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsSVGAttributes<SVGSVGElement> Sets the fill color. Accepts acolor variablekey (i.e.foreground.primary) to render based on light/dark mode, or any hex value. Inherits the parent'scolorby default. Delays displaying the loader to prevent a render flash during normal loading times Sets the length of the animation cycle in milliseconds Sets the height and width in pixels. Inherits the parent's font size by default."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/split-button",
            "title": "Split button / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledSizeType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Size",
                        "Type",
                        "Configuration",
                        "APIButtonChevronButtonSplitButton",
                        "Button",
                        "ChevronButton",
                        "SplitButton"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Split button is a hybrid between a Dropdown Menu and a Button. It lets users choose from parallel actions and take action on their choice."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDangerDisabledSizeType",
                        "Default",
                        "Danger",
                        "Disabled",
                        "Size",
                        "Type",
                        "Configuration",
                        "APIButtonChevronButtonSplitButton",
                        "Button",
                        "ChevronButton",
                        "SplitButton"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users select from multiple parallel actions. Actions are parallel\nwhen each represents a path forward for the user and none cancel the action.",
                        "To reduce visual complexity when there are multiple actions a user can take"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To provide a way to navigate between pages, useAnchorinstead",
                        "To provide a way to choose between primary and secondary actions, use two differentButtonsinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Split button component. Use danger styling for Split buttons that enable destructive action. A disabled Split button prevents user interaction. It doesn’t appear in the tab order,\ncan’t receive focus, and may not be read aloud by a screenreader. Split buttons can be small, medium, or large. The default size is medium. Split buttons are implemented in combination with aMenucomponent to show\nparallel actions. They can be default or primary."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Button, ChevronButton, SplitButton }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The SplitButton component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<SplitButton><Button/><Dropdown><Trigger><ChevronButton/></Trigger><Menu><Item/><Item/>{/* etc. */}</Menu></Dropdown></SplitButton>"
                },
                {
                    "type": "p",
                    "text": "Implementation notes The split button pattern contains:"
                },
                {
                    "type": "list",
                    "items": [
                        "SplitButtoncomponent as a container",
                        "Buttoncomponent for the main action",
                        "ChevronButtoncomponent to show/hide secondary actions",
                        "Dropdown,MenuandTriggercomponents for the secondary actions menu"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsButtonHTMLAttributes<HTMLButtonElement> The Button component applies appropriate styles based on its usage and the props provided. Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies link (anchor) button styling Applies neutral button styling Applies pill button styling Applies primary button styling Stretches the button fill to its container width Specifies the button size ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest the ChevronButton within aTriggercomponent. Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies neutral button styling Applies pill button styling Applies primary button styling Rotates icon 180 degrees Specifies the button size ExtendsHTMLAttributes<HTMLDivElement> The SplitButton component applies appropriate styles to group the primary actionButtontogether\nwith theChevronButtonthat shows/hides the secondary actions."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/status-indicator",
            "title": "Status indicator / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCaptionTypeSize",
                        "Default",
                        "Caption",
                        "Type",
                        "Size",
                        "Configuration",
                        "APIStatusIndicator",
                        "StatusIndicator"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Status indicator provides a consistent, accessible representation of a user’s current  status."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultCaptionTypeSize",
                        "Default",
                        "Caption",
                        "Type",
                        "Size",
                        "Configuration",
                        "APIStatusIndicator",
                        "StatusIndicator"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To display contextual information for a user’s current status"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To communicate all other statuses, use aTag"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Status indicator component. Status indicators include a custom or no caption. There are 4 types of Status indicators: available, away, transfers only, and offline. Status indicators come in two sizes: default and compact."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-avatars",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ StatusIndicator }from '@zendeskgarden/react-avatars'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Status indicator component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<StatusIndicator>{/* Status text */}</StatusIndicator>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLElement> Provide anaria-labelto ensure it is accessible. Applies compact styling Applies status type for styling and default aria-label"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/stepper",
            "title": "Stepper / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLayoutIcons",
                        "Default",
                        "Layout",
                        "Icons",
                        "Configuration",
                        "APIStepper",
                        "Stepper"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Stepper guides users through steps of a task in sequential order."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultLayoutIcons",
                        "Default",
                        "Layout",
                        "Icons",
                        "Configuration",
                        "APIStepper",
                        "Stepper"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "For multi-step flows that must be completed in order"
                    ]
                },
                {
                    "type": "p",
                    "text": "The default usage of a Stepper component. A Stepper is vertical by default but can be horizontal usingisHorizontal. Label numbers can be replaced with icons."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-accordions",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Stepper }from '@zendeskgarden/react-accordions'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Stepper component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Stepper><Stepper.Step><Stepper.Label/><Stepper.Content/></Stepper.Step>{/* other steps */}</Stepper>"
                },
                {
                    "type": "p",
                    "text": "Stepper orientation"
                },
                {
                    "type": "list",
                    "items": [
                        "Define the content for a vertical stepper using theStepper.Contentfor each step",
                        "Render the content for a horizontal stepper externally. Seelayout examplefor details."
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsOlHTMLAttributes<HTMLOListElement> Defines the currently active step, starting at 0 Applies horizontal layout styling ExtendsHTMLAttributes<HTMLDivElement> Nest the Content within aStepcomponent. ExtendsHTMLAttributes<HTMLDivElement> The Label component renders the provided label text with the step number or the provided icon. Nest it\nwithin aStep. Replaces the label number with an icon Passes props to the default check icon Hides the label text ExtendsLiHTMLAttributes<HTMLLIElement> Wrap each step’sLabeland correspondingContenttogether with the Step component."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/table",
            "title": "Table / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDraggableGrouped rowsOverflowPaginationScrollSelectionSizeSortStriped rowsTable captionTruncateVirtual scrolling",
                        "Default",
                        "Draggable",
                        "Grouped rows",
                        "Overflow",
                        "Pagination",
                        "Scroll",
                        "Selection",
                        "Size",
                        "Sort",
                        "Striped rows",
                        "Table caption",
                        "Truncate",
                        "Virtual scrolling",
                        "Configuration",
                        "APITable",
                        "Table"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Table organizes data into columns and rows. Tables make it easier for users to compare and analyze information."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDraggableGrouped rowsOverflowPaginationScrollSelectionSizeSortStriped rowsTable captionTruncateVirtual scrolling",
                        "Default",
                        "Draggable",
                        "Grouped rows",
                        "Overflow",
                        "Pagination",
                        "Scroll",
                        "Selection",
                        "Size",
                        "Sort",
                        "Striped rows",
                        "Table caption",
                        "Truncate",
                        "Virtual scrolling",
                        "Configuration",
                        "APITable",
                        "Table"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To organize and display read-only data with logical relationships"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To structure content on a page, use theGridcomponent instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Table component. To enable row reordering, you can apply drag-and-drop functionality withdnd-kit. Grouped rows are for additional categorization. Overflow menus leverage the Dropdown and Menu component. Table pagination works in combination with thePaginationcomponent. To ensure that your table is read correctly by assistive technologies, follow theW3C Grid accessibility\npattern. Table rows are implemented in combination with aCheckboxcomponent to become selectable. A checkbox in\nthe header row is for selecting all rows on a page. This example includes\nkeyboard logic for selecting or deselecting multiple sequential rows at a time\nby holding down the shift key. Table row sizes comes in small, medium, and large. The default size is medium. Columns can be sorted by selecting table headers. You can alternate row background color to help make long rows easier to scan.\nDon’t use striped and group rows at the same time. The Caption component specifies the title of a table. Data within a cell will wrap by default. Truncate the content with an ellipsis by usingisTruncated. Efficiently render large datasets usingreact-window."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-tables",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Table }from '@zendeskgarden/react-tables'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Table component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Table><Caption/><Table.Head><Table.HeaderRow><Table.HeaderCell/><Table.HeaderCell/><Table.SortableCell/>{/* Optional */}{/* etc. */}</HeaderRow></Table.Head><Table.Body><Table.GroupRow>{/* Optional */}<Table.Cell/></Table.GroupRow><Table.Row><Table.Cell/><Table.Cell/>{/* etc. */}</Table.Row>{/* etc. */}</Table.Body></Table>"
                },
                {
                    "type": "p",
                    "text": "Implementation notes"
                },
                {
                    "type": "list",
                    "items": [
                        "Follow theMDN Table Accessibility\nPracticesguidelines to ensure the table data is accessible to screen-readers",
                        "Use theTable.SortableCellcomponent in a sortable table to ensure\nthat the header is interactive and accessible. SeeSortableCell\nexample."
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsTableHTMLAttributes<HTMLTableElement> Removes interactive styling from table rows Sets the table size ExtendsHTMLAttributes<HTMLTableSectionElement> ExtendsHTMLAttributes<HTMLTableCaptionElement> ExtendsTdHTMLAttributes<HTMLTableCellElement> Applies styling for a cell that contains an overflow menu Applies minimum fixed width styling (e.g. for cells that contain checkboxes or icons) Truncates long text with an ellipsis Adjusts thewidthof the cell ExtendsHTMLAttributes<HTMLTableRowElement> The GroupRow component provides styles to show a title row for a group of rows. Nest it within theTable.Bodycomponent. SeeGroupRow example. ExtendsHTMLAttributes<HTMLTableSectionElement> Applies sticky header styling ExtendsThHTMLAttributes<HTMLTableCellElement> Applies styling for a cell that contains an overflow menu Applies minimum fixed width styling (e.g. for cells that contain checkboxes or icons) Truncates long text with an ellipsis Adjusts thewidthof the cell ExtendsHTMLAttributes<HTMLTableRowElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> The OverflowButton component enables implementation of an overflow menu in aTable.Cell. Nest it\nwithin aTooltipand provide anaria-labelto ensure it is accessible. SeeOverflowButton example. ExtendsHTMLAttributes<HTMLTableRowElement> Applies selected styling Applies striped styling ExtendsButtonHTMLAttributes<HTMLButtonElement> A SortableCell displays an interactive header cell with accesssibility attributes applied to enable\nimplementation of a sortable table. SeeSortableCell example. Passes props to the cell Sets the sort order Sets the width of the cell"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/tabs",
            "title": "Tabs / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledOrientation",
                        "Default",
                        "Disabled",
                        "Orientation",
                        "Configuration",
                        "APITabsTabs.Tab",
                        "Tabs",
                        "Tabs.Tab"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Tabs to organize related content in a single view. This helps users navigate related content without having to switch contexts."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledOrientation",
                        "Default",
                        "Disabled",
                        "Orientation",
                        "Configuration",
                        "APITabsTabs.Tab",
                        "Tabs",
                        "Tabs.Tab"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To filter information into easily parsable views",
                        "To organize related content and controls within a single page"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To guide users through a task list, use aStepperinstead",
                        "As a secondary navigation bar that spans multiple pages. UseAnchorsinstead."
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Tab component. Individual tabs can be disabled to prevent users from interacting with them. Tab layout is horizontal by default and can also stack vertically."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-tabs",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Tabs }from '@zendeskgarden/react-tabs'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Arranges the tabs vertically"
                },
                {
                    "type": "code",
                    "code": "((selectedItem:any)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles tab selection The selected tab'sitemvalue Specifies the currently selected tab ExtendsHTMLAttributes<HTMLDivElement> Indicates that the element is not interactive Defines a unique value to identify the tab. Provided to theonChangeevent in theTabscomponent. ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLDivElement> Defines a value used to match a tab panel with its associated tab"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/tags",
            "title": "Tags / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAvatarCloseColorShapeSizeRegular weight",
                        "Default",
                        "Avatar",
                        "Close",
                        "Color",
                        "Shape",
                        "Size",
                        "Regular weight",
                        "Configuration",
                        "APITag",
                        "Tag"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tags let users categorize content using a keyword."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAvatarCloseColorShapeSizeRegular weight",
                        "Default",
                        "Avatar",
                        "Close",
                        "Color",
                        "Shape",
                        "Size",
                        "Regular weight",
                        "Configuration",
                        "APITag",
                        "Tag"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To add metadata to an element such as category, attribute, or property",
                        "To communicate status",
                        "To represent parameters of a filter"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To prompt an action by the user, use aButtoninstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The default usage of a Tag component. Medium and large Tags can contain an Avatar. Tags can be dismissed. Tags can be colored using atheme palettehue or hex value. Tags are rectangular by default. Other options are pill and round. Round tags\nare reserved for very short content like two digit numbers. Tags can be small, medium, or large. They are medium by default. Tag content is bold by default, but can be regular weight too."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-tags",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Tag }from '@zendeskgarden/react-tags'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Tag component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Tag><Tag.Avatar/>{/* optional */}{/* tag text */}<Tag.Close/>{/* optional */}</Tag>"
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> The Tag component applies appropriate styles to itself and its descendents based on the props and\nchild elements provided. Sets the color of the tag. Refer to themingcolorsorPALETTEfor available colors. Useprimary hues–blue,green,grey,kale,red,yelloworprimaryHue,successHue,neutralHue,chromeHue,dangerHue,warningHue– to apply color based on light/dark mode. Accepts any hex value. Applies pill styling Applies regular (non-bold) font weight Applies styles to round the tag Adjusts font size and padding ExtendsHTMLAttributes<HTMLElement> The Avatar component displays the child media with appropriate styles applied. Nest it within theTagcomponent as the first child. ExtendsHTMLAttributes<HTMLButtonElement> The Close component displays an icon with appropriate styles and accessibility attributes to allow tag\ndismissal. Nest it within theTagcomponent as the last child."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/textarea",
            "title": "Textarea / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAuto-expandHidden labelManual resizing",
                        "Default",
                        "Auto-expand",
                        "Hidden label",
                        "Manual resizing",
                        "Configuration",
                        "APIFieldTextarea",
                        "Field",
                        "Textarea"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Textarea is a form control for multi-line text."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAuto-expandHidden labelManual resizing",
                        "Default",
                        "Auto-expand",
                        "Hidden label",
                        "Manual resizing",
                        "Configuration",
                        "APIFieldTextarea",
                        "Field",
                        "Textarea"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To enter multi-line text"
                    ]
                },
                {
                    "type": "p",
                    "text": "By default, textarea height is fixed. Textarea height can be configured to resize automatically based on user input. Textarea labels can be hidden. Drag handles can be applied to a textarea for manual resizing."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Textarea, Field }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Textarea component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Field.Label/><Textarea/></Field>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to its childTextareafield by\nassociating it with the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest a Hint within aFieldcomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest a Label within aFieldcomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsTextareaHTMLAttributes<HTMLTextAreaElement> Nest a Textarea within aFieldcomponent. Applies insetbox-shadowstyling on focus Removes borders and padding Applies compact styling Enables manual vertical resize Defines the maximum height in rows Defines the minimum height in rows Applies validation state styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/theme-object",
            "title": "Theme object / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "What it isDEFAULT_THEME",
                        "DEFAULT_THEME",
                        "Configuration",
                        "APIbordersborderRadiiborderStylesborderWidthsbreakpointscolorscomponentsdocumentfontsfontSizesfontWeightsiconSizeslineHeightsopacitypalettertlshadowsshadowWidthsspacewindow",
                        "borders",
                        "borderRadii",
                        "borderStyles",
                        "borderWidths",
                        "breakpoints",
                        "colors",
                        "components",
                        "document",
                        "fonts",
                        "fontSizes",
                        "fontWeights",
                        "iconSizes",
                        "lineHeights",
                        "opacity",
                        "palette",
                        "rtl",
                        "shadows",
                        "shadowWidths",
                        "space",
                        "window"
                    ]
                },
                {
                    "type": "p",
                    "text": "The theme object provides global values for component styling."
                },
                {
                    "type": "list",
                    "items": [
                        "What it isDEFAULT_THEME",
                        "DEFAULT_THEME",
                        "Configuration",
                        "APIbordersborderRadiiborderStylesborderWidthsbreakpointscolorscomponentsdocumentfontsfontSizesfontWeightsiconSizeslineHeightsopacitypalettertlshadowsshadowWidthsspacewindow",
                        "borders",
                        "borderRadii",
                        "borderStyles",
                        "borderWidths",
                        "breakpoints",
                        "colors",
                        "components",
                        "document",
                        "fonts",
                        "fontSizes",
                        "fontWeights",
                        "iconSizes",
                        "lineHeights",
                        "opacity",
                        "palette",
                        "rtl",
                        "shadows",
                        "shadowWidths",
                        "space",
                        "window"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To toggle between light and dark themes",
                        "To extend as the theming baseline for a customizedTheme provider"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To reference component styling values, use the contextthemeAPIoruseThemehookinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The following JSON displays the theme object in its entirety."
                },
                {
                    "type": "code",
                    "code": "{\"borders\":{\"sm\":\"1px solid\",\"md\":\"3px solid\"},\"borderRadii\":{\"sm\":\"2px\",\"md\":\"4px\"},\"borderStyles\":{\"solid\":\"solid\"},\"borderWidths\":{\"sm\":\"1px\",\"md\":\"3px\"},\"breakpoints\":{\"xs\":\"0px\",\"sm\":\"576px\",\"md\":\"768px\",\"lg\":\"992px\",\"xl\":\"1200px\"},\"colors\":{\"base\":\"light\",\"primaryHue\":\"blue\",\"dangerHue\":\"red\",\"warningHue\":\"yellow\",\"successHue\":\"green\",\"neutralHue\":\"grey\",\"chromeHue\":\"kale\",\"variables\":{\"dark\":{\"background\":{\"default\":\"neutralHue.1100\",\"raised\":\"neutralHue.1000\",\"recessed\":\"neutralHue.1200\",\"subtle\":\"neutralHue.1000\",\"emphasis\":\"neutralHue.600\",\"success\":\"successHue.1000\",\"warning\":\"warningHue.1000\",\"danger\":\"dangerHue.1000\",\"primaryEmphasis\":\"primaryHue.600\",\"successEmphasis\":\"successHue.600\",\"warningEmphasis\":\"warningHue.600\",\"dangerEmphasis\":\"dangerHue.600\",\"disabled\":\"rgba(neutralHue.500, 100)\"},\"border\":{\"default\":\"neutralHue.800\",\"emphasis\":\"neutralHue.600\",\"subtle\":\"neutralHue.900\",\"success\":\"successHue.900\",\"warning\":\"warningHue.900\",\"danger\":\"dangerHue.900\",\"primaryEmphasis\":\"primaryHue.600\",\"successEmphasis\":\"successHue.600\",\"warningEmphasis\":\"warningHue.600\",\"dangerEmphasis\":\"dangerHue.600\",\"disabled\":\"neutralHue.800\"},\"foreground\":{\"default\":\"neutralHue.300\",\"subtle\":\"neutralHue.500\",\"onEmphasis\":\"neutralHue.1100\",\"primary\":\"primaryHue.600\",\"success\":\"successHue.400\",\"warning\":\"warningHue.400\",\"danger\":\"dangerHue.400\",\"successEmphasis\":\"successHue.300\",\"warningEmphasis\":\"warningHue.300\",\"dangerEmphasis\":\"dangerHue.300\",\"disabled\":\"neutralHue.700\"},\"shadow\":{\"small\":\"rgba(neutralHue.1200, 1100)\",\"medium\":\"rgba(neutralHue.1200, 800)\",\"large\":\"rgba(neutralHue.1200, 1000)\"}},\"light\":{\"background\":{\"default\":\"palette.white\",\"raised\":\"palette.white\",\"recessed\":\"neutralHue.100\",\"subtle\":\"neutralHue.100\",\"emphasis\":\"neutralHue.700\",\"success\":\"successHue.100\",\"warning\":\"warningHue.100\",\"danger\":\"dangerHue.100\",\"primaryEmphasis\":\"primaryHue.700\",\"successEmphasis\":\"successHue.700\",\"warningEmphasis\":\"warningHue.700\",\"dangerEmphasis\":\"dangerHue.700\",\"disabled\":\"rgba(neutralHue.700, 100)\"},\"border\":{\"default\":\"neutralHue.300\",\"emphasis\":\"neutralHue.600\",\"subtle\":\"neutralHue.200\",\"success\":\"successHue.300\",\"warning\":\"warningHue.300\",\"danger\":\"dangerHue.300\",\"primaryEmphasis\":\"primaryHue.700\",\"successEmphasis\":\"successHue.700\",\"warningEmphasis\":\"warningHue.700\",\"dangerEmphasis\":\"dangerHue.700\",\"disabled\":\"neutralHue.300\"},\"foreground\":{\"default\":\"neutralHue.900\",\"subtle\":\"neutralHue.700\",\"onEmphasis\":\"palette.white\",\"primary\":\"primaryHue.700\",\"success\":\"successHue.700\",\"warning\":\"warningHue.700\",\"danger\":\"dangerHue.700\",\"successEmphasis\":\"successHue.900\",\"warningEmphasis\":\"warningHue.900\",\"dangerEmphasis\":\"dangerHue.900\",\"disabled\":\"neutralHue.600\"},\"shadow\":{\"small\":\"rgba(neutralHue.1200, 200)\",\"medium\":\"rgba(neutralHue.1200, 200)\",\"large\":\"rgba(neutralHue.1200, 200)\"}}}},\"components\":{},\"fonts\":{\"mono\":\"SFMono-Regular,Consolas,\\\"Liberation Mono\\\",Menlo,Courier,monospace\",\"system\":\"system-ui,-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\\\"Helvetica Neue\\\",Arial,sans-serif\"},\"fontSizes\":{\"xs\":\"10px\",\"sm\":\"12px\",\"md\":\"14px\",\"lg\":\"18px\",\"xl\":\"22px\",\"xxl\":\"26px\",\"xxxl\":\"36px\"},\"fontWeights\":{\"thin\":100,\"extralight\":200,\"light\":300,\"regular\":400,\"medium\":500,\"semibold\":600,\"bold\":700,\"extrabold\":800,\"black\":900},\"iconSizes\":{\"sm\":\"12px\",\"md\":\"16px\",\"lg\":\"26px\"},\"lineHeights\":{\"sm\":\"16px\",\"md\":\"20px\",\"lg\":\"24px\",\"xl\":\"28px\",\"xxl\":\"32px\",\"xxxl\":\"44px\"},\"opacity\":{\"100\":0.08,\"200\":0.16,\"300\":0.24,\"400\":0.32,\"500\":0.4,\"600\":0.48,\"700\":0.56,\"800\":0.64,\"900\":0.72,\"1000\":0.8,\"1100\":0.88,\"1200\":0.96},\"palette\":{/* see API for details */},\"rtl\":false,\"shadowWidths\":{\"xs\":\"1px\",\"sm\":\"2px\",\"md\":\"3px\"},\"shadows\":{\"xs\":\" => expression\",\"sm\":\" => expression\",\"md\":\" => expression\",\"lg\":\"(offsetY, blurRadius, color) => expression\"},\"space\":{\"base\":4,\"xxs\":\"4px\",\"xs\":\"8px\",\"sm\":\"12px\",\"md\":\"20px\",\"lg\":\"32px\",\"xl\":\"40px\",\"xxl\":\"48px\"}}"
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-theming",
                        "Depsnpm install react react-dom styled-components",
                        "Importimport{ DEFAULT_THEME }from '@zendeskgarden/react-theming'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The top-level keys ofDEFAULT_THEME. Borders can be small or medium and represent the combination ofborderWidthsandborderStyles. Border radii can be small or medium and determine the corner radius for\nvarious components. The theme object provides onesolidborder style. Remember to updatebordersin conjunction with any border style override. Border widths can be small or medium. Remember to updatebordersin conjunction with any border width override. Themed breakpoints define minimum dimensions at which layout will change\nbased on media queries, adapting to various screen sizes. Breakpoint values\nare used by the responsiveGridand themediaQueryutility. The colors object provides key values for palette hues used across the component\nsystem. Thebasevalue establishes the color scheme for component rendering.\nThe colorvariablescoincide with a “light” or “dark”base, identifying key\ncolors with critical semantic meaning in the system. When combined with thegetColorutility, these variables form a\nrobust foundation for color usage in Garden and customextensioncomponents. The base specifies either “light” or “dark” for the theme’s color scheme. This table provides a reference for key hue values. Provides primary accent colors Represents danger or error states Represents caution or warning states Represents success states Provides neutral or disabled colors Provides color for drop shadows and Chrome navigation elements Garden uses color variable key notation to reference specific hex and RGBA\nvalues for the current color scheme. Variables can refer tohues,palettecolors, or literal CSScolor\nvalues. A\nspecialrgba(hue.shade, opacity)notation may be used to reference Garden\ncolor andopacityvalues. The following lists identify color\nvariables and expected usage."
                },
                {
                    "type": "list",
                    "items": [
                        "Backgroundbackground.defaultdefault background for main surfacesbackground.raisedbackground used for raised and floating surfacesbackground.recessedbackground that sits below the main surfacebackground.subtlesubtle background that sits on the same plane as the main surfacebackground.emphasisstrong background, usually for interactive elementsbackground.successbackground used for success statesbackground.warningbackground used for warning statesbackground.dangerbackground used for danger statesbackground.primaryEmphasisstrong background for primary interaction elementsbackground.successEmphasisstrong background for success interaction elementsbackground.warningEmphasisstrong background for warning interaction elementsbackground.dangerEmphasisstrong background for danger interaction elementsbackground.disabledbackground used for disabled states",
                        "background.defaultdefault background for main surfaces",
                        "background.raisedbackground used for raised and floating surfaces",
                        "background.recessedbackground that sits below the main surface",
                        "background.subtlesubtle background that sits on the same plane as the main surface",
                        "background.emphasisstrong background, usually for interactive elements",
                        "background.successbackground used for success states",
                        "background.warningbackground used for warning states",
                        "background.dangerbackground used for danger states",
                        "background.primaryEmphasisstrong background for primary interaction elements",
                        "background.successEmphasisstrong background for success interaction elements",
                        "background.warningEmphasisstrong background for warning interaction elements",
                        "background.dangerEmphasisstrong background for danger interaction elements",
                        "background.disabledbackground used for disabled states",
                        "Borderborder.defaultdefault layout borders and dividersborder.emphasisinteractive bordersborder.subtleinner layout borders and dividersborder.successsuccess layout bordersborder.warningwarning layout bordersborder.dangerdanger layout bordersborder.primaryEmphasisstrong border for primary interaction elementsborder.successEmphasisstrong border for success interaction elementsborder.warningEmphasisstrong border for warning interaction elementsborder.dangerEmphasisstrong border for danger interaction elementsborder.disabledborder used for disabled states",
                        "border.defaultdefault layout borders and dividers",
                        "border.emphasisinteractive borders",
                        "border.subtleinner layout borders and dividers",
                        "border.successsuccess layout borders",
                        "border.warningwarning layout borders",
                        "border.dangerdanger layout borders",
                        "border.primaryEmphasisstrong border for primary interaction elements",
                        "border.successEmphasisstrong border for success interaction elements",
                        "border.warningEmphasisstrong border for warning interaction elements",
                        "border.dangerEmphasisstrong border for danger interaction elements",
                        "border.disabledborder used for disabled states",
                        "Foregroundforeground.defaultdefault textforeground.subtleicons and meta informationforeground.onEmphasistext on strong backgroundsforeground.primaryprimary textforeground.successsuccess textforeground.warningwarning textforeground.dangerdanger textforeground.successEmphasisstrong success textforeground.warningEmphasisstrong warning textforeground.dangerEmphasisstrong danger textforeground.disableddisabled text",
                        "foreground.defaultdefault text",
                        "foreground.subtleicons and meta information",
                        "foreground.onEmphasistext on strong backgrounds",
                        "foreground.primaryprimary text",
                        "foreground.successsuccess text",
                        "foreground.warningwarning text",
                        "foreground.dangerdanger text",
                        "foreground.successEmphasisstrong success text",
                        "foreground.warningEmphasisstrong warning text",
                        "foreground.dangerEmphasisstrong danger text",
                        "foreground.disableddisabled text",
                        "Shadowshadow.smallshadow color for smaller componentsshadow.mediumshadow color for medium size componentsshadow.largeshadow color for larger components",
                        "shadow.smallshadow color for smaller components",
                        "shadow.mediumshadow color for medium size components",
                        "shadow.largeshadow color for larger components"
                    ]
                },
                {
                    "type": "p",
                    "text": "The components object is an empty container for adding targeted component\nstyling. Its keys areCOMPONENT_IDvalues. (Use theGarden InspectChrome extension to view component IDs.) Its values are CSS template strings. A document object is used to support components that require HTMLdocumentcontext (such as menus or modals). This example illustrates how components\ncould be rendered against an inline frame."
                },
                {
                    "type": "code",
                    "code": "consttheme={...DEFAULT_THEME,document:document.getElementsByTagName('iframe')[0].contentDocument};<ThemeProvidertheme={theme}>...</ThemeProvider>;"
                },
                {
                    "type": "p",
                    "text": "Fonts can bemonoorsystem. The monospace font stack is used to displayCodefragments andCode blocksnippets. The system font stack is the default used throughout Zendesk\nproducts. Font sizes are used withlineHeightsto define the basis\nfor Garden’stype scale. The scale\nreducesmonospaceequivalents by one\npixel so that x-height is proportional with the surrounding system font. Font weight names aremappedto a complete set of corresponding values. Theregularandsemiboldvalues are weights used by Garden components. The icon sizes object corresponds with the small, medium, and large icons\nprovided by Garden’sSVG Iconlibrary. Line heights are used withfontSizesto define the basis for\nGarden’stype scale. See thegetLineHeightutility for obtaining\nunitless line height values. Opacity values work together withcolorsto offer standard RGBA\ntransparency. This object lets you reference, modify, and extend Garden’s entirePalette(with the exception ofpalette.productvalues, which cannot be customized). The RTL theme object value determines whether components will lay out\nleft-to-right or right-to-left. The shadows portion of the theme object contains three functions."
                },
                {
                    "type": "list",
                    "items": [
                        "xs,sm, andmdeach take an RGBAcolorstring parameter and are\ntypically used to apply component focus rings. These functions correspond to the\nvalues provided byshadowWidths.",
                        "lgtakesoffsetY,blurRadius, andcolorstring parameters used to\napply a drop shadow under components that float above the surface (modals,\nnotifications, etc.). By default, the color variable used isneutralHue."
                    ]
                },
                {
                    "type": "p",
                    "text": "Shadow widths can be small or medium. Remember to updateshadowsin conjunction with any shadow width override. Provides a series of values, fromxxsthroughxxl, that express Garden’s\nstandard spacing units. These values are used to manageGridgutter sizing and can be leveraged for page layouts.\nThebaseunit is the fundamental factor used to compute Garden’s base-4\ncomponent system. Modifying a theme’sspace.basewill cascade changes to\ncomponent size, padding, and margins. Likedocument, the window object is used to support components that\nrequire HTMLwindowcontext."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/theme-provider",
            "title": "Theme provider / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBrandingExtensionNestingTargeting",
                        "Default",
                        "Branding",
                        "Extension",
                        "Nesting",
                        "Targeting",
                        "Configuration",
                        "APIThemeProvider",
                        "ThemeProvider"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Theme provider is a wrapper that provides theming values to all of the components it contains."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultBrandingExtensionNestingTargeting",
                        "Default",
                        "Branding",
                        "Extension",
                        "Nesting",
                        "Targeting",
                        "Configuration",
                        "APIThemeProvider",
                        "ThemeProvider"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "As the root component of the Garden DOM, where it provides global context\nforcolormode andRTLlayout",
                        "As a nested wrapper for a subset of components that require themed styling"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a theme provided to styled components. Use thegetColorutility with semanticcolor\nvariablesto ensure custom components work\nwell in dark mode. You can override the default Theme provider for a branded component\nexperience. In this example, Garden’sprimaryHueis replaced and corners are\nset to square. The default theme can be extended with custom values. In this example, thepaletteadds a new deep orange hue\nwhich replaces Garden’s defaultdangerHue. A nested Theme provider can access and modify parent theming values. In this\nexample, nesting is used to override the size, color, and shape of thedefaultstyled component. The theme’scomponentsobject can\noverride styling for a targeted component type. In this example, GardenTabsare restyled to appear below associated panel\ncontent."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-theming",
                        "Depsnpm install react react-dom styled-components",
                        "Importimport{ ThemeProvider }from '@zendeskgarden/react-theming'"
                    ]
                },
                {
                    "type": "code",
                    "code": "IGardenTheme|((theme:IGardenTheme)=>IGardenTheme)"
                },
                {
                    "type": "p",
                    "text": "Provides values for component styling. See styled-componentsThemeProviderfor details."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/tiles",
            "title": "Tiles / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDescriptionDisabledLayout",
                        "Default",
                        "Description",
                        "Disabled",
                        "Layout",
                        "Configuration",
                        "APITiles",
                        "Tiles"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tiles are Radio buttons styled with icons or images."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDescriptionDisabledLayout",
                        "Default",
                        "Description",
                        "Disabled",
                        "Layout",
                        "Configuration",
                        "APITiles",
                        "Tiles"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "LikeRadios, Tiles are for choices that can’t occur at the same time"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To choose more than one option at once, use aCheckboxinstead",
                        "To select from a long list of options, use aCombobox",
                        "To define an action, use aButtoninstead",
                        "For navigation, use anAnchorinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Tiles component. A description adds additional context to the Tile label. Disabled Tiles are not interactive and may not be perceived by a screen reader. Content within a single Tile is vertically centered by default. The layout can\nbe adjusted by settingisCenteredto false."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Tiles }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Centers tile content Sets the name used to reference the value of the control Handles selection change event Sets the selected value in a controlled tiles component ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLLabelElement> Indicates that the element is not interactive Sets the value of the tile"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/timeline",
            "title": "Timeline / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAlternatingCustom mediaOpposite content",
                        "Default",
                        "Alternating",
                        "Custom media",
                        "Opposite content",
                        "How to use it wellNest content when necessaryMake interactive elements explicitUse correct hierarchy",
                        "Nest content when necessary",
                        "Make interactive elements explicit",
                        "Use correct hierarchy",
                        "Configuration",
                        "APITimeline",
                        "Timeline"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Timeline lists events over a period of time."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultAlternatingCustom mediaOpposite content",
                        "Default",
                        "Alternating",
                        "Custom media",
                        "Opposite content",
                        "How to use it wellNest content when necessaryMake interactive elements explicitUse correct hierarchy",
                        "Nest content when necessary",
                        "Make interactive elements explicit",
                        "Use correct hierarchy",
                        "Configuration",
                        "APITimeline",
                        "Timeline"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To track an issue over time",
                        "To show events associated with an item"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To guide users through a step by step process, use aStepperinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Timeline component is made up of individual Timeline items. Item content appears after the item marker by default. Items are displayed on alternating sides of the Timeline. The item marker can also be replaced with another icon, image, or avatar. In the opposite layout, a second content area is present on the opposite side of the Timeline. Components such as links, buttons, and images can be nested in each Timeline item. Do include images and other nested content if appropriate. Creating a visual affordance for a link or action is preferred to making the entire item interactive. Create explicit visual affordances for interactive items. Don’t rely on hover states to show that items are interactive. Item content can be replaced with any text style. Make sure to use appropriate hierarchy when designing your content. Use balanced and appropriate typographic hierarchy. Don’t mix up typographic hierarchy when customizing item content."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-accordions",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Timeline }from '@zendeskgarden/react-accordions'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Timeline component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Timeline><Timeline.Item><Timeline.OppositeContent/>{/* Optional */}<Timeline.Content/></Timeline.Item>{/* other items */}</Timeline>"
                },
                {
                    "type": "p",
                    "text": "ExtendsOlHTMLAttributes<HTMLOListElement> Applies alternate styling ExtendsHTMLAttributes<HTMLDivElement> Nest the Content within anItemcomponent. ExtendsLiHTMLAttributes<HTMLLIElement> An Item provides the DOM structure and styling for the default,OppositeContent, and alternate content layouts. Replaces the dot with an icon Provides surface color for an icon placed on a non-default background. Accepts acolor variablekey (i.e.background.recessed) to render based on light/dark mode, or any hex value. ExtendsHTMLAttributes<HTMLDivElement> The OppositeContent component displays content on the opposite side of the separator. Nest it\nwithin anItemcomponent."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/toggle",
            "title": "Toggle / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Regular weight label",
                        "Validation",
                        "Configuration",
                        "APIFieldToggle",
                        "Field",
                        "Toggle"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Toggle lets users turn something on and off like a light switch. Unlike a Checkbox, which is used for selection, a Toggle is used for activation."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledHidden labelHint textRegular weight labelValidation",
                        "Default",
                        "Disabled",
                        "Hidden label",
                        "Hint text",
                        "Regular weight label",
                        "Validation",
                        "Configuration",
                        "APIFieldToggle",
                        "Field",
                        "Toggle"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To see or compare the results of a settings change",
                        "To activate a mode (such as “dark mode”) which takes immediate effect"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users select from a list of settings, useCheckboxesinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Toggle’s label is part of its touch target. A disabled Toggle prevents user interaction. It doesn’t appear in the tab order, can’t receive focus, and may not read\naloud by a screenreader. Toggle labels can be hidden. Use hint text for additional context. The label is bold by default. It can be made regular weight too. Show success, warning, or danger validation messages with the Message component."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-forms",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Toggle, Field }from '@zendeskgarden/react-forms'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Toggle component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Field><Toggle><Field.Label/><Field.Hint/><Field.Message/></Toggle></Field>"
                },
                {
                    "type": "p",
                    "text": "A Field provides accessibility attributes to its childTogglefield by associating it\nwith the correspondingField.LabelandField.Hint. ExtendsHTMLAttributes<HTMLDivElement> Nest the Hint within theTogglecomponent. ExtendsLabelHTMLAttributes<HTMLLabelElement> Nest the Label within theTogglecomponent. Hides the label visually without hiding it from screen readers Applies regular (non-bold) font weight ExtendsHTMLAttributes<HTMLDivElement> The Message component applies appropriate icon and styles based on the validation provided. Nest\nit within aFieldcomponent. Applies validation state styling Defines the aria-label for the validation icon ExtendsInputHTMLAttributes<HTMLInputElement> Nest a Toggle within aFieldcomponent. Applies compact styling"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/toggle-button",
            "title": "Toggle button / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledSizeType",
                        "Default",
                        "Disabled",
                        "Size",
                        "Type",
                        "Configuration",
                        "APIToggleButton",
                        "ToggleButton"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Toggle Button (like a Toggle) lets users turn something on and off like a light switch. Unlike a Checkbox, which is used for selection, a Toggle Button is used for activation."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledSizeType",
                        "Default",
                        "Disabled",
                        "Size",
                        "Type",
                        "Configuration",
                        "APIToggleButton",
                        "ToggleButton"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To see or compare the results of a settings change",
                        "To activate a mode (such as “dark mode”) which takes immediate effect"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users select from a list of settings, useCheckboxesinstead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Toggle Button component. A disabled Toggle Button prevents user interaction. It doesn’t appear in the\ntab order, can’t receive focus, and may not be read aloud by a screenreader. Toggle Buttons can be small, medium, or large. The default size is medium. Toggle Buttons can be default, primary, or basic."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ ToggleButton }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsButtonHTMLAttributes<HTMLButtonElement> Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies link (anchor) button styling Applies neutral button styling Applies pill button styling Determines if the button is pressed. Use \"mixed\" to indicate that the toggle controls other elements which do not share the same value. Applies primary button styling Stretches the button fill to its container width Specifies the button size"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/toggle-icon-button",
            "title": "Toggle icon button / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledShapeSizeType",
                        "Default",
                        "Disabled",
                        "Shape",
                        "Size",
                        "Type",
                        "How to use it wellDon’t leave users in the dark",
                        "Don’t leave users in the dark",
                        "Configuration",
                        "APIToggleIconButton",
                        "ToggleIconButton"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Toggle Icon Button (like a Toggle Button) lets users turn something on and off like a light switch. It is used for repeated or persistent actions on a page and lacks a visible label to simplify the UI."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultDisabledShapeSizeType",
                        "Default",
                        "Disabled",
                        "Shape",
                        "Size",
                        "Type",
                        "How to use it wellDon’t leave users in the dark",
                        "Don’t leave users in the dark",
                        "Configuration",
                        "APIToggleIconButton",
                        "ToggleIconButton"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To see or compare the results of a settings change",
                        "To cause an immediate effect, such as making text bold",
                        "To simplify the appearance of repeated or persistent actions on a page",
                        "To enable action in a toolbar"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To let users select from a list of settings, useCheckboxesinstead",
                        "To include an icon and a label, use aButtonwith a start or end icon"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Toggle Icon Button component. A disabled Toggle Icon Button prevents user interaction. It doesn’t appear in\nthe tab order, can’t receive focus, and may not be read aloud by a\nscreenreader. Toggle Icon Buttons are circular by default, but they can be squares too. Toggle Icon Buttons can be small, medium, or large. The default size is medium. Toggle Icon Buttons have three types: basic, outline, and primary. The default type is basic. Include aTooltipto help any users who may be unfamiliar with the\nicon."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-buttons",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ ToggleIconButton }from '@zendeskgarden/react-buttons'"
                    ]
                },
                {
                    "type": "p",
                    "text": "The ToggleIconButton component follows this structure:"
                },
                {
                    "type": "code",
                    "code": "<Tooltip>{/* recommended */}<ToggleIconButton>{/* icon here */}</ToggleIconButton></Tooltip>"
                },
                {
                    "type": "p",
                    "text": "ExtendsButtonHTMLAttributes<HTMLButtonElement> Nest the ToggleIconButton within aTooltipand provide anaria-labelto ensure it is\naccessible. Seedefault example. Applies insetbox-shadowstyling on focus Applies basic button styling Applies danger styling Applies neutral button styling Applies pill button styling Determines if the button is pressed. Use \"mixed\" to indicate that the toggle controls other elements which do not share the same value. Applies primary button styling Rotates icon 180 degrees Specifies the button size"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/tooltip",
            "title": "Tooltip / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacementSizeType",
                        "Default",
                        "Placement",
                        "Size",
                        "Type",
                        "Configuration",
                        "APITooltip",
                        "Tooltip"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tooltips appear when a user hovers or focuses an element. They provide contextual information about the element they are paired with."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacementSizeType",
                        "Default",
                        "Placement",
                        "Size",
                        "Type",
                        "Configuration",
                        "APITooltip",
                        "Tooltip"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To describe the function of an element when it might be ambiguous",
                        "To describe the function of unlabeled icons"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To provide information a user needs to know or remember",
                        "To display truncated text, use a title attribute instead"
                    ]
                },
                {
                    "type": "p",
                    "text": "The default usage of a Tooltip component. There are 13 placement options. By default, the Tooltip occupies the top\nposition.autouses the placement with the most available space. Tooltips can be small, medium, large, or extra-large. Only large and extra-large\nsizes can contain a Title. Tooltips can be light or dark. Small and medium tooltips should default to dark.\nLarge and extra-large tooltips should default to light."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-tooltips",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Tooltip }from '@zendeskgarden/react-tooltips'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Appends the tooltip to the element provided Defines the content of the tooltip Adds milliseconds of delay to the opening and closing of the tooltip Adds an arrow to the tooltip Displays the tooltip on initial render Displays the tooltip Adjusts the placement of the tooltip Defines the ref key used to position the tooltip Adjusts the padding and font size Specifies the tooltip type Sets thez-indexof the tooltip ExtendsHTMLAttributes<HTMLParagraphElement> ExtendsHTMLAttributes<HTMLDivElement>"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/tooltip-dialog",
            "title": "Tooltip dialog / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacement",
                        "Default",
                        "Placement",
                        "Configuration",
                        "APITooltipDialog",
                        "TooltipDialog"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Tooltip dialog provides contextual information about a paired element. It either opens automatically or through user action."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultPlacement",
                        "Default",
                        "Placement",
                        "Configuration",
                        "APITooltipDialog",
                        "TooltipDialog"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To enable user action within a tooltip",
                        "To provide a focus loop when actions need to be inside a tooltip"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To reveal read-only helpful information about an element on hover, use aTooltip"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Tooltip Dialog contains a header and a way to exit the experience. A Tooltip dialog component can contain a call-to-action, an icon, and\na progress indicator. There are 13 placement options available. The Tooltip Dialog occupies thetopposition by default. Theautoplacement chooses the position\nwith the most available space."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-modals",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ TooltipDialog }from '@zendeskgarden/react-modals'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsHTMLAttributes<HTMLDivElement> Defines the DOM element that the modal will attatch to Passes HTML attributes to the backdrop element Directs keyboard focus to the modal on mount Adds an arrow to the tooltop Animates the modal"
                },
                {
                    "type": "code",
                    "code": "((event:KeyboardEvent<Element>|MouseEvent<Element,MouseEvent>)=>void)"
                },
                {
                    "type": "p",
                    "text": "Handles close actions. Can be triggered from the backdrop and from the close icon. The DOM event that triggered the close action Adjusts the placement of the tooltip Positions the modal relative to the providedHTMLElement Returns keyboard focus to the element that triggered the modal Sets thez-indexof the tooltip ExtendsHTMLAttributes<HTMLDivElement> ExtendsButtonHTMLAttributes<HTMLButtonElement> ExtendsHTMLAttributes<HTMLDivElement> ExtendsHTMLAttributes<HTMLSpanElement> ExtendsHTMLAttributes<HTMLDivElement> Updates the element's HTML tag"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/typography",
            "title": "Typography / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itBlock quoteEllipsis textFont modifiersType scale",
                        "Block quote",
                        "Ellipsis text",
                        "Font modifiers",
                        "Type scale",
                        "Configuration",
                        "APIBlockquoteEllipsisLGMDSMXLXXLXXXL",
                        "Blockquote",
                        "Ellipsis",
                        "LG",
                        "MD",
                        "SM",
                        "XL",
                        "XXL",
                        "XXXL"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Typography components to present content clearly and consistently on the page."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itBlock quoteEllipsis textFont modifiersType scale",
                        "Block quote",
                        "Ellipsis text",
                        "Font modifiers",
                        "Type scale",
                        "Configuration",
                        "APIBlockquoteEllipsisLGMDSMXLXXLXXXL",
                        "Blockquote",
                        "Ellipsis",
                        "LG",
                        "MD",
                        "SM",
                        "XL",
                        "XXL",
                        "XXXL"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use Blockquote to represent a body of text that is from another source. Use Ellipsis to automatically provide text content with a native title attribute and text-overflow\nstyling. You can apply two modifiers to type: bold and monospace. Type components come in small, medium, large, extra-large, extra-extra-large, and\nextra-extra-extra-large."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-typography",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Blockquote, Ellipsis, LG, MD, SM, XL, XXL, XXXL }from '@zendeskgarden/react-typography'"
                    ]
                },
                {
                    "type": "p",
                    "text": "ExtendsBlockquoteHTMLAttributes<HTMLQuoteElement> Controls the spacing between sibling blockquotes and paragraphs ExtendsHTMLAttributes<HTMLDivElement> Updates the element's HTML tag Overrides the auto-generatedtitleattribute ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Renders with monospace font Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Updates the element's HTML tag ExtendsHTMLAttributes<HTMLDivElement> Applies bold font style Updates the element's HTML tag"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/utilities",
            "title": "Utilities / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use themMenu and arrow styles",
                        "Menu and arrow styles",
                        "Configuration",
                        "APIarrowStylesfocusStylesgetCheckeredBackgroundgetColorgetFocusBoxShadowgetLineHeightmediaQuerymenuStylesretrieveComponentStylesuseText",
                        "arrowStyles",
                        "focusStyles",
                        "getCheckeredBackground",
                        "getColor",
                        "getFocusBoxShadow",
                        "getLineHeight",
                        "mediaQuery",
                        "menuStyles",
                        "retrieveComponentStyles",
                        "useText"
                    ]
                },
                {
                    "type": "p",
                    "text": "Utility functions enable advanced theme usage. They let you customize components in a granular way."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use themMenu and arrow styles",
                        "Menu and arrow styles",
                        "Configuration",
                        "APIarrowStylesfocusStylesgetCheckeredBackgroundgetColorgetFocusBoxShadowgetLineHeightmediaQuerymenuStylesretrieveComponentStylesuseText",
                        "arrowStyles",
                        "focusStyles",
                        "getCheckeredBackground",
                        "getColor",
                        "getFocusBoxShadow",
                        "getLineHeight",
                        "mediaQuery",
                        "menuStyles",
                        "retrieveComponentStyles",
                        "useText"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use menu and arrow styling utilities to build Garden-styled menu components."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-theming",
                        "Depsnpm install react react-dom styled-components",
                        "Importimport{ arrowStyles, focusStyles, getCheckeredBackground, getColor, getColorV8, getFocusBoxShadow, getLineHeight, mediaQuery, menuStyles, retrieveComponentStyles, useText }from '@zendeskgarden/react-theming'"
                    ]
                },
                {
                    "type": "p",
                    "text": "CSS for an arrow at the given position and with the given size. The arrow\ninherits the base element’sborder,background, andbox-shadow. For\nproperborderandbox-shadowstyling, the element to which arrow styles\nare applied must be wrapped in a positioned box (relative,absolute, orfixed) that has az-indexgreater than or equal to zero. Positions the arrow against the base element Expresses a CSS dimension as a distance from the base (hypotenuse) to point (right angle) of the arrow Tweaks arrow positioning by adjusting with a positive (in) or negative (out) CSS dimension Shifts arrow positioning along the edge of the base element Indicates a CSS class or attribute selector which, when applied to the base element, animates the arrow's appearance CSS for Garden standardbox-shadowfocus styling. The hue and shade are used\nto determine the color of the focus ring. Provides values used to resolve the desired colors Provides an object withgetColorparameters used to determine the focus ring color Provides a theme objectshadowWidthkey for the cumulative width of thebox-shadow Provides an object withgetColorparameters used to determine the spacer color Provides a theme objectshadowWidthfor the white spacer, ornullto remove Determines whether thebox-shadowis inset Provides a subsitute pseudo-class CSS selector Adds CSS property values to be rendered on focus Supplies an optional condition that can be used to prevent the focusbox-shadow Generate CSS for a checkered background image. Provides information for pattern color and LTR/RTL layout Provides the pixel size of the checkered pattern Specifies color with transparency orlinear-gradient()overlay to apply on top of the checkered pattern Adjusts vertical position for starting the pattern Sets a repeat value for the pattern; either'repeat'or'repeat-x'(default'repeat') Get a color value from the theme. Variable lookup takes precedence, followed bydarkandlightobject values. If none of these are provided,hue,shade,offset, andtransparencyare used as fallbacks to determine the color. A\nparticularly effective use ofgetColormight look something like the following\nexample."
                },
                {
                    "type": "code",
                    "code": "importstyledfrom'styled-components';import{getColor}from'@zendeskgarden/react-theming';constoptions={variable:'background.primaryEmphasis'};constoffset100={dark:{offset:-100},light:{offset:100}};constoffset200={dark:{offset:-200},light:{offset:200}};exportconstStyledCustomComponent=styled.div`background-color:${props=>getColor({theme:props.theme,...options})};:hover{background-color:${props=>getColor({theme:props.theme,...options,...offset100})};}:active{background-color:${props=>getColor({theme:props.theme,...options,...offset200})};}`;"
                },
                {
                    "type": "p",
                    "text": "Provides values used to resolve the desired color Specifies avariablekey ('background.default', for example) used to resolve a color value for the themecolor base Provides a theme objectpalettehue orcolorkey, or any valid CSS color notation Selects a shade for the given hue Adjusts the shade by a positive or negative value. Works best used along with avariablekey to make interaction (:hoveror:active, for example) adjustments. Sets transparency using a themeopacitykey or an alpha channel between 0 and 1 Supplies an object with optionalhue,shade,offset, andtransparencyvalues to be used in dark mode Supplies an object with optionalhue,shade,offset, andtransparencyvalues to be used in light mode Get a CSSbox-shadowproperty value for focus state styling. Use this function\nwhenfocusStylesis not the right fit. DEFAULT_THEME Provides values used to resolve the desired colors Provides an object withgetColorparameters used to determine the focus ring color Provides a theme objectshadowWidthkey for the cumulative width of thebox-shadow Provides an object withgetColorparameters used to determine the spacer color Provides a theme objectshadowWidthfor the white spacer, ornullto remove Determines whether thebox-shadowis inset Provides an existingbox-shadow(a drop shadow, for example) to be retained along with the focus ring Derive a unitless line height based on the given pixel-valued height and font size. Specifies the desired line height in pixels Specifies the font size (in pixels) of text contained within the line Get a CSS media query string for the given query specifier, breakpoint name,\nand theme. Use this function to build responsive UI that works well with\nGarden’s themedGrid. Specifies the query, one of:"
                },
                {
                    "type": "list",
                    "items": [
                        "'up'match screen widths including the given breakpoint and up",
                        "'down'match screen widths included within the given breakpoint and down",
                        "'only'match screen widths included within the given breakpoint",
                        "'between'match screen widths including the first breakpoint up through screen widths included within the second breakpoint"
                    ]
                },
                {
                    "type": "p",
                    "text": "Specifies a theme objectbreakpointskey, or an array of two keys when'between'is the specified query DEFAULT_THEME Provides values used to resolve the specified breakpoint CSS for a menu at the given position. Apply these styles to an absolutely\npositioned wrapper (for example viaFloating UI)\nwhich contains a child menu component. Specifies the menu position relative to the component that triggers menu expansion DEFAULT_THEME Provides theming values used to style the menu component Determines whether the menu is hidden Determines the amount of space, as a CSS dimension, between the menu and its trigger Specifies thez-indexfor the absolutely positioned menu wrapper Indicates a CSS selector which, when applied to the wrapper, identifies the child menu component Indicates a CSS class or attribute selector which, when applied to the wrapper, animates the menu's appearance Retrieve customized CSS for themable component styling overrides. This\nexample demonstrates how to construct a custom styled component that permits\ncustomizations via the theme’scomponentsobject."
                },
                {
                    "type": "code",
                    "code": "importstyledfrom'styled-components';import{retrieveComponentStyles}from'@zendeskgarden/react-theming';constCOMPONENT_ID='custom.component';exportconstStyledCustomComponent=styled.div.attrs({/* Render component ID attribute for reference */'data-custom-id':COMPONENT_ID})`display:flex;align-items:center;/* CSS provided on the theme will be rendered inline */${props=>retrieveComponentStyles(COMPONENT_ID,props)};`;"
                },
                {
                    "type": "p",
                    "text": "Specifies the unique ID used to retrieve CSS styles from the theme'scomponentsobject Provides component props which contain the contextthemeobject A custom React hook that provides default text foraria-labelor other\ncritical attribute strings. If necessary, a development mode console warning\nprompts the consumer to provide customized, translated text. Specifies the React component to which thepropsbelong Provides component props to check forname Determines the name of the component prop to set default text on Specifies default text to apply if the value ofprops[name]isundefined Supplies an optional condition that can be used to prevent evaluation"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/versions",
            "title": "Versions / Components / Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "Archive of previous major component versions."
                },
                {
                    "type": "list",
                    "items": []
                },
                {
                    "type": "p",
                    "text": "Garden website release documentation"
                },
                {
                    "type": "list",
                    "items": [
                        "Version 9changelogmigration guide",
                        "changelog",
                        "migration guide",
                        "Version 8changelogmigration guide",
                        "changelog",
                        "migration guide",
                        "Version 7changelogmigration guide",
                        "changelog",
                        "migration guide",
                        "Version 6changelogmigration guide",
                        "changelog",
                        "migration guide"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/components/well",
            "title": "Well / Components / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultFloatingMulti-lineRecessed",
                        "Default",
                        "Floating",
                        "Multi-line",
                        "Recessed",
                        "Configuration",
                        "APIWell",
                        "Well"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Well is a container that groups related content."
                },
                {
                    "type": "list",
                    "items": [
                        "How to use itDefaultFloatingMulti-lineRecessed",
                        "Default",
                        "Floating",
                        "Multi-line",
                        "Recessed",
                        "Configuration",
                        "APIWell",
                        "Well"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To group related content"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To expand and collapse content, use anAccordion",
                        "For validation messages, use anAlert",
                        "For growl-style notifications that float above the page content, use aNotification"
                    ]
                },
                {
                    "type": "p",
                    "text": "The typical usage of a Well component. A floating Well has a drop shadow that lifts the content off the page. A multi-line Well allows for a title and long-form content. A recessed Well has a background to differentiate it from the rest of the page."
                },
                {
                    "type": "list",
                    "items": [
                        "Name9.1.0•View source•View on npm",
                        "Installnpm install@zendeskgarden/react-notifications",
                        "Depsnpm install react react-dom styled-components@zendeskgarden/react-theming",
                        "Importimport{ Well }from '@zendeskgarden/react-notifications'"
                    ]
                },
                {
                    "type": "p",
                    "text": "Applies a drop shadow Applies a background color ExtendsHTMLAttributes<HTMLParagraphElement> ExtendsHTMLAttributes<HTMLDivElement> Applies regular (non-bold) font weight"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content",
            "title": "Content overview / Content / Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "The principles of language for writing products."
                },
                {
                    "type": "list",
                    "items": []
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/actionable-language",
            "title": "Actionable language / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "To make a selectionSelect",
                        "Select",
                        "To give a person ownershipAssign",
                        "Assign",
                        "To turn on and offActivate (Active)Deactivate (Inactive)Turn on (On)Turn off (Off)",
                        "Activate (Active)",
                        "Deactivate (Inactive)",
                        "Turn on (On)",
                        "Turn off (Off)",
                        "To move back and forthBackPreviousNext",
                        "Back",
                        "Previous",
                        "Next",
                        "To postpone actionSkip",
                        "Skip",
                        "To receive confirmationDoneOK",
                        "Done",
                        "OK",
                        "To make changesCreateAddEditManageUpdate",
                        "Create",
                        "Add",
                        "Edit",
                        "Manage",
                        "Update",
                        "To removeClearDeleteRemoveArchive",
                        "Clear",
                        "Delete",
                        "Remove",
                        "Archive",
                        "To commitSave",
                        "Save",
                        "To make publicSharePublish",
                        "Share",
                        "Publish",
                        "To cancelCancelLeave without savingUndo",
                        "Cancel",
                        "Leave without saving",
                        "Undo",
                        "To learnLearn about",
                        "Learn about"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "To make a selectionSelect",
                        "Select",
                        "To give a person ownershipAssign",
                        "Assign",
                        "To turn on and offActivate (Active)Deactivate (Inactive)Turn on (On)Turn off (Off)",
                        "Activate (Active)",
                        "Deactivate (Inactive)",
                        "Turn on (On)",
                        "Turn off (Off)",
                        "To move back and forthBackPreviousNext",
                        "Back",
                        "Previous",
                        "Next",
                        "To postpone actionSkip",
                        "Skip",
                        "To receive confirmationDoneOK",
                        "Done",
                        "OK",
                        "To make changesCreateAddEditManageUpdate",
                        "Create",
                        "Add",
                        "Edit",
                        "Manage",
                        "Update",
                        "To removeClearDeleteRemoveArchive",
                        "Clear",
                        "Delete",
                        "Remove",
                        "Archive",
                        "To commitSave",
                        "Save",
                        "To make publicSharePublish",
                        "Share",
                        "Publish",
                        "To cancelCancelLeave without savingUndo",
                        "Cancel",
                        "Leave without saving",
                        "Undo",
                        "To learnLearn about",
                        "Learn about"
                    ]
                },
                {
                    "type": "p",
                    "text": "For calls to action (CTAs), try to be as specific as possible.\nThis helps the user know exactly what to expect and what they can\ndo when they interact with the CTA. Use this guide to find the most\nappropriate verb for an experience that includes CTAs. CTAs are most often used inbuttonsandanchors. UseSelectwhen the user must make a decision among multiple options. Select Choose UseAssignwhen referring to ownership and responsibility. UseActivatewhen the user is making something active so it operates on its own.\nThings like triggers, automations, and deletion schedules that the user creates.\nFollow it with a noun to clarify what is being activated. For example, “Activate trigger”.\nWhen something is activated, its status isActive. Activate Enable UseDeactivatewhen the user is making something inactive and therefore,\nstops it from operating on its own. Things like triggers, automations, and deletion schedules\nthat the user creates. Follow it with a noun to clarify what is being deactivated.\nFor example, “Deactivate trigger”. When something is deactivated, its status isInactive. Deactivate Disable UseTurn onwhen the user is making a feature or function available.\nFollow it with a noun to clarify what is being turned on. For example, “Turn on messaging for your account”.\nWhen something is turned on, its status isOn. More often than not, you don’t need to say “turn on”\nat the front of every phrase, especially if it’s implied like checking a checkbox.\nSee if you can say what you mean without it."
                },
                {
                    "type": "list",
                    "items": [
                        "Turn on",
                        "Automatically delete PII",
                        "Turn on access log API"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Enable",
                        "Turn on automatic PII deletion",
                        "Let access log API send me data"
                    ]
                },
                {
                    "type": "p",
                    "text": "UseTurn offwhen the user is making a feature or function unavailable.\nThis is to reverse their original decision to turn it on.\nFollow it with a noun to clarify what is being turned off.\nFor example, “Turn off Agent Workspace”. When something is turned off, its status isOff. Turn off Disable UseBackto take the user to the previous step in a multi-step process.\nPair this withNext. In the event that a user will lose changes,\nwarn them ahead of time that they will lose any changes that have been made. UsePreviousinstead ofBackfor pagination in tables. UseNextto take the user to the next step in a multi-step process.\nPair this withBack. Next Proceed, Continue UseSkipto allow the user to postpone an action or decision.\nIt’s a way for the user to avoid interruption and proceed with their current task. UseDoneto confirm the completion of a multi-step process. Done OK, Got it, Close The best CTAs make it clear what will happen when a user interacts with it.OKdoesn’t do a great job of that but sometimes that’s all we need to say.\nIn general, useDoneor a more specific CTA to end an experience. For mobile\nexperiences, it’s okay to useOKbut write it asOKto be concise and align\nwith most mobile patterns. OK Okay UseCreatewhen the user is about to make a brand new thing in the product. UseAddwhen the user can layer on additional things to something that has\nalready been created. For example, before adding conditions to a trigger,\nthe user mustCreatethe trigger. UseEditwhen the user can modify an existing item such as data.\nThe user can only change that particular item and can’t perform other\nactions likeAddorDelete. UseManagewhen the user can control a large area or thing such as a\nsubscription or a team. UnlikeEdit, the user can complete\na variety of other actions such asAddandDelete. The scope of\nthe changes forManageis also larger compared toEdit. UseUpdatein billing and app changes. In other areas of the product,\nuseSaveorEdit. UseClearto remove a selection. Clear Deselect UseDeletewhen the user is about to get rid of something permanently.\nWhen a user deletes a layout, it’s gone forever and the user can’t get it back.\nThe opposite ofDeleteisCreatewhen the user makes something new. Delete Remove, Archive UseRemovewhen the user is getting rid of something but has the option to add it back later.\nFor example, when a user removes an app from their workspace, it can still be found in their list of apps.\nThe opposite ofRemoveisAddwhen the user wants to bring it back. Remove Delete, Archive UseArchiveto unpublish content like a help center article. Archive Remove, Delete UseSavewhen the user makes changes and wants to commit them. UseSharewhen the user wants to make things visible internally.\nFor example, a user can share a dashboard with their team members. UsePublishwhen the user wants to make things visible externally.\nFor example, a user publishes an article to the help center.\nTo hide the article from public view, the user canUnpublishit. UseCancelwhen the user makes edits but wants to discard them. It dismisses\nthe page the user was editing and returns the user to the entry point they came from. Cancel Discard changes Leave without savingis similar toCancel, with one key difference: it\nreverts all values on the page to the last saved state without reloading the page. Leave without saving Discard changes Revert back to the previous state. Undo Dismiss, No thanks UseLearn aboutto include a link to the Zendesk help center.\nHave the link be a few words about what the user will learn.\nFor example, “Learn about user profiles”. Avoid the standaloneLearn moreand help center article titles that can’t be localized. Learn about Learn more"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/grammar",
            "title": "Grammar / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Acronyms and abbreviations",
                        "Bold and italics",
                        "Capitalization",
                        "Contractions",
                        "Date and time",
                        "Emoji",
                        "Numbers and currency",
                        "PronounsYouMeWe",
                        "You",
                        "Me",
                        "We",
                        "Singular and plural",
                        "Tense"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Acronyms and abbreviations",
                        "Bold and italics",
                        "Capitalization",
                        "Contractions",
                        "Date and time",
                        "Emoji",
                        "Numbers and currency",
                        "PronounsYouMeWe",
                        "You",
                        "Me",
                        "We",
                        "Singular and plural",
                        "Tense"
                    ]
                },
                {
                    "type": "p",
                    "text": "Acronyms are like inside jokes. If you aren’t in the know they don’t make sense. Use acronyms to\nsave space, but not at the risk of confusing people. Spell out an acronym on first use and include\nit in parentheses. ​ A service level agreement (SLA) is a contract between you and your customers. Use bold to refer to UI elements. Avoid italics or quotation marks. Using bold is a bold statement.\nA little bit goes a long way, so use bold sparingly. Don’t get too bold in notifications. Only use\nbold for headings, and not in the description. Click onSettingsin Admin Center Click on “Settings” in Admin Center Followstandard capitalization\nrulesfor English.\nCapitalize names of people, companies, and product features and use lowercase for just about\neverything else. At Zendesk, we usesentence\ncasefor headings, subheadings, and\nbuttons. Contractions are A-OK. They make sentences shorter and easier to read. Avoid them in flows that feel\nformal like billing, security settings, or account recovery. Use unicode standards for date and time. Refer to your location-specific standards on CLDR. Zendesk\nuses relative time to show elapsed time. Avoid vague terms like “now,” “soon,” “later,” or“in a\nwhile.” Save it for Slack. Emoji are rarely used in the UI. Some emojis have double meanings and don’t\nlocalize. 👎 😞 Use unicode standards for numbers and currency. Refer to your location-specific standards on CLDR.\nZendesk uses numerals (rather than words) in the UI. Recast descriptions to avoid starting a\nsentence with a number. Using Zendesk is a gender-neutral experience. Instead of gendered pronouns, rewrite using second\nperson (“you”), or “they” and “their.”​ If the end user isn’t online, they will get an email instead. Address a single person in a specific context, rather than all people. UX is a conversation, not a\nspeech. You don’t have access Access denied Don’t put words in our users’ mouths. They can speak for themselves. Avoid using my, us, and mine. Skip Remind me later Frame experiences around the user. Only use “we” when a specific group of humans are the authors of\na message, for example, “We’re the UX Research team and we want your feedback.” Check your inbox for an email confirmation We’ll send you an email confirmation Use singular to represent a quantity of one and plural for two or more things. Avoid parentheses to\ndisplay both cases at once. Add user Add user(s) The present tense is what’s happening now. It’s friendlier and easier to read. Stick to one tense\nper component. Don’t move from past to present tense—we’re not time travelers."
                },
                {
                    "type": "list",
                    "items": [
                        "Message sent",
                        "Chat ended",
                        "Chat will end"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Message has been sent",
                        "Chat has ended",
                        "Chat will have ended"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/principles",
            "title": "Principles / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Five things to rememberWrite for everyoneUse the active voiceBe clear, not cleverAvoid jargon at all costsUse plain language",
                        "Write for everyone",
                        "Use the active voice",
                        "Be clear, not clever",
                        "Avoid jargon at all costs",
                        "Use plain language"
                    ]
                },
                {
                    "type": "p",
                    "text": "The domain of content design is all the language in a user interface (UI). Content designers design with words to create experiences that are clear, consistent, and inclusive."
                },
                {
                    "type": "list",
                    "items": [
                        "Five things to rememberWrite for everyoneUse the active voiceBe clear, not cleverAvoid jargon at all costsUse plain language",
                        "Write for everyone",
                        "Use the active voice",
                        "Be clear, not clever",
                        "Avoid jargon at all costs",
                        "Use plain language"
                    ]
                },
                {
                    "type": "p",
                    "text": "Copy that relies on visual descriptions (like shapes, color, or location in the UI), makes it\ndifficult for people who use screen readers. Be mindful of gendered pronouns and ableist language\ntoo. We write for everyone. The active voice is simpler and shorter. To write in the active voice make the subject of the\nsentence do the action. “You created an account” instead of “An account was created.” Metaphors and analogies can make complicated concepts easier to understand, but don’t use them\neverywhere. They are effective in places the user doesn’t see very often (onboarding flows, modals),\nbut can be distracting when overdone. Zendesk doesn’t speak jargon. Specialized terminology and buzzwords are confusing and difficult to\ntranslate. Replace jargon terms (“seamless,” “pipeline”) with plain language instead. Plain language means simple words and short sentences with fewer clauses. We aim for an eighth grade\nreading level in product language. Test readability with free tools likeHemingway\nApporStorytoolz."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/punctuation",
            "title": "Punctuation / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Ampersand",
                        "Apostrophe",
                        "Colon",
                        "Comma",
                        "Ellipse",
                        "Exclamation point",
                        "Hyphens and dashes",
                        "Parentheses",
                        "Period",
                        "Quotation mark",
                        "Semi-colon",
                        "Slash"
                    ]
                },
                {
                    "type": "p",
                    "text": "How to use punctuation at Zendesk."
                },
                {
                    "type": "list",
                    "items": [
                        "Ampersand",
                        "Apostrophe",
                        "Colon",
                        "Comma",
                        "Ellipse",
                        "Exclamation point",
                        "Hyphens and dashes",
                        "Parentheses",
                        "Period",
                        "Quotation mark",
                        "Semi-colon",
                        "Slash"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid ampersands in place of “and.” Don’t use “+” unless you’re opening a coffee shop in Portland. Use apostrophes to denote possession. Avoid apostrophes to denote plurals even for initialisms. In general, avoid using colons in product, especially when describing some attribute and its value.\nUse emphasis styling instead to distinguish between these two types of content. It is OK to use a colon to introduce a bulleted list. When doing so, make sure you don’t split a\nsentence at the colon. This causes challenges for translation. NameOmar Bongo Name: Omar Bongo Always use the Oxford comma, also known as the serial comma, to precede the final item in a list.\nDon’t use commas in buttons. Garden creates ellipses automatically when words are truncated. Don’t add them manually to the UI. These are too loud for most of our brand tones. We tend not to use them at all. Err on the side of fewer hyphens and dashes. Use en dashes with no spaces to communicate a range.\nAvoid using en or em dashes to communicate a break in your thoughts. This plan affects any customers with 100–150 active agents. Use sparingly. Use parentheses to introduce an acronym in product and never put crucial information\nin parentheses. Use periods to end full sentences in body copy. Consult this handy chart to find out where we use\nperiods. Avoid using quote marks to indicate places and features in the UI. Use bold instead. Use theEnd chatbutton to end a conversation. Use the “End chat” button to end a conversation. No semi-colons in product; that’s the way it has to be. Used when indicating URLs and as a date separator. You can also use slashes to mean “per,” but limit\nuse to one slash in a phrase, for example: “$9/agent per month.”"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/voice-and-tone",
            "title": "Voice and tone / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "How to sound like Zendesk",
                        "Tone FrameworkInformationalInstructionalLow impactHigh impact",
                        "Informational",
                        "Instructional",
                        "Low impact",
                        "High impact",
                        "Mapping toneLow impact and informationalHigh impact and informationalHigh impact and instructionalLow impact and instructional",
                        "Low impact and informational",
                        "High impact and informational",
                        "High impact and instructional",
                        "Low impact and instructional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Our product is an extension of our brand. We use visual design to shape what Zendesk looks like, and voice and tone to shape what Zendesk sounds like."
                },
                {
                    "type": "list",
                    "items": [
                        "How to sound like Zendesk",
                        "Tone FrameworkInformationalInstructionalLow impactHigh impact",
                        "Informational",
                        "Instructional",
                        "Low impact",
                        "High impact",
                        "Mapping toneLow impact and informationalHigh impact and informationalHigh impact and instructionalLow impact and instructional",
                        "Low impact and informational",
                        "High impact and informational",
                        "High impact and instructional",
                        "Low impact and instructional"
                    ]
                },
                {
                    "type": "p",
                    "text": "Our product is an extension of our brand and we want it to feel like Zendesk. We use visual design\nto shape what Zendesk looks like, and voice and tone to shape what Zendesk sounds like. While brand voice is typically unchanging, a brand’s tone varies across each user experience. A\nsystem failure isn’t the right time to be charming. And using a distilled tone could make an\nonboarding experience feel cold and unwelcoming. The Zendesk tone framework can help determine which brand tone to use and when. To create this\nframework we plotted dozens of user interactions across two dimensions."
                },
                {
                    "type": "list",
                    "items": [
                        "Informational vs instructional",
                        "Low impact vs high impact"
                    ]
                },
                {
                    "type": "p",
                    "text": "Information for the user to know. They don’t have to act on this content, but it is useful for their\nworkflow. Instructions for a user to learn or act on. This content generally requires more attention to\nunderstand. Useful but not indispensable. Even if a user skimmed this content, they could safely navigate the\nproduct. Stuff that really matters. Whether good news or bad, this content has a direct impact on a user’s\nsuccess in the product. After plotting these user interactions, we outlined four quadrants that were a natural fit for our\nbrand tones. Tone to use:Distilled Character:An efficient surgeon Tone to use:Humblident Character:A resolute sherpa Tone to use:Real Character:Your no-B.S. best friend Tone to use:Charming Character:A fastidious host"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/content/word-list",
            "title": "Word list / Content / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Words we use@mentionaccessible, accessibility, a11yaka, a.k.a.add-on, addonall ofamong, betweenand/orAnswer Botany time, anytimeapp, appsappears, displaysasbecause, sincebetweenblacklist, whitelistCC, CCs, CCedchannelchat, Zendesk Chatclick, swipe, tapCustomer SupportCSATdatadata centerdefaultdrop-downfor example, e.g.eitheremail, emailsfeedbackfull and fullygreater, betterhelp centerhelp deskhinti.e.incoming, outgoingInsightsJavaScriptknowledge basemacOSmin, maxNet Promoter Score℠, NPS®newOAuthon, ontoplan, accountpluginproduct trayregister vs. sign upself-serviceset up, setupsign in, sign outsingle sign-on (SSO)spamstatssubdomainsubscriptionsupport, SupportSupport teamsystemthank you, thanksticket, ticket formtriggeruser namewebsite, web form, web pageWeb WidgetworkflowZendeskZendesk Apps",
                        "@mention",
                        "accessible, accessibility, a11y",
                        "aka, a.k.a.",
                        "add-on, addon",
                        "all of",
                        "among, between",
                        "and/or",
                        "Answer Bot",
                        "any time, anytime",
                        "app, apps",
                        "appears, displays",
                        "as",
                        "because, since",
                        "between",
                        "blacklist, whitelist",
                        "CC, CCs, CCed",
                        "channel",
                        "chat, Zendesk Chat",
                        "click, swipe, tap",
                        "Customer Support",
                        "CSAT",
                        "data",
                        "data center",
                        "default",
                        "drop-down",
                        "for example, e.g.",
                        "either",
                        "email, emails",
                        "feedback",
                        "full and fully",
                        "greater, better",
                        "help center",
                        "help desk",
                        "hint",
                        "i.e.",
                        "incoming, outgoing",
                        "Insights",
                        "JavaScript",
                        "knowledge base",
                        "macOS",
                        "min, max",
                        "Net Promoter Score℠, NPS®",
                        "new",
                        "OAuth",
                        "on, onto",
                        "plan, account",
                        "plugin",
                        "product tray",
                        "register vs. sign up",
                        "self-service",
                        "set up, setup",
                        "sign in, sign out",
                        "single sign-on (SSO)",
                        "spam",
                        "stats",
                        "subdomain",
                        "subscription",
                        "support, Support",
                        "Support team",
                        "system",
                        "thank you, thanks",
                        "ticket, ticket form",
                        "trigger",
                        "user name",
                        "website, web form, web page",
                        "Web Widget",
                        "workflow",
                        "Zendesk",
                        "Zendesk Apps",
                        "Words we avoidoops, whoops, oh nopleasesorrywe",
                        "oops, whoops, oh no",
                        "please",
                        "sorry",
                        "we",
                        "Peopleaccount owneradmin, administratoradvisoragentcustomereditorend usermanagerrepseatstaffsubscriberteam leaderuserviewer",
                        "account owner",
                        "admin, administrator",
                        "advisor",
                        "agent",
                        "customer",
                        "editor",
                        "end user",
                        "manager",
                        "rep",
                        "seat",
                        "staff",
                        "subscriber",
                        "team leader",
                        "user",
                        "viewer"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Words we use@mentionaccessible, accessibility, a11yaka, a.k.a.add-on, addonall ofamong, betweenand/orAnswer Botany time, anytimeapp, appsappears, displaysasbecause, sincebetweenblacklist, whitelistCC, CCs, CCedchannelchat, Zendesk Chatclick, swipe, tapCustomer SupportCSATdatadata centerdefaultdrop-downfor example, e.g.eitheremail, emailsfeedbackfull and fullygreater, betterhelp centerhelp deskhinti.e.incoming, outgoingInsightsJavaScriptknowledge basemacOSmin, maxNet Promoter Score℠, NPS®newOAuthon, ontoplan, accountpluginproduct trayregister vs. sign upself-serviceset up, setupsign in, sign outsingle sign-on (SSO)spamstatssubdomainsubscriptionsupport, SupportSupport teamsystemthank you, thanksticket, ticket formtriggeruser namewebsite, web form, web pageWeb WidgetworkflowZendeskZendesk Apps",
                        "@mention",
                        "accessible, accessibility, a11y",
                        "aka, a.k.a.",
                        "add-on, addon",
                        "all of",
                        "among, between",
                        "and/or",
                        "Answer Bot",
                        "any time, anytime",
                        "app, apps",
                        "appears, displays",
                        "as",
                        "because, since",
                        "between",
                        "blacklist, whitelist",
                        "CC, CCs, CCed",
                        "channel",
                        "chat, Zendesk Chat",
                        "click, swipe, tap",
                        "Customer Support",
                        "CSAT",
                        "data",
                        "data center",
                        "default",
                        "drop-down",
                        "for example, e.g.",
                        "either",
                        "email, emails",
                        "feedback",
                        "full and fully",
                        "greater, better",
                        "help center",
                        "help desk",
                        "hint",
                        "i.e.",
                        "incoming, outgoing",
                        "Insights",
                        "JavaScript",
                        "knowledge base",
                        "macOS",
                        "min, max",
                        "Net Promoter Score℠, NPS®",
                        "new",
                        "OAuth",
                        "on, onto",
                        "plan, account",
                        "plugin",
                        "product tray",
                        "register vs. sign up",
                        "self-service",
                        "set up, setup",
                        "sign in, sign out",
                        "single sign-on (SSO)",
                        "spam",
                        "stats",
                        "subdomain",
                        "subscription",
                        "support, Support",
                        "Support team",
                        "system",
                        "thank you, thanks",
                        "ticket, ticket form",
                        "trigger",
                        "user name",
                        "website, web form, web page",
                        "Web Widget",
                        "workflow",
                        "Zendesk",
                        "Zendesk Apps",
                        "Words we avoidoops, whoops, oh nopleasesorrywe",
                        "oops, whoops, oh no",
                        "please",
                        "sorry",
                        "we",
                        "Peopleaccount owneradmin, administratoradvisoragentcustomereditorend usermanagerrepseatstaffsubscriberteam leaderuserviewer",
                        "account owner",
                        "admin, administrator",
                        "advisor",
                        "agent",
                        "customer",
                        "editor",
                        "end user",
                        "manager",
                        "rep",
                        "seat",
                        "staff",
                        "subscriber",
                        "team leader",
                        "user",
                        "viewer"
                    ]
                },
                {
                    "type": "p",
                    "text": "Pronounced “at mention.” Always lowercase, even at the beginning of a sentence. Describes a set of standards that make our product usable to people experiencing\ndisabilities. Avoid using accessible as a synonym for “simple.” For that\npurpose, use terms like easy to learn, easy to use, or intuitive. Stands for also known as. Instead of a.k.a., use aka with no punctuation. Useadd-on. Lowercase, with hyphen. Redundant. Just say all. It lists all your customers. It lists all of your customers. Useamongwhen referring to 3 or more persons (or things)."
                },
                {
                    "type": "list",
                    "items": [
                        "Compare withbetween"
                    ]
                },
                {
                    "type": "p",
                    "text": "You can share tickets among members of your group. You can share tickets among you and your admin. Avoid this construction. Use eitherandororby itself. Two words, title case. The two-wordany timeis always the safer choice. If you do use the one-word\nform, anytime, make sure it’s an adverb. If you need to say, “At any time,” it\nmust be two words. Use lowercase for general references. Don’t capitalize for emphasis. Capitalize\nonly when referring to a feature, such asZendesk Apps. When referring to the\nZendesk app marketplace useZendesk Marketplace. Displaysis a transitive verb, meaning that the action transfers to something\nelse. For example, “a screen displays an image.” Whiledisplaysrequires a direct\nobject,appearsdoes not. For example, “an image appears on screen.” Avoid usingasas a synonym for “because” or “while.” While grammatically\ncorrect, these uses make reading more difficult for a global audience."
                },
                {
                    "type": "list",
                    "items": [
                        "Compare withbecause"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the active voice whenever possible because it’s easier to translate. Use the active voice whenever possible as it is easier to translate. Usebecauseinstead of “since.” Using since can cause problems with machine\ntranslation. Usebecauseto refer to the reason for something, and reservesinceto refer to a passage of time. Usebetweenwhen referring to 2 persons (or things) or when referring to\nrelationships between two items at a time, regardless of the total number of\nitems."
                },
                {
                    "type": "list",
                    "items": [
                        "Compare withamong"
                    ]
                },
                {
                    "type": "p",
                    "text": "Move between the two tickets at the top of the list. Move between several tickets on the page. Avoid this usage. Useblockedandallowedinstead. In the product, use uppercase. OK to use as a noun (“the CC”, “the CCs”), as a\ntransitive verb (“CC me”), or as an adjective (“the CCed agent”). In documentation, it’s permitted to use lowercase and apostrophes (cc, cc’s,\ncc’ed). Use lowercase for general references. Capitalize when referring to theChannel frameworkor describing features of the framework, such as\ntheChannel pull endpoint. Lowercase when talking about a chat message or the verb. Capitalize when\nreferring to the feature or the product, such asZendesk Chat. Avoid using platform-specific words likeclick,swipe, ortap. Useclickto describe the action of pressing a key, mouse, or button. For mobile\nor screen-based physical contact, usetap. Pair click directly with the button\nor menu label without “on” or “at.” Preview document Click on preview UseZendesk Customer SupportorCustomer Supportwhen referring to the place\nZendesk customers go for support on our product. Avoid Support team. All caps. Short for customer satisfaction. Use only as an adjective, as inCSAT ratingorCSAT survey. Always usedatawith a singular verb. In other words, “The data is unavailable.”\nIf you want to emphasize that something is plural, rewrite to use a term such as\nfacts or numbers. Data centeris always two words. Usedefaultwhen describing something that is applied on behalf of the user.\nThe user can also change what is set as default. For example, the default color\nfor a chart can be changed from green to yellow. This noun describes a UI element that lets users pick from a series of options.\nAlways hyphenate it. Keep it conversational by usingfor example. The scholarly way to say “for\nexample” is using “e.g.,” which stands forexempli gratia. Useeitheronly for a decision between two choices. You may choose either bacon or tofu. You may choose either bacon, snake meat, or tofu. No hyphen needed. Usegive feedbackor for some Early Access Program (EAP)\nlinks,share your thoughts. Give feedback Provide feedback Avoidfullandfullyunless you’re writing marketing copy."
                },
                {
                    "type": "list",
                    "items": [
                        "Full-featured agent workflow",
                        "Full ticket history"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Fully customizable",
                        "Full live chat software functionality"
                    ]
                },
                {
                    "type": "p",
                    "text": "Avoid using subjective terms when talking about system requirements or versions.\nUse objective terms instead."
                },
                {
                    "type": "list",
                    "items": [
                        "Update to the latest version of Google Chrome",
                        "Chat requires Microsoft Edge v.14 or higher"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Update to the best version of Explore",
                        "Chat requires Microsoft Edge v.14 or better"
                    ]
                },
                {
                    "type": "p",
                    "text": "All lowercase. Help center is not a proper noun."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the help center to manage your knowledge"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use Help Center to manage your knowledge"
                    ]
                },
                {
                    "type": "p",
                    "text": "Zendesk makes customer service software, not help desk software. The termhelp deskshould only be used when specifically addressing IT or help desk issues. In most cases, you can useZendesk Supportinstead. Example: “You can use Zendesk Support to improve your relationship with your\ncustomers.” Don’t use it as a heading for a type of note. Usetipinstead. Abbreviation forid est, meaning “that is.” Usethat isorin other wordsinstead. Use to refer to email messages that are being downloaded or being sent. Do not\nuse inbound and outbound unless you have no other choice. Capitalize when referring to the Zendesk product. UsePascal case. Not Javascript or javascript. Two words, lowercase. Sometimes called KB for short. Use when referring to the operating system. Don’t use Mac OS. It’s better to spell these out in full (“minimum” or “maximum”) but the short\nform is OK when you’re short on space. You don’t need a period after min or max. Uppercase. Use trademark symbols on first reference.Net Promoter Scoreis a\nservice mark (℠);NPSis a registered trademark (®). Symbols should be placed\ndirectly after the mark, in superscript, and slightly smaller than the mark\ntext. Newrequires gender for many languages.Addis a better substitute. Features\nthat are new to the user are best communicated through emails, landing pages,\nand marketing materials. Not oAuth. You record conversationsona ticket rather than onto. Onto conveys actual\nmotion. For example, I jumped onto the parallel bars. If you’re confused, just\nsay “up” before on in the sentence. If it makes sense, onto is the right word. Don’t use account to refer to Zendeskplans. The Enterprise plan supports light agents. The Enterprise account supports light agents. No hyphen. Useproducts iconinstead. Useregisterinstead. Always hyphenate. Two words (set up) for the verb, one word (setup) for the adjective or as a\nnoun. Usesign inandsign outinstead of “log in”, and “log out”. Hyphenate as an\nadjective or as a noun. Sign in Log in Hyphenate sign-on and spell this out on first use. Don’t usespamas a verb. Used in Help Center articles and in reports. Abbreviation OK. One word. For a person’s Zendesk account only. Not for individual plans or products. Capitalize when referring to the Zendesk Support product. Use lowercase\notherwise. Don’t use. UseZendesk Customer SupportorCustomer Supportinstead. Usesystemto describe something that is automatically included by Zendesk\nlike a system field or a system role. These things can’t be deleted by the user. Reservethank youandthanksfor times when users provide information that’s\ndifficult or inconvenient to collect. Thank you for submitting a request. Thank you for changing your settings. Lowercase for both. Don’t capitalize for emphasis. Lowercase. Two words. Not hyphenated. All lowercase. Capitalize both words. One word. Always capitalize the name of our company. Never use ZenDesk or give it an\napostrophe. We’re not the possessive type. Capitalize this feature name:The Zendesk Appsframework. These words aren’t bad. They’re just not in our terminology diet. Oops, we did it again. Seriously, though, we don’t useoopsor other\nself-deprecating blurts in error messages or empty states. That’s right. At Zendesk, you can skip the P-word. It takes up space in our UI\nand can come across as insincere. Your password was reset. Enter a new password. Your password was reset. Please enter a new password. We generally don’t apologize when things go wrong. When there’s an error, tell\nthe user what happened and give them clear directions on what they can do next. Instead we save apologies for meaningful situations: when something goes really\nwrong or when Zendesk as a company has made a serious error, like deleting an\naccount. Avoidweunless referring to a specific group of people. Don’t useweto refer\nto Zendesk the company or Zendesk the software. Similarly, avoid usingour. SeePronouns. The people in our Zendesk neighborhood. All of the people in the neighborhood\nhave a job to do. Anaccount owneris a type of administrator. The account name is associated with\nthis person’s name, usually the person who created the account. Just like “The\nHighlander,” there can be only one. For example, “Only the account owner has\npermission to make subscription changes.” Adminshave additional access to the Zendesk experience like setting up the\nworkflows, adding users, and defining automations. We recommendadminsinstead\nofadministrators. It’s friendlier and shorter. For example, “Allow admins to\ntag users.” Avoid telling agents to “talk to an admin.” Instead, inform them that an admin\ncan do the task and leave the communication up to the agent. For example, “You\ndon’t have Explore. An admin can activate that in your subscription.” In Support Enterprise,advisorsmanage the workflow and configure the Zendesk\nexperience. Advisors don’t solve tickets and they can only make private comments\nor add notes. Agentsare the bulk of the support staff for Zendesk subscribers. They’re\nassigned tickets and interact with their customers to resolve issues. For\nexample, “Zendesk Support offers several tools to make your agents more\nefficient.” Often synonymous withend user, but not all Zendesk subscribers think of their\nend users ascustomers. For example, the end users of an IT department are\nemployees. Usesubscriberto refer to people and organizations with a paid\nsubscription to Zendesk. Editorscan create and customize new dashboards, queries, and datasets. (Explore only.) Not hyphenated when used as a noun. Hyphenated when used as an adjective or\nmodifier. For example, “This access point is for the end user” and “This is an\nend-user access point.” Managershave full privileges in Guide. All admins have Guide manager\nprivileges, including access to all content. For example, “You must be a Guide\nmanager to create user segments.” This is for Sell only. When you’re adding more space to an account, you’re adding or fillingseats.\nSeats can be used across all products. For example, “You can add more agents by\npurchasing additional agent seats.” In Support Enterprise and Admin Center,staffis similar to agent. Staff can\nedit and solve tickets, view reports, and add or edit personal views and macros.\nIn Explore Enterprise, staff means a viewer who can see dashboards but cannot\ncreate or edit dashboards. (Support Enterprise, Explore Enterprise, and Admin\nCenter only.) The people who have a paid subscription with Zendesk. This is in contrast toend users: the customers of oursubscriberswho don’t pay to use our\nproducts. Team leadershave more access to Zendesk products than staff agents. They can\nread and edit all tickets and moderate forums. They can also create and edit end\nusers, groups, and organizations. (Support Enterprise only.) Admin, agent, end user, subscriber, website visitor, trialer: We have a lot of\ntypes.Useris fine, but be role-specific wherever possible. Vieweris used across all products. It refers to users who can see dashboards\nbut can’t edit or create them."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/design",
            "title": "Design overview / Design / Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "Foundations for creating purposeful UI."
                },
                {
                    "type": "list",
                    "items": []
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/design/color",
            "title": "Color / Design / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "UI colorsPrimary colorsSecondary colors",
                        "Primary colors",
                        "Secondary colors",
                        "Brand colors"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Zendesk Garden color system is a set of purposeful colors designed with brand personality, usability, and accessibility in mind. The system is broken down into two core palettes: UI and brand."
                },
                {
                    "type": "list",
                    "items": [
                        "UI colorsPrimary colorsSecondary colors",
                        "Primary colors",
                        "Secondary colors",
                        "Brand colors"
                    ]
                },
                {
                    "type": "p",
                    "text": "The UI colors are used when creating interface elements. Each color has been\ndesigned to meet accessibility requirements. Primary colors are used for the structure of interfaces, actionable items,\nand validation. Colors in the600,700, and800ranges have aWCAG\nAAratio above 4.5:1 against white or100backgrounds (excludingyellow-600). The800color range has AAA contrast ratios above 7:1\nagainst white and100backgrounds."
                },
                {
                    "type": "list",
                    "items": [
                        "grey-100#f8f9f9",
                        "grey-200#e8eaec",
                        "grey-300#d8dcde",
                        "grey-400#b0b8be",
                        "grey-500#919ca5",
                        "grey-600#848f99",
                        "grey-700#5c6970",
                        "grey-800#39434b",
                        "grey-900#293239",
                        "grey-1000#1c2227",
                        "grey-1100#151a1e",
                        "grey-1200#0a0d0e"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "kale-100#ecf9f9",
                        "kale-200#daeded",
                        "kale-300#cbe2e1",
                        "kale-400#97bfbf",
                        "kale-500#6ba4a5",
                        "kale-600#4a9999",
                        "kale-700#40787a",
                        "kale-800#16494f",
                        "kale-900#063940",
                        "kale-1000#03252a",
                        "kale-1100#061517",
                        "kale-1200#060e0e"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "blue-100#edf7ff",
                        "blue-200#ddecf8",
                        "blue-300#cce0f1",
                        "blue-400#93bcdc",
                        "blue-500#66a0cd",
                        "blue-600#2694d6",
                        "blue-700#1f73b7",
                        "blue-800#13456d",
                        "blue-900#0f3655",
                        "blue-1000#0a2338",
                        "blue-1100#061420",
                        "blue-1200#040d15"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "green-100#eef8f4",
                        "green-200#daeee6",
                        "green-300#cae3d9",
                        "green-400#94c1b0",
                        "green-500#4eab89",
                        "green-600#26a178",
                        "green-700#037f52",
                        "green-800#104b35",
                        "green-900#0b3b29",
                        "green-1000#0c261c",
                        "green-1100#0a1511",
                        "green-1200#080d0c"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "red-100#fff2f3",
                        "red-200#fee3e5",
                        "red-300#f5d5d8",
                        "red-400#f2a1a8",
                        "red-500#ea7881",
                        "red-600#eb5c69",
                        "red-700#cd3642",
                        "red-800#7e1d25",
                        "red-900#671219",
                        "red-1000#3d1418",
                        "red-1100#1d1011",
                        "red-1200#100b0c"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "yellow-100#fff3e4",
                        "yellow-200#ffe6cb",
                        "yellow-300#fed6a9",
                        "yellow-400#fca347",
                        "yellow-500#e38215",
                        "yellow-600#d67305",
                        "yellow-700#ac5918",
                        "yellow-800#673515",
                        "yellow-900#4c2c17",
                        "yellow-1000#2d1e15",
                        "yellow-1100#18120f",
                        "yellow-1200#0e0c0b"
                    ]
                },
                {
                    "type": "p",
                    "text": "Secondary colors are used in supplementary UI elements such as icons, tags,\nstatus badges, and illustrations. Each color has a light and dark hue with a\ndefault and muted variant. Muted colors are denoted by anMprefix, likeM400. The default color variants should be used for small UI elements when the\ndesign requires a vibrant color. The muted variants are for applications with\nlarger floods of color like data visualization and infographics. Colors in\nthe400range meet a minimum contrast of 3:1 on white backgrounds\n(excludinglemonandlime-400). Colors in the600range meet a 4.5:1\ncontrast ratio on white backgrounds (excludinglemon)."
                },
                {
                    "type": "list",
                    "items": [
                        "purple-100#f9f3fb",
                        "purple-200#f2e7f6",
                        "purple-300#e9d8f1",
                        "purple-400#d0a9e0",
                        "purple-500#bb86d3",
                        "purple-600#b276cd",
                        "purple-700#9256b1",
                        "purple-800#58209a",
                        "purple-900#411973",
                        "purple-1000#2e1150",
                        "purple-1100#230d3f",
                        "purple-1200#120720"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "royal-100#f4f5fc",
                        "royal-200#e7e9f8",
                        "royal-300#d8dcf4",
                        "royal-400#acb4e7",
                        "royal-500#8a96dd",
                        "royal-600#7a88d9",
                        "royal-700#4c67d3",
                        "royal-800#1833ab",
                        "royal-900#122680",
                        "royal-1000#0d1a5a",
                        "royal-1100#0a1445",
                        "royal-1200#050a25"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "fuschia-100#fbf3f8",
                        "fuschia-200#f7e6f1",
                        "fuschia-300#f2d5e7",
                        "fuschia-400#e3a4cc",
                        "fuschia-500#d77db7",
                        "fuschia-600#d16aac",
                        "fuschia-700#b34496",
                        "fuschia-800#78116c",
                        "fuschia-900#5a0d51",
                        "fuschia-1000#3f0939",
                        "fuschia-1100#31072c",
                        "fuschia-1200#1b0418"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "azure-100#eff7fe",
                        "azure-200#d9ecfc",
                        "azure-300#c4e0fa",
                        "azure-400#82bcf4",
                        "azure-500#4b9fee",
                        "azure-600#3191ea",
                        "azure-700#2770c3",
                        "azure-800#23446b",
                        "azure-900#1a3250",
                        "azure-1000#122238",
                        "azure-1100#0e1a2a",
                        "azure-1200#070d14"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "pink-100#fcf3f4",
                        "pink-200#f7e5e8",
                        "pink-300#f3d6dc",
                        "pink-400#e5a6b4",
                        "pink-500#d98193",
                        "pink-600#d96b81",
                        "pink-700#d62054",
                        "pink-800#75263d",
                        "pink-900#561d2e",
                        "pink-1000#3c141f",
                        "pink-1100#2e0f18",
                        "pink-1200#17080c"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "teal-100#d4fefa",
                        "teal-200#88fdf1",
                        "teal-300#0bf8e1",
                        "teal-400#03cdb8",
                        "teal-500#02ad9c",
                        "teal-600#2a9d8f",
                        "teal-700#367a74",
                        "teal-800#254846",
                        "teal-900#1b3534",
                        "teal-1000#122423",
                        "teal-1100#0e1c1a",
                        "teal-1200#070d0d"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "crimson-100#fbf3f2",
                        "crimson-200#f7e7e4",
                        "crimson-300#f1d7d2",
                        "crimson-400#e2aaa0",
                        "crimson-500#d58678",
                        "crimson-600#cf7464",
                        "crimson-700#be4938",
                        "crimson-800#811b12",
                        "crimson-900#61140d",
                        "crimson-1000#440e09",
                        "crimson-1100#340b07",
                        "crimson-1200#1c0604"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "mint-100#d6ffeb",
                        "mint-200#9affce",
                        "mint-300#0afe89",
                        "mint-400#00d26d",
                        "mint-500#01b15c",
                        "mint-600#16a260",
                        "mint-700#2d7e55",
                        "mint-800#1b4b33",
                        "mint-900#143726",
                        "mint-1000#0e261a",
                        "mint-1100#0b1d14",
                        "mint-1200#050e0a"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "orange-100#fdf3ed",
                        "orange-200#fae7d8",
                        "orange-300#f7d7be",
                        "orange-400#eda875",
                        "orange-500#e58035",
                        "orange-600#d57428",
                        "orange-700#af5626",
                        "orange-800#693317",
                        "orange-900#4d2711",
                        "orange-1000#361a0c",
                        "orange-1100#291409",
                        "orange-1200#150a04"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "lime-100#ecfae7",
                        "lime-200#d1f3c7",
                        "lime-300#b3eda3",
                        "lime-400#4fd12b",
                        "lime-500#45b025",
                        "lime-600#509f2d",
                        "lime-700#3d7e19",
                        "lime-800#2c491b",
                        "lime-900#203614",
                        "lime-1000#16250e",
                        "lime-1100#111d0a",
                        "lime-1200#090e05"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "lemon-100#fff7d4",
                        "lemon-200#ffea97",
                        "lemon-300#ffdc4f",
                        "lemon-400#efab00",
                        "lemon-500#c79100",
                        "lemon-600#b68500",
                        "lemon-700#8f6900",
                        "lemon-800#563e00",
                        "lemon-900#3f2e00",
                        "lemon-1000#2b2000",
                        "lemon-1100#221800",
                        "lemon-1200#110c00"
                    ]
                },
                {
                    "type": "p",
                    "text": "The brand color palette contains the primary brand colors of Zendesk’s\nproduct suite. These colors are reserved to denote elements in the UI related\nto Zendesk products."
                },
                {
                    "type": "list",
                    "items": [
                        "support#00a656",
                        "explore#30aabc",
                        "gather#f6c8be",
                        "guide#eb4962",
                        "chat#f79a3e",
                        "talk#efc93d",
                        "sell#c38f00"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/design/icons",
            "title": "Icon overview / Design / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Usage",
                        "Best practices",
                        "Installation"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Usage",
                        "Best practices",
                        "Installation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Garden’s icon library is implemented using SVG. Icons come two sizes: 12px and 16px.\nThe 16px icons can also be doubled to create 32px icons. Icons also come in two styles: stroke and fill.\nWhile stroke icons are the default icons to use, fill icons are used to show selected states. The default size is 16px, and should be used for the majority of cases.\nIn certain instances where 16px icons will break the line height or will not fit in a small space, 12px icons should be used. 16px is the default icon size. Use 16px icons where possible. Use 12px icons for compact spaces where 16px icons can’t fit. 32px icons are the scaled-up versions 16px icons. They are used for illustration only. Use 32px icons for illustration. Don’t use 32px icons for interactions. Use tooltips to clearly label interactive icons for accessibility. View thezendeskgarden/svg-iconsrepository for implementation instructions."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/design/icons/chrome-icons",
            "title": "Chrome icons / Design / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": []
                },
                {
                    "type": "p",
                    "text": "Below are all the icons currently available to use in theChromecomponent.\nThese icons should only be used within Chrome."
                },
                {
                    "type": "list",
                    "items": [
                        "answer-bot",
                        "app",
                        "arrange-content",
                        "arrow-right-left",
                        "bar-chart",
                        "book",
                        "bot-generic",
                        "building",
                        "call-in",
                        "chat",
                        "checkbox",
                        "clipboard",
                        "clock",
                        "cloud-upload",
                        "credit-card",
                        "customer-lists-fill",
                        "customize",
                        "dashboard",
                        "ellipsis",
                        "email-fill",
                        "file",
                        "file-document",
                        "file-error",
                        "file-image",
                        "file-pdf",
                        "file-presentation",
                        "file-spreadsheet",
                        "file-zip",
                        "garden",
                        "grid-add",
                        "group-fill",
                        "headset",
                        "help-center",
                        "home-fill",
                        "hook",
                        "knowledge-base",
                        "line-chart",
                        "macro",
                        "moderation",
                        "monitor",
                        "organization",
                        "person",
                        "platform",
                        "play",
                        "relationshape-chat",
                        "relationshape-connect",
                        "relationshape-explore",
                        "relationshape-gather",
                        "relationshape-guide",
                        "relationshape-message",
                        "relationshape-sell",
                        "relationshape-support",
                        "relationshape-talk",
                        "search",
                        "security",
                        "settings-fill",
                        "shapes",
                        "sunshine",
                        "user-lock",
                        "views-fill",
                        "widget",
                        "workflow",
                        "zendesk"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/design/icons/library",
            "title": "Icon library / Design / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "All icons"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "All icons"
                    ]
                },
                {
                    "type": "p",
                    "text": "This is a list of all the icons in the Garden library, independent of context."
                },
                {
                    "type": "list",
                    "items": [
                        "123-fill",
                        "123-stroke",
                        "adjust-fill",
                        "adjust-stroke",
                        "alert-error-fill",
                        "alert-error-stroke",
                        "alert-warning-fill",
                        "alert-warning-stroke",
                        "align-center-fill",
                        "align-center-stroke",
                        "align-justify-fill",
                        "align-justify-stroke",
                        "align-left-fill",
                        "align-left-stroke",
                        "align-right-fill",
                        "align-right-stroke",
                        "alt-text-fill",
                        "alt-text-stroke",
                        "arrow-left-fill",
                        "arrow-left-sm-fill",
                        "arrow-left-sm-stroke",
                        "arrow-left-stroke",
                        "arrow-left-up-fill",
                        "arrow-left-up-stroke",
                        "arrow-retweet-fill",
                        "arrow-retweet-stroke",
                        "arrow-reverse-fill",
                        "arrow-reverse-stroke",
                        "arrow-trending-fill",
                        "arrow-trending-stroke",
                        "asterisk-fill",
                        "asterisk-stroke",
                        "at-fill",
                        "at-stroke",
                        "bar-chart-fill",
                        "bar-chart-stroke",
                        "basketball-fill",
                        "basketball-stroke",
                        "bold-fill",
                        "bold-stroke",
                        "book-closed-fill",
                        "book-closed-stroke",
                        "book-open-fill",
                        "book-open-stroke",
                        "bookmark-fill",
                        "bookmark-stroke",
                        "box-3d-fill",
                        "box-3d-stroke",
                        "building-fill",
                        "building-stroke",
                        "calendar-fill",
                        "calendar-stroke",
                        "camera-fill",
                        "camera-stroke",
                        "car-fill",
                        "car-stroke",
                        "center-fill",
                        "center-stroke",
                        "check-badge-fill",
                        "check-badge-stroke",
                        "check-box-double-fill",
                        "check-box-double-stroke",
                        "check-box-fill",
                        "check-box-stroke",
                        "check-circle-fill",
                        "check-circle-stroke",
                        "check-double-fill",
                        "check-double-stroke",
                        "check-lg-fill",
                        "check-lg-stroke",
                        "check-sm-fill",
                        "check-sm-stroke",
                        "chevron-box-fill",
                        "chevron-box-stroke",
                        "chevron-double-down-fill",
                        "chevron-double-down-stroke",
                        "chevron-double-left-fill",
                        "chevron-double-left-stroke",
                        "chevron-double-right-fill",
                        "chevron-double-right-stroke",
                        "chevron-double-up-fill",
                        "chevron-double-up-stroke",
                        "chevron-down-fill",
                        "chevron-down-stroke",
                        "chevron-left-fill",
                        "chevron-left-stroke",
                        "chevron-right-fill",
                        "chevron-right-stroke",
                        "chevron-up-fill",
                        "chevron-up-stroke",
                        "circle-fill",
                        "circle-full-fill",
                        "circle-full-stroke",
                        "circle-line-fill",
                        "circle-line-stroke",
                        "circle-sm-fill",
                        "circle-sm-stroke",
                        "circle-stroke",
                        "clipboard-blank-fill",
                        "clipboard-blank-stroke",
                        "clipboard-check-fill",
                        "clipboard-check-stroke",
                        "clipboard-list-fill",
                        "clipboard-list-stroke",
                        "clock-cycle-fill",
                        "clock-cycle-stroke",
                        "clock-fill",
                        "clock-in-fill",
                        "clock-in-stroke",
                        "clock-out-fill",
                        "clock-out-stroke",
                        "clock-stroke",
                        "copy-fill",
                        "copy-stroke",
                        "credit-card-fill",
                        "credit-card-stroke",
                        "css-fill",
                        "css-stroke",
                        "cursor-arrow-fill",
                        "cursor-arrow-stroke",
                        "cutlery-fill",
                        "cutlery-stroke",
                        "dash-fill",
                        "dash-stroke",
                        "database-fill",
                        "database-stroke",
                        "decimal-fill",
                        "decimal-stroke",
                        "direction-ltr-fill",
                        "direction-ltr-stroke",
                        "direction-rtl-fill",
                        "direction-rtl-stroke",
                        "document-search-fill",
                        "document-search-stroke",
                        "download-fill",
                        "download-stroke",
                        "duplicate-fill",
                        "duplicate-stroke",
                        "edit-redo-fill",
                        "edit-redo-stroke",
                        "edit-undo-fill",
                        "edit-undo-stroke",
                        "email-fill",
                        "email-stroke",
                        "eraser-fill",
                        "eraser-stroke",
                        "exit-fill",
                        "exit-stroke",
                        "eye-fill",
                        "eye-hide-fill",
                        "eye-hide-stroke",
                        "eye-stroke",
                        "facebook-fill",
                        "facebook-stroke",
                        "file-document-fill",
                        "file-document-stroke",
                        "file-error-fill",
                        "file-error-stroke",
                        "file-generic-fill",
                        "file-generic-stroke",
                        "file-image-fill",
                        "file-image-stroke",
                        "file-pdf-fill",
                        "file-pdf-stroke",
                        "file-presentation-fill",
                        "file-presentation-stroke",
                        "file-spreadsheet-fill",
                        "file-spreadsheet-stroke",
                        "file-zip-fill",
                        "file-zip-stroke",
                        "filter-fill",
                        "filter-stroke",
                        "flag-fill",
                        "flag-stroke",
                        "folder-closed-fill",
                        "folder-closed-stroke",
                        "folder-open-fill",
                        "folder-open-stroke",
                        "full-width-fill",
                        "full-width-stroke",
                        "gear-fill",
                        "gear-stroke",
                        "github-fill",
                        "github-stroke",
                        "globe-fill",
                        "globe-stroke",
                        "grid-2x2-fill",
                        "grid-2x2-stroke",
                        "grid-3x3-fill",
                        "grid-3x3-stroke",
                        "grip",
                        "heading-fill",
                        "heading-stroke",
                        "heart-fill",
                        "heart-stroke",
                        "history-fill",
                        "history-stroke",
                        "home-fill",
                        "home-stroke",
                        "horizontal-rule-fill",
                        "horizontal-rule-stroke",
                        "image-fill",
                        "image-stroke",
                        "inbox-fill",
                        "inbox-stroke",
                        "indent-decrease-fill",
                        "indent-decrease-stroke",
                        "indent-increase-fill",
                        "indent-increase-stroke",
                        "info-fill",
                        "info-stroke",
                        "interlocking-rings-fill",
                        "interlocking-rings-stroke",
                        "italic-fill",
                        "italic-stroke",
                        "leaf-fill",
                        "leaf-stroke",
                        "lifesaver-fill",
                        "lifesaver-stroke",
                        "lightbulb-fill",
                        "lightbulb-stroke",
                        "lightning-bolt-fill",
                        "lightning-bolt-stroke",
                        "line-graph-fill",
                        "line-graph-stroke",
                        "line-social-fill",
                        "line-social-stroke",
                        "link-fill",
                        "link-remove-fill",
                        "link-remove-stroke",
                        "link-stroke",
                        "linkedin-fill",
                        "linkedin-stroke",
                        "list-bullet-fill",
                        "list-bullet-stroke",
                        "list-number-fill",
                        "list-number-rtl-fill",
                        "list-number-rtl-stroke",
                        "list-number-stroke",
                        "location-fill",
                        "location-stroke",
                        "lock-locked-fill",
                        "lock-locked-stroke",
                        "lock-unlocked-fill",
                        "lock-unlocked-stroke",
                        "markup-fill",
                        "markup-stroke",
                        "maximize-fill",
                        "maximize-stroke",
                        "megaphone-fill",
                        "megaphone-stroke",
                        "menu-fill",
                        "menu-stroke",
                        "messenger-fill",
                        "messenger-stroke",
                        "microphone-off-fill",
                        "microphone-off-stroke",
                        "microphone-on-fill",
                        "microphone-on-stroke",
                        "minimize-fill",
                        "minimize-stroke",
                        "mobile-phone-fill",
                        "mobile-phone-stroke",
                        "monitor-fill",
                        "monitor-stroke",
                        "moon-fill",
                        "moon-stroke",
                        "multiline-fill",
                        "multiline-stroke",
                        "new-window-fill",
                        "new-window-stroke",
                        "notes-fill",
                        "notes-stroke",
                        "notification-fill",
                        "notification-stroke",
                        "number-fill",
                        "number-stroke",
                        "original-size-fill",
                        "original-size-stroke",
                        "overflow-fill",
                        "overflow-stroke",
                        "overflow-vertical-fill",
                        "overflow-vertical-stroke",
                        "palette-fill",
                        "palette-stroke",
                        "panels-fill",
                        "panels-stroke",
                        "paperclip",
                        "parentheses-fill",
                        "parentheses-stroke",
                        "pause-fill",
                        "pause-stroke",
                        "pencil-fill",
                        "pencil-stroke",
                        "phone-call-end-fill",
                        "phone-call-end-stroke",
                        "phone-call-in-fill",
                        "phone-call-in-stroke",
                        "phone-call-out-fill",
                        "phone-call-out-stroke",
                        "phone-call-pause-fill",
                        "phone-call-pause-stroke",
                        "phone-call-speaker-fill",
                        "phone-call-speaker-stroke",
                        "phone-call-transfer-fill",
                        "phone-call-transfer-only-fill",
                        "phone-call-transfer-only-stroke",
                        "phone-call-transfer-stroke",
                        "phone-fill",
                        "phone-stroke",
                        "pin-fill",
                        "pin-remove-fill",
                        "pin-remove-stroke",
                        "pin-stroke",
                        "play-circle-fill",
                        "play-circle-stroke",
                        "play-fill",
                        "play-stroke",
                        "plug-fill",
                        "plug-stroke",
                        "plus-circle-fill",
                        "plus-circle-stroke",
                        "plus-fill",
                        "plus-stroke",
                        "puzzle-piece-fill",
                        "puzzle-piece-stroke",
                        "question-mark-fill",
                        "question-mark-stroke",
                        "quote-fill",
                        "quote-stroke",
                        "rearrange-fill",
                        "rearrange-stroke",
                        "record-fill",
                        "record-stroke",
                        "reload-fill",
                        "reload-stroke",
                        "sandbox-fill",
                        "sandbox-stroke",
                        "search-fill",
                        "search-stroke",
                        "shapes-fill",
                        "shapes-stroke",
                        "share-fill",
                        "share-stroke",
                        "shield-fill",
                        "shield-stroke",
                        "shopping-cart-fill",
                        "shopping-cart-stroke",
                        "signpost-fill",
                        "signpost-stroke",
                        "slack-fill",
                        "slack-stroke",
                        "smile-slight-fill",
                        "smile-slight-stroke",
                        "smiley-fill",
                        "smiley-stroke",
                        "sort-fill",
                        "sort-stroke",
                        "sparkle-fill",
                        "sparkle-stroke",
                        "speech-bubble-conversation-fill",
                        "speech-bubble-conversation-stroke",
                        "speech-bubble-lightning-bolt-fill",
                        "speech-bubble-lightning-bolt-stroke",
                        "speech-bubble-plain-fill",
                        "speech-bubble-plain-stroke",
                        "star-fill",
                        "star-stroke",
                        "sun-fill",
                        "sun-stroke",
                        "table-fill",
                        "table-stroke",
                        "tag-fill",
                        "tag-stroke",
                        "terminal-cli-fill",
                        "terminal-cli-stroke",
                        "terminal-window-fill",
                        "terminal-window-stroke",
                        "text-color-fill",
                        "text-color-stroke",
                        "text-fill",
                        "text-stroke",
                        "thumbs-down-fill",
                        "thumbs-down-stroke",
                        "thumbs-up-fill",
                        "thumbs-up-stroke",
                        "translation-created-fill",
                        "translation-created-stroke",
                        "translation-deleted-fill",
                        "translation-deleted-stroke",
                        "translation-exists-fill",
                        "translation-exists-stroke",
                        "translation-outdated-fill",
                        "translation-outdated-stroke",
                        "translation-updated-fill",
                        "translation-updated-stroke",
                        "trash-fill",
                        "trash-stroke",
                        "twitter-fill",
                        "twitter-stroke",
                        "underline-fill",
                        "underline-stroke",
                        "upload-fill",
                        "upload-stroke",
                        "user-circle-fill",
                        "user-circle-stroke",
                        "user-follow-fill",
                        "user-follow-stroke",
                        "user-group-fill",
                        "user-group-stroke",
                        "user-list-fill",
                        "user-list-stroke",
                        "user-solo-fill",
                        "user-solo-stroke",
                        "user-unfollow-fill",
                        "user-unfollow-stroke",
                        "voicemail-fill",
                        "voicemail-stroke",
                        "volume-muted-fill",
                        "volume-muted-stroke",
                        "volume-unmuted-fill",
                        "volume-unmuted-stroke",
                        "wechat-fill",
                        "wechat-stroke",
                        "whatsapp-fill",
                        "whatsapp-stroke",
                        "wrap-left-fill",
                        "wrap-left-stroke",
                        "wrap-right-fill",
                        "wrap-right-stroke",
                        "x-circle-fill",
                        "x-circle-stroke",
                        "x-fill",
                        "x-stroke",
                        "zendesk-fill",
                        "zendesk-stroke"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns",
            "title": "Patterns overview / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "p",
                    "text": "Additional context for how to use components."
                },
                {
                    "type": "list",
                    "items": []
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/buttons",
            "title": "Buttons / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Anatomy",
                        "FormattingSizeAlignmentVariations",
                        "Size",
                        "Alignment",
                        "Variations",
                        "StatesLoadingDisabled",
                        "Loading",
                        "Disabled",
                        "FlowsButtons vs Anchor (links)",
                        "Buttons vs Anchor (links)",
                        "Content guidelines",
                        "Localization & internationalizationRTL (right-to-left)",
                        "RTL (right-to-left)",
                        "AccessibilityKeyboard supportARIA attributes",
                        "Keyboard support",
                        "ARIA attributes"
                    ]
                },
                {
                    "type": "p",
                    "text": "A button is an element on a page or view that tells a user what they can do and triggers an action."
                },
                {
                    "type": "list",
                    "items": [
                        "Anatomy",
                        "FormattingSizeAlignmentVariations",
                        "Size",
                        "Alignment",
                        "Variations",
                        "StatesLoadingDisabled",
                        "Loading",
                        "Disabled",
                        "FlowsButtons vs Anchor (links)",
                        "Buttons vs Anchor (links)",
                        "Content guidelines",
                        "Localization & internationalizationRTL (right-to-left)",
                        "RTL (right-to-left)",
                        "AccessibilityKeyboard supportARIA attributes",
                        "Keyboard support",
                        "ARIA attributes"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Primary buttons are for the most important action in a given view. Use one primary button per page or view.",
                        "Default buttons are for secondary actions",
                        "Basic buttons are for repetitive or deemphasized actions in a given view"
                    ]
                },
                {
                    "type": "p",
                    "text": "Button size plays a part in content and user interaction.\nClear labels and visual signifiers such as shape, color, and size\nhelp communicate the types of actions available and their priority in the process."
                },
                {
                    "type": "list",
                    "items": [
                        "The default button size is medium",
                        "Use small buttons on screens that have greater information density"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use same size buttons and inputs in the same flow"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid mixing and matching button and input sizes"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a basic or default button is placed in conjunction with a primary button,\nthe primary button should always be placed at the end."
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure the primary button is placed at the end of the set of actions"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid placing primary buttons at the start of action groupings"
                    ]
                },
                {
                    "type": "p",
                    "text": "Buttons can containmediaiconography positioned at the start or end,\nto provide additional context. Only use icons when necessary."
                },
                {
                    "type": "list",
                    "items": [
                        "Use task-specific verbs for button labels"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Do not use iconography in addition to labels when buttons are grouped"
                    ]
                },
                {
                    "type": "p",
                    "text": "Where possible, avoid usingIcon buttonsoverButtonswith labels."
                },
                {
                    "type": "list",
                    "items": [
                        "Use buttons with labels to maximise inclusivity when using primary or secondary actions"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid using icon buttons as primary or secondary actions where possible as their meaning can be open to interpretation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Loading buttons display aDots loaderinside the button to show loading progress.\nThe Dots loader appears after the user has initiated an action, signifying the site\nis loading the next action to occur. Buttons shouldn’t change size while loading. Adisabled buttonprevents user interaction.\nThey don’t appear in the tab order, can’t receive focus, and may not be read aloud by a screen reader. If a button action might result in an error, it is preferable to show an error message than to\ndisable the interaction altogether.\nError messages can at least guide the user’s next action, while a disabled button provides no useful information.\nIt can be frustrating if a user doesn’t know what mistake they made and how to proceed."
                },
                {
                    "type": "list",
                    "items": [
                        "Always keep buttons interactive",
                        "Add contextual, in-line error notifications that set people up for success"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Do not disable a button with no clear direction on how to move forward"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Buttonstrigger an action on a page or view",
                        "Anchor(links) help users navigate from one location to another"
                    ]
                },
                {
                    "type": "p",
                    "text": "The button call-to-action (CTA) should guide the experience, not just finish a page.\nTypically, the CTA repeats the page heading when possible (e.g. “Add agent”).\nThe phrase repetition confirms the action that will take place."
                },
                {
                    "type": "list",
                    "items": [
                        "Write labels as verbs",
                        "Communicate a single action per button",
                        "Use sentence case",
                        "Consider longer languages. Use 1-4 words and a maximum of 20 characters"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid CTAs that lack context like “Yes,” “No,” or “Maybe”",
                        "Avoid calling out more than one action",
                        "Avoid ALL CAPS",
                        "Avoid articles, pronouns, and punctuation"
                    ]
                },
                {
                    "type": "p",
                    "text": "For more help with choosing the right verb, visit ouractionable language guidelines. Actions need to accommodate different languages (making them wider or shorter) and both left-to-right\nand right-to-left direction. Keep in mind that the width of your actions will change and act accordingly. For RTL languages, the layout of the button is mirrored.Split buttonswill automatically switch places for dropdown and label,\nwhilst media elements such as icons will be placed on the right side of the text. Users must be able to activate a button by pressingEnterorSpacewhile the button has focus. Buttons can have different states that benefit from ARIA attributes.\nAssistive technology will communicate these attributes to users, providing users with important context for and\ninformation about the user interface. Toggle buttonsutilize thearia-pressedattribute indicating the current “pressed” state.\nThe attribute must be set to “false” when the button hasn’t been pressed, and then change to “true,” once it has. Icon buttonsutilize thearia-labelattribute to provide an accessible text label\nfor the icon. Ensure the label is appropriately localized on implementation. When utilizingDropdownsthat leverageButtons,\nthearia-expandedattribute is set on the Button to indicate if the Dropdown menu is expanded or collapsed,\nand whether or not its child elements are displayed or hidden.\nThe attribute must be set to “false” when the menu is closed, and then change to “true” when the menu is open. A Button that opens a Dropdown menu must also havearia-controlsset to the id of the expandable menu\nandaria-expandedset to the current state of the menu. Finally, a Button that opens a Dropdown menu must havearia-haspopupset to “true.”"
                },
                {
                    "type": "list",
                    "items": [
                        "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#accessibility_concerns",
                        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-pressed",
                        "https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-expanded",
                        "https://www.w3.org/WAI/ARIA/apg/patterns/button/",
                        "https://inclusive-components.design/toggle-button/",
                        "https://inclusive-components.design/menus-menu-buttons/"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/copy",
            "title": "Copy / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "LayoutsDefaultMinimal",
                        "Default",
                        "Minimal",
                        "Content",
                        "Flows",
                        "Localization & internationalization",
                        "AccessibilityDefaultMinimalAlt textARIA attributesAdditional resources",
                        "Default",
                        "Minimal",
                        "Alt text",
                        "ARIA attributes",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "The copy action provides the user the ability to copy a value from an input field or other areas within  the interface. It temporarily stores information that can be retrieved and used within a given flow."
                },
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "LayoutsDefaultMinimal",
                        "Default",
                        "Minimal",
                        "Content",
                        "Flows",
                        "Localization & internationalization",
                        "AccessibilityDefaultMinimalAlt textARIA attributesAdditional resources",
                        "Default",
                        "Minimal",
                        "Alt text",
                        "ARIA attributes",
                        "Additional resources"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Always include the value being copied and the copy action which can be represented as aButtonor anIcon Button",
                        "When the field label is unavailable, it is recommended to use theTooltipcomponent on the\naction to reinforce the type of information being copied"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Labelof the value being copied. Ensure a label is visible in the interface however it can bevisually hiddenif required.",
                        "Actual valuethat will be copied",
                        "Copyaction"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Input group",
                        "Notification",
                        "Icon button",
                        "Tooltip"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use anInput groupto enable the copy action within forms",
                        "If the data being copied is read-only, use aread-only Input group",
                        "Use a medium-sized default button for copy actions and place the button to the side of the input field"
                    ]
                },
                {
                    "type": "p",
                    "text": "Copy interaction can be also found in a more minimal style, for example in list items within cards. The label in\nthat case would not be visible, or it might have an icon at the start to indicate the field type. The copy action\nwould be to the side of the item as anIcon button."
                },
                {
                    "type": "list",
                    "items": [
                        "For Input groups, use “Copy” as the visible button label",
                        "For Icon buttons, include the object as part of the Tooltip content",
                        "If there are multiple copy buttons on a page or view, ensure the appropriateARIAoraltattributes are added"
                    ]
                },
                {
                    "type": "p",
                    "text": "After the interaction, provide feedback with a successNotification. Notifications\nshould remain on screen for at least 5 seconds. The copy action should appear on the right side of the Input field for LTR (left-to-right) languages and on the\nleft side for RTL (right-to-left) languages. Different languages can also affect the copy label length so ensure adequate space is considered within the\nInput field."
                },
                {
                    "type": "list",
                    "items": [
                        "Use the read-only Input field in forms"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use the disabled Input field"
                    ]
                },
                {
                    "type": "p",
                    "text": "When the copy interaction is used in a list, make sure that the interaction is discoverable by using the copy\nicon inside an Icon button and provide aTooltipon hover or focus. In the example above, the icon text label and copy button text label should match. The email icon will havealttext as “email” and the copy Icon button will say “Copy email”. If there are multiple copy fields on a page or view within a form, use thearia-labelattribute within the\n“Copy” button to match the fields name."
                },
                {
                    "type": "list",
                    "items": [
                        "<button aria-label=\"Copy invoice number\">Copy</button>",
                        "<button aria-label=\"Copy confirmation number\">Copy</button>"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "https://www.w3.org/WAI/WCAG21/Understanding/headings-and-labels.html"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/drag-and-drop",
            "title": "Drag and drop / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "Formatting and StatesDraggable itemPlaceholders and indicatorsDropzones",
                        "Draggable item",
                        "Placeholders and indicators",
                        "Dropzones",
                        "FlowsReordering a listMoving items between multiple listsMoving an item onto an item or a list (nesting or replacing)Predictable drop behavior and collision algorithms",
                        "Reordering a list",
                        "Moving items between multiple lists",
                        "Moving an item onto an item or a list (nesting or replacing)",
                        "Predictable drop behavior and collision algorithms",
                        "Localization & internationalizationGrip handle locationHidden labels or descriptions",
                        "Grip handle location",
                        "Hidden labels or descriptions",
                        "AccessibilityKeyboard controlsScreen readersAlternative ways to drag-and-drop interaction",
                        "Keyboard controls",
                        "Screen readers",
                        "Alternative ways to drag-and-drop interaction"
                    ]
                },
                {
                    "type": "p",
                    "text": "Drag and drop pattern is often used to change the order of items in a list or to move and organize items between lists."
                },
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "Formatting and StatesDraggable itemPlaceholders and indicatorsDropzones",
                        "Draggable item",
                        "Placeholders and indicators",
                        "Dropzones",
                        "FlowsReordering a listMoving items between multiple listsMoving an item onto an item or a list (nesting or replacing)Predictable drop behavior and collision algorithms",
                        "Reordering a list",
                        "Moving items between multiple lists",
                        "Moving an item onto an item or a list (nesting or replacing)",
                        "Predictable drop behavior and collision algorithms",
                        "Localization & internationalizationGrip handle locationHidden labels or descriptions",
                        "Grip handle location",
                        "Hidden labels or descriptions",
                        "AccessibilityKeyboard controlsScreen readersAlternative ways to drag-and-drop interaction",
                        "Keyboard controls",
                        "Screen readers",
                        "Alternative ways to drag-and-drop interaction"
                    ]
                },
                {
                    "type": "p",
                    "text": "Drag and dropinteraction is common in workflows where the user wants to change the order or of items.\nIt is also often used to build something by moving items around the screen,\nfor example, a layout, report, or dashboard."
                },
                {
                    "type": "list",
                    "items": [
                        "Draggable grip",
                        "Target placeholder as whitespace",
                        "Draggable item being dragged"
                    ]
                },
                {
                    "type": "p",
                    "text": "Drag and drop between lists puts more emphasis on dropzones and source placeholders."
                },
                {
                    "type": "list",
                    "items": [
                        "Draggable item",
                        "Dropzone",
                        "Source placeholder",
                        "Dropzone active",
                        "Dropzone highlighted",
                        "Draggable item released"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Draggable"
                    ]
                },
                {
                    "type": "p",
                    "text": "The grip handle and border define the defaultDraggableitem.\nDraggable items should have labels that are short and easily identifiable. Sometimes these are\nuser-generated so the length may vary. The grip icon provides a visual affordance to communicate\ndrag-and-drop. Border communicates the boundaries of a draggable item. Draggable items with\nmany interactive elements can restrict movement to the grip handle only."
                },
                {
                    "type": "list",
                    "items": [
                        "Defaultstate communicates what is draggable",
                        "Grabbedstate communicates the item moving",
                        "Disabledstate communicates a non-interactive item"
                    ]
                },
                {
                    "type": "p",
                    "text": "Items can include other interactive elements inside them, such as buttons, anchors, or even form elements.\nNested elements will make the parent element taller and harder to interact with. Instead of making the item transparent,\ntransform it into a simpler draggable item while dragging."
                },
                {
                    "type": "list",
                    "items": [
                        "Provide a simpler preview of a draggable item while dragging"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t make draggable items transparent during dragging"
                    ]
                },
                {
                    "type": "p",
                    "text": "Placeholders and indicators are visible during the drag-and-drop interaction. They show where grabbed items can be placed. Use empty placeholders for most basic drag and drop interactions, such as reordering\nitems within a single list. Use a solid grey placeholder when moving items between many lists, to show where\nthe item originated and where it is going. Use target indicators when working with complex layouts where you don’t want to transform\nthe layout before releasing the item. Placeholdersand indicators appear during the drag-and-drop interaction.\nThey show where you can place a grabbed item."
                },
                {
                    "type": "list",
                    "items": [
                        "Useempty spaceplaceholder to show the source or target destination when reordering items",
                        "Use asolid greyplaceholder to show the source and target destination when moving items between lists",
                        "Use adisabled stateto show that the source item will copy to another list"
                    ]
                },
                {
                    "type": "p",
                    "text": "Target indicatorsshow where dragged items will appear upon release.\nUse them in condensed layouts or when you don’t want to transform the list while dragging."
                },
                {
                    "type": "list",
                    "items": [
                        "Use avertical indicatorto communicate placement between items in a row direction list (left to right)",
                        "Use ahorizontal indicatorto communicate placement between items in a column direction list (top to bottom)"
                    ]
                },
                {
                    "type": "p",
                    "text": "Dropzonesare locations on the screen where the item can be moved onto.\nFor flat structure lists, the dropzone is usually the list container. In complex workflows, dropzone might\nbe another list — flat or nested, or even another item. Dropzones can be communicated in several ways,\nby using dashed borders, labels or a task-oriented context of reordering or building something on the screen."
                },
                {
                    "type": "list",
                    "items": [
                        "Use1px grey-600border to show emptydefault dropzones",
                        "Use a dashed1px blue-600border to showactive dropzoneswhere grabbed items can be placed",
                        "Use solid2px blue-600border to communicate ahighlighted dropzone"
                    ]
                },
                {
                    "type": "p",
                    "text": "Dropzones, like good empty states, should explain how to interact with it. Sometimes, the content in\nthe dropzone will appear after the user drags the item so only “drop” is mentioned in the content.\nInclude the consequence if it’s important for the user to understand what will happen when they drop\nthe item in this dropzone. Content, together with supporting icons and colors will make the user\nconfident in the end result."
                },
                {
                    "type": "list",
                    "items": [
                        "Default dropzonewithout icon",
                        "Danger dropzonewith a theme and icon applied",
                        "Highlighted dropzonewith a custom icon"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use icons to reinforce the labels when needed. Hide decorative icons from assistive technologies. Use borders and labels to make empty dropzones discoverable. Keep populated dropzones simple by showing only items inside.\nAlways provide the label for screen readers, even if it’s not visible on the screen."
                },
                {
                    "type": "list",
                    "items": [
                        "Include content that will explain how to interact with the empty dropzone",
                        "Populated dropzones don’t need a supporting call-to-action"
                    ]
                },
                {
                    "type": "p",
                    "text": "Provide visual affordance when items are both draggable and potential dropzones."
                },
                {
                    "type": "list",
                    "items": [
                        "Item with default styling",
                        "Item as an active dropzone with a dashed border",
                        "Item as a highlighted dropzone"
                    ]
                },
                {
                    "type": "p",
                    "text": "This is the most basic example of drag-and-drop. Interaction is discoverable through a grip handle on the item.\nSeedraggable tablesfor reordering rows. Once the item is grabbed, empty space proportional to the grabbed item will communicate where the item will\nbe placed after release. The dragged item should follow the cursor around the screen without any delay. Once the item is released on the desired location, the movement is instantaneous. If the item is released\noutside of the dropzone container, it snaps back into its original place. Moving items between lists usually happens when there is a need to quickly categorize items into different groups.\nThis experience is quite common in a Kanban-like context or in a builder workflow. Use content and styling to\nhighlight dropzones that can receive items. Highlight active dropzones while an item is being dragged. Use highlighted styling to show which dropzone will\nreceive the item after release. Use solid grey placeholders to communicate where the interaction originated and\nwhere it will end up. Upon release of the item, position it at the end, unless the user specified a place in the list.\nCommunicate to the user if the change will be saved immediately or through a page-level save action. Drag-and-drop provides a quick way to do several things at once. Change the order and hierarchy of items,\nnest, delete and replace items. Use target indicators to avoid transforming the list before release. Target indicators help the user\nunderstand where the item will be placed before they commit to the action by dropping the item. Use a solid grey placeholder state to communicate where the grabbed item originated. Highlight active dropzones\nthat can receive the grabbed item. Show indicators in the place where the grabbed item will appear after the drop. Show the item instantly in the target location. Item will transform the layout or adapt to the constraints\nof the container. Use text and icons to communicate the intention, such as nesting or replacing. Collision algorithms allow control over how to detect collisions between draggable items and dropzones.\nDepending on the complexity of the drag and drop experience, some algorithms are preferred over others. Use the closest center algorithm to find the closest dropzone whose center is closest to the center\nof the draggable item. This is more forgiving as it allows for dropzone collision without intersection.\nThe closest center algorithm is the recommended default for most use cases, like simple sortable lists. The closest corner measures all four corners of the draggable item and dropzone and finds the closest one.\nUse the closest corner algorithm when there are many dropzones in the condensed interface.\nThis behavior is most aligned with what users would expect. Use the rectangle intersection algorithm when there needs to be an intersection between an item and a dropzone.\nThis algorithm is less forgiving but more precise. Use it in dropzones for destructive actions to prevent mistakes. Place the grip handle on the left side for LTR and on the right for RTL languages.\nThe Draggable item component provides automatic language direction support. Some labels or descriptions could be hidden or appear only in certain parts of the interaction.\nThey support assistive technologies, like screen readers, and need to be localized as well. Provide consistent keyboard controls for non-mouse users:"
                },
                {
                    "type": "list",
                    "items": [
                        "Spacekey selects the focused item, or releases the item within a different dropzone container",
                        "UpandDownarrows keys change the position order of a grabbed item within a single container",
                        "LeftandRightarrow keys move the grabbed item between different containers on the screen.\nSwapLeftandRightbindings to match the LTR or RTL direction",
                        "If the workflow supports Undo and Redo actions, those should work for the drag and drop interaction",
                        "Esckey cancels movement of the grabbed item and returns it to the original position"
                    ]
                },
                {
                    "type": "p",
                    "text": "Announce all states of the drag-and-drop interaction to screen readers. Ensure items and dropzones\nhave distinct labels. Screen readers should communicate focus, selection, change of order,\nor dropzone change if moving between lists. Complex workflow might provide alternative ways of moving items around, to supplement the drag and drop behavior.\nAlternative actions, like buttons, might be placed next to the Draggable item to provide a different way of\nmoving the item to another list. These situations should be evaluated on a case-by-case basis as they rely\nheavily on the workflow context. What makes sense for one flow, might not make much sense for another."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/errors",
            "title": "Error handling / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Global AlertsAnatomyLayoutExamples",
                        "Anatomy",
                        "Layout",
                        "Examples",
                        "AlertsAnatomyLayout",
                        "Anatomy",
                        "Layout",
                        "NotificationsAnatomyLayoutExamples",
                        "Anatomy",
                        "Layout",
                        "Examples",
                        "FormsAnatomyLayoutFormatting",
                        "Anatomy",
                        "Layout",
                        "Formatting",
                        "AccessibilityAdditional resources",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages let users know that a problem has occurred and what to do about it."
                },
                {
                    "type": "list",
                    "items": [
                        "Global AlertsAnatomyLayoutExamples",
                        "Anatomy",
                        "Layout",
                        "Examples",
                        "AlertsAnatomyLayout",
                        "Anatomy",
                        "Layout",
                        "NotificationsAnatomyLayoutExamples",
                        "Anatomy",
                        "Layout",
                        "Examples",
                        "FormsAnatomyLayoutFormatting",
                        "Anatomy",
                        "Layout",
                        "Formatting",
                        "AccessibilityAdditional resources",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "Examples of errors include:"
                },
                {
                    "type": "list",
                    "items": [
                        "The system has failed to load or perform an action",
                        "The user has made an incorrect action or input"
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages are best surfaced using these components:"
                },
                {
                    "type": "list",
                    "items": [
                        "Global Alerts",
                        "Alerts",
                        "Notifications",
                        "Validation messages"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the Global Alert to communicate system level errors that interrupt a user’s task."
                },
                {
                    "type": "list",
                    "items": [
                        "Always include a title to explain what has went wrong and how to fix it",
                        "Provide a clear action to address the issue"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TheTitleannounces what has went wrong",
                        "TheContentarea describes how to address the issue. It may include ananchorto\nprovide additional information",
                        "ThisButtonprovides a way to resolve the error.\nThis button is placed towards the end of the Global alert"
                    ]
                },
                {
                    "type": "p",
                    "text": "Global Alerts sit above chrome and push all page content down. They are the first item seen and announced by screen readers.\nFor errors, Global Alerts should be persistent until the issue has been resolved by the user or system. Use the Global Alert component to communicate that users have lost the connection to Zendesk.\nProvide a button to allow users to reconnect.\nThere is no close button as the alert should only be dismissed when the connection is restored. Use alerts to communicate contextual information on how to fix an error.\nThey persist until they are dismissed by the user or the issue is resolved.\nThey are most commonly used in conjunction with validation messages in forms."
                },
                {
                    "type": "list",
                    "items": [
                        "Title",
                        "TheParagrapharea describes in more detail the error and how to fix",
                        "TheClose buttonis anicon button, at the end of the Alert"
                    ]
                },
                {
                    "type": "p",
                    "text": "Alerts appear near their related items. They can expand to fill the width of the container or area they are in."
                },
                {
                    "type": "list",
                    "items": [
                        "An Alert at the beginning of the form to summarize what went wrong",
                        "Each individual form input with errors is highlighted"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use error notifications when an activity can not be completed."
                },
                {
                    "type": "list",
                    "items": [
                        "Title",
                        "Message",
                        "Close button"
                    ]
                },
                {
                    "type": "p",
                    "text": "Notifications should sit on the top right side of a workspace and remain on screen for at least 5 seconds.\nAvoid covering important elements. The notification component helps communicate that an action could not be completed."
                },
                {
                    "type": "list",
                    "items": [
                        "An error notification appears at the top right of the screen indicating that the user’s image could not be uploaded"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the message component to help users correct input errors as they happen. Clearly explain how to fix the error."
                },
                {
                    "type": "list",
                    "items": [
                        "The input field’s border turns red to indicate an error",
                        "Provide a detailed error message to describe what went wrong"
                    ]
                },
                {
                    "type": "p",
                    "text": "For multiple form errors, provide inline error messages for each.\nAlso provide an Alert at the top of the form, listing a summary of the fields that need correcting. Use validation messages after submission to reduce interrupting users as they move through forms.\nLive validation should be used sparingly (i.e. severe errors, passwords, emails)."
                },
                {
                    "type": "list",
                    "items": [
                        "Show error validation after the user has tried submitting the form"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Do not use live validation"
                    ]
                },
                {
                    "type": "p",
                    "text": "Keep incorrect values that users have entered to help them avoid making the same mistake twice."
                },
                {
                    "type": "list",
                    "items": [
                        "Keep invalid data to let users understand what to correct"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Do not clear invalid data"
                    ]
                },
                {
                    "type": "p",
                    "text": "Error messages need to be perceivable and understandable for people of all abilities.\nAn accessible error message should exhibit these qualities."
                },
                {
                    "type": "list",
                    "items": [
                        "Written in text. Icons and color can be used, but not alone.",
                        "Close to the element that triggered the error",
                        "Informative, helping the user resolve the issue",
                        "The message should refer to the failed element in code"
                    ]
                },
                {
                    "type": "p",
                    "text": "https://www.w3.org/WAI/standards-guidelines/act/rules/36b590/proposed/https://www.w3.org/WAI/WCAG21/Understanding/error-identification.htmlhttps://www.w3.org/WAI/WCAG21/Understanding/error-suggestion.html"
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/filters",
            "title": "Filters / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "General structure",
                        "FormattingEntry pointLocation and spacingSurfacing filters and results",
                        "Entry point",
                        "Location and spacing",
                        "Surfacing filters and results",
                        "Selection methods",
                        "UsageBasic filteringAdvanced filtering",
                        "Basic filtering",
                        "Advanced filtering",
                        "BehaviorBulk actions",
                        "Bulk actions",
                        "Localization & internationalizationRTL right-to-left",
                        "RTL right-to-left",
                        "AccessibilityTabbing orderAffordancesAdditional resources",
                        "Tabbing order",
                        "Affordances",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "Filters are used to reduce the amount of visible data in a dataset."
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "General structure",
                        "FormattingEntry pointLocation and spacingSurfacing filters and results",
                        "Entry point",
                        "Location and spacing",
                        "Surfacing filters and results",
                        "Selection methods",
                        "UsageBasic filteringAdvanced filtering",
                        "Basic filtering",
                        "Advanced filtering",
                        "BehaviorBulk actions",
                        "Bulk actions",
                        "Localization & internationalizationRTL right-to-left",
                        "RTL right-to-left",
                        "AccessibilityTabbing orderAffordancesAdditional resources",
                        "Tabbing order",
                        "Affordances",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "Filtering allows users to set specific parameters to reduce the amount of visible data in a dataset.\nThere are two types of filters: basic filters and advanced filters. Basic filters allow users to make a\nfew selections from predetermined parameters. Advanced filters allow users to set multiple filters;\nsometimes these filters are also configurable. Both basic and advanced filter patterns are made using the same basic building blocks: an entry point,\na container, and selection methods."
                },
                {
                    "type": "list",
                    "items": [
                        "Entry point",
                        "Container",
                        "Selection methods"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Filter entry point is theButtonthe user clicks to enter the Filter pattern."
                },
                {
                    "type": "list",
                    "items": [
                        "ADefault Buttonshould be used to open an Advanced Filter.",
                        "AMedia Buttonshould be used to open a Basic Filter.",
                        "AnIcon Buttonshould be used when the Filter pattern lives within a toolbar on the page,\nor to conserve UI space."
                    ]
                },
                {
                    "type": "p",
                    "text": "Filters are 20px below the page header and description.\nThe Search bar and filter button have 12px of padding between them.\nFilters have 12px of padding below to allow space for Tags and 12px of space between the Tags and filter results.\nThe filter results are 12px above the table. To save space in a view, an Icon Button in a toolbar can be used to open a Filter.\nInclude aTooltipto help any users who may be unfamiliar with the icon,\nas well as atitleattribute andaria-label. Filter parameters should be surfaced asTagsabove the dataset they are filtering.\nThe Tag content contains the filter parameter category in Bold, followed by the user’s selection in Regular weight.\nThe number of results after Filtering should be visible to users where possible.\nThe number of resulting data items should be displayed above the table below the filtering tags.\nFor guidance on formatting loading states, see ourTables Basic Formatting pattern. Different components are used depending on the type of selections a user is making to filter their dataset. Basic Filters allow users to filter a dataset through one category with only a few options. Single select basic filters use one selection to filter data. Upon the selection,\nthe Menu closes and the filter is surfaced as a Tag.\nSelecting another menu option replaces the current Filter with the new selection. Multiple selection basic filters use multiple selections within a category to filter data.\nThe Menu remains open as the user makes their selections.\nThe selections are surfaced as Tags with a Basic Button to clear all filters. ANested menucan be used to organize subcategories of data that can be used to filter a dataset. Advanced Filters allow users to set and configure multiple filters on a dataset. A Tooltip dialog allows users to filter a dataset through one category with many options,\nand allows the user to search for specific options.\nThey can also be part of a more complex flow. A Sheet is used when the dataset is filtered live as the user makes their selections.\nSelections are surfaced as a Tag as the user sets each filter. A Drawer is used to batch apply multiple filters at once. Selections are surfaced as a Tag\nafter the user applies their filters and closes the Drawer. When items are selected in a table and a filter is applied, the Filter overrides the selections and deselects them. Filter entry points are mirrored for RTL languages.\nFor more information about RTL considerations, see ourButtons pattern."
                },
                {
                    "type": "list",
                    "items": [
                        "User opens the filter container",
                        "The focus moves to the first filter category and continues through all categories.",
                        "Focus moves to close filter. Filter can also be closed with theesckey.",
                        "Focus returns to Filter trigger button.",
                        "Focus moves to the first tag after container is closed."
                    ]
                },
                {
                    "type": "p",
                    "text": "Additional affordances should be included to ensure users are aware of the filters applied\nand the results of those filters. Screen readers should read out the results of a filter\nafter the filtering actions are completed."
                },
                {
                    "type": "list",
                    "items": [
                        "Garden Combobox",
                        "WAI-ARIA Listbox",
                        "WAI-ARIA Menu"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/loaders",
            "title": "Loaders / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "UsagePredictable contentUnpredictable contentCompleting actionProgressTyping",
                        "Predictable content",
                        "Unpredictable content",
                        "Completing action",
                        "Progress",
                        "Typing",
                        "LocalizationRight-to-left languages",
                        "Right-to-left languages",
                        "Accessibility"
                    ]
                },
                {
                    "type": "p",
                    "text": "Loaders are used when certain elements or parts of the page could take longer to display."
                },
                {
                    "type": "list",
                    "items": [
                        "Overview",
                        "UsagePredictable contentUnpredictable contentCompleting actionProgressTyping",
                        "Predictable content",
                        "Unpredictable content",
                        "Completing action",
                        "Progress",
                        "Typing",
                        "LocalizationRight-to-left languages",
                        "Right-to-left languages",
                        "Accessibility"
                    ]
                },
                {
                    "type": "p",
                    "text": "Different loaders are used to communicate structure and context of the content being loaded,\neach one tailored to a specific use case. When loading pages or parts of pages with predictable layout,Skeleton loaderis used to show a blank stand-in version of the component that has not fully loaded. It provides a visual estimate of\nthe space needed. This is the preferred loader in most situations as it provides a sense of progress, helps orient the\nuser, and sets expectations on the type of content they can expect. The size of the loader should approximately reflect the content it represents. Show a few skeleton loaders to orient\nthe user, but don’t map out every element even if a page has a lot of content. Mapping out skeleton loaders in the\nfirst few elements of the header/body area are enough to convey the loading process. Loader animation has a built-in short delay which should give time for the fast loading content to show before the\nloader becomes visible. Loader should be persistent until the content is fully loaded. Use default skeleton loaders on white or light backgrounds.\nUselight skeleton loaderson dark backgrounds."
                },
                {
                    "type": "list",
                    "items": [
                        "Show a skeleton loader to orient the user"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Avoid mapping every line with a skeleton loader"
                    ]
                },
                {
                    "type": "p",
                    "text": "ASpinner loaderis used when content is unknown or unpredictable. Spinner appears\nbefore a page is loaded to assure a user that the content is on its way. Use spinners for pages and screens or within\ncomponents such as tables. Center the spinner in the container or content you’re applying it to. Spinner is also used\nas an alternative loader to Skeleton in situations where the content can’t be easily estimated but it’s still\nimportant to provide a sense of progress. TheDots loadercommunicates ongoing activity after a user takes an action. It tells\nthem that something is taking place. Dots loader is used for buttons, search inputs, or other small components to\nindicate these components are doing something. Use the loader for actions where it might take several seconds for the process to complete."
                },
                {
                    "type": "list",
                    "items": [
                        "Primary buttonsare common candidates for using this loader",
                        "Icon buttonsare less likely to use this loader but still necessary\nif the user needs to be informed of the action taking place"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use the loader for search inputs if it might take several seconds to perform the query. Use the loader forMenuswhere it might take several seconds to show information. AProgress loadercommunicates progress from 0 to 100% when downloading or\nuploading content. The most common use for a progress loader is in theFile uploadcomponent. Descriptive text is displayed to help clarify\nwhat is in progress. TheInline loaderis used as a typing indicator. This signals the other party is\npresent and preparing a reply. The loader should be centered in the message bubble with other content\nappearing above or below. Some loaders are direction-agnostic, which means that they are always positioned in the same place within the context,\nand use the same direction for any animation elements. Dots and Spinner are examples of that. Skeleton, Progress and Inline change direction for right-to-left languages. Skeleton animation and layout should change\ndirection. Progress loader should fill from the right (0) to the left (100%) side. Inline animation should change direction. Progress bar loaders have ARIArole=\"progressbar\"applied to indicate the loading status, whereas Dots, Spinners, and\nInline loaders have the role ofimg. Thearia-liveproperty,alertrole, orstatusrole is not added by default\n, but it can be extended on the component if needed. This should be evaluated on a case-by-case basis, depending on\nwhat part of the page is loading, the speed of loading on slower connections, and other live regions on the page.\nBefore, during, and after loading, browser focus should remain where the user put it."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/rich-text-editor",
            "title": "Rich-text editor / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "Toolbar sectionsText formattingParagraph formattingInsert mediaOther actionsTooltips",
                        "Text formatting",
                        "Paragraph formatting",
                        "Insert media",
                        "Other actions",
                        "Tooltips",
                        "FormattingToolbar locationToolbar sizeResponsive behaviorResizable textarea",
                        "Toolbar location",
                        "Toolbar size",
                        "Responsive behavior",
                        "Resizable textarea",
                        "StatesDisabled states",
                        "Disabled states",
                        "FlowsInserting new linkEditing link",
                        "Inserting new link",
                        "Editing link",
                        "Localization",
                        "AccessibilityManaging focus",
                        "Managing focus"
                    ]
                },
                {
                    "type": "p",
                    "text": "A rich-text editor lets a user edit and format text using a “what-you-see-is-what-you-get” (WYSIWYG) editing area."
                },
                {
                    "type": "list",
                    "items": [
                        "AnatomyRelated components",
                        "Related components",
                        "Toolbar sectionsText formattingParagraph formattingInsert mediaOther actionsTooltips",
                        "Text formatting",
                        "Paragraph formatting",
                        "Insert media",
                        "Other actions",
                        "Tooltips",
                        "FormattingToolbar locationToolbar sizeResponsive behaviorResizable textarea",
                        "Toolbar location",
                        "Toolbar size",
                        "Responsive behavior",
                        "Resizable textarea",
                        "StatesDisabled states",
                        "Disabled states",
                        "FlowsInserting new linkEditing link",
                        "Inserting new link",
                        "Editing link",
                        "Localization",
                        "AccessibilityManaging focus",
                        "Managing focus"
                    ]
                },
                {
                    "type": "p",
                    "text": "A Rich-text editor (RTE) can be used for writing various things such as articles, comments, and messages. The toolbar\nhas menus and actions for controlling the appearance of text. It can also be a shortcut for adding content such as\nimages, links, and other types of media. Toolbar actions are designed to look and behave likeIcon buttons. They should follow Icon\nbuttons as much as possible including focus and hover states."
                },
                {
                    "type": "list",
                    "items": [
                        "Media button",
                        "Media buttonwith hidden labels",
                        "Toggle icon button",
                        "Icon button",
                        "Menu"
                    ]
                },
                {
                    "type": "p",
                    "text": "For the content inside the rich-text editor, the visual treatment should follow the defined typography styles in\nthe toolbar."
                },
                {
                    "type": "list",
                    "items": [
                        "Blockquote",
                        "Bulleted and numbered list",
                        "Paragraph",
                        "Code",
                        "Code block"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "CKEditor"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toolbar sections have semantic meaning, so it’s important that they’re categorized by function. Toolbar can have up to\n4 categories that are visually separated and appear in this order."
                },
                {
                    "type": "list",
                    "items": [
                        "Text formatting",
                        "Paragraph formatting",
                        "Insert media",
                        "Other actions"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toolbars with only a few actions can have them grouped together without separators."
                },
                {
                    "type": "list",
                    "items": [
                        "Text style (Dropdown selections: Paragraph, Heading 1, Heading 2, Heading 3)",
                        "Text size (Dropdown selections: Small, Normal, Large, Extra large)",
                        "Text color (Dropdown selection: Color swatch)",
                        "Bold",
                        "Italic",
                        "Underline"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Code",
                        "Bulleted list",
                        "Numbered list",
                        "Increase indent",
                        "Decrease indent",
                        "Alignment (Dropdown selections: Left, Center, Right)"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Blockquote",
                        "Link",
                        "Horizontal Rule",
                        "Code block",
                        "Image",
                        "Video",
                        "Table"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "HTML Source Editing",
                        "Emoji"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tooltips should be provided for every action, unless the action contains a label (for example Paragraph), followingIcon buttonbest practices. When considering the placement of the toolbar, think about the size of the editing experience. For long-form writing,\nanchor the toolbar to the top of the editor. For short-form writing, the toolbar can also be anchored to the bottom of the editor. Display the toolbar in a menu when space is limited. When using a menu, provide at least20pxpadding within\nthe textarea to prevent toolbars from covering content. Default size of the toolbar is48px. This includes icon buttons with8pxpadding in the toolbar. Compact version of\nthe toolbar reduces the padding to 4px with the height of the toolbar being 40px tall. The compact version is better suited\nwhen there are certain space constraints, such as being used in aDrawer."
                },
                {
                    "type": "list",
                    "items": [
                        "Defaultsize toolbar with8pxpadding",
                        "Compactsize toolbar4pxpadding"
                    ]
                },
                {
                    "type": "p",
                    "text": "Toolbar actions are responsive based on the width of the container. Icons can be used while keeping the chevron to show\nthat there are dropdown selections."
                },
                {
                    "type": "list",
                    "items": [
                        "Media button",
                        "Media button with hidden label"
                    ]
                },
                {
                    "type": "p",
                    "text": "When a toolbar has many actions, the actions at the end will go into an overflow menu. Textarea should resize vertically as the user types. The minimum and maximum height can be restricted depending on\nspace constraints. Once the maximum height of the textarea is reached, a scrollbar should appear next to it. If a formatting option is not available for selected text, it should be disabled."
                },
                {
                    "type": "list",
                    "items": [
                        "Disabled icon button"
                    ]
                },
                {
                    "type": "p",
                    "text": "New link can be added by selecting a text and converting it to a link with a shortcut or by pressing the button. Editing link tooltip dialog should give the user a choice of previewing the link and opening it in a new window,\nediting the link or breaking the link. CKEditor offers user interface localization options and the translation system is opened to third-party plugins.\nRead more about it on theCKEditor localization support page. When the toolbar is opened as a menu, the focus should be looped within that menu. This should be the case for all\ndropdowns in the toolbar."
                },
                {
                    "type": "list",
                    "items": [
                        "User selects the text they want to make bold",
                        "Pressing tab will take them to the toolbar unlessTabkey is reserved for indenting. In that case, a custom\nshortcut is used to move the focus to the toolbar.",
                        "The focus is then inside the toolbar until they pick an action or close the toolbar with theEsckey. If textarea\nreserves the use ofTabkey for indenting lines, the user can use theLeft arrowandRight arrowto navigate\nwithin the toolbar.",
                        "Once the toolbar is closed, the focus goes back to its original position"
                    ]
                },
                {
                    "type": "p",
                    "text": "If the editor has enabled indentation, theTabkey will be reserved for setting the indentation of the current line.\nIn those situations a custom text shortcut is used to move the focus from the editor to the toolbar:Alt + F10on PC,\nandOption + F10on macOS. Read more aboutkeyboard support."
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/save",
            "title": "Save / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AnatomyAction footerSaving changesNotifications",
                        "Action footer",
                        "Saving changes",
                        "Notifications",
                        "StatesSave errorsUnsaved changesCanceling changes",
                        "Save errors",
                        "Unsaved changes",
                        "Canceling changes",
                        "WorkflowsBasic formTabs",
                        "Basic form",
                        "Tabs",
                        "Localization & internationalizationRTL (right-to-left)",
                        "RTL (right-to-left)",
                        "AccessibilityTabbing order",
                        "Tabbing order"
                    ]
                },
                {
                    "type": "p",
                    "text": "The Save command is used whenever a user wants to apply changes or maintain progress."
                },
                {
                    "type": "list",
                    "items": [
                        "AnatomyAction footerSaving changesNotifications",
                        "Action footer",
                        "Saving changes",
                        "Notifications",
                        "StatesSave errorsUnsaved changesCanceling changes",
                        "Save errors",
                        "Unsaved changes",
                        "Canceling changes",
                        "WorkflowsBasic formTabs",
                        "Basic form",
                        "Tabs",
                        "Localization & internationalizationRTL (right-to-left)",
                        "RTL (right-to-left)",
                        "AccessibilityTabbing order",
                        "Tabbing order"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "TheSavebutton is theprimary buttonon a page, placed at the end\nof all form inputs",
                        "TheCancelbutton is abasic button, left of the Save button",
                        "In apage footer, the Save and Cancel buttons remain fixed"
                    ]
                },
                {
                    "type": "p",
                    "text": "Saving applies to a page or view. Alwaysenablethe Save button for users to trigger an action even if\nthere are no new changes to save."
                },
                {
                    "type": "list",
                    "items": [
                        "If there are tabs, save all data per tab",
                        "If the page or tab has an indication of the last edit date, that timestamp should update",
                        "After changes are saved, show a loader inside the Save button if saving takes time, and ignore\ntrigger actions for the duration",
                        "Ensure a custom, translated label for the loader is provided on implementation"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "A successnotificationappears at the top right of the screen\nindicating changes have been saved"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use transient notifications to confirm saving actions"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Do not place actions inside notifications as it is transient and inaccessible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Errors can be presented in a variety of ways, depending on the issue."
                },
                {
                    "type": "list",
                    "items": [
                        "Show validation errors inline if the Save button is actioned but something is wrong"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "An erroralertthat summarizes the errors at the top of the page improves\nscreen reader accessibility"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a user navigates away from a page, tab or stepper flow before applying changes, use an Unsaved\nchanges modal."
                },
                {
                    "type": "list",
                    "items": [
                        "Leave without savingreverts all values on the page to the last saved state without reloading the\npage",
                        "Go backreturns to the previous view without discarding changes and reloading the page"
                    ]
                },
                {
                    "type": "p",
                    "text": "Cancelactively discards changes the user made and dismisses the current view. Cancel should never\nclear the form, or clear changes and reload the page. This increases the risk of accidental data loss. Watch video Watch video For RTL languages, the layout of the interface is mirrored. For the main content area."
                },
                {
                    "type": "list",
                    "items": [
                        "Breadcrumb, “Shop”",
                        "Breadcrumb, “Customize”",
                        "Input, “Section name required”",
                        "Input, “Description required”",
                        "File Upload, “Drag files here or click to upload”",
                        "Button, “Cancel”",
                        "Button, “Save”"
                    ]
                },
                {
                    "type": "p",
                    "text": "Screen readers will read the alert message at the top of the page to summarise all errors\non the page or view."
                },
                {
                    "type": "list",
                    "items": [
                        "Input, “Section name required, enter a section name”",
                        "Input, “Description required, enter a description”",
                        "File Upload, “Drag files here or click to upload”",
                        "Button, “Cancel”",
                        "Button, “Save”"
                    ]
                },
                {
                    "type": "p",
                    "text": "Focus will be trapped inside the modals interactive elements until the user actions those elements,\npressesescor clicks outside the modal."
                },
                {
                    "type": "list",
                    "items": [
                        "Button, “Go back”",
                        "Button, “Leave without saving”",
                        "Icon button, “Close modal”"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "https://www.w3.org/WAI/WCAG21/Understanding/error-identification.html",
                        "https://www.w3.org/WAI/WCAG21/Understanding/labels-or-instructions.html",
                        "https://www.w3.org/WAI/WCAG21/Understanding/error-suggestion.html"
                    ]
                }
            ]
        },
        {
            "url": "https://garden.zendesk.com/patterns/tables/basic-formatting",
            "title": "Basic formatting / Patterns / Zendesk Garden",
            "content": [
                {
                    "type": "list",
                    "items": [
                        "AnatomyParts of a table",
                        "Parts of a table",
                        "FormattingSizeAvatars, icons, and tags",
                        "Size",
                        "Avatars, icons, and tags",
                        "Wrapping and truncationTextTagsVariationsRow actions",
                        "Text",
                        "Tags",
                        "Variations",
                        "Row actions",
                        "StatesRows and cellsLoading",
                        "Rows and cells",
                        "Loading",
                        "Localization & internationalization",
                        "AccessibilityGeneral considerationsScreen reader orderAdditional resources",
                        "General considerations",
                        "Screen reader order",
                        "Additional resources"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tables display sets of related data across rows and columns. Tables make it easier for users to compare and analyze information."
                },
                {
                    "type": "list",
                    "items": [
                        "AnatomyParts of a table",
                        "Parts of a table",
                        "FormattingSizeAvatars, icons, and tags",
                        "Size",
                        "Avatars, icons, and tags",
                        "Wrapping and truncationTextTagsVariationsRow actions",
                        "Text",
                        "Tags",
                        "Variations",
                        "Row actions",
                        "StatesRows and cellsLoading",
                        "Rows and cells",
                        "Loading",
                        "Localization & internationalization",
                        "AccessibilityGeneral considerationsScreen reader orderAdditional resources",
                        "General considerations",
                        "Screen reader order",
                        "Additional resources"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Columns are vertical groupings of information that categorize and prioritize data",
                        "Header rows describe the data provided in a column or row",
                        "Rows are horizontal groups of data that fall under each column"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tables come in three sizes: small, medium, and large."
                },
                {
                    "type": "list",
                    "items": [
                        "Medium is the default size and accommodates information density in most cases",
                        "Large is used whenAvatarsare introduced into rows to create additional breathing room between\nrow content",
                        "Small can be used when more information density is needed"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use a larger header row height compared to the body rows"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Don’t use the same heights for header rows and body rows"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are ways to design a table to make it easier to see and find information:"
                },
                {
                    "type": "list",
                    "items": [
                        "A table must have at least 2 columns, otherwise use aListelement",
                        "Use horizontal lines to reduce visual noise in the table",
                        "White space signals a different column",
                        "You can specify max-width for columns but it’s not required",
                        "Don’t place elements relating to the data outside of the table"
                    ]
                },
                {
                    "type": "p",
                    "text": "How text is displayed can make a column easier to view, use, and manage. Left align all text for greatest scannability,\nwith some exceptions for quantitative data. Avatarshelp represent a person or brand in tables. They can display icons or images. Avatar sizes for tables include default and small."
                },
                {
                    "type": "list",
                    "items": [
                        "Use a small Avatar in a default table when more density is needed when displaying information\nabout many users at once",
                        "Default size tables with an Avatar have a starting height of 52px with 10px of top and bottom padding and 12px of\nleft and right padding"
                    ]
                },
                {
                    "type": "list",
                    "items": [
                        "Use a default Avatar in a large size Table in contexts where the user data is the main object of the table,\nand if there are multiple items of metadata associated with the user",
                        "Large size tables with an Avatar have a starting height of 60px with 10px of top and\nbottom padding and 12px of left and right padding"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are 2 types of icons that are used in tables: informational icons and icon buttons."
                },
                {
                    "type": "list",
                    "items": [
                        "Informational icons are icons that help communicate the state of the cell value. Informational icons must include\natitleattribute andaria-labelto provide mouse and keyboard users with more context about the icon’s meaning.",
                        "Overflow buttonsallow users to see additional table actions within\nan overflow menu"
                    ]
                },
                {
                    "type": "p",
                    "text": "Tagslet users categorize cell content using a keyword."
                },
                {
                    "type": "list",
                    "items": [
                        "The default size for Tags in table cells is small. Tags are left aligned with 4px of spacing between each tag.",
                        "If there are more Tags than can be displayed in a cell, use aButtonwithisLinkprop.\nSeeWrapping and Truncationfor more information.",
                        "If a Tag exceeds the width of a cell, the Tag can be truncated.\nSeeWrapping and Truncationfor more information.",
                        "Tags can be inline with other data about a user. The Tag should be inline with the data it is related to with\nthe same 4px spacing between the data and Tag."
                    ]
                },
                {
                    "type": "p",
                    "text": "Text wrapping is the default and recommended behavior. Ensure the cells in that row are top aligned to help with\nscannability. Keep in mind, truncation in a table can make it harder for users to scan.\nUse anEllipsisto truncate long text at the end of the first line and provide\na title attribute that appears on hover."
                },
                {
                    "type": "list",
                    "items": [
                        "Header and data cells should be concise",
                        "Ensure the cells in the row are top aligned to help with scannability.",
                        "Use anEllipsisto truncate long text at the end of the first line and\nprovide a title attribute that appears on hover."
                    ]
                },
                {
                    "type": "p",
                    "text": "Headers categorize and organize the information within the table."
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure header cells accurately describe the data contained in the rows and columns",
                        "Use one or two nouns that quickly help people understand what data is in the table",
                        "Avoid using verbs to prevent confusion with CTAs",
                        "Header cell labels shouldn’t create sentences with data cell content",
                        "Use sentence case",
                        "Header cells are marked up with<th>to make them accessible",
                        "Ensurevisually-hidden header cell contentis accessible for screen readers"
                    ]
                },
                {
                    "type": "p",
                    "text": "Internationalization could result in text expansion. If the text length in a header cell exceeds the specified width of\na column, there are a few options:"
                },
                {
                    "type": "list",
                    "items": [
                        "Truncate with anEllipsis",
                        "Wrap the content. In the case of headers, content should be bottom aligned.",
                        "Ignore the specified width and stretch the column width to accommodate the text. This could trigger horizontal\nscrolling for the table."
                    ]
                },
                {
                    "type": "p",
                    "text": "Data cells contain the actual data and are located below header cells."
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure the content is detailed yet concise",
                        "Avoid repeating the words used in the header to help with scannability",
                        "Use sentence case",
                        "Data cells are marked up with<td>to make them accessible"
                    ]
                },
                {
                    "type": "p",
                    "text": "Any tags that exceed the width of the cell, use anEllipsisto truncate long text and provide a title attribute that appears on hover. If there are greater than two tags, use aButtonwith theisLinkprop indicating the\nnumber of additional tags."
                },
                {
                    "type": "list",
                    "items": [
                        "When the user interacts with the button, it will open aTooltip Dialogwithautoplacement set, ensuring it remains viewable within the viewport",
                        "When toggling the tag list, ensure the appropriateARIA attributesare included",
                        "For localization, create two strings for the button text: one for the ”+ {number}” and another for the “more” string",
                        "If the number of tags becomes unwieldy within theTooltip Dialog, include an action that\nallows the user to view all tag information in a separate view"
                    ]
                },
                {
                    "type": "p",
                    "text": "If a table includes many rows of data, striped rows make it easier to keep their place when scanning horizontally. When creating additional categorization of similar items, usegrouped rows."
                },
                {
                    "type": "list",
                    "items": [
                        "They should be used only when the groups will contain 10 or more items",
                        "Avoid overuse to prevent busy layouts that are harder to understand",
                        "Don’t use striped and grouped rows at the same time"
                    ]
                },
                {
                    "type": "p",
                    "text": "There are multiple locations within a row to perform actions. Common actions include View, Edit, Delete\nor a combination of these within a single row."
                },
                {
                    "type": "list",
                    "items": [
                        "If linking to another page or a new tab, use anAnchor",
                        "If opening a Drawer/Sheet/Modal in the same view, use aButtonwith theisLinkprop"
                    ]
                },
                {
                    "type": "p",
                    "text": "“View” or “Edit” actions are to be contained within the data cells of a row in addition to the overflow menu."
                },
                {
                    "type": "list",
                    "items": [
                        "The first “View” or “Edit” action is contained within the first column and will take the user to additional\nview or edit detail on that given item",
                        "The overflow menu includes an additional “View” or “Edit” action, providing a second way to access the same\ncontent for viewing or editing"
                    ]
                },
                {
                    "type": "p",
                    "text": "All additional actions are to be placed inside theoverflow menu."
                },
                {
                    "type": "list",
                    "items": [
                        "Group complementary actions inside the menu, using separators to create visual hierarchy",
                        "For destructive actions, place aseparatorline above themenu itemusing theisDangerprop"
                    ]
                },
                {
                    "type": "p",
                    "text": "Ensure elements for the rows are clearly labeled and accessible. Pagination separates table rows into pages and allows users to navigate between those pages. Our table component is\npaired with thePaginationcomponent to create a consistent experience."
                },
                {
                    "type": "list",
                    "items": [
                        "Cursor pagination is the default and recommended approachdue to performance",
                        "Cap a single page view at 100 rows"
                    ]
                },
                {
                    "type": "p",
                    "text": "UseCursor paginationfor real-time data."
                },
                {
                    "type": "list",
                    "items": [
                        "This includes when new records are added frequently or in data sets where the latest results are first",
                        "There is no concept of the total number of pages in the set",
                        "Use “Previous” and “Next” as pagination labels"
                    ]
                },
                {
                    "type": "p",
                    "text": "UseOffset paginationwhen you know the number of records or where you are\nin the data set."
                },
                {
                    "type": "list",
                    "items": [
                        "Ensure the margin between the table component and the pagination is 20px"
                    ]
                },
                {
                    "type": "p",
                    "text": "In paginated tables, you can select all checkboxes but that selection only affects the current page being shown."
                },
                {
                    "type": "list",
                    "items": [
                        "Users should only be able to take action on what they can see"
                    ]
                },
                {
                    "type": "p",
                    "text": "In cases where the database supports infinite scrolling, there is no need to say how many pages of data there are.\nIf you have an infinitely scrolling table, you should also offersortingto\nhelp users navigate the data. In infinitely scrolling tables, you can only manually select items. For tables with more rows than can be displayed in the viewport, the header row is fixed at the top of the viewport.\nKeeping the column headers within view while scrolling helps users maintain context. Virtualization means what you see in the browser is what is in the DOM. When something scrolls out of view, it gets\nremoved from the page DOM. When something scrolls into view, it is added to the DOM."
                },
                {
                    "type": "list",
                    "items": [
                        "Usereact-windowto efficiently render large data sets"
                    ]
                },
                {
                    "type": "p",
                    "text": "Sorting is implemented by selecting arrows in table headers."
                },
                {
                    "type": "list",
                    "items": [
                        "Clicking the header text will sort by ascending order (A→Z, 1→9, Date and Time, Priority (High→Low))",
                        "Clicking again will reverse the order",
                        "Clicking a third time will remove sorting"
                    ]
                },
                {
                    "type": "p",
                    "text": "If any ordering is applied to a table including default ordering, the sorting icon should be present. This indicates how\nthe table is being ordered and also creates a clear affordance to control. T​​o have row reordering, you can apply drag-and-drop functionality withdnd-kit.\nFor accessibility support, pleaseread the dnd-kit guidelines. TheCaptionis the title of a table."
                },
                {
                    "type": "list",
                    "items": [
                        "A table must have aCaptionoraria-describedbyattribute that identifies the element\nwhich titles or describes the table"
                    ]
                },
                {
                    "type": "p",
                    "text": "Use anAnchorfor data cell text elements that link elsewhere."
                },
                {
                    "type": "list",
                    "items": [
                        "These anchors within a table typically navigate the user to a new page",
                        "If you want to open a link in an external window or tab, use anExternal anchor"
                    ]
                },
                {
                    "type": "p",
                    "text": "Follow ourdate and time formattingguidelines. Skeleton screens are used to indicate that a screen is loading. They are perceived as being shorter in duration when\ncompared against a blank screen or a spinner."
                },
                {
                    "type": "list",
                    "items": [
                        "Implement theSkeletoncomponent in each cell up to three rows",
                        "For a table with three or more rows, show the first three rows as skeletons with the header cells being shown at all\ntimes to provide instant context of incoming tabular data",
                        "The width of the Skeleton should match the width of the intended cell content, while the Skeleton’s height will be 60%\nof the font size"
                    ]
                },
                {
                    "type": "p",
                    "text": "Our tables have been designed to accommodate localization and internationalization standards so they do not break the\nexperience. All GardenTablesare built with accessible markup. People using screen readers can have the row and column cells read aloud as they navigate through the table. Screen\nreaders speak one cell at a time and reference the associated header cells, so the reader doesn’t lose context."
                },
                {
                    "type": "list",
                    "items": [
                        "https://developer.mozilla.org/en-US/docs/Learn/HTML/Tables/Advanced"
                    ]
                }
            ]
        }
    ]
}