[{"source": "https://developer.chrome.com/docs/extensions/reference", "title": "Extensions / Reference | Chrome for Developers", "text": "Reference Reference documentation Chrome extensions. Looking Manifest V2 documentation? See here. Looking Manifest V2 documentation? See here. API reference Learn extension APIs capabilities. Manifest reference See supported manifest keys. Permissions reference Learn permissions needed extension features."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/accessibilityFeatures", "title": "chrome.accessibilityFeatures | API | Chrome for Developers", "text": "Description Use chrome.accessibilityFeatures API manage Chrome's accessibility features. API relies ChromeSetting prototype type API getting setting individual accessibility features. order get feature states extension must request accessibilityFeatures.read permission. modifying feature state, extension needs accessibilityFeatures.modify permission. Note accessibilityFeatures.modify imply accessibilityFeatures.read permission. Permissions accessibilityFeatures.modify accessibilityFeatures.read Properties animationPolicy get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<\"allowed\" | \"once\" | \"none\" > autoclick ChromeOS only. Auto mouse click mouse stops moving. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> caretHighlight ChromeOS only. Caret highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> cursorColor ChromeOS only. Cursor color. value indicates whether feature enabled not, indicate color it. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> cursorHighlight ChromeOS only. Cursor highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> dictation ChromeOS only. Dictation. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> dockedMagnifier ChromeOS only. Docked magnifier. value indicates whether docked magnifier feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> focusHighlight ChromeOS only. Focus highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> highContrast ChromeOS only. High contrast rendering mode. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> largeCursor ChromeOS only. Enlarged cursor. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> screenMagnifier ChromeOS only. Full screen magnification. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> selectToSpeak ChromeOS only. Select-to-speak. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> spokenFeedback ChromeOS only. Spoken feedback (text-to-speech). value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> stickyKeys ChromeOS only. Sticky modifier keys (like shift alt). value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> switchAccess ChromeOS only. Switch Access. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> virtualKeyboard ChromeOS only. Virtual on-screen keyboard. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean>"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/action", "title": "chrome.action | API | Chrome for Developers", "text": "Description Use chrome.action API control extension's icon Google Chrome toolbar. Availability Manifest use chrome.action API, specify \"manifest_version\" 3 include \"action\" key manifest file. { \"name\": \"Action Extension\", ... \"action\": { \"default_icon\": { // optional \"16\": \"images/icon16.png\", // optional \"24\": \"images/icon24.png\", // optional \"32\": \"images/icon32.png\" // optional }, \"default_title\": \"Click Me\", // optional, shown tooltip \"default_popup\": \"popup.html\" // optional }, ... } \"action\" key (along children) optional. included, extension still shown toolbar provide access extension's menu. reason, recommend always include least \"action\" \"default_icon\" keys. Concepts usage Parts UI Icon icon main image toolbar extension, set \"default_icon\" key manifest's \"action\" key. Icons must 16 device-independent pixels (DIPs) wide tall. \"default_icon\" key dictionary sizes image paths. Chrome uses icons choose image scale use. exact match found, Chrome selects closest available scales fit image, might affect image quality. devices less-common scale factors like 1.5x 1.2x becoming common, encourage provide multiple sizes icons. also futureproofs extension potential icon display size changes. However, providing single size, \"default_icon\" key also set string path single icon instead dictionary. also call action.setIcon() set extension's icon programmatically specifying different image path providing dynamically-generated icon using HTML canvas element, or, setting extension service worker, offscreen canvas API. const canvas = new OffscreenCanvas(16, 16); const context = canvas.getContext('2d'); context.clearRect(0, 0, 16, 16); context.fillStyle = '#00FF00'; // Green context.fillRect(0, 0, 16, 16); const imageData = context.getImageData(0, 0, 16, 16); chrome.action.setIcon({imageData: imageData}, () => { /* ... */ }); packed extensions (installed .crx file), images formats Blink rendering engine display, including PNG, JPEG, BMP, ICO, others. SVG supported. Unpacked extensions must use PNG images. Tooltip (title) tooltip, title, appears user holds mouse pointer extension's icon toolbar. also included accessible text spoken screen readers button gets focus. default tooltip set using \"default_title\" field \"action\" key manifest.json . also set programmatically calling action.setTitle() . Badge Actions optionally display \"badge\" \u2014 bit text layered icon. lets update action display small amount information state extension, counter. badge text component background color. space limited, recommend badge text use four fewer characters. create badge, set programmatically calling action.setBadgeBackgroundColor() action.setBadgeText() . default badge setting manifest. Badge color values either array four integers 0 255 make RGBA color badge string CSS color value. chrome.action.setBadgeBackgroundColor( {color: [0, 255, 0, 0]}, // Green () => { /* ... */ }, ); chrome.action.setBadgeBackgroundColor( {color: '#00FF00'}, // Also green () => { /* ... */ }, ); chrome.action.setBadgeBackgroundColor( {color: 'green'}, // Also, also green () => { /* ... */ }, ); Popup action's popup shown user clicks extension's action button toolbar. popup contain HTML contents like, automatically sized fit contents. popup's size must 25x25 800x600 pixels. popup initially set \"default_popup\" property \"action\" key manifest.json file. present, property point relative path within extension directory. also updated dynamically point different relative path using action.setPopup() method. Use cases Per-tab state Extension actions different states tab. set value individual tab, use tabId property action API's setting methods. example, set badge text specific tab, something like following: function getTabId() { /* ... */} function getTabBadge() { /* ... */} chrome.action.setBadgeText( { text: getTabBadge(tabId), tabId: getTabId(), }, () => { ... } ); tabId property left out, setting treated global setting. Tab-specific settings take priority global settings. Enabled state default, toolbar actions enabled (clickable) every tab. change default setting default_state property action key manifest. default_state set \"disabled\" , action disabled default must enabled programmatically clickable. default_state set \"enabled\" (the default), action enabled clickable default. control state programmatically using action.enable() action.disable() methods. affects whether popup (if any) action.onClicked event sent extension; affect action's presence toolbar. Examples following examples show common ways actions used extensions. try API, install Action API example chrome-extension-samples repository. Show popup common extension display popup user clicks extension's action. implement extension, declare popup manifest.json specify content Chrome display popup. // manifest.json { \"name\": \"Action popup demo\", \"version\": \"1.0\", \"manifest_version\": 3, \"action\": { \"default_title\": \"Click view popup\", \"default_popup\": \"popup.html\" } } <!-- popup.html --> <!DOCTYPE html> <html> <head> <style> html { min-height: 5em; min-width: 10em; background: salmon; } </style> </head> <body> <p>Hello, world!</p> </body> </html> Inject content script click common pattern extensions expose primary feature using extension's action. following example demonstrates pattern. user clicks action, extension injects content script current page. content script displays alert verify everything worked expected. // manifest.json { \"name\": \"Action script injection demo\", \"version\": \"1.0\", \"manifest_version\": 3, \"action\": { \"default_title\": \"Click show alert\" }, \"permissions\": [\"activeTab\", \"scripting\"], \"background\": { \"service_worker\": \"background.js\" } } // background.js chrome.action.onClicked.addListener((tab) => { chrome.scripting.executeScript({ target: {tabId: tab.id}, files: ['content.js'] }); }); // content.js alert('Hello, world!'); Emulate actions declarativeContent example shows extension's background logic (a) disable action default (b) use declarativeContent enable action specific sites. // service-worker.js // Wrap onInstalled callback avoid unnecessary work // every time service worker run chrome.runtime.onInstalled.addListener(() => { // Page actions disabled default enabled select tabs chrome.action.disable(); // Clear rules ensure expected rules set chrome.declarativeContent.onPageChanged.removeRules(undefined, () => { // Declare rule enable action example.com pages let exampleRule = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: {hostSuffix: '.example.com'}, }) ], actions: [new chrome.declarativeContent.ShowAction()], }; // Finally, apply new array rules let rules = [exampleRule]; chrome.declarativeContent.onPageChanged.addRules(rules); }); }); Types OpenPopupOptions Properties - windowId number optional ID window open action popup in. Defaults currently-active window unspecified. TabDetails Properties - tabId number optional ID tab query state for. tab specified, non-tab-specific state returned. UserSettings collection user-specified settings relating extension's action. Properties - isOnToolbar boolean Whether extension's action icon visible browser windows' top-level toolbar (i.e., whether extension 'pinned' user). UserSettingsChange Properties - isOnToolbar boolean optional Whether extension's action icon visible browser windows' top-level toolbar (i.e., whether extension 'pinned' user). Methods disable() chrome.action.disable( tabId?: number, callback?: function, ) Disables action tab. Parameters - tabId number optional ID tab want modify action. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. enable() chrome.action.enable( tabId?: number, callback?: function, ) Enables action tab. default, actions enabled. Parameters - tabId number optional ID tab want modify action. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeBackgroundColor() chrome.action.getBadgeBackgroundColor( details: TabDetails, callback?: function, ) Gets background color action. Parameters - details - callback function optional callback parameter looks like:(result: ColorArray) => void - result - Returns - Promise<browserAction.ColorArray> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeText() chrome.action.getBadgeText( details: TabDetails, callback?: function, ) Gets badge text action. tab specified, non-tab-specific badge text returned. displayActionCountAsBadgeText enabled, placeholder text returned unless declarativeNetRequestFeedback permission present tab-specific badge text provided. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeTextColor() chrome.action.getBadgeTextColor( details: TabDetails, callback?: function, ) Gets text color action. Parameters - details - callback function optional callback parameter looks like:(result: ColorArray) => void - result - Returns - Promise<browserAction.ColorArray> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPopup() chrome.action.getPopup( details: TabDetails, callback?: function, ) Gets html document set popup action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getTitle() chrome.action.getTitle( details: TabDetails, callback?: function, ) Gets title action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getUserSettings() chrome.action.getUserSettings( callback?: function, ) Returns user-specified settings relating extension's action. Parameters - callback function optional callback parameter looks like:(userSettings: UserSettings) => void - userSettings - Returns - Promise<UserSettings> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isEnabled() chrome.action.isEnabled( tabId?: number, callback?: function, ) Indicates whether extension action enabled tab (or globally tabId provided). Actions enabled using declarativeContent always return false. Parameters - tabId number optional ID tab want check enabled status. - callback function optional callback parameter looks like:(isEnabled: boolean) => void - isEnabled boolean True extension action enabled. - Returns - Promise<boolean> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. openPopup() chrome.action.openPopup( options?: OpenPopupOptions, callback?: function, ) Opens extension's popup. Chrome 118 Chrome 126, available policy installed extensions. Parameters - options OpenPopupOptions optional Specifies options opening popup. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeBackgroundColor() chrome.action.setBadgeBackgroundColor( details: object, callback?: function, ) Sets background color badge. Parameters - details object - color string | ColorArray array four integers range [0,255] make RGBA color badge. example, opaque red [255, 0, 0, 255] . also string CSS value, opaque red being#FF0000 or#F00 . - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeText() chrome.action.setBadgeText( details: object, callback?: function, ) Sets badge text action. badge displayed top icon. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - text string optional number characters passed, four fit space. empty string ( '' ) passed, badge text cleared. IftabId specified andtext null, text specified tab cleared defaults global badge text. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeTextColor() chrome.action.setBadgeTextColor( details: object, callback?: function, ) Sets text color badge. Parameters - details object - color string | ColorArray array four integers range [0,255] make RGBA color badge. example, opaque red [255, 0, 0, 255] . also string CSS value, opaque red being#FF0000 or#F00 . setting value cause color automatically chosen contrast badge's background color text visible. Colors alpha values equivalent 0 set return error. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setIcon() chrome.action.setIcon( details: object, callback?: function, ) Sets icon action. icon specified either path image file pixel data canvas element, dictionary either one those. Either path imageData property must specified. Parameters - details object - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.imageData = foo' equivalent 'details.imageData = {'16': foo}' - path string | object optional Either relative image path dictionary {size -> relative image path} pointing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.path = foo' equivalent 'details.path = {'16': foo}' - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setPopup() chrome.action.setPopup( details: object, callback?: function, ) Sets HTML document opened popup user clicks action's icon. Parameters - details object - popup string relative path HTML file show popup. set empty string ( '' ), popup shown. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setTitle() chrome.action.setTitle( details: object, callback?: function, ) Sets title action. shows tooltip. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - title string string action display moused over. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onClicked chrome.action.onClicked.addListener( callback: function, ) Fired action icon clicked. event fire action popup. Parameters - callback function callback parameter looks like:(tab: tabs.Tab) => void - tab - onUserSettingsChanged chrome.action.onUserSettingsChanged.addListener( callback: function, ) Fired user-specified settings relating extension's action change. Parameters - callback function callback parameter looks like:(change: UserSettingsChange) => void - change -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api", "title": "API reference | Chrome for Developers", "text": "extensions need access one Chrome Extensions APIs function. API reference describes APIs available use extensions presents example use cases. Common Extensions API features Extensions API consists namespace containing methods properties extensions work, usually, always, manifest fields manifest.json file. example, chrome.action namespace requires \"action\" object manifest. Many APIs also require permissions manifest. Methods extension APIs asynchronous unless stated otherwise. Asynchronous methods return immediately, without waiting operation calls finish. Use promises get results asynchronous methods. Chrome Extension APIs - accessibilityFeatures - Use chrome.accessibilityFeatures API manage Chrome's accessibility features. API relies ChromeSetting prototype type API getting setting individual accessibility features. order get feature states extension must requestaccessibilityFeatures.read permission. modifying feature state, extension needsaccessibilityFeatures.modify permission. Note thataccessibilityFeatures.modify implyaccessibilityFeatures.read permission. - action - Chrome 88+ MV3+ Use chrome.action API control extension's icon Google Chrome toolbar. - alarms - Use chrome.alarms API schedule code run periodically specified time future. - audio - Chrome 59+ ChromeOS chrome.audio API provided allow users get information control audio devices attached system. API currently available kiosk mode ChromeOS. - bookmarks - Use chrome.bookmarks API create, organize, otherwise manipulate bookmarks. Also see Override Pages, use create custom Bookmark Manager page. - browsingData - Use chrome.browsingData API remove browsing data user's local profile. - certificateProvider - Chrome 46+ ChromeOS Use API expose certificates platform use certificates TLS authentications. - commands - Use commands API add keyboard shortcuts trigger actions extension, example, action open browser action send command extension. - contentSettings - Use chrome.contentSettings API change settings control whether websites use features cookies, JavaScript, plugins. generally speaking, content settings allow customize Chrome's behavior per-site basis instead globally. - contextMenus - Use chrome.contextMenus API add items Google Chrome's context menu. choose types objects context menu additions apply to, images, hyperlinks, pages. - cookies - Use chrome.cookies API query modify cookies, notified change. - debugger - chrome.debugger API serves alternate transport Chrome's remote debugging protocol. Usechrome.debugger attach one tabs instrument network interaction, debug JavaScript, mutate DOM CSS, more. Use theDebuggee propertytabId target tabs withsendCommand route events bytabId fromonEvent callbacks. - declarativeContent - Use chrome.declarativeContent API take actions depending content page, without requiring permission read page's content. - declarativeNetRequest - Chrome 84+ chrome.declarativeNetRequest API used block modify network requests specifying declarative rules. lets extensions modify network requests without intercepting viewing content, thus providing privacy. - desktopCapture - Desktop Capture API captures content screen, individual windows, individual tabs. - devtools.inspectedWindow - Use chrome.devtools.inspectedWindow API interact inspected window: obtain tab ID inspected page, evaluate code context inspected window, reload page, obtain list resources within page. - devtools.network - Use chrome.devtools.network API retrieve information network requests displayed Developer Tools Network panel. - devtools.panels - Use chrome.devtools.panels API integrate extension Developer Tools window UI: create panels, access existing panels, add sidebars. - devtools.performance - Chrome 129+ Use chrome.devtools.performance API listen recording status updates Performance panel DevTools. - devtools.recorder - Chrome 105+ Use chrome.devtools.recorder API customize Recorder panel DevTools. - dns - Dev channel Use chrome.dns API dns resolution. - documentScan - Chrome 44+ ChromeOS Use chrome.documentScan API discover retrieve images attached document scanners. - dom - Chrome 88+ Use chrome.dom API access special DOM APIs Extensions - downloads - Use chrome.downloads API programmatically initiate, monitor, manipulate, search downloads. - enterprise.deviceAttributes - Use chrome.enterprise.deviceAttributes API read device attributes. Note: API available extensions force-installed enterprise policy. - enterprise.hardwarePlatform - Chrome 71+ Requires policy Use chrome.enterprise.hardwarePlatform API get manufacturer model hardware platform browser runs. Note: API available extensions installed enterprise policy. - enterprise.networkingAttributes - Use chrome.enterprise.networkingAttributes API read information current network. Note: API available extensions force-installed enterprise policy. - enterprise.platformKeys - ChromeOS Requires policy Use chrome.enterprise.platformKeys API generate keys install certificates keys. certificates managed platform used TLS authentication, network access extension chrome.platformKeys. - events - chrome.events namespace contains common types used APIs dispatching events notify something interesting happens. - extension - chrome.extension API utilities used extension page. includes support exchanging messages extension content scripts extensions, described detail Message Passing. - extensionTypes - chrome.extensionTypes API contains type declarations Chrome extensions. - fileBrowserHandler - ChromeOS Foreground Use chrome.fileBrowserHandler API extend Chrome OS file browser. example, use API enable users upload files website. - fileSystemProvider - ChromeOS Use chrome.fileSystemProvider API create file systems, accessible file manager Chrome OS. - fontSettings - Use chrome.fontSettings API manage Chrome's font settings. - gcm - Use chrome.gcm enable apps extensions send receive messages Firebase Cloud Messaging (FCM). - history - Use chrome.history API interact browser's record visited pages. add, remove, query URLs browser's history. override history page version, see Override Pages. - i18n - Use chrome.i18n infrastructure implement internationalization across whole app extension. - identity - Use chrome.identity API get OAuth2 access tokens. - idle - Use chrome.idle API detect machine's idle state changes. - input.ime - ChromeOS Use chrome.input.ime API implement custom IME Chrome OS. allows extension handle keystrokes, set composition, manage candidate window. - instanceID - Chrome 44+ Use chrome.instanceID access Instance ID service. - loginState - Chrome 78+ ChromeOS Use chrome.loginState API read monitor login state. - management - chrome.management API provides ways manage installed apps extensions. - notifications - Use chrome.notifications API create rich notifications using templates show notifications users system tray. - offscreen - Chrome 109+ MV3+ Use offscreen API create manage offscreen documents. - omnibox - omnibox API allows register keyword Google Chrome's address bar, also known omnibox. - pageCapture - Use chrome.pageCapture API save tab MHTML. - permissions - Use chrome.permissions API request declared optional permissions run time rather install time, users understand permissions needed grant necessary. - platformKeys - Chrome 45+ ChromeOS Use chrome.platformKeys API access client certificates managed platform. user policy grants permission, extension use certficate custom authentication protocol. E.g. allows usage platform managed certificates third party VPNs (see chrome.vpnProvider). - power - Use chrome.power API override system's power management features. - printerProvider - Chrome 44+ chrome.printerProvider API exposes events used print manager query printers controlled extensions, query capabilities submit print jobs printers. - printing - Chrome 81+ ChromeOS Use chrome.printing API send print jobs printers installed Chromebook. - printingMetrics - Use chrome.printingMetrics API fetch data printing usage. - privacy - Use chrome.privacy API control usage features Chrome affect user's privacy. API relies ChromeSetting prototype type API getting setting Chrome's configuration. - processes - Dev channel Use chrome.processes API interact browser's processes. - proxy - Use chrome.proxy API manage Chrome's proxy settings. API relies ChromeSetting prototype type API getting setting proxy configuration. - readingList - Chrome 120+ MV3+ Use chrome.readingList API read modify items Reading List. - runtime - Use chrome.runtime API retrieve service worker, return details manifest, listen respond events extension lifecycle. also use API convert relative path URLs fully-qualified URLs. - scripting - Chrome 88+ MV3+ Use chrome.scripting API execute script different contexts. - search - Chrome 87+ Use chrome.search API search via default provider. - sessions - Use chrome.sessions API query restore tabs windows browsing session. - sidePanel - Chrome 114+ MV3+ Use chrome.sidePanel API host content browser's side panel alongside main content webpage. - storage - Use chrome.storage API store, retrieve, track changes user data. - system.cpu - Use system.cpu API query CPU metadata. - system.display - Use system.display API query display metadata. - system.memory - chrome.system.memory API. - system.storage - Use chrome.system.storage API query storage device information notified removable storage device attached detached. - systemLog - Use chrome.systemLog API record Chrome system logs extensions. - tabCapture - Use chrome.tabCapture API interact tab media streams. - tabGroups - Chrome 89+ MV3+ Use chrome.tabGroups API interact browser's tab grouping system. use API modify rearrange tab groups browser. group ungroup tabs, query tabs groups, use thechrome.tabs API. - tabs - Use chrome.tabs API interact browser's tab system. use API create, modify, rearrange tabs browser. - topSites - Use chrome.topSites API access top sites (i.e. visited sites) displayed new tab page. include shortcuts customized user. - tts - Use chrome.tts API play synthesized text-to-speech (TTS). See also relatedttsEngine API, allows extension implement speech engine. - ttsEngine - Use chrome.ttsEngine API implement text-to-speech(TTS) engine using extension. extension registers using API, receive events containing utterance spoken parameters extension Chrome App uses thetts API generate speech. extension use available web technology synthesize output speech, send events back calling function report status. - types - chrome.types API contains type declarations Chrome. - userScripts - Chrome 120+ MV3+ Use userScripts API execute user scripts User Scripts context. - vpnProvider - Chrome 43+ ChromeOS Use chrome.vpnProvider API implement VPN client. - wallpaper - Chrome 43+ ChromeOS Use chrome.wallpaper API change ChromeOS wallpaper. - webAuthenticationProxy - Chrome 115+ MV3+ chrome.webAuthenticationProxy API lets remote desktop software running remote host intercept Web Authentication API (WebAuthn) requests order handle local client. - webNavigation - Use chrome.webNavigation API receive notifications status navigation requests in-flight. - webRequest - Use chrome.webRequest API observe analyze traffic intercept, block, modify requests in-flight. - windows - Use chrome.windows API interact browser windows. use API create, modify, rearrange windows browser."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/accessibilityFeatures", "title": "chrome.accessibilityFeatures | API | Chrome for Developers", "text": "Description Use chrome.accessibilityFeatures API manage Chrome's accessibility features. API relies ChromeSetting prototype type API getting setting individual accessibility features. order get feature states extension must request accessibilityFeatures.read permission. modifying feature state, extension needs accessibilityFeatures.modify permission. Note accessibilityFeatures.modify imply accessibilityFeatures.read permission. Permissions accessibilityFeatures.modify accessibilityFeatures.read Properties animationPolicy get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<\"allowed\" | \"once\" | \"none\" > autoclick ChromeOS only. Auto mouse click mouse stops moving. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> caretHighlight ChromeOS only. Caret highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> cursorColor ChromeOS only. Cursor color. value indicates whether feature enabled not, indicate color it. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> cursorHighlight ChromeOS only. Cursor highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> dictation ChromeOS only. Dictation. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> dockedMagnifier ChromeOS only. Docked magnifier. value indicates whether docked magnifier feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> focusHighlight ChromeOS only. Focus highlighting. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> highContrast ChromeOS only. High contrast rendering mode. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> largeCursor ChromeOS only. Enlarged cursor. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> screenMagnifier ChromeOS only. Full screen magnification. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> selectToSpeak ChromeOS only. Select-to-speak. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> spokenFeedback ChromeOS only. Spoken feedback (text-to-speech). value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> stickyKeys ChromeOS only. Sticky modifier keys (like shift alt). value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> switchAccess ChromeOS only. Switch Access. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean> virtualKeyboard ChromeOS only. Virtual on-screen keyboard. value indicates whether feature enabled not. get() requires accessibilityFeatures.read permission. set() clear() require accessibilityFeatures.modify permission. Type types.ChromeSetting<boolean>"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/action", "title": "chrome.action | API | Chrome for Developers", "text": "Description Use chrome.action API control extension's icon Google Chrome toolbar. Availability Manifest use chrome.action API, specify \"manifest_version\" 3 include \"action\" key manifest file. { \"name\": \"Action Extension\", ... \"action\": { \"default_icon\": { // optional \"16\": \"images/icon16.png\", // optional \"24\": \"images/icon24.png\", // optional \"32\": \"images/icon32.png\" // optional }, \"default_title\": \"Click Me\", // optional, shown tooltip \"default_popup\": \"popup.html\" // optional }, ... } \"action\" key (along children) optional. included, extension still shown toolbar provide access extension's menu. reason, recommend always include least \"action\" \"default_icon\" keys. Concepts usage Parts UI Icon icon main image toolbar extension, set \"default_icon\" key manifest's \"action\" key. Icons must 16 device-independent pixels (DIPs) wide tall. \"default_icon\" key dictionary sizes image paths. Chrome uses icons choose image scale use. exact match found, Chrome selects closest available scales fit image, might affect image quality. devices less-common scale factors like 1.5x 1.2x becoming common, encourage provide multiple sizes icons. also futureproofs extension potential icon display size changes. However, providing single size, \"default_icon\" key also set string path single icon instead dictionary. also call action.setIcon() set extension's icon programmatically specifying different image path providing dynamically-generated icon using HTML canvas element, or, setting extension service worker, offscreen canvas API. const canvas = new OffscreenCanvas(16, 16); const context = canvas.getContext('2d'); context.clearRect(0, 0, 16, 16); context.fillStyle = '#00FF00'; // Green context.fillRect(0, 0, 16, 16); const imageData = context.getImageData(0, 0, 16, 16); chrome.action.setIcon({imageData: imageData}, () => { /* ... */ }); packed extensions (installed .crx file), images formats Blink rendering engine display, including PNG, JPEG, BMP, ICO, others. SVG supported. Unpacked extensions must use PNG images. Tooltip (title) tooltip, title, appears user holds mouse pointer extension's icon toolbar. also included accessible text spoken screen readers button gets focus. default tooltip set using \"default_title\" field \"action\" key manifest.json . also set programmatically calling action.setTitle() . Badge Actions optionally display \"badge\" \u2014 bit text layered icon. lets update action display small amount information state extension, counter. badge text component background color. space limited, recommend badge text use four fewer characters. create badge, set programmatically calling action.setBadgeBackgroundColor() action.setBadgeText() . default badge setting manifest. Badge color values either array four integers 0 255 make RGBA color badge string CSS color value. chrome.action.setBadgeBackgroundColor( {color: [0, 255, 0, 0]}, // Green () => { /* ... */ }, ); chrome.action.setBadgeBackgroundColor( {color: '#00FF00'}, // Also green () => { /* ... */ }, ); chrome.action.setBadgeBackgroundColor( {color: 'green'}, // Also, also green () => { /* ... */ }, ); Popup action's popup shown user clicks extension's action button toolbar. popup contain HTML contents like, automatically sized fit contents. popup's size must 25x25 800x600 pixels. popup initially set \"default_popup\" property \"action\" key manifest.json file. present, property point relative path within extension directory. also updated dynamically point different relative path using action.setPopup() method. Use cases Per-tab state Extension actions different states tab. set value individual tab, use tabId property action API's setting methods. example, set badge text specific tab, something like following: function getTabId() { /* ... */} function getTabBadge() { /* ... */} chrome.action.setBadgeText( { text: getTabBadge(tabId), tabId: getTabId(), }, () => { ... } ); tabId property left out, setting treated global setting. Tab-specific settings take priority global settings. Enabled state default, toolbar actions enabled (clickable) every tab. change default setting default_state property action key manifest. default_state set \"disabled\" , action disabled default must enabled programmatically clickable. default_state set \"enabled\" (the default), action enabled clickable default. control state programmatically using action.enable() action.disable() methods. affects whether popup (if any) action.onClicked event sent extension; affect action's presence toolbar. Examples following examples show common ways actions used extensions. try API, install Action API example chrome-extension-samples repository. Show popup common extension display popup user clicks extension's action. implement extension, declare popup manifest.json specify content Chrome display popup. // manifest.json { \"name\": \"Action popup demo\", \"version\": \"1.0\", \"manifest_version\": 3, \"action\": { \"default_title\": \"Click view popup\", \"default_popup\": \"popup.html\" } } <!-- popup.html --> <!DOCTYPE html> <html> <head> <style> html { min-height: 5em; min-width: 10em; background: salmon; } </style> </head> <body> <p>Hello, world!</p> </body> </html> Inject content script click common pattern extensions expose primary feature using extension's action. following example demonstrates pattern. user clicks action, extension injects content script current page. content script displays alert verify everything worked expected. // manifest.json { \"name\": \"Action script injection demo\", \"version\": \"1.0\", \"manifest_version\": 3, \"action\": { \"default_title\": \"Click show alert\" }, \"permissions\": [\"activeTab\", \"scripting\"], \"background\": { \"service_worker\": \"background.js\" } } // background.js chrome.action.onClicked.addListener((tab) => { chrome.scripting.executeScript({ target: {tabId: tab.id}, files: ['content.js'] }); }); // content.js alert('Hello, world!'); Emulate actions declarativeContent example shows extension's background logic (a) disable action default (b) use declarativeContent enable action specific sites. // service-worker.js // Wrap onInstalled callback avoid unnecessary work // every time service worker run chrome.runtime.onInstalled.addListener(() => { // Page actions disabled default enabled select tabs chrome.action.disable(); // Clear rules ensure expected rules set chrome.declarativeContent.onPageChanged.removeRules(undefined, () => { // Declare rule enable action example.com pages let exampleRule = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: {hostSuffix: '.example.com'}, }) ], actions: [new chrome.declarativeContent.ShowAction()], }; // Finally, apply new array rules let rules = [exampleRule]; chrome.declarativeContent.onPageChanged.addRules(rules); }); }); Types OpenPopupOptions Properties - windowId number optional ID window open action popup in. Defaults currently-active window unspecified. TabDetails Properties - tabId number optional ID tab query state for. tab specified, non-tab-specific state returned. UserSettings collection user-specified settings relating extension's action. Properties - isOnToolbar boolean Whether extension's action icon visible browser windows' top-level toolbar (i.e., whether extension 'pinned' user). UserSettingsChange Properties - isOnToolbar boolean optional Whether extension's action icon visible browser windows' top-level toolbar (i.e., whether extension 'pinned' user). Methods disable() chrome.action.disable( tabId?: number, callback?: function, ) Disables action tab. Parameters - tabId number optional ID tab want modify action. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. enable() chrome.action.enable( tabId?: number, callback?: function, ) Enables action tab. default, actions enabled. Parameters - tabId number optional ID tab want modify action. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeBackgroundColor() chrome.action.getBadgeBackgroundColor( details: TabDetails, callback?: function, ) Gets background color action. Parameters - details - callback function optional callback parameter looks like:(result: ColorArray) => void - result - Returns - Promise<browserAction.ColorArray> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeText() chrome.action.getBadgeText( details: TabDetails, callback?: function, ) Gets badge text action. tab specified, non-tab-specific badge text returned. displayActionCountAsBadgeText enabled, placeholder text returned unless declarativeNetRequestFeedback permission present tab-specific badge text provided. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getBadgeTextColor() chrome.action.getBadgeTextColor( details: TabDetails, callback?: function, ) Gets text color action. Parameters - details - callback function optional callback parameter looks like:(result: ColorArray) => void - result - Returns - Promise<browserAction.ColorArray> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPopup() chrome.action.getPopup( details: TabDetails, callback?: function, ) Gets html document set popup action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getTitle() chrome.action.getTitle( details: TabDetails, callback?: function, ) Gets title action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getUserSettings() chrome.action.getUserSettings( callback?: function, ) Returns user-specified settings relating extension's action. Parameters - callback function optional callback parameter looks like:(userSettings: UserSettings) => void - userSettings - Returns - Promise<UserSettings> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isEnabled() chrome.action.isEnabled( tabId?: number, callback?: function, ) Indicates whether extension action enabled tab (or globally tabId provided). Actions enabled using declarativeContent always return false. Parameters - tabId number optional ID tab want check enabled status. - callback function optional callback parameter looks like:(isEnabled: boolean) => void - isEnabled boolean True extension action enabled. - Returns - Promise<boolean> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. openPopup() chrome.action.openPopup( options?: OpenPopupOptions, callback?: function, ) Opens extension's popup. Chrome 118 Chrome 126, available policy installed extensions. Parameters - options OpenPopupOptions optional Specifies options opening popup. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeBackgroundColor() chrome.action.setBadgeBackgroundColor( details: object, callback?: function, ) Sets background color badge. Parameters - details object - color string | ColorArray array four integers range [0,255] make RGBA color badge. example, opaque red [255, 0, 0, 255] . also string CSS value, opaque red being#FF0000 or#F00 . - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeText() chrome.action.setBadgeText( details: object, callback?: function, ) Sets badge text action. badge displayed top icon. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - text string optional number characters passed, four fit space. empty string ( '' ) passed, badge text cleared. IftabId specified andtext null, text specified tab cleared defaults global badge text. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setBadgeTextColor() chrome.action.setBadgeTextColor( details: object, callback?: function, ) Sets text color badge. Parameters - details object - color string | ColorArray array four integers range [0,255] make RGBA color badge. example, opaque red [255, 0, 0, 255] . also string CSS value, opaque red being#FF0000 or#F00 . setting value cause color automatically chosen contrast badge's background color text visible. Colors alpha values equivalent 0 set return error. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setIcon() chrome.action.setIcon( details: object, callback?: function, ) Sets icon action. icon specified either path image file pixel data canvas element, dictionary either one those. Either path imageData property must specified. Parameters - details object - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.imageData = foo' equivalent 'details.imageData = {'16': foo}' - path string | object optional Either relative image path dictionary {size -> relative image path} pointing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.path = foo' equivalent 'details.path = {'16': foo}' - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setPopup() chrome.action.setPopup( details: object, callback?: function, ) Sets HTML document opened popup user clicks action's icon. Parameters - details object - popup string relative path HTML file show popup. set empty string ( '' ), popup shown. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setTitle() chrome.action.setTitle( details: object, callback?: function, ) Sets title action. shows tooltip. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - title string string action display moused over. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onClicked chrome.action.onClicked.addListener( callback: function, ) Fired action icon clicked. event fire action popup. Parameters - callback function callback parameter looks like:(tab: tabs.Tab) => void - tab - onUserSettingsChanged chrome.action.onUserSettingsChanged.addListener( callback: function, ) Fired user-specified settings relating extension's action change. Parameters - callback function callback parameter looks like:(change: UserSettingsChange) => void - change -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/alarms", "title": "chrome.alarms | API | Chrome for Developers", "text": "Description Use chrome.alarms API schedule code run periodically specified time future. Permissions alarms use chrome.alarms API, declare \"alarms\" permission manifest: { \"name\": \"My extension\", ... \"permissions\": [ \"alarms\" ], ... } Concepts usage ensure reliable behavior, helpful understand API behaves. Device sleep Alarms continue run device sleeping. However, alarm wake device. device wakes up, missed alarms fire. Repeating alarms fire rescheduled using specified period starting device wakes, taking account time already elapsed since alarm originally set run. Persistence Alarms generally persist extension updated. However, guaranteed, alarms may cleared browser restarted. Consequently, consider setting value storage alarm created, ensure exists time service worker starts up. example: const STORAGE_KEY = \"user-preference-alarm-enabled\"; async function checkAlarmState() { const { alarmEnabled } = await chrome.storage.get(STORAGE_KEY); (alarmEnabled) { const alarm = await chrome.alarms.get(\"my-alarm\"); (!alarm) { await chrome.alarms.create({ periodInMinutes: 1 }); } } } checkAlarmState(); Examples following examples show use respond alarm. try API, install Alarm API example chrome-extension-samples repository. Set alarm following example sets alarm service worker extension installed: service-worker.js: chrome.runtime.onInstalled.addListener(async ({ reason }) => { (reason !== 'install') { return; } // Create alarm something look demo await chrome.alarms.create('demo-default-alarm', { delayInMinutes: 1, periodInMinutes: 1 }); }); Respond alarm following example sets action toolbar icon based name alarm went off. service-worker.js: chrome.alarms.onAlarm.addListener((alarm) => { chrome.action.setIcon({ path: getIconPath(alarm.name), }); }); Types Alarm Properties - name string Name alarm. - periodInMinutes number optional null, alarm repeating alarm fire periodInMinutes minutes. - scheduledTime number Time alarm scheduled fire, milliseconds past epoch (e.g. Date.now() + n ). performance reasons, alarm may delayed arbitrary amount beyond this. AlarmCreateInfo Properties - delayInMinutes number optional Length time minutes onAlarm event fire. - periodInMinutes number optional set, onAlarm event fire every periodInMinutes minutes initial event specified bywhen ordelayInMinutes . set, alarm fire once. - number optional Time alarm fire, milliseconds past epoch (e.g. Date.now() + n ). Methods clear() chrome.alarms.clear( name?: string, callback?: function, ) Clears alarm given name. Parameters - name string optional name alarm clear. Defaults empty string. - callback function optional callback parameter looks like:(wasCleared: boolean) => void - wasCleared boolean - Returns - Promise<boolean> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. clearAll() chrome.alarms.clearAll( callback?: function, ) Clears alarms. Parameters - callback function optional callback parameter looks like:(wasCleared: boolean) => void - wasCleared boolean - Returns - Promise<boolean> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. create() chrome.alarms.create( name?: string, alarmInfo: AlarmCreateInfo, callback?: function, ) Creates alarm. Near time(s) specified alarmInfo , onAlarm event fired. another alarm name (or name none specified), cancelled replaced alarm. order reduce load user's machine, Chrome limits alarms every 30 seconds may delay arbitrary amount more. is, setting delayInMinutes periodInMinutes less 0.5 honored cause warning. set less 30 seconds \"now\" without warning actually cause alarm fire least 30 seconds. help debug app extension, loaded unpacked, there's limit often alarm fire. Parameters - name string optional Optional name identify alarm. Defaults empty string. - alarmInfo Describes alarm fire. initial time must specified either ordelayInMinutes (but both). IfperiodInMinutes set, alarm repeat everyperiodInMinutes minutes initial event. neitherwhen ordelayInMinutes set repeating alarm,periodInMinutes used default fordelayInMinutes . - callback function optional Chrome 111+The callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.alarms.get( name?: string, callback?: function, ) Retrieves details specified alarm. Parameters Returns - Promise<Alarm | undefined> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.alarms.getAll( callback?: function, ) Gets array alarms. Parameters Returns - Promise<Alarm[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/audio", "title": "chrome.audio | API | Chrome for Developers", "text": "Description chrome.audio API provided allow users get information control audio devices attached system. API currently available kiosk mode ChromeOS. Permissions audio Availability Types AudioDeviceInfo Properties - deviceName string Device name. - deviceType Type device. - displayName string user-friendly name (e.g. \"USB Microphone\"). - id string unique identifier audio device. - isActive boolean True current active device. - level number sound level device, volume output, gain input. - stableDeviceId string optional stable/persisted device id string available. - streamType Stream type associated device. DeviceFilter Properties - isActive boolean optional set, audio devices whose active state matches value satisfy filter. - streamTypes StreamType[] optional set, audio devices whose stream type included list satisfy filter. DeviceIdLists Properties - input string[] optional List input devices specified ID. indicate input devices unaffected, leave property unset. - output string[] optional List output devices specified ID. indicate output devices unaffected, leave property unset. DeviceProperties Properties - level number optional audio device's desired sound level. Defaults device's current sound level. used audio input device, represents audio device gain. used audio output device, represents audio device volume. DeviceType Available audio device types. Enum \"HEADPHONE\" \"MIC\" \"USB\" \"BLUETOOTH\" \"HDMI\" \"INTERNAL_SPEAKER\" \"INTERNAL_MIC\" \"FRONT_MIC\" \"REAR_MIC\" \"KEYBOARD_MIC\" \"HOTWORD\" \"LINEOUT\" \"POST_MIX_LOOPBACK\" \"POST_DSP_LOOPBACK\" \"ALSA_LOOPBACK\" \"OTHER\" LevelChangedEvent Properties - deviceId string ID device whose sound level changed. - level number device's new sound level. MuteChangedEvent Properties - isMuted boolean Whether stream muted. - streamType type stream mute value changed. updated mute value applies devices stream type. StreamType Type stream audio device provides. Enum \"INPUT\" \"OUTPUT\" Methods getDevices() chrome.audio.getDevices( filter?: DeviceFilter, callback?: function, ) Gets list audio devices filtered based filter . Parameters - filter DeviceFilter optional Device properties filter list returned audio devices. filter set set {} , returned device list contain available audio devices. - callback function optional callback parameter looks like:(devices: AudioDeviceInfo[]) => void - devices - Returns - Promise<AudioDeviceInfo[]> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMute() chrome.audio.getMute( streamType: StreamType, callback?: function, ) Gets system-wide mute state specified stream type. Parameters - streamType Stream type mute state fetched. - callback function optional callback parameter looks like:(value: boolean) => void - value boolean - Returns - Promise<boolean> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setActiveDevices() chrome.audio.setActiveDevices( ids: DeviceIdLists, callback?: function, ) Sets lists active input and/or output devices. Parameters - ids Specifies IDs devices active. either input output list set, devices category unaffected. error pass non-existent device ID. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setMute() chrome.audio.setMute( streamType: StreamType, isMuted: boolean, callback?: function, ) Sets mute state stream type. mute state apply audio devices specified audio stream type. Parameters - streamType Stream type mute state set. - isMuted boolean New mute value. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setProperties() chrome.audio.setProperties( id: string, properties: DeviceProperties, callback?: function, ) Sets properties input output device. Parameters - id string - properties - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onDeviceListChanged chrome.audio.onDeviceListChanged.addListener( callback: function, ) Fired audio devices change, either new devices added, existing devices removed. Parameters - callback function callback parameter looks like:(devices: AudioDeviceInfo[]) => void - devices - onLevelChanged chrome.audio.onLevelChanged.addListener( callback: function, ) Fired sound level changes active audio device. Parameters - callback function callback parameter looks like:(event: LevelChangedEvent) => void - event - onMuteChanged chrome.audio.onMuteChanged.addListener( callback: function, ) Fired mute state audio input output changes. Note mute state system-wide new value applies every audio device specified stream type. Parameters - callback function callback parameter looks like:(event: MuteChangedEvent) => void - event -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/bookmarks", "title": "chrome.bookmarks | API | Chrome for Developers", "text": "Description Use chrome.bookmarks API create, organize, otherwise manipulate bookmarks. Also see Override Pages, use create custom Bookmark Manager page. Permissions bookmarks must declare \"bookmarks\" permission extension manifest use bookmarks API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"bookmarks\" ], ... } Concepts usage Objects properties Bookmarks organized tree, node tree either bookmark folder (sometimes called group). node tree represented bookmarks.BookmarkTreeNode object. BookmarkTreeNode properties used throughout chrome.bookmarks API. example, call bookmarks.create, pass new node's parent (parentId ), and, optionally, node's index , title , url properties. See bookmarks.BookmarkTreeNode information properties node have. Examples following code creates folder title \"Extension bookmarks\". first argument create() specifies properties new folder. second argument defines function executed folder created. chrome.bookmarks.create( {'parentId': bookmarkBar.id, 'title': 'Extension bookmarks'}, function(newFolder) { console.log(\"added folder: \" + newFolder.title); }, ); next snippet creates bookmark pointing developer documentation extensions. Since nothing bad happen creating bookmark fails, code bother define callback function. chrome.bookmarks.create({ 'parentId': extensionsFolderId, 'title': 'Extensions doc', 'url': 'https://developer.chrome.com/docs/extensions', }); try API, install Bookmarks API example chrome-extension-samples repository. Types BookmarkTreeNode node (either bookmark folder) bookmark tree. Child nodes ordered within parent folder. Properties - children BookmarkTreeNode[] optional ordered list children node. - dateAdded number optional node created, milliseconds since epoch ( new Date(dateAdded) ). - dateGroupModified number optional contents folder last changed, milliseconds since epoch. - dateLastUsed number optional Chrome 114+When node last opened, milliseconds since epoch. set folders. - id string unique identifier node. IDs unique within current profile, remain valid even browser restarted. - index number optional 0-based position node within parent folder. - parentId string optional id parent folder. Omitted root node. - title string text displayed node. - unmodifiable \"managed\" optionalIndicates reason node unmodifiable. managed value indicates node configured system administrator custodian supervised user. Omitted node modified user extension (default). - url string optional URL navigated user clicks bookmark. Omitted folders. BookmarkTreeNodeUnmodifiable Indicates reason node unmodifiable. managed value indicates node configured system administrator. Omitted node modified user extension (default). Value \"managed\" CreateDetails Object passed create() function. Properties - index number optional - parentId string optional Defaults Bookmarks folder. - title string optional - url string optional Properties MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE Bookmark write operations longer limited Chrome. Value 1000000 MAX_WRITE_OPERATIONS_PER_HOUR Bookmark write operations longer limited Chrome. Value 1000000 Methods create() chrome.bookmarks.create( bookmark: CreateDetails, callback?: function, ) Creates bookmark folder specified parentId. url NULL missing, folder. Parameters - bookmark - callback function optional callback parameter looks like:(result: BookmarkTreeNode) => void - result - Returns - Promise<BookmarkTreeNode> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.bookmarks.get( idOrIdList: string | [string, ...string[]], callback?: function, ) Retrieves specified BookmarkTreeNode(s). Parameters - idOrIdList string | [string, ...string[]] single string-valued id, array string-valued ids - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getChildren() chrome.bookmarks.getChildren( id: string, callback?: function, ) Retrieves children specified BookmarkTreeNode id. Parameters - id string - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRecent() chrome.bookmarks.getRecent( numberOfItems: number, callback?: function, ) Retrieves recently added bookmarks. Parameters - numberOfItems number maximum number items return. - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSubTree() chrome.bookmarks.getSubTree( id: string, callback?: function, ) Retrieves part Bookmarks hierarchy, starting specified node. Parameters - id string ID root subtree retrieve. - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getTree() chrome.bookmarks.getTree( callback?: function, ) Retrieves entire Bookmarks hierarchy. Parameters - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.bookmarks.move( id: string, destination: object, callback?: function, ) Moves specified BookmarkTreeNode provided location. Parameters - id string - destination object - index number optional - parentId string optional - - callback function optional callback parameter looks like:(result: BookmarkTreeNode) => void - result - Returns - Promise<BookmarkTreeNode> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.bookmarks.remove( id: string, callback?: function, ) Removes bookmark empty bookmark folder. Parameters - id string - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeTree() chrome.bookmarks.removeTree( id: string, callback?: function, ) Recursively removes bookmark folder. Parameters - id string - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. search() chrome.bookmarks.search( query: string | object, callback?: function, ) Searches BookmarkTreeNodes matching given query. Queries specified object produce BookmarkTreeNodes matching specified properties. Parameters - query string | object Either string words quoted phrases matched bookmark URLs titles, object. object, properties query ,url , andtitle may specified bookmarks matching specified properties produced.- query string optional string words quoted phrases matched bookmark URLs titles. - title string optional title bookmark; matches verbatim. - url string optional URL bookmark; matches verbatim. Note folders URL. - - callback function optional callback parameter looks like:(results: BookmarkTreeNode[]) => void - results - Returns - Promise<BookmarkTreeNode[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.bookmarks.update( id: string, changes: object, callback?: function, ) Updates properties bookmark folder. Specify properties want change; unspecified properties left unchanged. Note: Currently, 'title' 'url' supported. Parameters - id string - changes object - title string optional - url string optional - - callback function optional callback parameter looks like:(result: BookmarkTreeNode) => void - result - Returns - Promise<BookmarkTreeNode> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onChanged chrome.bookmarks.onChanged.addListener( callback: function, ) Fired bookmark folder changes. Note: Currently, title url changes trigger this. Parameters - callback function callback parameter looks like:(id: string, changeInfo: object) => void - id string - changeInfo object - title string - url string optional - - onChildrenReordered chrome.bookmarks.onChildrenReordered.addListener( callback: function, ) Fired children folder changed order due order sorted UI. called result move(). Parameters - callback function callback parameter looks like:(id: string, reorderInfo: object) => void - id string - reorderInfo object - childIds string[] - - onCreated chrome.bookmarks.onCreated.addListener( callback: function, ) Fired bookmark folder created. Parameters - callback function callback parameter looks like:(id: string, bookmark: BookmarkTreeNode) => void - id string - bookmark - onImportBegan chrome.bookmarks.onImportBegan.addListener( callback: function, ) Fired bookmark import session begun. Expensive observers ignore onCreated updates onImportEnded fired. Observers still handle notifications immediately. Parameters - callback function callback parameter looks like:() => void onImportEnded chrome.bookmarks.onImportEnded.addListener( callback: function, ) Fired bookmark import session ended. Parameters - callback function callback parameter looks like:() => void onMoved chrome.bookmarks.onMoved.addListener( callback: function, ) Fired bookmark folder moved different parent folder. Parameters - callback function callback parameter looks like:(id: string, moveInfo: object) => void - id string - moveInfo object - index number - oldIndex number - oldParentId string - parentId string - - onRemoved chrome.bookmarks.onRemoved.addListener( callback: function, ) Fired bookmark folder removed. folder removed recursively, single notification fired folder, none contents. Parameters - callback function callback parameter looks like:(id: string, removeInfo: object) => void - id string - removeInfo object - index number - nodeChrome 48+ - parentId string - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/browsingData", "title": "chrome.browsingData | API | Chrome for Developers", "text": "Description Use chrome.browsingData API remove browsing data user's local profile. Permissions browsingData must declare \"browsingData\" permission extension manifest use API. { \"name\": \"My extension\", ... \"permissions\": [ \"browsingData\", ], ... } Concepts usage simplest use-case API time-based mechanism clearing user's browsing data. code provide timestamp indicates historical date user's browsing data removed. timestamp formatted number milliseconds since Unix epoch (which retrieved JavaScript Date object using getTime() method). example, clear user's browsing data last week, might write code follows: var callback = function () { // something clever data removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; chrome.browsingData.remove({ \"since\": oneWeekAgo }, { \"appcache\": true, \"cache\": true, \"cacheStorage\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"passwords\": true, \"serviceWorkers\": true, \"webSQL\": true }, callback); chrome.browsingData.remove() method lets remove various types browsing data single call, much faster calling multiple specific methods. If, however, want clear one specific type browsing data (cookies, example), granular methods offer readable alternative call filled JSON. var callback = function () { // something clever data removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; chrome.browsingData.removeCookies({ \"since\": oneWeekAgo }, callback); user syncing data, chrome.browsingData.remove() may automatically rebuild cookie Sync account clearing it. ensure Sync continue working, data eventually deleted server. However specific chrome.browsingData.removeCookies() used clear cookie Sync account, Sync paused case. Specific origins remove data specific origin exclude set origins deletion, use RemovalOptions.origins RemovalOptions.excludeOrigins parameters. applied cookies, cache, storage (CacheStorage, FileSystems, IndexedDB, LocalStorage, ServiceWorkers, WebSQL). chrome.browsingData.remove({ \"origins\": [\"https://www.example.com\"] }, { \"cacheStorage\": true, \"cookies\": true, \"fileSystems\": true, \"indexedDB\": true, \"localStorage\": true, \"serviceWorkers\": true, \"webSQL\": true }, callback); Origin types Adding originTypes property APIs options object lets specify types origins ought effected. Origins divided three categories: unprotectedWeb covers general case websites users visit without taking special action. specify anoriginTypes , API defaults removing data unprotected web origins.protectedWeb covers web origins installed hosted applications. Installing Angry Birds, example, protects originhttps://chrome.angrybirds.com , removes theunprotectedWeb category. careful triggering deletion data origins: make sure users know they're getting, irrevocably remove game data. one wants knock tiny pig houses often necessary.extension covers origins thechrome-extensions: scheme. Removing extension data is, again, something careful about. could adjust previous example remove data protected websites follows: var callback = function () { // something clever data removed. }; var millisecondsPerWeek = 1000 * 60 * 60 * 24 * 7; var oneWeekAgo = (new Date()).getTime() - millisecondsPerWeek; chrome.browsingData.remove({ \"since\": oneWeekAgo, \"originTypes\": { \"protectedWeb\": true } }, { \"appcache\": true, \"cache\": true, \"cacheStorage\": true, \"cookies\": true, \"downloads\": true, \"fileSystems\": true, \"formData\": true, \"history\": true, \"indexedDB\": true, \"localStorage\": true, \"passwords\": true, \"serviceWorkers\": true, \"webSQL\": true }, callback); Examples try API, install browsingData API example chrome-extension-samples repository. Types DataTypeSet set data types. Missing data types interpreted false . Properties - appcache boolean optional Websites' appcaches. - cache boolean optional browser's cache. - cacheStorage boolean optional Chrome 72+Cache storage - cookies boolean optional browser's cookies. - downloads boolean optional browser's download list. - fileSystems boolean optional Websites' file systems. - formData boolean optional browser's stored form data. - history boolean optional browser's history. - indexedDB boolean optional Websites' IndexedDB data. - localStorage boolean optional Websites' local storage data. - passwords boolean optional Stored passwords. - pluginData boolean optional Deprecated since Chrome 88Support Flash removed. data type ignored. Plugins' data. - serverBoundCertificates boolean optional Deprecated since Chrome 76Support server-bound certificates removed. data type ignored. Server-bound certificates. - serviceWorkers boolean optional Service Workers. - webSQL boolean optional Websites' WebSQL data. RemovalOptions Options determine exactly data removed. Properties - excludeOrigins string[] optional Chrome 74+When present, data origins list excluded deletion. Can't used together origins . supported cookies, storage cache. Cookies excluded whole registrable domain. - originTypes object optional object whose properties specify origin types ought cleared. object specified, defaults clearing \"unprotected\" origins. Please ensure really want remove application data adding 'protectedWeb' 'extensions'. - extension boolean optional Extensions packaged applications user installed (be _really_ careful!). - protectedWeb boolean optional Websites installed hosted applications (be careful!). - unprotectedWeb boolean optional Normal websites. - - origins [string, ...string[]] optional Chrome 74+When present, data origins list deleted. supported cookies, storage cache. Cookies cleared whole registrable domain. - since number optional Remove data accumulated date, represented milliseconds since epoch (accessible via getTime method JavaScriptDate object). absent, defaults 0 (which would remove browsing data). Methods remove() chrome.browsingData.remove( options: RemovalOptions, dataToRemove: DataTypeSet, callback?: function, ) Clears various types browsing data stored user's profile. Parameters - options - dataToRemove set data types remove. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeAppcache() chrome.browsingData.removeAppcache( options: RemovalOptions, callback?: function, ) Clears websites' appcache data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCache() chrome.browsingData.removeCache( options: RemovalOptions, callback?: function, ) Clears browser's cache. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCacheStorage() chrome.browsingData.removeCacheStorage( options: RemovalOptions, callback?: function, ) Clears websites' cache storage data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCookies() chrome.browsingData.removeCookies( options: RemovalOptions, callback?: function, ) Clears browser's cookies server-bound certificates modified within particular timeframe. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeDownloads() chrome.browsingData.removeDownloads( options: RemovalOptions, callback?: function, ) Clears browser's list downloaded files (not downloaded files themselves). Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeFileSystems() chrome.browsingData.removeFileSystems( options: RemovalOptions, callback?: function, ) Clears websites' file system data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeFormData() chrome.browsingData.removeFormData( options: RemovalOptions, callback?: function, ) Clears browser's stored form data (autofill). Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeHistory() chrome.browsingData.removeHistory( options: RemovalOptions, callback?: function, ) Clears browser's history. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeIndexedDB() chrome.browsingData.removeIndexedDB( options: RemovalOptions, callback?: function, ) Clears websites' IndexedDB data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeLocalStorage() chrome.browsingData.removeLocalStorage( options: RemovalOptions, callback?: function, ) Clears websites' local storage data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removePasswords() chrome.browsingData.removePasswords( options: RemovalOptions, callback?: function, ) Clears browser's stored passwords. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removePluginData() chrome.browsingData.removePluginData( options: RemovalOptions, callback?: function, ) Support Flash removed. function effect. Clears plugins' data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeServiceWorkers() chrome.browsingData.removeServiceWorkers( options: RemovalOptions, callback?: function, ) Clears websites' service workers. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeWebSQL() chrome.browsingData.removeWebSQL( options: RemovalOptions, callback?: function, ) Clears websites' WebSQL data. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. settings() chrome.browsingData.settings( callback?: function, ) Reports types data currently selected 'Clear browsing data' settings UI. Note: data types included API available settings UI, UI settings control one data type listed here. Parameters - callback function optional callback parameter looks like:(result: object) => void - result object - dataRemovalPermitted types present result, values true permitted removed (e.g., enterprise policy) andfalse not. - dataToRemove types present result, values true selected removed permitted removed, otherwisefalse . - options - - Returns - Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/certificateProvider", "title": "chrome.certificateProvider | API | Chrome for Developers", "text": "Description Use API expose certificates platform use certificates TLS authentications. Permissions certificateProvider Availability Concepts usage Typical usage API expose client certificates ChromeOS follows steps: - Extension registers events onCertificatesUpdateRequested andonSignatureRequested . - Extension calls setCertificates() provide initial list certificates initialization. - Extension monitors changes list available certificates calls setCertificates() notify browser every change. - TLS handshake, browser receives client certificate request. onCertificatesUpdateRequested event, browser asks Extension report certificates currently provides. - Extension reports back currently available certificates, using setCertificates() method. - browser matches available certificates client certificate request remote host. matches presented user selection dialog. - user select certificate thereby approve authentication abort authentication. - user aborts authentication certificate matched request, TLS client authentication aborted. - Otherwise, user approves authentication certificate provided Extension, browser requests Extension sign data continue TLS handshake. request sent onSignatureRequested event. - event contains input data, declares algorithm used generate signature, refers one certificates reported Extension. Extension must create signature given data using private key associated referenced certificate. Creating signature might require prepending DigestInfo padding result actual signing. - Extension sends back signature browser using reportSignature() method. signature calculated, method called without signature. - signature provided, browser completes TLS handshake. actual sequence steps different. example, user asked select certificate enterprise policy automatically select certificate used (see AutoSelectCertificateForUrls Chrome policies users). Extension, look similar following snippet: function collectAvailableCertificates() { // Return certificates Extension currently provide. // example: return [{ certificateChain: [new Uint8Array(...)], supportedAlgorithms: ['RSASSA_PKCS1_v1_5_SHA256'] }]; } // Extension calls function every time currently available list // certificates changes, also Extension's initialization. function onAvailableCertificatesChanged() { chrome.certificateProvider.setCertificates({ clientCertificates: collectAvailableCertificates() }); } function handleCertificatesUpdateRequest(request) { // Report currently available certificates response request // event. important supporting case Extension // unable detect changes proactively. chrome.certificateProvider.setCertificates({ certificatesRequestId: request.certificatesRequestId, clientCertificates: collectAvailableCertificates() }); } // Returns private key handle given DER-encoded certificate. // |certificate| ArrayBuffer. function getPrivateKeyHandle(certificate) {...} // Digests signs |input| given private key. |input| // ArrayBuffer. |algorithm| Algorithm. // Returns signature ArrayBuffer. function signUnhashedData(privateKey, input, algorithm) {...} function handleSignatureRequest(request) { // Look handle private key |request.certificate|. const key = getPrivateKeyHandle(request.certificate); (!key) { // Handle key available. console.error('Key requested certificate available.'); // Abort request reporting error API. chrome.certificateProvider.reportSignature({ signRequestId: request.signRequestId, error: 'GENERAL_ERROR' }); return; } const signature = signUnhashedData(key, request.input, request.algorithm); chrome.certificateProvider.reportSignature({ signRequestId: request.signRequestId, signature: signature }); } chrome.certificateProvider.onCertificatesUpdateRequested.addListener( handleCertificatesUpdateRequest); chrome.certificateProvider.onSignatureRequested.addListener( handleSignatureRequest); Types Algorithm Types supported cryptographic signature algorithms. Enum \"RSASSA_PKCS1_v1_5_MD5_SHA1\" \"RSASSA_PKCS1_v1_5_SHA1\" \"RSASSA_PKCS1_v1_5_SHA256\" \"RSASSA_PKCS1_v1_5_SHA384\" \"RSASSA_PKCS1_v1_5_SHA512\" \"RSASSA_PSS_SHA256\" \"RSASSA_PSS_SHA384\" \"RSASSA_PSS_SHA512\" Specifies RSASSA PKCS#1 v1.5 signature algorithm MD5-SHA-1 hashing. extension must prepend DigestInfo prefix add PKCS#1 padding. algorithm deprecated never requested Chrome version 109. Specifies RSASSA PKCS#1 v1.5 signature algorithm SHA-1 hash function. Specifies RSASSA PKCS#1 v1.5 signature algorithm SHA-256 hashing function. Specifies RSASSA PKCS#1 v1.5 signature algorithm SHA-384 hashing function. Specifies RSASSA PKCS#1 v1.5 signature algorithm SHA-512 hashing function. Specifies RSASSA PSS signature algorithm SHA-256 hashing function, MGF1 mask generation function salt size hash. Specifies RSASSA PSS signature algorithm SHA-384 hashing function, MGF1 mask generation function salt size hash. Specifies RSASSA PSS signature algorithm SHA-512 hashing function, MGF1 mask generation function salt size hash. CertificateInfo Properties - certificate ArrayBuffer Must DER encoding X.509 certificate. Currently, certificates RSA keys supported. - supportedHashes Hash[] Must set hashes supported certificate. extension asked signatures digests calculated one hash algorithms. order decreasing hash preference. CertificatesUpdateRequest Properties - certificatesRequestId number Request identifier passed setCertificates . ClientCertificateInfo Properties - certificateChain ArrayBuffer[] array must contain DER encoding X.509 client certificate first element. must include exactly one certificate. - supportedAlgorithms algorithms supported certificate. extension asked signatures using one algorithms. Error Types errors extension report. Value \"GENERAL_ERROR\" Hash Deprecated. Replaced Algorithm . Enum \"MD5_SHA1\" \"SHA1\" \"SHA256\" \"SHA384\" \"SHA512\" Specifies MD5 SHA1 hashing algorithms. Specifies SHA1 hashing algorithm. Specifies SHA256 hashing algorithm. Specifies SHA384 hashing algorithm. Specifies SHA512 hashing algorithm. PinRequestErrorType types errors presented user requestPin function. Enum \"INVALID_PIN\" \"INVALID_PUK\" \"MAX_ATTEMPTS_EXCEEDED\" \"UNKNOWN_ERROR\" Specifies PIN invalid. Specifies PUK invalid. Specifies maximum attempt number exceeded. Specifies error cannot represented types. PinRequestType type code requested extension requestPin function. Enum \"PIN\" \"PUK\" Specifies requested code PIN. Specifies requested code PUK. PinResponseDetails Properties - userInput string optional code provided user. Empty user closed dialog error occurred. ReportSignatureDetails Properties - error \"GENERAL_ERROR\" optionalError occurred generating signature, any. - signRequestId number Request identifier received via onSignatureRequested event. - signature ArrayBuffer optional signature, successfully generated. RequestPinDetails Properties - attemptsLeft number optional number attempts left. provided UI present information user. Chrome expected enforce this, instead stopPinRequest called extension errorType = MAX_ATTEMPTS_EXCEEDED number pin requests exceeded. - errorType PinRequestErrorType optional error template displayed user. set previous request failed, notify user failure reason. - requestType PinRequestType optional type code requested. Default PIN. - signRequestId number ID given Chrome SignRequest. SetCertificatesDetails Properties - certificatesRequestId number optional called response onCertificatesUpdateRequested , contain receivedcertificatesRequestId value. Otherwise, unset. - clientCertificates List currently available client certificates. - error \"GENERAL_ERROR\" optionalError occurred extracting certificates, any. error surfaced user appropriate. SignatureRequest Properties - algorithm Signature algorithm used. - certificate ArrayBuffer DER encoding X.509 certificate. extension must sign input using associated private key. - input ArrayBuffer Data signed. Note data hashed. - signRequestId number Request identifier passed reportSignature . SignRequest Properties - certificate ArrayBuffer DER encoding X.509 certificate. extension must sign digest using associated private key. - digest ArrayBuffer digest must signed. - hash Refers hash algorithm used create digest . - signRequestId number Chrome 57+The unique ID used extension need call method requires it, e.g. requestPin. StopPinRequestDetails Properties - errorType PinRequestErrorType optional error template. present displayed user. Intended contain reason stopping flow caused error, e.g. MAX_ATTEMPTS_EXCEEDED. - signRequestId number ID given Chrome SignRequest. Methods reportSignature() chrome.certificateProvider.reportSignature( details: ReportSignatureDetails, callback?: function, ) called response onSignatureRequested . extension must eventually call function every onSignatureRequested event; API implementation stop waiting call time respond timeout error function called. Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. requestPin() chrome.certificateProvider.requestPin( details: RequestPinDetails, callback?: function, ) Requests PIN user. one ongoing request time allowed. requests issued another flow ongoing rejected. extension's responsibility try later another flow progress. Parameters - details Contains details requested dialog. - callback function optional callback parameter looks like:(details?: PinResponseDetails) => void - details PinResponseDetails optional - Returns - Promise<PinResponseDetails | undefined> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setCertificates() chrome.certificateProvider.setCertificates( details: SetCertificatesDetails, callback?: function, ) Sets list certificates use browser. extension call function initialization every change set currently available certificates. extension also call function response onCertificatesUpdateRequested every time event received. Parameters - details certificates set. Invalid certificates ignored. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. stopPinRequest() chrome.certificateProvider.stopPinRequest( details: StopPinRequestDetails, callback?: function, ) Stops pin request started requestPin function. Parameters - details Contains details reason stopping request flow. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onCertificatesUpdateRequested chrome.certificateProvider.onCertificatesUpdateRequested.addListener( callback: function, ) event fires certificates set via setCertificates insufficient browser requests updated information. extension must call setCertificates updated list certificates received certificatesRequestId . Parameters - callback function callback parameter looks like:(request: CertificatesUpdateRequest) => void - request - onSignatureRequested chrome.certificateProvider.onSignatureRequested.addListener( callback: function, ) event fires every time browser needs sign message using certificate provided extension via setCertificates . extension must sign input data request using appropriate algorithm private key return calling reportSignature received signRequestId . Parameters - callback function callback parameter looks like:(request: SignatureRequest) => void - request -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/commands", "title": "chrome.commands | API | Chrome for Developers", "text": "Description Use commands API add keyboard shortcuts trigger actions extension, example, action open browser action send command extension. Manifest Concepts usage Commands API allows extension developers define specific commands, bind default key combination. command extension accepts must declared properties \"commands\" object extension's manifest. property key used command's name. Command objects take two properties. suggested_key optional property declares default keyboard shortcuts command. omitted, command unbound. property either take string object value. string value specifies default keyboard shortcut used across platforms. object value allows extension developer customize keyboard shortcut platform. providing platform-specific shortcuts, valid object properties default ,chromeos ,linux ,mac , andwindows . See Key combination requirements additional details. description string used provide user short description command's purpose. string appears extension keyboard shortcut management UI. Descriptions required standard commands, ignored Action commands. extension many commands, may specify four suggested keyboard shortcuts. user manually add shortcuts chrome://extensions/shortcuts dialog. Supported Keys following keys usable command shortcuts. Key definitions case sensitive. Attempting load extension incorrectly cased key result manifest parse error installation time. - Alpha keys \u2026Z - Numeric keys 0 \u20269 - Standard key strings General\u2013 Comma ,Period ,Home ,End ,PageUp ,PageDown ,Space ,Insert ,Delete Arrow keys\u2013 ,Down ,Left ,Right Media Keys\u2013 MediaNextTrack ,MediaPlayPause ,MediaPrevTrack ,MediaStop - Modifier key strings Ctrl ,Alt ,Shift ,MacCtrl (macOS only),Command (macOS only),Search (ChromeOS only) Key combination requirements Extension command shortcuts must include either Ctrl orAlt .Modifiers cannot used combination Media Keys. many macOS keyboards, Alt refers Option key.On macOS, Command orMacCtrl also used place ofCtrl orAlt (see next bullet point). macOS Ctrl automatically converted intoCommand .Command also used the\"mac\" shortcut explicitly refer Command key.To use Control key macOS, replace Ctrl withMacCtrl defining the\"mac\" shortcut.Using MacCtrl combination another platform cause validation error prevent extension installed. Shift optional modifier platforms.Search optional modifier exclusive ChromeOS.Certain operating system Chrome shortcuts (e.g. window management) always take priority Extension command shortcuts cannot overridden. Handle command events manifest.json: { \"name\": \"My extension\", ... \"commands\": { \"run-foo\": { \"suggested_key\": { \"default\": \"Ctrl+Shift+Y\", \"mac\": \"Command+Shift+Y\" }, \"description\": \"Run \\\"foo\\\" current page.\" }, \"_execute_action\": { \"suggested_key\": { \"windows\": \"Ctrl+Shift+Y\", \"mac\": \"Command+Shift+Y\", \"chromeos\": \"Ctrl+Shift+U\", \"linux\": \"Ctrl+Shift+J\" } } }, ... } service worker, bind handler commands defined manifest using onCommand.addListener . example: service-worker.js: chrome.commands.onCommand.addListener((command) => { console.log(`Command: ${command}`); }); Action commands _execute_action (Manifest V3), _execute_browser_action (Manifest V2), _execute_page_action (Manifest V2) commands reserved action trigger action, browser action, page action respectively. commands dispatch command.onCommand events like standard commands. need take action based popup opening, consider listening DOMContentLoaded event inside popup's JavaScript. Scope default, commands scoped Chrome browser. means browser focus, command shortcuts inactive. Beginning Chrome 35, extension developers optionally mark command \"global\". Global commands also work Chrome focus. Keyboard shortcut suggestions global commands limited Ctrl+Shift+[0..9] . protective measure minimize risk overriding shortcuts applications since if, example, Alt+P allowed global, keyboard shortcut opening print dialog might work applications. End users free remap global commands preferred key combination using UI exposed chrome://extensions/shortcuts . Example: manifest.json: { \"name\": \"My extension\", ... \"commands\": { \"toggle-feature-foo\": { \"suggested_key\": { \"default\": \"Ctrl+Shift+5\" }, \"description\": \"Toggle feature foo\", \"global\": true } }, ... } Examples following examples flex core functionality Commands API. Basic command Commands allow extensions map logic keyboard shortcuts invoked user. basic, command requires command declaration extension's manifest listener registration shown following example. manifest.json: { \"name\": \"Command demo - basic\", \"version\": \"1.0\", \"manifest_version\": 3, \"background\": { \"service_worker\": \"service-worker.js\" }, \"commands\": { \"inject-script\": { \"suggested_key\": \"Ctrl+Shift+Y\", \"description\": \"Inject script page\" } } } service-worker.js: chrome.commands.onCommand.addListener((command) => { console.log(`Command \"${command}\" triggered`); }); Action command described Concepts usage section, also map command extension's action. following example injects content script shows alert current page user either clicks extension's action triggers keyboard shortcut. manifest.json: { \"name\": \"Commands demo - action invocation\", \"version\": \"1.0\", \"manifest_version\": 3, \"background\": { \"service_worker\": \"service-worker.js\" }, \"permissions\": [\"activeTab\", \"scripting\"], \"action\": {}, \"commands\": { \"_execute_action\": { \"suggested_key\": { \"default\": \"Ctrl+U\", \"mac\": \"Command+U\" } } } } service-worker.js: chrome.action.onClicked.addListener((tab) => { chrome.scripting.executeScript({ target: {tabId: tab.id}, func: contentScriptFunc, args: ['action'], }); }); function contentScriptFunc(name) { alert(`\"${name}\" executed`); } // callback called \"_execute_action\" chrome.commands.onCommand.addListener((command) => { console.log(`Command \"${command}\" called`); }); Verify commands registered extension attempts register shortcut already used another extension, second extension's shortcut register expected. provide robust end user experience anticipating possibility checking collisions install time. service-worker.js: chrome.runtime.onInstalled.addListener((details) => { (details.reason === chrome.runtime.OnInstalledReason.INSTALL) { checkCommandShortcuts(); } }); // use function initial install phase. // installation user may intentionally unassigned commands. function checkCommandShortcuts() { chrome.commands.getAll((commands) => { let missingShortcuts = []; (let {name, shortcut} commands) { (shortcut === '') { missingShortcuts.push(name); } } (missingShortcuts.length > 0) { // Update extension UI inform user one // commands currently unassigned. } }); } Types Command Properties - description string optional Extension Command description - name string optional name Extension Command - shortcut string optional shortcut active command, blank active. Methods getAll() chrome.commands.getAll( callback?: function, ) Returns registered extension commands extension shortcut (if active). Chrome 110, command return _execute_action . Parameters Returns - Promise<Command[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/contentSettings", "title": "chrome.contentSettings | API | Chrome for Developers", "text": "Description Use chrome.contentSettings API change settings control whether websites use features cookies, JavaScript, plugins. generally speaking, content settings allow customize Chrome's behavior per-site basis instead globally. Permissions contentSettings must declare \"contentSettings\" permission extension's manifest use API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"contentSettings\" ], ... } Concepts usage Content setting patterns use patterns specify websites content setting affects. example, https://*.youtube.com/* specifies youtube.com subdomains. syntax content setting patterns match patterns, differences: - http ,https , andftp URLs, path must wildcard (/* ). Forfile URLs, path must completely specified must contain wildcards. - contrast match patterns, content setting patterns specify port number. port number specified, pattern matches websites port. port number specified, pattern matches ports. Pattern precedence one content setting rule applies given site, rule specific pattern takes precedence. example, following patterns ordered precedence: https://www.example.com/* https://*.example.com/* (matching example.com subdomains)<all_urls> (matching every URL) Three kinds wildcards affect specific pattern is: - Wildcards port (for example https://www.example.com:*/* ) - Wildcards scheme (for example *://www.example.com:123/* ) - Wildcards hostname (for example https://*.example.com:123/* ) pattern specific another pattern one part less specific another part, different parts checked following order: hostname, scheme, port. example, following patterns ordered precedence: https://www.example.com:*/* Specifies hostname scheme.*:/www.example.com:123/* high, although specifies hostname, specify scheme.https://*.example.com:123/* Lower although specifies port scheme, wildcard hostname. Primary secondary patterns URL taken account deciding content setting apply depends content type. example, contentSettings.notifications settings based URL shown omnibox. URL called \"primary\" URL. content types take additional URLs account. example, whether site allowed set contentSettings.cookies decided based URL HTTP request (which primary URL case) well URL shown omnibox (which called \"secondary\" URL). multiple rules primary secondary patterns, rule specific primary pattern takes precedence. multiple rules primary pattern, rule specific secondary pattern takes precedence. example, following list primary/secondary pattern pairs ordered precedence: | Precedence | Primary pattern | Secondary pattern | |---|---|---| | 1 | https://www.moose.com/* , | https://www.wombat.com/* | | 2 | https://www.moose.com/* , | <all_urls> | | 3 | <all_urls> , | https://www.wombat.com/* | | 4 | <all_urls> , | <all_urls> | Secondary patterns supported images content setting. Resource identifiers Resource identifiers allow specify content settings specific subtypes content type. Currently, content type supports resource identifiers contentSettings.plugins , resource identifier identifies specific plugin. applying content settings, first settings specific plugin checked. settings found specific plugin, general content settings plugins checked. example, content setting rule resource identifier adobe-flash-player pattern <all_urls> , takes precedence rule without resource identifier pattern https://www.example.com/* , even pattern specific. get list resource identifiers content type calling contentSettings.ContentSetting.getResourceIdentifiers() method. returned list change set installed plugins user's machine, Chrome tries keep identifiers stable across plugin updates. Examples try API, install contentSettings API example chrome-extension-samples repository. Types AutoVerifyContentSetting Enum \"allow\" \"block\" CameraContentSetting Enum \"allow\" \"block\" \"ask\" ClipboardContentSetting Enum \"allow\" \"block\" \"ask\" ContentSetting Properties - clear void PromiseClear content setting rules set extension. clear function looks like:(details: object, callback?: function) => {...} - details object - scope Scope optional clear setting (default: regular). - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets current content setting given pair URLs. get function looks like:(details: object, callback?: function) => {...} - details object - incognito boolean optional Whether check content settings incognito session. (default false) - primaryUrl string primary URL content setting retrieved. Note meaning primary URL depends content type. - resourceIdentifier ResourceIdentifier optional specific identifier type content settings retrieved. - secondaryUrl string optional secondary URL content setting retrieved. Defaults primary URL. Note meaning secondary URL depends content type, content types use secondary URLs. - - callback function optional callback parameter looks like:(details: object) => void - details object - setting content setting. See description individual ContentSetting objects possible values. - - - returns Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getResourceIdentifiers void PromiseThe getResourceIdentifiers function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:(resourceIdentifiers?: ResourceIdentifier[]) => void - resourceIdentifiers ResourceIdentifier[] optional list resource identifiers content type, undefined content type use resource identifiers. - - returns Promise<ResourceIdentifier[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseApplies new content setting rule. set function looks like:(details: object, callback?: function) => {...} - details object - primaryPattern string pattern primary URL. details format pattern, see Content Setting Patterns. - resourceIdentifier ResourceIdentifier optional resource identifier content type. - scope Scope optional set setting (default: regular). - secondaryPattern string optional pattern secondary URL. Defaults matching URLs. details format pattern, see Content Setting Patterns. - setting setting applied rule. See description individual ContentSetting objects possible values. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - CookiesContentSetting Enum \"allow\" \"block\" \"session_only\" FullscreenContentSetting Value \"allow\" ImagesContentSetting Enum \"allow\" \"block\" JavascriptContentSetting Enum \"allow\" \"block\" LocationContentSetting Enum \"allow\" \"block\" \"ask\" MicrophoneContentSetting Enum \"allow\" \"block\" \"ask\" MouselockContentSetting Value \"allow\" MultipleAutomaticDownloadsContentSetting Enum \"allow\" \"block\" \"ask\" NotificationsContentSetting Enum \"allow\" \"block\" \"ask\" PluginsContentSetting Value \"block\" PopupsContentSetting Enum \"allow\" \"block\" PpapiBrokerContentSetting Value \"block\" ResourceIdentifier content type using resource identifiers contentSettings.plugins . information, see Resource Identifiers. Properties - description string optional human readable description resource. - id string resource identifier given content type. Scope scope ContentSetting. One regular : setting regular profile (which inherited incognito profile overridden elsewhere), incognito\\_session\\_only : setting incognito profile set incognito session deleted incognito session ends (overrides regular settings). Enum \"regular\" \"incognito_session_only\" Properties automaticDownloads Whether allow sites download multiple files automatically. One allow : Allow sites download multiple files automatically, block : allow sites download multiple files automatically, ask : Ask site wants download files automatically first file. Default ask . primary URL URL top-level frame. secondary URL used. autoVerify Whether allow sites use Private State Tokens API. One allow : Allow sites use Private State Tokens API, block : Block sites using Private State Tokens API. Default allow . primary URL URL top-level frame. secondary URL used. NOTE: calling set() , primary pattern must . camera Whether allow sites access camera. One allow : Allow sites access camera, block : allow sites access camera, ask : Ask site wants access camera. Default ask . primary URL URL document requested camera access. secondary URL used. NOTE: 'allow' setting valid patterns ''. clipboard Whether allow sites access clipboard via advanced capabilities Async Clipboard API. \"Advanced\" capabilities include anything besides writing built-in formats user gesture, i.e. ability read, ability write custom formats, ability write without user gesture. One allow : Allow sites use advanced clipboard capabilities, block : allow sites use advanced clipboard capabilties, ask : Ask site wants use advanced clipboard capabilities. Default ask . primary URL URL document requested clipboard access. secondary URL used. cookies Whether allow cookies local data set websites. One allow : Accept cookies, block : Block cookies, session\\_only : Accept cookies current session. Default allow . primary URL URL representing cookie origin. secondary URL URL top-level frame. fullscreen Deprecated. longer effect. Fullscreen permission automatically granted sites. Value always allow . images Whether show images. One allow : Show images, block : show images. Default allow . primary URL URL top-level frame. secondary URL URL image. javascript Whether run JavaScript. One allow : Run JavaScript, block : run JavaScript. Default allow . primary URL URL top-level frame. secondary URL used. location Whether allow Geolocation. One allow : Allow sites track physical location, block : allow sites track physical location, ask : Ask allowing sites track physical location. Default ask . primary URL URL document requested location data. secondary URL URL top-level frame (which may may differ requesting URL). microphone Whether allow sites access microphone. One allow : Allow sites access microphone, block : allow sites access microphone, ask : Ask site wants access microphone. Default ask . primary URL URL document requested microphone access. secondary URL used. NOTE: 'allow' setting valid patterns ''. mouselock Deprecated. longer effect. Mouse lock permission automatically granted sites. Value always allow . notifications Whether allow sites show desktop notifications. One allow : Allow sites show desktop notifications, block : allow sites show desktop notifications, ask : Ask site wants show desktop notifications. Default ask . primary URL URL document wants show notification. secondary URL used. plugins Deprecated. Flash support removed Chrome 88, permission longer effect. Value always block . Calls set() clear() ignored. popups Whether allow sites show pop-ups. One allow : Allow sites show pop-ups, block : allow sites show pop-ups. Default block . primary URL URL top-level frame. secondary URL used. unsandboxedPlugins Deprecated. Previously, controlled whether allow sites run plugins unsandboxed, however, Flash broker process removed Chrome 88, permission longer effect. Value always block . Calls set() clear() ignored."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/contextMenus", "title": "chrome.contextMenus | API | Chrome for Developers", "text": "Description Use chrome.contextMenus API add items Google Chrome's context menu. choose types objects context menu additions apply to, images, hyperlinks, pages. Permissions contextMenus must declare \"contextMenus\" permission extension's manifest use API. Also, specify 16 16-pixel icon display next menu item. example: { \"name\": \"My extension\", ... \"permissions\": [ \"contextMenus\" ], \"icons\": { \"16\": \"icon-bitty.png\", \"48\": \"icon-small.png\", \"128\": \"icon-large.png\" }, ... } Concepts usage Context menu items appear document (or frame within document), even file:// chrome:// URLs. control documents items appear in, specify documentUrlPatterns field call create() update() methods. create many context menu items need, one extension visible once, Google Chrome automatically collapses single parent menu. Examples try API, install contextMenus API example chrome-extension-samples repository. Types ContextType different contexts menu appear in. Specifying 'all' equivalent combination contexts except 'launcher'. 'launcher' context supported apps used add menu items context menu appears clicking app icon launcher/taskbar/dock/etc. Different platforms might put limitations actually supported launcher context menu. Enum \"all\" \"page\" \"frame\" \"selection\" \"link\" \"editable\" \"image\" \"video\" \"audio\" \"launcher\" \"browser_action\" \"page_action\" \"action\" CreateProperties Properties new context menu item. Properties - checked boolean optional initial state checkbox radio button: true selected,false unselected. one radio button selected time given group. - contexts [ContextType, ...ContextType[]] optional List contexts menu item appear in. Defaults ['page'] . - documentUrlPatterns string[] optional Restricts item apply documents frames whose URL matches one given patterns. details pattern formats, see Match Patterns. - enabled boolean optional Whether context menu item enabled disabled. Defaults true . - id string optional unique ID assign item. Mandatory event pages. Cannot another ID extension. - parentId string | number optional ID parent menu item; makes item child previously added item. - targetUrlPatterns string[] optional Similar documentUrlPatterns , filters based thesrc attribute ofimg ,audio , andvideo tags thehref attribute ofa tags. - title string optional text display item; required unless type isseparator . context isselection , use%s within string show selected text. example, parameter's value \"Translate '%s' Pig Latin\" user selects word \"cool\", context menu item selection \"Translate 'cool' Pig Latin\". - type ItemType optional type menu item. Defaults normal . - visible boolean optional Whether item visible menu. - onclick void optional function called back menu item clicked. available inside service worker; instead, register listener contextMenus.onClicked .The onclick function looks like:(info: OnClickData, tab: Tab) => {...} - info Information item clicked context click happened. - tab details tab click took place. parameter present platform apps. - ItemType type menu item. Enum \"normal\" \"checkbox\" \"radio\" \"separator\" OnClickData Information sent context menu item clicked. Properties - checked boolean optional flag indicating state checkbox radio item clicked. - editable boolean flag indicating whether element editable (text input, textarea, etc.). - frameId number optional Chrome 51+The ID frame element context menu clicked, frame. - frameUrl string optional URL frame element context menu clicked, frame. - linkUrl string optional element link, URL points to. - mediaType string optional One 'image', 'video', 'audio' context menu activated one types elements. - string | number ID menu item clicked. - pageUrl string optional URL page menu item clicked. property set click occured context current page, launcher context menu. - parentMenuItemId string | number optional parent ID, any, item clicked. - selectionText string optional text context selection, any. - srcUrl string optional present elements 'src' URL. - wasChecked boolean optional flag indicating state checkbox radio item clicked. Properties ACTION_MENU_TOP_LEVEL_LIMIT maximum number top level extension items added extension action context menu. items beyond limit ignored. Value 6 Methods create() chrome.contextMenus.create( createProperties: CreateProperties, callback?: function, ) Creates new context menu item. error occurs creation, may detected creation callback fires; details runtime.lastError . Parameters - createProperties - callback function optional callback parameter looks like:() => void Returns - number | string ID newly created item. remove() chrome.contextMenus.remove( menuItemId: string | number, callback?: function, ) Removes context menu item. Parameters - string | number ID context menu item remove. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 123+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeAll() chrome.contextMenus.removeAll( callback?: function, ) Removes context menu items added extension. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 123+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.contextMenus.update( id: string | number, updateProperties: object, callback?: function, ) Updates previously created context menu item. Parameters - id string | number ID item update. - updateProperties object properties update. Accepts values contextMenus.create function.- checked boolean optional - contexts [ContextType, ...ContextType[]] optional - documentUrlPatterns string[] optional - enabled boolean optional - parentId string | number optional ID item made item's parent. Note: cannot set item become child descendant. - targetUrlPatterns string[] optional - title string optional - type ItemType optional - visible boolean optional Chrome 62+Whether item visible menu. - onclick void optional onclick function looks like:(info: OnClickData, tab: Tab) => {...} - infoChrome 44+ - tabChrome 44+ details tab click took place. parameter present platform apps. - - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 123+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onClicked chrome.contextMenus.onClicked.addListener( callback: function, ) Fired context menu item clicked. Parameters - callback function callback parameter looks like:(info: OnClickData, tab?: tabs.Tab) => void - info - tab tabs.Tab optional -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/cookies", "title": "chrome.cookies | API | Chrome for Developers", "text": "Description Use chrome.cookies API query modify cookies, notified change. Permissions cookies use cookies API, declare \"cookies\" permission manifest along host permissions hosts whose cookies want access. example: { \"name\": \"My extension\", ... \"host_permissions\": [ \"*://*.google.com/\" ], \"permissions\": [ \"cookies\" ], ... } Partitioning Partitioned cookies allow site mark certain cookies keyed origin top-level frame. means that, example, site embedded using iframe site B site C, embedded versions partitioned cookie different values B C. default, API methods operate unpartitioned cookies. partitionKey property used override behavior. details general impact partitioning extensions, see Storage Cookies. Examples find simple example using cookies API examples/api/cookies directory. examples help viewing source code, see Samples. Types Cookie Represents information HTTP cookie. Properties - domain string domain cookie (e.g. \"www.google.com\", \"example.com\"). - expirationDate number optional expiration date cookie number seconds since UNIX epoch. provided session cookies. - hostOnly boolean True cookie host-only cookie (i.e. request's host must exactly match domain cookie). - httpOnly boolean True cookie marked HttpOnly (i.e. cookie inaccessible client-side scripts). - name string name cookie. - partitionKey CookiePartitionKey optional Chrome 119+The partition key reading modifying cookies Partitioned attribute. - path string path cookie. - sameSiteChrome 51+ cookie's same-site status (i.e. whether cookie sent cross-site requests). - secure boolean True cookie marked Secure (i.e. scope limited secure channels, typically HTTPS). - session boolean True cookie session cookie, opposed persistent cookie expiration date. - storeId string ID cookie store containing cookie, provided getAllCookieStores(). - value string value cookie. CookieDetails Details identify cookie. Properties - name string name cookie access. - partitionKey CookiePartitionKey optional Chrome 119+The partition key reading modifying cookies Partitioned attribute. - storeId string optional ID cookie store look cookie. default, current execution context's cookie store used. - url string URL cookie access associated. argument may full URL, case data following URL path (e.g. query string) simply ignored. host permissions URL specified manifest file, API call fail. CookiePartitionKey Represents partitioned cookie's partition key. Properties - hasCrossSiteAncestor boolean optional Chrome 130+Indicates cookie set cross-cross site context. prevents top-level site embedded cross-site context accessing cookies set top-level site same-site context. - topLevelSite string optional top-level site partitioned cookie available in. CookieStore Represents cookie store browser. incognito mode window, instance, uses separate cookie store non-incognito window. Properties - id string unique identifier cookie store. - tabIds number[] Identifiers browser tabs share cookie store. FrameDetails Details identify frame. Properties - documentId string optional unique identifier document. frameId and/or tabId provided validated match document found provided document ID. - frameId number optional unique identifier frame within tab. - tabId number optional unique identifier tab containing frame. OnChangedCause underlying reason behind cookie's change. cookie inserted, removed via explicit call \"chrome.cookies.remove\", \"cause\" \"explicit\". cookie automatically removed due expiry, \"cause\" \"expired\". cookie removed due overwritten already-expired expiration date, \"cause\" set \"expired_overwrite\". cookie automatically removed due garbage collection, \"cause\" \"evicted\". cookie automatically removed due \"set\" call overwrote it, \"cause\" \"overwrite\". Plan response accordingly. Enum \"evicted\" \"expired\" \"explicit\" \"expired_overwrite\" \"overwrite\" SameSiteStatus cookie's 'SameSite' state (https://tools.ietf.org/html/draft-west-first-party-cookies). 'no_restriction' corresponds cookie set 'SameSite=None', 'lax' 'SameSite=Lax', 'strict' 'SameSite=Strict'. 'unspecified' corresponds cookie set without SameSite attribute. Enum \"no_restriction\" \"lax\" \"strict\" \"unspecified\" Methods get() chrome.cookies.get( details: CookieDetails, callback?: function, ) Retrieves information single cookie. one cookie name exists given URL, one longest path returned. cookies path length, cookie earliest creation time returned. Parameters Returns - Promise<Cookie | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.cookies.getAll( details: object, callback?: function, ) Retrieves cookies single cookie store match given information. cookies returned sorted, longest path first. multiple cookies path length, earliest creation time first. method retrieves cookies domains extension host permissions to. Parameters - details object Information filter cookies retrieved. - domain string optional Restricts retrieved cookies whose domains match subdomains one. - name string optional Filters cookies name. - partitionKey CookiePartitionKey optional Chrome 119+The partition key reading modifying cookies Partitioned attribute. - path string optional Restricts retrieved cookies whose path exactly matches string. - secure boolean optional Filters cookies Secure property. - session boolean optional Filters session vs. persistent cookies. - storeId string optional cookie store retrieve cookies from. omitted, current execution context's cookie store used. - url string optional Restricts retrieved cookies would match given URL. - - callback function optional callback parameter looks like:(cookies: Cookie[]) => void - cookies Cookie[] existing, unexpired cookies match given cookie info. - Returns - Promise<Cookie[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAllCookieStores() chrome.cookies.getAllCookieStores( callback?: function, ) Lists existing cookie stores. Parameters - callback function optional callback parameter looks like:(cookieStores: CookieStore[]) => void - cookieStores existing cookie stores. - Returns - Promise<CookieStore[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPartitionKey() chrome.cookies.getPartitionKey( details: FrameDetails, callback?: function, ) partition key frame indicated. Parameters - details - callback function optional callback parameter looks like:(details: object) => void - details object Contains details partition key that's retrieved. - partitionKey partition key reading modifying cookies Partitioned attribute. - - Returns - Promise<object> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.cookies.remove( details: CookieDetails, callback?: function, ) Deletes cookie name. Parameters - details - callback function optional callback parameter looks like:(details?: object) => void - details object optional Contains details cookie that's removed. removal failed reason, \"null\", runtime.lastError set.- name string name cookie that's removed. - partitionKey CookiePartitionKey optional Chrome 119+The partition key reading modifying cookies Partitioned attribute. - storeId string ID cookie store cookie removed. - url string URL associated cookie that's removed. - - Returns - Promise<object | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. set() chrome.cookies.set( details: object, callback?: function, ) Sets cookie given cookie data; may overwrite equivalent cookies exist. Parameters - details object Details cookie set. - domain string optional domain cookie. omitted, cookie becomes host-only cookie. - expirationDate number optional expiration date cookie number seconds since UNIX epoch. omitted, cookie becomes session cookie. - httpOnly boolean optional Whether cookie marked HttpOnly. Defaults false. - name string optional name cookie. Empty default omitted. - partitionKey CookiePartitionKey optional Chrome 119+The partition key reading modifying cookies Partitioned attribute. - path string optional path cookie. Defaults path portion url parameter. - sameSite SameSiteStatus optional Chrome 51+The cookie's same-site status. Defaults \"unspecified\", i.e., omitted, cookie set without specifying SameSite attribute. - secure boolean optional Whether cookie marked Secure. Defaults false. - storeId string optional ID cookie store set cookie. default, cookie set current execution context's cookie store. - url string request-URI associate setting cookie. value affect default domain path values created cookie. host permissions URL specified manifest file, API call fail. - value string optional value cookie. Empty default omitted. - - callback function optional callback parameter looks like:(cookie?: Cookie) => void - cookie Cookie optional Contains details cookie that's set. setting failed reason, \"null\", runtime.lastError set. - Returns - Promise<Cookie | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onChanged chrome.cookies.onChanged.addListener( callback: function, ) Fired cookie set removed. special case, note updating cookie's properties implemented two step process: cookie updated first removed entirely, generating notification \"cause\" \"overwrite\" . Afterwards, new cookie written updated values, generating second notification \"cause\" \"explicit\". Parameters - callback function callback parameter looks like:(changeInfo: object) => void - changeInfo object - cause underlying reason behind cookie's change. - cookie Information cookie set removed. - removed boolean True cookie removed. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/debugger", "title": "chrome.debugger | API | Chrome for Developers", "text": "Description chrome.debugger API serves alternate transport Chrome's remote debugging protocol. Use chrome.debugger attach one tabs instrument network interaction, debug JavaScript, mutate DOM CSS, more. Use Debuggee property tabId target tabs sendCommand route events tabId onEvent callbacks. Permissions debugger must declare \"debugger\" permission extension's manifest use API. { \"name\": \"My extension\", ... \"permissions\": [ \"debugger\", ], ... } Concepts usage attached, chrome.debugger API lets send Chrome DevTools Protocol (CDP) commands given target. Explaining CDP depth scope documentation\u2014to learn CDP check official CDP documentation. Targets Targets represent something debugged\u2014this could include tab, iframe worker. target identified UUID associated type (such iframe , shared_worker , more). Within target, may multiple execution contexts\u2014for example process iframes get unique target instead represented different contexts accessed single target. Restricted domains security reasons, chrome.debugger API provide access Chrome DevTools Protocol Domains. available domains are: Accessibility, Audits, CacheStorage, Console, CSS, Database, Debugger, DOM, DOMDebugger, DOMSnapshot, Emulation, Fetch, IO, Input, Inspector, Log, Network, Overlay, Page, Performance, Profiler, Runtime, Storage, Target, Tracing, WebAudio, WebAuthn. Work frames one one mapping frames targets. Within single tab, multiple process frames may share target use different execution context. hand, new target may created out-of-process iframe. attach frames, need handle type frame separately: Listen Runtime.executionContextCreated event identify new execution contexts associated process frames.Follow steps attach related targets identify out-of-process frames. Attach related targets connecting target, may want connect related targets including out-of-process child frames associated workers. Starting Chrome 125, chrome.debugger API supports flat sessions. lets add additional targets children main debugger session message without needing another call chrome.debugger.attach . Instead, add sessionId property calling chrome.debugger.sendCommand identify child target would like send command to. automatically attach process child frames, first add listener Target.attachedToTarget event: chrome.debugger.onEvent.addListener((source, method, params) => { (method === \"Target.attachedToTarget\") { // `source` identifies parent session, need construct new // identifier child session const session = { ...source, sessionId: params.sessionId }; // Call needed CDP commands child session await chrome.debugger.sendCommand(session, \"Runtime.enable\"); } }); Then, enable auto attach sending Target.setAutoAttach command flatten option set true : await chrome.debugger.sendCommand({ tabId }, \"Target.setAutoAttach\", { autoAttach: true, waitForDebuggerOnStart: false, flatten: true, filter: [{ type: \"iframe\", exclude: false }] }); Examples try API, install debugger API example chrome-extension-samples repository. Types Debuggee Debuggee identifier. Either tabId, extensionId targetId must specified Properties - extensionId string optional id extension intend debug. Attaching extension background page possible --silent-debugger-extension-api command-line switch used. - tabId number optional id tab intend debug. - targetId string optional opaque id debug target. DebuggerSession Debugger session identifier. One tabId, extensionId targetId must specified. Additionally, optional sessionId provided. sessionId specified arguments sent onEvent , means event coming child protocol session within root debuggee session. sessionId specified passed sendCommand , targets child protocol session within root debuggee session. Properties - extensionId string optional id extension intend debug. Attaching extension background page possible --silent-debugger-extension-api command-line switch used. - sessionId string optional opaque id Chrome DevTools Protocol session. Identifies child session within root session identified tabId, extensionId targetId. - tabId number optional id tab intend debug. - targetId string optional opaque id debug target. DetachReason Connection termination reason. Enum \"target_closed\" \"canceled_by_user\" TargetInfo Debug target information Properties - attached boolean True debugger already attached. - extensionId string optional extension id, defined type = 'background_page'. - faviconUrl string optional Target favicon URL. - id string Target id. - tabId number optional tab id, defined type == 'page'. - title string Target page title. - type Target type. - url string Target URL. TargetInfoType Target type. Enum \"page\" \"background_page\" \"worker\" \"other\" Methods attach() chrome.debugger.attach( target: Debuggee, requiredVersion: string, callback?: function, ) Attaches debugger given target. Parameters - target Debugging target want attach. - requiredVersion string Required debugging protocol version (\"0.1\"). One attach debuggee matching major version greater equal minor version. List protocol versions obtained here. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. detach() chrome.debugger.detach( target: Debuggee, callback?: function, ) Detaches debugger given target. Parameters - target Debugging target want detach. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getTargets() chrome.debugger.getTargets( callback?: function, ) Returns list available debug targets. Parameters - callback function optional callback parameter looks like:(result: TargetInfo[]) => void - result Array TargetInfo objects corresponding available debug targets. - Returns - Promise<TargetInfo[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendCommand() chrome.debugger.sendCommand( target: DebuggerSession, method: string, commandParams?: object, callback?: function, ) Sends given command debugging target. Parameters - target Debugging target want send command. - method string Method name. one methods defined remote debugging protocol. - commandParams object optional JSON object request parameters. object must conform remote debugging params scheme given method. - callback function optional callback parameter looks like:(result?: object) => void - result object optional JSON object response. Structure response varies depending method name defined 'returns' attribute command description remote debugging protocol. - Returns - Promise<object | undefined> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onDetach chrome.debugger.onDetach.addListener( callback: function, ) Fired browser terminates debugging session tab. happens either tab closed Chrome DevTools invoked attached tab. Parameters - callback function callback parameter looks like:(source: Debuggee, reason: DetachReason) => void - source - reason - onEvent chrome.debugger.onEvent.addListener( callback: function, ) Fired whenever debugging target issues instrumentation event. Parameters - callback function callback parameter looks like:(source: DebuggerSession, method: string, params?: object) => void - source - method string - params object optional -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/declarativeContent", "title": "chrome.declarativeContent | API | Chrome for Developers", "text": "Description Use chrome.declarativeContent API take actions depending content page, without requiring permission read page's content. Permissions declarativeContent Concepts usage Declarative Content API lets enable extension's action depending URL web page, CSS selector matches element page, without needing add host permissions inject content script. Use activeTab permission interact page user clicks extension's action. Rules Rules consists conditions actions. conditions fulfilled, actions executed. actions setIcon() showAction() . PageStateMatcher matches web pages listed criteria met. match page url, css compound selector bookmarked state page. following rule enables extension's action Google pages password field present: let rule1 = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: { hostSuffix: '.google.com', schemes: ['https'] }, css: [\"input[type='password']\"] }) ], actions: [ new chrome.declarativeContent.ShowAction() ] }; also enable extension's action Google sites video, add second condition, condition sufficient trigger specified actions: let rule2 = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: { hostSuffix: '.google.com', schemes: ['https'] }, css: [\"input[type='password']\"] }), new chrome.declarativeContent.PageStateMatcher({ css: [\"video\"] }) ], actions: [ new chrome.declarativeContent.ShowAction() ] }; onPageChanged event tests whether rule least one fulfilled condition executes actions. Rules persist across browsing sessions; therefore, extension installation time first use removeRules clear previously installed rules use addRules register new ones. chrome.runtime.onInstalled.addListener(function(details) { chrome.declarativeContent.onPageChanged.removeRules(undefined, function() { chrome.declarativeContent.onPageChanged.addRules([rule2]); }); }); activeTab permission, extension display permission warnings user clicks extension action, run relevant pages. Page URL matching PageStateMatcher.pageurl matches URL criteria fulfilled. common criteria concatenation either host, path, URL, followed Contains, Equals, Prefix, Suffix. following table contains examples: | Criteria | Matches | |---|---| { hostSuffix: 'google.com' } | Google URLs | { pathPrefix: '/docs/extensions' } | Extension docs URLs | { urlContains: 'developer.chrome.com' } | chrome developers docs URLs | criteria case sensitive. complete list criteria, see UrlFilter. CSS Matching PageStateMatcher.css conditions must compound selectors, meaning can't include combinators like whitespace \"> \" selectors. helps Chrome match selectors efficiently. | Compound Selectors (OK) | Complex Selectors (Not OK) | |---|---| | div p | iframe.special[src^='http'] | p>span.highlight | ns|* | p + ol | #abcd:checked | p::first-line | CSS conditions match displayed elements: element matches selector display:none one parent elements display:none , cause condition match. Elements styled visibility:hidden , positioned off-screen, hidden elements still make condition match. Bookmarked state matching PageStateMatcher.isBookmarked condition allows matching bookmarked state current URL user's profile. make use condition \"bookmarks\" permission must declared extension manifest. Types ImageDataType See https://developer.mozilla.org/en-US/docs/Web/API/ImageData. Type ImageData PageStateMatcher Matches state web page based various criteria. Properties - constructor void constructor function looks like:(arg: PageStateMatcher) => {...} - arg - returns - - css string[] optional Matches CSS selectors array match displayed elements frame origin page's main frame. selectors array must compound selectors speed matching. Note: Listing hundreds CSS selectors listing CSS selectors match hundreds times per page slow web sites. - isBookmarked boolean optional Chrome 45+Matches bookmarked state page equal specified value. Requres bookmarks permission. - pageUrl UrlFilter optional Matches conditions UrlFilter fulfilled top-level URL page. RequestContentScript Declarative event action injects content script. WARNING: action still experimental supported stable builds Chrome. Properties - constructor void constructor function looks like:(arg: RequestContentScript) => {...} - returns - - allFrames boolean optional Whether content script runs frames matching page, top frame. Default false . - css string[] optional Names CSS files injected part content script. - js string[] optional Names JavaScript files injected part content script. - matchAboutBlank boolean optional Whether insert content script about:blank andabout:srcdoc . Default isfalse . SetIcon Declarative event action sets n-dip square icon extension's page action browser action corresponding conditions met. action used without host permissions, extension must page browser action. Exactly one imageData path must specified. dictionaries mapping number pixels image representation. image representation imageData ImageData object; example, canvas element, image representation path path image file relative extension's manifest. scale screen pixels fit device-independent pixel, scale * n icon used. scale missing, another image resized required size. Properties - constructor void constructor function looks like:(arg: SetIcon) => {...} - arg - returns - - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, image used chosen depending screen's pixel density. number image pixels fit one screen space unit equalsscale , image sizescale * n selected, n size icon UI. least one image must specified. Note thatdetails.imageData = foo equivalent todetails.imageData = {'16': foo} . ShowAction declarative event action sets extension's toolbar action enabled state corresponding conditions met. action used without host permissions. extension activeTab permission, clicking page action grants access active tab. pages conditions met extension's toolbar action grey-scale, clicking open context menu, instead triggering action. Properties - constructor void constructor function looks like:(arg: ShowAction) => {...} - arg - returns - ShowPageAction Please use declarativeContent.ShowAction . declarative event action sets extension's page action enabled state corresponding conditions met. action used without host permissions, extension must page action. extension activeTab permission, clicking page action grants access active tab. pages conditions met extension's toolbar action grey-scale, clicking open context menu, instead triggering action. Properties - constructor void constructor function looks like:(arg: ShowPageAction) => {...} - arg - returns - Events onPageChanged Provides Declarative Event API consisting addRules , removeRules , getRules ."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/declarativeNetRequest", "title": "chrome.declarativeNetRequest | API | Chrome for Developers", "text": "Description chrome.declarativeNetRequest API used block modify network requests specifying declarative rules. lets extensions modify network requests without intercepting viewing content, thus providing privacy. Permissions declarativeNetRequest declarativeNetRequestWithHostAccess \"declarativeNetRequest \" \"declarativeNetRequestWithHostAccess \" permissions provide capabilities. differences permissions requested granted. \"declarativeNetRequest\" - Triggers permission warning install time provides implicit access allow ,allowAllRequests andblock rules. Use possible avoid needing request full access hosts. \"declarativeNetRequestFeedback\" - Enables debugging features unpacked extensions, specifically getMatchedRules() andonRuleMatchedDebug . \"declarativeNetRequestWithHostAccess\" - permission warning shown install time, must request host permissions perform action host. appropriate want use declarative net request rules extension already host permissions without generating additional warnings. Availability Manifest addition permissions described previously, certain types rulesets, static rulesets specifically, require declaring \"declarative_net_request\" manifest key, dictionary single key called \"rule_resources\" . key array containing dictionaries type Ruleset , shown following. (Note name 'Ruleset' appear manifest's JSON since merely array.) Static rulesets explained later document. { \"name\": \"My extension\", ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, { \"id\": \"ruleset_2\", \"enabled\": false, \"path\": \"rules_2.json\" }] }, \"permissions\": [ \"declarativeNetRequest\", \"declarativeNetRequestFeedback\", ], \"host_permissions\": [ \"http://www.blogger.com/*\", \"http://*.google.com/*\" ], ... } Rules rulesets use API, specify one rulesets. ruleset contains array rules. single rule one following: - Block network request. - Upgrade schema (http https). - Prevent request getting blocked negating matching blocked rules. - Redirect network request. - Modify request response headers. three types rulesets, managed slightly different ways. - Dynamic - Persist across browser sessions extension upgrades managed using JavaScript extension use. - Session - Cleared browser shuts new version extension installed. Session rules managed using JavaScript extension use. - Static - Packaged, installed, updated extension installed upgraded. Static rules stored JSON-formatted rule files listed manifest file. Dynamic session-scoped rulesets Dynamic session rulesets managed using JavaScript extension use. - Dynamic rules persist across browser sessions extension upgrades. - Session rules cleared browser shuts new version extension installed. one ruleset types. extension add remove rules dynamically calling updateDynamicRules() updateSessionRules() , provided rule limits exceeded. information rule limits, see Rule limits. see example code examples. Static rulesets Unlike dynamic session rules, static rules packaged, installed, updated extension installed upgraded. They're stored rule files JSON format, indicated extension using \"declarative_net_request\" \"rule_resources\" keys described above, well one Ruleset dictionaries. Ruleset dictionary contains path rule file, ID ruleset contained file, whether ruleset enabled disabled. last two important enable disable ruleset programmatically. { ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, ... ] } ... } test rule files, load extension unpacked. Errors warnings invalid static rules displayed unpacked extensions. Invalid static rules packed extensions ignored. Expedited review Changes static rulesets may eligible expedited review. See expedited review eligible changes. Enable disable static rules rulesets individual static rules complete static rulesets may enabled disabled runtime. set enabled static rules rulesets persisted across browser sessions. Neither persisted across extension updates, meaning rules chose leave rule files available update. performance reasons also limits number rules rulesets may enabled one time. Call getAvailableStaticRuleCount() check number additional rules may enabled. information rule limits, see Rule limits. enable disable static rules, call updateStaticRules() . method takes UpdateStaticRulesOptions object, contains arrays IDs rules enable disable. IDs defined using \"id\" key Ruleset dictionary. maximum limit 5000 disabled static rules. enable disable static rulesets, call updateEnabledRulesets() . method takes UpdateRulesetOptions object, contains arrays IDs rulesets enable disable. IDs defined using \"id\" key Ruleset dictionary. Build rules Regardless type, rule starts four fields shown following. \"id\" \"priority\" keys take number, \"action\" \"condition\" keys may provide several blocking redirecting conditions. following rule blocks script requests originating \"foo.com\" URL \"abc\" substring. { \"id\" : 1, \"priority\": 1, \"action\" : { \"type\" : \"block\" }, \"condition\" : { \"urlFilter\" : \"abc\", \"initiatorDomains\" : [\"foo.com\"], \"resourceTypes\" : [\"script\"] } } URL matching Declarative Net Request provides ability match URLs either pattern matching syntax regular expressions. URL filter syntax rule's \"condition\" key allows \"urlFilter\" key acting URLs specified domain. create patterns using pattern matching tokens. examples. urlFilter | Matches | match | |---|---|---| \"abc\" | https://abcd.com https://example.com/abcd | https://ab.com | \"abc*d\" | https://abcd.com https://example.com/abcxyzd | https://abc.com | \"||a.example.com\" | https://a.example.com/ https://b.a.example.com/xyz https://a.example.company | https://example.com/ | \"|https*\" | https://example.com | http://example.com/ http://https.com | \"example*^123|\" | https://example.com/123 http://abc.com/example?123 | https://example.com/1234 https://abc.com/example0123 | Regular expressions Conditions also use regular expressions. See \"regexFilter\" key. learn limits apply conditions, see Rules use regular expressions. Write good URL conditions Take care writing rules always match entire domain. Otherwise, rule may match situations unexpected. example, using pattern matching syntax: google.com incorrectly matcheshttps://example.com/?param=google.com ||google.com incorrectly matcheshttps://google.company https://www.google.com incorrectly matcheshttps://example.com/?param=https://www.google.com Consider using: ||google.com/ , matches paths subdomains.|https://www.google.com/ matches paths subdomains. Similarly, use ^ / characters anchor regular expression. example, ^https:\\/\\/www\\.google\\.com\\/ matches path https://www.google.com. Rule evaluation DNR rules applied browser across various stages network request lifecycle. request request made, extension block redirect (including upgrading scheme HTTP HTTPS) matching rule. extension, browser determines list matching rules. Rules modifyHeaders action included handled later. Additionally, rules responseHeaders condition considered later (when response headers available) included. Then, extension, Chrome picks one candidate per request. Chrome finds matching rule, ordering matching rules priority. Rules priority ordered action (allow allowAllRequests > block > upgradeScheme > redirect ). candidate allow allowAllRequests rule, frame request made previously matched allowAllRequests rule higher equal priority extension, request \"allowed\" extension effect request. one extension wants block redirect request, single action take chosen. Chrome sorting rules order block > redirect upgradeScheme > allow allowAllRequests . two rules type, Chrome chooses rule recently installed extension. request headers sent Chrome sends request headers server, headers updated based matching modifyHeaders rules. Within single extension, Chrome builds list modifications perform finding matching modifyHeaders rules. Similar before, rules higher priority matching allow allowAllRequests rules included. rules applied Chrome order rules recently installed extension always evaluated rules older extension. Additionally, rules higher priority one extension always applied rules lower priority extension. Notably, even across extensions: - rule appends header, lower priority rules append header. Set remove operations allowed. - rule sets header, lower priority rules extension append header. modifications allowed. - rule removes header, lower priority rules cannot modify header. response received response headers received, Chrome evaluates rules responseHeaders condition. sorting rules action priority excluding rules made redundant matching allow allowAllRequests rule (this happens identically steps \"Before request\"), Chrome may block redirect request behalf extension. Note request made stage, request already sent server server received data like request body. block redirect rule response headers condition still run\u2013but cannot actually block redirect request. case block rule, handled page made request receiving blocked response Chrome terminating request early. case redirect rule, Chrome makes new request redirected URL. Make sure consider behaviors meet privacy expectations extension. request blocked redirected, Chrome applies modifyHeaders rules. Applying modifications response headers works way described \"Before request headers sent\". Applying modifications request headers nothing, since request already made. Safe rules Safe rules defined rules action block , allow , allowAllRequests upgradeScheme . rules subject increased dynamic rules quota. Rule limits performance overhead loading evaluating rules browser, limits apply using API. Limits depend type rule using. Static rules Static rules specified rule files declared manifest file. extension specify 100 static rulesets part \"rule_resources\" manifest key, 50 rulesets enabled time. latter called MAX_NUMBER_OF_ENABLED_STATIC_RULESETS . Collectively, rulesets guaranteed least 30,000 rules. called GUARANTEED_MINIMUM_STATIC_RULES . number rules available depends many rules enabled extensions installed user's browser. find number runtime calling getAvailableStaticRuleCount() . see example code examples. Session rules extension 5000 session rules. exposed MAX_NUMBER_OF_SESSION_RULES . Chrome 120, limit 5000 combined dynamic session rules. Dynamic rules extension least 5000 dynamic rules. exposed MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Starting Chrome 121, larger limit 30,000 rules available safe dynamic rules, exposed MAX_NUMBER_OF_DYNAMIC_RULES . unsafe rules added within limit 5000 also count towards limit. Chrome 120, 5000 combined dynamic session rules limit. Rules use regular expressions types rules use regular expressions; however, total number regular expression rules type cannot exceed 1000. called MAX_NUMBER_OF_REGEX_RULES. Additionally, rule must less 2KB compiled. roughly correlates complexity rule. try load rule exceeds limit, see warning like following rule ignored. rules_1.json: Rule id 1 specified complex regex allowed part \"regexFilter\" key. Interactions service workers declarativeNetRequest applies requests reach network stack. includes responses HTTP cache, may include responses go service worker's onfetch handler. declarativeNetRequest affect responses generated service worker retrieved CacheStorage , affect calls fetch() made service worker. Web accessible resources declarativeNetRequest rule cannot redirect public resource request resource web accessible. triggers error. true even specified web accessible resource owned redirecting extension. declare resources declarativeNetRequest, use manifest's \"web_accessible_resources\" array. Header modification append operation supported following headers: accept , accept-encoding , accept-language , access-control-request-headers , cache-control , connection , content-language , cookie , forwarded , if-match , if-none-match , keep-alive , range , te , trailer , transfer-encoding , upgrade , user-agent , via , want-digest , x-forwarded-for . Examples Code examples Update dynamic rules following example shows call updateDynamicRules() . procedure updateSessionRules() same. // Get arrays containing new old rules const newRules = await getNewRules(); const oldRules = await chrome.declarativeNetRequest.getDynamicRules(); const oldRuleIds = oldRules.map(rule => rule.id); // Use arrays update dynamic rules await chrome.declarativeNetRequest.updateDynamicRules({ removeRuleIds: oldRuleIds, addRules: newRules }); Update static rulesets following example shows enable disable rulesets considering number available maximum number enabled static rulesets. would number static rules need exceeds number allowed. work, rulesets installed rulesets disabled (setting \"Enabled\" false within manifest file). async function updateStaticRules(enableRulesetIds, disableCandidateIds) { // Create options structure call updateEnabledRulesets() let options = { enableRulesetIds: enableRulesetIds } // Get number enabled static rules const enabledStaticCount = await chrome.declarativeNetRequest.getEnabledRulesets(); // Compare rule counts determine anything needs disabled // new rules enabled const proposedCount = enableRulesetIds.length; (enabledStaticCount + proposedCount > chrome.declarativeNetRequest.MAX_NUMBER_OF_ENABLED_STATIC_RULESETS) { options.disableRulesetIds = disableCandidateIds } // Update enabled static rules await chrome.declarativeNetRequest.updateEnabledRulesets(options); } Rule examples following examples illustrate Chrome prioritizes rules extension. reviewing them, may want open prioritization rules separate window. \"priority\" key examples require host permission *://*.example.com/* . work priority particular URL, look (developer-defined) \"priority\" key, \"action\" key \"urlFilter\" key. examples refer example rule file shown them. - Navigation https://google.com - Two rules cover URL: rules IDs 1 4. rule ID 1 applies \"block\" actions higher priority than\"redirect\" actions. remaining rules apply longer URLs. - Navigation https://google.com/1234 - longer URL, rule ID 2 matches addition rules IDs 1 4. rule ID 2 applies \"allow\" higher priority than\"block\" and\"redirect\" . - Navigation https://google.com/12345 - four rules match URL. rule ID 3 applies developer-defined priority highest group. [ { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"block\" }, \"condition\": {\"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 2, \"priority\": 1, \"action\": { \"type\": \"allow\" }, \"condition\": { \"urlFilter\": \"||google.com/123\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 3, \"priority\": 2, \"action\": { \"type\": \"block\" }, \"condition\": { \"urlFilter\": \"||google.com/12345\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 4, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"url\": \"https://example.com\" } }, \"condition\": { \"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, ] Redirects example requires host permission *://*.example.com/* . following example shows redirect request example.com page within extension itself. extension path /a.jpg resolves chrome-extension://EXTENSION_ID/a.jpg , EXTENSION_ID ID extension. work manifest declare /a.jpg web accessible resource. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"extensionPath\": \"/a.jpg\" } }, \"condition\": { \"urlFilter\": \"||https://www.example.com/\", \"resourceTypes\": [\"main_frame\"] } } following uses \"transform\" key redirect subdomain example.com. uses domain name anchor (\"||\") intercept requests scheme example.com. \"scheme\" key \"transform\" specifies redirects subdomain always use \"https\". { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"transform\": { \"scheme\": \"https\", \"host\": \"new.example.com\" } } }, \"condition\": { \"urlFilter\": \"||example.com/\", \"resourceTypes\": [\"main_frame\"] } } following example uses regular expressions redirect https://www.abc.xyz.com/path https://abc.xyz.com/path . \"regexFilter\" key, notice periods escaped capturing group selects either \"abc\" \"def\". \"regexSubstitution\" key specifies first returned match regular expression using \"\\1\". case, \"abc\" captured redirected URL placed substitution. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"regexSubstitution\": \"https://\\\\1.xyz.com/\" } }, \"condition\": { \"regexFilter\": \"^https://www\\\\.(abc|def)\\\\.xyz\\\\.com/\", \"resourceTypes\": [ \"main_frame\" ] } } Headers following example removes cookies main frame sub frames. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"modifyHeaders\", \"requestHeaders\": [{ \"header\": \"cookie\", \"operation\": \"remove\" }] }, \"condition\": { \"resourceTypes\": [\"main_frame\", \"sub_frame\"] } } Types DomainType describes whether request first third party frame originated. request said first party domain (eTLD+1) frame request originated. Enum \"firstParty\" \"thirdParty\" network request first party frame originated. network request third party frame originated. ExtensionActionOptions Properties - displayActionCountAsBadgeText boolean optional Whether automatically display action count page extension's badge text. preference persisted across sessions. - tabUpdate TabActionCountUpdate optional Chrome 89+Details tab's action count adjusted. GetDisabledRuleIdsOptions Properties - rulesetId string id corresponding static Ruleset . GetRulesFilter Properties - ruleIds number[] optional specified, rules matching IDs included. HeaderInfo Properties - excludedValues string[] optional specified, condition matched header exists value contains least one element list. uses match pattern syntax values . - header string name header. condition matches name values andexcludedValues specified. - values string[] optional specified, condition matches header's value matches least one pattern list. supports case-insensitive header value matching plus following constructs: '*' : Matches number characters. '?' : Matches zero one character(s). '*' '?' escaped backslash, e.g. '\\*' '\\?' HeaderOperation describes possible operations \"modifyHeaders\" rule. Enum \"append\" \"set\" \"remove\" Adds new entry specified header. operation supported request headers. Sets new value specified header, removing existing headers name. Removes entries specified header. IsRegexSupportedResult Properties - isSupported boolean - reason UnsupportedRegexReason optional Specifies reason regular expression supported. provided isSupported false. MatchedRule Properties - ruleId number matching rule's ID. - rulesetId string ID Ruleset rule belongs to. rule originating set dynamic rules, equal toDYNAMIC_RULESET_ID . MatchedRuleInfo Properties - rule - tabId number tabId tab request originated tab still active. Else -1. - timeStamp number time rule matched. Timestamps correspond Javascript convention times, i.e. number milliseconds since epoch. MatchedRuleInfoDebug Properties - request Details request rule matched. - rule MatchedRulesFilter Properties - minTimeStamp number optional specified, matches rules given timestamp. - tabId number optional specified, matches rules given tab. Matches rules associated active tab set -1. ModifyHeaderInfo Properties - header string name header modified. - operation operation performed header. - value string optional new value header. Must specified append andset operations. QueryKeyValue Properties - key string - replaceOnly boolean optional Chrome 94+If true, query key replaced already present. Otherwise, key also added missing. Defaults false. - value string QueryTransform Properties - addOrReplaceParams QueryKeyValue[] optional list query key-value pairs added replaced. - removeParams string[] optional list query keys removed. Redirect Properties - extensionPath string optional Path relative extension directory. start '/'. - regexSubstitution string optional Substitution pattern rules specify regexFilter . first match ofregexFilter within url replaced pattern. WithinregexSubstitution , backslash-escaped digits (\\1 \\9) used insert corresponding capture groups. \\0 refers entire matching text. - transform URLTransform optional Url transformations perform. - url string optional redirect url. Redirects JavaScript urls allowed. RegexOptions Properties - isCaseSensitive boolean optional Whether regex specified case sensitive. Default true. - regex string regular expresson check. - requireCapturing boolean optional Whether regex specified requires capturing. Capturing required redirect rules specify aregexSubstition action. default false. RequestDetails Properties - documentId string optional Chrome 106+The unique identifier frame's document, request frame. - documentLifecycle DocumentLifecycle optional Chrome 106+The lifecycle frame's document, request frame. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameType FrameType optional Chrome 106+The type frame, request frame. - initiator string optional origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The unique identifier frame's parent document, request frame parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. - tabId number ID tab request takes place. Set -1 request related tab. - type resource type request. - url string URL request. RequestMethod describes HTTP request method network request. Enum \"connect\" \"delete\" \"get\" \"head\" \"options\" \"patch\" \"post\" \"put\" \"other\" ResourceType describes resource type network request. Enum \"main_frame\" \"sub_frame\" \"stylesheet\" \"script\" \"image\" \"font\" \"object\" \"xmlhttprequest\" \"ping\" \"csp_report\" \"media\" \"websocket\" \"webtransport\" \"webbundle\" \"other\" Rule Properties - action action take rule matched. - condition condition rule triggered. - id number id uniquely identifies rule. Mandatory >= 1. - priority number optional Rule priority. Defaults 1. specified, >= 1. RuleAction Properties - redirect Redirect optional Describes redirect performed. valid redirect rules. - requestHeaders ModifyHeaderInfo[] optional Chrome 86+The request headers modify request. valid RuleActionType \"modifyHeaders\". - responseHeaders ModifyHeaderInfo[] optional Chrome 86+The response headers modify request. valid RuleActionType \"modifyHeaders\". - type type action perform. RuleActionType Describes kind action take given RuleCondition matches. Enum \"block\" \"redirect\" \"allow\" \"upgradeScheme\" \"modifyHeaders\" \"allowAllRequests\" Block network request. Redirect network request. Allow network request. request intercepted allow rule matches it. Upgrade network request url's scheme https request http ftp. Modify request/response headers network request. Allow requests within frame hierarchy, including frame request itself. RuleCondition Properties - domainType DomainType optional Specifies whether network request first-party third-party domain originated. omitted, requests accepted. - domains string[] optional Deprecated since Chrome 101Use initiatorDomains insteadThe rule match network requests originating list domains . - excludedDomains string[] optional Deprecated since Chrome 101Use excludedInitiatorDomains insteadThe rule match network requests originating list excludedDomains . - excludedInitiatorDomains string[] optional Chrome 101+The rule match network requests originating list excludedInitiatorDomains . list empty omitted, domains excluded. takes precedence overinitiatorDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also excluded. - excludedRequestDomains string[] optional Chrome 101+The rule match network requests domains matches one list excludedRequestDomains . list empty omitted, domains excluded. takes precedence overrequestDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also excluded. - excludedRequestMethods RequestMethod[] optional Chrome 91+List request methods rule match. one requestMethods andexcludedRequestMethods specified. neither specified, request methods matched. - excludedResourceTypes ResourceType[] optional List resource types rule match. one resourceTypes andexcludedResourceTypes specified. neither specified, resource types except \"main_frame\" blocked. - excludedResponseHeaders HeaderInfo[] optional Chrome 128+Rule match request matches response header condition list (if specified). excludedResponseHeaders andresponseHeaders specified, theexcludedResponseHeaders property takes precedence. - excludedTabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE excludes requests originate tab. supported session-scoped rules. - initiatorDomains string[] optional Chrome 101+The rule match network requests originating list initiatorDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also matched. - isUrlFilterCaseSensitive boolean optional Whether urlFilter orregexFilter (whichever specified) case sensitive. Default false. - regexFilter string optional Regular expression match network request url. follows RE2 syntax. Note: one urlFilter orregexFilter specified.Note: regexFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. - requestDomains string[] optional Chrome 101+The rule match network requests domain matches one list requestDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also matched. - requestMethods RequestMethod[] optional Chrome 91+List HTTP request methods rule match. empty list allowed. Note: Specifying requestMethods rule condition also exclude non-HTTP(s) requests, whereas specifyingexcludedRequestMethods not. - resourceTypes ResourceType[] optional List resource types rule match. empty list allowed. Note: must specified allowAllRequests rules may include thesub_frame andmain_frame resource types. - responseHeaders HeaderInfo[] optional Chrome 128+Rule matches request matches response header condition list (if specified). - tabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE matches requests originate tab. empty list allowed. supported session-scoped rules. - urlFilter string optional pattern matched network request url. Supported constructs: '*' : Wildcard: Matches number characters. '|' : Left/right anchor: used either end pattern, specifies beginning/end url respectively. '||' : Domain name anchor: used beginning pattern, specifies start (sub-)domain URL. '^' : Separator character: matches anything except letter, digit, one following: _ ,- ,. , or% . also match end URL.Therefore urlFilter composed following parts: (optional Left/Domain name anchor) + pattern + (optional Right anchor).If omitted, urls matched. empty string allowed. pattern beginning ||* allowed. Use* instead.Note: one urlFilter orregexFilter specified.Note: urlFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. example, request url http://abc.\u0440\u0444?q=\u0444, theurlFilter matched url http://abc.xn--p1ai/?q=%D1%84. Ruleset Properties - enabled boolean Whether ruleset enabled default. - id string non-empty string uniquely identifying ruleset. IDs beginning '_' reserved internal use. - path string path JSON ruleset relative extension directory. RulesMatchedDetails Properties - rulesMatchedInfo Rules matching given filter. TabActionCountUpdate Properties - increment number amount increment tab's action count by. Negative values decrement count. - tabId number tab update action count. TestMatchOutcomeResult Properties - matchedRules rules (if any) match hypothetical request. TestMatchRequestDetails Properties - initiator string optional initiator URL (if any) hypothetical request. - method RequestMethod optional Standard HTTP method hypothetical request. Defaults \"get\" HTTP requests ignored non-HTTP requests. - responseHeaders object optional Chrome 129+The headers provided hypothetical response request get blocked redirected sent. Represented object maps header name list string values. specified, hypothetical response would return empty response headers, match rules match non-existence headers. E.g. {\"content-type\": [\"text/html; charset=utf-8\", \"multipart/form-data\"]} - tabId number optional ID tab hypothetical request takes place. need correspond real tab ID. Default -1, meaning request related tab. - type resource type hypothetical request. - url string URL hypothetical request. UnsupportedRegexReason Describes reason given regular expression supported. Enum \"syntaxError\" \"memoryLimitExceeded\" regular expression syntactically incorrect, uses features available RE2 syntax. regular expression exceeds memory limit. UpdateRuleOptions Properties - addRules Rule[] optional Rules add. - removeRuleIds number[] optional IDs rules remove. invalid IDs ignored. UpdateRulesetOptions Properties UpdateStaticRulesOptions Properties URLTransform Properties - fragment string optional new fragment request. either empty, case existing fragment cleared; begin '#'. - host string optional new host request. - password string optional new password request. - path string optional new path request. empty, existing path cleared. - port string optional new port request. empty, existing port cleared. - query string optional new query request. either empty, case existing query cleared; begin '?'. - queryTransform QueryTransform optional Add, remove replace query key-value pairs. - scheme string optional new scheme request. Allowed values \"http\", \"https\", \"ftp\" \"chrome-extension\". - username string optional new username request. Properties DYNAMIC_RULESET_ID Ruleset ID dynamic rules added extension. Value \"_dynamic\" GETMATCHEDRULES_QUOTA_INTERVAL Time interval within MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL getMatchedRules calls made, specified minutes. Additional calls fail immediately set runtime.lastError . Note: getMatchedRules calls associated user gesture exempt quota. Value 10 GUARANTEED_MINIMUM_STATIC_RULES minimum number static rules guaranteed extension across enabled static rulesets. rules limit count towards global static rule limit. Value 30000 MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL number times getMatchedRules called within period GETMATCHEDRULES_QUOTA_INTERVAL . Value 20 MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. Value 30000 MAX_NUMBER_OF_ENABLED_STATIC_RULESETS maximum number static Rulesets extension enable one time. Value 50 MAX_NUMBER_OF_REGEX_RULES maximum number regular expression rules extension add. limit evaluated separately set dynamic rules specified rule resources file. Value 1000 MAX_NUMBER_OF_SESSION_RULES maximum number session scoped rules extension add. Value 5000 MAX_NUMBER_OF_STATIC_RULESETS maximum number static Rulesets extension specify part \"rule_resources\" manifest key. Value 100 MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES maximum number \"unsafe\" dynamic rules extension add. Value 5000 MAX_NUMBER_OF_UNSAFE_SESSION_RULES maximum number \"unsafe\" session scoped rules extension add. Value 5000 SESSION_RULESET_ID Ruleset ID session-scoped rules added extension. Value \"_session\" Methods getAvailableStaticRuleCount() chrome.declarativeNetRequest.getAvailableStaticRuleCount( callback?: function, ) Returns number static rules extension enable global static rule limit reached. Parameters - callback function optional callback parameter looks like:(count: number) => void - count number - Returns - Promise<number> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDisabledRuleIds() chrome.declarativeNetRequest.getDisabledRuleIds( options: GetDisabledRuleIdsOptions, callback?: function, ) Returns list static rules given Ruleset currently disabled. Parameters - options Specifies ruleset query. - callback function optional callback parameter looks like:(disabledRuleIds: number[]) => void - disabledRuleIds number[] - Returns - Promise<number[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDynamicRules() chrome.declarativeNetRequest.getDynamicRules( filter?: GetRulesFilter, callback?: function, ) Returns current set dynamic rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getEnabledRulesets() chrome.declarativeNetRequest.getEnabledRulesets( callback?: function, ) Returns ids current set enabled static rulesets. Parameters - callback function optional callback parameter looks like:(rulesetIds: string[]) => void - rulesetIds string[] - Returns - Promise<string[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMatchedRules() chrome.declarativeNetRequest.getMatchedRules( filter?: MatchedRulesFilter, callback?: function, ) Returns rules matched extension. Callers optionally filter list matched rules specifying filter . method available extensions \"declarativeNetRequestFeedback\" permission \"activeTab\" permission granted tabId specified filter . Note: Rules associated active document matched five minutes ago returned. Parameters - filter MatchedRulesFilter optional object filter list matched rules. - callback function optional callback parameter looks like:(details: RulesMatchedDetails) => void - details - Returns - Promise<RulesMatchedDetails> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSessionRules() chrome.declarativeNetRequest.getSessionRules( filter?: GetRulesFilter, callback?: function, ) Returns current set session scoped rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isRegexSupported() chrome.declarativeNetRequest.isRegexSupported( regexOptions: RegexOptions, callback?: function, ) Checks given regular expression supported regexFilter rule condition. Parameters - regexOptions regular expression check. - callback function optional callback parameter looks like:(result: IsRegexSupportedResult) => void - result - Returns - Promise<IsRegexSupportedResult> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setExtensionActionOptions() chrome.declarativeNetRequest.setExtensionActionOptions( options: ExtensionActionOptions, callback?: function, ) Configures action count tabs displayed extension action's badge text provides way action count incremented. Parameters - options - callback function optional Chrome 89+The callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. testMatchOutcome() chrome.declarativeNetRequest.testMatchOutcome( request: TestMatchRequestDetails, callback?: function, ) Checks extension's declarativeNetRequest rules would match hypothetical request. Note: available unpacked extensions intended used extension development. Parameters - request - callback function optional callback parameter looks like:(result: TestMatchOutcomeResult) => void - result - Returns - Promise<TestMatchOutcomeResult> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateDynamicRules() chrome.declarativeNetRequest.updateDynamicRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set dynamic rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across browser sessions across extension updates. - Static rules specified part extension package removed using function. MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. number unsafe rules must exceedMAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateEnabledRulesets() chrome.declarativeNetRequest.updateEnabledRulesets( options: UpdateRulesetOptions, callback?: function, ) Updates set enabled static rulesets extension. rulesets IDs listed options.disableRulesetIds first removed, rulesets listed options.enableRulesetIds added. Note set enabled static rulesets persisted across sessions across extension updates, i.e. rule_resources manifest key determine set enabled static rulesets extension update. Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateSessionRules() chrome.declarativeNetRequest.updateSessionRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set session scoped rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across sessions backed memory. MAX_NUMBER_OF_SESSION_RULES maximum number session rules extension add. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateStaticRules() chrome.declarativeNetRequest.updateStaticRules( options: UpdateStaticRulesOptions, callback?: function, ) Disables enables individual static rules Ruleset . Changes rules belonging disabled Ruleset take effect next time becomes enabled. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onRuleMatchedDebug chrome.declarativeNetRequest.onRuleMatchedDebug.addListener( callback: function, ) Fired rule matched request. available unpacked extensions \"declarativeNetRequestFeedback\" permission intended used debugging purposes only. Parameters - callback function callback parameter looks like:(info: MatchedRuleInfoDebug) => void - info -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/desktopCapture", "title": "chrome.desktopCapture | API | Chrome for Developers", "text": "Description Desktop Capture API captures content screen, individual windows, individual tabs. Permissions desktopCapture Types DesktopCaptureSourceType Enum used define set desktop media sources used chooseDesktopMedia(). Enum \"screen\" \"window\" \"tab\" \"audio\" Enum \"include\" \"exclude\" Enum \"include\" \"exclude\" Methods cancelChooseDesktopMedia() chrome.desktopCapture.cancelChooseDesktopMedia( desktopMediaRequestId: number, ) Hides desktop media picker dialog shown chooseDesktopMedia(). Parameters - desktopMediaRequestId number Id returned chooseDesktopMedia() chooseDesktopMedia() chrome.desktopCapture.chooseDesktopMedia( sources: DesktopCaptureSourceType[], targetTab?: Tab, callback: function, ) Shows desktop media picker UI specified set sources. Parameters - sources Set sources shown user. sources order set decides tab order picker. - targetTab Tab optional Optional tab stream created. specified resulting stream used calling extension. stream used frames given tab whose security origin matches tab.url . tab's origin must secure origin, e.g. HTTPS. - callback function callback parameter looks like:(streamId: string, options: object) => void - streamId string opaque string passed getUserMedia() API generate media stream corresponds source selected user. user select source (i.e. canceled prompt) callback called emptystreamId . createdstreamId used expires seconds used. - options object Chrome 57+Contains properties describe stream. - canRequestAudioTrack boolean True \"audio\" included parameter sources, end user uncheck \"Share audio\" checkbox. Otherwise false, case, one ask audio stream getUserMedia call. - - Returns - number id passed cancelChooseDesktopMedia() case prompt need canceled."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/devtools_inspectedWindow", "title": "404 | Page Not Found | Chrome for Developers", "text": "Get inspired Blog Docs Build Chrome Learn Chrome works, participate origin trials, build Chrome everywhere. Web Platform Capabilities ChromeDriver Extensions Chrome Web Store Chromium Aurora Web Android Origin trials Release notes Productivity Create best experience users web's best tools. DevTools Lighthouse Chrome UX Report Accessibility Get things done quicker neater, ready-made libraries. Workbox Puppeteer Experience Design beautiful performant web Chrome. AI Performance CSS UI Identity Payments Privacy security Resources Chrome team. documentation Baseline web.dev PageSpeed Insights audit New Chrome / Sign Get inspired Blog Docs New Chrome Build Chrome Web Platform Capabilities ChromeDriver Extensions Chrome Web Store Chromium Aurora Web Android Origin trials Release notes Productivity DevTools Lighthouse Chrome UX Report Accessibility Workbox Puppeteer Experience AI Performance CSS UI Identity Payments Privacy security Resources documentation Baseline web.dev PageSpeed Insights audit 404 Sorry, find page. / Contribute File bug See open issues Related content Chromium updates Case studies Archive Podcasts & shows Follow @ChromiumDev X YouTube Chrome Developers LinkedIn RSS"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/inspectedWindow", "title": "chrome.devtools.inspectedWindow | API | Chrome for Developers", "text": "Description Use chrome.devtools.inspectedWindow API interact inspected window: obtain tab ID inspected page, evaluate code context inspected window, reload page, obtain list resources within page. See DevTools APIs summary general introduction using Developer Tools APIs. tabId property provides tab identifier use chrome.tabs.* API calls. However, please note chrome.tabs.* API exposed Developer Tools extension pages due security considerations\u2014you need pass tab ID background page invoke chrome.tabs.* API functions there. reload method may used reload inspected page. Additionally, caller specify override user agent string, script injected early upon page load, option force reload cached resources. Use getResources call onResourceContent event obtain list resources (documents, stylesheets, scripts, images etc) within inspected page. getContent setContent methods Resource class along onResourceContentCommitted event may used support modification resource content, example, external editor. Manifest Execute code inspected window eval method provides ability extensions execute JavaScript code context inspected page. method powerful used right context dangerous used inappropriately. Use tabs.executeScript method unless need specific functionality eval method provides. main differences eval tabs.executeScript methods: - eval method use isolated world code evaluated, JavaScript state inspected window accessible code. Use method access JavaScript state inspected page required. - execution context code evaluated includes Developer Tools console API. example, code use inspect and$0 . - evaluated code may return value passed extension callback. returned value valid JSON object (it may contain primitive JavaScript types acyclic references JSON objects). Please observe extra care processing data received inspected page\u2014the execution context essentially controlled inspected page; malicious page may affect data returned extension. Note page include multiple different JavaScript execution contexts. frame context, plus additional context extension content scripts running frame. default, eval method executes context main frame inspected page. eval method takes optional second argument use specify context code evaluated. options object contain one following keys: frameURL - Use specify frame inspected page's main frame. contextSecurityOrigin - Use select context within specified frame according web origin. useContentScriptContext - true, execute script context extensions's content scripts. (Equivalent specifying extensions's web orgin context security origin.) used exchange data content script. Examples following code checks version jQuery used inspected page: chrome.devtools.inspectedWindow.eval( \"jQuery.fn.jquery\", function(result, isException) { (isException) { console.log(\"the page using jQuery\"); } else { console.log(\"The page using jQuery v\" + result); } } ); try API, install devtools API examples chrome-extension-samples repository. Types Resource resource within inspected page, document, script, image. Properties - url string URL resource. - getContent void Gets content resource. getContent function looks like:(callback: function) => {...} - callback function callback parameter looks like:(content: string, encoding: string) => void - content string Content resource (potentially encoded). - encoding string Empty content encoded, encoding name otherwise. Currently, base64 supported. - - - setContent void Sets content resource. setContent function looks like:(content: string, commit: boolean, callback?: function) => {...} - content string New content resource. resources text type currently supported. - commit boolean True user finished editing resource, new content resource persisted; false minor change sent progress user editing resource. - callback function optional callback parameter looks like:(error?: object) => void - error object optional Set undefined resource content set successfully; describes error otherwise. - - Properties tabId ID tab inspected. ID may used chrome.tabs.* API. Type number Methods eval() chrome.devtools.inspectedWindow.eval( expression: string, options?: object, callback?: function, ) Evaluates JavaScript expression context main frame inspected page. expression must evaluate JSON-compliant object, otherwise exception thrown. eval function report either DevTools-side error JavaScript exception occurs evaluation. either case, result parameter callback undefined . case DevTools-side error, isException parameter non-null isError set true code set error code. case JavaScript error, isException set true value set string value thrown object. Parameters - expression string expression evaluate. - options object optional options parameter contain one options. - frameURL string optional specified, expression evaluated iframe whose URL matches one specified. default, expression evaluated top frame inspected page. - scriptExecutionContext string optional Chrome 107+Evaluate expression context content script extension matches specified origin. given, scriptExecutionContext overrides 'true' setting useContentScriptContext. - useContentScriptContext boolean optional Evaluate expression context content script calling extension, provided content script already injected inspected page. not, expression evaluated callback invoked exception parameter set object isError field set true thecode field set toE_NOTFOUND . - - callback function optional callback parameter looks like:(result: object, exceptionInfo: object) => void - result object result evaluation. - exceptionInfo object object providing details exception occurred evaluating expression. - code string Set error occurred DevTools side expression evaluated. - description string Set error occurred DevTools side expression evaluated. - details any[] Set error occurred DevTools side expression evaluated, contains array values may substituted description string provide information cause error. - isError boolean Set error occurred DevTools side expression evaluated. - isException boolean Set evaluated code produces unhandled exception. - value string Set evaluated code produces unhandled exception. - - getResources() chrome.devtools.inspectedWindow.getResources( callback: function, ) Retrieves list resources inspected page. Parameters reload() chrome.devtools.inspectedWindow.reload( reloadOptions?: object, ) Reloads inspected page. Parameters - reloadOptions object optional - ignoreCache boolean optional true, loader bypass cache inspected page resources loaded load event fired. effect similar pressing Ctrl+Shift+R inspected window within Developer Tools window. - injectedScript string optional specified, script injected every frame inspected page immediately upon load, frame's scripts. script injected subsequent reloads\u2014for example, user presses Ctrl+R. - userAgent string optional specified, string override value User-Agent HTTP header that's sent loading resources inspected page. string also override value thenavigator.userAgent property that's returned scripts running within inspected page. - Events onResourceAdded chrome.devtools.inspectedWindow.onResourceAdded.addListener( callback: function, ) Fired new resource added inspected page. Parameters - callback function callback parameter looks like:(resource: Resource) => void - resource - onResourceContentCommitted chrome.devtools.inspectedWindow.onResourceContentCommitted.addListener( callback: function, ) Fired new revision resource committed (e.g. user saves edited version resource Developer Tools)."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/network", "title": "chrome.devtools.network | API | Chrome for Developers", "text": "Description Use chrome.devtools.network API retrieve information network requests displayed Developer Tools Network panel. Network requests information represented HTTP Archive format (HAR). description HAR outside scope document, refer HAR v1.2 Specification. terms HAR, chrome.devtools.network.getHAR() method returns entire HAR log, chrome.devtools.network.onRequestFinished event provides HAR entry argument event callback. Note request content provided part HAR efficiency reasons. may call request's getContent() method retrieve content. Developer Tools window opened page loaded, requests may missing array entries returned getHAR() . Reload page get requests. general, list requests returned getHAR() match displayed Network panel. See DevTools APIs summary general introduction using Developer Tools APIs. Manifest Examples following code logs URLs images larger 40KB loaded: chrome.devtools.network.onRequestFinished.addListener( function(request) { (request.response.bodySize > 40*1024) { chrome.devtools.inspectedWindow.eval( 'console.log(\"Large image: \" + unescape(\"' + escape(request.request.url) + '\"))'); } } ); try API, install devtools API examples chrome-extension-samples repository. Types Request Represents network request document resource (script, image on). See HAR Specification reference. Properties - getContent void Returns content response body. getContent function looks like:(callback: function) => {...} - callback function callback parameter looks like:(content: string, encoding: string) => void - content string Content response body (potentially encoded). - encoding string Empty content encoded, encoding name otherwise. Currently, base64 supported. - - Methods getHAR() chrome.devtools.network.getHAR( callback: function, ) Returns HAR log contains known network requests. Parameters - callback function callback parameter looks like:(harLog: object) => void - harLog object HAR log. See HAR specification details. - Events onNavigated chrome.devtools.network.onNavigated.addListener( callback: function, ) Fired inspected window navigates new page. Parameters - function callback parameter looks like:(url: string) => void - string - onRequestFinished chrome.devtools.network.onRequestFinished.addListener( callback: function, ) Fired network request finished request data available."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/panels", "title": "chrome.devtools.panels | API | Chrome for Developers", "text": "Description Use chrome.devtools.panels API integrate extension Developer Tools window UI: create panels, access existing panels, add sidebars. extension panel sidebar displayed separate HTML page. extension pages displayed Developer Tools window access parts chrome.devtools API, well extension APIs. use devtools.panels.setOpenResourceHandler method install callback function handles user requests open resource (typically, click resource link Developer Tools window). one installed handlers gets called; users specify (using Developer Tools Settings dialog) either default behavior extension handle resource open requests. extension calls setOpenResourceHandler() multiple times, last handler retained. See DevTools APIs summary general introduction using Developer Tools APIs. Manifest Example following code adds panel contained Panel.html , represented FontPicker.png Developer Tools toolbar labeled Font Picker: chrome.devtools.panels.create(\"Font Picker\", \"FontPicker.png\", \"Panel.html\", function(panel) { ... }); following code adds sidebar pane contained Sidebar.html titled Font Properties Elements panel, sets height 8ex : chrome.devtools.panels.elements.createSidebarPane(\"Font Properties\", function(sidebar) { sidebar.setPage(\"Sidebar.html\"); sidebar.setHeight(\"8ex\"); } ); screenshot illustrates effect example would Developer Tools window: try API, install devtools panels API example chrome-extension-samples repository. Types Button button created extension. Properties - onClicked Event<functionvoidvoid> Fired button clicked. onClicked.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - update void Updates attributes button. arguments omitted null , corresponding attributes updated.The update function looks like:(iconPath?: string, tooltipText?: string, disabled?: boolean) => {...} - iconPath string optional Path new icon button. - tooltipText string optional Text shown tooltip user hovers mouse button. - disabled boolean optional Whether button disabled. - ElementsPanel Represents Elements panel. Properties - onSelectionChanged Event<functionvoidvoid> Fired object selected panel. onSelectionChanged.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - createSidebarPane void Creates pane within panel's sidebar. createSidebarPane function looks like:(title: string, callback?: function) => {...} - title string Text displayed sidebar caption. - callback function optional callback parameter looks like:(result: ExtensionSidebarPane) => void - result ExtensionSidebarPane object created sidebar pane. - - ExtensionPanel Represents panel created extension. Properties - onHidden Event<functionvoidvoid> Fired user switches away panel. onHidden.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - onSearch Event<functionvoidvoid> Fired upon search action (start new search, search result navigation, search canceled). onSearch.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(action: string, queryString?: string) => void - action string - queryString string optional - - - onShown Event<functionvoidvoid> Fired user switches panel. onShown.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(window: Window) => void - window Window - - - createStatusBarButton void Appends button status bar panel. createStatusBarButton function looks like:(iconPath: string, tooltipText: string, disabled: boolean) => {...} - iconPath string Path icon button. file contain 64x24-pixel image composed two 32x24 icons. left icon used button inactive; right icon displayed button pressed. - tooltipText string Text shown tooltip user hovers mouse button. - disabled boolean Whether button disabled. - returns - ExtensionSidebarPane sidebar created extension. Properties - onHidden Event<functionvoidvoid> Fired sidebar pane becomes hidden result user switching away panel hosts sidebar pane. onHidden.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - onShown Event<functionvoidvoid> Fired sidebar pane becomes visible result user switching panel hosts it. onShown.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(window: Window) => void - window Window - - - setExpression void Sets expression evaluated within inspected page. result displayed sidebar pane. setExpression function looks like:(expression: string, rootTitle?: string, callback?: function) => {...} - expression string expression evaluated context inspected page. JavaScript objects DOM nodes displayed expandable tree similar console/watch. - rootTitle string optional optional title root expression tree. - callback function optional callback parameter looks like:() => void - - setHeight void Sets height sidebar. setHeight function looks like:(height: string) => {...} - height string CSS-like size specification, '100px' or'12ex' . - - setObject void Sets JSON-compliant object displayed sidebar pane. setObject function looks like:(jsonObject: string, rootTitle?: string, callback?: function) => {...} - jsonObject string object displayed context inspected page. Evaluated context caller (API client). - rootTitle string optional optional title root expression tree. - callback function optional callback parameter looks like:() => void - - setPage void Sets HTML page displayed sidebar pane. setPage function looks like:(path: string) => {...} - path string Relative path extension page display within sidebar. - SourcesPanel Represents Sources panel. Properties - onSelectionChanged Event<functionvoidvoid> Fired object selected panel. onSelectionChanged.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - createSidebarPane void Creates pane within panel's sidebar. createSidebarPane function looks like:(title: string, callback?: function) => {...} - title string Text displayed sidebar caption. - callback function optional callback parameter looks like:(result: ExtensionSidebarPane) => void - result ExtensionSidebarPane object created sidebar pane. - - Properties elements Elements panel. Type sources Sources panel. Type themeName name color theme set user's DevTools settings. Possible values: default (the default) dark . Type string Methods create() chrome.devtools.panels.create( title: string, iconPath: string, pagePath: string, callback?: function, ) Creates extension panel. Parameters - title string Title displayed next extension icon Developer Tools toolbar. - iconPath string Path panel's icon relative extension directory. - pagePath string Path panel's HTML page relative extension directory. - callback function optional callback parameter looks like:(panel: ExtensionPanel) => void - panel ExtensionPanel object representing created panel. - openResource() chrome.devtools.panels.openResource( url: string, lineNumber: number, columnNumber?: number, callback?: function, ) Requests DevTools open URL Developer Tools panel. Parameters - url string URL resource open. - lineNumber number Specifies line number scroll resource loaded. - columnNumber number optional Chrome 114+Specifies column number scroll resource loaded. - callback function optional callback parameter looks like:() => void setOpenResourceHandler() chrome.devtools.panels.setOpenResourceHandler( callback?: function, ) Specifies function called user clicks resource link Developer Tools window. unset handler, either call method parameters pass null parameter. Parameters - callback function optional callback parameter looks like:(resource: Resource) => void - resource devtools.inspectedWindow.Resource object resource clicked. -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/performance", "title": "chrome.devtools.performance | API | Chrome for Developers", "text": "Description Use chrome.devtools.performance API listen recording status updates Performance panel DevTools. See DevTools APIs summary general introduction using Developer Tools APIs. Availability Concepts usage chrome.devtools.performance API allows developers interact recording features Performance panel panel Chrome DevTools. use API get notifications recording starts stops. Two events available: - onProfilingStarted: event fired Performance panel begins recording performance data. - onProfilingStopped: event fired Performance panel stops recording performance data. stance associates current stack trace cre events associated parameters. listening events, developers create extensions react recording status Performance panel, providing additional automation performance profiling. Examples use API listen recording status updates chrome.devtools.performance.onProfilingStarted.addListener(() => { // Profiling started listener implementation }); chrome.devtools.performance.onProfilingStopped.addListener(() => { // Profiling stopped listener implementation }) Events onProfilingStarted chrome.devtools.performance.onProfilingStarted.addListener( callback: function, ) Fired Performance panel starts recording. Parameters - callback function callback parameter looks like:() => void onProfilingStopped chrome.devtools.performance.onProfilingStopped.addListener( callback: function, ) Fired Performance panel stops recording. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/devtools/recorder", "title": "chrome.devtools.recorder | API | Chrome for Developers", "text": "Description Use chrome.devtools.recorder API customize Recorder panel DevTools. devtools.recorder API preview feature allows extend Recorder panel Chrome DevTools. See DevTools APIs summary general introduction using Developer Tools APIs. Availability Concepts usage Customizing export feature register extension plugin, use registerRecorderExtensionPlugin function. function requires plugin instance, name mediaType parameters. plugin instance must implement two methods: stringify stringifyStep . name provided extension shows Export menu Recorder panel. Depending export context, user clicks export option provided extension, Recorder panel invokes one two functions: stringify receives entire user flow recordingstringifyStep receives single recorded step mediaType parameter allows extension specify kind output generates stringify stringifyStep functions. example, application/javascript result JavaScript program. Customizing replay button customize replay button Recorder, use registerRecorderExtensionPlugin function. plugin must implement replay method customization take effect. method detected, replay button appear Recorder. Upon clicking button, current recording object passed first argument replay method. point, extension display RecorderView handling replay use extension APIs process replay request. create new RecorderView , invoke chrome.devtools.recorder.createView . Examples Export plugin following code implements extension plugin stringifes recording using JSON.stringify : class MyPlugin { stringify(recording) { return Promise.resolve(JSON.stringify(recording)); } stringifyStep(step) { return Promise.resolve(JSON.stringify(step)); } } chrome.devtools.recorder.registerRecorderExtensionPlugin( new MyPlugin(), /*name=*/'MyPlugin', /*mediaType=*/'application/json' ); Replay plugin following code implements extension plugin creates dummy Recorder view displays upon replay request: const view = await chrome.devtools.recorder.createView( /* name= */ 'ExtensionName', /* pagePath= */ 'Replay.html' ); let latestRecording; view.onShown.addListener(() => { // Recorder shown view. Send additional data view needed. chrome.runtime.sendMessage(JSON.stringify(latestRecording)); }); view.onHidden.addListener(() => { // Recorder hidden view. }); export class RecorderPlugin { replay(recording) { // Share data view. latestRecording = recording; // Request show view. view.show(); } } chrome.devtools.recorder.registerRecorderExtensionPlugin( new RecorderPlugin(), /* name=*/ 'CoffeeTest' ); Find complete extension example GitHub. Types RecorderExtensionPlugin plugin interface Recorder panel invokes customize Recorder panel. Properties - replay void Chrome 112+Allows extension implement custom replay functionality. replay function looks like:(recording: object) => {...} - recording object recording user interaction page. match Puppeteer's recording schema. - - stringify void Converts recording Recorder panel format string. stringify function looks like:(recording: object) => {...} - recording object recording user interaction page. match Puppeteer's recording schema. - - stringifyStep void Converts step recording Recorder panel format string. stringifyStep function looks like:(step: object) => {...} - step object step recording user interaction page. match Puppeteer's step schema. - RecorderView Represents view created extension embedded inside Recorder panel. Properties - onHidden Event<functionvoidvoid> Fired view hidden. onHidden.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - onShown Event<functionvoidvoid> Fired view shown. onShown.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:() => void - - show void Indicates extension wants show view Recorder panel. show function looks like:() => {...} Methods createView() chrome.devtools.recorder.createView( title: string, pagePath: string, ) Creates view handle replay. view embedded inside Recorder panel. Parameters - title string Title displayed next extension icon Developer Tools toolbar. - pagePath string Path panel's HTML page relative extension directory. Returns registerRecorderExtensionPlugin() chrome.devtools.recorder.registerRecorderExtensionPlugin( plugin: RecorderExtensionPlugin, name: string, mediaType: string, ) Registers Recorder extension plugin. Parameters - plugin instance implementing RecorderExtensionPlugin interface. - name string name plugin. - mediaType string media type string content plugin produces."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/dns", "title": "chrome.dns | API | Chrome for Developers", "text": "Description Use chrome.dns API dns resolution. Permissions dns Availability use API, must declare \"dns\" permission manifest. { \"name\": \"My extension\", ... \"permissions\": [ \"dns\" ], ... } Usage following code calls resolve() retrieve IP address example.com . service-worker.js: const resolveDNS = async () => { let record = await chrome.dns.resolve('example.com'); console.log(record.address); // \"192.0.2.172\" }; resolveDNS(); Types ResolveCallbackResolveInfo Properties - address string optional string representing IP address literal. Supplied resultCode indicates success. - resultCode number result code. Zero indicates success. Methods resolve() chrome.dns.resolve( hostname: string, callback?: function, ) Resolves given hostname IP address literal. Parameters - hostname string hostname resolve. - callback function optional callback parameter looks like:(resolveInfo: ResolveCallbackResolveInfo) => void - resolveInfo - Returns - Promise<ResolveCallbackResolveInfo> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/documentScan", "title": "chrome.documentScan | API | Chrome for Developers", "text": "Description Use chrome.documentScan API discover retrieve images attached document scanners. Document Scan API designed allow apps extensions view content paper documents attached document scanner. Permissions documentScan Availability Concepts usage API supports two means scanning documents. use case work scanner require control configuration, use scan() method. complicated use cases require combination methods, supported Chrome 124 later. Simple scanning simple use cases, meaning work scanner require control configuration, call scan() . method takes ScanOptions object returns Promise resolves ScanResults object. capabilities option limited number scans MIME types accepted caller. Scans returned URLs display <img> tag user interface. Complex scanning Complex scans accomplished three phases described section. outline describe every method argument every property returned response. intended give general guide writing scanner code. Discovery Call getScannerList() . Available scanners returned Promise resolves aGetScannerListResponse .- response object contains array ScannerInfo objects. - array may contain multiple entries single scanner scanner supports multiple protocols connection methods. - response object contains array Select scanner returned array save value scannerId property.Use properties individual ScannerInfo objects distinguish among multiple objects scanner. Objects scanner value thedeviceUuid property.ScannerInfo also contains animageFormats property containing array supported image types. Scanner configuration Call openScanner() , passing saved scanner ID. returns Promise resolves anOpenScannerResponse . response object contains:A scannerHandle property, need save.An options property containing scanner-specific properties, need set. See Retrieve scanner options information. (Optional) need user provide values scanner options, construct user interface. need scanner options provided previous step, need retrieve option groups provided scanner. See Construct user interface information. Construct array OptionSetting objects using programmatic user-provided values. See Set scanner options information.Pass array OptionSetting objects tosetOptions() set options scanner. returns Promise resolves aSetOptionsResponse . object contains updated version scanner options retrieved step 1 scanner configuration.Since changing one option alter constraints another option, may need repeat steps several times. Scanning Construct StartScanOptions object pass tostartScan() . returns Promise resolves aStartScanResponse . Itsjob property handle use either read scan data cancel scan.Pass job handle readScanData() . returns Promise resolves aReadScanDataResponse object. data read successfully, itsresult property equalsSUCCESS itsdata property contains anArrayBuffer part scan. Note thatestimatedCompletion contains estimated percentage total data delivered far.Repeat previous step result property equalsEOF error. end scan reached, call closeScanner() scanner handle saved step 3. returns Promise resolves CloseScannerResponse . Calling cancelScan() time job created end scanning. Response objects methods return Promise resolves response object kind. contain result property whose value member OperationResult . properties response objects contain values unless value result specific value. relationships described reference response object. example, OpenScannerResponse.scannerHandle value OpenScannerResponse.result equals SUCCESS . Scanner options Scanner options vary considerably device. Consequently, possible reflect scanner options directly within documentScan API. get around this, OpenScannerResponse (retrieved using openScanner() ) SetOptionsResponse (the response object setOptions() ) contain options property object containing scanner-specific options. option key-value mapping key device-specific option value instance ScannerOption . structure generally looks like this: { \"key1\": { scannerOptionInstance } \"key2\": { scannerOptionInstance } } example, imagine scanner returns options named \"source\" \"resolution\". structure returned options object look something like following example. simplicity, partial ScannerOption responses shown. { \"source\": { \"name\": \"source\", \"type\": OptionType.STRING, ... }, \"resolution\": { \"name\": \"resolution\", \"type\": OptionType.INT, ... }, ... } Construct user interface Though required use API, may want user choose value particular option. requires user interface. Use OpenScannerResponse (opened openScanner() ) retrieve options attached scanner described previous section. scanners group options device-specific ways. affect option behaviors, since groups may mentioned scanner's product documentation, groups shown user. retrieve groups calling getOptionGroups() . returns Promise resolves GetOptionGroupsResponse object. groups property contains scanner-specific array groups. Use information groups organize options OpenScannerResponse display. { scannerHandle: \"123456\", result: SUCCESS, groups: [ { title: \"Standard\", members: [ \"resolution\", \"mode\", \"source\" ] } ] } stated Scanner configuration, changing one option alter constraints another option. setOptionsResponse (the response object setOptions() ) contains another options property. Use update user interface. repeat needed options set. Set scanner options Set scanner options passing array OptionSetting objects setOptions() . example, see following Scan one letter-size page section. Examples Retrieve page blob example shows one way retrieve page scanner blob demonstrates use startScan() readScanData() using value OperationResult . async function pageAsBlob(handle) { let response = await chrome.documentScan.startScan( handle, {format: \"image/jpeg\"}); (response.result != chrome.documentScan.OperationResult.SUCCESS) { return null; } const job = response.job; let imgParts = []; response = await chrome.documentScan.readScanData(job); (response.result == chrome.documentScan.OperationResult.SUCCESS) { (response.data && response.data.byteLength > 0) { imgParts.push(response.data); } else { // Delay hardware make progress. await new Promise(r => setTimeout(r, 100)); } response = await chrome.documentScan.readScanData(job); } (response.result != chrome.documentScan.OperationResult.EOF) { return null; } (response.data && response.data.byteLength > 0) { imgParts.push(response.data); } return new Blob(imgParts, { type: \"image/jpeg\" }); } Scan one letter-size page example shows select scanner, set options, open it. retrieves contents single page closes scanner. process demonstrates using getScannerList() , openScanner() , setOptions() , closeScanner() . Note contents page retrieved calling pageAsBlob() function previous example. async function scan() { let response = await chrome.documentScan.getScannerList({ secure: true }); let scanner = await chrome.documentScan.openScanner( response.scanners[0].scannerId); const handle = scanner.scannerHandle; let options = []; (source scanner.options[\"source\"].constraint.list) { (source.includes(\"ADF\")) { options.push({ name: \"source\", type: chrome.documentScan.OptionType.STRING, value: { value: source } }); break; } } options.push({ name: \"tl-x\", type: chrome.documentScan.OptionType.FIXED, value: 0.0 }); options.push({ name: \"br-x\", type: chrome.documentScan.OptionType.FIXED, value: 215.9 // 8.5\" mm }); options.push({ name: \"tl-y\", type: chrome.documentScan.OptionType.FIXED, value: 0.0 }); options.push({ name: \"br-y\", type: chrome.documentScan.OptionType.FIXED, value: 279.4 // 11\" mm }); response = await chrome.documentScan.setOptions(handle, options); let imgBlob = await pageAsBlob(handle); (imgBlob != null) { // Insert imgBlob DOM, save disk, etc } await chrome.documentScan.closeScanner(handle); } Show configuration stated elsewhere, showing scanner's configuration options user requires calling getOptionGroups() addition scanner options returned call openScanner() . options shown users manufacturer-defined groups. example shows that. async function showConfig() { let response = await chrome.documentScan.getScannerList({ secure: true }); let scanner = await chrome.documentScan.openScanner( response.scanners[0].scannerId); let groups = await chrome.documentScan.getOptionGroups(scanner.scannerHandle); (const group groups.groups) { console.log(\"=== \" + group.title + \" ===\"); (const member group.members) { const option = scanner.options[member]; (option.isActive) { console.log(\" \" + option.name + \" = \" + option.value); } else { console.log(\" \" + option.name + \" inactive\"); } } } } Types CancelScanResponse Properties - job string Provides job handle passed cancelScan() . - result backend's cancel scan result. result OperationResult.SUCCESS orOperationResult.CANCELLED , scan cancelled scanner ready start new scan. result isOperationResult.DEVICE_BUSY , scanner still processing requested cancellation; caller wait short time try request again. result values indicate permanent error retried. CloseScannerResponse Properties - result result closing scanner. Even value SUCCESS , handle invalid used operations. - scannerHandle string scanner handle passed closeScanner . Configurability option changed. Enum \"NOT_CONFIGURABLE\" \"SOFTWARE_CONFIGURABLE\" \"HARDWARE_CONFIGURABLE\" option read-only. option set software. option set user toggling pushing button scanner. ConnectionType Indicates scanner connected computer. Enum \"UNSPECIFIED\" \"USB\" \"NETWORK\" Enum \"INT_RANGE\" \"FIXED_RANGE\" \"INT_LIST\" \"FIXED_LIST\" \"STRING_LIST\" constraint range OptionType.INT values. min , max , quant properties OptionConstraint long , list propety unset. constraint range OptionType.FIXED values. min , max , quant properties OptionConstraint double , list property unset. constraint specific list OptionType.INT values. OptionConstraint.list property contain long values, properties unset. constraint specific list OptionType.FIXED values. OptionConstraint.list property contain double values, properties unset. constraint specific list OptionType.STRING values. OptionConstraint.list property contain DOMString values, properties unset. DeviceFilter Properties - local boolean optional return scanners directly attached computer. - secure boolean optional return scanners use secure transport, USB TLS. GetOptionGroupsResponse Properties - groups OptionGroup[] optional result isSUCCESS , provides list option groups order supplied scanner driver. - result result getting option groups. value SUCCESS , thegroups property populated. - scannerHandle string scanner handle passed getOptionGroups . GetScannerListResponse Properties - result enumeration result. Note partial results could returned even indicates error. - scanners possibly-empty list scanners match provided DeviceFilter . OpenScannerResponse Properties - options object optional result isSUCCESS , provides key-value mapping key device-specific option value instance ofScannerOption . - result result opening scanner. value SUCCESS , thescannerHandle andoptions properties populated. - scannerHandle string optional result isSUCCESS , handle scanner used operations. - scannerId string scanner ID passed openScanner() . OperationResult enum indicates result operation. Enum \"UNKNOWN\" \"SUCCESS\" \"UNSUPPORTED\" \"CANCELLED\" \"DEVICE_BUSY\" \"INVALID\" \"WRONG_TYPE\" \"EOF\" \"ADF_JAMMED\" \"ADF_EMPTY\" \"COVER_OPEN\" \"IO_ERROR\" \"ACCESS_DENIED\" \"NO_MEMORY\" \"UNREACHABLE\" \"MISSING\" \"INTERNAL_ERROR\" unknown generic failure occurred. operation succeeded. operation supported. operation cancelled. device busy. Either data argument passed method valid. supplied value wrong data type underlying option. data available. document feeder jammed. document feeder empty. flatbed cover open. error occurred communicating device. device requires authentication. enough memory available Chromebook complete operation. device reachable. device disconnected. error occurred somewhere calling application. OptionConstraint Properties - list string[] | number[] optional - max number optional - min number optional - quant number optional - type OptionGroup Properties - members string[] array option names driver-provided order. - title string Provides printable title, example \"Geometry options\". OptionSetting Properties - name string Indicates name option set. - type Indicates data type option. requested data type must match real data type underlying option. - value string | number | boolean | number[] optional Indicates value set. Leave unset request automatic setting options autoSettable enabled. data type supplied forvalue must matchtype . OptionType data type option. Enum \"UNKNOWN\" \"BOOL\" \"INT\" \"FIXED\" \"STRING\" \"BUTTON\" \"GROUP\" option's data type unknown. value property unset. value property one true false. signed 32-bit integer. value property long long[], depending whether option takes one value. double range -32768-32767.9999 resolution 1/65535. value property double double[] depending whether option takes one value. Double values can't exactly represented rounded available range precision. sequence bytes except NUL ('\\0'). value property DOMString. option type value. Instead, setting option type causes option-specific side effect scanner driver. example, button-typed option could used scanner driver provide means select default values tell automatic document feeder advance next sheet paper. Grouping option. value. included compatibility, normally returned ScannerOption values. Use getOptionGroups() retrieve list groups member options. Enum \"UNITLESS\" \"PIXEL\" \"BIT\" \"MM\" \"DPI\" \"PERCENT\" \"MICROSECOND\" value unitless number. example, threshold. value number pixels, example, scan dimensions. value number bits, example, color depth. value measured millimeters, example, scan dimensions. value measured dots per inch, example, resolution. value percent, example, brightness. value measured microseconds, example, exposure time. ReadScanDataResponse Properties - data ArrayBuffer optional result isSUCCESS , contains next chunk scanned image data. Ifresult isEOF , contains last chunk scanned image data. - estimatedCompletion number optional result isSUCCESS , estimate much total scan data delivered far, range 0 100. - job string Provides job handle passed readScanData() . - result result reading data. value SUCCESS , thendata contains next (possibly zero-length) chunk image data ready reading. value isEOF , thedata contains last chunk image data. ScannerInfo Properties - connectionType Indicates scanner connected computer. - deviceUuid string matching ScannerInfo entries point physical device. - imageFormats string[] array MIME types requested returned scans. - manufacturer string scanner manufacturer. - model string scanner model available, generic description. - name string human-readable name scanner display UI. - protocolType string human-readable description protocol driver used access scanner, Mopria, WSD, epsonds. primarily useful allowing user choose protocols device supports multiple protocols. - scannerId string ID specific scanner. - secure boolean true, scanner connection's transport cannot intercepted passive listener, TLS USB. ScannerOption Properties - configurability Indicates whether option changed. - constraint OptionConstraint optional Defines OptionConstraint current scanner option. - description string longer description option. - isActive boolean Indicates option active set retrieved. false, value property set. - isAdvanced boolean Indicates UI display option default. - isAutoSettable boolean automatically set scanner driver. - isDetectable boolean Indicates option detected software. - isEmulated boolean Emulated scanner driver true. - name string option name using lowercase ASCII letters, numbers, dashes. Diacritics allowed. - title string printable one-line title. - type data type contained value property, needed setting option. - unit unit measurement option. - value string | number | boolean | number[] optional current value option, relevant. Note data type property must match data type specified type . ScanOptions Properties - maxImages number optional number scanned images allowed. default 1. - mimeTypes string[] optional MIME types accepted caller. ScanResults Properties - dataUrls string[] array data image URLs form passed \"src\" value image tag. - mimeType string MIME type dataUrls . SetOptionResult Properties - name string Indicates name option set. - result Indicates result setting option. SetOptionsResponse Properties - options object optional updated key-value mapping option names ScannerOption values containing new configuration attempting set supplied options. structure theoptions property inOpenScannerResponse .This property set even options set successfully, unset retrieving updated configuration fails (for example, scanner disconnected middle scanning). - results array results, one every passed-in OptionSetting . - scannerHandle string Provides scanner handle passed setOptions() . StartScanOptions Properties - format string Specifies MIME type return scanned data in. - maxReadSize number optional non-zero value specified, limits maximum scanned bytes returned single readScanData response value. smallest allowed value 32768 (32 KB). property specified, size returned chunk may large entire scanned image. StartScanResponse Properties - job string optional result isSUCCESS , provides handle used read scan data cancel job. - result result starting scan. value SUCCESS , thejob property populated. - scannerHandle string Provides scanner handle passed startScan() . Methods cancelScan() chrome.documentScan.cancelScan( job: string, callback?: function, ) Cancels started scan returns Promise resolves CancelScanResponse object. callback used, object passed instead. Parameters - job string handle active scan job previously returned call startScan . - callback function optional callback parameter looks like:(response: CancelScanResponse) => void - response - Returns - Promise<CancelScanResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. closeScanner() chrome.documentScan.closeScanner( scannerHandle: string, callback?: function, ) Closes scanner passed handle returns Promise resolves CloseScannerResponse object. callback used, object passed instead. Even response success, supplied handle becomes invalid used operations. Parameters - scannerHandle string Specifies handle open scanner previously returned call openScanner . - callback function optional callback parameter looks like:(response: CloseScannerResponse) => void - response - Returns - Promise<CloseScannerResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getOptionGroups() chrome.documentScan.getOptionGroups( scannerHandle: string, callback?: function, ) Gets group names member options scanner previously opened openScanner . method returns Promise resolves GetOptionGroupsResponse object. callback passed function, returned data passed instead. Parameters - scannerHandle string handle open scanner returned call openScanner . - callback function optional callback parameter looks like:(response: GetOptionGroupsResponse) => void - response - Returns - Promise<GetOptionGroupsResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getScannerList() chrome.documentScan.getScannerList( filter: DeviceFilter, callback?: function, ) Gets list available scanners returns Promise resolves GetScannerListResponse object. callback passed function, returned data passed instead. Parameters - filter DeviceFilter indicating types scanners returned. - callback function optional callback parameter looks like:(response: GetScannerListResponse) => void - response - Returns - Promise<GetScannerListResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. openScanner() chrome.documentScan.openScanner( scannerId: string, callback?: function, ) Opens scanner exclusive access returns Promise resolves OpenScannerResponse object. callback passed function, returned data passed instead. Parameters - scannerId string ID scanner opened. value one returned previous call getScannerList . - callback function optional callback parameter looks like:(response: OpenScannerResponse) => void - response - Returns - Promise<OpenScannerResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. readScanData() chrome.documentScan.readScanData( job: string, callback?: function, ) Reads next chunk available image data active job handle, returns Promise resolves ReadScanDataResponse object. callback used, object passed instead. **Note:**It valid response result SUCCESS zero-length data member. means scanner still working yet additional data ready. caller wait short time try again. scan job completes, response result value EOF . response may contain final non-zero data member. Parameters - job string Active job handle previously returned startScan . - callback function optional callback parameter looks like:(response: ReadScanDataResponse) => void - response - Returns - Promise<ReadScanDataResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. scan() chrome.documentScan.scan( options: ScanOptions, callback?: function, ) Performs document scan returns Promise resolves ScanResults object. callback passed function, returned data passed instead. Parameters - options object containing scan parameters. - callback function optional callback parameter looks like:(result: ScanResults) => void - result - Returns - Promise<ScanResults> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setOptions() chrome.documentScan.setOptions( scannerHandle: string, options: OptionSetting[], callback?: function, ) Sets options specified scanner returns Promise resolves SetOptionsResponse object containing result trying set every value order passed-in OptionSetting object. callback used, object passed instead. Parameters - scannerHandle string handle scanner set options on. value previously returned call openScanner . - options list OptionSetting objects applied scanner. - callback function optional callback parameter looks like:(response: SetOptionsResponse) => void - response - Returns - Promise<SetOptionsResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. startScan() chrome.documentScan.startScan( scannerHandle: string, options: StartScanOptions, callback?: function, ) Starts scan specified scanner returns Promise resolves StartScanResponse . callback used, object passed instead. call successful, response includes job handle used subsequent calls read scan data cancel scan. Parameters - scannerHandle string handle open scanner. value previously returned call openScanner . - options StartScanOptions object indicating options used scan. TheStartScanOptions.format property must match one entries returned scanner'sScannerInfo . - callback function optional callback parameter looks like:(response: StartScanResponse) => void - response - Returns - Promise<StartScanResponse> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/dom", "title": "chrome.dom | API | Chrome for Developers", "text": "chrome.dom Stay organized collections Save categorize content based preferences. Description Use chrome.dom API access special DOM APIs Extensions Availability Methods openOrClosedShadowRoot() chrome.dom.openOrClosedShadowRoot( element: HTMLElement, ) Gets open shadow root closed shadow root hosted specified element. element attach shadow root, return null. Except otherwise noted, content page licensed Creative Commons Attribution 4.0 License, code samples licensed Apache 2.0 License. details, see Google Developers Site Policies. Java registered trademark Oracle and/or affiliates. Last updated 2024-05-24 UTC. [[[\"Easy understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing information need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2024-05-24 UTC.\"],[],[]]"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/downloads", "title": "chrome.downloads | API | Chrome for Developers", "text": "Description Use chrome.downloads API programmatically initiate, monitor, manipulate, search downloads. Permissions downloads must declare \"downloads\" permission extension manifest use API. { \"name\": \"My extension\", ... \"permissions\": [ \"downloads\" ], } Examples find simple examples using chrome.downloads API examples/api/downloads directory. examples help viewing source code, see Samples. Types BooleanDelta Properties - current boolean optional - previous boolean optional DangerType file download's filename suspicious. url download's URL known malicious. content downloaded file known malicious. uncommon download's URL commonly downloaded could dangerous. host download came host known distribute malicious binaries likely dangerous. unwanted download potentially unwanted unsafe. E.g. could make changes browser computer settings. safe download presents known danger user's computer. accepted user accepted dangerous download. Enum \"file\" \"url\" \"content\" \"uncommon\" \"host\" \"unwanted\" \"safe\" \"accepted\" \"allowlistedByPolicy\" \"asyncScanning\" \"asyncLocalPasswordScanning\" \"passwordProtected\" \"blockedTooLarge\" \"sensitiveContentWarning\" \"sensitiveContentBlock\" \"deepScannedFailed\" \"deepScannedSafe\" \"deepScannedOpenedDangerous\" \"promptForScanning\" \"promptForLocalPasswordScanning\" \"accountCompromise\" \"blockedScanFailed\" DoubleDelta Properties - current number optional - previous number optional DownloadDelta Properties - canResume BooleanDelta optional change canResume , any. - danger StringDelta optional change danger , any. - endTime StringDelta optional change endTime , any. - error StringDelta optional change error , any. - exists BooleanDelta optional change exists , any. - fileSize DoubleDelta optional change fileSize , any. - filename StringDelta optional change filename , any. - finalUrl StringDelta optional Chrome 54+The change finalUrl , any. - id number id theDownloadItem changed. - mime StringDelta optional change mime , any. - paused BooleanDelta optional change paused , any. - startTime StringDelta optional change startTime , any. - state StringDelta optional change state , any. - totalBytes DoubleDelta optional change totalBytes , any. - url StringDelta optional change url , any. DownloadItem Properties - byExtensionId string optional identifier extension initiated download download initiated extension. change set. - byExtensionName string optional localized name extension initiated download download initiated extension. May change extension changes name user changes locale. - bytesReceived number Number bytes received far host, without considering file compression. - canResume boolean True download progress paused, else interrupted resumed starting interrupted. - danger Indication whether download thought safe known suspicious. - endTime string optional time download ended ISO 8601 format. May passed directly Date constructor: chrome.downloads.search({}, function(items){items.forEach(function(item){if (item.endTime) console.log(new Date(item.endTime))})}) - error InterruptReason optional download interrupted. Several kinds HTTP errors may grouped one errors beginning SERVER_ . Errors relating network begin withNETWORK_ , errors relating process writing file file system begin withFILE_ , interruptions initiated user begin withUSER_ . - estimatedEndTime string optional Estimated time download complete ISO 8601 format. May passed directly Date constructor: chrome.downloads.search({}, function(items){items.forEach(function(item){if (item.estimatedEndTime) console.log(new Date(item.estimatedEndTime))})}) - exists boolean Whether downloaded file still exists. information may date Chrome automatically watch file removal. Call search () order trigger check file existence. existence check completes, file deleted, anonChanged event fire. Note thatsearch () wait existence check finish returning, results fromsearch () may accurately reflect file system. Also,search () may called often necessary, check file existence frequently every 10 seconds. - fileSize number Number bytes whole file post-decompression, -1 unknown. - filename string Absolute local path. - finalUrl string Chrome 54+The absolute URL download made from, redirects. - id number identifier persistent across browser sessions. - incognito boolean False download recorded history, true recorded. - mime string file's MIME type. - paused boolean True download stopped reading data host, kept connection open. - referrer string Absolute URL. - startTime string time download began ISO 8601 format. May passed directly Date constructor: chrome.downloads.search({}, function(items){items.forEach(function(item){console.log(new Date(item.startTime))})}) - state Indicates whether download progressing, interrupted, complete. - totalBytes number Number bytes whole file, without considering file compression, -1 unknown. - url string absolute URL download initiated from, redirects. DownloadOptions Properties - body string optional Post body. - conflictAction FilenameConflictAction optional action take filename already exists. - filename string optional file path relative Downloads directory contain downloaded file, possibly containing subdirectories. Absolute paths, empty paths, paths containing back-references \"..\" cause error. onDeterminingFilename allows suggesting filename file's MIME type tentative filename determined. - headers HeaderNameValuePair[] optional Extra HTTP headers send request URL uses HTTP[s] protocol. header represented dictionary containing keys name eithervalue orbinaryValue , restricted allowed XMLHttpRequest. - method HttpMethod optional HTTP method use URL uses HTTP[S] protocol. - saveAs boolean optional Use file-chooser allow user select filename regardless whether filename set already exists. - url string URL download. DownloadQuery Properties - bytesReceived number optional Number bytes received far host, without considering file compression. - danger DangerType optional Indication whether download thought safe known suspicious. - endTime string optional time download ended ISO 8601 format. - endedAfter string optional Limits results DownloadItem ended given ms ISO 8601 format - endedBefore string optional Limits results DownloadItem ended given ms ISO 8601 format. - error InterruptReason optional download interrupted. - exists boolean optional Whether downloaded file exists; - fileSize number optional Number bytes whole file post-decompression, -1 unknown. - filename string optional Absolute local path. - filenameRegex string optional Limits results DownloadItem whosefilename matches given regular expression. - finalUrl string optional Chrome 54+The absolute URL download made from, redirects. - finalUrlRegex string optional Chrome 54+Limits results DownloadItem whosefinalUrl matches given regular expression. - id number optional id theDownloadItem query. - limit number optional maximum number matching DownloadItem returned. Defaults 1000. Set 0 order return matchingDownloadItem . Seesearch page results. - mime string optional file's MIME type. - orderBy string[] optional Set elements array DownloadItem properties order sort search results. example, settingorderBy=['startTime'] sorts theDownloadItem start time ascending order. specify descending order, prefix hyphen: '-startTime'. - paused boolean optional True download stopped reading data host, kept connection open. - query string[] optional array search terms limits results DownloadItem whosefilename orurl orfinalUrl contain search terms begin dash '-' none search terms begin dash. - startTime string optional time download began ISO 8601 format. - startedAfter string optional Limits results DownloadItem started given ms ISO 8601 format. - startedBefore string optional Limits results DownloadItem started given ms ISO 8601 format. - state State optional Indicates whether download progressing, interrupted, complete. - totalBytes number optional Number bytes whole file, without considering file compression, -1 unknown. - totalBytesGreater number optional Limits results DownloadItem whosetotalBytes greater given integer. - totalBytesLess number optional Limits results DownloadItem whosetotalBytes less given integer. - url string optional absolute URL download initiated from, redirects. - urlRegex string optional Limits results DownloadItem whoseurl matches given regular expression. FilenameConflictAction uniquify avoid duplication, filename changed include counter filename extension. overwrite existing file overwritten new file. prompt user prompted file chooser dialog. Enum \"uniquify\" \"overwrite\" \"prompt\" FilenameSuggestion Properties - conflictAction FilenameConflictAction optional action take filename already exists. - filename string DownloadItem 's new targetDownloadItem.filename , path relative user's default Downloads directory, possibly containing subdirectories. Absolute paths, empty paths, paths containing back-references \"..\" ignored.filename ignored anyonDeterminingFilename listeners registered extensions. GetFileIconOptions Properties - size number optional size returned icon. icon square dimensions size * size pixels. default largest size icon 32x32 pixels. supported sizes 16 32. error specify size. HeaderNameValuePair Properties - name string Name HTTP header. - value string Value HTTP header. HttpMethod Enum \"GET\" \"POST\" InterruptReason Enum \"FILE_FAILED\" \"FILE_ACCESS_DENIED\" \"FILE_NO_SPACE\" \"FILE_NAME_TOO_LONG\" \"FILE_TOO_LARGE\" \"FILE_VIRUS_INFECTED\" \"FILE_TRANSIENT_ERROR\" \"FILE_BLOCKED\" \"FILE_SECURITY_CHECK_FAILED\" \"FILE_TOO_SHORT\" \"FILE_HASH_MISMATCH\" \"FILE_SAME_AS_SOURCE\" \"NETWORK_FAILED\" \"NETWORK_TIMEOUT\" \"NETWORK_DISCONNECTED\" \"NETWORK_SERVER_DOWN\" \"NETWORK_INVALID_REQUEST\" \"SERVER_FAILED\" \"SERVER_NO_RANGE\" \"SERVER_BAD_CONTENT\" \"SERVER_UNAUTHORIZED\" \"SERVER_CERT_PROBLEM\" \"SERVER_FORBIDDEN\" \"SERVER_UNREACHABLE\" \"SERVER_CONTENT_LENGTH_MISMATCH\" \"SERVER_CROSS_ORIGIN_REDIRECT\" \"USER_CANCELED\" \"USER_SHUTDOWN\" \"CRASH\" State in_progress download currently receiving data server. interrupted error broke connection file host. complete download completed successfully. Enum \"in_progress\" \"interrupted\" \"complete\" StringDelta Properties - current string optional - previous string optional UiOptions Properties - enabled boolean Enable disable download UI. Methods acceptDanger() chrome.downloads.acceptDanger( downloadId: number, callback?: function, ) Prompt user accept dangerous download. called visible context (tab, window, page/browser action popup). automatically accept dangerous downloads. download accepted, onChanged event fire, otherwise nothing happen. data fetched temporary file either download dangerous danger accepted, temporary file renamed target filename, state changes 'complete', onChanged fires. Parameters - downloadId number identifier DownloadItem . - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. cancel() chrome.downloads.cancel( downloadId: number, callback?: function, ) Cancel download. callback run, download cancelled, completed, interrupted exist anymore. Parameters - downloadId number id download cancel. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. download() chrome.downloads.download( options: DownloadOptions, callback?: function, ) Download URL. URL uses HTTP[S] protocol, request include cookies currently set hostname. filename saveAs specified, Save dialog displayed, pre-populated specified filename . download started successfully, callback called new DownloadItem 's downloadId . error starting download, callback called downloadId=undefined runtime.lastError contain descriptive string. error strings guaranteed remain backwards compatible releases. Extensions must parse it. Parameters - options download how. - callback function optional callback parameter looks like:(downloadId: number) => void - downloadId number - Returns - Promise<number> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. erase() chrome.downloads.erase( query: DownloadQuery, callback?: function, ) Erase matching DownloadItem history without deleting downloaded file. onErased event fire DownloadItem matches query , callback called. Parameters - query - callback function optional callback parameter looks like:(erasedIds: number[]) => void - erasedIds number[] - Returns - Promise<number[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFileIcon() chrome.downloads.getFileIcon( downloadId: number, options?: GetFileIconOptions, callback?: function, ) Retrieve icon specified download. new downloads, file icons available onCreated event received. image returned function download progress may different image returned download complete. Icon retrieval done querying underlying operating system toolkit depending platform. icon returned therefore depend number factors including state download, platform, registered file types visual theme. file icon cannot determined, runtime.lastError contain error message. Parameters - downloadId number identifier download. - options GetFileIconOptions optional - callback function optional callback parameter looks like:(iconURL?: string) => void - iconURL string optional - Returns - Promise<string | undefined> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. open() chrome.downloads.open( downloadId: number, callback?: function, ) Opens downloaded file DownloadItem complete; otherwise returns error runtime.lastError . method requires \"downloads.open\" permission addition \"downloads\" permission. onChanged event fires item opened first time. method called response user gesture. Parameters - downloadId number identifier downloaded file. - callback function optional Chrome 123+The callback parameter looks like:() => void Returns - Promise<void> Chrome 123+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. pause() chrome.downloads.pause( downloadId: number, callback?: function, ) Pause download. request successful download paused state. Otherwise runtime.lastError contains error message. request fail download active. Parameters - downloadId number id download pause. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeFile() chrome.downloads.removeFile( downloadId: number, callback?: function, ) Remove downloaded file exists DownloadItem complete; otherwise return error runtime.lastError . Parameters - downloadId number - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. resume() chrome.downloads.resume( downloadId: number, callback?: function, ) Resume paused download. request successful download progress unpaused. Otherwise runtime.lastError contains error message. request fail download active. Parameters - downloadId number id download resume. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. search() chrome.downloads.search( query: DownloadQuery, callback?: function, ) Find DownloadItem . Set query empty object get DownloadItem . get specific DownloadItem , set id field. page large number items, set orderBy: ['-startTime'] , set limit number items per page, set startedAfter startTime last item last page. Parameters - query - callback function optional callback parameter looks like:(results: DownloadItem[]) => void - results - Returns - Promise<DownloadItem[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setShelfEnabled() chrome.downloads.setShelfEnabled( enabled: boolean, ) Use setUiOptions instead. Enable disable gray shelf bottom every window associated current browser profile. shelf disabled long least one extension disabled it. Enabling shelf least one extension disabled return error runtime.lastError . Requires \"downloads.shelf\" permission addition \"downloads\" permission. Parameters - enabled boolean setUiOptions() chrome.downloads.setUiOptions( options: UiOptions, callback?: function, ) Change download UI every window associated current browser profile. long least one extension set UiOptions.enabled false, download UI hidden. Setting UiOptions.enabled true least one extension disabled return error runtime.lastError . Requires \"downloads.ui\" permission addition \"downloads\" permission. Parameters - options Encapsulate change download UI. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. show() chrome.downloads.show( downloadId: number, ) Show downloaded file folder file manager. Parameters - downloadId number identifier downloaded file. showDefaultFolder() chrome.downloads.showDefaultFolder() Show default Downloads folder file manager. Events onChanged chrome.downloads.onChanged.addListener( callback: function, ) DownloadItem 's properties except bytesReceived estimatedEndTime changes, event fires downloadId object containing properties changed. Parameters - callback function callback parameter looks like:(downloadDelta: DownloadDelta) => void - downloadDelta - onCreated chrome.downloads.onCreated.addListener( callback: function, ) event fires DownloadItem object download begins. Parameters - callback function callback parameter looks like:(downloadItem: DownloadItem) => void - downloadItem - onDeterminingFilename chrome.downloads.onDeterminingFilename.addListener( callback: function, ) filename determination process, extensions given opportunity override target DownloadItem.filename . extension may register one listener event. listener must call suggest exactly once, either synchronously asynchronously. listener calls suggest asynchronously, must return true . listener neither calls suggest synchronously returns true , suggest called automatically. DownloadItem complete listeners called suggest . Listeners may call suggest without arguments order allow download use downloadItem.filename filename, pass suggestion object suggest order override target filename. one extension overrides filename, last extension installed whose listener passes suggestion object suggest wins. order avoid confusion regarding extension win, users install extensions may conflict. download initiated download target filename known MIME type tentative filename determined, pass filename download instead. Parameters - callback function callback parameter looks like:(downloadItem: DownloadItem, suggest: function) => void - downloadItem - suggest function suggest parameter looks like:(suggestion?: FilenameSuggestion) => void - suggestion FilenameSuggestion optional - - onErased chrome.downloads.onErased.addListener( callback: function, ) Fires downloadId download erased history. Parameters - callback function callback parameter looks like:(downloadId: number) => void - downloadId number -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/enterprise/deviceAttributes", "title": "chrome.enterprise.deviceAttributes | API | Chrome for Developers", "text": "Description Use chrome.enterprise.deviceAttributes API read device attributes. Note: API available extensions force-installed enterprise policy. Permissions enterprise.deviceAttributes Availability Methods getDeviceAnnotatedLocation() chrome.enterprise.deviceAttributes.getDeviceAnnotatedLocation( callback?: function, ) Fetches administrator-annotated Location. current user affiliated Annotated Location set administrator, returns empty string. Parameters - callback function optional callback parameter looks like:(annotatedLocation: string) => void - annotatedLocation string - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDeviceAssetId() chrome.enterprise.deviceAttributes.getDeviceAssetId( callback?: function, ) Fetches administrator-annotated Asset Id. current user affiliated Asset Id set administrator, returns empty string. Parameters - callback function optional callback parameter looks like:(assetId: string) => void - assetId string - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDeviceHostname() chrome.enterprise.deviceAttributes.getDeviceHostname( callback?: function, ) Fetches device's hostname set DeviceHostnameTemplate policy. current user affiliated hostname set enterprise policy, returns empty string. Parameters - callback function optional callback parameter looks like:(hostname: string) => void - hostname string - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDeviceSerialNumber() chrome.enterprise.deviceAttributes.getDeviceSerialNumber( callback?: function, ) Fetches device's serial number. Please note purpose API administrate device (e.g. generating Certificate Sign Requests device-wide certificates). API may used tracking devices without consent device's administrator. current user affiliated, returns empty string. Parameters - callback function optional callback parameter looks like:(serialNumber: string) => void - serialNumber string - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDirectoryDeviceId() chrome.enterprise.deviceAttributes.getDirectoryDeviceId( callback?: function, ) Fetches value device identifier directory API, generated server identifies cloud record device querying cloud directory API. current user affiliated, returns empty string. Parameters - callback function optional callback parameter looks like:(deviceId: string) => void - deviceId string - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/enterprise/hardwarePlatform", "title": "chrome.enterprise.hardwarePlatform | API | Chrome for Developers", "text": "Description Use chrome.enterprise.hardwarePlatform API get manufacturer model hardware platform browser runs. Note: API available extensions installed enterprise policy. Permissions enterprise.hardwarePlatform Availability Types HardwarePlatformInfo Properties - manufacturer string - model string Methods getHardwarePlatformInfo() chrome.enterprise.hardwarePlatform.getHardwarePlatformInfo( callback?: function, ) Obtains manufacturer model hardware platform and, extension authorized, returns via callback . Parameters - callback function optional callback parameter looks like:(info: HardwarePlatformInfo) => void - info - Returns - Promise<HardwarePlatformInfo> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/enterprise/networkingAttributes", "title": "chrome.enterprise.networkingAttributes | API | Chrome for Developers", "text": "Description Use chrome.enterprise.networkingAttributes API read information current network. Note: API available extensions force-installed enterprise policy. Permissions enterprise.networkingAttributes Availability Types NetworkDetails Properties - ipv4 string optional device's local IPv4 address (undefined configured). - ipv6 string optional device's local IPv6 address (undefined configured). - macAddress string device's MAC address. Methods getNetworkDetails() chrome.enterprise.networkingAttributes.getNetworkDetails( callback?: function, ) Retrieves network details device's default network. user affiliated device connected network, runtime.lastError set failure reason. Parameters - callback function optional callback parameter looks like:(networkAddresses: NetworkDetails) => void - networkAddresses - Returns - Promise<NetworkDetails> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/enterprise/platformKeys", "title": "chrome.enterprise.platformKeys | API | Chrome for Developers", "text": "Description Use chrome.enterprise.platformKeys API generate keys install certificates keys. certificates managed platform used TLS authentication, network access extension chrome.platformKeys. Permissions enterprise.platformKeys Availability Concepts usage Typical usage API enroll client certificate follows steps: Get available tokens using enterprise.platformKeys.getTokens() .Find Token id equal to\"user\" . Use Token subsequently.Generate key pair using generateKey() Token method (defined SubtleCrypto). return handle key.Export public key using exportKey() Token method (defined SubtleCrypto).Create signature certification request's data using sign() Token method (defined SubtleCrypto).Complete certification request send certification authority. certificate received, import using [ enterprise.platformKeys.importCertificate() `[3] Here's example shows major API interaction except building sending certification request: function getUserToken(callback) { chrome.enterprise.platformKeys.getTokens(function(tokens) { (var = 0; < tokens.length; i++) { (tokens[i].id == \"user\") { callback(tokens[i]); return; } } callback(undefined); }); } function generateAndSign(userToken) { var data = new Uint8Array([0, 5, 1, 2, 3, 4, 5, 6]); var algorithm = { name: \"RSASSA-PKCS1-v1_5\", // RsaHashedKeyGenParams modulusLength: 2048, publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // Equivalent 65537 hash: { name: \"SHA-256\", } }; var cachedKeyPair; userToken.subtleCrypto.generateKey(algorithm, false, [\"sign\"]) .then(function(keyPair) { cachedKeyPair = keyPair; return userToken.subtleCrypto.exportKey(\"spki\", keyPair.publicKey); }, console.log.bind(console)) .then(function(publicKeySpki) { // Build Certification Request using public key. return userToken.subtleCrypto.sign( {name : \"RSASSA-PKCS1-v1_5\"}, cachedKeyPair.privateKey, data); }, console.log.bind(console)) .then(function(signature) { // Complete Certification Request |signature|. // Send request CA, calling back // onClientCertificateReceived. }, console.log.bind(console)); } function onClientCertificateReceived(userToken, certificate) { chrome.enterprise.platformKeys.importCertificate(userToken.id, certificate); } getUserToken(generateAndSign); Types Algorithm Type key generate. Enum \"RSA\" \"ECDSA\" ChallengeKeyOptions Properties - challenge ArrayBuffer challenge emitted Verified Access Web API. - registerKey RegisterKeyOptions optional present, registers challenged key specified scope 's token. key associated certificate used like signing key. Subsequent calls function generate new Enterprise Key specifiedscope . - scope Enterprise Key challenge. RegisterKeyOptions Properties - algorithm algorithm registered key use. Scope Whether use Enterprise User Key Enterprise Machine Key. Enum \"USER\" \"MACHINE\" Token Properties - id string Uniquely identifies Token .Static IDs \"user\" and\"system\" , referring platform's user-specific system-wide hardware token, respectively. tokens (with identifiers) might returned byenterprise.platformKeys.getTokens . - softwareBackedSubtleCrypto SubtleCrypto Chrome 97+Implements WebCrypto's SubtleCrypto interface. cryptographic operations, including key generation, software-backed. Protection keys, thus implementation non-extractable property, done software, keys less protected hardware-backed keys. non-extractable keys generated. supported key types RSASSA-PKCS1-V1_5 RSA-OAEP (on Chrome versions 134+) modulusLength 2048. RSASSA-PKCS1-V1_5 key used signing data once, unless extension allowlisted KeyPermissions policy, case key used indefinitely. RSA-OAEP keys supported since Chrome version 134 used extensions allowlisted policy unwrap keys.Keys generated specific Token cannot used Tokens, used withwindow.crypto.subtle . Equally,Key objects created withwindow.crypto.subtle cannot used interface. - subtleCrypto SubtleCrypto Implements WebCrypto's SubtleCrypto interface. cryptographic operations, including key generation, hardware-backed. non-extractable keys generated. supported key types RSASSA-PKCS1-V1_5 RSA-OAEP (on Chrome versions 134+) modulusLength 2048 ECDSA withnamedCurve P-256. RSASSA-PKCS1-V1_5 ECDSA key used signing data once, unless extension allowlisted KeyPermissions policy, case key used indefinitely. RSA-OAEP keys supported since Chrome version 134 used extensions allowlisted policy unwrap keys.Keys generated specific Token cannot used Tokens, used withwindow.crypto.subtle . Equally,Key objects created withwindow.crypto.subtle cannot used interface. Methods challengeKey() chrome.enterprise.platformKeys.challengeKey( options: ChallengeKeyOptions, callback?: function, ) Similar challengeMachineKey challengeUserKey , allows specifying algorithm registered key. Challenges hardware-backed Enterprise Machine Key emits response part remote attestation protocol. useful ChromeOS conjunction Verified Access Web API issues challenges verifies responses. successful verification Verified Access Web API strong signal current device legitimate ChromeOS device, current device managed domain specified verification, current signed-in user managed domain specified verification, current device state complies enterprise device policy. example, policy may specify device must developer mode. device identity emitted verification tightly bound hardware current device. \"user\" Scope specified, identity also tightly bound current signed-in user. function highly restricted fail current device managed, current user managed, operation explicitly enabled caller enterprise device policy. challenged key reside \"system\" \"user\" token accessible API. Parameters - options Object containing fields defined ChallengeKeyOptions . - callback function optional callback parameter looks like:(response: ArrayBuffer) => void - response ArrayBuffer challenge response. - Returns - Promise<ArrayBuffer> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. challengeMachineKey() chrome.enterprise.platformKeys.challengeMachineKey( challenge: ArrayBuffer, registerKey?: boolean, callback?: function, ) Use challengeKey instead. Challenges hardware-backed Enterprise Machine Key emits response part remote attestation protocol. useful ChromeOS conjunction Verified Access Web API issues challenges verifies responses. successful verification Verified Access Web API strong signal following: * current device legitimate ChromeOS device. * current device managed domain specified verification. * current signed-in user managed domain specified verification. * current device state complies enterprise device policy. example, policy may specify device must developer mode. * device identity emitted verification tightly bound hardware current device. function highly restricted fail current device managed, current user managed, operation explicitly enabled caller enterprise device policy. Enterprise Machine Key reside \"system\" token accessible API. Parameters - challenge ArrayBuffer challenge emitted Verified Access Web API. - registerKey boolean optional Chrome 59+If set, current Enterprise Machine Key registered \"system\" token relinquishes Enterprise Machine Key role. key associated certificate used like signing key. key 2048-bit RSA. Subsequent calls function generate new Enterprise Machine Key. - callback function optional callback parameter looks like:(response: ArrayBuffer) => void - response ArrayBuffer challenge response. - Returns - Promise<ArrayBuffer> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. challengeUserKey() chrome.enterprise.platformKeys.challengeUserKey( challenge: ArrayBuffer, registerKey: boolean, callback?: function, ) Use challengeKey instead. Challenges hardware-backed Enterprise User Key emits response part remote attestation protocol. useful ChromeOS conjunction Verified Access Web API issues challenges verifies responses. successful verification Verified Access Web API strong signal following: * current device legitimate ChromeOS device. * current device managed domain specified verification. * current signed-in user managed domain specified verification. * current device state complies enterprise user policy. example, policy may specify device must developer mode. * public key emitted verification tightly bound hardware current device current signed-in user. function highly restricted fail current device managed, current user managed, operation explicitly enabled caller enterprise user policy. Enterprise User Key reside \"user\" token accessible API. Parameters - challenge ArrayBuffer challenge emitted Verified Access Web API. - registerKey boolean set, current Enterprise User Key registered \"user\" token relinquishes Enterprise User Key role. key associated certificate used like signing key. key 2048-bit RSA. Subsequent calls function generate new Enterprise User Key. - callback function optional callback parameter looks like:(response: ArrayBuffer) => void - response ArrayBuffer challenge response. - Returns - Promise<ArrayBuffer> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCertificates() chrome.enterprise.platformKeys.getCertificates( tokenId: string, callback?: function, ) Returns list client certificates available given token. used check existence expiration client certificates usable certain authentication. Parameters - tokenId string id Token returned getTokens . - callback function optional callback parameter looks like:(certificates: ArrayBuffer[]) => void - certificates ArrayBuffer[] list certificates, DER encoding X.509 certificate. - Returns - Promise<ArrayBuffer[]> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getTokens() chrome.enterprise.platformKeys.getTokens( callback?: function, ) Returns available Tokens. regular user's session list always contain user's token id \"user\" . system-wide TPM token available, returned list also contain system-wide token id \"system\" . system-wide token sessions device (device sense e.g. Chromebook). Parameters Returns - Promise<Token[]> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. importCertificate() chrome.enterprise.platformKeys.importCertificate( tokenId: string, certificate: ArrayBuffer, callback?: function, ) Imports certificate given token certified key already stored token. successful certification request, function used store obtained certificate make available operating system browser authentication. Parameters - tokenId string id Token returned getTokens . - certificate ArrayBuffer DER encoding X.509 certificate. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCertificate() chrome.enterprise.platformKeys.removeCertificate( tokenId: string, certificate: ArrayBuffer, callback?: function, ) Removes certificate given token present. used remove obsolete certificates considered authentication clutter certificate choice. used free storage certificate store. Parameters - tokenId string id Token returned getTokens . - certificate ArrayBuffer DER encoding X.509 certificate. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 131+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/events", "title": "chrome.events | API | Chrome for Developers", "text": "Description chrome.events namespace contains common types used APIs dispatching events notify something interesting happens. Concepts usage Event object lets notified something interesting happens. Here's example using chrome.alarms.onAlarm event notified whenever alarm elapsed: chrome.alarms.onAlarm.addListener((alarm) => { appendToLog(`alarms.onAlarm -- name: ${alarm.name}, scheduledTime: ${alarm.scheduledTime}`); }); example shows, register notification using addListener() . argument addListener() always function define handle event, parameters function depend event handling. Checking documentation alarms.onAlarm , see function single parameter: alarms.Alarm object details elapsed alarm. Example APIs using Events: alarms, i18n, identity, runtime. chrome APIs do. Declarative Event Handlers declarative event handlers provide means define rules consisting declarative conditions actions. Conditions evaluated browser rather JavaScript engine reduces roundtrip latencies allows high efficiency. Declarative event handlers used example Declarative Content API. page describes underlying concepts declarative event handlers. Rules simplest possible rule consists one conditions one actions: const rule = { conditions: [ /* conditions */ ], actions: [ /* actions */ ] }; conditions fulfilled, actions executed. addition conditions actions may give rule identifier, simplifies unregistering previously registered rules, priority define precedences among rules. Priorities considered rules conflict need executed specific order. Actions executed descending order priority rules. const rule = { id: \"my rule\", // optional, generated set. priority: 100, // optional, defaults 100. conditions: [ /* conditions */ ], actions: [ /* actions */ ] }; Event objects Event objects may support rules. event objects call callback function events happen test whether registered rule least one fulfilled condition execute actions associated rule. Event objects supporting declarative API three relevant methods: events.Event.addRules() , events.Event.removeRules() , events.Event.getRules() . Add rules add rules call addRules() function event object. takes array rule instances first parameter callback function called completion. const rule_list = [rule1, rule2, ...]; addRules(rule_list, (details) => {...}); rules inserted successfully, details parameter contains array inserted rules appearing order passed rule_list optional parameters id priority filled generated values. rule invalid, example, contained invalid condition action, none rules added runtime.lastError variable set callback function called. rule rule_list must contain unique identifier already used another rule empty identifier. Remove rules remove rules call removeRules() function. accepts optional array rule identifiers first parameter callback function second parameter. const rule_ids = [\"id1\", \"id2\", ...]; removeRules(rule_ids, () => {...}); rule_ids array identifiers, rules identifiers listed array removed. rule_ids lists identifier, unknown, identifier silently ignored. rule_ids undefined , registered rules extension removed. callback() function called rules removed. Retrieve rules retrieve list registered rules, call getRules() function. accepts optional array rule identifiers semantics removeRules() callback function. const rule_ids = [\"id1\", \"id2\", ...]; getRules(rule_ids, (details) => {...}); details parameter passed callback() function refers array rules including filled optional parameters. Performance achieve maximum performance, keep following guidelines mind. Register unregister rules bulk. registration unregistration, Chrome needs update internal data structures. update expensive operation. const rule1 = {...}; const rule2 = {...}; chrome.declarativeWebRequest.onRequest.addRules([rule1]); chrome.declarativeWebRequest.onRequest.addRules([rule2]); const rule1 = {...}; const rule2 = {...}; chrome.declarativeWebRequest.onRequest.addRules([rule1, rule2]); Prefer substring matching regular expressions events.UrlFilter. Substring based matching extremely fast. const match = new chrome.declarativeWebRequest.RequestMatcher({ url: {urlMatches: \"example.com/[^?]*foo\" } }); const match = new chrome.declarativeWebRequest.RequestMatcher({ url: {hostSuffix: \"example.com\", pathContains: \"foo\"} }); many rules share actions, merge rules one. Rules trigger actions soon single condition fulfilled. speeds matching reduces memory consumption duplicate action sets. const condition1 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }); const condition2 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }); const rule1 = { conditions: [condition1], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; const rule2 = { conditions: [condition2], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; chrome.declarativeWebRequest.onRequest.addRules([rule1, rule2]); const condition1 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }); const condition2 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }); const rule = { conditions: [condition1, condition2], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; chrome.declarativeWebRequest.onRequest.addRules([rule]); Filtered events Filtered events mechanism allows listeners specify subset events interested in. listener uses filter invoked events pass filter, makes listening code declarative efficient. service worker need woken handle events care about. Filtered events intended allow transition manual filtering code. chrome.webNavigation.onCommitted.addListener((event) => { (hasHostSuffix(event.url, 'google.com') || hasHostSuffix(event.url, 'google.com.au')) { // ... } }); chrome.webNavigation.onCommitted.addListener((event) => { // ... }, {url: [{hostSuffix: 'google.com'}, {hostSuffix: 'google.com.au'}]}); Events support specific filters meaningful event. list filters event supports listed documentation event \"filters\" section. matching URLs (as example above), event filters support URL matching capabilities expressible events.UrlFilter , except scheme port matching. Types Event object allows addition removal listeners Chrome event. Properties - addListener void Registers event listener callback event. addListener function looks like:(callback: H) => {...} - callback H Called event occurs. parameters function depend type event. - - addRules void Registers rules handle events. addRules function looks like: [], callback?: function) => {...}(rules: Rule<anyany> - getRules void Returns currently registered rules. getRules function looks like:(ruleIdentifiers?: string[], callback: function) => {...} - ruleIdentifiers string[] optional array passed, rules identifiers contained array returned. - callback function callback parameter looks like: []) => void(rules: Rule<anyany> - rules Rule<anyany>[] Rules registered, optional parameters filled values. - - - hasListener void hasListener function looks like:(callback: H) => {...} - callback H Listener whose registration status shall tested. - returns boolean True callback registered event. - - hasListeners void hasListeners function looks like:() => {...} - returns boolean True event listeners registered event. - - removeListener void Deregisters event listener callback event. removeListener function looks like:(callback: H) => {...} - callback H Listener shall unregistered. - - removeRules void Unregisters currently registered rules. removeRules function looks like:(ruleIdentifiers?: string[], callback?: function) => {...} - ruleIdentifiers string[] optional array passed, rules identifiers contained array unregistered. - callback function optional callback parameter looks like:() => void - Rule Description declarative rule handling events. Properties - actions any[] List actions triggered one conditions fulfilled. - conditions any[] List conditions trigger actions. - id string optional Optional identifier allows referencing rule. - priority number optional Optional priority rule. Defaults 100. - tags string[] optional Tags used annotate rules perform operations sets rules. UrlFilter Filters URLs various criteria. See event filtering. criteria case sensitive. Properties - cidrBlocks string[] optional Chrome 123+Matches host part URL IP address contained CIDR blocks specified array. - hostContains string optional Matches host name URL contains specified string. test whether host name component prefix 'foo', use hostContains: '.foo'. matches 'www.foobar.com' 'foo.com', implicit dot added beginning host name. Similarly, hostContains used match component suffix ('foo.') exactly match components ('.foo.'). Suffix- exact-matching last components need done separately using hostSuffix, implicit dot added end host name. - hostEquals string optional Matches host name URL equal specified string. - hostPrefix string optional Matches host name URL starts specified string. - hostSuffix string optional Matches host name URL ends specified string. - originAndPathMatches string optional Matches URL without query segment fragment identifier matches specified regular expression. Port numbers stripped URL match default port number. regular expressions use RE2 syntax. - pathContains string optional Matches path segment URL contains specified string. - pathEquals string optional Matches path segment URL equal specified string. - pathPrefix string optional Matches path segment URL starts specified string. - pathSuffix string optional Matches path segment URL ends specified string. - ports (number | number[])[] optional Matches port URL contained specified port lists. example [80, 443, [1000, 1200]] matches requests port 80, 443 range 1000-1200. - queryContains string optional Matches query segment URL contains specified string. - queryEquals string optional Matches query segment URL equal specified string. - queryPrefix string optional Matches query segment URL starts specified string. - querySuffix string optional Matches query segment URL ends specified string. - schemes string[] optional Matches scheme URL equal schemes specified array. - urlContains string optional Matches URL (without fragment identifier) contains specified string. Port numbers stripped URL match default port number. - urlEquals string optional Matches URL (without fragment identifier) equal specified string. Port numbers stripped URL match default port number. - urlMatches string optional Matches URL (without fragment identifier) matches specified regular expression. Port numbers stripped URL match default port number. regular expressions use RE2 syntax. - urlPrefix string optional Matches URL (without fragment identifier) starts specified string. Port numbers stripped URL match default port number. - urlSuffix string optional Matches URL (without fragment identifier) ends specified string. Port numbers stripped URL match default port number."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extension", "title": "chrome.extension | API | Chrome for Developers", "text": "Description chrome.extension API utilities used extension page. includes support exchanging messages extension content scripts extensions, described detail Message Passing. Types ViewType type extension view. Enum \"tab\" \"popup\" Properties inIncognitoContext True content scripts running inside incognito tabs, extension pages running inside incognito process. latter applies extensions 'split' incognito_behavior. Type boolean Methods getBackgroundPage() chrome.extension.getBackgroundPage() Returns JavaScript 'window' object background page running inside current extension. Returns null extension background page. Returns - Window | undefined getViews() chrome.extension.getViews( fetchProperties?: object, ) Returns array JavaScript 'window' objects pages running inside current extension. Parameters - fetchProperties object optional - tabId number optional Chrome 54+Find view according tab id. field omitted, returns views. - type ViewType optional type view get. omitted, returns views (including background pages tabs). - windowId number optional window restrict search to. omitted, returns views. - Returns - Window[] Array global objects isAllowedFileSchemeAccess() chrome.extension.isAllowedFileSchemeAccess( callback?: function, ) Retrieves state extension's access 'file://' scheme. corresponds user-controlled per-extension 'Allow access File URLs' setting accessible via chrome://extensions page. Parameters - callback function optional callback parameter looks like:(isAllowedAccess: boolean) => void - isAllowedAccess boolean True extension access 'file://' scheme, false otherwise. - Returns - Promise<boolean> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isAllowedIncognitoAccess() chrome.extension.isAllowedIncognitoAccess( callback?: function, ) Retrieves state extension's access Incognito-mode. corresponds user-controlled per-extension 'Allowed Incognito' setting accessible via chrome://extensions page. Parameters - callback function optional callback parameter looks like:(isAllowedAccess: boolean) => void - isAllowedAccess boolean True extension access Incognito mode, false otherwise. - Returns - Promise<boolean> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUpdateUrlData() chrome.extension.setUpdateUrlData( data: string, ) Sets value ap CGI parameter used extension's update URL. value ignored extensions hosted Chrome Extension Gallery. Parameters - data string"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extensionTypes", "title": "chrome.extensionTypes | API | Chrome for Developers", "text": "Description chrome.extensionTypes API contains type declarations Chrome extensions. Types Enum \"author\" \"user\" DeleteInjectionDetails Details CSS remove. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies CSS removed frames current page. default, it'sfalse removed top frame. Iftrue andframeId set, code removed selected frame child frames. - code string optional CSS code remove. - cssOrigin CSSOrigin optional origin CSS remove. Defaults \"author\" . - file string optional CSS file remove. - frameId number optional frame CSS removed. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also removed about:blank about:srcdoc frames extension access parent document. default false . DocumentLifecycle document lifecycle frame. Enum \"prerender\" \"active\" \"cached\" \"pending_deletion\" ExecutionWorld JavaScript world script execute within. either isolated world unique extension, main world DOM shared page's JavaScript, user scripts world available scripts registered User Scripts API. Enum \"ISOLATED\" \"MAIN\" \"USER_SCRIPT\" FrameType type frame. Enum \"outermost_frame\" \"fenced_frame\" \"sub_frame\" ImageDetails Details format quality image. Properties - format ImageFormat optional format resulting image. Default \"jpeg\" . - quality number optional format \"jpeg\" , controls quality resulting image. value ignored PNG images. quality decreased, resulting image visual artifacts, number bytes needed store decrease. ImageFormat format image. Enum \"jpeg\" \"png\" InjectDetails Details script CSS inject. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies JavaScript CSS injected frames current page. default, it'sfalse injected top frame. Iftrue andframeId set, code inserted selected frame child frames. - code string optional JavaScript CSS code inject. Warning: careful using code parameter. Incorrect use may open extension cross site scripting attacks - cssOrigin CSSOrigin optional Chrome 66+The origin CSS inject. may specified CSS, JavaScript. Defaults \"author\" . - file string optional JavaScript CSS file inject. - frameId number optional Chrome 50+The frame script CSS injected. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also injected about:blank about:srcdoc frames extension access parent document. Code cannot inserted top-level about:-frames. default false . - runAt RunAt optional soonest JavaScript CSS injected tab. Defaults \"document_idle\". RunAt soonest JavaScript CSS injected tab. Enum \"document_start\" \"document_end\" \"document_idle\" Script injected files css, DOM constructed script run. Script injected immediately DOM complete, subresources like images frames loaded. browser chooses time inject script \"document_end\" immediately window.onload event fires. exact moment injection depends complex document long taking load, optimized page load speed. Content scripts running \"document_idle\" need listen window.onload event; guaranteed run DOM completes. script definitely needs run window.onload , extension check onload already fired using document.readyState property."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extensionTypes", "title": "chrome.extensionTypes | API | Chrome for Developers", "text": "Description chrome.extensionTypes API contains type declarations Chrome extensions. Types Enum \"author\" \"user\" DeleteInjectionDetails Details CSS remove. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies CSS removed frames current page. default, it'sfalse removed top frame. Iftrue andframeId set, code removed selected frame child frames. - code string optional CSS code remove. - cssOrigin CSSOrigin optional origin CSS remove. Defaults \"author\" . - file string optional CSS file remove. - frameId number optional frame CSS removed. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also removed about:blank about:srcdoc frames extension access parent document. default false . DocumentLifecycle document lifecycle frame. Enum \"prerender\" \"active\" \"cached\" \"pending_deletion\" ExecutionWorld JavaScript world script execute within. either isolated world unique extension, main world DOM shared page's JavaScript, user scripts world available scripts registered User Scripts API. Enum \"ISOLATED\" \"MAIN\" \"USER_SCRIPT\" FrameType type frame. Enum \"outermost_frame\" \"fenced_frame\" \"sub_frame\" ImageDetails Details format quality image. Properties - format ImageFormat optional format resulting image. Default \"jpeg\" . - quality number optional format \"jpeg\" , controls quality resulting image. value ignored PNG images. quality decreased, resulting image visual artifacts, number bytes needed store decrease. ImageFormat format image. Enum \"jpeg\" \"png\" InjectDetails Details script CSS inject. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies JavaScript CSS injected frames current page. default, it'sfalse injected top frame. Iftrue andframeId set, code inserted selected frame child frames. - code string optional JavaScript CSS code inject. Warning: careful using code parameter. Incorrect use may open extension cross site scripting attacks - cssOrigin CSSOrigin optional Chrome 66+The origin CSS inject. may specified CSS, JavaScript. Defaults \"author\" . - file string optional JavaScript CSS file inject. - frameId number optional Chrome 50+The frame script CSS injected. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also injected about:blank about:srcdoc frames extension access parent document. Code cannot inserted top-level about:-frames. default false . - runAt RunAt optional soonest JavaScript CSS injected tab. Defaults \"document_idle\". RunAt soonest JavaScript CSS injected tab. Enum \"document_start\" \"document_end\" \"document_idle\" Script injected files css, DOM constructed script run. Script injected immediately DOM complete, subresources like images frames loaded. browser chooses time inject script \"document_end\" immediately window.onload event fires. exact moment injection depends complex document long taking load, optimized page load speed. Content scripts running \"document_idle\" need listen window.onload event; guaranteed run DOM completes. script definitely needs run window.onload , extension check onload already fired using document.readyState property."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/fileBrowserHandler", "title": "chrome.fileBrowserHandler | API | Chrome for Developers", "text": "Description Use chrome.fileBrowserHandler API extend Chrome OS file browser. example, use API enable users upload files website. Concepts usage ChromeOS file browser comes user either presses Alt+Shift+M connects external storage device, SD card, USB key, external drive, digital camera. Besides showing files external devices, file browser also display files user previously saved system. user selects one files, file browser adds buttons representing valid handlers files. example, following screenshot, selecting file \".png\" suffix results \"Save Gallery\" button user click. Permissions fileBrowserHandler must declare \"fileBrowserHandler\" permission extension manifest. Availability must use \"file_browser_handlers\" field register extension handler least one file type. also provide 16 16 icon displayed button. example: { \"name\": \"My extension\", ... \"file_browser_handlers\": [ { \"id\": \"upload\", \"default_title\": \"Save Gallery\", // button display \"file_filters\": [ \"filesystem:*.jpg\", // match files, use \"filesystem:*.*\" \"filesystem:*.jpeg\", \"filesystem:*.png\" ] } ], \"permissions\" : [ \"fileBrowserHandler\" ], \"icons\": { \"16\": \"icon16.png\", \"48\": \"icon48.png\", \"128\": \"icon128.png\" }, ... } Implement file browser handler use API, must implement function handles onExecute event chrome.fileBrowserHandler . function called whenever user clicks button represents file browser handler. function, use File System API get access file contents. example: chrome.fileBrowserHandler.onExecute.addListener(async (id, details) => { (id !== 'upload') { return; // check multiple file_browser_handlers } (const entry detail.entries) { // FileSystemFileEntry Promise API, wrap one const file = await new Promise((resolve, reject) => { entry.file(resolve, reject); }); const buffer = await file.arrayBuffer(); // something buffer } }); event handler passed two arguments: id - id value manifest file. extension implements multiple handlers, check ID value see handler triggered. details - object describing event. get file files user selected entries field object, array ofFileSystemFileEntry objects. Types FileHandlerExecuteEventDetails Event details payload fileBrowserHandler.onExecute event. Properties - entries any[] Array Entry instances representing files targets action (selected ChromeOS file browser). - tab_id number optional ID tab raised event. Tab IDs unique within browser session. Events onExecute chrome.fileBrowserHandler.onExecute.addListener( callback: function, ) Fired file system action executed ChromeOS file browser. Parameters - callback function callback parameter looks like:(id: string, details: FileHandlerExecuteEventDetails) => void - id string - details -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/fileSystemProvider", "title": "chrome.fileSystemProvider | API | Chrome for Developers", "text": "Description Use chrome.fileSystemProvider API create file systems, accessible file manager Chrome OS. Permissions fileSystemProvider Availability must declare \"fileSystemProvider\" permission section extension manifest use File System Provider API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"fileSystemProvider\" ], ... \"file_system_provider_capabilities\": { \"configurable\": true, \"watchable\": false, \"multiple_mounts\": true, \"source\": \"network\" }, ... } file_system_provider section must declared follows: configurable (boolean) - optional- Whether configuring via onConfigureRequested supported. default: false. multiple_mounts (boolean) - optional- Whether multiple (more one) mounted file systems supported. default: false. watchable (boolean) - optional- Whether setting watchers notifying changes supported. default: false. source (enum \"file\", \"device\", \"network\") - required- Source data mounted file systems. Files app uses information order render related UI elements appropriately. example, configurable set true, menu item configuring volumes rendered. Similarly, multiple_mounts set true , Files app allow add one mount points UI. watchable false , refresh button rendered. Note, possible add support watchers, changes file system reflected immediately automatically. Overview File System Provider API allows extensions support virtual file systems, available file manager ChromeOS. Use cases include decompressing archives accessing files cloud service Drive. Mounting file systems Providing extensions either provide file system contents external source (such remote server USB device), using local file (such archive) input. order write file systems file handlers (source \"file\" ) provider must packaged app, onLaunched event available extensions. source network device, file system mounted onMountRequested event called. | Source file system data | Entry point | |---|---| \"file\" | Available packaged apps only. | \"device\" \"network\" | onMountRequested | Configuring file systems Provided file systems mounted configured via onConfigureRequested event. especially useful file systems provide contents via network order set proper credentials. Handling event optional. Life cycle Provided file systems mounted remembered Chrome remounted automatically reboot restart. Hence, file system mounted providing extension, stay either extension unloaded, extension calls unmount method. Types AbortRequestedOptions Properties - fileSystemId string identifier file system related operation. - operationRequestId number ID request aborted. - requestId number unique identifier request. Action Properties - id string identifier action. string CommonActionId common actions. - title string optional title action. may ignored common actions. AddWatcherRequestedOptions Properties - entryPath string path entry observed. - fileSystemId string identifier file system related operation. - recursive boolean Whether observing include child entries recursively. true directories only. - requestId number unique identifier request. Change Properties - changeType type change happened entry. - cloudFileInfo CloudFileInfo optional Chrome 125+Information relating file backed cloud file system. - entryPath string path changed entry. ChangeType Type change detected observed directory. Enum \"CHANGED\" \"DELETED\" CloseFileRequestedOptions Properties - fileSystemId string identifier file system related operation. - openRequestId number request ID used open file. - requestId number unique identifier request. CloudFileInfo Properties - versionTag string optional tag represents version file. CloudIdentifier Properties - id string provider's identifier given file/directory. - providerName string Identifier cloud storage provider (e.g. 'drive.google.com'). CommonActionId List common actions. \"SHARE\" sharing files others. \"SAVE_FOR_OFFLINE\" pinning (saving offline access). \"OFFLINE_NOT_NECESSARY\" notifying file need stored offline access anymore. Used onGetActionsRequested onExecuteActionRequested . Enum \"SAVE_FOR_OFFLINE\" \"OFFLINE_NOT_NECESSARY\" \"SHARE\" ConfigureRequestedOptions Properties - fileSystemId string identifier file system configured. - requestId number unique identifier request. CopyEntryRequestedOptions Properties - fileSystemId string identifier file system related operation. - requestId number unique identifier request. - sourcePath string source path entry copied. - targetPath string destination path copy operation. CreateDirectoryRequestedOptions Properties - directoryPath string path directory created. - fileSystemId string identifier file system related operation. - recursive boolean Whether operation recursive (for directories only). - requestId number unique identifier request. CreateFileRequestedOptions Properties - filePath string path file created. - fileSystemId string identifier file system related operation. - requestId number unique identifier request. DeleteEntryRequestedOptions Properties - entryPath string path entry deleted. - fileSystemId string identifier file system related operation. - recursive boolean Whether operation recursive (for directories only). - requestId number unique identifier request. EntryMetadata Properties - cloudFileInfo CloudFileInfo optional Chrome 125+Information identifies specific file underlying cloud file system. Must provided requested options file backed cloud storage. - cloudIdentifier CloudIdentifier optional Chrome 117+Cloud storage representation entry. Must provided requested options file backed cloud storage. local files backed cloud storage, undefined requested. - isDirectory boolean optional True directory. Must provided requested options . - mimeType string optional Mime type entry. Always optional, provided requested options . - modificationTime Date optional last modified time entry. Must provided requested options . - name string optional Name entry (not full path name). Must contain '/'. root must empty. Must provided requested options . - size number optional File size bytes. Must provided requested options . - thumbnail string optional Thumbnail image data URI either PNG, JPEG WEBP format, 32 KB size. Optional, provided explicitly requested onGetMetadataRequested event. ExecuteActionRequestedOptions Properties - actionId string identifier action executed. - entryPaths string[] Chrome 47+The set paths entries used action. - fileSystemId string identifier file system related operation. - requestId number unique identifier request. FileSystemInfo Properties - displayName string human-readable name file system. - fileSystemId string identifier file system. - openedFiles List currently opened files. - openedFilesLimit number maximum number files opened once. 0, limited. - supportsNotifyTag boolean optional Chrome 45+Whether file system supports tag field observing directories. - watchers Watcher[] Chrome 45+List watchers. - writable boolean Whether file system supports operations may change contents file system (such creating, deleting writing files). GetActionsRequestedOptions Properties - entryPaths string[] Chrome 47+List paths entries list actions. - fileSystemId string identifier file system related operation. - requestId number unique identifier request. GetMetadataRequestedOptions Properties - cloudFileInfo boolean Chrome 125+Set true ifcloudFileInfo value requested. - cloudIdentifier boolean Chrome 117+Set true ifcloudIdentifier value requested. - entryPath string path entry fetch metadata about. - fileSystemId string identifier file system related operation. - isDirectory boolean Chrome 49+Set true ifis_directory value requested. - mimeType boolean Chrome 49+Set true ifmimeType value requested. - modificationTime boolean Chrome 49+Set true ifmodificationTime value requested. - name boolean Chrome 49+Set true ifname value requested. - requestId number unique identifier request. - size boolean Chrome 49+Set true ifsize value requested. - thumbnail boolean Set true ifthumbnail value requested. MountOptions Properties - displayName string human-readable name file system. - fileSystemId string string indentifier file system. Must unique per extension. - openedFilesLimit number optional maximum number files opened once. specified, 0, limited. - persistent boolean optional Chrome 64+Whether framework resume file system next sign-in session. True default. - supportsNotifyTag boolean optional Chrome 45+Whether file system supports tag field observed directories. - writable boolean optional Whether file system supports operations may change contents file system (such creating, deleting writing files). MoveEntryRequestedOptions Properties - fileSystemId string identifier file system related operation. - requestId number unique identifier request. - sourcePath string source path entry moved new place. - targetPath string destination path copy operation. NotifyOptions Properties - changeType type change happened observed entry. DELETED, observed entry automatically removed list observed entries. - changes Change[] optional List changes entries within observed directory (including entry itself) - fileSystemId string identifier file system related change. - observedPath string path observed entry. - recursive boolean Mode observed entry. - tag string optional Tag notification. Required file system mounted supportsNotifyTag option. Note, flag necessary provide notifications changes changed even system shutdown. OpenedFile Properties - filePath string path opened file. - mode Whether file opened reading writing. - openRequestId number request ID used consecutive read/write close requests. OpenFileMode Mode opening file. Used onOpenFileRequested . Enum \"READ\" \"WRITE\" OpenFileRequestedOptions Properties - filePath string path file opened. - fileSystemId string identifier file system related operation. - mode Whether file used reading writing. - requestId number request ID used consecutive read/write close requests. ProviderError Error codes used providing extensions response requests well case errors calling methods API. success, \"OK\" must used. Enum \"OK\" \"FAILED\" \"IN_USE\" \"EXISTS\" \"NOT_FOUND\" \"ACCESS_DENIED\" \"TOO_MANY_OPENED\" \"NO_MEMORY\" \"NO_SPACE\" \"NOT_A_DIRECTORY\" \"INVALID_OPERATION\" \"SECURITY\" \"ABORT\" \"NOT_A_FILE\" \"NOT_EMPTY\" \"INVALID_URL\" \"IO\" ReadDirectoryRequestedOptions Properties - directoryPath string path directory contents requested. - fileSystemId string identifier file system related operation. - isDirectory boolean Chrome 49+Set true ifis_directory value requested. - mimeType boolean Chrome 49+Set true ifmimeType value requested. - modificationTime boolean Chrome 49+Set true ifmodificationTime value requested. - name boolean Chrome 49+Set true ifname value requested. - requestId number unique identifier request. - size boolean Chrome 49+Set true ifsize value requested. - thumbnail boolean Chrome 49+Set true ifthumbnail value requested. ReadFileRequestedOptions Properties - fileSystemId string identifier file system related operation. - length number Number bytes returned. - offset number Position file (in bytes) start reading from. - openRequestId number request ID used open file. - requestId number unique identifier request. RemoveWatcherRequestedOptions Properties - entryPath string path watched entry. - fileSystemId string identifier file system related operation. - recursive boolean Mode watcher. - requestId number unique identifier request. TruncateRequestedOptions Properties - filePath string path file truncated. - fileSystemId string identifier file system related operation. - length number Number bytes retained operation completes. - requestId number unique identifier request. UnmountOptions Properties - fileSystemId string identifier file system unmounted. UnmountRequestedOptions Properties - fileSystemId string identifier file system unmounted. - requestId number unique identifier request. Watcher Properties - entryPath string path entry observed. - lastTag string optional Tag used last notification watcher. - recursive boolean Whether watching include child entries recursively. true directories only. WriteFileRequestedOptions Properties - data ArrayBuffer Buffer bytes written file. - fileSystemId string identifier file system related operation. - offset number Position file (in bytes) start writing bytes from. - openRequestId number request ID used open file. - requestId number unique identifier request. Methods get() chrome.fileSystemProvider.get( fileSystemId: string, callback?: function, ) Returns information file system passed fileSystemId . Parameters - fileSystemId string - callback function optional callback parameter looks like:(fileSystem: FileSystemInfo) => void - fileSystem - Returns - Promise<FileSystemInfo> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.fileSystemProvider.getAll( callback?: function, ) Returns file systems mounted extension. Parameters - callback function optional callback parameter looks like:(fileSystems: FileSystemInfo[]) => void - fileSystems - Returns - Promise<FileSystemInfo[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. mount() chrome.fileSystemProvider.mount( options: MountOptions, callback?: function, ) Mounts file system given fileSystemId displayName . displayName shown left panel Files app. displayName contain characters including '/', cannot empty string. displayName must descriptive unique. fileSystemId must empty string. Depending type file system mounted, source option must set appropriately. case error, runtime.lastError set corresponding error code. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. notify() chrome.fileSystemProvider.notify( options: NotifyOptions, callback?: function, ) Notifies changes watched directory observedPath recursive mode. file system mounted supportsNotifyTag , tag must provided, changes since last notification always reported, even system shutdown. last tag obtained getAll . use, file_system_provider.notify manifest option must set true. Value tag string unique per call, possible identify last registered notification. Eg. providing extension starts reboot, last registered notification's tag equal \"123\", call notify changes happened since change tagged \"123\". cannot empty string. providers able provide tag, file system changelog, tag eg. change number, revision number. Note parent directory removed, descendant entries also removed, watched, API must notified fact. Also, directory renamed, descendant entries fact removed, entry original paths anymore. case error, runtime.lastError set corresponding error code. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unmount() chrome.fileSystemProvider.unmount( options: UnmountOptions, callback?: function, ) Unmounts file system given fileSystemId . must called onUnmountRequested invoked. Also, providing extension decide perform unmounting requested (eg. case lost connection, file error). case error, runtime.lastError set corresponding error code. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onAbortRequested chrome.fileSystemProvider.onAbortRequested.addListener( callback: function, ) Raised aborting operation operationRequestId requested. operation executed operationRequestId must immediately stopped successCallback abort request executed. aborting fails, errorCallback must called. Note, callbacks aborted operation must called, ignored. Despite calling errorCallback , request may forcibly aborted. Parameters - callback function callback parameter looks like:(options: AbortRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onAddWatcherRequested chrome.fileSystemProvider.onAddWatcherRequested.addListener( callback: function, ) Raised setting new directory watcher requested. error occurs, errorCallback must called. Parameters - callback function callback parameter looks like:(options: AddWatcherRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onCloseFileRequested chrome.fileSystemProvider.onCloseFileRequested.addListener( callback: function, ) Raised opening file previously opened openRequestId requested closed. Parameters - callback function callback parameter looks like:(options: CloseFileRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onConfigureRequested chrome.fileSystemProvider.onConfigureRequested.addListener( callback: function, ) Raised showing configuration dialog fileSystemId requested. handled, file_system_provider.configurable manfiest option must set true. Parameters - callback function callback parameter looks like:(options: ConfigureRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onCopyEntryRequested chrome.fileSystemProvider.onCopyEntryRequested.addListener( callback: function, ) Raised copying entry (recursively directory) requested. error occurs, errorCallback must called. Parameters - callback function callback parameter looks like:(options: CopyEntryRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onCreateDirectoryRequested chrome.fileSystemProvider.onCreateDirectoryRequested.addListener( callback: function, ) Raised creating directory requested. operation must fail EXISTS error target directory already exists. recursive true, missing directories directory path must created. Parameters - callback function callback parameter looks like:(options: CreateDirectoryRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onCreateFileRequested chrome.fileSystemProvider.onCreateFileRequested.addListener( callback: function, ) Raised creating file requested. file already exists, errorCallback must called \"EXISTS\" error code. Parameters - callback function callback parameter looks like:(options: CreateFileRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onDeleteEntryRequested chrome.fileSystemProvider.onDeleteEntryRequested.addListener( callback: function, ) Raised deleting entry requested. recursive true, entry directory, entries inside must recursively deleted well. Parameters - callback function callback parameter looks like:(options: DeleteEntryRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onExecuteActionRequested chrome.fileSystemProvider.onExecuteActionRequested.addListener( callback: function, ) Raised executing action set files directories is\\ requested. action completed, successCallback must called. error, errorCallback must called. Parameters - callback function callback parameter looks like:(options: ExecuteActionRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onGetActionsRequested chrome.fileSystemProvider.onGetActionsRequested.addListener( callback: function, ) Raised list actions set files directories entryPaths requested. returned actions must applicable entry. actions, empty array returned. actions must returned successCallback call. case error, errorCallback must called. Parameters - callback function callback parameter looks like:(options: GetActionsRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:(actions: Action[]) => void - actions Action[] - - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onGetMetadataRequested chrome.fileSystemProvider.onGetMetadataRequested.addListener( callback: function, ) Raised metadata file directory entryPath requested. metadata must returned successCallback call. case error, errorCallback must called. Parameters - callback function callback parameter looks like:(options: GetMetadataRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:(metadata: EntryMetadata) => void - metadata - - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onMountRequested chrome.fileSystemProvider.onMountRequested.addListener( callback: function, ) Raised showing dialog mounting new file system requested. extension/app file handler, event handled. Instead app.runtime.onLaunched handled order mount new file systems file opened. multiple mounts, file_system_provider.multiple_mounts manifest option must set true. Parameters - callback function callback parameter looks like:(successCallback: function, errorCallback: function) => void - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onMoveEntryRequested chrome.fileSystemProvider.onMoveEntryRequested.addListener( callback: function, ) Raised moving entry (recursively directory) requested. error occurs, errorCallback must called. Parameters - callback function callback parameter looks like:(options: MoveEntryRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onOpenFileRequested chrome.fileSystemProvider.onOpenFileRequested.addListener( callback: function, ) Raised opening file filePath requested. file exist, operation must fail. Maximum number files opened specified MountOptions . Parameters - callback function callback parameter looks like:(options: OpenFileRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:(metadata?: EntryMetadata) => void - metadata EntryMetadata optional - - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onReadDirectoryRequested chrome.fileSystemProvider.onReadDirectoryRequested.addListener( callback: function, ) Raised contents directory directoryPath requested. results must returned chunks calling successCallback several times. case error, errorCallback must called. Parameters - callback function callback parameter looks like:(options: ReadDirectoryRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:(entries: EntryMetadata[], hasMore: boolean) => void - entries - hasMore boolean - - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onReadFileRequested chrome.fileSystemProvider.onReadFileRequested.addListener( callback: function, ) Raised reading contents file opened previously openRequestId requested. results must returned chunks calling successCallback several times. case error, errorCallback must called. Parameters - callback function callback parameter looks like:(options: ReadFileRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:(data: ArrayBuffer, hasMore: boolean) => void - data ArrayBuffer - hasMore boolean - - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onRemoveWatcherRequested chrome.fileSystemProvider.onRemoveWatcherRequested.addListener( callback: function, ) Raised watcher removed. error occurs, errorCallback must called. Parameters - callback function callback parameter looks like:(options: RemoveWatcherRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onTruncateRequested chrome.fileSystemProvider.onTruncateRequested.addListener( callback: function, ) Raised truncating file desired length requested. error occurs, errorCallback must called. Parameters - callback function callback parameter looks like:(options: TruncateRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onUnmountRequested chrome.fileSystemProvider.onUnmountRequested.addListener( callback: function, ) Raised unmounting file system fileSystemId identifier requested. response, unmount API method must called together successCallback . unmounting possible (eg. due pending operation), errorCallback must called. Parameters - callback function callback parameter looks like:(options: UnmountRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - - onWriteFileRequested chrome.fileSystemProvider.onWriteFileRequested.addListener( callback: function, ) Raised writing contents file opened previously openRequestId requested. Parameters - callback function callback parameter looks like:(options: WriteFileRequestedOptions, successCallback: function, errorCallback: function) => void - options - successCallback function successCallback parameter looks like:() => void - errorCallback function errorCallback parameter looks like:(error: ProviderError) => void - error - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/fontSettings", "title": "chrome.fontSettings | API | Chrome for Developers", "text": "Description Use chrome.fontSettings API manage Chrome's font settings. Permissions fontSettings use Font Settings API, must declare \"fontSettings\" permission extension manifest. example: { \"name\": \"My Font Settings Extension\", \"description\": \"Customize fonts\", \"version\": \"0.2\", \"permissions\": [ \"fontSettings\" ], ... } Concepts usage Chrome allows font settings depend certain generic font families language scripts. example, font used sans-serif Simplified Chinese may different font used serif Japanese. generic font families supported Chrome based CSS generic font families listed GenericReference . web page specifies generic font family, Chrome selects font based corresponding setting. generic font family specified, Chrome uses setting \"standard\" generic font family. web page specifies language, Chrome selects font based setting corresponding language script. language specified, Chrome uses setting default, global, script. supported language scripts specified ISO 15924 script code listed ScriptCode . Technically, Chrome settings strictly per-script also depend language. example, Chrome chooses font Cyrillic (ISO 15924 script code \"Cyrl\") web page specifies Russian language, uses font Cyrillic script everything font covers, Latin. Examples following code gets standard font Arabic. chrome.fontSettings.getFont( { genericFamily: 'standard', script: 'Arab' }, function(details) { console.log(details.fontId); } ); next snippet sets sans-serif font Japanese. chrome.fontSettings.setFont( { genericFamily: 'sansserif', script: 'Jpan', fontId: 'MS PGothic' } ); try API, install fontSettings API example chrome-extension-samples repository. Types FontName Represents font name. Properties - displayName string display name font. - fontId string font ID. GenericFamily CSS generic font family. Enum \"standard\" \"sansserif\" \"serif\" \"fixed\" \"cursive\" \"fantasy\" \"math\" LevelOfControl One not\\_controllable : cannot controlled extension controlled\\_by\\_other\\_extensions : controlled extensions higher precedence controllable\\_by\\_this\\_extension : controlled extension controlled\\_by\\_this\\_extension : controlled extension Enum \"not_controllable\" \"controlled_by_other_extensions\" \"controllable_by_this_extension\" \"controlled_by_this_extension\" ScriptCode ISO 15924 script code. default, global, script represented script code \"Zyyy\". Enum \"Afak\" \"Arab\" \"Armi\" \"Armn\" \"Avst\" \"Bali\" \"Bamu\" \"Bass\" \"Batk\" \"Beng\" \"Blis\" \"Bopo\" \"Brah\" \"Brai\" \"Bugi\" \"Buhd\" \"Cakm\" \"Cans\" \"Cari\" \"Cham\" \"Cher\" \"Cirt\" \"Copt\" \"Cprt\" \"Cyrl\" \"Cyrs\" \"Deva\" \"Dsrt\" \"Dupl\" \"Egyd\" \"Egyh\" \"Egyp\" \"Elba\" \"Ethi\" \"Geor\" \"Geok\" \"Glag\" \"Goth\" \"Gran\" \"Grek\" \"Gujr\" \"Guru\" \"Hang\" \"Hani\" \"Hano\" \"Hans\" \"Hant\" \"Hebr\" \"Hluw\" \"Hmng\" \"Hung\" \"Inds\" \"Ital\" \"Java\" \"Jpan\" \"Jurc\" \"Kali\" \"Khar\" \"Khmr\" \"Khoj\" \"Knda\" \"Kpel\" \"Kthi\" \"Lana\" \"Laoo\" \"Latf\" \"Latg\" \"Latn\" \"Lepc\" \"Limb\" \"Lina\" \"Linb\" \"Lisu\" \"Loma\" \"Lyci\" \"Lydi\" \"Mand\" \"Mani\" \"Maya\" \"Mend\" \"Merc\" \"Mero\" \"Mlym\" \"Moon\" \"Mong\" \"Mroo\" \"Mtei\" \"Mymr\" \"Narb\" \"Nbat\" \"Nkgb\" \"Nkoo\" \"Nshu\" \"Ogam\" \"Olck\" \"Orkh\" \"Orya\" \"Osma\" \"Palm\" \"Perm\" \"Phag\" \"Phli\" \"Phlp\" \"Phlv\" \"Phnx\" \"Plrd\" \"Prti\" \"Rjng\" \"Roro\" \"Runr\" \"Samr\" \"Sara\" \"Sarb\" \"Saur\" \"Sgnw\" \"Shaw\" \"Shrd\" \"Sind\" \"Sinh\" \"Sora\" \"Sund\" \"Sylo\" \"Syrc\" \"Syre\" \"Syrj\" \"Syrn\" \"Tagb\" \"Takr\" \"Tale\" \"Talu\" \"Taml\" \"Tang\" \"Tavt\" \"Telu\" \"Teng\" \"Tfng\" \"Tglg\" \"Thaa\" \"Thai\" \"Tibt\" \"Tirh\" \"Ugar\" \"Vaii\" \"Visp\" \"Wara\" \"Wole\" \"Xpeo\" \"Xsux\" \"Yiii\" \"Zmth\" \"Zsym\" \"Zyyy\" Methods clearDefaultFixedFontSize() chrome.fontSettings.clearDefaultFixedFontSize( details?: object, callback?: function, ) Clears default fixed font size set extension, any. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. clearDefaultFontSize() chrome.fontSettings.clearDefaultFontSize( details?: object, callback?: function, ) Clears default font size set extension, any. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. clearFont() chrome.fontSettings.clearFont( details: object, callback?: function, ) Clears font set extension, any. Parameters - details object - genericFamily generic font family font cleared. - script ScriptCode optional script font cleared. omitted, global script font setting cleared. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. clearMinimumFontSize() chrome.fontSettings.clearMinimumFontSize( details?: object, callback?: function, ) Clears minimum font size set extension, any. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDefaultFixedFontSize() chrome.fontSettings.getDefaultFixedFontSize( details?: object, callback?: function, ) Gets default size fixed width fonts. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - - Returns - Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDefaultFontSize() chrome.fontSettings.getDefaultFontSize( details?: object, callback?: function, ) Gets default font size. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - - Returns - Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFont() chrome.fontSettings.getFont( details: object, callback?: function, ) Gets font given script generic font family. Parameters - details object - genericFamily generic font family font retrieved. - script ScriptCode optional script font retrieved. omitted, font setting global script (script code \"Zyyy\") retrieved. - - callback function optional callback parameter looks like:(details: object) => void - details object - fontId string font ID. Rather literal font ID preference value, may ID font system resolves preference value to. So, fontId differ font passed tosetFont , if, example, font available system. empty string signifies fallback global script font setting. - levelOfControl level control extension setting. - - Returns - Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFontList() chrome.fontSettings.getFontList( callback?: function, ) Gets list fonts system. Parameters Returns - Promise<FontName[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMinimumFontSize() chrome.fontSettings.getMinimumFontSize( details?: object, callback?: function, ) Gets minimum font size. Parameters - details object optional parameter currently unused. - callback function optional callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - - Returns - Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setDefaultFixedFontSize() chrome.fontSettings.setDefaultFixedFontSize( details: object, callback?: function, ) Sets default size fixed width fonts. Parameters - details object - pixelSize number font size pixels. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setDefaultFontSize() chrome.fontSettings.setDefaultFontSize( details: object, callback?: function, ) Sets default font size. Parameters - details object - pixelSize number font size pixels. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setFont() chrome.fontSettings.setFont( details: object, callback?: function, ) Sets font given script generic font family. Parameters - details object - fontId string font ID. empty string means fallback global script font setting. - genericFamily generic font family font set. - script ScriptCode optional script code font set. omitted, font setting global script (script code \"Zyyy\") set. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setMinimumFontSize() chrome.fontSettings.setMinimumFontSize( details: object, callback?: function, ) Sets minimum font size. Parameters - details object - pixelSize number font size pixels. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onDefaultFixedFontSizeChanged chrome.fontSettings.onDefaultFixedFontSizeChanged.addListener( callback: function, ) Fired default fixed font size setting changes. Parameters - callback function callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - - onDefaultFontSizeChanged chrome.fontSettings.onDefaultFontSizeChanged.addListener( callback: function, ) Fired default font size setting changes. Parameters - callback function callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - - onFontChanged chrome.fontSettings.onFontChanged.addListener( callback: function, ) Fired font setting changes. Parameters - callback function callback parameter looks like:(details: object) => void - details object - fontId string font ID. See description getFont . - genericFamily generic font family font setting changed. - levelOfControl level control extension setting. - script ScriptCode optional script code font setting changed. - - onMinimumFontSizeChanged chrome.fontSettings.onMinimumFontSizeChanged.addListener( callback: function, ) Fired minimum font size setting changes. Parameters - callback function callback parameter looks like:(details: object) => void - details object - levelOfControl level control extension setting. - pixelSize number font size pixels. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/gcm", "title": "chrome.gcm | API | Chrome for Developers", "text": "Description Use chrome.gcm enable apps extensions send receive messages Firebase Cloud Messaging (FCM). Permissions gcm Properties MAX_MESSAGE_SIZE maximum size (in bytes) key/value pairs message. Value 4096 Methods register() chrome.gcm.register( senderIds: string[], callback?: function, ) Registers application FCM. registration ID returned callback . register called list senderIds , registration ID returned. Parameters - senderIds string[] list server IDs allowed send messages application. contain least one 100 sender IDs. - callback function optional callback parameter looks like:(registrationId: string) => void - registrationId string registration ID assigned application FCM. - Returns - Promise<string> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. send() chrome.gcm.send( message: object, callback?: function, ) Sends message according contents. Parameters - message object message send party via FCM. - data object Message data send server. Case-insensitive goog. andgoogle , well case-sensitivecollapse_key disallowed key prefixes. Sum key/value pairs exceedgcm.MAX_MESSAGE_SIZE . - destinationId string ID server send message assigned Google API Console. - messageId string ID message. must unique message scope applications. See Cloud Messaging documentation advice picking handling ID. - timeToLive number optional Time-to-live message seconds. possible send message within time, onSendError event raised. time-to-live 0 indicates message sent immediately fail possible. default value time-to-live 86,400 seconds (1 day) maximum value 2,419,200 seconds (28 days). - - callback function optional callback parameter looks like:(messageId: string) => void - messageId string ID message callback issued for. - Returns - Promise<string> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unregister() chrome.gcm.unregister( callback?: function, ) Unregisters application FCM. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onMessage chrome.gcm.onMessage.addListener( callback: function, ) Fired message received FCM. Parameters - callback function callback parameter looks like:(message: object) => void - message object - collapseKey string optional collapse key message. See Non-collapsible collapsible messages details. - data object message data. - string optional sender issued message. - - onMessagesDeleted chrome.gcm.onMessagesDeleted.addListener( callback: function, ) Fired FCM server delete messages sent app server application. See Lifetime message details handling event. Parameters - callback function callback parameter looks like:() => void onSendError chrome.gcm.onSendError.addListener( callback: function, ) Fired possible send message FCM server. Parameters - callback function callback parameter looks like:(error: object) => void - error object - details object Additional details related error, available. - errorMessage string error message describing problem. - messageId string optional ID message error, error related specific message. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/history", "title": "chrome.history | API | Chrome for Developers", "text": "Description Use chrome.history API interact browser's record visited pages. add, remove, query URLs browser's history. override history page version, see Override Pages. Permissions history interact user's browser history, use history API. use history API, declare \"history\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"history\" ], ... } Concepts usage Transition types history API uses transition types describe browser navigated particular URL particular visit. example, user visits page clicking link another page, transition type \"link\". See reference content list transition types. Examples try API, install history API example chrome-extension-samples repository. Types HistoryItem object encapsulating one result history query. Properties - id string unique identifier item. - lastVisitTime number optional page last loaded, represented milliseconds since epoch. - title string optional title page last loaded. - typedCount number optional number times user navigated page typing address. - url string optional URL navigated user. - visitCount number optional number times user navigated page. Enum \"link\" \"typed\" \"auto_bookmark\" \"auto_subframe\" \"manual_subframe\" \"generated\" \"auto_toplevel\" \"form_submit\" \"reload\" \"keyword\" \"keyword_generated\" user arrived page clicking link another page. user arrived page typing URL address bar. also used explicit navigation actions. user arrived page suggestion UI, example, menu item. user arrived page subframe navigation request, ad loading frame previous page. always generate new navigation entries back forward menus. user arrived page selecting something subframe. user arrived page typing address bar selecting entry look like URL, Google Search suggestion. example, match might URL Google Search result page, might appear user \"Search Google ...\". different typed navigations user type see destination URL. They're also related keyword navigations. page specified command line start page. user arrived page filling values form submitting form. form submissions use transition type. user reloaded page, either clicking reload button pressing Enter address bar. Session restore Reopen closed tab also use transition type. URL page generated replaceable keyword default search provider. Corresponds visit generated keyword. UrlDetails Properties - url string URL operation. must format returned call history.search() . VisitItem object encapsulating one visit URL. Properties - id string unique identifier corresponding history.HistoryItem . - isLocal boolean Chrome 115+True visit originated device. False synced different device. - referringVisitId string visit ID referrer. - transition transition type visit referrer. - visitId string unique identifier visit. - visitTime number optional visit occurred, represented milliseconds since epoch. Methods addUrl() chrome.history.addUrl( details: UrlDetails, callback?: function, ) Adds URL history current time transition type \"link\". Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteAll() chrome.history.deleteAll( callback?: function, ) Deletes items history. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteRange() chrome.history.deleteRange( range: object, callback?: function, ) Removes items within specified date range history. Pages removed history unless visits fall within range. Parameters - range object - endTime number Items added history date, represented milliseconds since epoch. - startTime number Items added history date, represented milliseconds since epoch. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteUrl() chrome.history.deleteUrl( details: UrlDetails, callback?: function, ) Removes occurrences given URL history. Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getVisits() chrome.history.getVisits( details: UrlDetails, callback?: function, ) Retrieves information visits URL. Parameters - details - callback function optional callback parameter looks like:(results: VisitItem[]) => void - results - Returns - Promise<VisitItem[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. search() chrome.history.search( query: object, callback?: function, ) Searches history last visit time page matching query. Parameters - query object - endTime number optional Limit results visited date, represented milliseconds since epoch. - maxResults number optional maximum number results retrieve. Defaults 100. - startTime number optional Limit results visited date, represented milliseconds since epoch. property specified, default 24 hours. - text string free-text query history service. Leave empty retrieve pages. - - callback function optional callback parameter looks like:(results: HistoryItem[]) => void - results - Returns - Promise<HistoryItem[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onVisited chrome.history.onVisited.addListener( callback: function, ) Fired URL visited, providing HistoryItem data URL. event fires page loaded. Parameters - callback function callback parameter looks like:(result: HistoryItem) => void - result - onVisitRemoved chrome.history.onVisitRemoved.addListener( callback: function, ) Fired one URLs removed history. visits removed URL purged history. Parameters - callback function callback parameter looks like:(removed: object) => void - removed object - allHistory boolean True history removed. true, urls empty. - urls string[] optional - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/i18n", "title": "chrome.i18n | API | Chrome for Developers", "text": "Description Use chrome.i18n infrastructure implement internationalization across whole app extension. Manifest extension /_locales directory, manifest must define \"default_locale\" . Concepts usage need put user-visible strings file named messages.json . time add new locale, add messages file directory named /_locales/_localeCode_ , localeCode code en English. Here's file hierarchy internationalized extension supports English (en ), Spanish (es ), Korean (ko ): Support multiple languages Say extension files shown following figure: internationalize extension, name user-visible string put messages file. extension's manifest, CSS files, JavaScript code use string's name get localized version. Here's extension looks like internationalized (note still English strings): notes internationalizing: - use supported locales. use unsupported locale, Google Chrome ignores it. manifest.json CSS files, refer string named messagename like this:__MSG_messagename__ extension app's JavaScript code, refer string named messagename like this: chrome.i18n.getMessage(\"messagename\") call getMessage() , supply 9 strings included message. See Examples: getMessage details.Some messages, @@bidi_dir and@@ui_locale , provided internationalization system. See Predefined messages section full list predefined message names.In messages.json , user-visible string name, \"message\" item, optional \"description\" item. name key \"extName\" \"search_string\" identifies string. \"message\" specifies value string locale. optional \"description\" provides help translators, might able see string used extension. example:{ \"search_string\": { \"message\": \"hello%20world\", \"description\": \"The string search for. Put %20 words go together.\" }, ... } information, see Formats: Locale-Specific Messages. extension internationalized, translating straightforward. copy messages.json , translate it, put copy new directory /_locales . example, support Spanish, put translated copy messages.json /_locales/es . following figure shows previous extension new Spanish translation. Predefined messages internationalization system provides predefined messages help localize. include @@ui_locale , detect current UI locale, @@bidi_... messages let detect text direction. latter messages similar names constants gadgets BIDI (bi-directional) API. special message @@extension_id used CSS JavaScript files, whether extension app localized. message work manifest files. following table describes predefined message. | Message name | Description | |---|---| @@extension_id | extension app ID; might use string construct URLs resources inside extension. Even unlocalized extensions use message. Note: can't use message manifest file. | @@ui_locale | current locale; might use string construct locale-specific URLs. | @@bidi_dir | text direction current locale, either \"ltr\" left-to-right languages English \"rtl\" right-to-left languages Arabic. | @@bidi_reversed_dir | @@bidi_dir \"ltr\", \"rtl\"; otherwise, \"ltr\". | @@bidi_start_edge | @@bidi_dir \"ltr\", \"left\"; otherwise, \"right\". | @@bidi_end_edge | @@bidi_dir \"ltr\", \"right\"; otherwise, \"left\". | Here's example using @@extension_id CSS file construct URL: body { background-image:url('chrome-extension://__MSG_@@extension_id__/background.png'); } extension ID abcdefghijklmnopqrstuvwxyzabcdef, bold line previous code snippet becomes: background-image:url('chrome-extension://abcdefghijklmnopqrstuvwxyzabcdef/background.png'); Here's example using @@bidi_* messages CSS file: body { direction: __MSG_@@bidi_dir__; } div#header { margin-bottom: 1.05em; overflow: hidden; padding-bottom: 1.5em; padding-__MSG_@@bidi_start_edge__: 0; padding-__MSG_@@bidi_end_edge__: 1.5em; position: relative; } left-to-right languages English, bold lines become: dir: ltr; padding-left: 0; padding-right: 1.5em; Locales choose many locales, including (such en ) let single translation support multiple variations language (such en_GB en_US ). localize extension locale supported Chrome Web Store. locale listed here, choose closest alternative. example, default locale extension \"de_CH\" , choose \"de\" Chrome Web Store. | Locale code | Language (region) | |---|---| | ar | Arabic | | | Amharic | | bg | Bulgarian | | bn | Bengali | | ca | Catalan | | cs | Czech | | da | Danish | | de | German | | el | Greek | | en | English | | en_AU | English (Australia) | | en_GB | English (Great Britain) | | en_US | English (USA) | | es | Spanish | | es_419 | Spanish (Latin America Caribbean) | | et | Estonian | | fa | Persian | | fi | Finnish | | fil | Filipino | | fr | French | | gu | Gujarati | | | Hebrew | | hi | Hindi | | hr | Croatian | | hu | Hungarian | | id | Indonesian | | | Italian | | ja | Japanese | | kn | Kannada | | ko | Korean | | lt | Lithuanian | | lv | Latvian | | ml | Malayalam | | mr | Marathi | | ms | Malay | | nl | Dutch | | | Norwegian | | pl | Polish | | pt_BR | Portuguese (Brazil) | | pt_PT | Portuguese (Portugal) | | ro | Romanian | | ru | Russian | | sk | Slovak | | sl | Slovenian | | sr | Serbian | | sv | Swedish | | sw | Swahili | | ta | Tamil | | te | Telugu | | th | Thai | | tr | Turkish | | uk | Ukrainian | | vi | Vietnamese | | zh_CN | Chinese (China) | | zh_TW | Chinese (Taiwan) | Search messages define every string every supported locale. long default locale's messages.json file value every string, extension app run matter sparse translation is. Here's extension system searches message: - Search messages file (if any) user's preferred locale. example, Google Chrome's locale set British English ( en_GB ), system first looks message in/_locales/en_GB/messages.json . file exists message there, system looks further. - user's preferred locale region (that is, locale underscore: _), search locale without region. example, en_GB messages file exist contain message, system looks theen messages file. file exists message there, system looks further. - Search messages file default locale. example, extension's \"default_locale\" set \"es\", neither /_locales/en_GB/messages.json nor/_locales/en/messages.json contains message, extension uses message from/_locales/es/messages.json . following figure, message named \"colores\" three locales extension supports, \"extName\" two locales. Wherever user running Google Chrome US English sees label \"Colors\", user British English sees \"Colours\". US English British English users see extension name \"Hello World\". default language Spanish, users running Google Chrome non-English language see label \"Colores\" extension name \"Hola mundo\". Set browser's locale test translations, might want set browser's locale. section tells set locale Windows, Mac OS, Linux, ChromeOS. Windows change locale using either locale-specific shortcut Google Chrome UI. shortcut approach quicker, set up, lets use several languages once. Use locale-specific shortcut create use shortcut launches Google Chrome particular locale: - Make copy Google Chrome shortcut that's already desktop. - Rename new shortcut match new locale. Change shortcut's properties Target field specifies --lang and--user-data-dir flags. target look something like this:path_to_chrome.exe --lang=locale --user-data-dir=c:\\locale_profile_dir Launch Google Chrome double-clicking shortcut. example, create shortcut launches Google Chrome Spanish (es ), might create shortcut named chrome-es following target: path_to_chrome.exe --lang=es --user-data-dir=c:\\chrome-profile-es create many shortcuts like, making straightforward test multiple languages. example: path_to_chrome.exe --lang=en --user-data-dir=c:\\chrome-profile-en path_to_chrome.exe --lang=en_GB --user-data-dir=c:\\chrome-profile-en_GB path_to_chrome.exe --lang=ko --user-data-dir=c:\\chrome-profile-ko Use UI Here's change locale using UI Google Chrome Windows: - App icon > Options - Choose Hood tab - Scroll Web Content - Click Change font language settings - Choose Languages tab - Use drop set Google Chrome language - Restart Chrome Mac OS change locale Mac, use system preferences. - Apple menu, choose System Preferences - Personal section, choose International - Choose language location - Restart Chrome Linux change locale Linux, first quit Google Chrome. Then, one line, set LANGUAGE environment variable launch Google Chrome. example: LANGUAGE=es ./chrome ChromeOS change locale ChromeOS: - system tray, choose Settings. - Languages input section, choose Language drop-down. - language listed, click Add languages add it. - added, click 3-dot actions menu item next language choose Display ChromeOS language. - Click Restart button appears next set language restart ChromeOS. Examples find examples internationalization examples/api/i18n directory. complete example, see examples/extensions/news. examples help viewing source code, see Samples. getMessage() following code gets localized message browser displays string. replaces two placeholders within message strings \"string1\" \"string2\". function getMessage() { var message = chrome.i18n.getMessage(\"click_here\", [\"string1\", \"string2\"]); document.getElementById(\"languageSpan\").innerHTML = message; } Here's supply use single string: // JavaScript code status.innerText = chrome.i18n.getMessage(\"error\", errorDetails); \"error\": { \"message\": \"Error: $details$\", \"description\": \"Generic error template. Expects error parameter passed in.\", \"placeholders\": { \"details\": { \"content\": \"$1\", \"example\": \"Failed fetch RSS feed.\" } } } information placeholders, see Locale-Specific Messages page. details calling getMessage() , see API reference. getAcceptLanguages() following code gets accept-languages browser displays string separating accept-language ','. function getAcceptLanguages() { chrome.i18n.getAcceptLanguages(function(languageList) { var languages = languageList.join(\",\"); document.getElementById(\"languageSpan\").innerHTML = languages; }) } details calling getAcceptLanguages() , see API reference. detectLanguage() following code detects 3 languages given string displays result strings separated new lines. function detectLanguage(inputText) { chrome.i18n.detectLanguage(inputText, function(result) { var outputLang = \"Detected Language: \"; var outputPercent = \"Language Percentage: \"; for(i = 0; < result.languages.length; i++) { outputLang += result.languages[i].language + \" \"; outputPercent +=result.languages[i].percentage + \" \"; } document.getElementById(\"languageSpan\").innerHTML = outputLang + \"\\n\" + outputPercent + \"\\nReliable: \" + result.isReliable; }); } details calling detectLanguage(inputText) , see API reference. Types LanguageCode ISO language code en fr . complete list languages supported method, see kLanguageInfoTable. unknown language, und returned, means [percentage] text unknown CLD Type string Methods detectLanguage() chrome.i18n.detectLanguage( text: string, callback?: function, ) Detects language provided text using CLD. Parameters - text string User input string translated. - callback function optional callback parameter looks like:(result: object) => void - result object LanguageDetectionResult object holds detected langugae reliability array DetectedLanguage - isReliable boolean CLD detected language reliability - languages object[] array detectedLanguage - language string - percentage number percentage detected language - - - Returns - Promise<object> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAcceptLanguages() chrome.i18n.getAcceptLanguages( callback?: function, ) Gets accept-languages browser. different locale used browser; get locale, use i18n.getUILanguage . Parameters - callback function optional callback parameter looks like:(languages: string[]) => void - languages string[] Array LanguageCode - Returns - Promise<LanguageCode[]> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMessage() chrome.i18n.getMessage( messageName: string, substitutions?: any, options?: object, ) Gets localized string specified message. message missing, method returns empty string (''). format getMessage() call wrong \u2014 example, messageName string substitutions array 9 elements \u2014 method returns undefined . Parameters - messageName string name message, specified messages.json file. - substitutions optional 9 substitution strings, message requires any. - options object optional Chrome 79+- escapeLt boolean optional Escape < translation to< . applies message itself, placeholders. Developers might want use translation used HTML context. Closure Templates used Closure Compiler generate automatically. - Returns - string Message localized current locale. getUILanguage() chrome.i18n.getUILanguage() Gets browser UI language browser. different i18n.getAcceptLanguages returns preferred user languages. Returns - string browser UI language code en-US fr-FR."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/identity", "title": "chrome.identity | API | Chrome for Developers", "text": "Description Use chrome.identity API get OAuth2 access tokens. Permissions identity Types AccountInfo Properties - id string unique identifier account. ID change lifetime account. AccountStatus Enum \"SYNC\" \"ANY\" Specifies Sync enabled primary account. Specifies existence primary account, any. GetAuthTokenResult Properties - grantedScopes string[] optional list OAuth2 scopes granted extension. - token string optional specific token associated request. InvalidTokenDetails Properties - token string specific token removed cache. ProfileDetails Properties - accountStatus AccountStatus optional status primary account signed profile whose ProfileUserInfo returned. Defaults toSYNC account status. ProfileUserInfo Properties - email string email address user account signed current profile. Empty user signed identity.email manifest permission specified. - id string unique identifier account. ID change lifetime account. Empty user signed (in M41+) identity.email manifest permission specified. TokenDetails Properties - account AccountInfo optional account ID whose token returned. specified, function use account Chrome profile: Sync account one, otherwise first Google web account. - enableGranularPermissions boolean optional Chrome 87+The enableGranularPermissions flag allows extensions opt-in early granular permissions consent screen, requested permissions granted denied individually. - interactive boolean optional Fetching token may require user sign-in Chrome, approve application's requested scopes. interactive flag true ,getAuthToken prompt user necessary. flag isfalse omitted,getAuthToken return failure time prompt would required. - scopes string[] optional list OAuth2 scopes request. scopes field present, overrides list scopes specified manifest.json. WebAuthFlowDetails Properties - abortOnLoadForNonInteractive boolean optional Chrome 113+Whether terminate launchWebAuthFlow non-interactive requests page loads. parameter affect interactive flows.When set true (default) flow terminate immediately page loads. set tofalse , flow terminate thetimeoutMsForNonInteractive passes. useful identity providers use JavaScript perform redirections page loads. - interactive boolean optional Whether launch auth flow interactive mode. Since auth flows may immediately redirect result URL, launchWebAuthFlow hides web view first navigation either redirects final URL, finishes loading page meant displayed.If interactive flag istrue , window displayed page load completes. flag isfalse omitted,launchWebAuthFlow return error initial navigation complete flow.For flows use JavaScript redirection, abortOnLoadForNonInteractive set tofalse combination settingtimeoutMsForNonInteractive give page chance perform redirects. - timeoutMsForNonInteractive number optional Chrome 113+The maximum amount time, miliseconds, launchWebAuthFlow allowed run non-interactive mode total. effect ifinteractive isfalse . - url string URL initiates auth flow. Methods clearAllCachedAuthTokens() chrome.identity.clearAllCachedAuthTokens( callback?: function, ) Resets state Identity API: - Removes OAuth2 access tokens token cache - Removes user's account preferences - De-authorizes user auth flows Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 106+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAccounts() chrome.identity.getAccounts( callback?: function, ) Retrieves list AccountInfo objects describing accounts present profile. getAccounts supported dev channel. Parameters - callback function optional callback parameter looks like:(accounts: AccountInfo[]) => void - accounts - Returns - Promise<AccountInfo[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAuthToken() chrome.identity.getAuthToken( details?: TokenDetails, callback?: function, ) Gets OAuth2 access token using client ID scopes specified oauth2 section manifest.json. Identity API caches access tokens memory, ok call getAuthToken non-interactively time token required. token cache automatically handles expiration. good user experience important interactive token requests initiated UI app explaining authorization for. Failing cause users get authorization requests, Chrome sign screens signed in, context. particular, use getAuthToken interactively app first launched. Note: called callback, instead returning object function return two properties separate arguments passed callback. Parameters - details TokenDetails optional Token options. - callback function optional callback parameter looks like:(result: GetAuthTokenResult) => void - resultChrome 105+ - Returns - Promise<GetAuthTokenResult> Chrome 105+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getProfileUserInfo() chrome.identity.getProfileUserInfo( details?: ProfileDetails, callback?: function, ) Retrieves email address obfuscated gaia id user signed profile. Requires identity.email manifest permission. Otherwise, returns empty result. API different identity.getAccounts two ways. information returned available offline, applies primary account profile. Parameters - details ProfileDetails optional Chrome 84+Profile options. - callback function optional callback parameter looks like:(userInfo: ProfileUserInfo) => void - userInfo - Returns - Promise<ProfileUserInfo> Chrome 106+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRedirectURL() chrome.identity.getRedirectURL( path?: string, ) Generates redirect URL used launchWebAuthFlow . generated URLs match pattern https://<app-id>.chromiumapp.org/* . Parameters - path string optional path appended end generated URL. Returns - string launchWebAuthFlow() chrome.identity.launchWebAuthFlow( details: WebAuthFlowDetails, callback?: function, ) Starts auth flow specified URL. method enables auth flows non-Google identity providers launching web view navigating first URL provider's auth flow. provider redirects URL matching pattern https://<app-id>.chromiumapp.org/* , window close, final redirect URL passed callback function. good user experience important interactive auth flows initiated UI app explaining authorization for. Failing cause users get authorization requests context. particular, launch interactive auth flow app first launched. Parameters - details WebAuth flow options. - callback function optional callback parameter looks like:(responseUrl?: string) => void - responseUrl string optional - Returns - Promise<string | undefined> Chrome 106+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCachedAuthToken() chrome.identity.removeCachedAuthToken( details: InvalidTokenDetails, callback?: function, ) Removes OAuth2 access token Identity API's token cache. access token discovered invalid, passed removeCachedAuthToken remove cache. app may retrieve fresh token getAuthToken . Parameters - details Token information. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 106+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onSignInChanged chrome.identity.onSignInChanged.addListener( callback: function, ) Fired signin state changes account user's profile. Parameters - callback function callback parameter looks like:(account: AccountInfo, signedIn: boolean) => void - account - signedIn boolean -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/idle", "title": "chrome.idle | API | Chrome for Developers", "text": "Description Use chrome.idle API detect machine's idle state changes. Permissions idle must declare \"idle\" permission extension's manifest use idle API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"idle\" ], ... } Types IdleState Enum \"active\" \"idle\" \"locked\" Methods getAutoLockDelay() chrome.idle.getAutoLockDelay( callback?: function, ) Gets time, seconds, takes screen locked automatically idle. Returns zero duration screen never locked automatically. Currently supported Chrome OS only. Parameters - callback function optional callback parameter looks like:(delay: number) => void - delay number Time, seconds, screen locked automatically idle. zero screen never locks automatically. - Returns - Promise<number> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. queryState() chrome.idle.queryState( detectionIntervalInSeconds: number, callback?: function, ) Returns \"locked\" system locked, \"idle\" user generated input specified number seconds, \"active\" otherwise. Parameters - detectionIntervalInSeconds number system considered idle detectionIntervalInSeconds seconds elapsed since last user input detected. - callback function optional callback parameter looks like:(newState: IdleState) => void - newState - Returns - Promise<IdleState> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setDetectionInterval() chrome.idle.setDetectionInterval( intervalInSeconds: number, ) Sets interval, seconds, used determine system idle state onStateChanged events. default interval 60 seconds. Parameters - intervalInSeconds number Threshold, seconds, used determine system idle state. Events onStateChanged chrome.idle.onStateChanged.addListener( callback: function, ) Fired system changes active, idle locked state. event fires \"locked\" screen locked screensaver activates, \"idle\" system unlocked user generated input specified number seconds, \"active\" user generates input idle system."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/input/ime", "title": "chrome.input.ime | API | Chrome for Developers", "text": "Description Use chrome.input.ime API implement custom IME Chrome OS. allows extension handle keystrokes, set composition, manage candidate window. Permissions input must declare \"input\" permission extension manifest use input.ime API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"input\" ], ... } Availability Examples following code creates IME converts typed letters upper case. var context_id = -1; chrome.input.ime.onFocus.addListener(function(context) { context_id = context.contextID; }); chrome.input.ime.onKeyEvent.addListener( function(engineID, keyData) { (keyData.type == \"keydown\" && keyData.key.match(/^[a-z]$/)) { chrome.input.ime.commitText({\"contextID\": context_id, \"text\": keyData.key.toUpperCase()}); return true; } else { return false; } } ); Types AssistiveWindowButton ID buttons assistive window. Enum \"undo\" \"addToDictionary\" AssistiveWindowProperties Properties assistive window. Properties - announceString string optional Strings ChromeVox announce. - type \"undo\" - visible boolean Sets true show AssistiveWindow, sets false hide. AssistiveWindowType Type assistive window. Value \"undo\" AutoCapitalizeType auto-capitalize type text field. Enum \"characters\" \"words\" \"sentences\" InputContext Describes input Context Properties - autoCapitalizeChrome 69+ auto-capitalize type text field. - autoComplete boolean Whether text field wants auto-complete. - autoCorrect boolean Whether text field wants auto-correct. - contextID number used specify targets text field operations. ID becomes invalid soon onBlur called. - shouldDoLearning boolean Chrome 68+Whether text entered text field used improve typing suggestions user. - spellCheck boolean Whether text field wants spell-check. - type Type value text field edits, (Text, Number, URL, etc) InputContextType Type value text field edits, (Text, Number, URL, etc) Enum \"text\" \"search\" \"tel\" \"url\" \"email\" \"number\" \"password\" \"null\" KeyboardEvent See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent Properties - altKey boolean optional Whether ALT key pressed. - altgrKey boolean optional Chrome 79+Whether ALTGR key pressed. - capsLock boolean optional Whether CAPS_LOCK enabled. - code string Value physical key pressed. value affected current keyboard layout modifier state. - ctrlKey boolean optional Whether CTRL key pressed. - extensionId string optional extension ID sender keyevent. - key string Value key pressed - keyCode number optional deprecated HTML keyCode, system- implementation-dependent numerical code signifying unmodified identifier associated key pressed. - requestId string optional (Deprecated) ID request. Use requestId param theonKeyEvent event instead. - shiftKey boolean optional Whether SHIFT key pressed. - type One keyup keydown. KeyboardEventType Enum \"keyup\" \"keydown\" MenuItem menu item used input method interact user language menu. Properties - checked boolean optional Indicates item drawn check. - enabled boolean optional Indicates item enabled. - id string String passed callbacks referencing MenuItem. - label string optional Text displayed menu item. - style MenuItemStyle optional type menu item. - visible boolean optional Indicates item visible. MenuItemStyle type menu item. Radio buttons separators considered grouped. Enum \"check\" \"radio\" \"separator\" MenuParameters Properties - engineID string ID engine use. - items MenuItem[] MenuItems add update. added order exist array. MouseButton mouse buttons clicked. Enum \"left\" \"middle\" \"right\" ScreenType screen type IME activated. Enum \"normal\" \"login\" \"lock\" \"secondary-login\" UnderlineStyle type underline modify segment. Enum \"underline\" \"doubleUnderline\" \"noUnderline\" WindowPosition display candidate window. set 'cursor', window follows cursor. set 'composition', window locked beginning composition. Enum \"cursor\" \"composition\" Methods clearComposition() chrome.input.ime.clearComposition( parameters: object, callback?: function, ) Clear current composition. extension active IME, fails. Parameters - parameters object - contextID number ID context composition cleared - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. commitText() chrome.input.ime.commitText( parameters: object, callback?: function, ) Commits provided text current input. Parameters - parameters object - contextID number ID context text committed - text string text commit - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteSurroundingText() chrome.input.ime.deleteSurroundingText( parameters: object, callback?: function, ) Deletes text around caret. Parameters - parameters object - contextID number ID context surrounding text deleted. - engineID string ID engine receiving event. - length number number characters deleted - offset number offset caret position deletion start. value negative. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. hideInputView() chrome.input.ime.hideInputView() Hides input view window, popped automatically system. input view window already hidden, function nothing. keyEventHandled() chrome.input.ime.keyEventHandled( requestId: string, response: boolean, ) Indicates key event received onKeyEvent handled. called onKeyEvent listener asynchronous. Parameters - requestId string Request id event handled. come keyEvent.requestId - response boolean True keystroke handled, false sendKeyEvents() chrome.input.ime.sendKeyEvents( parameters: object, callback?: function, ) Sends key events. function expected used virtual keyboards. key(s) virtual keyboard pressed user, function used propagate event system. Parameters - parameters object - contextID number ID context key events sent, zero send key events non-input field. - keyData Data key event. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setAssistiveWindowButtonHighlighted() chrome.input.ime.setAssistiveWindowButtonHighlighted( parameters: object, callback?: function, ) Highlights/Unhighlights button assistive window. Parameters - parameters object - announceString string optional text screenreader announce. - buttonID ID button - contextID number ID context owning assistive window. - highlighted boolean Whether button highlighted. - windowType \"undo\" window type button belongs to. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setAssistiveWindowProperties() chrome.input.ime.setAssistiveWindowProperties( parameters: object, callback?: function, ) Shows/Hides assistive window given properties. Parameters - parameters object - contextID number ID context owning assistive window. - properties Properties assistive window. - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setCandidates() chrome.input.ime.setCandidates( parameters: object, callback?: function, ) Sets current candidate list. fails extension active IME Parameters - parameters object - candidates object[] List candidates show candidate window - annotation string optional Additional text describing candidate - candidate string candidate - id number candidate's id - label string optional Short string displayed next candidate, often shortcut key index - parentId number optional id add candidates - usage object optional usage detail description word. - body string body string detail description. - title string title string details description. - - - contextID number ID context owns candidate window. - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setCandidateWindowProperties() chrome.input.ime.setCandidateWindowProperties( parameters: object, callback?: function, ) Sets properties candidate window. fails extension active IME Parameters - parameters object - engineID string ID engine set properties on. - properties object - auxiliaryText string optional Text shown bottom candidate window. - auxiliaryTextVisible boolean optional True display auxiliary text, false hide it. - currentCandidateIndex number optional Chrome 84+The index current chosen candidate total candidates. - cursorVisible boolean optional True show cursor, false hide it. - pageSize number optional number candidates display per page. - totalCandidates number optional Chrome 84+The total number candidates candidate window. - vertical boolean optional True candidate window rendered vertical, false make horizontal. - visible boolean optional True show Candidate window, false hide it. - windowPosition WindowPosition optional display candidate window. - - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setComposition() chrome.input.ime.setComposition( parameters: object, callback?: function, ) Set current composition. extension active IME, fails. Parameters - parameters object - contextID number ID context composition text set - cursor number Position text cursor. - segments object[] optional List segments associated types. - end number Index character end segment after. - start number Index character start segment - style type underline modify segment. - - selectionEnd number optional Position text selection ends at. - selectionStart number optional Position text selection starts at. - text string Text set - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setCursorPosition() chrome.input.ime.setCursorPosition( parameters: object, callback?: function, ) Set position cursor candidate window. no-op extension active IME. Parameters - parameters object - candidateID number ID candidate select. - contextID number ID context owns candidate window. - - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setMenuItems() chrome.input.ime.setMenuItems( parameters: MenuParameters, callback?: function, ) Adds provided menu items language menu IME active. Parameters - parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateMenuItems() chrome.input.ime.updateMenuItems( parameters: MenuParameters, callback?: function, ) Updates state MenuItems specified Parameters - parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 111+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActivate chrome.input.ime.onActivate.addListener( callback: function, ) event sent IME activated. signals IME receiving onKeyPress events. Parameters - callback function callback parameter looks like:(engineID: string, screen: ScreenType) => void - engineID string - screen - onAssistiveWindowButtonClicked chrome.input.ime.onAssistiveWindowButtonClicked.addListener( callback: function, ) event sent button assistive window clicked. Parameters - callback function callback parameter looks like:(details: object) => void - details object - buttonID ID button clicked. - windowType type assistive window. - - onBlur chrome.input.ime.onBlur.addListener( callback: function, ) event sent focus leaves text box. sent extensions listening event, enabled user. Parameters - callback function callback parameter looks like:(contextID: number) => void - contextID number - onCandidateClicked chrome.input.ime.onCandidateClicked.addListener( callback: function, ) event sent extension owns active IME. Parameters - callback function callback parameter looks like:(engineID: string, candidateID: number, button: MouseButton) => void - engineID string - candidateID number - button - onDeactivated chrome.input.ime.onDeactivated.addListener( callback: function, ) event sent IME deactivated. signals IME longer receiving onKeyPress events. Parameters - callback function callback parameter looks like:(engineID: string) => void - engineID string - onFocus chrome.input.ime.onFocus.addListener( callback: function, ) event sent focus enters text box. sent extensions listening event, enabled user. Parameters - callback function callback parameter looks like:(context: InputContext) => void - context - onInputContextUpdate chrome.input.ime.onInputContextUpdate.addListener( callback: function, ) event sent properties current InputContext change, type. sent extensions listening event, enabled user. Parameters - callback function callback parameter looks like:(context: InputContext) => void - context - onKeyEvent chrome.input.ime.onKeyEvent.addListener( callback: function, ) Fired key event sent operating system. event sent extension extension owns active IME. listener function return true event handled false not. event evaluated asynchronously, function must return undefined IME must later call keyEventHandled() result. Parameters - callback function callback parameter looks like:(engineID: string, keyData: KeyboardEvent, requestId: string) => boolean | undefined - engineID string - keyData - requestId string - returns boolean | undefined - onMenuItemActivated chrome.input.ime.onMenuItemActivated.addListener( callback: function, ) Called user selects menu item Parameters - callback function callback parameter looks like:(engineID: string, name: string) => void - engineID string - name string - onReset chrome.input.ime.onReset.addListener( callback: function, ) event sent chrome terminates ongoing text input session. Parameters - callback function callback parameter looks like:(engineID: string) => void - engineID string - onSurroundingTextChanged chrome.input.ime.onSurroundingTextChanged.addListener( callback: function, ) Called editable string around caret changed caret position moved. text length limited 100 characters back forth direction. Parameters - callback function callback parameter looks like:(engineID: string, surroundingInfo: object) => void - engineID string - surroundingInfo object - anchor number beginning position selection. value indicates caret position selection. - focus number ending position selection. value indicates caret position selection. - offset number Chrome 46+The offset position text . Sincetext includes subset text around cursor, offset indicates absolute position first character oftext . - text string text around cursor. subset text input field. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/instanceID", "title": "chrome.instanceID | API | Chrome for Developers", "text": "Description Use chrome.instanceID access Instance ID service. Permissions gcm Availability Methods deleteID() chrome.instanceID.deleteID( callback?: function, ) Resets app instance identifier revokes tokens associated it. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteToken() chrome.instanceID.deleteToken( deleteTokenParams: object, callback?: function, ) Revokes granted token. Parameters - deleteTokenParams object Parameters deleteToken. - authorizedEntity string Chrome 46+The authorized entity used obtain token. - scope string Chrome 46+The scope used obtain token. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCreationTime() chrome.instanceID.getCreationTime( callback?: function, ) Retrieves time InstanceID generated. creation time returned callback . Parameters - callback function optional callback parameter looks like:(creationTime: number) => void - creationTime number time Instance ID generated, represented milliseconds since epoch. - Returns - Promise<number> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getID() chrome.instanceID.getID( callback?: function, ) Retrieves identifier app instance. instance ID returned callback . ID returned long application identity revoked expired. Parameters - callback function optional callback parameter looks like:(instanceID: string) => void - instanceID string Instance ID assigned app instance. - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getToken() chrome.instanceID.getToken( getTokenParams: object, callback?: function, ) Return token allows authorized entity access service defined scope. Parameters - getTokenParams object Parameters getToken. - authorizedEntity string Chrome 46+Identifies entity authorized access resources associated Instance ID. project ID Google developer console. - options object optional Chrome 46+ Deprecated since Chrome 89options deprecated ignored. Allows including small number string key/value pairs associated token may used processing request. - scope string Chrome 46+Identifies authorized actions authorized entity take. E.g. sending GCM messages, GCM scope used. - - callback function optional callback parameter looks like:(token: string) => void - token string token assigned requested service. - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onTokenRefresh chrome.instanceID.onTokenRefresh.addListener( callback: function, ) Fired granted tokens need refreshed. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/loginState", "title": "chrome.loginState | API | Chrome for Developers", "text": "Description Use chrome.loginState API read monitor login state. Permissions loginState Availability Types ProfileType Enum \"SIGNIN_PROFILE\" \"USER_PROFILE\" Specifies extension signin profile. Specifies extension user profile. SessionState Enum \"UNKNOWN\" \"IN_OOBE_SCREEN\" \"IN_LOGIN_SCREEN\" \"IN_SESSION\" \"IN_LOCK_SCREEN\" \"IN_RMA_SCREEN\" Specifies session state unknown. Specifies user out-of-box-experience screen. Specifies user login screen. Specifies user session. Specifies user lock screen. Specifies device RMA mode, finalizing repairs. Methods getProfileType() chrome.loginState.getProfileType( callback?: function, ) Gets type profile extension in. Parameters - callback function optional callback parameter looks like:(result: ProfileType) => void - result - Returns - Promise<ProfileType> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSessionState() chrome.loginState.getSessionState( callback?: function, ) Gets current session state. Parameters - callback function optional callback parameter looks like:(result: SessionState) => void - result - Returns - Promise<SessionState> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onSessionStateChanged chrome.loginState.onSessionStateChanged.addListener( callback: function, ) Dispatched session state changes. sessionState new session state. Parameters - callback function callback parameter looks like:(sessionState: SessionState) => void - sessionState -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/management", "title": "chrome.management | API | Chrome for Developers", "text": "Description chrome.management API provides ways manage installed apps extensions. Permissions management must declare \"management\" permission extension manifest use management API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"management\" ], ... } management.getPermissionWarningsByManifest() , management.uninstallSelf() , management.getSelf() require management permission. Types ExtensionDisabledReason reason item disabled. Enum \"unknown\" \"permissions_increase\" ExtensionInfo Information installed extension, app, theme. Properties - appLaunchUrl string optional launch url (only present apps). - availableLaunchTypes LaunchType[] optional currently available launch types (only present apps). - description string description extension, app, theme. - disabledReason ExtensionDisabledReason optional reason item disabled. - enabled boolean Whether currently enabled disabled. - homepageUrl string optional URL homepage extension, app, theme. - hostPermissions string[] Returns list host based permissions. - icons IconInfo[] optional list icon information. Note reflects declared manifest, actual image url may larger smaller declared, might consider using explicit width height attributes img tags referencing images. See manifest documentation icons details. - id string extension's unique identifier. - installType extension installed. - isApp boolean DeprecatedPlease use management.ExtensionInfo.type .True app. - launchType LaunchType optional app launch type (only present apps). - mayDisable boolean Whether extension disabled uninstalled user. - mayEnable boolean optional Chrome 62+Whether extension enabled user. returned extensions enabled. - name string name extension, app, theme. - offlineEnabled boolean Whether extension, app, theme declares supports offline. - optionsUrl string url item's options page, one. - permissions string[] Returns list API based permissions. - shortName string short version name extension, app, theme. - type type extension, app, theme. - updateUrl string optional update URL extension, app, theme. - version string version extension, app, theme. - versionName string optional Chrome 50+The version name extension, app, theme manifest specified one. ExtensionInstallType extension installed. One admin : extension installed administrative policy, development : extension loaded unpacked developer mode, normal : extension installed normally via .crx file, sideload : extension installed software machine, : extension installed means. Enum \"admin\" \"development\" \"normal\" \"sideload\" \"other\" ExtensionType type extension, app, theme. Enum \"extension\" \"hosted_app\" \"packaged_app\" \"legacy_packaged_app\" \"theme\" \"login_screen_extension\" IconInfo Information icon belonging extension, app, theme. Properties - size number number representing width height icon. Likely values include (but limited to) 128, 48, 24, 16. - url string URL icon image. display grayscale version icon (to indicate extension disabled, example), append ?grayscale=true URL. LaunchType possible app launch types. Enum \"OPEN_AS_REGULAR_TAB\" \"OPEN_AS_PINNED_TAB\" \"OPEN_AS_WINDOW\" \"OPEN_FULL_SCREEN\" UninstallOptions Options handle extension's uninstallation. Properties - showConfirmDialog boolean optional Whether confirm-uninstall dialog prompt user. Defaults false self uninstalls. extension uninstalls another extension, parameter ignored dialog always shown. Methods createAppShortcut() chrome.management.createAppShortcut( id: string, callback?: function, ) Display options create shortcuts app. Mac, packaged app shortcuts created. Parameters - id string id app item management.ExtensionInfo . - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. generateAppForLink() chrome.management.generateAppForLink( url: string, title: string, callback?: function, ) Generate app URL. Returns generated bookmark app. Parameters - url string URL web page. scheme URL \"http\" \"https\". - title string title generated app. - callback function optional callback parameter looks like:(result: ExtensionInfo) => void - result - Returns - Promise<ExtensionInfo> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.management.get( id: string, callback?: function, ) Returns information installed extension, app, theme given ID. Parameters - id string ID item management.ExtensionInfo . - callback function optional callback parameter looks like:(result: ExtensionInfo) => void - result - Returns - Promise<ExtensionInfo> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.management.getAll( callback?: function, ) Returns list information installed extensions apps. Parameters - callback function optional callback parameter looks like:(result: ExtensionInfo[]) => void - result - Returns - Promise<ExtensionInfo[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPermissionWarningsById() chrome.management.getPermissionWarningsById( id: string, callback?: function, ) Returns list permission warnings given extension id. Parameters - id string ID already installed extension. - callback function optional callback parameter looks like:(permissionWarnings: string[]) => void - permissionWarnings string[] - Returns - Promise<string[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPermissionWarningsByManifest() chrome.management.getPermissionWarningsByManifest( manifestStr: string, callback?: function, ) Returns list permission warnings given extension manifest string. Note: function used without requesting 'management' permission manifest. Parameters - manifestStr string Extension manifest JSON string. - callback function optional callback parameter looks like:(permissionWarnings: string[]) => void - permissionWarnings string[] - Returns - Promise<string[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSelf() chrome.management.getSelf( callback?: function, ) Returns information calling extension, app, theme. Note: function used without requesting 'management' permission manifest. Parameters - callback function optional callback parameter looks like:(result: ExtensionInfo) => void - result - Returns - Promise<ExtensionInfo> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. installReplacementWebApp() chrome.management.installReplacementWebApp( callback?: function, ) Launches replacement_web_app specified manifest. Prompts user install already installed. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. launchApp() chrome.management.launchApp( id: string, callback?: function, ) Launches application. Parameters - id string extension id application. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setEnabled() chrome.management.setEnabled( id: string, enabled: boolean, callback?: function, ) Enables disables app extension. cases function must called context user gesture (e.g. onclick handler button), may present user native confirmation UI way preventing abuse. Parameters - id string id item management.ExtensionInfo . - enabled boolean Whether item enabled disabled. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setLaunchType() chrome.management.setLaunchType( id: string, launchType: LaunchType, callback?: function, ) Set launch type app. Parameters - id string id app item management.ExtensionInfo . - launchType target launch type. Always check make sure launch type ExtensionInfo.availableLaunchTypes , available launch types vary different platforms configurations. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. uninstall() chrome.management.uninstall( id: string, options?: UninstallOptions, callback?: function, ) Uninstalls currently installed app extension. Note: function work managed environments user allowed uninstall specified extension/app. uninstall fails (e.g. user cancels dialog) promise rejected callback called runtime.lastError set. Parameters - id string id item management.ExtensionInfo . - options UninstallOptions optional - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. uninstallSelf() chrome.management.uninstallSelf( options?: UninstallOptions, callback?: function, ) Uninstalls calling extension. Note: function used without requesting 'management' permission manifest. function work managed environments user allowed uninstall specified extension/app. Parameters - options UninstallOptions optional - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onDisabled chrome.management.onDisabled.addListener( callback: function, ) Fired app extension disabled. Parameters - callback function callback parameter looks like:(info: ExtensionInfo) => void - info - onEnabled chrome.management.onEnabled.addListener( callback: function, ) Fired app extension enabled. Parameters - callback function callback parameter looks like:(info: ExtensionInfo) => void - info - onInstalled chrome.management.onInstalled.addListener( callback: function, ) Fired app extension installed. Parameters - callback function callback parameter looks like:(info: ExtensionInfo) => void - info - onUninstalled chrome.management.onUninstalled.addListener( callback: function, ) Fired app extension uninstalled. Parameters - callback function callback parameter looks like:(id: string) => void - id string -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/notifications", "title": "chrome.notifications | API | Chrome for Developers", "text": "Description Use chrome.notifications API create rich notifications using templates show notifications users system tray. Permissions notifications Types NotificationBitmap NotificationButton Properties - iconUrl string optional Deprecated since Chrome 59Button icons visible Mac OS X users. - title string NotificationItem Properties - message string Additional details item. - title string Title one item list notification. NotificationOptions Properties - appIconMaskUrl string optional Deprecated since Chrome 59The app icon mask visible Mac OS X users. URL app icon mask. URLs restrictions iconUrl. app icon mask alpha channel, alpha channel image considered. - buttons NotificationButton[] optional Text icons two notification action buttons. - contextMessage string optional Alternate notification content lower-weight font. - eventTime number optional timestamp associated notification, milliseconds past epoch (e.g. Date.now() + n ). - iconUrl string optional URL sender's avatar, app icon, thumbnail image notifications. URLs data URL, blob URL, URL relative resource within extension's .crx file **Note:**This value required notifications.create () method. - imageUrl string optional Deprecated since Chrome 59The image visible Mac OS X users. URL image thumbnail image-type notifications. URLs restrictions iconUrl. - isClickable boolean optional Deprecated since Chrome 67This UI hint ignored Chrome 67 - items NotificationItem[] optional Items multi-item notifications. Users Mac OS X see first item. - message string optional Main notification content. **Note:**This value required notifications.create () method. - priority number optional Priority ranges -2 2. -2 lowest priority. 2 highest. Zero default. platforms support notification center (Windows, Linux & Mac), -2 -1 result error notifications priorities shown all. - progress number optional Current progress ranges 0 100. - requireInteraction boolean optional Chrome 50+Indicates notification remain visible screen user activates dismisses notification. defaults false. - silent boolean optional Chrome 70+Indicates sounds vibrations made notification shown. defaults false. - title string optional Title notification (e.g. sender name email). **Note:**This value required notifications.create () method. - type TemplateType optional type notification display. Required notifications.create method. PermissionLevel Enum \"granted\" \"denied\" Specifies user elected show notifications app extension. default install time. Specifies user elected show notifications app extension. TemplateType Enum \"basic\" \"image\" \"list\" \"progress\" Contains icon, title, message, expandedMessage, two buttons. Contains icon, title, message, expandedMessage, image, two buttons. Contains icon, title, message, items, two buttons. Users Mac OS X see first item. Contains icon, title, message, progress, two buttons. Methods clear() chrome.notifications.clear( notificationId: string, callback?: function, ) Clears specified notification. Parameters - notificationId string id notification cleared. returned notifications.create method. - callback function optional callback parameter looks like:(wasCleared: boolean) => void - wasCleared boolean - Returns - Promise<boolean> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. create() chrome.notifications.create( notificationId?: string, options: NotificationOptions, callback?: function, ) Creates displays notification. Parameters - notificationId string optional Identifier notification. set empty, ID automatically generated. matches existing notification, method first clears notification proceeding create operation. identifier may longer 500 characters. notificationId parameter required Chrome 42. - options Contents notification. - callback function optional callback parameter looks like:(notificationId: string) => void - notificationId string - Returns - Promise<string> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.notifications.getAll( callback?: function, ) Retrieves notifications app extension. Parameters - callback function optional callback parameter looks like:(notifications: object) => void - notifications object - Returns - Promise<object> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPermissionLevel() chrome.notifications.getPermissionLevel( callback?: function, ) Retrieves whether user enabled notifications app extension. Parameters - callback function optional callback parameter looks like:(level: PermissionLevel) => void - level - Returns - Promise<PermissionLevel> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.notifications.update( notificationId: string, options: NotificationOptions, callback?: function, ) Updates existing notification. Parameters - notificationId string id notification updated. returned notifications.create method. - options Contents notification update to. - callback function optional callback parameter looks like:(wasUpdated: boolean) => void - wasUpdated boolean - Returns - Promise<boolean> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onButtonClicked chrome.notifications.onButtonClicked.addListener( callback: function, ) user pressed button notification. Parameters - callback function callback parameter looks like:(notificationId: string, buttonIndex: number) => void - notificationId string - buttonIndex number - onClicked chrome.notifications.onClicked.addListener( callback: function, ) user clicked non-button area notification. Parameters - callback function callback parameter looks like:(notificationId: string) => void - notificationId string - onClosed chrome.notifications.onClosed.addListener( callback: function, ) notification closed, either system user action. Parameters - callback function callback parameter looks like:(notificationId: string, byUser: boolean) => void - notificationId string - byUser boolean - onPermissionLevelChanged chrome.notifications.onPermissionLevelChanged.addListener( callback: function, ) user changes permission level. Chrome 47, ChromeOS UI dispatches event. Parameters - callback function callback parameter looks like:(level: PermissionLevel) => void - level - onShowSettings chrome.notifications.onShowSettings.addListener( callback: function, ) Custom notification settings button longer supported. user clicked link app's notification settings. Chrome 47, ChromeOS UI dispatches event. Chrome 65, UI removed ChromeOS, too. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/offscreen", "title": "chrome.offscreen | API | Chrome for Developers", "text": "Description Use offscreen API create manage offscreen documents. Permissions offscreen use Offscreen API, declare \"offscreen\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"offscreen\" ], ... } Availability Concepts usage Service workers DOM access, many websites content security policies limit functionality content scripts. Offscreen API allows extension use DOM APIs hidden document without interrupting user experience opening new windows tabs. runtime API extensions API supported offscreen documents. Pages loaded offscreen documents handled differently types extension pages. extension's permissions carry offscreen documents, limits extension API access. example, chrome.runtime API extensions API supported offscreen documents, messaging must handled using members API. following ways offscreen documents behave differently normal pages: - offscreen document's URL must static HTML file bundled extension. - Offscreen documents can't focused. - offscreen document instance window , value itsopener property alwaysnull . - Though extension package contain multiple offscreen documents, installed extension one open time. extension running split mode active incognito profile, normal incognito profiles one offscreen document. Use chrome.offscreen.createDocument() chrome.offscreen.closeDocument() create close offscreen document. createDocument() requires document's url , reason, justification: chrome.offscreen.createDocument({ url: 'off_screen.html', reasons: ['CLIPBOARD'], justification: 'reason needing document', }); Reasons list valid reasons, see Reasons section. Reasons set document creation determine document's lifespan. AUDIO_PLAYBACK reason sets document close 30 seconds without audio playing. reasons set lifetime limits. Examples Maintain lifecycle offscreen document following example shows ensure offscreen document exists. setupOffscreenDocument() function calls runtime.getContexts() find existing offscreen document, creates document already exist. let creating; // global promise avoid concurrency issues async function setupOffscreenDocument(path) { // Check windows controlled service worker see one // offscreen document given path const offscreenUrl = chrome.runtime.getURL(path); const existingContexts = await chrome.runtime.getContexts({ contextTypes: ['OFFSCREEN_DOCUMENT'], documentUrls: [offscreenUrl] }); (existingContexts.length > 0) { return; } // create offscreen document (creating) { await creating; } else { creating = chrome.offscreen.createDocument({ url: path, reasons: ['CLIPBOARD'], justification: 'reason needing document', }); await creating; creating = null; } } sending message offscreen document, call setupOffscreenDocument() make sure document exists, demonstrated following example. chrome.action.onClicked.addListener(async () => { await setupOffscreenDocument('off_screen.html'); // Send message offscreen document chrome.runtime.sendMessage({ type: '...', target: 'offscreen', data: '...' }); }); complete examples, see offscreen-clipboard offscreen-dom demos GitHub. Chrome 116: check offscreen document open runtime.getContexts() added Chrome 116. earlier versions Chrome, use clients.matchAll() check existing offscreen document: async function hasOffscreenDocument() { ('getContexts' chrome.runtime) { const contexts = await chrome.runtime.getContexts({ contextTypes: ['OFFSCREEN_DOCUMENT'], documentUrls: [OFFSCREEN_DOCUMENT_PATH] }); return Boolean(contexts.length); } else { const matchedClients = await clients.matchAll(); return matchedClients.some(client => { return client.url.includes(chrome.runtime.id); }); } } Types CreateParameters Properties - justification string developer-provided string explains, detail, need background context. user agent _may_ use display user. - reasons Reason[] reason(s) extension creating offscreen document. - url string (relative) URL load document. Reason Enum \"TESTING\" \"AUDIO_PLAYBACK\" \"IFRAME_SCRIPTING\" \"DOM_SCRAPING\" \"BLOBS\" \"DOM_PARSER\" \"USER_MEDIA\" \"DISPLAY_MEDIA\" \"WEB_RTC\" \"CLIPBOARD\" \"LOCAL_STORAGE\" \"WORKERS\" \"BATTERY_STATUS\" \"MATCH_MEDIA\" \"GEOLOCATION\" reason used testing purposes only. Specifies offscreen document responsible playing audio. Specifies offscreen document needs embed script iframe order modify iframe's content. Specifies offscreen document needs embed iframe scrape DOM extract information. Specifies offscreen document needs interact Blob objects (including URL.createObjectURL() ). Specifies offscreen document needs use DOMParser API. Specifies offscreen document needs interact media streams user media (e.g. getUserMedia() ). Specifies offscreen document needs interact media streams display media (e.g. getDisplayMedia() ). Specifies offscreen document needs use WebRTC APIs. Specifies offscreen document needs interact Clipboard API. Specifies offscreen document needs access localStorage. Specifies offscreen document needs spawn workers. Specifies offscreen document needs use navigator.getBattery. Specifies offscreen document needs use window.matchMedia. Specifies offscreen document needs use navigator.geolocation. Methods closeDocument() chrome.offscreen.closeDocument( callback?: function, ) Closes currently-open offscreen document extension. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. createDocument() chrome.offscreen.createDocument( parameters: CreateParameters, callback?: function, ) Creates new offscreen document extension. Parameters - parameters parameters describing offscreen document create. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/omnibox", "title": "chrome.omnibox | API | Chrome for Developers", "text": "Description omnibox API allows register keyword Google Chrome's address bar, also known omnibox. user enters extension's keyword, user starts interacting solely extension. keystroke sent extension, provide suggestions response. suggestions richly formatted variety ways. user accepts suggestion, extension notified take action. Manifest must include \"omnibox.keyword\" field manifest use omnibox API. also specify 16 16-pixel icon, displayed address bar suggesting users enter keyword mode. example: { \"name\": \"Aaron's omnibox extension\", \"version\": \"1.0\", \"omnibox\": { \"keyword\" : \"aaron\" }, \"icons\": { \"16\": \"16-full-color.png\" }, \"background\": { \"persistent\": false, \"scripts\": [\"background.js\"] } } Examples try API, install omnibox API example chrome-extension-samples repository. Types DefaultSuggestResult suggest result. Properties - description string text displayed URL dropdown. contain XML-style markup styling. supported tags 'url' (for literal URL), 'match' (for highlighting text matched user's query), 'dim' (for dim helper text). styles nested, eg. dimmed match. DescriptionStyleType style type. Enum \"url\" \"match\" \"dim\" OnInputEnteredDisposition window disposition omnibox query. recommended context display results. example, omnibox command navigate certain URL, disposition 'newForegroundTab' means navigation take place new selected tab. Enum \"currentTab\" \"newForegroundTab\" \"newBackgroundTab\" SuggestResult suggest result. Properties - content string text put URL bar, sent extension user chooses entry. - deletable boolean optional Chrome 63+Whether suggest result deleted user. - description string text displayed URL dropdown. contain XML-style markup styling. supported tags 'url' (for literal URL), 'match' (for highlighting text matched user's query), 'dim' (for dim helper text). styles nested, eg. dimmed match. must escape five predefined entities display text: stackoverflow.com/a/1091953/89484 Methods setDefaultSuggestion() chrome.omnibox.setDefaultSuggestion( suggestion: DefaultSuggestResult, callback?: function, ) Sets description styling default suggestion. default suggestion text displayed first suggestion row underneath URL bar. Parameters - suggestion partial SuggestResult object, without 'content' parameter. - callback function optional Chrome 100+The callback parameter looks like:() => void Returns - Promise<void> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onDeleteSuggestion chrome.omnibox.onDeleteSuggestion.addListener( callback: function, ) User deleted suggested result. Parameters - callback function callback parameter looks like:(text: string) => void - text string - onInputCancelled chrome.omnibox.onInputCancelled.addListener( callback: function, ) User ended keyword input session without accepting input. Parameters - callback function callback parameter looks like:() => void onInputChanged chrome.omnibox.onInputChanged.addListener( callback: function, ) User changed typed omnibox. Parameters - callback function callback parameter looks like:(text: string, suggest: function) => void - text string - suggest function suggest parameter looks like:(suggestResults: SuggestResult[]) => void - suggestResults Array suggest results - - onInputEntered chrome.omnibox.onInputEntered.addListener( callback: function, ) User accepted typed omnibox. Parameters - callback function callback parameter looks like:(text: string, disposition: OnInputEnteredDisposition) => void - text string - disposition - onInputStarted chrome.omnibox.onInputStarted.addListener( callback: function, ) User started keyword input session typing extension's keyword. guaranteed sent exactly per input session, onInputChanged events. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/pageCapture", "title": "chrome.pageCapture | API | Chrome for Developers", "text": "Description Use chrome.pageCapture API save tab MHTML. MHTML standard format supported browsers. encapsulates single file page resources (CSS files, images..). Note security reasons MHTML file loaded file system loaded main frame. Permissions pageCapture must declare \"pageCapture\" permission extension manifest use pageCapture API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"pageCapture\" ], ... } Methods saveAsMHTML() chrome.pageCapture.saveAsMHTML( details: object, callback?: function, ) Saves content tab given id MHTML. Parameters - details object - tabId number id tab save MHTML. - - callback function optional callback parameter looks like:(mhtmlData?: Blob) => void - mhtmlData Blob optional MHTML data Blob. - Returns - Promise<Blob | undefined> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/permissions", "title": "chrome.permissions | API | Chrome for Developers", "text": "Description Use chrome.permissions API request declared optional permissions run time rather install time, users understand permissions needed grant necessary. Concepts usage Permission warnings exist describe capabilities granted API, warnings may obvious. Permissions API allows developers explain permission warnings introduce new features gradually gives users risk-free introduction extension. way, users specify much access willing grant features want enable. example, optional permissions extension's core functionality overriding new tab page. One feature displaying user's goal day. feature requires storage permission, include warning. extension additional feature, users enable clicking following button: Displaying user's top sites requires topSites permission, following warning. Implement optional permissions Step 1: Decide permissions required optional extension declare required optional permissions. general, should: - Use required permissions needed extension's basic functionality. - Use optional permissions needed optional features extension. Advantages required permissions: - Fewer prompts: extension prompt user accept permissions. - Simpler development: Required permissions guaranteed present. Advantages optional permissions: - Better security: Extensions run fewer permissions since users enable permissions needed. - Better information users: extension explain needs particular permission user enables relevant feature. - Easier upgrades: upgrade extension, Chrome disable users upgrade adds optional rather required permissions. Step 2: Declare optional permissions manifest Declare optional permissions extension manifest optional_permissions key, using format permissions field: { \"name\": \"My extension\", ... \"optional_permissions\": [\"tabs\"], \"optional_host_permissions\": [\"https://www.google.com/\"], ... } want request hosts discover runtime, include \"https://*/*\" extension's optional_host_permissions field. lets specify origin \"Permissions.origins\" long matching scheme. Permissions specified optional Chrome extension permissions specified optional, following exceptions. | Permission | Description | |---|---| \"debugger\" | chrome.debugger API serves alternate transport Chrome's remote debugging protocol. | \"declarativeNetRequest\" | Grants extension access chrome.declarativeNetRequest API. | \"devtools\" | Allows extension expand Chrome DevTools functionality. | \"geolocation\" | Allows extension use HTML5 geolocation API. | \"mdns\" | Grants extension access chrome.mdns API. | \"proxy\" | Grants extension access chrome.proxy API manage Chrome's proxy settings. | \"tts\" | chrome.tts API plays synthesized text-to-speech (TTS). | \"ttsEngine\" | chrome.ttsEngine API implements text-to-speech (TTS) engine using extension. | \"wallpaper\" | ChromeOS only. Use chrome.wallpaper API change ChromeOS wallpaper. | View Declare Permissions information available permissions warnings. Step 3: Request optional permissions Request permissions within user gesture using permissions.request() : document.querySelector('#my-button').addEventListener('click', (event) => { // Permissions must requested inside user gesture, like button's // click handler. chrome.permissions.request({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (granted) => { // callback argument true user granted permissions. (granted) { doSomething(); } else { doSomethingElse(); } }); }); Chrome prompts user adding permissions results different warning messages user already seen accepted. example, previous code might result prompt like this: Step 4: Check extension's current permissions check whether extension specific permission set permissions, use permission.contains() : chrome.permissions.contains({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (result) => { (result) { // extension permissions. } else { // extension permissions. } }); Step 5: Remove permissions remove permissions longer need them. permission removed, calling permissions.request() usually adds permission back without prompting user. chrome.permissions.remove({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (removed) => { (removed) { // permissions removed. } else { // permissions removed (e.g., tried remove // required permissions). } }); Types Permissions Properties - origins string[] optional list host permissions, including specified optional_permissions orpermissions keys manifest, associated Content Scripts. - permissions string[] optional List named permissions (does include hosts origins). Methods addHostAccessRequest() chrome.permissions.addHostAccessRequest( request: object, callback?: function, ) Adds host access request. Request signaled user extension granted access host request. Request reset cross-origin navigation. accepted, grants persistent access site\u2019s top origin Parameters - request object - documentId string optional id document host access requests shown. Must top-level document within tab. provided, request shown tab specified document removed document navigates new origin. Adding new request override existent request tabId . ortabId must specified. - pattern string optional URL pattern host access requests shown. provided, host access requests shown URLs match pattern. - tabId number optional id tab host access requests shown. provided, request shown specified tab removed tab navigates new origin. Adding new request override existent request documentId . ordocumentId must specified. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. contains() chrome.permissions.contains( permissions: Permissions, callback?: function, ) Checks extension specified permissions. Parameters - permissions - callback function optional callback parameter looks like:(result: boolean) => void - result boolean True extension specified permissions. origin specified optional permission content script match pattern, return false unless permissions granted. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.permissions.getAll( callback?: function, ) Gets extension's current set permissions. Parameters - callback function optional callback parameter looks like:(permissions: Permissions) => void - permissions extension's active permissions. Note origins property contain granted origins specified thepermissions andoptional_permissions keys manifest associated Content Scripts. - Returns - Promise<Permissions> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.permissions.remove( permissions: Permissions, callback?: function, ) Removes access specified permissions. problems removing permissions, runtime.lastError set. Parameters - permissions - callback function optional callback parameter looks like:(removed: boolean) => void - removed boolean True permissions removed. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeHostAccessRequest() chrome.permissions.removeHostAccessRequest( request: object, callback?: function, ) Removes host access request, existent. Parameters - request object - documentId string optional id document host access request removed. Must top-level document within tab. tabId must specified. - pattern string optional URL pattern host access request removed. provided, must exactly match pattern existing host access request. - tabId number optional id tab host access request removed. documentId must specified. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. request() chrome.permissions.request( permissions: Permissions, callback?: function, ) Requests access specified permissions, displaying prompt user necessary. permissions must either defined optional_permissions field manifest required permissions withheld user. Paths origin patterns ignored. request subsets optional origin permissions; example, specify *://*\\/* optional_permissions section manifest, request http://example.com/ . problems requesting permissions, runtime.lastError set. Parameters - permissions - callback function optional callback parameter looks like:(granted: boolean) => void - granted boolean True user granted specified permissions. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onAdded chrome.permissions.onAdded.addListener( callback: function, ) Fired extension acquires new permissions. Parameters - callback function callback parameter looks like:(permissions: Permissions) => void - permissions - onRemoved chrome.permissions.onRemoved.addListener( callback: function, ) Fired access permissions removed extension. Parameters - callback function callback parameter looks like:(permissions: Permissions) => void - permissions -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/platformKeys", "title": "chrome.platformKeys | API | Chrome for Developers", "text": "Description Use chrome.platformKeys API access client certificates managed platform. user policy grants permission, extension use certficate custom authentication protocol. E.g. allows usage platform managed certificates third party VPNs (see chrome.vpnProvider). Permissions platformKeys Availability Types ClientCertificateRequest Properties - certificateAuthorities ArrayBuffer[] List distinguished names certificate authorities allowed server. entry must DER-encoded X.509 DistinguishedName. - certificateTypes field list types certificates requested, sorted order server's preference. certificates type contained list retrieved. certificateTypes empty list, however, certificates type returned. ClientCertificateType Enum \"rsaSign\" \"ecdsaSign\" Match Properties - certificate ArrayBuffer DER encoding X.509 certificate. - keyAlgorithm object KeyAlgorithm certified key. contains algorithm parameters inherent key certificate (e.g. key length). parameters like hash function used sign function included. SelectDetails Properties - clientCerts ArrayBuffer[] optional given, selectClientCertificates operates list. Otherwise, obtains list certificates platform's certificate stores available extensions. Entries extension permission match request, removed. - interactive boolean true, filtered list presented user manually select certificate thereby granting extension access certificate(s) key(s). selected certificate(s) returned. false, list reduced certificates extension granted access (automatically manually). - request certificates match request returned. VerificationDetails Properties - hostname string hostname server verify certificate for, e.g. server presented serverCertificateChain . - serverCertificateChain ArrayBuffer[] chain entry must DER encoding X.509 certificate, first entry must server certificate entry must certify entry preceding it. VerificationResult Properties - debug_errors string[] trust verification failed, array contains errors reported underlying network layer. Otherwise, array empty. Note: list meant debugging may contain relevant errors. errors returned may change future revisions API, guaranteed forwards backwards compatible. - trusted boolean result trust verification: true trust given verification details could established false trust rejected reason. Methods getKeyPair() chrome.platformKeys.getKeyPair( certificate: ArrayBuffer, parameters: object, callback: function, ) Passes key pair certificate usage platformKeys.subtleCrypto callback . Parameters - certificate ArrayBuffer certificate Match returned byselectClientCertificates . - parameters object Determines signature/hash algorithm parameters additionally parameters fixed key itself. parameters accepted WebCrypto's importKey function, e.g. RsaHashedImportParams RSASSA-PKCS1-v1_5 key andEcKeyImportParams EC key. Additionally RSASSA-PKCS1-v1_5 keys, hashing algorithm name parameter specified one following values: \"none\", \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\", e.g.{\"hash\": { \"name\": \"none\" } } . sign function apply PKCS#1 v1.5 padding hash given data.Currently, method supports \"RSASSA-PKCS1-v1_5\" \"ECDSA\" algorithms. - callback function callback parameter looks like:(publicKey: object, privateKey?: object) => void - publicKey object - privateKey object optional Might null extension access it. - getKeyPairBySpki() chrome.platformKeys.getKeyPairBySpki( publicKeySpkiDer: ArrayBuffer, parameters: object, callback: function, ) Passes key pair identified publicKeySpkiDer usage platformKeys.subtleCrypto callback . Parameters - publicKeySpkiDer ArrayBuffer DER-encoded X.509 SubjectPublicKeyInfo, obtained e.g. calling WebCrypto's exportKey function format=\"spki\". - parameters object Provides signature hash algorithm parameters, addition fixed key itself. parameters accepted WebCrypto's importKey function, e.g. RsaHashedImportParams RSASSA-PKCS1-v1_5 key. RSASSA-PKCS1-v1_5 keys, need also pass \"hash\" parameter{ \"hash\": { \"name\": string } } . \"hash\" parameter represents name hashing algorithm used digest operation sign. possible pass \"none\" hash name, case sign function apply PKCS#1 v1.5 padding hash given data.Currently, method supports \"ECDSA\" algorithm named-curve P-256 \"RSASSA-PKCS1-v1_5\" algorithm one hashing algorithms \"none\", \"SHA-1\", \"SHA-256\", \"SHA-384\", \"SHA-512\". - callback function callback parameter looks like:(publicKey: object, privateKey?: object) => void - publicKey object - privateKey object optional Might null extension access it. - selectClientCertificates() chrome.platformKeys.selectClientCertificates( details: SelectDetails, callback?: function, ) method filters list client certificates ones known platform, match request extension permission access certificate private key. interactive true, user presented dialog select matching certificates grant extension access certificate. selected/filtered client certificates passed callback . Parameters Returns - Promise<Match[]> Chrome 121+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. subtleCrypto() chrome.platformKeys.subtleCrypto() implementation WebCrypto's SubtleCrypto allows crypto operations keys client certificates available extension. Returns - object | undefined verifyTLSServerCertificate() chrome.platformKeys.verifyTLSServerCertificate( details: VerificationDetails, callback?: function, ) Checks whether details.serverCertificateChain trusted details.hostname according trust settings platform. Note: actual behavior trust verification fully specified might change future. API implementation verifies certificate expiration, validates certification path checks trust known CA. implementation supposed respect EKU serverAuth support subject alternative names. Parameters - details - callback function optional callback parameter looks like:(result: VerificationResult) => void - result - Returns - Promise<VerificationResult> Chrome 121+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/power", "title": "chrome.power | API | Chrome for Developers", "text": "Description Use chrome.power API override system's power management features. Permissions power Concepts usage default, operating systems dim screen users inactive eventually suspend system. power API, app extension keep system awake. Using API, specify Level power management disabled. \"system\" level keeps system active, allows screen dimmed turned off. example, communication app continue receive messages screen off. \"display\" level keeps screen system active. E-book presentation apps, example, keep screen system active users read. user one app extension active, power level, highest-precedence level takes effect; \"display\" always takes precedence \"system\" . example, app asks \"system\" power management, app B asks \"display\" , \"display\" used app B unloaded releases request. app still active, \"system\" used. Types Level Enum \"system\" \"display\" Prevents system sleeping response user inactivity. Prevents display turned dimmed, system sleeping response user inactivity. Methods releaseKeepAwake() chrome.power.releaseKeepAwake() Releases request previously made via requestKeepAwake(). reportActivity() chrome.power.reportActivity( callback?: function, ) Reports user activity order awake screen dimmed turned state screensaver. Exits screensaver currently active. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. requestKeepAwake() chrome.power.requestKeepAwake( level: Level, ) Requests power management temporarily disabled. level describes degree power management disabled. request previously made app still active, replaced new request. Parameters - level"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/printerProvider", "title": "chrome.printerProvider | API | Chrome for Developers", "text": "Description chrome.printerProvider API exposes events used print manager query printers controlled extensions, query capabilities submit print jobs printers. Permissions printerProvider Availability Types PrinterInfo Properties - description string optional Printer's human readable description. - id string Unique printer ID. - name string Printer's human readable name. PrintError Error codes returned response onPrintRequested event. Enum \"OK\" \"FAILED\" \"INVALID_TICKET\" \"INVALID_DATA\" Specifies operation completed successfully. Specifies general failure occured. Specifies print ticket invalid. example, ticket inconsistent capabilities, extension able handle settings ticket. Specifies document invalid. example, data may corrupted format incompatible extension. PrintJob Properties - contentType string document content type. Supported formats \"application/pdf\" and\"image/pwg-raster\" . - document Blob Blob containing document data print. Format must match contentType . - printerId string ID printer handle job. - ticket object Print ticket CJT format. CJT reference marked deprecated. deprecated Google Cloud Print only. deprecated ChromeOS printing. - title string print job title. Events onGetCapabilityRequested chrome.printerProvider.onGetCapabilityRequested.addListener( callback: function, ) Event fired print manager requests printer capabilities. Parameters - callback function callback parameter looks like:(printerId: string, resultCallback: function) => void - printerId string - resultCallback function resultCallback parameter looks like:(capabilities: object) => void - capabilities object Device capabilities CDD format. - - onGetPrintersRequested chrome.printerProvider.onGetPrintersRequested.addListener( callback: function, ) Event fired print manager requests printers provided extensions. Parameters - callback function callback parameter looks like:(resultCallback: function) => void - resultCallback function resultCallback parameter looks like:(printerInfo: PrinterInfo[]) => void - printerInfo - - onGetUsbPrinterInfoRequested chrome.printerProvider.onGetUsbPrinterInfoRequested.addListener( callback: function, ) Event fired print manager requests information USB device may printer. Note: application rely event fired per device. connected device supported returned onGetPrintersRequested event. Parameters - callback function callback parameter looks like:(device: usb.Device, resultCallback: function) => void - device - resultCallback function resultCallback parameter looks like:(printerInfo?: PrinterInfo) => void - printerInfo PrinterInfo optional - - onPrintRequested chrome.printerProvider.onPrintRequested.addListener( callback: function, ) Event fired print manager requests printing. Parameters - callback function callback parameter looks like:(printJob: PrintJob, resultCallback: function) => void - printJob - resultCallback function resultCallback parameter looks like:(result: PrintError) => void - result - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/printing", "title": "chrome.printing | API | Chrome for Developers", "text": "Description Use chrome.printing API send print jobs printers installed Chromebook. Permissions printing Availability chrome.printing methods events require declare \"printing\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"printing\" ], ... } Examples examples demonstrate using methods printing namespace. code copied based api-samples/printing extensions-samples Github repo. cancelJob() example uses onJobStatusChanged handler hide 'cancel' button jobStatus neither PENDING IN_PROGRESS . Note networks Chromebook connected directly printer, states may pass quickly cancel button visible long enough called. greatly simplified printing example. chrome.printing.onJobStatusChanged.addListener((jobId, status) => { const cancelButton = document.getElementById(\"cancelButton\"); cancelButton.addEventListener('click', () => { chrome.printing.cancelJob(jobId).then((response) => { (response !== undefined) { console.log(response.status); } (chrome.runtime.lastError !== undefined) { console.log(chrome.runtime.lastError.message); } }); }); (status !== \"PENDING\" && status !== \"IN_PROGRESS\") { cancelButton.style.visibility = 'hidden'; } else { cancelButton.style.visibility = 'visible'; } } getPrinters() getPrinterInfo() single example used functions getting printer information requires printer ID, retrieved calling getPrinters() . example logs name description default printer console. simplified version printing example. const printers = await chrome.printing.getPrinters(); const defaultPrinter = printers.find((printer) => { const printerInfo = await chrome.printing.getPrinterInfo(printer.id); return printerInfo.isDefault; } console.log(`Default printer: ${defaultPrinter.name}.\\n\\t${defaultPrinter.description}`); submitJob() submitJob() method requires three things. - ticket structure specifying capabilities printer used. user needs select available capabilities, retrieve specific printer usinggetPrinterInfo() . - SubmitJobRequest structure, specifies printer use, file date print. structure contains reference theticket structure. - blob file data print. Calling submitJob() triggers dialog box asking user confirm printing. Use PrintingAPIExtensionsAllowlist bypass confirmation. simplified version printing example. Notice ticket attached SubmitJobRequest structure (line 8) data print converted blob (line 10). Getting ID printer (line 1) complicated sample shown here. const defaultPrinter = getDefaultPrinter(); const ticket = getPrinterTicket(defaultPrinter); const arrayBuffer = getPrintData(); const submitJobRequest = { job: { printerId: defaultPrinter, title: 'test job', ticket: ticket, contentType: 'application/pdf', document: new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' }); } }; chrome.printing.submitJob(submitJobRequest, (response) => { (response !== undefined) { console.log(response.status); } (chrome.runtime.lastError !== undefined) { console.log(chrome.runtime.lastError.message); } }); Roll printing example shows build printer ticket continuous (or roll) printing, often used receipt printing. submitJobRequest object roll printing shown submitJob() example. need change default value paper cutting, use vendor_ticket_item key. (The default varies printer printer.) change value, provide array one member: object whose id 'finishings' . value either 'trim' printers cut roll end printing 'none' printers require print job torn off. const ticket = { version: '1.0', print: { vendor_ticket_item: [{id: 'finishings', value: 'trim'}], color: {type: 'STANDARD_MONOCHROME'}, duplex: {type: 'NO_DUPLEX'}, page_orientation: {type: 'PORTRAIT'}, copies: {copies: 1}, dpi: {horizontal_dpi: 300, vertical_dpi: 300}, media_size: { width_microns: 72320, height_microns: 100000 }, collate: {collate: false} } }; printers support \"finishings\" option. determine printer does, call getPrinterInfo() look \"display_name\" \"finishings/11\" . \"vendor_capability\": [ { \"display_name\": \"finishings/11\", \"id\": \"finishings/11\", \"type\": \"TYPED_VALUE\", \"typed_value_cap\": { \"value_type\": \"BOOLEAN\" } }, ... ] values ticket's media_size key specific printer. select appropriate size call getPrinterInfo() . returned GetPrinterResponse contains array supported media sizes \"media_size\".\"option\" . Choose option whose \"is_continuous_feed\" value true. Use height width values ticket. \"media_size\": { \"option\": [ { \"custom_display_name\": \"\", \"is_continuous_feed\": true, \"max_height_microns\": 2000000, \"min_height_microns\": 25400, \"width_microns\": 50800 }, ... ] } Types GetPrinterInfoResponse Properties - capabilities object optional Printer capabilities CDD format. property may missing. - status status printer. JobStatus Status print job. Enum \"PENDING\" \"IN_PROGRESS\" \"FAILED\" \"CANCELED\" \"PRINTED\" Print job received Chrome side processed yet. Print job sent printing. Print job interrupted due error. Print job canceled user via API. Print job printed without errors. Printer Properties - description string human-readable description printer. - id string printer's identifier; guaranteed unique among printers device. - isDefault boolean flag shows whether printer fits DefaultPrinterSelection rules. Note several printers could flagged. - name string name printer. - recentlyUsedRank number optional value showing recent printer used printing Chrome. lower value recent printer used. minimum value 0. Missing value indicates printer used recently. value guaranteed unique amongst printers. - source source printer (user policy configured). - uri string printer URI. used extensions choose printer user. PrinterSource source printer. Enum \"USER\" \"POLICY\" Printer added user. Printer added via policy. PrinterStatus status printer. Enum \"DOOR_OPEN\" \"TRAY_MISSING\" \"OUT_OF_INK\" \"OUT_OF_PAPER\" \"OUTPUT_FULL\" \"PAPER_JAM\" \"GENERIC_ISSUE\" \"STOPPED\" \"UNREACHABLE\" \"EXPIRED_CERTIFICATE\" \"AVAILABLE\" door printer open. Printer still accepts print jobs. tray printer missing. Printer still accepts print jobs. printer ink. Printer still accepts print jobs. printer paper. Printer still accepts print jobs. output area printer (e.g. tray) full. Printer still accepts print jobs. printer paper jam. Printer still accepts print jobs. generic issue. Printer still accepts print jobs. printer stopped print still accepts print jobs. printer unreachable accept print jobs. SSL certificate expired. Printer accepts jobs fail. printer available. SubmitJobRequest Properties - job print job submitted. supported content type \"application/pdf\", Cloud Job Ticket include FitToPageTicketItem ,PageRangeTicketItem ,ReverseOrderTicketItem andVendorTicketItem fields since irrelevant native printing. fields must present. SubmitJobResponse Properties - jobId string optional id created print job. unique identifier among print jobs device. status OK, jobId null. - status status request. SubmitJobStatus status submitJob request. Enum \"OK\" \"USER_REJECTED\" Sent print job request accepted. Sent print job request rejected user. Properties MAX_GET_PRINTER_INFO_CALLS_PER_MINUTE maximum number times getPrinterInfo called per minute. Value 20 MAX_SUBMIT_JOB_CALLS_PER_MINUTE maximum number times submitJob called per minute. Value 40 Methods cancelJob() chrome.printing.cancelJob( jobId: string, callback?: function, ) Cancels previously submitted job. Parameters - jobId string id print job cancel. id received SubmitJobResponse . - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPrinterInfo() chrome.printing.getPrinterInfo( printerId: string, callback?: function, ) Returns status capabilities printer CDD format. call fail runtime error printers given id installed. Parameters - printerId string - callback function optional callback parameter looks like:(response: GetPrinterInfoResponse) => void - response - Returns - Promise<GetPrinterInfoResponse> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPrinters() chrome.printing.getPrinters( callback?: function, ) Returns list available printers device. includes manually added, enterprise discovered printers. Parameters Returns - Promise<Printer[]> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. submitJob() chrome.printing.submitJob( request: SubmitJobRequest, callback?: function, ) Submits job printing. extension listed PrintingAPIExtensionsAllowlist policy, user prompted accept print job. Chrome 120, function return promise. Parameters - request - callback function optional callback parameter looks like:(response: SubmitJobResponse) => void - response - Returns - Promise<SubmitJobResponse> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onJobStatusChanged chrome.printing.onJobStatusChanged.addListener( callback: function, ) Event fired status job changed. fired jobs created extension."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/printingMetrics", "title": "chrome.printingMetrics | API | Chrome for Developers", "text": "Description Use chrome.printingMetrics API fetch data printing usage. Permissions printingMetrics Availability Types ColorMode Enum \"BLACK_AND_WHITE\" \"COLOR\" Specifies black white mode used. Specifies color mode used. DuplexMode Enum \"ONE_SIDED\" \"TWO_SIDED_LONG_EDGE\" \"TWO_SIDED_SHORT_EDGE\" Specifies one-sided printing used. Specifies two-sided printing used, flipping long edge. Specifies two-sided printing used, flipping short edge. MediaSize Properties - height number Height (in micrometers) media used printing. - vendorId string Vendor-provided ID, e.g. \"iso_a3_297x420mm\" \"na_index-3x5_3x5in\". Possible values values \"media\" IPP attribute found IANA page . - width number Width (in micrometers) media used printing. Printer Properties - name string Displayed name printer. - source source printer. - uri string full path printer. Contains protocol, hostname, port, queue. PrinterSource source printer. Enum \"USER\" \"POLICY\" Specifies printer added user. Specifies printer added via policy. PrintJobInfo Properties - completionTime number job completion time (in milliseconds past Unix epoch). - creationTime number job creation time (in milliseconds past Unix epoch). - id string ID job. - numberOfPages number number pages document. - printer info printer printed document. - printer_statusChrome 85+ status printer. - settings settings print job. - source Source showing initiated print job. - sourceId string optional ID source. Null source PRINT_PREVIEW ANDROID_APP. - status final status job. - title string title document printed. PrintJobSource source print job. Enum \"PRINT_PREVIEW\" \"ANDROID_APP\" \"EXTENSION\" \"ISOLATED_WEB_APP\" Specifies job created Print Preview page initiated user. Specifies job created Android App. Specifies job created extension via Chrome API. Specifies job created Isolated Web App via API. PrintJobStatus Specifies final status print job. Enum \"FAILED\" \"CANCELED\" \"PRINTED\" Specifies print job interrupted due error. Specifies print job canceled user via API. Specifies print job printed without errors. PrintSettings Properties - color requested color mode. - copies number requested number copies. - duplex requested duplex mode. - mediaSize requested media size. Methods getPrintJobs() chrome.printingMetrics.getPrintJobs( callback?: function, ) Returns list finished print jobs. Parameters - callback function optional callback parameter looks like:(jobs: PrintJobInfo[]) => void - jobs - Returns - Promise<PrintJobInfo[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onPrintJobFinished chrome.printingMetrics.onPrintJobFinished.addListener( callback: function, ) Event fired print job finished. includes termination statuses: FAILED, CANCELED PRINTED. Parameters - callback function callback parameter looks like:(jobInfo: PrintJobInfo) => void - jobInfo -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/privacy", "title": "chrome.privacy | API | Chrome for Developers", "text": "Description Use chrome.privacy API control usage features Chrome affect user's privacy. API relies ChromeSetting prototype type API getting setting Chrome's configuration. Permissions privacy must declare \"privacy\" permission extension's manifest use API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"privacy\" ], ... } Concepts usage Reading current value Chrome setting straightforward. first need find property interested in, call get() object order retrieve current value extension's level control. example, determine Chrome's credit card autofill feature enabled, write: chrome.privacy.services.autofillCreditCardEnabled.get({}, function(details) { (details.value) { console.log('Autofill on!'); } else { console.log('Autofill off!'); } }); Changing value setting little bit complex, first must verify extension control setting. user see change settings extension toggles setting either locked specific value enterprise policies (levelOfControl set \"not_controllable\"), another extension controlling value (levelOfControl set \"controlled_by_other_extensions\"). set() call succeed, setting immediately overridden. might confusing, advisable warn user settings they've chosen practically applied. means ought use get() method determine level access, call set() extension grab control setting (in fact extension can't control setting probably good idea visually disable feature reduce user confusion): chrome.privacy.services.autofillCreditCardEnabled.get({}, function(details) { (details.levelOfControl === 'controllable_by_this_extension') { chrome.privacy.services.autofillCreditCardEnabled.set({ value: true }, function() { (chrome.runtime.lastError === undefined) { console.log(\"Hooray, worked!\"); } else { console.log(\"Sadness!\", chrome.runtime.lastError); } }); } }); interested changes setting's value, add listener onChange event. Among uses, allow warn user recently installed extension grabs control setting, enterprise policy overrides control. listen changes credit card autofill status, example, following code would suffice: chrome.privacy.services.autofillCreditCardEnabled.onChange.addListener( function (details) { // new value stored `details.value`, new level control // `details.levelOfControl`, `details.incognitoSpecific` // `true` value specific Incognito mode. } ); Examples try API, install privacy API example chrome-extension-samples repository. Types IPHandlingPolicy IP handling policy WebRTC. Enum \"default\" \"default_public_and_private_interfaces\" \"default_public_interface_only\" \"disable_non_proxied_udp\" Properties network Settings influence Chrome's handling network connections general. Type object Properties - networkPredictionEnabled types.ChromeSetting<boolean> enabled, Chrome attempts speed web browsing experience pre-resolving DNS entries preemptively opening TCP SSL connections servers. preference affects actions taken Chrome's internal prediction service. affect webpage-initiated prefectches preconnects. preference's value boolean, defaulting true . - webRTCIPHandlingPolicyChrome 48+ Allow users specify media performance/privacy tradeoffs impacts WebRTC traffic routed much local address information exposed. preference's value type IPHandlingPolicy, defaulting default . services Settings enable disable features require third-party network services provided Google default search provider. Type object Properties - alternateErrorPagesEnabled types.ChromeSetting<boolean> enabled, Chrome uses web service help resolve navigation errors. preference's value boolean, defaulting true . - autofillAddressEnabled types.ChromeSetting<boolean> Chrome 70+If enabled, Chrome offers automatically fill addresses form data. preference's value boolean, defaulting true . - autofillCreditCardEnabled types.ChromeSetting<boolean> Chrome 70+If enabled, Chrome offers automatically fill credit card forms. preference's value boolean, defaulting true . - autofillEnabled types.ChromeSetting<boolean> Deprecated since Chrome 70Please use privacy.services.autofillAddressEnabled privacy.services.autofillCreditCardEnabled. remains backward compatibility release removed future. enabled, Chrome offers automatically fill forms. preference's value boolean, defaulting true . - passwordSavingEnabled types.ChromeSetting<boolean> enabled, password manager ask want save passwords. preference's value boolean, defaulting true . - safeBrowsingEnabled types.ChromeSetting<boolean> enabled, Chrome best protect phishing malware. preference's value boolean, defaulting true . - safeBrowsingExtendedReportingEnabled types.ChromeSetting<boolean> enabled, Chrome send additional information Google SafeBrowsing blocks page, content blocked page. preference's value boolean, defaulting false . - searchSuggestEnabled types.ChromeSetting<boolean> enabled, Chrome sends text type Omnibox default search engine, provides predictions websites searches likely completions typed far. preference's value boolean, defaulting true . - spellingServiceEnabled types.ChromeSetting<boolean> enabled, Chrome uses web service help correct spelling errors. preference's value boolean, defaulting false . - translationServiceEnabled types.ChromeSetting<boolean> enabled, Chrome offers translate pages language read. preference's value boolean, defaulting true . websites Settings determine information Chrome makes available websites. Type object Properties - adMeasurementEnabled types.ChromeSetting<boolean> Chrome 111+If disabled, Attribution Reporting API Private Aggregation API deactivated. value preference type boolean, default value true . Extensions may disable APIs setting value tofalse . try setting APIs totrue , throw error. - doNotTrackEnabled types.ChromeSetting<boolean> Chrome 65+If enabled, Chrome sends 'Do Track' ( DNT: 1 ) header requests. value preference type boolean, default value isfalse . - fledgeEnabled types.ChromeSetting<boolean> Chrome 111+If disabled, Fledge API deactivated. value preference type boolean, default value true . Extensions may disable API setting value tofalse . try setting API totrue , throw error. - hyperlinkAuditingEnabled types.ChromeSetting<boolean> enabled, Chrome sends auditing pings requested website ( <a ping> ). value preference type boolean, default value istrue . - protectedContentEnabled types.ChromeSetting<boolean> Available Windows ChromeOS only: enabled, Chrome provides unique ID plugins order run protected content. value preference type boolean, default value true . - referrersEnabled types.ChromeSetting<boolean> enabled, Chrome sends referer headers requests. Yes, name preference match misspelled header. No, we're going change it. value preference type boolean, default value istrue . - types.ChromeSetting<boolean> Chrome 121+If disabled, Related Website Sets deactivated. value preference type boolean, default value true . Extensions may disable API setting value tofalse . try setting API totrue , throw error. - thirdPartyCookiesAllowed types.ChromeSetting<boolean> disabled, Chrome blocks third-party sites setting cookies. value preference type boolean, default value true . - topicsEnabled types.ChromeSetting<boolean> Chrome 111+If disabled, Topics API deactivated. value preference type boolean, default value true . Extensions may disable API setting value tofalse . try setting API totrue , throw error."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/processes", "title": "chrome.processes | API | Chrome for Developers", "text": "Description Use chrome.processes API interact browser's processes. Permissions processes Availability Types Cache Properties - liveSize number part cache utilized, bytes. - size number size cache, bytes. Process Properties - cpu number optional recent measurement process's CPU usage, expressed percentage single CPU core used total, process's threads. gives value zero CpuInfo.numOfProcessors*100, exceed 100% multi-threaded processes. available receiving object part callback onUpdated onUpdatedWithMemory. - cssCache Cache optional recent information CSS cache process. available receiving object part callback onUpdated onUpdatedWithMemory. - id number Unique ID process provided browser. - imageCache Cache optional recent information image cache process. available receiving object part callback onUpdated onUpdatedWithMemory. - jsMemoryAllocated number optional recent measurement process JavaScript allocated memory, bytes. available receiving object part callback onUpdated onUpdatedWithMemory. - jsMemoryUsed number optional recent measurement process JavaScript memory used, bytes. available receiving object part callback onUpdated onUpdatedWithMemory. - naclDebugPort number debugging port Native Client processes. Zero process types NaCl processes debugging enabled. - network number optional recent measurement process network usage, bytes per second. available receiving object part callback onUpdated onUpdatedWithMemory. - osProcessId number ID process, provided OS. - privateMemory number optional recent measurement process private memory usage, bytes. available receiving object part callback onUpdatedWithMemory getProcessInfo includeMemory flag. - profile string profile process associated with. - scriptCache Cache optional recent information script cache process. available receiving object part callback onUpdated onUpdatedWithMemory. - sqliteMemory number optional recent measurement process's SQLite memory usage, bytes. available receiving object part callback onUpdated onUpdatedWithMemory. - tasks TaskInfo[] Array TaskInfos representing tasks running process. - type type process. ProcessType types browser processes. Enum \"browser\" \"renderer\" \"extension\" \"notification\" \"plugin\" \"worker\" \"nacl\" \"service_worker\" \"utility\" \"gpu\" \"other\" TaskInfo Properties - tabId number optional Optional tab ID, task represents tab running renderer process. - title string title task. Methods getProcessIdForTab() chrome.processes.getProcessIdForTab( tabId: number, callback?: function, ) Returns ID renderer process specified tab. Parameters - tabId number ID tab renderer process ID returned. - callback function optional callback parameter looks like:(processId: number) => void - processId number Process ID tab's renderer process. - Returns - Promise<number> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getProcessInfo() chrome.processes.getProcessInfo( processIds: number | number[], includeMemory: boolean, callback?: function, ) Retrieves process information process ID specified. Parameters - processIds number | number[] list process IDs single process ID return process information. empty list indicates processes requested. - includeMemory boolean True detailed memory usage required. Note, collecting memory usage information incurs extra CPU usage queried needed. - callback function optional callback parameter looks like:(processes: object) => void - processes object dictionary Process objects requested process live child process current browser process, indexed process ID. Metrics requiring aggregation time populated Process object. - Returns - Promise<object> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. terminate() chrome.processes.terminate( processId: number, callback?: function, ) Terminates specified renderer process. Equivalent visiting about:crash, without changing tab's URL. Parameters - processId number ID process terminated. - callback function optional callback parameter looks like:(didTerminate: boolean) => void - didTerminate boolean True terminating process successful, false otherwise. - Returns - Promise<boolean> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onCreated chrome.processes.onCreated.addListener( callback: function, ) Fired time process created, providing corrseponding Process object. Parameters - callback function callback parameter looks like:(process: Process) => void - process - onExited chrome.processes.onExited.addListener( callback: function, ) Fired time process terminated, providing type exit. Parameters - callback function callback parameter looks like:(processId: number, exitType: number, exitCode: number) => void - processId number - exitType number - exitCode number - onUnresponsive chrome.processes.onUnresponsive.addListener( callback: function, ) Fired time process becomes unresponsive, providing corrseponding Process object. Parameters - callback function callback parameter looks like:(process: Process) => void - process - onUpdated chrome.processes.onUpdated.addListener( callback: function, ) Fired time Task Manager updates process statistics, providing dictionary updated Process objects, indexed process ID. Parameters - callback function callback parameter looks like:(processes: object) => void - processes object - onUpdatedWithMemory chrome.processes.onUpdatedWithMemory.addListener( callback: function, ) Fired time Task Manager updates process statistics, providing dictionary updated Process objects, indexed process ID. Identical onUpdate, addition memory usage details included Process object. Note, collecting memory usage information incurs extra CPU usage listened needed. Parameters - callback function callback parameter looks like:(processes: object) => void - processes object -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/proxy", "title": "chrome.proxy | API | Chrome for Developers", "text": "Description Use chrome.proxy API manage Chrome's proxy settings. API relies ChromeSetting prototype type API getting setting proxy configuration. Permissions proxy must declare \"proxy\" permission extension manifest use proxy settings API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"proxy\" ], ... } Concepts usage Proxy settings defined proxy.ProxyConfig object. Depending Chrome's proxy settings, settings may contain proxy.ProxyRules proxy.PacScript . Proxy modes ProxyConfig object's mode attribute determines overall behavior Chrome regards proxy usage. take following values: direct - direct mode connections created directly, without proxy involved. mode allows parameters theProxyConfig object. auto_detect - auto_detect mode proxy configuration determined PAC script downloaded http://wpad/wpad.dat. mode allows parameters theProxyConfig object. pac_script - pac_script mode proxy configuration determined PAC script either retrieved URL specified theproxy.PacScript object taken literally thedata element specified theproxy.PacScript object. Besides this, mode allows parameters theProxyConfig object. fixed_servers - fixed_servers mode proxy configuration codified aproxy.ProxyRules object. structure described Proxy rules. Besides this, thefixed_servers mode allows parameters theProxyConfig object. system - system mode proxy configuration taken operating system. mode allows parameters theProxyConfig object. Note thesystem mode different setting proxy configuration. latter case, Chrome falls back system settings command-line options influence proxy configuration. Proxy rules proxy.ProxyRules object contain either singleProxy attribute subset proxyForHttp , proxyForHttps , proxyForFtp , fallbackProxy . first case, HTTP, HTTPS FTP traffic proxied specified proxy server. traffic sent directly. latter case behavior slightly subtle: proxy server configured HTTP, HTTPS FTP protocol, respective traffic proxied specified server. proxy server specified traffic uses different protocol HTTP, HTTPS FTP, fallbackProxy used. fallbackProxy specified, traffic sent directly without proxy server. Proxy server objects proxy server configured proxy.ProxyServer object. connection proxy server (defined host attribute) uses protocol defined scheme attribute. scheme specified, proxy connection defaults http . port defined proxy.ProxyServer object, port derived scheme. default ports are: | Scheme | Port | |---|---| | http | 80 | | https | 443 | | socks4 | 1080 | | socks5 | 1080 | Bypass list Individual servers may excluded proxied bypassList . list may contain following entries: [SCHEME://]HOST_PATTERN[:PORT] Match hostnames match pattern HOST_PATTERN . leading\".\" interpreted a\"*.\" .Examples: \"foobar.com\", \"*foobar.com\", \"*.foobar.com\", \"*foobar.com:99\", \"https://x.*.y.com:99\" .Pattern Matches match \".foobar.com\" \"www.foobar.com\" \"foobar.com\" \"*.foobar.com\" \"www.foobar.com\" \"foobar.com\" \"foobar.com\" \"foobar.com\" \"www.foobar.com\" \"*foobar.com\" \"foobar.com\" ,\"www.foobar.com\" ,\"foofoobar.com\" [SCHEME://]IP_LITERAL[:PORT] Match URLs IP address literals. Conceptually similar first case, special cases handle IP literal canonicalization. example, matching \"[0:0:0::1]\" matching \"[::1]\" IPv6 canonicalization done internally. Examples: 127.0.1 ,[0:0::1] ,[::1]:80 ,https://[::1]:443 IP_LITERAL/PREFIX_LENGTH_IN_BITS Match URL containing IP literal ( IP_LITERAL ) within given range. IP range (PREFIX_LENGTH_IN_BITS ) specified using CIDR notation.Match URL containing IP literal within given range. IP range specified using CIDR notation. Examples: \"192.168.1.1/16\", \"fefe:13::abc/33\" <local> literal string <local> matches simple hostnames. simple hostname one contains dots IP literal. instanceexample andlocalhost simple hostnames, whereasexample.com ,example. , and[::1] not.Example: \"<local>\" Examples following code sets SOCKS 5 proxy HTTP connections servers foobar.com uses direct connections protocols. settings apply regular incognito windows, incognito windows inherit settings regular windows. See also Types API documentation. var config = { mode: \"fixed_servers\", rules: { proxyForHttp: { scheme: \"socks5\", host: \"1.2.3.4\" }, bypassList: [\"foobar.com\"] } }; chrome.proxy.settings.set( {value: config, scope: 'regular'}, function() {} ); following code sets custom PAC script. var config = { mode: \"pac_script\", pacScript: { data: \"function FindProxyForURL(url, host) {\\n\" + \" (host == 'foobar.com')\\n\" + \" return 'PROXY blackhole:80';\\n\" + \" return 'DIRECT';\\n\" + \"}\" } }; chrome.proxy.settings.set( {value: config, scope: 'regular'}, function() {} ); next snippet queries current effective proxy settings. effective proxy settings determined another extension policy. See Types API documentation details. chrome.proxy.settings.get( {'incognito': false}, function(config) { console.log(JSON.stringify(config)); } ); Note value object passed set() identical value object passed callback function get() . latter contain rules.proxyForHttp.port element. Types Mode Enum \"direct\" \"auto_detect\" \"pac_script\" \"fixed_servers\" \"system\" PacScript object holding proxy auto-config information. Exactly one fields non-empty. Properties - data string optional PAC script. - mandatory boolean optional true, invalid PAC script prevent network stack falling back direct connections. Defaults false. - url string optional URL PAC file used. ProxyConfig object encapsulating complete proxy configuration. Properties - mode 'direct' = Never use proxy 'auto_detect' = Auto detect proxy settings 'pac_script' = Use specified PAC script 'fixed_servers' = Manually specify proxy servers 'system' = Use system proxy settings - pacScript PacScript optional proxy auto-config (PAC) script configuration. Use 'pac_script' mode. - rules ProxyRules optional proxy rules describing configuration. Use 'fixed_servers' mode. ProxyRules object encapsulating set proxy rules protocols. Use either 'singleProxy' (a subset of) 'proxyForHttp', 'proxyForHttps', 'proxyForFtp' 'fallbackProxy'. Properties - bypassList string[] optional List servers connect without proxy server. - fallbackProxy ProxyServer optional proxy server used everthing else specific proxyFor... specified. - proxyForFtp ProxyServer optional proxy server used FTP requests. - proxyForHttp ProxyServer optional proxy server used HTTP requests. - proxyForHttps ProxyServer optional proxy server used HTTPS requests. - singleProxy ProxyServer optional proxy server used per-URL requests (that http, https, ftp). ProxyServer object encapsulating single proxy server's specification. Properties - host string hostname IP address proxy server. Hostnames must ASCII (in Punycode format). IDNA supported, yet. - port number optional port proxy server. Defaults port depends scheme. - scheme Scheme optional scheme (protocol) proxy server itself. Defaults 'http'. Scheme Enum \"http\" \"https\" \"quic\" \"socks4\" \"socks5\" Properties settings Proxy settings used. value setting ProxyConfig object. Events onProxyError chrome.proxy.onProxyError.addListener( callback: function, ) Notifies proxy errors. Parameters - callback function callback parameter looks like:(details: object) => void - details object - details string Additional details error JavaScript runtime error. - error string error description. - fatal boolean true, error fatal network transaction aborted. Otherwise, direct connection used instead. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/readingList", "title": "chrome.readingList | API | Chrome for Developers", "text": "Description Use chrome.readingList API read modify items Reading List. Permissions readingList use Reading List API, add \"readingList\" permission extension manifest file: manifest.json: { \"name\": \"My reading list extension\", ... \"permissions\": [ \"readingList\" ] } Availability Chrome features reading list located side panel. lets users save web pages read later offline. Use Reading List API retrieve existing items add remove items list. Concepts usage Item ordering Items reading list guaranteed order. Item uniqueness Items keyed URL. includes hash query string. Use cases following sections demonstrate common use cases Reading List API. See Extension samples complete extension examples. Add item add item reading list, use chrome.readingList.addEntry() : chrome.readingList.addEntry({ title: \"New web platform September | web.dev\", url: \"https://developer.chrome.com/\", hasBeenRead: false }); Display items display items reading list, use chrome.readingList.query() method retrieve them. method. const items = await chrome.readingList.query({}); (const item items) { // something display item } Mark item read use chrome.readingList.updateEntry() update title, URL, read status. following code marks item read: chrome.readingList.updateEntry({ url: \"https://developer.chrome.com/\", hasBeenRead: true }); Remove item remove item, use chrome.readingList.removeEntry() : chrome.readingList.removeEntry({ url: \"https://developer.chrome.com/\" }); Extension samples Reading List API extensions demos, see Reading List API sample. Types AddEntryOptions Properties - hasBeenRead boolean true entry read. - title string title entry. - url string url entry. QueryInfo Properties - hasBeenRead boolean optional Indicates whether search read ( true ) unread (false ) items. - title string optional title search for. - url string optional url search for. ReadingListEntry Properties - creationTime number time entry created. Recorded milliseconds since Jan 1, 1970. - hasBeenRead boolean true entry read. - lastUpdateTime number last time entry updated. value milliseconds since Jan 1, 1970. - title string title entry. - url string url entry. RemoveOptions Properties - url string url remove. UpdateEntryOptions Properties - hasBeenRead boolean optional updated read status. existing status remains value provided. - title string optional new title. existing tile remains value provided. - url string url updated. Methods addEntry() chrome.readingList.addEntry( entry: AddEntryOptions, callback?: function, ) Adds entry reading list exist. Parameters - entry entry add reading list. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.readingList.query( info: QueryInfo, callback?: function, ) Retrieves entries match QueryInfo properties. Properties provided matched. Parameters - info properties search for. - callback function optional callback parameter looks like:(entries: ReadingListEntry[]) => void - entries - Returns - Promise<ReadingListEntry[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeEntry() chrome.readingList.removeEntry( info: RemoveOptions, callback?: function, ) Removes entry reading list exists. Parameters - info entry remove reading list. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateEntry() chrome.readingList.updateEntry( info: UpdateEntryOptions, callback?: function, ) Updates reading list entry exists. Parameters - info entry update. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onEntryAdded chrome.readingList.onEntryAdded.addListener( callback: function, ) Triggered ReadingListEntry added reading list. Parameters - callback function callback parameter looks like:(entry: ReadingListEntry) => void - entry - onEntryRemoved chrome.readingList.onEntryRemoved.addListener( callback: function, ) Triggered ReadingListEntry removed reading list. Parameters - callback function callback parameter looks like:(entry: ReadingListEntry) => void - entry - onEntryUpdated chrome.readingList.onEntryUpdated.addListener( callback: function, ) Triggered ReadingListEntry updated reading list. Parameters - callback function callback parameter looks like:(entry: ReadingListEntry) => void - entry -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/runtime", "title": "chrome.runtime | API | Chrome for Developers", "text": "Description Use chrome.runtime API retrieve service worker, return details manifest, listen respond events extension lifecycle. also use API convert relative path URLs fully-qualified URLs. members API require permissions. permission needed connectNative() , sendNativeMessage() onNativeConnect . following example shows declare \"nativeMessaging\" permission manifest: manifest.json: { \"name\": \"My extension\", ... \"permissions\": [ \"nativeMessaging\" ], ... } Concepts usage Runtime API provides methods support number areas extensions use: - Message passing - extension communicate different contexts within extension also extensions using methods events: connect() ,onConnect ,onConnectExternal ,sendMessage() ,onMessage andonMessageExternal . addition, extension pass messages native applications user's device usingconnectNative() andsendNativeMessage() . - Accessing extension platform metadata - methods let retrieve several specific pieces metadata extension platform. Methods category include getManifest() , andgetPlatformInfo() . - Managing extension lifecycle options - properties let perform meta-operations extension, display options page. Methods events category include onInstalled ,onStartup ,openOptionsPage() ,reload() ,requestUpdateCheck() , andsetUninstallURL() . - Helper utilities - methods provide utility conversion internal resource representations external formats. Methods category include getURL() . - Kiosk mode utilities - methods available ChromeOS, exist mainly support kiosk implementations. Methods category include restart() andrestartAfterDelay() `. Unpacked extension behavior unpacked extension reloaded, treated update. means chrome.runtime.onInstalled event fire \"update\" reason. includes extension reloaded chrome.runtime.reload() . Use cases Add image web page web page access asset hosted another domain, must specify resource's full URL (e.g. <img src=\"https://example.com/logo.png\"> ). true include extension asset web page. two differences extension's assets must exposed web accessible resources typically content scripts responsible injecting extension assets. example, extension add logo.png page content script injected using runtime.getURL() create fully-qualified URL. first, asset must declared web accessible resource manifest. manifest.json: { ... \"web_accessible_resources\": [ { \"resources\": [ \"logo.png\" ], \"matches\": [ \"https://*/*\" ] } ], ... } content.js: { // Block used avoid setting global variables const img = document.createElement('img'); img.src = chrome.runtime.getURL('logo.png'); document.body.append(img); } Send data content script service worker common extension's content scripts need data managed another part extension, like service worker. Much like two browser windows opened web page, two contexts cannot directly access other's values. Instead, extension use message passing coordinate across different contexts. example, content script needs data extension's service worker initialize UI. get data, passes developer-defined get-user-data message service worker, responds copy user's information. content.js: // 1. Send message service worker requesting user's data chrome.runtime.sendMessage('get-user-data', (response) => { // 3. Got asynchronous response data service worker console.log('received user data', response); initializeUI(response); }); service-worker.js: // Example simple user data object const user = { username: 'demo-user' }; chrome.runtime.onMessage.addListener((message, sender, sendResponse) => { // 2. page requested user data, respond copy `user` (message === 'get-user-data') { sendResponse(user); } }); Gather feedback uninstall Many extensions use post-uninstall surveys understand extension could better serve users improve retention. following example shows add functionality. background.js: chrome.runtime.onInstalled.addListener(details => { (details.reason === chrome.runtime.OnInstalledReason.INSTALL) { chrome.runtime.setUninstallURL('https://example.com/extension-survey'); } }); Examples See Manifest V3 - Web Accessible Resources demo Runtime API examples. Types ContextFilter filter match certain extension contexts. Matching contexts must match specified filters; filter specified matches available contexts. Thus, filter `{}` match available contexts. Properties - contextIds string[] optional - contextTypes ContextType[] optional - documentIds string[] optional - documentOrigins string[] optional - documentUrls string[] optional - frameIds number[] optional - incognito boolean optional - tabIds number[] optional - windowIds number[] optional ContextType Enum \"TAB\" \"POPUP\" \"BACKGROUND\" \"OFFSCREEN_DOCUMENT\" \"SIDE_PANEL\" \"DEVELOPER_TOOLS\" Specifies context type tab Specifies context type extension popup window Specifies context type service worker. Specifies context type offscreen document. Specifies context type side panel. Specifies context type developer tools. ExtensionContext context hosting extension content. Properties - contextId string unique identifier context - contextType type context corresponds to. - documentId string optional UUID document associated context, undefined context hosted document. - documentOrigin string optional origin document associated context, undefined context hosted document. - documentUrl string optional URL document associated context, undefined context hosted document. - frameId number ID frame context, -1 context hosted frame. - incognito boolean Whether context associated incognito profile. - tabId number ID tab context, -1 context hosted tab. - windowId number ID window context, -1 context hosted window. MessageSender object containing information script context sent message request. Properties - documentId string optional Chrome 106+A UUID document opened connection. - documentLifecycle string optional Chrome 106+The lifecycle document opened connection time port created. Note lifecycle state document may changed since port creation. - frameId number optional frame opened connection. 0 top-level frames, positive child frames. set tab set. - id string optional ID extension opened connection, any. - nativeApplication string optional Chrome 74+The name native application opened connection, any. - origin string optional Chrome 80+The origin page frame opened connection. vary url property (e.g., about:blank) opaque (e.g., sandboxed iframes). useful identifying origin trusted can't immediately tell URL. - tab Tab optional tabs.Tab opened connection, any. property present connection opened tab (including content scripts), receiver extension, app. - tlsChannelId string optional TLS channel ID page frame opened connection, requested extension, available. - url string optional URL page frame opened connection. sender iframe, iframe's URL URL page hosts it. OnInstalledReason reason event dispatched. Enum \"install\" \"update\" \"chrome_update\" \"shared_module_update\" Specifies event reason installation. Specifies event reason extension update. Specifies event reason Chrome update. Specifies event reason update shared module. OnRestartRequiredReason reason event dispatched. 'app_update' used restart needed application updated newer version. 'os_update' used restart needed browser/OS updated newer version. 'periodic' used system runs permitted uptime set enterprise policy. Enum \"app_update\" \"os_update\" \"periodic\" Specifies event reason update app. Specifies event reason update operating system. Specifies event reason periodic restart app. PlatformArch machine's processor architecture. Enum \"arm\" \"arm64\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies processer architecture arm. Specifies processer architecture arm64. Specifies processer architecture x86-32. Specifies processer architecture x86-64. Specifies processer architecture mips. Specifies processer architecture mips64. PlatformInfo object containing information current platform. Properties - arch machine's processor architecture. - nacl_arch native client architecture. may different arch platforms. - os operating system Chrome running on. PlatformNaclArch native client architecture. may different arch platforms. Enum \"arm\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies native client architecture arm. Specifies native client architecture x86-32. Specifies native client architecture x86-64. Specifies native client architecture mips. Specifies native client architecture mips64. PlatformOs operating system Chrome running on. Enum \"mac\" \"win\" \"android\" \"cros\" \"linux\" \"openbsd\" \"fuchsia\" Specifies MacOS operating system. Specifies Windows operating system. Specifies Android operating system. Specifies Chrome operating system. Specifies Linux operating system. Specifies OpenBSD operating system. Specifies Fuchsia operating system. Port object allows two way communication pages. See Long-lived connections information. Properties - name string name port, specified call runtime.connect . - onDisconnect Event<functionvoidvoid> Fired port disconnected end(s). runtime.lastError may set port disconnected error. port closed via disconnect, event fired end. event fired (see also Port lifetime).The onDisconnect.addListener function looks like:(callback: function) => {...} - onMessage Event<functionvoidvoid> event fired postMessage called end port. onMessage.addListener function looks like:(callback: function) => {...} - sender MessageSender optional property present ports passed onConnect / onConnectExternal / onConnectNative listeners. - disconnect void Immediately disconnect port. Calling disconnect() already-disconnected port effect. port disconnected, new events dispatched port.The disconnect function looks like:() => {...} - postMessage void Send message end port. port disconnected, error thrown. postMessage function looks like:(message: any) => {...} - message Chrome 52+The message send. object JSON-ifiable. - RequestUpdateCheckStatus Result update check. Enum \"throttled\" \"no_update\" \"update_available\" Specifies status check throttled. occur repeated checks within short amount time. Specifies available updates install. Specifies available update install. Properties id ID extension/app. Type string lastError Populated error message calling API function fails; otherwise undefined. defined within scope function's callback. error produced, runtime.lastError accessed within callback, message logged console listing API function produced error. API functions return promises set property. Type object Properties - message string optional Details error occurred. Methods connect() chrome.runtime.connect( extensionId?: string, connectInfo?: object, ) Attempts connect listeners within extension (such background page), extensions/apps. useful content scripts connecting extension processes, inter-app/extension communication, web messaging. Note connect listeners content script. Extensions may connect content scripts embedded tabs via tabs.connect . Parameters - extensionId string optional ID extension connect to. omitted, connection attempted extension. Required sending messages web page web messaging. - connectInfo object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onConnectExternal processes listening connection event. - name string optional passed onConnect processes listening connection event. - Returns - Port messages sent received. port's onDisconnect event fired extension exist. connectNative() chrome.runtime.connectNative( application: string, ) Connects native application host machine. method requires \"nativeMessaging\" permission. See Native Messaging information. Parameters - application string name registered application connect to. Returns - Port messages sent received application getBackgroundPage() chrome.runtime.getBackgroundPage( callback?: function, ) Background pages exist MV3 extensions. Retrieves JavaScript 'window' object background page running inside current extension/app. background page event page, system ensure loaded calling callback. background page, error set. Parameters - callback function optional callback parameter looks like:(backgroundPage?: Window) => void - backgroundPage Window optional JavaScript 'window' object background page. - Returns - Promise<Window | undefined> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getContexts() chrome.runtime.getContexts( filter: ContextFilter, callback?: function, ) Fetches information active contexts associated extension Parameters - filter filter find matching contexts. context matches matches specified fields filter. unspecified field filter matches contexts. - callback function optional callback parameter looks like:(contexts: ExtensionContext[]) => void - contexts matching contexts, any. - Returns - Promise<ExtensionContext[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getManifest() chrome.runtime.getManifest() Returns details app extension manifest. object returned serialization full manifest file. Returns - object manifest details. getPackageDirectoryEntry() chrome.runtime.getPackageDirectoryEntry( callback?: function, ) Returns DirectoryEntry package directory. Parameters - callback function optional callback parameter looks like:(directoryEntry: DirectoryEntry) => void - directoryEntry DirectoryEntry - Returns - Promise<DirectoryEntry> Chrome 122+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPlatformInfo() chrome.runtime.getPlatformInfo( callback?: function, ) Returns information current platform. Parameters - callback function optional callback parameter looks like:(platformInfo: PlatformInfo) => void - platformInfo - Returns - Promise<PlatformInfo> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getURL() chrome.runtime.getURL( path: string, ) Converts relative path within app/extension install directory fully-qualified URL. Parameters - path string path resource within app/extension expressed relative install directory. Returns - string fully-qualified URL resource. openOptionsPage() chrome.runtime.openOptionsPage( callback?: function, ) Open Extension's options page, possible. precise behavior may depend manifest's options_ui options_page key, Chrome happens support time. example, page may opened new tab, within chrome://extensions, within App, may focus open options page. never cause caller page reload. Extension declare options page, Chrome failed create one reason, callback set lastError . Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.runtime.reload() Reloads app extension. method supported kiosk mode. kiosk mode, use chrome.runtime.restart() method. requestUpdateCheck() chrome.runtime.requestUpdateCheck( callback?: function, ) Requests immediate update check done app/extension. Important: extensions/apps use method, since Chrome already automatic checks every hours, listen runtime.onUpdateAvailable event without needing call requestUpdateCheck. method appropriate call limited circumstances, extension talks backend service, backend service determined client extension version far date like prompt user update. uses requestUpdateCheck, calling unconditionally based repeating timer, probably serve waste client, network, server resources. Note: called callback, instead returning object function return two properties separate arguments passed callback. Parameters - callback function optional callback parameter looks like:(result: object) => void - result object Chrome 109+RequestUpdateCheckResult object holds status update check details result update available - status Result update check. - version string optional update available, contains version available update. - - Returns - Promise<object> Chrome 109+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restart() chrome.runtime.restart() Restart ChromeOS device app runs kiosk mode. Otherwise, no-op. restartAfterDelay() chrome.runtime.restartAfterDelay( seconds: number, callback?: function, ) Restart ChromeOS device app runs kiosk mode given seconds. called time ends, reboot delayed. called value -1, reboot cancelled. no-op non-kiosk mode. allowed called repeatedly first extension invoke API. Parameters - seconds number Time wait seconds rebooting device, -1 cancel scheduled reboot. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.runtime.sendMessage( extensionId?: string, message: any, options?: object, callback?: function, ) Sends single message event listeners within extension different extension/app. Similar runtime.connect sends single message, optional response. sending extension, runtime.onMessage event fired every frame extension (except sender's frame), runtime.onMessageExternal , different extension. Note extensions cannot send messages content scripts using method. send messages content scripts, use tabs.sendMessage . Parameters - extensionId string optional ID extension send message to. omitted, message sent extension/app. Required sending messages web page web messaging. - message message send. message JSON-ifiable object. - options object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onMessageExternal processes listening connection event. - - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting extension, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendNativeMessage() chrome.runtime.sendNativeMessage( application: string, message: object, callback?: function, ) Send single message native application. method requires \"nativeMessaging\" permission. Parameters - application string name native messaging host. - message object message passed native messaging host. - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response response message sent native messaging host. error occurs connecting native messaging host, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUninstallURL() chrome.runtime.setUninstallURL( url: string, callback?: function, ) Sets URL visited upon uninstallation. may used clean server-side data, analytics, implement surveys. Maximum 1023 characters. Parameters - url string URL opened extension uninstalled. URL must http: https: scheme. Set empty string open new tab upon uninstallation. - callback function optional Chrome 45+The callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBrowserUpdateAvailable chrome.runtime.onBrowserUpdateAvailable.addListener( callback: function, ) Please use runtime.onRestartRequired . Fired Chrome update available, installed immediately browser restart required. Parameters - callback function callback parameter looks like:() => void onConnect chrome.runtime.onConnect.addListener( callback: function, ) Fired connection made either extension process content script (by runtime.connect ). onConnectExternal chrome.runtime.onConnectExternal.addListener( callback: function, ) Fired connection made another extension (by runtime.connect ), externally connectable web site. onConnectNative chrome.runtime.onConnectNative.addListener( callback: function, ) Fired connection made native application. event requires \"nativeMessaging\" permission. supported Chrome OS. onInstalled chrome.runtime.onInstalled.addListener( callback: function, ) Fired extension first installed, extension updated new version, Chrome updated new version. Parameters - callback function callback parameter looks like:(details: object) => void - details object - id string optional Indicates ID imported shared module extension updated. present 'reason' 'shared_module_update'. - previousVersion string optional Indicates previous version extension, updated. present 'reason' 'update'. - reason reason event dispatched. - - onMessage chrome.runtime.onMessage.addListener( callback: function, ) Fired message sent either extension process (by runtime.sendMessage ) content script (by tabs.sendMessage ). Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onMessageExternal chrome.runtime.onMessageExternal.addListener( callback: function, ) Fired message sent another extension (by runtime.sendMessage ). Cannot used content script. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onRestartRequired chrome.runtime.onRestartRequired.addListener( callback: function, ) Fired app device runs needs restarted. app close windows earliest convenient time let restart happen. app nothing, restart enforced 24-hour grace period passed. Currently, event fired Chrome OS kiosk apps. Parameters - callback function callback parameter looks like:(reason: OnRestartRequiredReason) => void - reason - onStartup chrome.runtime.onStartup.addListener( callback: function, ) Fired profile extension installed first starts up. event fired incognito profile started, even extension operating 'split' incognito mode. Parameters - callback function callback parameter looks like:() => void onSuspend chrome.runtime.onSuspend.addListener( callback: function, ) Sent event page unloaded. gives extension opportunity clean up. Note since page unloading, asynchronous operations started handling event guaranteed complete. activity event page occurs gets unloaded onSuspendCanceled event sent page unloaded. Parameters - callback function callback parameter looks like:() => void onSuspendCanceled chrome.runtime.onSuspendCanceled.addListener( callback: function, ) Sent onSuspend indicate app unloaded all. Parameters - callback function callback parameter looks like:() => void onUpdateAvailable chrome.runtime.onUpdateAvailable.addListener( callback: function, ) Fired update available, installed immediately app currently running. nothing, update installed next time background page gets unloaded, want installed sooner explicitly call chrome.runtime.reload(). extension using persistent background page, background page course never gets unloaded, unless call chrome.runtime.reload() manually response event update get installed next time Chrome restarts. handlers listening event, extension persistent background page, behaves chrome.runtime.reload() called response event. Parameters - callback function callback parameter looks like:(details: object) => void - details object - version string version number available update. - - onUserScriptConnect chrome.runtime.onUserScriptConnect.addListener( callback: function, ) Fired connection made user script extension. onUserScriptMessage chrome.runtime.onUserScriptMessage.addListener( callback: function, ) Fired message sent user script associated extension. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/runtime", "title": "chrome.runtime | API | Chrome for Developers", "text": "Description Use chrome.runtime API retrieve service worker, return details manifest, listen respond events extension lifecycle. also use API convert relative path URLs fully-qualified URLs. members API require permissions. permission needed connectNative() , sendNativeMessage() onNativeConnect . following example shows declare \"nativeMessaging\" permission manifest: manifest.json: { \"name\": \"My extension\", ... \"permissions\": [ \"nativeMessaging\" ], ... } Concepts usage Runtime API provides methods support number areas extensions use: - Message passing - extension communicate different contexts within extension also extensions using methods events: connect() ,onConnect ,onConnectExternal ,sendMessage() ,onMessage andonMessageExternal . addition, extension pass messages native applications user's device usingconnectNative() andsendNativeMessage() . - Accessing extension platform metadata - methods let retrieve several specific pieces metadata extension platform. Methods category include getManifest() , andgetPlatformInfo() . - Managing extension lifecycle options - properties let perform meta-operations extension, display options page. Methods events category include onInstalled ,onStartup ,openOptionsPage() ,reload() ,requestUpdateCheck() , andsetUninstallURL() . - Helper utilities - methods provide utility conversion internal resource representations external formats. Methods category include getURL() . - Kiosk mode utilities - methods available ChromeOS, exist mainly support kiosk implementations. Methods category include restart() andrestartAfterDelay() `. Unpacked extension behavior unpacked extension reloaded, treated update. means chrome.runtime.onInstalled event fire \"update\" reason. includes extension reloaded chrome.runtime.reload() . Use cases Add image web page web page access asset hosted another domain, must specify resource's full URL (e.g. <img src=\"https://example.com/logo.png\"> ). true include extension asset web page. two differences extension's assets must exposed web accessible resources typically content scripts responsible injecting extension assets. example, extension add logo.png page content script injected using runtime.getURL() create fully-qualified URL. first, asset must declared web accessible resource manifest. manifest.json: { ... \"web_accessible_resources\": [ { \"resources\": [ \"logo.png\" ], \"matches\": [ \"https://*/*\" ] } ], ... } content.js: { // Block used avoid setting global variables const img = document.createElement('img'); img.src = chrome.runtime.getURL('logo.png'); document.body.append(img); } Send data content script service worker common extension's content scripts need data managed another part extension, like service worker. Much like two browser windows opened web page, two contexts cannot directly access other's values. Instead, extension use message passing coordinate across different contexts. example, content script needs data extension's service worker initialize UI. get data, passes developer-defined get-user-data message service worker, responds copy user's information. content.js: // 1. Send message service worker requesting user's data chrome.runtime.sendMessage('get-user-data', (response) => { // 3. Got asynchronous response data service worker console.log('received user data', response); initializeUI(response); }); service-worker.js: // Example simple user data object const user = { username: 'demo-user' }; chrome.runtime.onMessage.addListener((message, sender, sendResponse) => { // 2. page requested user data, respond copy `user` (message === 'get-user-data') { sendResponse(user); } }); Gather feedback uninstall Many extensions use post-uninstall surveys understand extension could better serve users improve retention. following example shows add functionality. background.js: chrome.runtime.onInstalled.addListener(details => { (details.reason === chrome.runtime.OnInstalledReason.INSTALL) { chrome.runtime.setUninstallURL('https://example.com/extension-survey'); } }); Examples See Manifest V3 - Web Accessible Resources demo Runtime API examples. Types ContextFilter filter match certain extension contexts. Matching contexts must match specified filters; filter specified matches available contexts. Thus, filter `{}` match available contexts. Properties - contextIds string[] optional - contextTypes ContextType[] optional - documentIds string[] optional - documentOrigins string[] optional - documentUrls string[] optional - frameIds number[] optional - incognito boolean optional - tabIds number[] optional - windowIds number[] optional ContextType Enum \"TAB\" \"POPUP\" \"BACKGROUND\" \"OFFSCREEN_DOCUMENT\" \"SIDE_PANEL\" \"DEVELOPER_TOOLS\" Specifies context type tab Specifies context type extension popup window Specifies context type service worker. Specifies context type offscreen document. Specifies context type side panel. Specifies context type developer tools. ExtensionContext context hosting extension content. Properties - contextId string unique identifier context - contextType type context corresponds to. - documentId string optional UUID document associated context, undefined context hosted document. - documentOrigin string optional origin document associated context, undefined context hosted document. - documentUrl string optional URL document associated context, undefined context hosted document. - frameId number ID frame context, -1 context hosted frame. - incognito boolean Whether context associated incognito profile. - tabId number ID tab context, -1 context hosted tab. - windowId number ID window context, -1 context hosted window. MessageSender object containing information script context sent message request. Properties - documentId string optional Chrome 106+A UUID document opened connection. - documentLifecycle string optional Chrome 106+The lifecycle document opened connection time port created. Note lifecycle state document may changed since port creation. - frameId number optional frame opened connection. 0 top-level frames, positive child frames. set tab set. - id string optional ID extension opened connection, any. - nativeApplication string optional Chrome 74+The name native application opened connection, any. - origin string optional Chrome 80+The origin page frame opened connection. vary url property (e.g., about:blank) opaque (e.g., sandboxed iframes). useful identifying origin trusted can't immediately tell URL. - tab Tab optional tabs.Tab opened connection, any. property present connection opened tab (including content scripts), receiver extension, app. - tlsChannelId string optional TLS channel ID page frame opened connection, requested extension, available. - url string optional URL page frame opened connection. sender iframe, iframe's URL URL page hosts it. OnInstalledReason reason event dispatched. Enum \"install\" \"update\" \"chrome_update\" \"shared_module_update\" Specifies event reason installation. Specifies event reason extension update. Specifies event reason Chrome update. Specifies event reason update shared module. OnRestartRequiredReason reason event dispatched. 'app_update' used restart needed application updated newer version. 'os_update' used restart needed browser/OS updated newer version. 'periodic' used system runs permitted uptime set enterprise policy. Enum \"app_update\" \"os_update\" \"periodic\" Specifies event reason update app. Specifies event reason update operating system. Specifies event reason periodic restart app. PlatformArch machine's processor architecture. Enum \"arm\" \"arm64\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies processer architecture arm. Specifies processer architecture arm64. Specifies processer architecture x86-32. Specifies processer architecture x86-64. Specifies processer architecture mips. Specifies processer architecture mips64. PlatformInfo object containing information current platform. Properties - arch machine's processor architecture. - nacl_arch native client architecture. may different arch platforms. - os operating system Chrome running on. PlatformNaclArch native client architecture. may different arch platforms. Enum \"arm\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies native client architecture arm. Specifies native client architecture x86-32. Specifies native client architecture x86-64. Specifies native client architecture mips. Specifies native client architecture mips64. PlatformOs operating system Chrome running on. Enum \"mac\" \"win\" \"android\" \"cros\" \"linux\" \"openbsd\" \"fuchsia\" Specifies MacOS operating system. Specifies Windows operating system. Specifies Android operating system. Specifies Chrome operating system. Specifies Linux operating system. Specifies OpenBSD operating system. Specifies Fuchsia operating system. Port object allows two way communication pages. See Long-lived connections information. Properties - name string name port, specified call runtime.connect . - onDisconnect Event<functionvoidvoid> Fired port disconnected end(s). runtime.lastError may set port disconnected error. port closed via disconnect, event fired end. event fired (see also Port lifetime).The onDisconnect.addListener function looks like:(callback: function) => {...} - onMessage Event<functionvoidvoid> event fired postMessage called end port. onMessage.addListener function looks like:(callback: function) => {...} - sender MessageSender optional property present ports passed onConnect / onConnectExternal / onConnectNative listeners. - disconnect void Immediately disconnect port. Calling disconnect() already-disconnected port effect. port disconnected, new events dispatched port.The disconnect function looks like:() => {...} - postMessage void Send message end port. port disconnected, error thrown. postMessage function looks like:(message: any) => {...} - message Chrome 52+The message send. object JSON-ifiable. - RequestUpdateCheckStatus Result update check. Enum \"throttled\" \"no_update\" \"update_available\" Specifies status check throttled. occur repeated checks within short amount time. Specifies available updates install. Specifies available update install. Properties id ID extension/app. Type string lastError Populated error message calling API function fails; otherwise undefined. defined within scope function's callback. error produced, runtime.lastError accessed within callback, message logged console listing API function produced error. API functions return promises set property. Type object Properties - message string optional Details error occurred. Methods connect() chrome.runtime.connect( extensionId?: string, connectInfo?: object, ) Attempts connect listeners within extension (such background page), extensions/apps. useful content scripts connecting extension processes, inter-app/extension communication, web messaging. Note connect listeners content script. Extensions may connect content scripts embedded tabs via tabs.connect . Parameters - extensionId string optional ID extension connect to. omitted, connection attempted extension. Required sending messages web page web messaging. - connectInfo object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onConnectExternal processes listening connection event. - name string optional passed onConnect processes listening connection event. - Returns - Port messages sent received. port's onDisconnect event fired extension exist. connectNative() chrome.runtime.connectNative( application: string, ) Connects native application host machine. method requires \"nativeMessaging\" permission. See Native Messaging information. Parameters - application string name registered application connect to. Returns - Port messages sent received application getBackgroundPage() chrome.runtime.getBackgroundPage( callback?: function, ) Background pages exist MV3 extensions. Retrieves JavaScript 'window' object background page running inside current extension/app. background page event page, system ensure loaded calling callback. background page, error set. Parameters - callback function optional callback parameter looks like:(backgroundPage?: Window) => void - backgroundPage Window optional JavaScript 'window' object background page. - Returns - Promise<Window | undefined> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getContexts() chrome.runtime.getContexts( filter: ContextFilter, callback?: function, ) Fetches information active contexts associated extension Parameters - filter filter find matching contexts. context matches matches specified fields filter. unspecified field filter matches contexts. - callback function optional callback parameter looks like:(contexts: ExtensionContext[]) => void - contexts matching contexts, any. - Returns - Promise<ExtensionContext[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getManifest() chrome.runtime.getManifest() Returns details app extension manifest. object returned serialization full manifest file. Returns - object manifest details. getPackageDirectoryEntry() chrome.runtime.getPackageDirectoryEntry( callback?: function, ) Returns DirectoryEntry package directory. Parameters - callback function optional callback parameter looks like:(directoryEntry: DirectoryEntry) => void - directoryEntry DirectoryEntry - Returns - Promise<DirectoryEntry> Chrome 122+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPlatformInfo() chrome.runtime.getPlatformInfo( callback?: function, ) Returns information current platform. Parameters - callback function optional callback parameter looks like:(platformInfo: PlatformInfo) => void - platformInfo - Returns - Promise<PlatformInfo> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getURL() chrome.runtime.getURL( path: string, ) Converts relative path within app/extension install directory fully-qualified URL. Parameters - path string path resource within app/extension expressed relative install directory. Returns - string fully-qualified URL resource. openOptionsPage() chrome.runtime.openOptionsPage( callback?: function, ) Open Extension's options page, possible. precise behavior may depend manifest's options_ui options_page key, Chrome happens support time. example, page may opened new tab, within chrome://extensions, within App, may focus open options page. never cause caller page reload. Extension declare options page, Chrome failed create one reason, callback set lastError . Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.runtime.reload() Reloads app extension. method supported kiosk mode. kiosk mode, use chrome.runtime.restart() method. requestUpdateCheck() chrome.runtime.requestUpdateCheck( callback?: function, ) Requests immediate update check done app/extension. Important: extensions/apps use method, since Chrome already automatic checks every hours, listen runtime.onUpdateAvailable event without needing call requestUpdateCheck. method appropriate call limited circumstances, extension talks backend service, backend service determined client extension version far date like prompt user update. uses requestUpdateCheck, calling unconditionally based repeating timer, probably serve waste client, network, server resources. Note: called callback, instead returning object function return two properties separate arguments passed callback. Parameters - callback function optional callback parameter looks like:(result: object) => void - result object Chrome 109+RequestUpdateCheckResult object holds status update check details result update available - status Result update check. - version string optional update available, contains version available update. - - Returns - Promise<object> Chrome 109+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restart() chrome.runtime.restart() Restart ChromeOS device app runs kiosk mode. Otherwise, no-op. restartAfterDelay() chrome.runtime.restartAfterDelay( seconds: number, callback?: function, ) Restart ChromeOS device app runs kiosk mode given seconds. called time ends, reboot delayed. called value -1, reboot cancelled. no-op non-kiosk mode. allowed called repeatedly first extension invoke API. Parameters - seconds number Time wait seconds rebooting device, -1 cancel scheduled reboot. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.runtime.sendMessage( extensionId?: string, message: any, options?: object, callback?: function, ) Sends single message event listeners within extension different extension/app. Similar runtime.connect sends single message, optional response. sending extension, runtime.onMessage event fired every frame extension (except sender's frame), runtime.onMessageExternal , different extension. Note extensions cannot send messages content scripts using method. send messages content scripts, use tabs.sendMessage . Parameters - extensionId string optional ID extension send message to. omitted, message sent extension/app. Required sending messages web page web messaging. - message message send. message JSON-ifiable object. - options object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onMessageExternal processes listening connection event. - - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting extension, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendNativeMessage() chrome.runtime.sendNativeMessage( application: string, message: object, callback?: function, ) Send single message native application. method requires \"nativeMessaging\" permission. Parameters - application string name native messaging host. - message object message passed native messaging host. - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response response message sent native messaging host. error occurs connecting native messaging host, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUninstallURL() chrome.runtime.setUninstallURL( url: string, callback?: function, ) Sets URL visited upon uninstallation. may used clean server-side data, analytics, implement surveys. Maximum 1023 characters. Parameters - url string URL opened extension uninstalled. URL must http: https: scheme. Set empty string open new tab upon uninstallation. - callback function optional Chrome 45+The callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBrowserUpdateAvailable chrome.runtime.onBrowserUpdateAvailable.addListener( callback: function, ) Please use runtime.onRestartRequired . Fired Chrome update available, installed immediately browser restart required. Parameters - callback function callback parameter looks like:() => void onConnect chrome.runtime.onConnect.addListener( callback: function, ) Fired connection made either extension process content script (by runtime.connect ). onConnectExternal chrome.runtime.onConnectExternal.addListener( callback: function, ) Fired connection made another extension (by runtime.connect ), externally connectable web site. onConnectNative chrome.runtime.onConnectNative.addListener( callback: function, ) Fired connection made native application. event requires \"nativeMessaging\" permission. supported Chrome OS. onInstalled chrome.runtime.onInstalled.addListener( callback: function, ) Fired extension first installed, extension updated new version, Chrome updated new version. Parameters - callback function callback parameter looks like:(details: object) => void - details object - id string optional Indicates ID imported shared module extension updated. present 'reason' 'shared_module_update'. - previousVersion string optional Indicates previous version extension, updated. present 'reason' 'update'. - reason reason event dispatched. - - onMessage chrome.runtime.onMessage.addListener( callback: function, ) Fired message sent either extension process (by runtime.sendMessage ) content script (by tabs.sendMessage ). Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onMessageExternal chrome.runtime.onMessageExternal.addListener( callback: function, ) Fired message sent another extension (by runtime.sendMessage ). Cannot used content script. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onRestartRequired chrome.runtime.onRestartRequired.addListener( callback: function, ) Fired app device runs needs restarted. app close windows earliest convenient time let restart happen. app nothing, restart enforced 24-hour grace period passed. Currently, event fired Chrome OS kiosk apps. Parameters - callback function callback parameter looks like:(reason: OnRestartRequiredReason) => void - reason - onStartup chrome.runtime.onStartup.addListener( callback: function, ) Fired profile extension installed first starts up. event fired incognito profile started, even extension operating 'split' incognito mode. Parameters - callback function callback parameter looks like:() => void onSuspend chrome.runtime.onSuspend.addListener( callback: function, ) Sent event page unloaded. gives extension opportunity clean up. Note since page unloading, asynchronous operations started handling event guaranteed complete. activity event page occurs gets unloaded onSuspendCanceled event sent page unloaded. Parameters - callback function callback parameter looks like:() => void onSuspendCanceled chrome.runtime.onSuspendCanceled.addListener( callback: function, ) Sent onSuspend indicate app unloaded all. Parameters - callback function callback parameter looks like:() => void onUpdateAvailable chrome.runtime.onUpdateAvailable.addListener( callback: function, ) Fired update available, installed immediately app currently running. nothing, update installed next time background page gets unloaded, want installed sooner explicitly call chrome.runtime.reload(). extension using persistent background page, background page course never gets unloaded, unless call chrome.runtime.reload() manually response event update get installed next time Chrome restarts. handlers listening event, extension persistent background page, behaves chrome.runtime.reload() called response event. Parameters - callback function callback parameter looks like:(details: object) => void - details object - version string version number available update. - - onUserScriptConnect chrome.runtime.onUserScriptConnect.addListener( callback: function, ) Fired connection made user script extension. onUserScriptMessage chrome.runtime.onUserScriptMessage.addListener( callback: function, ) Fired message sent user script associated extension. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/scripting", "title": "chrome.scripting | API | Chrome for Developers", "text": "Description Use chrome.scripting API execute script different contexts. Permissions scripting Availability Manifest use chrome.scripting API, declare \"scripting\" permission manifest plus host permissions pages inject scripts into. Use \"host_permissions\" key \"activeTab\" permission, grants temporary host permissions. following example uses activeTab permission. { \"name\": \"Scripting Extension\", \"manifest_version\": 3, \"permissions\": [\"scripting\", \"activeTab\"], ... } Concepts usage use chrome.scripting API inject JavaScript CSS websites. similar content scripts. using chrome.scripting namespace, extensions make decisions runtime. Injection targets use target parameter specify target inject JavaScript CSS into. required field tabId . default, injection run main frame specified tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected\")); run frames specified tab, set allFrames boolean true . function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected frames\")); also inject specific frames tab specifying individual frame IDs. information frame IDs, see chrome.webNavigation API. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), frameIds : [ frameId1, frameId2 ]}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected target frames\")); Injected code Extensions specify code injected either via external file runtime variable. Files Files specified strings paths relative extension's root directory. following code inject file script.js main frame tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"injected script file\")); Runtime functions injecting JavaScript scripting.executeScript() , specify function executed instead file. function function variable available current extension context. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : getTitle, }) .then(() => console.log(\"injected function\")); function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor() { document.body.style.backgroundColor = getUserColor(); } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, }) .then(() => console.log(\"injected function\")); work around using args property: function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor(backgroundColor) { document.body.style.backgroundColor = backgroundColor; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, args : [ getUserColor() ], }) .then(() => console.log(\"injected function\")); Runtime strings injecting CSS within page, also specify string used css property. option available scripting.insertCSS() ; can't execute string using scripting.executeScript() . function getTabId() { ... } const css = \"body { background-color: red; }\"; chrome.scripting .insertCSS({ target : {tabId : getTabId()}, css : css, }) .then(() => console.log(\"CSS injected\")); Handle results results executing JavaScript passed extension. single result included per-frame. main frame guaranteed first index resulting array; frames non-deterministic order. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : getTitle, }) .then(injectionResults => { (const {frameId, result} injectionResults) { console.log(`Frame ${frameId} result:`, result); } }); scripting.insertCSS() return results. Promises resulting value script execution promise, Chrome wait promise settle return resulting value. function getTabId() { ... } async function addIframe() { const iframe = document.createElement(\"iframe\"); const loadComplete = new Promise(resolve => iframe.addEventListener(\"load\", resolve)); iframe.src = \"https://example.com\"; document.body.appendChild(iframe); await loadComplete; return iframe.contentWindow.document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : addIframe, }) .then(injectionResults => { (const frameResult injectionResults) { const {frameId, result} = frameResult; console.log(`Frame ${frameId} result:`, result); } }); Examples Unregister dynamic content scripts following snippet contains function unregisters dynamic content scripts extension previously registered. async function unregisterAllDynamicContentScripts() { try { const scripts = await chrome.scripting.getRegisteredContentScripts(); const scriptIds = scripts.map(script => script.id); return chrome.scripting.unregisterContentScripts(scriptIds); } catch (error) { const message = [ \"An unexpected error occurred while\", \"unregistering dynamic content scripts.\", ].join(\" \"); throw new Error(message, {cause : error}); } } try chrome.scripting API, install scripting sample Chrome extension samples repository. Types ContentScriptFilter Properties - ids string[] optional specified, getRegisteredContentScripts return scripts id specified list. CSSInjection Properties - css string optional string containing CSS inject. Exactly one files andcss must specified. - files string[] optional path CSS files inject, relative extension's root directory. Exactly one files andcss must specified. - origin StyleOrigin optional style origin injection. Defaults 'AUTHOR' . - target Details specifying target insert CSS. ExecutionWorld JavaScript world script execute within. Enum \"ISOLATED\" \"MAIN\" Specifies isolated world, execution environment unique extension. Specifies main world DOM, execution environment shared host page's JavaScript. InjectionResult Properties - documentId string Chrome 106+The document associated injection. - frameId number Chrome 90+The frame associated injection. - result optional result script execution. InjectionTarget Properties - allFrames boolean optional Whether script inject frames within tab. Defaults false. must true frameIds specified. - documentIds string[] optional Chrome 106+The IDs specific documentIds inject into. must set frameIds set. - frameIds number[] optional IDs specific frames inject into. - tabId number ID tab inject. RegisteredContentScript Properties - allFrames boolean optional specified true, inject frames, even frame top-most frame tab. frame checked independently URL requirements; inject child frames URL requirements met. Defaults false, meaning top frame matched. - css string[] optional list CSS files injected matching pages. injected order appear array, DOM constructed displayed page. - excludeMatches string[] optional Excludes pages content script would otherwise injected into. See Match Patterns details syntax strings. - id string id content script, specified API call. Must start '_' reserved prefix generated script IDs. - js string[] optional list JavaScript files injected matching pages. injected order appear array. - matchOriginAsFallback boolean optional Chrome 119+Indicates whether script injected frames URL contains unsupported scheme; specifically: about:, data:, blob:, filesystem:. cases, URL's origin checked determine script injected. origin null (as case data: URLs) used origin either frame created current frame frame initiated navigation frame. Note may parent frame. - matches string[] optional Specifies pages content script injected into. See Match Patterns details syntax strings. Must specified registerContentScripts . - persistAcrossSessions boolean optional Specifies content script persist future sessions. default true. - runAt RunAt optional Specifies JavaScript files injected web page. preferred default value document_idle . - world ExecutionWorld optional Chrome 102+The JavaScript \"world\" run script in. Defaults ISOLATED . ScriptInjection Properties - args any[] optional Chrome 92+The arguments pass provided function. valid func parameter specified. arguments must JSON-serializable. - files string[] optional path JS CSS files inject, relative extension's root directory. Exactly one files orfunc must specified. - injectImmediately boolean optional Chrome 102+Whether injection triggered target soon possible. Note guarantee injection occur prior page load, page may already loaded time script reaches target. - target Details specifying target inject script. - world ExecutionWorld optional Chrome 95+The JavaScript \"world\" run script in. Defaults ISOLATED . - func void optional Chrome 92+A JavaScript function inject. function serialized, deserialized injection. means bound parameters execution context lost. Exactly one files orfunc must specified.The func function looks like:() => {...} StyleOrigin origin style change. See style origins info. Enum \"AUTHOR\" \"USER\" Methods executeScript() chrome.scripting.executeScript( injection: ScriptInjection, callback?: function, ) Injects script target context. default, script run document_idle , immediately page already loaded. injectImmediately property set, script inject without waiting, even page finished loading. script evaluates promise, browser wait promise settle return resulting value. Parameters - injection details script inject. - callback function optional callback parameter looks like:(results: InjectionResult[]) => void - results - Returns - Promise<InjectionResult[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRegisteredContentScripts() chrome.scripting.getRegisteredContentScripts( filter?: ContentScriptFilter, callback?: function, ) Returns dynamically registered content scripts extension match given filter. Parameters - filter ContentScriptFilter optional object filter extension's dynamically registered scripts. - callback function optional callback parameter looks like:(scripts: RegisteredContentScript[]) => void - scripts - Returns - Promise<RegisteredContentScript[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. insertCSS() chrome.scripting.insertCSS( injection: CSSInjection, callback?: function, ) Inserts CSS stylesheet target context. multiple frames specified, unsuccessful injections ignored. Parameters - injection details styles insert. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. registerContentScripts() chrome.scripting.registerContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Registers one content scripts extension. Parameters - scripts Contains list scripts registered. errors script parsing/file validation, IDs specified already exist, scripts registered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCSS() chrome.scripting.removeCSS( injection: CSSInjection, callback?: function, ) Removes CSS stylesheet previously inserted extension target context. Parameters - injection details styles remove. Note css ,files , andorigin properties must exactly match stylesheet inserted throughinsertCSS . Attempting remove non-existent stylesheet no-op. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unregisterContentScripts() chrome.scripting.unregisterContentScripts( filter?: ContentScriptFilter, callback?: function, ) Unregisters content scripts extension. Parameters - filter ContentScriptFilter optional specified, unregisters dynamic content scripts match filter. Otherwise, extension's dynamic content scripts unregistered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateContentScripts() chrome.scripting.updateContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Updates one content scripts extension. Parameters - scripts Contains list scripts updated. property updated existing script specified object. errors script parsing/file validation, IDs specified correspond fully registered script, scripts updated. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/search", "title": "chrome.search | API | Chrome for Developers", "text": "Description Use chrome.search API search via default provider. Permissions search Availability Types Disposition Enum \"CURRENT_TAB\" \"NEW_TAB\" \"NEW_WINDOW\" Specifies search results display calling tab tab active browser. Specifies search results display new tab. Specifies search results display new window. QueryInfo Properties - disposition Disposition optional Location search results displayed. CURRENT_TAB default. - tabId number optional Location search results displayed. tabId cannot used withdisposition . - text string String query default search provider. Methods query() chrome.search.query( queryInfo: QueryInfo, callback?: function, ) Used query default search provider. case error, runtime.lastError set. Parameters - queryInfo - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/sessions", "title": "chrome.sessions | API | Chrome for Developers", "text": "Description Use chrome.sessions API query restore tabs windows browsing session. Permissions sessions Types Device Properties - deviceName string name foreign device. - sessions Session[] list open window sessions foreign device, sorted recently least recently modified session. Filter Properties - maxResults number optional maximum number entries fetched requested list. Omit parameter fetch maximum number entries ( sessions.MAX_SESSION_RESULTS ). Session Properties - lastModified number time window tab closed modified, represented milliseconds since epoch. - tab Tab optional tabs.Tab , entry describes tab. Either orsessions.Session.window set. - window Window optional windows.Window , entry describes window. Either orsessions.Session.tab set. Properties MAX_SESSION_RESULTS maximum number sessions.Session included requested list. Value 25 Methods getDevices() chrome.sessions.getDevices( filter?: Filter, callback?: function, ) Retrieves devices synced sessions. Parameters - filter Filter optional - callback function optional callback parameter looks like:(devices: Device[]) => void - devices Device[] list sessions.Device objects synced session, sorted order device recently modified session device least recently modified session.tabs.Tab objects sorted recency thewindows.Window thesessions.Session objects. - Returns - Promise<Device[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRecentlyClosed() chrome.sessions.getRecentlyClosed( filter?: Filter, callback?: function, ) Gets list recently closed tabs and/or windows. Parameters - filter Filter optional - callback function optional callback parameter looks like:(sessions: Session[]) => void - sessions Session[] list closed entries reverse order closed (the recently closed tab window index 0 ). entries may contain either tabs windows. - Returns - Promise<Session[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restore() chrome.sessions.restore( sessionId?: string, callback?: function, ) Reopens windows.Window tabs.Tab , optional callback run entry restored. Parameters - sessionId string optional windows.Window.sessionId , ortabs.Tab.sessionId restore. parameter specified, recently closed session restored. - callback function optional callback parameter looks like:(restoredSession: Session) => void - restoredSession sessions.Session containing restoredwindows.Window ortabs.Tab object. - Returns - Promise<Session> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onChanged chrome.sessions.onChanged.addListener( callback: function, ) Fired recently closed tabs and/or windows changed. event monitor synced sessions changes. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/sessions", "title": "chrome.sessions | API | Chrome for Developers", "text": "Description Use chrome.sessions API query restore tabs windows browsing session. Permissions sessions Types Device Properties - deviceName string name foreign device. - sessions Session[] list open window sessions foreign device, sorted recently least recently modified session. Filter Properties - maxResults number optional maximum number entries fetched requested list. Omit parameter fetch maximum number entries ( sessions.MAX_SESSION_RESULTS ). Session Properties - lastModified number time window tab closed modified, represented milliseconds since epoch. - tab Tab optional tabs.Tab , entry describes tab. Either orsessions.Session.window set. - window Window optional windows.Window , entry describes window. Either orsessions.Session.tab set. Properties MAX_SESSION_RESULTS maximum number sessions.Session included requested list. Value 25 Methods getDevices() chrome.sessions.getDevices( filter?: Filter, callback?: function, ) Retrieves devices synced sessions. Parameters - filter Filter optional - callback function optional callback parameter looks like:(devices: Device[]) => void - devices Device[] list sessions.Device objects synced session, sorted order device recently modified session device least recently modified session.tabs.Tab objects sorted recency thewindows.Window thesessions.Session objects. - Returns - Promise<Device[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRecentlyClosed() chrome.sessions.getRecentlyClosed( filter?: Filter, callback?: function, ) Gets list recently closed tabs and/or windows. Parameters - filter Filter optional - callback function optional callback parameter looks like:(sessions: Session[]) => void - sessions Session[] list closed entries reverse order closed (the recently closed tab window index 0 ). entries may contain either tabs windows. - Returns - Promise<Session[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restore() chrome.sessions.restore( sessionId?: string, callback?: function, ) Reopens windows.Window tabs.Tab , optional callback run entry restored. Parameters - sessionId string optional windows.Window.sessionId , ortabs.Tab.sessionId restore. parameter specified, recently closed session restored. - callback function optional callback parameter looks like:(restoredSession: Session) => void - restoredSession sessions.Session containing restoredwindows.Window ortabs.Tab object. - Returns - Promise<Session> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onChanged chrome.sessions.onChanged.addListener( callback: function, ) Fired recently closed tabs and/or windows changed. event monitor synced sessions changes. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/sidePanel", "title": "chrome.sidePanel | API | Chrome for Developers", "text": "Description Use chrome.sidePanel API host content browser's side panel alongside main content webpage. Permissions sidePanel use Side Panel API, add \"sidePanel\" permission extension manifest file: manifest.json: { \"name\": \"My side panel extension\", ... \"permissions\": [ \"sidePanel\" ] } Availability Concepts usage Side Panel API allows extensions display UI side panel, enabling persistent experiences complement user's browsing journey. features include: - side panel remains open navigating tabs (if set so). - available specific websites. - extension page, side panels access Chrome APIs. - Within Chrome's settings, users specify side panel displayed on. Use cases following sections demonstrate common use cases Side Panel API. See Extension samples complete extension examples. Display side panel every site side panel set initially \"default_path\" property \"side_panel\" key manifest display side panel every site. point relative path within extension directory. manifest.json: { \"name\": \"My side panel extension\", ... \"side_panel\": { \"default_path\": \"sidepanel.html\" } ... } sidepanel.html: <!DOCTYPE html> <html> <head> <title>My Sidepanel</title> </head> <body> <h1>All sites sidepanel extension</h1> <p>This side panel enabled sites</p> </body> </html> Enable side panel specific site extension use sidepanel.setOptions() enable side panel specific tab. example uses chrome.tabs.onUpdated() listen updates made tab. checks URL www.google.com enables side panel. Otherwise, disables it. service-worker.js: const GOOGLE_ORIGIN = 'https://www.google.com'; chrome.tabs.onUpdated.addListener(async (tabId, info, tab) => { (!tab.url) return; const url = new URL(tab.url); // Enables side panel google.com (url.origin === GOOGLE_ORIGIN) { await chrome.sidePanel.setOptions({ tabId, path: 'sidepanel.html', enabled: true }); } else { // Disables side panel sites await chrome.sidePanel.setOptions({ tabId, enabled: false }); } }); user temporarily switches tab side panel enabled, side panel hidden. automatically show user switches tab previously open. user navigates site side panel enabled, side panel close, extension show side panel drop-down menu. complete example, see Tab-specific side panel sample. Open side panel clicking toolbar icon Developers allow users open side panel click action toolbar icon sidePanel.setPanelBehavior() . First, declare \"action\" key manifest: manifest.json: { \"name\": \"My side panel extension\", ... \"action\": { \"default_title\": \"Click open panel\" }, ... } Now, add code previous example: service-worker.js: const GOOGLE_ORIGIN = 'https://www.google.com'; // Allows users open side panel clicking action toolbar icon chrome.sidePanel .setPanelBehavior({ openPanelOnActionClick: true }) .catch((error) => console.error(error)); ... Programmatically open side panel user interaction Chrome 116 introduces sidePanel.open() . allows extensions open side panel extension user gesture, clicking action icon. user interaction extension page content script, clicking button. complete demo, see Open Side Panel sample extension. following code shows open global side panel current window user clicks context menu. using sidePanel.open() , must choose context open. Use windowId open global side panel. Alternatively, set tabId open side panel specific tab. service-worker.js: chrome.runtime.onInstalled.addListener(() => { chrome.contextMenus.create({ id: 'openSidePanel', title: 'Open side panel', contexts: ['all'] }); }); chrome.contextMenus.onClicked.addListener((info, tab) => { (info.menuItemId === 'openSidePanel') { // open panel pages current window. chrome.sidePanel.open({ windowId: tab.windowId }); } }); Switch different panel Extensions use sidepanel.getOptions() retrieve current side panel. following example sets welcome side panel runtime.onInstalled() . user navigates different tab, replaces main side panel. service-worker.js: const welcomePage = 'sidepanels/welcome-sp.html'; const mainPage = 'sidepanels/main-sp.html'; chrome.runtime.onInstalled.addListener(() => { chrome.sidePanel.setOptions({ path: welcomePage }); chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true }); }); chrome.tabs.onActivated.addListener(async ({ tabId }) => { const { path } = await chrome.sidePanel.getOptions({ tabId }); (path === welcomePage) { chrome.sidePanel.setOptions({ path: mainPage }); } }); See Multiple side panels sample full code. Side panel user experience Users see Chrome's built-in side panels first. side panel displays extension's icon side panel menu. icons included, show placeholder icon first letter extension's name. Open side panel allow users open side panel, use action icon combination sidePanel.setPanelBehavior() . Alternatively, make call sidePanel.open() following user interaction, as: - action click - keyboard shortcut - context menu - user gesture extension page content script. Pin side panel side panel toolbar displays pin icon side panel open. Clicking icon pins extension's action icon. Clicking action icon pinned perform default action action icon open side panel explicitly configured. Examples Side Panel API extensions demos, explore following extensions: - Dictionary side panel. - Global side panel. - Multiple side panels. - Open Side panel. - Site-specific side panel. Types GetPanelOptions Properties - tabId number optional specified, side panel options given tab returned. Otherwise, returns default side panel options (used tab specific settings). OpenOptions Properties - tabId number optional tab open side panel. corresponding tab tab-specific side panel, panel open tab. tab-specific panel, global panel open specified tab tabs without currently-open tab- specific panel. override currently-active side panel (global tab-specific) corresponding tab. least one windowId must provided. - windowId number optional window open side panel. applicable extension global (non-tab-specific) side panel tabId also specified. override currently-active global side panel user open given window. least one ortabId must provided. PanelBehavior Properties - openPanelOnActionClick boolean optional Whether clicking extension's icon toggle showing extension's entry side panel. Defaults false. PanelOptions Properties - enabled boolean optional Whether side panel enabled. optional. default value true. - path string optional path side panel HTML file use. must local resource within extension package. - tabId number optional specified, side panel options apply tab id. omitted, options set default behavior (used tab specific settings). Note: path set tabId default tabId, panel tabId different instance panel default tabId. SidePanel Properties - default_path string Developer specified path side panel display. Methods getOptions() chrome.sidePanel.getOptions( options: GetPanelOptions, callback?: function, ) Returns active panel configuration. Parameters - options Specifies context return configuration for. - callback function optional callback parameter looks like:(options: PanelOptions) => void - options - Returns - Promise<PanelOptions> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPanelBehavior() chrome.sidePanel.getPanelBehavior( callback?: function, ) Returns extension's current side panel behavior. Parameters - callback function optional callback parameter looks like:(behavior: PanelBehavior) => void - behavior - Returns - Promise<PanelBehavior> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. open() chrome.sidePanel.open( options: OpenOptions, callback?: function, ) Opens side panel extension. may called response user action. Parameters - options Specifies context open side panel. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setOptions() chrome.sidePanel.setOptions( options: PanelOptions, callback?: function, ) Configures side panel. Parameters - options configuration options apply panel. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setPanelBehavior() chrome.sidePanel.setPanelBehavior( behavior: PanelBehavior, callback?: function, ) Configures extension's side panel behavior. upsert operation. Parameters - behavior new behavior set. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/storage", "title": "chrome.storage | API | Chrome for Developers", "text": "Description Use chrome.storage API store, retrieve, track changes user data. Permissions storage use storage API, declare \"storage\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"storage\" ], ... } Concepts usage Storage API provides extension-specific way persist user data state. similar web platform's storage APIs (IndexedDB, Storage), designed meet storage needs extensions. following key features: - extension contexts, including extension service worker content scripts access Storage API. - JSON serializable values stored object properties. - Storage API asynchronous bulk read write operations. - Even user clears cache browsing history, data persists. - Stored settings persist even using split incognito. - Includes exclusive read-only managed storage area enterprise policies. extensions use web storage APIs? extensions use Storage interface (accessible window.localStorage ) contexts (popup HTML pages), recommend following reasons: - Extension service workers can't use Web Storage API. - Content scripts share storage host page. - Data saved using Web Storage API lost user clears browsing history. move data web storage APIs extension storage APIs service worker: - Prepare offscreen document html page script file. script file contain conversion routine onMessage handler. - extension service worker, check chrome.storage data. - data found, call createDocument() . - returned Promise resolves, call sendMessage() start conversion routine. - Inside offscreen document's onMessage handler, call conversion routine. also nuances web storage APIs work extensions. Learn Storage Cookies article. Storage areas Storage API divided following storage areas: storage.local - Data stored locally cleared extension removed. storage limit 10 MB (5 MB Chrome 113 earlier), increased requesting \"unlimitedStorage\" permission. recommend usingstorage.local store larger amounts data. storage.managed - Managed storage read-only storage policy installed extensions managed system administrators using developer-defined schema enterprise policies. Policies analogous options configured system administrator instead user, allowing extension preconfigured users organization. information policies, see Documentation Administrators. learn managed storage area, see Manifest storage areas. storage.session - Holds data memory duration browser session. default, exposed content scripts, behavior changed setting chrome.storage.session.setAccessLevel() . storage limit 10 MB (1 MB Chrome 111 earlier). Thestorage.session interface one several recommend service workers. storage.sync - syncing enabled, data synced Chrome browser user logged into. disabled, behaves like storage.local . Chrome stores data locally browser offline resumes syncing back online. quota limitation approximately 100 KB, 8 KB per item. recommend usingstorage.sync preserve user settings across synced browsers. working sensitive user data, instead usestorage.session . Storage throttling limits Storage API following usage limitations: - Storing data often comes performance costs, API includes storage quotas. recommend careful data store lose ability store data. - Storage take time complete. Make sure structure code account time. details storage area limitations happens they're exceeded, see quota information sync , local , session . Use cases following sections demonstrate common use cases Storage API. Synchronous response storage updates track changes made storage, add listener onChanged event. anything changes storage, event fires. sample code listens changes: background.js: chrome.storage.onChanged.addListener((changes, namespace) => { (let [key, { oldValue, newValue }] Object.entries(changes)) { console.log( `Storage key \"${key}\" namespace \"${namespace}\" changed.`, `Old value \"${oldValue}\", new value \"${newValue}\".` ); } }); take idea even further. example, options page allows user toggle \"debug mode\" (implementation shown here). options page immediately saves new settings storage.sync , service worker uses storage.onChanged apply setting soon possible. options.html: <!-- type=\"module\" allows use top level await --> <script defer src=\"options.js\" type=\"module\"></script> <form id=\"optionsForm\"> <label for=\"debug\"> <input type=\"checkbox\" name=\"debug\" id=\"debug\"> Enable debug mode </label> </form> options.js: // In-page cache user's options const options = {}; const optionsForm = document.getElementById(\"optionsForm\"); // Immediately persist options changes optionsForm.debug.addEventListener(\"change\", (event) => { options.debug = event.target.checked; chrome.storage.sync.set({ options }); }); // Initialize form user's option settings const data = await chrome.storage.sync.get(\"options\"); Object.assign(options, data.options); optionsForm.debug.checked = Boolean(options.debug); background.js: function setDebugMode() { /* ... */ } // Watch changes user's options & apply chrome.storage.onChanged.addListener((changes, area) => { (area === 'sync' && changes.options?.newValue) { const debugMode = Boolean(changes.options.newValue.debug); console.log('enable debug mode?', debugMode); setDebugMode(debugMode); } }); Asynchronous preload storage service workers run time, Manifest V3 extensions sometimes need asynchronously load data storage execute event handlers. this, following snippet uses async action.onClicked event handler waits storageCache global populated executing logic. background.js: // expose data retrieve storage.sync. const storageCache = { count: 0 }; // Asynchronously retrieve data storage.sync, cache it. const initStorageCache = chrome.storage.sync.get().then((items) => { // Copy data retrieved storage storageCache. Object.assign(storageCache, items); }); chrome.action.onClicked.addListener(async (tab) => { try { await initStorageCache; } catch (e) { // Handle error occurred storage initialization. } // Normal action handler logic. storageCache.count++; storageCache.lastTabId = tab.id; chrome.storage.sync.set(storageCache); }); Examples following samples demonstrate local , sync , session storage areas: Local chrome.storage.local.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.local.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); Sync chrome.storage.sync.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.sync.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); Session chrome.storage.session.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.session.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); see demos Storage API, explore following samples: Types AccessLevel storage area's access level. Enum \"TRUSTED_CONTEXTS\" \"TRUSTED_AND_UNTRUSTED_CONTEXTS\" Specifies contexts originating extension itself. Specifies contexts originating outside extension. StorageArea Properties - onChanged Event<functionvoidvoid> Chrome 73+Fired one items change. onChanged.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(changes: object) => void - changes object - - - clear void PromiseRemoves items storage. clear function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets one items storage. get function looks like:(keys?: string | string[] | object, callback?: function) => {...} - keys string | string[] | object optional single key get, list keys get, dictionary specifying default values (see description object). empty list object return empty result object. Pass null get entire contents storage. - callback function optional callback parameter looks like:(items: object) => void - items object Object items key-value mappings. - - returns Promise<object> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getBytesInUse void PromiseGets amount space (in bytes) used one items. getBytesInUse function looks like:(keys?: string | string[], callback?: function) => {...} - keys string | string[] optional single key list keys get total usage for. empty list return 0. Pass null get total usage storage. - callback function optional callback parameter looks like:(bytesInUse: number) => void - bytesInUse number Amount space used storage, bytes. - - returns Promise<number> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getKeys void Promise Chrome 130+Gets keys storage. getKeys function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:(keys: string[]) => void - keys string[] Array keys read storage. - - returns Promise<string[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - remove void PromiseRemoves one items storage. remove function looks like:(keys: string | string[], callback?: function) => {...} - keys string | string[] single key list keys items remove. - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseSets multiple items. set function looks like:(items: object, callback?: function) => {...} - items object object gives key/value pair update storage with. key/value pairs storage affected. Primitive values numbers serialize expected. Values typeof \"object\" and\"function\" typically serialize to{} , exception ofArray (serializes expected),Date , andRegex (serialize using theirString representation). - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - setAccessLevel void Promise Chrome 102+Sets desired access level storage area. default trusted contexts. setAccessLevel function looks like:(accessOptions: object, callback?: function) => {...} - accessOptions object - accessLevel access level storage area. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - StorageChange Properties - newValue optional new value item, new value. - oldValue optional old value item, old value. Properties local Items local storage area local machine. Type StorageArea & object Properties - QUOTA_BYTES 10485760 maximum amount (in bytes) data stored local storage, measured JSON stringification every value plus every key's length. value ignored extension unlimitedStorage permission. Updates would cause limit exceeded fail immediately setruntime.lastError using callback, rejected Promise using async/await. managed Items managed storage area set enterprise policy configured domain administrator, read-only extension; trying modify namespace results error. information configuring policy, see Manifest storage areas. Type session Items session storage area stored in-memory persisted disk. Type StorageArea & object Properties - QUOTA_BYTES 10485760 maximum amount (in bytes) data stored memory, measured estimating dynamically allocated memory usage every value key. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. sync Items sync storage area synced using Chrome Sync. Type StorageArea & object Properties - MAX_ITEMS 512 maximum number items stored sync storage. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE 1000000 DeprecatedThe storage.sync API longer sustained write operation quota. - MAX_WRITE_OPERATIONS_PER_HOUR 1800 maximum number set ,remove , orclear operations performed hour. 1 every 2 seconds, lower ceiling short term higher writes-per-minute limit.Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - MAX_WRITE_OPERATIONS_PER_MINUTE 120 maximum number set ,remove , orclear operations performed minute. 2 per second, providing higher throughput writes-per-hour shorter period time.Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - QUOTA_BYTES 102400 maximum total amount (in bytes) data stored sync storage, measured JSON stringification every value plus every key's length. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - QUOTA_BYTES_PER_ITEM 8192 maximum size (in bytes) individual item sync storage, measured JSON stringification value plus key length. Updates containing items larger limit fail immediately set runtime.lastError using callback, Promise rejected. Events onChanged chrome.storage.onChanged.addListener( callback: function, ) Fired one items change. Parameters - callback function callback parameter looks like:(changes: object, areaName: string) => void - changes object - areaName string -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/system/cpu", "title": "chrome.system.cpu | API | Chrome for Developers", "text": "Description Use system.cpu API query CPU metadata. Permissions system.cpu Types CpuInfo Properties - archName string architecture name processors. - features string[] set feature codes indicating processor's capabilities. currently supported codes \"mmx\", \"sse\", \"sse2\", \"sse3\", \"ssse3\", \"sse4_1\", \"sse4_2\", \"avx\". - modelName string model name processors. - numOfProcessors number number logical processors. - processors Information logical processor. - temperatures number[] Chrome 60+List CPU temperature readings thermal zone CPU. Temperatures degrees Celsius. Currently supported Chrome OS only. CpuTime Properties - idle number cumulative time spent idle processor. - kernel number cumulative time used kernel programs processor. - total number total cumulative time processor. value equal user + kernel + idle. - user number cumulative time used userspace programs processor. ProcessorInfo Properties - usage Cumulative usage info logical processor. Methods getInfo() chrome.system.cpu.getInfo( callback?: function, ) Queries basic CPU information system. Parameters - callback function optional callback parameter looks like:(info: CpuInfo) => void - info - Returns - Promise<CpuInfo> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/system/display", "title": "chrome.system.display | API | Chrome for Developers", "text": "Description Use system.display API query display metadata. Permissions system.display Types ActiveState enum tell display detected used system. display considered 'inactive', detected system (maybe disconnected, considered disconnected due sleep mode, etc). state used keep existing display displays disconnected, example. Enum \"active\" \"inactive\" Bounds Properties - height number height display pixels. - left number x-coordinate upper-left corner. - top number y-coordinate upper-left corner. - width number width display pixels. DisplayLayout Properties - id string unique identifier display. - offset number offset display along connected edge. 0 indicates topmost leftmost corners aligned. - parentId string unique identifier parent display. Empty root. - position layout position display relative parent. ignored root. DisplayMode Properties - deviceScaleFactor number display mode device scale factor. - height number display mode height device independent (user visible) pixels. - heightInNativePixels number display mode height native pixels. - isInterlaced boolean optional Chrome 74+True mode interlaced, false provided. - isNative boolean True mode display's native mode. - isSelected boolean True display mode currently selected. - refreshRate number Chrome 67+The display mode refresh rate hertz. - uiScale number optional Deprecated since Chrome 70Use displayZoomFactor display mode UI scale factor. - width number display mode width device independent (user visible) pixels. - widthInNativePixels number display mode width native pixels. DisplayProperties Properties - boundsOriginX number optional set, updates display's logical bounds origin along x-axis. Applied together boundsOriginY . Defaults current value set andboundsOriginY set. Note updating display origin, constraints applied, final bounds origin may different one set. final bounds retrieved usinggetInfo . bounds origin cannot changed primary display. - boundsOriginY number optional set, updates display's logical bounds origin along y-axis. See documentation boundsOriginX parameter. - displayMode DisplayMode optional Chrome 52+If set, updates display mode mode matching value. parameters invalid, applied. display mode invalid, applied error set, properties still applied. - displayZoomFactor number optional Chrome 65+If set, updates zoom associated display. zoom performs re-layout repaint thus resulting better quality zoom performing pixel pixel stretch enlargement. - isPrimary boolean optional set true, makes display primary. No-op set false. Note: set, display considered primary properties (i.e. isUnified may set bounds origin may not). - isUnified boolean optional Chrome 59+ChromeOS only. set true, changes display mode unified desktop (see enableUnifiedDesktop details). set false, unified desktop mode disabled. valid primary display. provided, mirroringSourceId must provided properties ignored. effect provided. - mirroringSourceId string optional Deprecated since Chrome 68Use setMirrorMode .ChromeOS only. set empty, enables mirroring display only. Otherwise disables mirroring displays. value indicate id source display mirror, must id passed setDisplayProperties. set, property may set. - overscan Insets optional set, sets display's overscan insets provided values. Note overscan values may negative larger half screen's size. Overscan cannot changed internal monitor. - rotation number optional set, updates display's rotation. Legal values [0, 90, 180, 270]. rotation set clockwise, relative display's vertical position. DisplayUnitInfo Properties - activeStateChrome 117+ Active display detected used system. - availableDisplayZoomFactors number[] Chrome 67+A list zoom factor values set display. - bounds display's logical bounds. - displayZoomFactor number Chrome 65+The ratio display's current default zoom. example, value 1 equivalent 100% zoom, value 1.5 equivalent 150% zoom. - dpiX number number pixels per inch along x-axis. - dpiY number number pixels per inch along y-axis. - edid Edid optional Chrome 67+NOTE: available ChromeOS Kiosk apps Web UI. - hasTouchSupport boolean Chrome 57+True display touch input device associated it. - id string unique identifier display. - isEnabled boolean True display enabled. - isPrimary boolean True primary display. - isUnified boolean Chrome 59+True displays unified desktop mode. See documentation enableUnifiedDesktop . - mirroringDestinationIds string[] Chrome 64+ChromeOS only. Identifiers displays source display mirrored. Empty displays mirrored. set value displays. must include mirroringSourceId . - mirroringSourceId string ChromeOS only. Identifier display mirrored mirroring enabled, otherwise empty. set displays (including display mirrored). - modesChrome 52+ list available display modes. current mode isSelected=true. available ChromeOS. set empty array platforms. - name string user-friendly name (e.g. \"HP LCD monitor\"). - overscan display's insets within screen's bounds. Currently exposed ChromeOS. set empty insets platforms. - rotation number display's clockwise rotation degrees relative vertical position. Currently exposed ChromeOS. set 0 platforms. value -1 interpreted auto-rotate device physical tablet state. - workArea usable work area display within display bounds. work area excludes areas display reserved OS, example taskbar launcher. Edid Properties - manufacturerId string 3 character manufacturer code. See Sec. 3.4.1 page 21. Required v1.4. - productId string 2 byte manufacturer-assigned code, Sec. 3.4.2 page 21. Required v1.4. - yearOfManufacture number Year manufacturer, Sec. 3.4.4 page 22. Required v1.4. GetInfoFlags Properties - singleUnified boolean optional set true, single DisplayUnitInfo returned bygetInfo unified desktop mode (seeenableUnifiedDesktop ). Defaults false. Insets Properties - bottom number y-axis distance bottom bound. - left number x-axis distance left bound. - right number x-axis distance right bound. - top number y-axis distance top bound. LayoutPosition Layout position, i.e. edge parent display attached to. Enum \"top\" \"right\" \"bottom\" \"left\" MirrorMode Mirror mode, i.e. different ways display mirrored displays. Enum \"off\" \"normal\" \"mixed\" Specifies default mode (extended unified desktop). Specifies default source display mirrored displays. Specifies specified source display mirrored provided destination displays. connected displays extended. MirrorModeInfo Properties - mirroringDestinationIds string[] optional ids mirroring destination displays. valid 'mixed'. - mirroringSourceId string optional id mirroring source display. valid 'mixed'. - mode mirror mode set. Point Properties - x number x-coordinate point. - number y-coordinate point. TouchCalibrationPair Properties - displayPoint coordinates display point. - touchPoint coordinates touch point corresponding display point. TouchCalibrationPairQuad Properties - pair1 First pair touch display point required touch calibration. - pair2 Second pair touch display point required touch calibration. - pair3 Third pair touch display point required touch calibration. - pair4 Fourth pair touch display point required touch calibration. Methods clearTouchCalibration() chrome.system.display.clearTouchCalibration( id: string, ) Resets touch calibration display brings back default state clearing touch calibration data associated display. Parameters - id string display's unique identifier. completeCustomTouchCalibration() chrome.system.display.completeCustomTouchCalibration( pairs: TouchCalibrationPairQuad, bounds: Bounds, ) Sets touch calibration pairs display. pairs would used calibrate touch screen display id called startCustomTouchCalibration(). Always call startCustomTouchCalibration calling method. another touch calibration already progress throw error. Parameters - pairs pairs point used calibrate display. - bounds Bounds display touch calibration performed. bounds.left andbounds.top values ignored. enableUnifiedDesktop() chrome.system.display.enableUnifiedDesktop( enabled: boolean, ) Enables/disables unified desktop feature. enabled mirroring active, desktop mode change mirroring turned off. Otherwise, desktop mode switch unified immediately. NOTE: available ChromeOS Kiosk apps Web UI. Parameters - enabled boolean True unified desktop enabled. getDisplayLayout() chrome.system.display.getDisplayLayout( callback?: function, ) Requests layout info displays. NOTE: available ChromeOS Kiosk apps Web UI. Parameters - callback function optional callback parameter looks like:(layouts: DisplayLayout[]) => void - layouts - Returns - Promise<DisplayLayout[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getInfo() chrome.system.display.getInfo( flags?: GetInfoFlags, callback?: function, ) Requests information attached display devices. Parameters - flags GetInfoFlags optional Chrome 59+Options affecting information returned. - callback function optional callback parameter looks like:(displayInfo: DisplayUnitInfo[]) => void - displayInfo - Returns - Promise<DisplayUnitInfo[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. overscanCalibrationAdjust() chrome.system.display.overscanCalibrationAdjust( id: string, delta: Insets, ) Adjusts current overscan insets display. Typically either move display along axis (e.g. left+right value) scale along axis (e.g. top+bottom opposite values). Adjust call cumulative previous calls since Start. Parameters - id string display's unique identifier. - delta amount change overscan insets. overscanCalibrationComplete() chrome.system.display.overscanCalibrationComplete( id: string, ) Complete overscan adjustments display saving current values hiding overlay. Parameters - id string display's unique identifier. overscanCalibrationReset() chrome.system.display.overscanCalibrationReset( id: string, ) Resets overscan insets display last saved value (i.e Start called). Parameters - id string display's unique identifier. overscanCalibrationStart() chrome.system.display.overscanCalibrationStart( id: string, ) Starts overscan calibration display. show overlay screen indicating current overscan insets. overscan calibration display id progress reset calibration. Parameters - id string display's unique identifier. setDisplayLayout() chrome.system.display.setDisplayLayout( layouts: DisplayLayout[], callback?: function, ) Set layout displays. display included use default layout. layout would overlap otherwise invalid adjusted valid layout. layout resolved, onDisplayChanged event triggered. NOTE: available ChromeOS Kiosk apps Web UI. Parameters - layouts layout information, required displays except primary display. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setDisplayProperties() chrome.system.display.setDisplayProperties( id: string, info: DisplayProperties, callback?: function, ) Updates properties display specified id , according information provided info . failure, runtime.lastError set. NOTE: available ChromeOS Kiosk apps Web UI. Parameters - id string display's unique identifier. - info information display properties changed. property changed new value specified info . - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setMirrorMode() chrome.system.display.setMirrorMode( info: MirrorModeInfo, callback?: function, ) Sets display mode specified mirror mode. call resets state previous calls. Calling setDisplayProperties() fail mirroring destination displays. NOTE: available ChromeOS Kiosk apps Web UI. Parameters - info information mirror mode applied display mode. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. showNativeTouchCalibration() chrome.system.display.showNativeTouchCalibration( id: string, callback?: function, ) Displays native touch calibration UX display id display id. show overlay screen required instructions proceed. callback invoked case successful calibration only. calibration fails, throw error. Parameters - id string display's unique identifier. - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. startCustomTouchCalibration() chrome.system.display.startCustomTouchCalibration( id: string, ) Starts custom touch calibration display. called using custom UX collecting calibration data. another touch calibration already progress throw error. Parameters - id string display's unique identifier. Events onDisplayChanged chrome.system.display.onDisplayChanged.addListener( callback: function, ) Fired anything changes display configuration. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/system/memory", "title": "chrome.system.memory | API | Chrome for Developers", "text": "Description chrome.system.memory API. Permissions system.memory Types MemoryInfo Properties - availableCapacity number amount available capacity, bytes. - capacity number total amount physical memory capacity, bytes. Methods getInfo() chrome.system.memory.getInfo( callback?: function, ) Get physical memory information. Parameters - callback function optional callback parameter looks like:(info: MemoryInfo) => void - info - Returns - Promise<MemoryInfo> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/system/storage", "title": "chrome.system.storage | API | Chrome for Developers", "text": "Description Use chrome.system.storage API query storage device information notified removable storage device attached detached. Permissions system.storage Types EjectDeviceResultCode Enum \"success\" \"in_use\" \"no_such_device\" \"failure\" ejection command successful -- application prompt user remove device. device use another application. ejection succeed; user remove device application done device. device known. ejection command failed. StorageAvailableCapacityInfo Properties - availableCapacity number available capacity storage device, bytes. - id string copied id getAvailableCapacity function parameterid . StorageUnitInfo Properties - capacity number total amount storage space, bytes. - id string transient ID uniquely identifies storage device. ID persistent within run single application. persistent identifier different runs application, different applications. - name string name storage unit. - type media type storage unit. StorageUnitType Enum \"fixed\" \"removable\" \"unknown\" storage fixed media, e.g. hard disk SSD. storage removable, e.g. USB flash drive. storage type unknown. Methods ejectDevice() chrome.system.storage.ejectDevice( id: string, callback?: function, ) Ejects removable storage device. Parameters - id string - callback function optional callback parameter looks like:(result: EjectDeviceResultCode) => void - result - Returns - Promise<EjectDeviceResultCode> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAvailableCapacity() chrome.system.storage.getAvailableCapacity( id: string, callback?: function, ) Get available capacity specified id storage device. id transient device ID StorageUnitInfo. Parameters - id string - callback function optional callback parameter looks like:(info: StorageAvailableCapacityInfo) => void Returns - Promise<StorageAvailableCapacityInfo> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getInfo() chrome.system.storage.getInfo( callback?: function, ) Get storage information system. argument passed callback array StorageUnitInfo objects. Parameters - callback function optional callback parameter looks like:(info: StorageUnitInfo[]) => void - info - Returns - Promise<StorageUnitInfo[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onAttached chrome.system.storage.onAttached.addListener( callback: function, ) Fired new removable storage attached system. Parameters - callback function callback parameter looks like:(info: StorageUnitInfo) => void - info - onDetached chrome.system.storage.onDetached.addListener( callback: function, ) Fired removable storage detached system. Parameters - callback function callback parameter looks like:(id: string) => void - id string -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/systemLog", "title": "chrome.systemLog | API | Chrome for Developers", "text": "Description Use chrome.systemLog API record Chrome system logs extensions. Permissions systemLog Availability Types MessageOptions Properties - message string Methods add() chrome.systemLog.add( options: MessageOptions, callback?: function, ) Adds new log record. Parameters - options logging options. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabCapture", "title": "chrome.tabCapture | API | Chrome for Developers", "text": "Description Use chrome.tabCapture API interact tab media streams. Permissions tabCapture Concepts usage chrome.tabCapture API lets access MediaStream containing video audio current tab. called user invokes extension, clicking extension's action button. similar behavior \"activeTab\" permission. Preserve system audio MediaStream obtained tab, audio tab longer played user. similar behavior getDisplayMedia() function suppressLocalAudioPlayback flag set true. continue playing audio user, use following: const output = new AudioContext(); const source = output.createMediaStreamSource(stream); source.connect(output.destination); creates new AudioContext connects audio tab's MediaStream default destination. Stream IDs Calling chrome.tabCapture.getMediaStreamId() return stream ID. later access MediaStream ID, use following: navigator.mediaDevices.getUserMedia({ audio: { mandatory: { chromeMediaSource: \"tab\", chromeMediaSourceId: id, }, }, video: { mandatory: { chromeMediaSource: \"tab\", chromeMediaSourceId: id, }, }, }); Usage restrictions calling getMediaStreamId() , restrictions returned stream ID used: - consumerTabId specified, ID used agetUserMedia() call frame given tab security origin. - specified, beginning Chrome 116, ID used frame security origin render process caller. means stream ID obtained service worker used offscreen document. Prior Chrome 116, consumerTabId specified, stream ID restricted security origin, render process render frame caller. Learn learn use chrome.tabCapture API, see Audio recording screen capture. demonstrates use tabCapture related APIs solve number common use cases. Types CaptureInfo Properties - fullscreen boolean Whether element tab captured fullscreen mode. - status new capture status tab. - tabId number id tab whose status changed. CaptureOptions Properties - audio boolean optional - audioConstraints MediaStreamConstraint optional - video boolean optional - videoConstraints MediaStreamConstraint optional GetMediaStreamOptions Properties - consumerTabId number optional Optional tab id tab later invoke getUserMedia() consume stream. specified resulting stream used calling extension. stream used frames given tab whose security origin matches consumber tab's origin. tab's origin must secure origin, e.g. HTTPS. - targetTabId number optional Optional tab id tab captured. specified current active tab selected. tabs extension granted activeTab permission used target tab. MediaStreamConstraint Properties - mandatory object - optional object optional TabCaptureState Enum \"pending\" \"active\" \"stopped\" \"error\" Methods capture() chrome.tabCapture.capture( options: CaptureOptions, callback: function, ) Captures visible area currently active tab. Capture started currently active tab extension invoked, similar way activeTab works. Capture maintained across page navigations within tab, stops tab closed, media stream closed extension. Parameters - options Configures returned media stream. - callback function callback parameter looks like:(stream: LocalMediaStream) => void - stream LocalMediaStream - getCapturedTabs() chrome.tabCapture.getCapturedTabs( callback?: function, ) Returns list tabs requested capture captured, i.e. status != stopped status != error. allows extensions inform user existing tab capture would prevent new tab capture succeeding (or prevent redundant requests tab). Parameters - callback function optional callback parameter looks like:(result: CaptureInfo[]) => void - result - Returns - Promise<CaptureInfo[]> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMediaStreamId() chrome.tabCapture.getMediaStreamId( options?: GetMediaStreamOptions, callback?: function, ) Creates stream ID capture target tab. Similar chrome.tabCapture.capture() method, returns media stream ID, instead media stream, consumer tab. Parameters - options GetMediaStreamOptions optional - callback function optional callback parameter looks like:(streamId: string) => void - streamId string - Returns - Promise<string> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onStatusChanged chrome.tabCapture.onStatusChanged.addListener( callback: function, ) Event fired capture status tab changes. allows extension authors keep track capture status tabs keep UI elements like page actions sync. Parameters - callback function callback parameter looks like:(info: CaptureInfo) => void - info -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabGroups", "title": "chrome.tabGroups | API | Chrome for Developers", "text": "Description Use chrome.tabGroups API interact browser's tab grouping system. use API modify rearrange tab groups browser. group ungroup tabs, query tabs groups, use chrome.tabs API. Permissions tabGroups Availability Types Color group's color. Enum \"grey\" \"blue\" \"red\" \"yellow\" \"green\" \"pink\" \"purple\" \"cyan\" \"orange\" TabGroup Properties - collapsed boolean Whether group collapsed. collapsed group one whose tabs hidden. - color group's color. - id number ID group. Group IDs unique within browser session. - title string optional title group. - windowId number ID window contains group. Properties TAB_GROUP_ID_NONE ID represents absence group. Value -1 Methods get() chrome.tabGroups.get( groupId: number, callback?: function, ) Retrieves details specified group. Parameters - groupId number - callback function optional callback parameter looks like:(group: TabGroup) => void - group - Returns - Promise<TabGroup> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.tabGroups.move( groupId: number, moveProperties: object, callback?: function, ) Moves group tabs within window, new window. Parameters - groupId number ID group move. - moveProperties object - index number position move group to. Use -1 place group end window. - windowId number optional window move group to. Defaults window group currently in. Note groups moved windows windows.WindowType type\"normal\" . - - callback function optional callback parameter looks like:(group?: TabGroup) => void - group TabGroup optional Details moved group. - Returns - Promise<TabGroup | undefined> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.tabGroups.query( queryInfo: object, callback?: function, ) Gets groups specified properties, groups properties specified. Parameters - queryInfo object - collapsed boolean optional Whether groups collapsed. - color Color optional color groups. - title string optional Match group titles pattern. - windowId number optional ID parent window, windows.WINDOW_ID_CURRENT current window. - - callback function optional callback parameter looks like:(result: TabGroup[]) => void - result TabGroup[] - Returns - Promise<TabGroup[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.tabGroups.update( groupId: number, updateProperties: object, callback?: function, ) Modifies properties group. Properties specified updateProperties modified. Parameters - groupId number ID group modify. - updateProperties object - collapsed boolean optional Whether group collapsed. - color Color optional color group. - title string optional title group. - - callback function optional callback parameter looks like:(group?: TabGroup) => void - group TabGroup optional Details updated group. - Returns - Promise<TabGroup | undefined> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onCreated chrome.tabGroups.onCreated.addListener( callback: function, ) Fired group created. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onMoved chrome.tabGroups.onMoved.addListener( callback: function, ) Fired group moved within window. Move events still fired individual tabs within group, well group itself. event fired group moved windows; instead, removed one window created another. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onRemoved chrome.tabGroups.onRemoved.addListener( callback: function, ) Fired group closed, either directly user automatically contained zero tabs. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onUpdated chrome.tabGroups.onUpdated.addListener( callback: function, ) Fired group updated."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabs", "title": "chrome.tabs | API | Chrome for Developers", "text": "Description Use chrome.tabs API interact browser's tab system. use API create, modify, rearrange tabs browser. Tabs API offers features manipulating managing tabs, also detect language tab, take screenshot, communicate tab's content scripts. Permissions features require permissions use. example: creating new tab, reloading tab, navigating another URL, etc. three permissions developers aware working Tabs API. - \"tabs\" permission permission give access chrome.tabs namespace. Instead, grants extension ability calltabs.query() four sensitive properties ontabs.Tab instances:url ,pendingUrl ,title , andfavIconUrl .{ \"name\": \"My extension\", ... \"permissions\": [ \"tabs\" ], ... } - Host permissions Host permissions allow extension read query matching tab's four sensitive tabs.Tab properties. also interact directly matching tabs using methods astabs.captureVisibleTab() ,scripting.executeScript() ,scripting.insertCSS() , andscripting.removeCSS() .{ \"name\": \"My extension\", ... \"host_permissions\": [ \"http://*/*\", \"https://*/*\" ], ... } - \"activeTab\" permission activeTab grants extension temporary host permission current tab response user invocation. Unlike host permissions,activeTab trigger warnings.{ \"name\": \"My extension\", ... \"permissions\": [ \"activeTab\" ], ... } Use cases following sections demonstrate common use cases. Open extension page new tab common pattern extensions open onboarding page new tab extension installed. following example shows this. background.js: chrome.runtime.onInstalled.addListener(({reason}) => { (reason === 'install') { chrome.tabs.create({ url: \"onboarding.html\" }); } }); Get current tab example demonstrates extension's service worker retrieve active tab currently-focused window (or recently-focused window, Chrome windows focused). usually thought user's current tab. async function getCurrentTab() { let queryOptions = { active: true, lastFocusedWindow: true }; // `tab` either `tabs.Tab` instance `undefined`. let [tab] = await chrome.tabs.query(queryOptions); return tab; } function getCurrentTab(callback) { let queryOptions = { active: true, lastFocusedWindow: true }; chrome.tabs.query(queryOptions, ([tab]) => { (chrome.runtime.lastError) console.error(chrome.runtime.lastError); // `tab` either `tabs.Tab` instance `undefined`. callback(tab); }); } Mute specified tab example shows extension toggle muted state given tab. async function toggleMuteState(tabId) { const tab = await chrome.tabs.get(tabId); const muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, {muted}); console.log(`Tab ${tab.id} ${muted ? \"muted\" : \"unmuted\"}`); } function toggleMuteState(tabId) { chrome.tabs.get(tabId, async (tab) => { let muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, { muted }); console.log(`Tab ${tab.id} ${ muted ? \"muted\" : \"unmuted\" }`); }); } Move current tab first position clicked example shows move tab drag may may progress. example uses chrome.tabs.move , use waiting pattern calls modify tabs drag progress. chrome.tabs.onActivated.addListener(moveToFirstPosition); async function moveToFirstPosition(activeInfo) { try { await chrome.tabs.move(activeInfo.tabId, {index: 0}); console.log(\"Success.\"); } catch (error) { (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPosition(activeInfo), 50); } else { console.error(error); } } } chrome.tabs.onActivated.addListener(moveToFirstPositionMV2); function moveToFirstPositionMV2(activeInfo) { chrome.tabs.move(activeInfo.tabId, { index: 0 }, () => { (chrome.runtime.lastError) { const error = chrome.runtime.lastError; (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPositionMV2(activeInfo), 50); } else { console.error(error); } } else { console.log(\"Success.\"); } }); } Pass message selected tab's content script example demonstrates extension's service worker communicate content scripts specific browser tabs using tabs.sendMessage() . function sendMessageToActiveTab(message) { const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true }); const response = await chrome.tabs.sendMessage(tab.id, message); // TODO: something response. } Extension examples Tabs API extensions demos, explore following: Types MutedInfo tab's muted state reason last state change. Properties - extensionId string optional ID extension changed muted state. set extension reason muted state last changed. - muted boolean Whether tab muted (prevented playing sound). tab may muted even played currently playing sound. Equivalent whether 'muted' audio indicator showing. - reason MutedInfoReason optional reason tab muted unmuted. set tab's mute state never changed. MutedInfoReason event caused muted state change. Enum \"user\" \"capture\" \"extension\" user input action set muted state. Tab capture started, forcing muted state change. extension, identified extensionId field, set muted state. Tab Properties - active boolean Whether tab active window. necessarily mean window focused. - audible boolean optional Chrome 45+Whether tab produced sound past couple seconds (but might heard also muted). Equivalent whether 'speaker audio' indicator showing. - autoDiscardable boolean Chrome 54+Whether tab discarded automatically browser resources low. - discarded boolean Chrome 54+Whether tab discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - favIconUrl string optional URL tab's favicon. property present extension's manifest includes \"tabs\" permission. may also empty string tab loading. - frozen boolean PendingWhether tab frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number Chrome 88+The ID group tab belongs to. - height number optional height tab pixels. - highlighted boolean Whether tab highlighted. - id number optional ID tab. Tab IDs unique within browser session. circumstances tab may assigned ID; example, querying foreign tabs using sessions API, case session ID may present. Tab ID also set tochrome.tabs.TAB_ID_NONE apps devtools windows. - incognito boolean Whether tab incognito window. - index number zero-based index tab within window. - lastAccessed number Chrome 121+The last time tab became active window number milliseconds since epoch. - mutedInfo MutedInfo optional Chrome 46+The tab's muted state reason last state change. - openerTabId number optional ID tab opened tab, any. property present opener tab still exists. - pendingUrl string optional Chrome 79+The URL tab navigating to, committed. property present extension's manifest includes \"tabs\" permission pending navigation. - pinned boolean Whether tab pinned. - selected boolean DeprecatedPlease use tabs.Tab.highlighted .Whether tab selected. - sessionId string optional session ID used uniquely identify tab obtained sessions API. - status TabStatus optional tab's loading status. - title string optional title tab. property present extension's manifest includes \"tabs\" permission. - url string optional last committed URL main frame tab. property present extension's manifest includes \"tabs\" permission may empty string tab yet committed. See alsoTab.pendingUrl . - width number optional width tab pixels. - windowId number ID window contains tab. TabStatus tab's loading status. Enum \"unloaded\" \"loading\" \"complete\" WindowType type window. Enum \"normal\" \"popup\" \"panel\" \"app\" \"devtools\" ZoomSettings Defines zoom changes tab handled scope. Properties - defaultZoomFactor number optional Chrome 43+Used return default zoom level current tab calls tabs.getZoomSettings. - mode ZoomSettingsMode optional Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . - scope ZoomSettingsScope optional Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin inautomatic mode, andper-tab otherwise. ZoomSettingsMode Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . Enum \"automatic\" \"manual\" \"disabled\" Zoom changes handled automatically browser. Overrides automatic handling zoom changes. onZoomChange event still dispatched, extension's responsibility listen event manually scale page. mode support per-origin zooming, thus ignores scope zoom setting assumes per-tab . Disables zooming tab. tab reverts default zoom level, attempted zoom changes ignored. ZoomSettingsScope Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin automatic mode, per-tab otherwise. Enum \"per-origin\" \"per-tab\" Zoom changes persist zoomed page's origin, i.e., tabs navigated origin zoomed well. Moreover, per-origin zoom changes saved origin, meaning navigating pages origin, zoomed zoom factor. per-origin scope available automatic mode. Zoom changes take effect tab, zoom changes tabs affect zooming tab. Also, per-tab zoom changes reset navigation; navigating tab always loads pages per-origin zoom factors. Properties MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND maximum number times captureVisibleTab called per second. captureVisibleTab expensive called often. Value 2 TAB_ID_NONE ID represents absence browser tab. Value -1 TAB_INDEX_NONE index represents absence tab index tab_strip. Value -1 Methods captureVisibleTab() chrome.tabs.captureVisibleTab( windowId?: number, options?: ImageDetails, callback?: function, ) Captures visible area currently active tab specified window. order call method, extension must either <all_urls> permission activeTab permission. addition sites extensions normally access, method allows extensions capture sensitive sites otherwise restricted, including chrome:-scheme pages, extensions' pages, data: URLs. sensitive sites captured activeTab permission. File URLs may captured extension granted file access. Parameters - windowId number optional target window. Defaults current window. - options ImageDetails optional - callback function optional callback parameter looks like:(dataUrl: string) => void - dataUrl string data URL encodes image visible area captured tab. May assigned 'src' property HTML img element display. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. connect() chrome.tabs.connect( tabId: number, connectInfo?: object, ) Connects content script(s) specified tab. runtime.onConnect event fired content script running specified tab current extension. details, see Content Script Messaging. Parameters - tabId number - connectInfo object optional - documentId string optional Chrome 106+Open port specific document identified documentId instead frames tab. - frameId number optional Open port specific frame identified frameId instead frames tab. - name string optional passed onConnect content scripts listening connection event. - Returns - port used communicate content scripts running specified tab. port's runtime.Port event fired tab closes exist. create() chrome.tabs.create( createProperties: object, callback?: function, ) Creates new tab. Parameters - createProperties object - active boolean optional Whether tab become active tab window. affect whether window focused (see windows.update ). Defaults totrue . - index number optional position tab take window. provided value clamped zero number tabs window. - openerTabId number optional ID tab opened tab. specified, opener tab must window newly created tab. - pinned boolean optional Whether tab pinned. Defaults false - selected boolean optional DeprecatedPlease use active. Whether tab become selected tab window. Defaults true - url string optional URL initially navigate tab to. Fully-qualified URLs must include scheme (i.e., 'http://www.google.com', 'www.google.com'). Relative URLs relative current page within extension. Defaults New Tab Page. - windowId number optional window create new tab. Defaults current window. - - callback function optional callback parameter looks like:(tab: Tab) => void - tab created tab. - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. detectLanguage() chrome.tabs.detectLanguage( tabId?: number, callback?: function, ) Detects primary language content tab. Parameters - tabId number optional Defaults active tab current window. - callback function optional callback parameter looks like:(language: string) => void - language string ISO language code en orfr . complete list languages supported method, see kLanguageInfoTable. second fourth columns checked first non-NULL value returned, except Simplified Chinese whichzh-CN returned. unknown/undefined language,und returned. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. discard() chrome.tabs.discard( tabId?: number, callback?: function, ) Discards tab memory. Discarded tabs still visible tab strip reloaded activated. Parameters - tabId number optional ID tab discarded. specified, tab discarded unless active already discarded. omitted, browser discards least important tab. fail discardable tabs exist. - callback function optional callback parameter looks like:(tab?: Tab) => void - tab Tab optional discarded tab, successfully discarded; undefined otherwise. - Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. duplicate() chrome.tabs.duplicate( tabId: number, callback?: function, ) Duplicates tab. Parameters - tabId number ID tab duplicate. - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.tabs.get( tabId: number, callback?: function, ) Retrieves details specified tab. Parameters - tabId number - callback function optional callback parameter looks like:(tab: Tab) => void - tab - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCurrent() chrome.tabs.getCurrent( callback?: function, ) Gets tab script call made from. Returns undefined called non-tab context (for example, background page popup view). Parameters Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoom() chrome.tabs.getZoom( tabId?: number, callback?: function, ) Gets current zoom factor specified tab. Parameters - tabId number optional ID tab get current zoom factor from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomFactor: number) => void - zoomFactor number tab's current zoom factor. - Returns - Promise<number> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoomSettings() chrome.tabs.getZoomSettings( tabId?: number, callback?: function, ) Gets current zoom settings specified tab. Parameters - tabId number optional ID tab get current zoom settings from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomSettings: ZoomSettings) => void - zoomSettings tab's current zoom settings. - Returns - Promise<ZoomSettings> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goBack() chrome.tabs.goBack( tabId?: number, callback?: function, ) Go back previous page, one available. Parameters - tabId number optional ID tab navigate back; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goForward() chrome.tabs.goForward( tabId?: number, callback?: function, ) Go foward next page, one available. Parameters - tabId number optional ID tab navigate forward; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. group() chrome.tabs.group( options: object, callback?: function, ) Adds one tabs specified group, group specified, adds given tabs newly created group. Parameters - options object - createProperties object optional Configurations creating group. Cannot used groupId already specified. - windowId number optional window new group. Defaults current window. - - groupId number optional ID group add tabs to. specified, new group created. - tabIds number | [number, ...number[]] tab ID list tab IDs add specified group. - - callback function optional callback parameter looks like:(groupId: number) => void - groupId number ID group tabs added to. - Returns - Promise<number> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. highlight() chrome.tabs.highlight( highlightInfo: object, callback?: function, ) Highlights given tabs focuses first group. appear nothing specified tab currently active. Parameters - highlightInfo object - tabs number | number[] One tab indices highlight. - windowId number optional window contains tabs. - - callback function optional callback parameter looks like:(window: Window) => void - window Contains details window whose tabs highlighted. - Returns - Promise<windows.Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.tabs.move( tabIds: number | number[], moveProperties: object, callback?: function, ) Moves one tabs new position within window, new window. Note tabs moved normal (window.type === \"normal\") windows. Parameters - tabIds number | number[] tab ID list tab IDs move. - moveProperties object - index number position move window to. Use -1 place tab end window. - windowId number optional Defaults window tab currently in. - - callback function optional callback parameter looks like:(tabs: Tab | Tab[]) => void Returns - Chrome 88+ Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.tabs.query( queryInfo: object, callback?: function, ) Gets tabs specified properties, tabs properties specified. Parameters - queryInfo object - active boolean optional Whether tabs active windows. - audible boolean optional Chrome 45+Whether tabs audible. - autoDiscardable boolean optional Chrome 54+Whether tabs discarded automatically browser resources low. - currentWindow boolean optional Whether tabs current window. - discarded boolean optional Chrome 54+Whether tabs discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - frozen boolean optional PendingWhether tabs frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number optional Chrome 88+The ID group tabs in, tabGroups.TAB_GROUP_ID_NONE ungrouped tabs. - highlighted boolean optional Whether tabs highlighted. - index number optional position tabs within windows. - lastFocusedWindow boolean optional Whether tabs last focused window. - muted boolean optional Chrome 45+Whether tabs muted. - pinned boolean optional Whether tabs pinned. - status TabStatus optional tab loading status. - title string optional Match page titles pattern. property ignored extension \"tabs\" permission. - url string | string[] optional Match tabs one URL patterns. Fragment identifiers matched. property ignored extension \"tabs\" permission. - windowId number optional ID parent window, windows.WINDOW_ID_CURRENT current window. - windowType WindowType optional type window tabs in. - - callback function optional callback parameter looks like:(result: Tab[]) => void - result Tab[] - Returns - Promise<Tab[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.tabs.reload( tabId?: number, reloadProperties?: object, callback?: function, ) Reload tab. Parameters - tabId number optional ID tab reload; defaults selected tab current window. - reloadProperties object optional - bypassCache boolean optional Whether bypass local caching. Defaults false . - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.tabs.remove( tabIds: number | number[], callback?: function, ) Closes one tabs. Parameters - tabIds number | number[] tab ID list tab IDs close. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.tabs.sendMessage( tabId: number, message: any, options?: object, callback?: function, ) Sends single message content script(s) specified tab, optional callback run response sent back. runtime.onMessage event fired content script running specified tab current extension. Parameters - tabId number - message message send. message JSON-ifiable object. - options object optional - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting specified tab, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoom() chrome.tabs.setZoom( tabId?: number, zoomFactor: number, callback?: function, ) Zooms specified tab. Parameters - tabId number optional ID tab zoom; defaults active tab current window. - zoomFactor number new zoom factor. value 0 sets tab current default zoom factor. Values greater than0 specify (possibly non-default) zoom factor tab. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoomSettings() chrome.tabs.setZoomSettings( tabId?: number, zoomSettings: ZoomSettings, callback?: function, ) Sets zoom settings specified tab, define zoom changes handled. settings reset defaults upon navigating tab. Parameters - tabId number optional ID tab change zoom settings for; defaults active tab current window. - zoomSettings Defines zoom changes handled scope. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. ungroup() chrome.tabs.ungroup( tabIds: number | [number, ...number[]], callback?: function, ) Removes one tabs respective groups. groups become empty, deleted. Parameters - tabIds number | [number, ...number[]] tab ID list tab IDs remove respective groups. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.tabs.update( tabId?: number, updateProperties: object, callback?: function, ) Modifies properties tab. Properties specified updateProperties modified. Parameters - tabId number optional Defaults selected tab current window. - updateProperties object - active boolean optional Whether tab active. affect whether window focused (see windows.update ). - autoDiscardable boolean optional Chrome 54+Whether tab discarded automatically browser resources low. - highlighted boolean optional Adds removes tab current selection. - muted boolean optional Chrome 45+Whether tab muted. - openerTabId number optional ID tab opened tab. specified, opener tab must window tab. - pinned boolean optional Whether tab pinned. - selected boolean optional DeprecatedPlease use highlighted. Whether tab selected. - url string optional URL navigate tab to. JavaScript URLs supported; use scripting.executeScript instead. - - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActivated chrome.tabs.onActivated.addListener( callback: function, ) Fires active tab window changes. Note tab's URL may set time event fired, listen onUpdated events notified URL set. Parameters - callback function callback parameter looks like:(activeInfo: object) => void - activeInfo object - tabId number ID tab become active. - windowId number ID window active tab changed inside of. - - onAttached chrome.tabs.onAttached.addListener( callback: function, ) Fired tab attached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, attachInfo: object) => void - tabId number - attachInfo object - newPosition number - newWindowId number - - onCreated chrome.tabs.onCreated.addListener( callback: function, ) Fired tab created. Note tab's URL tab group membership may set time event fired, listen onUpdated events notified URL set tab added tab group. onDetached chrome.tabs.onDetached.addListener( callback: function, ) Fired tab detached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, detachInfo: object) => void - tabId number - detachInfo object - oldPosition number - oldWindowId number - - onHighlighted chrome.tabs.onHighlighted.addListener( callback: function, ) Fired highlighted selected tabs window changes. Parameters - callback function callback parameter looks like:(highlightInfo: object) => void - highlightInfo object - tabIds number[] highlighted tabs window. - windowId number window whose tabs changed. - - onMoved chrome.tabs.onMoved.addListener( callback: function, ) Fired tab moved within window. one move event fired, representing tab user directly moved. Move events fired tabs must move response manually-moved tab. event fired tab moved windows; details, see tabs.onDetached . Parameters - callback function callback parameter looks like:(tabId: number, moveInfo: object) => void - tabId number - moveInfo object - fromIndex number - toIndex number - windowId number - - onRemoved chrome.tabs.onRemoved.addListener( callback: function, ) Fired tab closed. Parameters - callback function callback parameter looks like:(tabId: number, removeInfo: object) => void - tabId number - removeInfo object - isWindowClosing boolean True tab closed parent window closed. - windowId number window whose tab closed. - - onReplaced chrome.tabs.onReplaced.addListener( callback: function, ) Fired tab replaced another tab due prerendering instant. Parameters - callback function callback parameter looks like:(addedTabId: number, removedTabId: number) => void - addedTabId number - removedTabId number - onUpdated chrome.tabs.onUpdated.addListener( callback: function, ) Fired tab updated. Parameters - callback function callback parameter looks like:(tabId: number, changeInfo: object, tab: Tab) => void - tabId number - changeInfo object - audible boolean optional Chrome 45+The tab's new audible state. - autoDiscardable boolean optional Chrome 54+The tab's new auto-discardable state. - discarded boolean optional Chrome 54+The tab's new discarded state. - favIconUrl string optional tab's new favicon URL. - frozen boolean optional PendingThe tab's new frozen state. - groupId number optional Chrome 88+The tab's new group. - mutedInfo MutedInfo optional Chrome 46+The tab's new muted state reason change. - pinned boolean optional tab's new pinned state. - status TabStatus optional tab's loading status. - title string optional Chrome 48+The tab's new title. - url string optional tab's URL changed. - - tab - onZoomChange chrome.tabs.onZoomChange.addListener( callback: function, ) Fired tab zoomed. Parameters - callback function callback parameter looks like:(ZoomChangeInfo: object) => void - ZoomChangeInfo object - newZoomFactor number - oldZoomFactor number - tabId number - zoomSettings - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabs", "title": "chrome.tabs | API | Chrome for Developers", "text": "Description Use chrome.tabs API interact browser's tab system. use API create, modify, rearrange tabs browser. Tabs API offers features manipulating managing tabs, also detect language tab, take screenshot, communicate tab's content scripts. Permissions features require permissions use. example: creating new tab, reloading tab, navigating another URL, etc. three permissions developers aware working Tabs API. - \"tabs\" permission permission give access chrome.tabs namespace. Instead, grants extension ability calltabs.query() four sensitive properties ontabs.Tab instances:url ,pendingUrl ,title , andfavIconUrl .{ \"name\": \"My extension\", ... \"permissions\": [ \"tabs\" ], ... } - Host permissions Host permissions allow extension read query matching tab's four sensitive tabs.Tab properties. also interact directly matching tabs using methods astabs.captureVisibleTab() ,scripting.executeScript() ,scripting.insertCSS() , andscripting.removeCSS() .{ \"name\": \"My extension\", ... \"host_permissions\": [ \"http://*/*\", \"https://*/*\" ], ... } - \"activeTab\" permission activeTab grants extension temporary host permission current tab response user invocation. Unlike host permissions,activeTab trigger warnings.{ \"name\": \"My extension\", ... \"permissions\": [ \"activeTab\" ], ... } Use cases following sections demonstrate common use cases. Open extension page new tab common pattern extensions open onboarding page new tab extension installed. following example shows this. background.js: chrome.runtime.onInstalled.addListener(({reason}) => { (reason === 'install') { chrome.tabs.create({ url: \"onboarding.html\" }); } }); Get current tab example demonstrates extension's service worker retrieve active tab currently-focused window (or recently-focused window, Chrome windows focused). usually thought user's current tab. async function getCurrentTab() { let queryOptions = { active: true, lastFocusedWindow: true }; // `tab` either `tabs.Tab` instance `undefined`. let [tab] = await chrome.tabs.query(queryOptions); return tab; } function getCurrentTab(callback) { let queryOptions = { active: true, lastFocusedWindow: true }; chrome.tabs.query(queryOptions, ([tab]) => { (chrome.runtime.lastError) console.error(chrome.runtime.lastError); // `tab` either `tabs.Tab` instance `undefined`. callback(tab); }); } Mute specified tab example shows extension toggle muted state given tab. async function toggleMuteState(tabId) { const tab = await chrome.tabs.get(tabId); const muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, {muted}); console.log(`Tab ${tab.id} ${muted ? \"muted\" : \"unmuted\"}`); } function toggleMuteState(tabId) { chrome.tabs.get(tabId, async (tab) => { let muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, { muted }); console.log(`Tab ${tab.id} ${ muted ? \"muted\" : \"unmuted\" }`); }); } Move current tab first position clicked example shows move tab drag may may progress. example uses chrome.tabs.move , use waiting pattern calls modify tabs drag progress. chrome.tabs.onActivated.addListener(moveToFirstPosition); async function moveToFirstPosition(activeInfo) { try { await chrome.tabs.move(activeInfo.tabId, {index: 0}); console.log(\"Success.\"); } catch (error) { (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPosition(activeInfo), 50); } else { console.error(error); } } } chrome.tabs.onActivated.addListener(moveToFirstPositionMV2); function moveToFirstPositionMV2(activeInfo) { chrome.tabs.move(activeInfo.tabId, { index: 0 }, () => { (chrome.runtime.lastError) { const error = chrome.runtime.lastError; (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPositionMV2(activeInfo), 50); } else { console.error(error); } } else { console.log(\"Success.\"); } }); } Pass message selected tab's content script example demonstrates extension's service worker communicate content scripts specific browser tabs using tabs.sendMessage() . function sendMessageToActiveTab(message) { const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true }); const response = await chrome.tabs.sendMessage(tab.id, message); // TODO: something response. } Extension examples Tabs API extensions demos, explore following: Types MutedInfo tab's muted state reason last state change. Properties - extensionId string optional ID extension changed muted state. set extension reason muted state last changed. - muted boolean Whether tab muted (prevented playing sound). tab may muted even played currently playing sound. Equivalent whether 'muted' audio indicator showing. - reason MutedInfoReason optional reason tab muted unmuted. set tab's mute state never changed. MutedInfoReason event caused muted state change. Enum \"user\" \"capture\" \"extension\" user input action set muted state. Tab capture started, forcing muted state change. extension, identified extensionId field, set muted state. Tab Properties - active boolean Whether tab active window. necessarily mean window focused. - audible boolean optional Chrome 45+Whether tab produced sound past couple seconds (but might heard also muted). Equivalent whether 'speaker audio' indicator showing. - autoDiscardable boolean Chrome 54+Whether tab discarded automatically browser resources low. - discarded boolean Chrome 54+Whether tab discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - favIconUrl string optional URL tab's favicon. property present extension's manifest includes \"tabs\" permission. may also empty string tab loading. - frozen boolean PendingWhether tab frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number Chrome 88+The ID group tab belongs to. - height number optional height tab pixels. - highlighted boolean Whether tab highlighted. - id number optional ID tab. Tab IDs unique within browser session. circumstances tab may assigned ID; example, querying foreign tabs using sessions API, case session ID may present. Tab ID also set tochrome.tabs.TAB_ID_NONE apps devtools windows. - incognito boolean Whether tab incognito window. - index number zero-based index tab within window. - lastAccessed number Chrome 121+The last time tab became active window number milliseconds since epoch. - mutedInfo MutedInfo optional Chrome 46+The tab's muted state reason last state change. - openerTabId number optional ID tab opened tab, any. property present opener tab still exists. - pendingUrl string optional Chrome 79+The URL tab navigating to, committed. property present extension's manifest includes \"tabs\" permission pending navigation. - pinned boolean Whether tab pinned. - selected boolean DeprecatedPlease use tabs.Tab.highlighted .Whether tab selected. - sessionId string optional session ID used uniquely identify tab obtained sessions API. - status TabStatus optional tab's loading status. - title string optional title tab. property present extension's manifest includes \"tabs\" permission. - url string optional last committed URL main frame tab. property present extension's manifest includes \"tabs\" permission may empty string tab yet committed. See alsoTab.pendingUrl . - width number optional width tab pixels. - windowId number ID window contains tab. TabStatus tab's loading status. Enum \"unloaded\" \"loading\" \"complete\" WindowType type window. Enum \"normal\" \"popup\" \"panel\" \"app\" \"devtools\" ZoomSettings Defines zoom changes tab handled scope. Properties - defaultZoomFactor number optional Chrome 43+Used return default zoom level current tab calls tabs.getZoomSettings. - mode ZoomSettingsMode optional Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . - scope ZoomSettingsScope optional Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin inautomatic mode, andper-tab otherwise. ZoomSettingsMode Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . Enum \"automatic\" \"manual\" \"disabled\" Zoom changes handled automatically browser. Overrides automatic handling zoom changes. onZoomChange event still dispatched, extension's responsibility listen event manually scale page. mode support per-origin zooming, thus ignores scope zoom setting assumes per-tab . Disables zooming tab. tab reverts default zoom level, attempted zoom changes ignored. ZoomSettingsScope Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin automatic mode, per-tab otherwise. Enum \"per-origin\" \"per-tab\" Zoom changes persist zoomed page's origin, i.e., tabs navigated origin zoomed well. Moreover, per-origin zoom changes saved origin, meaning navigating pages origin, zoomed zoom factor. per-origin scope available automatic mode. Zoom changes take effect tab, zoom changes tabs affect zooming tab. Also, per-tab zoom changes reset navigation; navigating tab always loads pages per-origin zoom factors. Properties MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND maximum number times captureVisibleTab called per second. captureVisibleTab expensive called often. Value 2 TAB_ID_NONE ID represents absence browser tab. Value -1 TAB_INDEX_NONE index represents absence tab index tab_strip. Value -1 Methods captureVisibleTab() chrome.tabs.captureVisibleTab( windowId?: number, options?: ImageDetails, callback?: function, ) Captures visible area currently active tab specified window. order call method, extension must either <all_urls> permission activeTab permission. addition sites extensions normally access, method allows extensions capture sensitive sites otherwise restricted, including chrome:-scheme pages, extensions' pages, data: URLs. sensitive sites captured activeTab permission. File URLs may captured extension granted file access. Parameters - windowId number optional target window. Defaults current window. - options ImageDetails optional - callback function optional callback parameter looks like:(dataUrl: string) => void - dataUrl string data URL encodes image visible area captured tab. May assigned 'src' property HTML img element display. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. connect() chrome.tabs.connect( tabId: number, connectInfo?: object, ) Connects content script(s) specified tab. runtime.onConnect event fired content script running specified tab current extension. details, see Content Script Messaging. Parameters - tabId number - connectInfo object optional - documentId string optional Chrome 106+Open port specific document identified documentId instead frames tab. - frameId number optional Open port specific frame identified frameId instead frames tab. - name string optional passed onConnect content scripts listening connection event. - Returns - port used communicate content scripts running specified tab. port's runtime.Port event fired tab closes exist. create() chrome.tabs.create( createProperties: object, callback?: function, ) Creates new tab. Parameters - createProperties object - active boolean optional Whether tab become active tab window. affect whether window focused (see windows.update ). Defaults totrue . - index number optional position tab take window. provided value clamped zero number tabs window. - openerTabId number optional ID tab opened tab. specified, opener tab must window newly created tab. - pinned boolean optional Whether tab pinned. Defaults false - selected boolean optional DeprecatedPlease use active. Whether tab become selected tab window. Defaults true - url string optional URL initially navigate tab to. Fully-qualified URLs must include scheme (i.e., 'http://www.google.com', 'www.google.com'). Relative URLs relative current page within extension. Defaults New Tab Page. - windowId number optional window create new tab. Defaults current window. - - callback function optional callback parameter looks like:(tab: Tab) => void - tab created tab. - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. detectLanguage() chrome.tabs.detectLanguage( tabId?: number, callback?: function, ) Detects primary language content tab. Parameters - tabId number optional Defaults active tab current window. - callback function optional callback parameter looks like:(language: string) => void - language string ISO language code en orfr . complete list languages supported method, see kLanguageInfoTable. second fourth columns checked first non-NULL value returned, except Simplified Chinese whichzh-CN returned. unknown/undefined language,und returned. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. discard() chrome.tabs.discard( tabId?: number, callback?: function, ) Discards tab memory. Discarded tabs still visible tab strip reloaded activated. Parameters - tabId number optional ID tab discarded. specified, tab discarded unless active already discarded. omitted, browser discards least important tab. fail discardable tabs exist. - callback function optional callback parameter looks like:(tab?: Tab) => void - tab Tab optional discarded tab, successfully discarded; undefined otherwise. - Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. duplicate() chrome.tabs.duplicate( tabId: number, callback?: function, ) Duplicates tab. Parameters - tabId number ID tab duplicate. - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.tabs.get( tabId: number, callback?: function, ) Retrieves details specified tab. Parameters - tabId number - callback function optional callback parameter looks like:(tab: Tab) => void - tab - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCurrent() chrome.tabs.getCurrent( callback?: function, ) Gets tab script call made from. Returns undefined called non-tab context (for example, background page popup view). Parameters Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoom() chrome.tabs.getZoom( tabId?: number, callback?: function, ) Gets current zoom factor specified tab. Parameters - tabId number optional ID tab get current zoom factor from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomFactor: number) => void - zoomFactor number tab's current zoom factor. - Returns - Promise<number> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoomSettings() chrome.tabs.getZoomSettings( tabId?: number, callback?: function, ) Gets current zoom settings specified tab. Parameters - tabId number optional ID tab get current zoom settings from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomSettings: ZoomSettings) => void - zoomSettings tab's current zoom settings. - Returns - Promise<ZoomSettings> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goBack() chrome.tabs.goBack( tabId?: number, callback?: function, ) Go back previous page, one available. Parameters - tabId number optional ID tab navigate back; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goForward() chrome.tabs.goForward( tabId?: number, callback?: function, ) Go foward next page, one available. Parameters - tabId number optional ID tab navigate forward; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. group() chrome.tabs.group( options: object, callback?: function, ) Adds one tabs specified group, group specified, adds given tabs newly created group. Parameters - options object - createProperties object optional Configurations creating group. Cannot used groupId already specified. - windowId number optional window new group. Defaults current window. - - groupId number optional ID group add tabs to. specified, new group created. - tabIds number | [number, ...number[]] tab ID list tab IDs add specified group. - - callback function optional callback parameter looks like:(groupId: number) => void - groupId number ID group tabs added to. - Returns - Promise<number> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. highlight() chrome.tabs.highlight( highlightInfo: object, callback?: function, ) Highlights given tabs focuses first group. appear nothing specified tab currently active. Parameters - highlightInfo object - tabs number | number[] One tab indices highlight. - windowId number optional window contains tabs. - - callback function optional callback parameter looks like:(window: Window) => void - window Contains details window whose tabs highlighted. - Returns - Promise<windows.Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.tabs.move( tabIds: number | number[], moveProperties: object, callback?: function, ) Moves one tabs new position within window, new window. Note tabs moved normal (window.type === \"normal\") windows. Parameters - tabIds number | number[] tab ID list tab IDs move. - moveProperties object - index number position move window to. Use -1 place tab end window. - windowId number optional Defaults window tab currently in. - - callback function optional callback parameter looks like:(tabs: Tab | Tab[]) => void Returns - Chrome 88+ Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.tabs.query( queryInfo: object, callback?: function, ) Gets tabs specified properties, tabs properties specified. Parameters - queryInfo object - active boolean optional Whether tabs active windows. - audible boolean optional Chrome 45+Whether tabs audible. - autoDiscardable boolean optional Chrome 54+Whether tabs discarded automatically browser resources low. - currentWindow boolean optional Whether tabs current window. - discarded boolean optional Chrome 54+Whether tabs discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - frozen boolean optional PendingWhether tabs frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number optional Chrome 88+The ID group tabs in, tabGroups.TAB_GROUP_ID_NONE ungrouped tabs. - highlighted boolean optional Whether tabs highlighted. - index number optional position tabs within windows. - lastFocusedWindow boolean optional Whether tabs last focused window. - muted boolean optional Chrome 45+Whether tabs muted. - pinned boolean optional Whether tabs pinned. - status TabStatus optional tab loading status. - title string optional Match page titles pattern. property ignored extension \"tabs\" permission. - url string | string[] optional Match tabs one URL patterns. Fragment identifiers matched. property ignored extension \"tabs\" permission. - windowId number optional ID parent window, windows.WINDOW_ID_CURRENT current window. - windowType WindowType optional type window tabs in. - - callback function optional callback parameter looks like:(result: Tab[]) => void - result Tab[] - Returns - Promise<Tab[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.tabs.reload( tabId?: number, reloadProperties?: object, callback?: function, ) Reload tab. Parameters - tabId number optional ID tab reload; defaults selected tab current window. - reloadProperties object optional - bypassCache boolean optional Whether bypass local caching. Defaults false . - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.tabs.remove( tabIds: number | number[], callback?: function, ) Closes one tabs. Parameters - tabIds number | number[] tab ID list tab IDs close. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.tabs.sendMessage( tabId: number, message: any, options?: object, callback?: function, ) Sends single message content script(s) specified tab, optional callback run response sent back. runtime.onMessage event fired content script running specified tab current extension. Parameters - tabId number - message message send. message JSON-ifiable object. - options object optional - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting specified tab, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoom() chrome.tabs.setZoom( tabId?: number, zoomFactor: number, callback?: function, ) Zooms specified tab. Parameters - tabId number optional ID tab zoom; defaults active tab current window. - zoomFactor number new zoom factor. value 0 sets tab current default zoom factor. Values greater than0 specify (possibly non-default) zoom factor tab. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoomSettings() chrome.tabs.setZoomSettings( tabId?: number, zoomSettings: ZoomSettings, callback?: function, ) Sets zoom settings specified tab, define zoom changes handled. settings reset defaults upon navigating tab. Parameters - tabId number optional ID tab change zoom settings for; defaults active tab current window. - zoomSettings Defines zoom changes handled scope. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. ungroup() chrome.tabs.ungroup( tabIds: number | [number, ...number[]], callback?: function, ) Removes one tabs respective groups. groups become empty, deleted. Parameters - tabIds number | [number, ...number[]] tab ID list tab IDs remove respective groups. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.tabs.update( tabId?: number, updateProperties: object, callback?: function, ) Modifies properties tab. Properties specified updateProperties modified. Parameters - tabId number optional Defaults selected tab current window. - updateProperties object - active boolean optional Whether tab active. affect whether window focused (see windows.update ). - autoDiscardable boolean optional Chrome 54+Whether tab discarded automatically browser resources low. - highlighted boolean optional Adds removes tab current selection. - muted boolean optional Chrome 45+Whether tab muted. - openerTabId number optional ID tab opened tab. specified, opener tab must window tab. - pinned boolean optional Whether tab pinned. - selected boolean optional DeprecatedPlease use highlighted. Whether tab selected. - url string optional URL navigate tab to. JavaScript URLs supported; use scripting.executeScript instead. - - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActivated chrome.tabs.onActivated.addListener( callback: function, ) Fires active tab window changes. Note tab's URL may set time event fired, listen onUpdated events notified URL set. Parameters - callback function callback parameter looks like:(activeInfo: object) => void - activeInfo object - tabId number ID tab become active. - windowId number ID window active tab changed inside of. - - onAttached chrome.tabs.onAttached.addListener( callback: function, ) Fired tab attached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, attachInfo: object) => void - tabId number - attachInfo object - newPosition number - newWindowId number - - onCreated chrome.tabs.onCreated.addListener( callback: function, ) Fired tab created. Note tab's URL tab group membership may set time event fired, listen onUpdated events notified URL set tab added tab group. onDetached chrome.tabs.onDetached.addListener( callback: function, ) Fired tab detached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, detachInfo: object) => void - tabId number - detachInfo object - oldPosition number - oldWindowId number - - onHighlighted chrome.tabs.onHighlighted.addListener( callback: function, ) Fired highlighted selected tabs window changes. Parameters - callback function callback parameter looks like:(highlightInfo: object) => void - highlightInfo object - tabIds number[] highlighted tabs window. - windowId number window whose tabs changed. - - onMoved chrome.tabs.onMoved.addListener( callback: function, ) Fired tab moved within window. one move event fired, representing tab user directly moved. Move events fired tabs must move response manually-moved tab. event fired tab moved windows; details, see tabs.onDetached . Parameters - callback function callback parameter looks like:(tabId: number, moveInfo: object) => void - tabId number - moveInfo object - fromIndex number - toIndex number - windowId number - - onRemoved chrome.tabs.onRemoved.addListener( callback: function, ) Fired tab closed. Parameters - callback function callback parameter looks like:(tabId: number, removeInfo: object) => void - tabId number - removeInfo object - isWindowClosing boolean True tab closed parent window closed. - windowId number window whose tab closed. - - onReplaced chrome.tabs.onReplaced.addListener( callback: function, ) Fired tab replaced another tab due prerendering instant. Parameters - callback function callback parameter looks like:(addedTabId: number, removedTabId: number) => void - addedTabId number - removedTabId number - onUpdated chrome.tabs.onUpdated.addListener( callback: function, ) Fired tab updated. Parameters - callback function callback parameter looks like:(tabId: number, changeInfo: object, tab: Tab) => void - tabId number - changeInfo object - audible boolean optional Chrome 45+The tab's new audible state. - autoDiscardable boolean optional Chrome 54+The tab's new auto-discardable state. - discarded boolean optional Chrome 54+The tab's new discarded state. - favIconUrl string optional tab's new favicon URL. - frozen boolean optional PendingThe tab's new frozen state. - groupId number optional Chrome 88+The tab's new group. - mutedInfo MutedInfo optional Chrome 46+The tab's new muted state reason change. - pinned boolean optional tab's new pinned state. - status TabStatus optional tab's loading status. - title string optional Chrome 48+The tab's new title. - url string optional tab's URL changed. - - tab - onZoomChange chrome.tabs.onZoomChange.addListener( callback: function, ) Fired tab zoomed. Parameters - callback function callback parameter looks like:(ZoomChangeInfo: object) => void - ZoomChangeInfo object - newZoomFactor number - oldZoomFactor number - tabId number - zoomSettings - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/topSites", "title": "chrome.topSites | API | Chrome for Developers", "text": "Description Use chrome.topSites API access top sites (i.e. visited sites) displayed new tab page. include shortcuts customized user. Permissions topSites must declare \"topSites\" permission extension's manifest use API. { \"name\": \"My extension\", ... \"permissions\": [ \"topSites\", ], ... } Examples try API, install topSites API example chrome-extension-samples repository. Types MostVisitedURL object encapsulating visited URL, default shortcuts new tab page. Properties - title string title page - url string visited URL. Methods get() chrome.topSites.get( callback?: function, ) Gets list top sites. Parameters - callback function optional callback parameter looks like:(data: MostVisitedURL[]) => void - data - Returns - Promise<MostVisitedURL[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tts", "title": "chrome.tts | API | Chrome for Developers", "text": "Description Use chrome.tts API play synthesized text-to-speech (TTS). See also related ttsEngine API, allows extension implement speech engine. Chrome provides capability Windows (using SAPI 5), Mac OS X, ChromeOS, using speech synthesis capabilities provided operating system. platforms, user install extensions register alternative speech engines. Permissions tts Concepts usage Generate speech Call speak() extension speak. example: chrome.tts.speak('Hello, world.'); stop speaking immediately, call stop() : chrome.tts.stop(); provide options control various properties speech, rate, pitch, more. example: chrome.tts.speak('Hello, world.', {'rate': 2.0}); also good idea specify language synthesizer supporting language (and regional dialect, applicable) chosen. chrome.tts.speak('Hello, world.', {'lang': 'en-US', 'rate': 2.0}); default, call speak() interrupts ongoing speech speaks immediately. determine call would interrupting anything, call isSpeaking() . addition, use enqueue option cause utterance added queue utterances spoken current utterance finished. chrome.tts.speak('Speak first.'); chrome.tts.speak( 'Speak next, first sentence done.', {'enqueue': true}); complete description options found tts.speak() . speech engines support options. catch errors make sure calling speak() correctly, pass callback function takes arguments. Inside callback, check runtime.lastError see errors. chrome.tts.speak( utterance, options, function() { (chrome.runtime.lastError) { console.log('Error: ' + chrome.runtime.lastError.message); } } ); callback returns right away, engine started generating speech. purpose callback alert syntax errors use TTS API, catch possible errors might occur process synthesizing outputting speech. catch errors too, need use event listener, described next section. Listen events get real-time information status synthesized speech, pass event listener options speak() , like this: chrome.tts.speak( utterance, { onEvent: function(event) { console.log('Event ' + event.type + ' position ' + event.charIndex); (event.type == 'error') { console.log('Error: ' + event.errorMessage); } } }, callback ); event includes event type, character index current speech relative utterance, error events, optional error message. event types are: 'start' : engine started speaking utterance.'word' : word boundary reached. Useevent.charIndex determine current speech position.'sentence' : sentence boundary reached. Useevent.charIndex determine current speech position.'marker' : SSML marker reached. Useevent.charIndex determine current speech position.'end' : engine finished speaking utterance.'interrupted' : utterance interrupted another call tospeak() orstop() finish.'cancelled' : utterance queued, cancelled another call tospeak() orstop() never began speak all.'error' : engine-specific error occurred utterance cannot spoken. Checkevent.errorMessage details. Four event types\u2014'end' , 'interrupted' , 'cancelled' , 'error' \u2014are final. one events received, utterance longer speak new events utterance received. voices may support event types, voices may send events all. want use voice unless sends certain events, pass events require requiredEventTypes member options object, use getVoices() choose voice meets requirements. described follows. SSML markup Utterances used API may include markup using Speech Synthesis Markup Language (SSML). use SSML, first argument speak() complete SSML document XML header top-level <speak> tag, document fragment. example: chrome.tts.speak( '<?xml version=\"1.0\"?>' + '<speak>' + ' <emphasis>second</emphasis> ' + ' word sentence emphasized.' + '</speak>' ); speech engines support SSML tags, may support SSML all, engines required ignore SSML support still speak underlying text. Choose voice default, Chrome chooses appropriate voice utterance want speak, based language. Windows, Mac OS X, ChromeOS systems, speech synthesis provided operating system able speak text least one language. users may variety voices available, though, operating system speech engines implemented Chrome extensions. cases, implement custom code choose appropriate voice, present user list choices. get list voices, call getVoices() pass function receives array TtsVoice objects argument: chrome.tts.getVoices( function(voices) { (var = 0; < voices.length; i++) { console.log('Voice ' + + ':'); console.log(' name: ' + voices[i].voiceName); console.log(' lang: ' + voices[i].lang); console.log(' extension id: ' + voices[i].extensionId); console.log(' event types: ' + voices[i].eventTypes); } } ); Types EventType Enum \"start\" \"end\" \"word\" \"sentence\" \"marker\" \"interrupted\" \"cancelled\" \"error\" \"pause\" \"resume\" TtsEvent event TTS engine communicate status utterance. Properties - charIndex number optional index current character utterance. word events, event fires end one word beginning next. charIndex represents point text beginning next word spoken. - errorMessage string optional error description, event type error . - length number optional Chrome 74+The length next part utterance. example, word event, length word spoken next. set -1 set speech engine. - type type start soon speech started,word word boundary reached,sentence sentence boundary reached,marker SSML mark element reached,end end utterance reached,interrupted utterance stopped interrupted reaching end,cancelled removed queue ever synthesized, orerror error occurs. pausing speech, apause event fired particular utterance paused middle, andresume utterance resumes speech. Note pause resume events may fire speech paused in-between utterances. TtsOptions speech options TTS engine. Properties - desiredEventTypes string[] optional TTS event types interested listening to. missing, event types may sent. - enqueue boolean optional true, enqueues utterance TTS already progress. false (the default), interrupts current speech flushes speech queue speaking new utterance. - extensionId string optional extension ID speech engine use, known. - gender VoiceGender optional Deprecated since Chrome 77Gender deprecated ignored. Gender voice synthesized speech. - lang string optional language used synthesis, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - pitch number optional Speaking pitch 0 2 inclusive, 0 lowest 2 highest. 1.0 corresponds voice's default pitch. - rate number optional Speaking rate relative default rate voice. 1.0 default rate, normally around 180 220 words per minute. 2.0 twice fast, 0.5 half fast. Values 0.1 10.0 strictly disallowed, many voices constrain minimum maximum rates further\u2014for example particular voice may actually speak faster 3 times normal even specify value larger 3.0. - requiredEventTypes string[] optional TTS event types voice must support. - voiceName string optional name voice use synthesis. empty, uses available voice. - volume number optional Speaking volume 0 1 inclusive, 0 lowest 1 highest, default 1.0. - onEvent void optional function called events occur process speaking utterance. onEvent function looks like:(event: TtsEvent) => {...} - event update event text-to-speech engine indicating status utterance. - TtsVoice description voice available speech synthesis. Properties - eventTypes EventType[] optional callback event types voice capable sending. - extensionId string optional ID extension providing voice. - gender VoiceGender optional Deprecated since Chrome 70Gender deprecated ignored. voice's gender. - lang string optional language voice supports, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - remote boolean optional true, synthesis engine remote network resource. may higher latency may incur bandwidth costs. - voiceName string optional name voice. VoiceGender Gender deprecated ignored. Enum \"male\" \"female\" Methods getVoices() chrome.tts.getVoices( callback?: function, ) Gets array available voices. Parameters - callback function optional callback parameter looks like:(voices: TtsVoice[]) => void - voices TtsVoice[] Array tts.TtsVoice objects representing available voices speech synthesis. - Returns - Promise<TtsVoice[]> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isSpeaking() chrome.tts.isSpeaking( callback?: function, ) Checks whether engine currently speaking. Mac OS X, result true whenever system speech engine speaking, even speech initiated Chrome. Parameters - callback function optional callback parameter looks like:(speaking: boolean) => void - speaking boolean True speaking, false otherwise. - Returns - Promise<boolean> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. pause() chrome.tts.pause() Pauses speech synthesis, potentially middle utterance. call resume stop un-pause speech. resume() chrome.tts.resume() speech paused, resumes speaking left off. speak() chrome.tts.speak( utterance: string, options?: TtsOptions, callback?: function, ) Speaks text using text-to-speech engine. Parameters - utterance string text speak, either plain text complete, well-formed SSML document. Speech engines support SSML strip away tags speak text. maximum length text 32,768 characters. - options TtsOptions optional speech options. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. stop() chrome.tts.stop() Stops current speech flushes queue pending utterances. addition, speech paused, un-paused next call speak. Events onVoicesChanged chrome.tts.onVoicesChanged.addListener( callback: function, ) Called list tts.TtsVoice would returned getVoices changed. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/ttsEngine", "title": "chrome.ttsEngine | API | Chrome for Developers", "text": "Description Use chrome.ttsEngine API implement text-to-speech(TTS) engine using extension. extension registers using API, receive events containing utterance spoken parameters extension Chrome App uses tts API generate speech. extension use available web technology synthesize output speech, send events back calling function report status. Permissions ttsEngine Concepts usage extension register speech engine. so, intercept calls functions tts.speak() tts.stop() provide alternate implementation. Extensions free use available web technology provide speech, including streaming audio server, HTML5 audio. extension could even something different utterances, like display closed captions popup send log messages remote server. implement TTS engine, extension must declare \"ttsEngine\" permission declare voices provides extension manifest, like this: { \"name\": \"My TTS Engine\", \"version\": \"1.0\", \"permissions\": [\"ttsEngine\"], \"tts_engine\": { \"voices\": [ { \"voice_name\": \"Alice\", \"lang\": \"en-US\", \"event_types\": [\"start\", \"marker\", \"end\"] }, { \"voice_name\": \"Pat\", \"lang\": \"en-US\", \"event_types\": [\"end\"] } ] }, \"background\": { \"page\": \"background.html\", \"persistent\": false } } extension specify number voices. voice_name parameter required. name descriptive enough identifies name voice engine used. unlikely event two extensions register voices name, client specify ID extension synthesis. lang parameter optional, highly recommended. Almost always, voice synthesize speech single language. engine supports one language, easily register separate voice language. rare circumstances single voice handle one language, easiest list two separate voices handle using logic internally. However, want create voice handle utterances language, leave lang parameter extension's manifest. Finally, event_types parameter required engine send events update client progress speech synthesis. minimum, supporting 'end' event type indicate speech finished highly recommended, otherwise Chrome cannot schedule queued utterances. loaded, extension replace list declared voices calling chrome.ttsEngine.updateVoices . (Note parameters used programatic call updateVoices camel case: e.g., voiceName , unlike manifest file uses voice_name .) possible event types send correspond event types speak() method receives: 'start' : engine started speaking utterance.'word' : word boundary reached. Useevent.charIndex determine current speech position.'sentence' : sentence boundary reached. Useevent.charIndex determine current speech position.'marker' : SSML marker reached. Useevent.charIndex determine current speech position.'end' : engine finished speaking utterance.'error' : engine-specific error occurred utterance cannot spoken. Pass information inevent.errorMessage . 'interrupted' 'cancelled' events sent speech engine; generated automatically Chrome. Text-to-speech clients get voice information extension's manifest calling tts.getVoices , assuming registered speech event listeners described below. Handle speech events generate speech request clients, extension must register listeners onSpeak onStop , like this: const speakListener = (utterance, options, sendTtsEvent) => { sendTtsEvent({type: 'start', charIndex: 0}) // (start speaking) sendTtsEvent({type: 'end', charIndex: utterance.length}) }; const stopListener = () => { // (stop speech) }; chrome.ttsEngine.onSpeak.addListener(speakListener); chrome.ttsEngine.onStop.addListener(stopListener); decision whether send given speech request extension based solely whether extension supports given voice parameters manifest registered listeners onSpeak onStop . words, there's way extension receive speech request dynamically decide whether handle it. Types AudioBuffer Parameters containing audio buffer associated data. Properties - audioBuffer ArrayBuffer audio buffer text-to-speech engine. length exactly audioStreamOptions.bufferSize encoded mono, audioStreamOptions.sampleRate, linear pcm, 32-bit signed float i.e. Float32Array type javascript. - charIndex number optional character index associated audio buffer. - isLastBuffer boolean optional True audio buffer last text spoken. AudioStreamOptions Contains audio stream format expected produced engine. Properties - bufferSize number number samples within audio buffer. - sampleRate number sample rate expected audio buffer. LanguageInstallStatus install status voice. Enum \"notInstalled\" \"installing\" \"installed\" \"failed\" LanguageStatus Install status language. Properties - error string optional Detail installation failures. Optionally populated language failed install. - installStatus Installation status. - lang string Language string form language code-region code, region may omitted. Examples en, en-AU, zh-CH. LanguageUninstallOptions Options uninstalling given language. Properties - uninstallImmediately boolean True TTS client wants language immediately uninstalled. engine may choose whether uninstall language, based parameter requestor information. false, may use criteria, recent usage, determine uninstall. SpeakOptions Options specified tts.speak() method. Properties - gender VoiceGender optional Deprecated since Chrome 92Gender deprecated ignored. Gender voice synthesized speech. - lang string optional language used synthesis, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - pitch number optional Speaking pitch 0 2 inclusive, 0 lowest 2 highest. 1.0 corresponds voice's default pitch. - rate number optional Speaking rate relative default rate voice. 1.0 default rate, normally around 180 220 words per minute. 2.0 twice fast, 0.5 half fast. value guaranteed 0.1 10.0, inclusive. voice support full range rates, return error. Instead, clip rate range voice supports. - voiceName string optional name voice use synthesis. - volume number optional Speaking volume 0 1 inclusive, 0 lowest 1 highest, default 1.0. TtsClient Identifier client requesting status. Properties - id string Client making language management request. extension, unique extension ID. Chrome features, human-readable name feature. - source Type requestor. TtsClientSource Type requestor. Enum \"chromefeature\" \"extension\" VoiceGender Gender deprecated ignored. Enum \"male\" \"female\" Methods updateLanguage() chrome.ttsEngine.updateLanguage( status: LanguageStatus, ) Called engine language install attempted, language uninstalled. Also called response status request client. voice installed uninstalled, engine also call ttsEngine.updateVoices register voice. Parameters - status install status language. updateVoices() chrome.ttsEngine.updateVoices( voices: TtsVoice[], ) Called engine update list voices. list overrides voices declared extension's manifest. Parameters - voices TtsVoice[] Array tts.TtsVoice objects representing available voices speech synthesis. Events onInstallLanguageRequest chrome.ttsEngine.onInstallLanguageRequest.addListener( callback: function, ) Fired TTS client requests install new language. engine attempt download install language, call ttsEngine.updateLanguage result. success, engine also call ttsEngine.updateVoices register newly available voices. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string) => void - requestor - lang string - onLanguageStatusRequest chrome.ttsEngine.onLanguageStatusRequest.addListener( callback: function, ) Fired TTS client requests install status language. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string) => void - requestor - lang string - onPause chrome.ttsEngine.onPause.addListener( callback: function, ) Optional: engine supports pause event, pause current utterance spoken, any, receives resume event stop event. Note stop event also clear paused state. Parameters - callback function callback parameter looks like:() => void onResume chrome.ttsEngine.onResume.addListener( callback: function, ) Optional: engine supports pause event, also support resume event, continue speaking current utterance, any. Note stop event also clear paused state. Parameters - callback function callback parameter looks like:() => void onSpeak chrome.ttsEngine.onSpeak.addListener( callback: function, ) Called user makes call tts.speak() one voices extension's manifest first match options object. Parameters - callback function callback parameter looks like:(utterance: string, options: SpeakOptions, sendTtsEvent: function) => void - utterance string - options - sendTtsEvent function sendTtsEvent parameter looks like:(event: tts.TtsEvent) => void - event event text-to-speech engine indicating status utterance. - - onSpeakWithAudioStream chrome.ttsEngine.onSpeakWithAudioStream.addListener( callback: function, ) Called user makes call tts.speak() one voices extension's manifest first match options object. Differs ttsEngine.onSpeak Chrome provides audio playback services handles dispatching tts events. Parameters - callback function callback parameter looks like:(utterance: string, options: SpeakOptions, audioStreamOptions: AudioStreamOptions, sendTtsAudio: function, sendError: function) => void - utterance string - options - audioStreamOptions - sendTtsAudio function sendTtsAudio parameter looks like:(audioBufferParams: AudioBuffer) => void - audioBufferParams Parameters containing audio buffer associated data. - - sendError function Chrome 94+The sendError parameter looks like:(errorMessage?: string) => void - errorMessage string optional string describing error. - - onStop chrome.ttsEngine.onStop.addListener( callback: function, ) Fired call made tts.stop extension may middle speaking. extension receives call onStop speech already stopped, nothing (not raise error). speech paused state, cancel paused state. Parameters - callback function callback parameter looks like:() => void onUninstallLanguageRequest chrome.ttsEngine.onUninstallLanguageRequest.addListener( callback: function, ) Fired TTS client indicates language longer needed. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string, uninstallOptions: LanguageUninstallOptions) => void - requestor - lang string - uninstallOptions -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/types", "title": "chrome.types | API | Chrome for Developers", "text": "Description chrome.types API contains type declarations Chrome. Chrome settings ChromeSetting type provides common set functions (get() , set() , clear() ) well event publisher (onChange ) settings Chrome browser. proxy settings examples demonstrate functions intended used. Scope lifecycle Chrome distinguishes three different scopes browser settings: regular - Settings set regular scope apply regular browser windows inherited incognito windows overwritten. settings stored disk remain place cleared governing extension, governing extension disabled uninstalled. incognito_persistent - Settings set incognito_persistent scope apply incognito windows. these, overrideregular settings. settings stored disk remain place cleared governing extension, governing extension disabled uninstalled. incognito_session_only - Settings set incognito_session_only scope apply incognito windows. these, overrideregular andincognito_persistent settings. settings stored disk cleared last incognito window closed. set least one incognito window open. Precedence Chrome manages settings different layers. following list describes layers may influence effective settings, increasing order precedence. - System settings provided operating system - Command-line parameters - Settings provided extensions - Policies list implies, policies might overrule changes specify extension. use get() function determine whether extension capable providing setting whether setting would overridden. discussed previously, Chrome allows using different settings regular windows incognito windows. following example illustrates behavior. Assume policy overrides settings extension set settings regular windows (R) settings incognito windows (I). - (R) set, settings effective regular incognito windows. - (I) set, settings effective incognito windows. Regular windows use settings determined lower layers (command-line options system settings). - (R) (I) set, respective settings used regular incognito windows. two extensions want set setting different values, extension installed recently takes precedence extensions. recently installed extension sets (I), settings regular windows defined previously installed extensions. effective value setting one results considering precedence rules. used Chrome. Types ChromeSetting interface allows access Chrome browser setting. See accessibilityFeatures example. Properties - onChange Event<functionvoidvoid> Fired setting changes. onChange.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(details: object) => void - details object - incognitoSpecific boolean optional Whether value changed specific incognito session. property present user enabled extension incognito mode. - levelOfControl level control setting. - value value setting change. - - - - clear void PromiseClears setting, restoring default value. clear function looks like:(details: object, callback?: function) => {...} - details object setting clear. - scope ChromeSettingScope optional clear setting (default: regular). - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets value setting. get function looks like:(details: object, callback?: function) => {...} - details object setting consider. - incognito boolean optional Whether return value applies incognito session (default false). - - callback function optional callback parameter looks like:(details: object) => void - details object Details currently effective value. - incognitoSpecific boolean optional Whether effective value specific incognito session. property present incognito property thedetails parameter ofget() true. - levelOfControl level control setting. - value value setting. - - - returns Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseSets value setting. set function looks like:(details: object, callback?: function) => {...} - details object setting change. - scope ChromeSettingScope optional set setting (default: regular). - value value setting. Note every setting specific value type, described together setting. extension set value different type. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - ChromeSettingScope scope ChromeSetting. One regular : setting regular profile (which inherited incognito profile overridden elsewhere),regular\\_only : setting regular profile (not inherited incognito profile),incognito\\_persistent : setting incognito profile survives browser restarts (overrides regular preferences),incognito\\_session\\_only : setting incognito profile set incognito session deleted incognito session ends (overrides regular incognito_persistent preferences). Enum \"regular\" \"regular_only\" \"incognito_persistent\" \"incognito_session_only\" LevelOfControl One not\\_controllable : cannot controlled extensioncontrolled\\_by\\_other\\_extensions : controlled extensions higher precedencecontrollable\\_by\\_this\\_extension : controlled extensioncontrolled\\_by\\_this\\_extension : controlled extension Enum \"not_controllable\" \"controlled_by_other_extensions\" \"controllable_by_this_extension\" \"controlled_by_this_extension\""},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/userScripts", "title": "chrome.userScripts | API | Chrome for Developers", "text": "Description Use userScripts API execute user scripts User Scripts context. Permissions userScripts use chrome.userScripts API, add \"userScripts\" permission manifest.json \"host_permissions\" sites want run scripts on. { \"name\": \"User script test extension\", \"manifest_version\": 3, \"minimum_chrome_version\": \"120\", \"permissions\": [ \"userScripts\" ], \"host_permissions\": [ \"*://example.com/*\" ] } Availability Concepts usage user script bit code injected web page modify appearance behavior. Scripts either created users downloaded script repository user script extension. Developer mode extension users extension developer, already Developer mode enabled installation Chrome. user script extensions, users also need enable developer mode. instructions copy paste documentation. - Go Extensions page entering chrome://extensions new tab. (By designchrome:// URLs linkable.) Enable Developer Mode clicking toggle switch next Developer mode. Extensions page (chrome://extensions) determine developer mode enabled checking whether chrome.userScripts throws error. example: function isUserScriptsAvailable() { try { // Property access throws developer mode enabled. chrome.userScripts; return true; } catch { // available. return false; } } Work isolated worlds user content scripts run isolated world main world. isolated world execution environment accessible host page extensions. lets user script change JavaScript environment without affecting host page extensions' user content scripts. Conversely, user scripts (and content scripts) visible host page user content scripts extensions. Scripts running main world accessible host pages extensions visible host pages extensions. select world, pass \"USER_SCRIPT\" \"MAIN\" calling userScripts.register() . configure content security policy USER_SCRIPT world, call userScripts.configureWorld() : chrome.userScripts.configureWorld({ csp: \"script-src 'self'\" }); Messaging Like content scripts offscreen documents, user scripts communicate parts extension using messaging (meaning call runtime.sendMessage() runtime.connect() part extension would). However, they're received using dedicated event handlers (meaning, use onMessage onConnect ). handlers called runtime.onUserScriptMessage runtime.onUserScriptConnect . Dedicated handlers make easier identify messages user scripts, less-trusted context. sending message, must call configureWorld() messaging argument set true . Note csp messaging arguments passed time. chrome.userScripts.configureWorld({ messaging: true }); Extension updates User scripts cleared extension updates. add back running code runtime.onInstalled event handler extension service worker. Respond \"update\" reason passed event callback. Example example userScript sample samples repository. Register script following example shows basic call register() . first argument array objects defining scripts registered. options shown here. chrome.userScripts.register([{ id: 'test', matches: ['*://*/*'], js: [{code: 'alert(\"Hi!\")'}] }]); Types ExecutionWorld JavaScript world user script execute within. Enum \"MAIN\" \"USER_SCRIPT\" Specifies execution environment DOM, execution environment shared host page's JavaScript. Specifies execution environment specific user scripts exempt page's CSP. RegisteredUserScript Properties - allFrames boolean optional true, inject frames, even frame top-most frame tab. frame checked independently URL requirements; inject child frames URL requirements met. Defaults false, meaning top frame matched. - excludeGlobs string[] optional Specifies wildcard patterns pages user script injected into. - excludeMatches string[] optional Excludes pages user script would otherwise injected into. See Match Patterns details syntax strings. - id string ID user script specified API call. property must start '_' reserved prefix generated script IDs. - includeGlobs string[] optional Specifies wildcard patterns pages user script injected into. - js ScriptSource[] optional list ScriptSource objects defining sources scripts injected matching pages. property must specified ${ref:register}, specified must non-empty array. - matches string[] optional Specifies pages user script injected into. See Match Patterns details syntax strings. property must specified ${ref:register}. - runAt RunAt optional Specifies JavaScript files injected web page. preferred default value document_idle . - world ExecutionWorld optional JavaScript execution environment run script in. default `USER_SCRIPT` . - worldId string optional PendingIf specified, specifies specific user script world ID execute in. valid world omitted isUSER_SCRIPT . omitted, script execute default user script world. Values leading underscores (_ ) reserved. ScriptSource Properties - code string optional string containing JavaScript code inject. Exactly one file orcode must specified. - file string optional path JavaScript file inject relative extension's root directory. Exactly one file orcode must specified. UserScriptFilter Properties - ids string[] optional getScripts returns scripts IDs specified list. WorldProperties Properties - csp string optional Specifies world csp. default `ISOLATED` world csp. - messaging boolean optional Specifies whether messaging APIs exposed. default false . - worldId string optional PendingSpecifies ID specific user script world update. provided, updates properties default user script world. Values leading underscores ( _ ) reserved. Methods configureWorld() chrome.userScripts.configureWorld( properties: WorldProperties, callback?: function, ) Configures `USER_SCRIPT` execution environment. Parameters - properties Contains user script world configuration. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getScripts() chrome.userScripts.getScripts( filter?: UserScriptFilter, callback?: function, ) Returns dynamically-registered user scripts extension. Parameters - filter UserScriptFilter optional specified, method returns user scripts match it. - callback function optional callback parameter looks like:(scripts: RegisteredUserScript[]) => void - scripts - Returns - Promise<RegisteredUserScript[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getWorldConfigurations() chrome.userScripts.getWorldConfigurations( callback?: function, ) Retrieves registered world configurations. Parameters - callback function optional callback parameter looks like:(worlds: WorldProperties[]) => void - worlds - Returns - Promise<WorldProperties[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. register() chrome.userScripts.register( scripts: RegisteredUserScript[], callback?: function, ) Registers one user scripts extension. Parameters - scripts Contains list user scripts registered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. resetWorldConfiguration() chrome.userScripts.resetWorldConfiguration( worldId?: string, callback?: function, ) Resets configuration user script world. scripts inject world specified ID use default world configuration. Parameters - worldId string optional ID user script world reset. omitted, resets default world's configuration. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unregister() chrome.userScripts.unregister( filter?: UserScriptFilter, callback?: function, ) Unregisters dynamically-registered user scripts extension. Parameters - filter UserScriptFilter optional specified, method unregisters user scripts match it. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.userScripts.update( scripts: RegisteredUserScript[], callback?: function, ) Updates one user scripts extension. Parameters - scripts Contains list user scripts updated. property updated existing script specified object. errors script parsing/file validation, IDs specified correspond fully registered script, scripts updated. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/vpnProvider", "title": "chrome.vpnProvider | API | Chrome for Developers", "text": "Description Use chrome.vpnProvider API implement VPN client. Permissions vpnProvider Availability Concepts usage Typical usage chrome.vpnProvider follows: Create VPN configurations calling createConfig() . VPN configuration persistent entry shown user ChromeOS UI. user select VPN configuration list connect disconnect it.Add listeners onPlatformMessage ,onPacketReceived , andonConfigRemoved events.When user connects VPN configuration, onPlatformMessage received message\"connected\" . period the\"connected\" and\"disconnected\" messages called \"VPN session\". time period, extension receives message said VPN session.Initiate connection VPN server start VPN client. Set Parameters connection calling setParameters() .Notify connection state \"connected\" callingnotifyConnectionStateChanged() .When steps previous completed without errors, virtual tunnel created network stack ChromeOS. IP packets sent tunnel calling sendPacket() packets originating ChromeOS device received using theonPacketReceived event handler.When user disconnects VPN configuration, onPlatformMessage fired message\"disconnected\" .If VPN configuration longer necessary, destroyed calling destroyConfig() . Types Parameters Properties - address string IP address VPN interface CIDR notation. IPv4 currently supported mode. - broadcastAddress string optional Broadcast address VPN interface. (default: deduced IP address mask) - dnsServers string[] list IPs DNS servers. - domainSearch string[] optional list search domains. (default: search domain) - exclusionList string[] Exclude network traffic list IP blocks CIDR notation tunnel. used bypass traffic VPN server. many rules match destination, rule longest matching prefix wins. Entries correspond CIDR block treated duplicates. duplicates collated (exclusionList + inclusionList) list eliminated exact duplicate entry eliminated undefined. - inclusionList string[] Include network traffic list IP blocks CIDR notation tunnel. parameter used set split tunnel. default traffic directed tunnel. Adding entry \"0.0.0.0/0\" list gets user traffic redirected tunnel. many rules match destination, rule longest matching prefix wins. Entries correspond CIDR block treated duplicates. duplicates collated (exclusionList + inclusionList) list eliminated exact duplicate entry eliminated undefined. - mtu string optional MTU setting VPN interface. (default: 1500 bytes) - reconnect string optional Chrome 51+Whether VPN extension implements auto-reconnection. true, linkDown ,linkUp ,linkChanged ,suspend , andresume platform messages used signal respective events. false, system forcibly disconnect VPN network topology changes, user need reconnect manually. (default: false)This property new Chrome 51; generate exception earlier versions. try/catch used conditionally enable feature based browser support. PlatformMessage enum used platform notify client VPN session status. Enum \"connected\" \"disconnected\" \"error\" \"linkDown\" \"linkUp\" \"linkChanged\" \"suspend\" \"resume\" Indicates VPN configuration connected. Indicates VPN configuration disconnected. Indicates error occurred VPN connection, example timeout. description error given error argument onPlatformMessage. Indicates default physical network connection down. Indicates default physical network connection back up. Indicates default physical network connection changed, e.g. wifi->mobile. Indicates OS preparing suspend, VPN drop connection. extension guaranteed receive event prior suspending. Indicates OS resumed user logged back in, VPN try reconnect. UIEvent enum used platform indicate event triggered onUIEvent . Enum \"showAddDialog\" \"showConfigureDialog\" Requests VPN client show add configuration dialog box user. Requests VPN client show configuration settings dialog box user. VpnConnectionState enum used VPN client inform platform current state. helps provide meaningful messages user. Enum \"connected\" \"failure\" Specifies VPN connection successful. Specifies VPN connection failed. Methods createConfig() chrome.vpnProvider.createConfig( name: string, callback?: function, ) Creates new VPN configuration persists across multiple login sessions user. Parameters - name string name VPN configuration. - callback function optional callback parameter looks like:(id: string) => void - id string unique ID created configuration, undefined failure. - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. destroyConfig() chrome.vpnProvider.destroyConfig( id: string, callback?: function, ) Destroys VPN configuration created extension. Parameters - id string ID VPN configuration destroy. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. notifyConnectionStateChanged() chrome.vpnProvider.notifyConnectionStateChanged( state: VpnConnectionState, callback?: function, ) Notifies VPN session state platform. succeed VPN session owned extension. Parameters - state VPN session state VPN client. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendPacket() chrome.vpnProvider.sendPacket( data: ArrayBuffer, callback?: function, ) Sends IP packet tunnel created VPN session. succeed VPN session owned extension. Parameters - data ArrayBuffer IP packet sent platform. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setParameters() chrome.vpnProvider.setParameters( parameters: Parameters, callback?: function, ) Sets parameters VPN session. called immediately \"connected\" received platform. succeed VPN session owned extension. Parameters - parameters parameters VPN session. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onConfigCreated chrome.vpnProvider.onConfigCreated.addListener( callback: function, ) Triggered configuration created platform extension. Parameters - callback function callback parameter looks like:(id: string, name: string, data: object) => void - id string - name string - data object - onConfigRemoved chrome.vpnProvider.onConfigRemoved.addListener( callback: function, ) Triggered configuration created extension removed platform. Parameters - callback function callback parameter looks like:(id: string) => void - id string - onPacketReceived chrome.vpnProvider.onPacketReceived.addListener( callback: function, ) Triggered IP packet received via tunnel VPN session owned extension. Parameters - callback function callback parameter looks like:(data: ArrayBuffer) => void - data ArrayBuffer - onPlatformMessage chrome.vpnProvider.onPlatformMessage.addListener( callback: function, ) Triggered message received platform VPN configuration owned extension. Parameters - callback function callback parameter looks like:(id: string, message: PlatformMessage, error: string) => void - id string - message - error string - onUIEvent chrome.vpnProvider.onUIEvent.addListener( callback: function, ) Triggered UI event extension. UI events signals platform indicate app UI dialog needs shown user."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/wallpaper", "title": "chrome.wallpaper | API | Chrome for Developers", "text": "Description Use chrome.wallpaper API change ChromeOS wallpaper. Permissions wallpaper must declare \"wallpaper\" permission app's manifest use wallpaper API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"wallpaper\" ], ... } Availability Examples example, set wallpaper image https://example.com/a_file.png , call chrome.wallpaper.setWallpaper way: chrome.wallpaper.setWallpaper( { 'url': 'https://example.com/a_file.jpg', 'layout': 'CENTER_CROPPED', 'filename': 'test_wallpaper' }, function() {} ); Types WallpaperLayout supported wallpaper layouts. Enum \"STRETCH\" \"CENTER\" \"CENTER_CROPPED\" Methods setWallpaper() chrome.wallpaper.setWallpaper( details: object, callback?: function, ) Sets wallpaper image url wallpaperData specified layout Parameters - details object - data ArrayBuffer optional jpeg png encoded wallpaper image ArrayBuffer. - filename string file name saved wallpaper. - layout supported wallpaper layouts. - thumbnail boolean optional True 128x60 thumbnail generated. Layout ratio supported yet. - url string optional URL wallpaper set (can relative). - - callback function optional callback parameter looks like:(thumbnail?: ArrayBuffer) => void - thumbnail ArrayBuffer optional jpeg encoded wallpaper thumbnail. generated resizing wallpaper 128x60. - Returns - Promise<ArrayBuffer | undefined> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webAuthenticationProxy", "title": "chrome.webAuthenticationProxy | API | Chrome for Developers", "text": "Description chrome.webAuthenticationProxy API lets remote desktop software running remote host intercept Web Authentication API (WebAuthn) requests order handle local client. Permissions webAuthenticationProxy Availability Types CreateRequest Properties - requestDetailsJson string PublicKeyCredentialCreationOptions passed tonavigator.credentials.create() , serialized JSON string. serialization format compatible withPublicKeyCredential.parseCreationOptionsFromJSON() . - requestId number opaque identifier request. CreateResponseDetails Properties - error DOMExceptionDetails optional DOMException yielded remote request, any. - requestId number requestId theCreateRequest . - responseJson string optional PublicKeyCredential , yielded remote request, any, serialized JSON string calling href=\"https://w3c.github.io/webauthn/#dom-publickeycredential-tojson\">PublicKeyCredential.toJSON() . DOMExceptionDetails Properties - message string - name string GetRequest Properties - requestDetailsJson string PublicKeyCredentialRequestOptions passed tonavigator.credentials.get() , serialized JSON string. serialization format compatible withPublicKeyCredential.parseRequestOptionsFromJSON() . - requestId number opaque identifier request. GetResponseDetails Properties - error DOMExceptionDetails optional DOMException yielded remote request, any. - requestId number requestId theCreateRequest . - responseJson string optional PublicKeyCredential , yielded remote request, any, serialized JSON string calling href=\"https://w3c.github.io/webauthn/#dom-publickeycredential-tojson\">PublicKeyCredential.toJSON() . IsUvpaaRequest Properties - requestId number opaque identifier request. IsUvpaaResponseDetails Properties - isUvpaa boolean - requestId number Methods attach() chrome.webAuthenticationProxy.attach( callback?: function, ) Makes extension active Web Authentication API request proxy. Remote desktop extensions typically call method detecting attachment remote session host. method returns without error, regular processing WebAuthn requests suspended, events extension API raised. method fails error different extension already attached. attached extension must call detach() remote desktop session ended order resume regular WebAuthn request processing. Extensions automatically become detached unloaded. Refer onRemoteSessionStateChange event signaling change remote session attachment native application (possibly suspended) extension. Parameters - callback function optional callback parameter looks like:(error?: string) => void - error string optional - Returns - Promise<string | undefined> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. completeCreateRequest() chrome.webAuthenticationProxy.completeCreateRequest( details: CreateResponseDetails, callback?: function, ) Reports result navigator.credentials.create() call. extension must call every onCreateRequest event received, unless request canceled (in case, onRequestCanceled event fired). Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. completeGetRequest() chrome.webAuthenticationProxy.completeGetRequest( details: GetResponseDetails, callback?: function, ) Reports result navigator.credentials.get() call. extension must call every onGetRequest event received, unless request canceled (in case, onRequestCanceled event fired). Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. completeIsUvpaaRequest() chrome.webAuthenticationProxy.completeIsUvpaaRequest( details: IsUvpaaResponseDetails, callback?: function, ) Reports result PublicKeyCredential.isUserVerifyingPlatformAuthenticator() call. extension must call every onIsUvpaaRequest event received. Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. detach() chrome.webAuthenticationProxy.detach( callback?: function, ) Removes extension active Web Authentication API request proxy. method typically called extension detects remote desktop session terminated. method returns, extension ceases active Web Authentication API request proxy. Refer onRemoteSessionStateChange event signaling change remote session attachment native application (possibly suspended) extension. Parameters - callback function optional callback parameter looks like:(error?: string) => void - error string optional - Returns - Promise<string | undefined> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onCreateRequest chrome.webAuthenticationProxy.onCreateRequest.addListener( callback: function, ) Fires WebAuthn navigator.credentials.create() call occurs. extension must supply response calling completeCreateRequest() requestId requestInfo . Parameters - callback function callback parameter looks like:(requestInfo: CreateRequest) => void - requestInfo - onGetRequest chrome.webAuthenticationProxy.onGetRequest.addListener( callback: function, ) Fires WebAuthn navigator.credentials.get() call occurs. extension must supply response calling completeGetRequest() requestId requestInfo Parameters - callback function callback parameter looks like:(requestInfo: GetRequest) => void - requestInfo - onIsUvpaaRequest chrome.webAuthenticationProxy.onIsUvpaaRequest.addListener( callback: function, ) Fires PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable() call occurs. extension must supply response calling completeIsUvpaaRequest() requestId requestInfo Parameters - callback function callback parameter looks like:(requestInfo: IsUvpaaRequest) => void - requestInfo - onRemoteSessionStateChange chrome.webAuthenticationProxy.onRemoteSessionStateChange.addListener( callback: function, ) native application associated extension cause event fired writing file name equal extension's ID directory named WebAuthenticationProxyRemoteSessionStateChange inside default user data directory contents file empty. I.e., necessary change contents file order trigger event. native host application may use event mechanism signal possible remote session state change (i.e. detached attached, vice versa) extension service worker possibly suspended. handler event, extension call attach() detach() API methods accordingly. event listener must registered synchronously load time. Parameters - callback function callback parameter looks like:() => void onRequestCanceled chrome.webAuthenticationProxy.onRequestCanceled.addListener( callback: function, ) Fires onCreateRequest onGetRequest event canceled (because WebAuthn request aborted caller, timed out). receiving event, extension cancel processing corresponding request client side. Extensions cannot complete request canceled. Parameters - callback function callback parameter looks like:(requestId: number) => void - requestId number -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webNavigation", "title": "chrome.webNavigation | API | Chrome for Developers", "text": "Description Use chrome.webNavigation API receive notifications status navigation requests in-flight. Permissions webNavigation chrome.webNavigation methods events require declare \"webNavigation\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"webNavigation\" ], ... } Concepts usage Event order navigation successfully completed, events fired following order: onBeforeNavigate -> onCommitted -> [onDOMContentLoaded] -> onCompleted error occurs process results onErrorOccurred event. specific navigation, events fired onErrorOccurred . navigating frame contains subframes, onCommitted fired children's onBeforeNavigate ; onCompleted fired children's onCompleted . reference fragment frame changed, onReferenceFragmentUpdated event fired. event fire time onDOMContentLoaded , even onCompleted . history API used modify state frame (e.g. using history.pushState() , onHistoryStateUpdated event fired. event fire time onDOMContentLoaded . navigation restored page Back Forward Cache, onDOMContentLoaded event fire. event fired content already completed load page first visited. navigation triggered using Chrome Instant Instant Pages, completely loaded page swapped current tab. case, onTabReplaced event fired. Relation webRequest events defined ordering events webRequest API events webNavigation API. possible webRequest events still received frames already started new navigation, navigation proceeds network resources already fully loaded. general, webNavigation events closely related navigation state displayed UI, webRequest events correspond state network stack generally opaque user. Tab IDs navigating tabs correspond actual tabs Chrome's UI, example, tab pre-rendered. tabs accessible using tabs API request information calling webNavigation.getFrame() webNavigation.getAllFrames() . tab swapped in, onTabReplaced event fired become accessible APIs. Timestamps important note technical oddities OS's handling distinct Chrome processes cause clock skewed browser extension processes. means timeStamp property WebNavigation event timeStamp property guaranteed internally consistent. Comparing one event another event give correct offset them, comparing current time inside extension (using (new Date()).getTime() , instance) might give unexpected results. Frame IDs Frames within tab identified frame ID. frame ID main frame always 0, ID child frames positive number. document constructed frame, frame ID remains constant lifetime document. Chrome 49, ID also constant lifetime frame (across multiple navigations). Due multi-process nature Chrome, tab might use different processes render source destination web page. Therefore, navigation takes place new process, might receive events new old page new navigation committed (i.e. onCommitted event sent new main frame). words, possible one pending sequence webNavigation events frameId . sequences distinguished processId key. Also note provisional load process might switched several times. happens load redirected different site. case, receive repeated onBeforeNavigate onErrorOccurred events, receive final onCommitted event. Another concept problematic extensions lifecycle frame. frame hosts document (which associated committed URL). document change (say navigating) frameId won't, difficult associate something happened specific document frameIds. introducing concept documentId unique identifier per document. frame navigated opens new document identifier change. field useful determining pages change lifecycle state (between prerender/active/cached) remains same. Transition types qualifiers webNavigation onCommitted event transitionType transitionQualifiers property. transition type used history API describing browser navigated particular URL. addition, several transition qualifiers returned define navigation. following transition qualifiers exist: | Transition qualifier | Description | |---|---| | \"client_redirect\" | One redirects caused JavaScript meta refresh tags page happened navigation. | | \"server_redirect\" | One redirects caused HTTP headers sent server happened navigation. | | \"forward_back\" | user used Forward Back button initiate navigation. | | \"from_address_bar\" | user initiated navigation address bar (aka Omnibox). | Examples try API, install webNavigation API example chrome-extension-samples repository. Types TransitionQualifier Enum \"client_redirect\" \"server_redirect\" \"forward_back\" \"from_address_bar\" TransitionType Cause navigation. transition types defined history API used. transition types defined history API except \"start_page\" place \"auto_toplevel\" (for backwards compatibility). Enum \"link\" \"typed\" \"auto_bookmark\" \"auto_subframe\" \"manual_subframe\" \"generated\" \"start_page\" \"form_submit\" \"reload\" \"keyword\" \"keyword_generated\" Methods getAllFrames() chrome.webNavigation.getAllFrames( details: object, callback?: function, ) Retrieves information frames given tab. Parameters - details object Information tab retrieve frames from. - tabId number ID tab. - - callback function optional callback parameter looks like:(details?: object[]) => void - details object[] optional list frames given tab, null specified tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameId number ID frame. 0 indicates main frame; positive value indicates ID subframe. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - url string URL currently associated frame. - - Returns - Promise<object[] | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFrame() chrome.webNavigation.getFrame( details: object, callback?: function, ) Retrieves information given frame. frame refers <iframe> <frame> web page identified tab ID frame ID. Parameters - details object Information frame retrieve information about. - documentId string optional Chrome 106+The UUID document. frameId and/or tabId provided validated match document found provided document ID. - frameId number optional ID frame given tab. - processId number optional Deprecated since Chrome 49Frames uniquely identified tab ID frame ID; process ID longer needed therefore ignored. ID process runs renderer tab. - tabId number optional ID tab frame is. - - callback function optional callback parameter looks like:(details?: object) => void - details object optional Information requested frame, null specified frame ID and/or tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - url string URL currently associated frame, frame identified frameId existed one point given tab. fact URL associated given frameId imply corresponding frame still exists. - - Returns - Promise<object | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBeforeNavigate chrome.webNavigation.onBeforeNavigate.addListener( callback: function, filters?: object, ) Fired navigation occur. Parameters - function callback parameter looks like:(details: object) => void - object - Chrome 106+ lifecycle document in. - number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique given tab process. - Chrome 106+ type frame navigation occurred in. - string optional Chrome 106+A UUID parent document owning frame. set parent. - number ID parent frame, -1 main frame. - number Deprecated since Chrome 50The processId longer set event, since process render resulting document known onCommit. value -1. - number ID tab navigation occur. - number time browser start navigation, milliseconds since epoch. - string - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCommitted chrome.webNavigation.onCommitted.addListener( callback: function, filters?: object, ) Fired navigation committed. document (and resources refers to, images subframes) might still downloading, least part document received server browser decided switch new document. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCompleted chrome.webNavigation.onCompleted.addListener( callback: function, filters?: object, ) Fired document, including resources refers to, completely loaded initialized. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time document finished loading, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCreatedNavigationTarget chrome.webNavigation.onCreatedNavigationTarget.addListener( callback: function, filters?: object, ) Fired new window, new tab existing window, created host navigation. Parameters - function callback parameter looks like:(details: object) => void - object - number ID frame sourceTabId navigation triggered. 0 indicates main frame. - number ID process runs renderer source frame. - number ID tab navigation triggered. - number ID tab url opened - number time browser create new view, milliseconds since epoch. - string URL opened new window. - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onDOMContentLoaded chrome.webNavigation.onDOMContentLoaded.addListener( callback: function, filters?: object, ) Fired page's DOM fully constructed, referenced resources may finish loading. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time page's DOM fully constructed, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onErrorOccurred chrome.webNavigation.onErrorOccurred.addListener( callback: function, filters?: object, ) Fired error occurs navigation aborted. happen either network error occurred, user aborted navigation. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - error string error description. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number Deprecated since Chrome 50The processId longer set event. value -1. - tabId number ID tab navigation occurs. - timeStamp number time error occurred, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onHistoryStateUpdated chrome.webNavigation.onHistoryStateUpdated.addListener( callback: function, filters?: object, ) Fired frame's history updated new URL. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onReferenceFragmentUpdated chrome.webNavigation.onReferenceFragmentUpdated.addListener( callback: function, filters?: object, ) Fired reference fragment frame updated. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onTabReplaced chrome.webNavigation.onTabReplaced.addListener( callback: function, ) Fired contents tab replaced different (usually previously pre-rendered) tab. Parameters - callback function callback parameter looks like:(details: object) => void - details object - replacedTabId number ID tab replaced. - tabId number ID tab replaced old tab. - timeStamp number time replacement happened, milliseconds since epoch. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webRequest", "title": "chrome.webRequest | API | Chrome for Developers", "text": "Description Use chrome.webRequest API observe analyze traffic intercept, block, modify requests in-flight. Permissions webRequest must declare \"webRequest\" permission extension manifest use web request API, along necessary host permissions. intercept sub-resource request, extension must access requested URL initiator. example: { \"name\": \"My extension\", ... \"permissions\": [ \"webRequest\" ], \"host_permissions\": [ \"*://*.google.com/*\" ], ... } webRequestBlocking Required register blocking event handlers. Manifest V3, available policy installed extensions. webRequestAuthProvider Required use onAuthRequired method. See Handling authentication. Concepts usage Life cycle requests web request API defines set events follow life cycle web request. use events observe analyze traffic. Certain synchronous events allow intercept, block, modify request. event life cycle successful requests illustrated here, followed event definitions: onBeforeRequest (optionally synchronous)- Fires request occur. event sent TCP connection made used cancel redirect requests. onBeforeSendHeaders (optionally synchronous)- Fires request occur initial headers prepared. event intended allow extensions add, modify, delete request headers (*). onBeforeSendHeaders event passed subscribers, different subscribers may attempt modify request; see Implementation details section handled. event used cancel request. onSendHeaders - Fires extensions chance modify request headers, presents final (*) version. event triggered headers sent network. event informational handled asynchronously. allow modifying cancelling request. onHeadersReceived (optionally synchronous)- Fires time HTTP(S) response header received. Due redirects authentication requests happen multiple times per request. event intended allow extensions add, modify, delete response headers, incoming Content-Type headers. caching directives processed event triggered, modifying headers Cache-Control influence browser's cache. also allows cancel redirect request. onAuthRequired (optionally synchronous)- Fires request requires authentication user. event handled synchronously provide authentication credentials. Note extensions may provide invalid credentials. Take care enter infinite loop repeatedly providing invalid credentials. also used cancel request. onBeforeRedirect - Fires redirect executed. redirection triggered HTTP response code extension. event informational handled asynchronously. allow modify cancel request. onResponseStarted - Fires first byte response body received. HTTP requests, means status line response headers available. event informational handled asynchronously. allow modifying canceling request. onCompleted - Fires request processed successfully. onErrorOccurred - Fires request could processed successfully. web request API guarantees request, either onCompleted onErrorOccurred fired final event one exception: request redirected data:// URL, onBeforeRedirect last reported event. * Note web request API presents abstraction network stack extension. Internally, one URL request split several HTTP requests (for example, fetch individual byte ranges large file) handled network stack without communicating network. reason, API provide final HTTP headers sent network. example, headers related caching invisible extension. following headers currently provided onBeforeSendHeaders event. list guaranteed complete stable. - Authorization - Cache-Control - Connection - Content-Length - Host - If-Modified-Since - If-None-Match - If-Range - Partial-Data - Pragma - Proxy-Authorization - Proxy-Connection - Transfer-Encoding Starting Chrome 79, request header modifications affect Cross-Origin Resource Sharing (CORS) checks. modified headers cross-origin requests meet criteria, result sending CORS preflight ask server headers accepted. really need modify headers way violate CORS protocol, need specify 'extraHeaders' opt_extraInfoSpec . hand, response header modifications work deceive CORS checks. need deceive CORS protocol, also need specify 'extraHeaders' response modifications. Starting Chrome 79, webRequest API intercept CORS preflight requests responses default. CORS preflight request URL visible extension listener 'extraHeaders' specified opt_extraInfoSpec request URL. onBeforeRequest also take 'extraHeaders' Chrome 79. Starting Chrome 79, following request header provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec : - Origin Starting Chrome 72, need modify responses Cross Origin Read Blocking (CORB) block response, need specify 'extraHeaders' opt_extraInfoSpec . Starting Chrome 72, following request headers provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec : - Accept-Language - Accept-Encoding - Referer - Cookie Starting Chrome 72, Set-Cookie response header provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec . Starting Chrome 89, X-Frame-Options response header cannot effectively modified removed without specifying 'extraHeaders' opt_extraInfoSpec . webRequest API exposes requests extension permission see, given host permissions. Moreover, following schemes accessible: http:// , https:// , ftp:// , file:// , ws:// (since Chrome 58), wss:// (since Chrome 58), urn: (since Chrome 91), chrome-extension:// . addition, even certain requests URLs using one schemes hidden. include chrome-extension://other_extension_id other_extension_id ID extension handle request, https://www.google.com/chrome , sensitive requests core browser functionality. Also synchronous XMLHttpRequests extension hidden blocking event handlers order prevent deadlocks. Note supported schemes set available events might limited due nature corresponding protocol. example, file: scheme, onBeforeRequest , onResponseStarted , onCompleted , onErrorOccurred may dispatched. Starting Chrome 58, webRequest API supports intercepting WebSocket handshake request. Since handshake done means HTTP upgrade request, flow fits HTTP-oriented webRequest model. Note API intercept: - Individual messages sent established WebSocket connection. - WebSocket closing connection. Redirects supported WebSocket requests. Starting Chrome 72, extension able intercept request host permissions requested URL request initiator. Starting Chrome 96, webRequest API supports intercepting WebTransport HTTP/3 handshake request. Since handshake done means HTTP CONNECT request, flow fits HTTP-oriented webRequest model. Note that: - session established, extensions cannot observe intervene session via webRequest API. - Modifying HTTP request headers onBeforeSendHeaders ignored. - Redirects authentications supported WebTransport HTTP/3. Request IDs request identified request ID. ID unique within browser session context extension. remains constant life cycle request used match events request. Note several HTTP requests mapped one web request case HTTP redirection HTTP authentication. Registering event listeners register event listener web request, use variation usual addListener() function. addition specifying callback function, specify filter argument, may specify optional extra info argument. three arguments web request API's addListener() following definitions: var callback = function(details) {...}; var filter = {...}; var opt_extraInfoSpec = [...]; Here's example listening onBeforeRequest event: chrome.webRequest.onBeforeRequest.addListener( callback, filter, opt_extraInfoSpec); addListener() call takes mandatory callback function first parameter. callback function passed dictionary containing information current URL request. information dictionary depends specific event type well content opt_extraInfoSpec . optional opt_extraInfoSpec array contains string 'blocking' (only allowed specific events), callback function handled synchronously. means request blocked callback function returns. case, callback return webRequest.BlockingResponse determines life cycle request. Depending context, response allows canceling redirecting request (onBeforeRequest ), canceling request modifying headers (onBeforeSendHeaders , onHeadersReceived ), canceling request providing authentication credentials (onAuthRequired ). optional opt_extraInfoSpec array contains string 'asyncBlocking' instead (only allowed onAuthRequired ), extension generate webRequest.BlockingResponse asynchronously. webRequest.RequestFilter filter allows limiting requests events triggered various dimensions: - URLs - URL patterns *://www.google.com/foo*bar . - Types - Request types main_frame (a document loaded top-level frame),sub_frame (a document loaded embedded frame), andimage (an image web site). SeewebRequest.RequestFilter . - Tab ID - identifier one tab. - Window ID - identifier window. Depending event type, specify strings opt_extraInfoSpec ask additional information request. used provide detailed information request's data explicitly requested. Handling authentication handle requests HTTP authentication, add \"webRequestAuthProvider\" permission manifest file: { \"permissions\": [ \"webRequest\", \"webRequestAuthProvider\" ] } Note permission required policy installed extension \"webRequestBlocking\" permission. provide credentials synchronously: chrome.webRequest.onAuthRequired.addListener((details) => { return { authCredentials: { username: 'guest', password: 'guest' } }; }, { urls: ['https://httpbin.org/basic-auth/guest/guest'] }, ['blocking'] ); provide credentials asynchronously: chrome.webRequest.onAuthRequired.addListener((details, callback) => { callback({ authCredentials: { username: 'guest', password: 'guest' } }); }, { urls: ['https://httpbin.org/basic-auth/guest/guest'] }, ['asyncBlocking'] ); Implementation details Several implementation details important understand developing extension uses web request API: web_accessible_resources extension uses webRequest APIs redirect public resource request resource web accessible, blocked result error. holds true even resource web accessible owned redirecting extension. declare resources use declarativeWebRequest APIs, \"web_accessible_resources\" array must declared populated manifest documented here. Conflict resolution current implementation web request API, request considered canceled least one extension instructs cancel request. extension cancels request, extensions notified onErrorOccurred event. one extension redirect request modify header time. one extension attempts modify request, recently installed extension wins, others ignored. extension notified instruction modify redirect ignored. Caching Chrome employs two caches\u2014an on-disk cache fast in-memory cache. lifetime in-memory cache attached lifetime render process, roughly corresponds tab. Requests answered in-memory cache invisible web request API. request handler changes behavior (for example, behavior according requests blocked), simple page refresh might respect changed behavior. ensure behavior change goes through, call handlerBehaviorChanged() flush in-memory cache. often; flushing cache expensive operation. need call handlerBehaviorChanged() registering unregistering event listener. Timestamps timestamp property web request events guaranteed internally consistent. Comparing one event another event give correct offset them, comparing current time inside extension (via (new Date()).getTime() , instance) might give unexpected results. Error handling try register event invalid arguments, JavaScript error thrown, event handler registered. error thrown event handled event handler returns invalid blocking response, error message logged extension's console, handler ignored request. Examples following example illustrates block requests www.evil.com : chrome.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: details.url.indexOf(\"://www.evil.com/\") != -1}; }, {urls: [\"<all_urls>\"]}, [\"blocking\"] ); function uses blocking event handler, requires \"webRequest\" well \"webRequestBlocking\" permission manifest file. following example achieves goal efficient way requests targeted www.evil.com need passed extension: chrome.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: true}; }, {urls: [\"*://www.evil.com/*\"]}, [\"blocking\"] ); following example illustrates delete User-Agent header requests: chrome.webRequest.onBeforeSendHeaders.addListener( function(details) { (var = 0; < details.requestHeaders.length; ++i) { (details.requestHeaders[i].name === 'User-Agent') { details.requestHeaders.splice(i, 1); break; } } return {requestHeaders: details.requestHeaders}; }, {urls: [\"<all_urls>\"]}, [\"blocking\", \"requestHeaders\"] ); try chrome.webRequest API, install webRequest sample chrome-extension-samples repository. Types BlockingResponse Returns value event handlers 'blocking' extraInfoSpec applied. Allows event handler modify network requests. Properties - authCredentials object optional used response onAuthRequired event. set, request made using supplied credentials. - password string - username string - - cancel boolean optional true, request cancelled. prevents request sent. used response onBeforeRequest, onBeforeSendHeaders, onHeadersReceived onAuthRequired events. - redirectUrl string optional used response onBeforeRequest onHeadersReceived events. set, original request prevented sent/completed instead redirected given URL. Redirections non-HTTP schemes data: allowed. Redirects initiated redirect action use original request method redirect, one exception: redirect initiated onHeadersReceived stage, redirect issued using GET method. Redirects URLs withws:// andwss:// schemes ignored. - requestHeaders HttpHeaders optional used response onBeforeSendHeaders event. set, request made request headers instead. - responseHeaders HttpHeaders optional used response onHeadersReceived event. set, server assumed responded response headers instead. return responseHeaders really want modify headers order limit number conflicts (only one extension may modifyresponseHeaders request). FormDataItem Contains data passed within form data. urlencoded form stored string data utf-8 string ArrayBuffer otherwise. form-data ArrayBuffer. form-data represents uploading file, string filename, filename provided. Enum ArrayBuffer string HttpHeaders array HTTP headers. header represented dictionary containing keys name either value binaryValue . Type object[] Properties - binaryValue number[] optional Value HTTP header cannot represented UTF-8, stored individual byte values (0..255). - name string Name HTTP header. - value string optional Value HTTP header represented UTF-8. IgnoredActionType Enum \"redirect\" \"request_headers\" \"response_headers\" \"auth_credentials\" OnAuthRequiredOptions Enum \"responseHeaders\" \"blocking\" \"asyncBlocking\" \"extraHeaders\" Specifies response headers included event. Specifies request blocked callback function returns. Specifies callback function handled asynchronously. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeRedirectOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeRequestOptions Enum \"blocking\" \"requestBody\" \"extraHeaders\" Specifies request blocked callback function returns. Specifies request body included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeSendHeadersOptions Enum \"requestHeaders\" \"blocking\" \"extraHeaders\" Specifies request header included event. Specifies request blocked callback function returns. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnCompletedOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnErrorOccurredOptions Value \"extraHeaders\" OnHeadersReceivedOptions Enum \"blocking\" \"responseHeaders\" \"extraHeaders\" Specifies request blocked callback function returns. Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnResponseStartedOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnSendHeadersOptions Enum \"requestHeaders\" \"extraHeaders\" Specifies request header included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). RequestFilter object describing filters apply webRequest events. Properties - tabId number optional - types ResourceType[] optional list request types. Requests cannot match types filtered out. - urls string[] list URLs URL patterns. Requests cannot match URLs filtered out. - windowId number optional ResourceType Enum \"main_frame\" \"sub_frame\" \"stylesheet\" \"script\" \"image\" \"font\" \"object\" \"xmlhttprequest\" \"ping\" \"csp_report\" \"media\" \"websocket\" \"webbundle\" \"other\" Specifies resource main frame. Specifies resource sub frame. Specifies resource stylesheet. Specifies resource script. Specifies resource image. Specifies resource font. Specifies resource object. Specifies resource XMLHttpRequest. Specifies resource ping. Specifies resource Content Security Policy (CSP) report. Specifies resource media object. Specifies resource WebSocket. Specifies resource WebBundle. Specifies resource type included listed types. UploadData Contains data uploaded URL request. Properties - bytes optional ArrayBuffer copy data. - file string optional string file's path name. Properties MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES maximum number times handlerBehaviorChanged called per 10 minute sustained interval. handlerBehaviorChanged expensive function call called often. Value 20 Methods handlerBehaviorChanged() chrome.webRequest.handlerBehaviorChanged( callback?: function, ) Needs called behavior webRequest handlers changed prevent incorrect handling due caching. function call expensive. call often. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActionIgnored chrome.webRequest.onActionIgnored.addListener( callback: function, ) Fired extension's proposed modification network request ignored. happens case conflicts extensions. Parameters - callback function callback parameter looks like:(details: object) => void - details object - action proposed action ignored. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - - onAuthRequired chrome.webRequest.onAuthRequired.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnAuthRequiredOptions[], ) Fired authentication failure received. listener three options: provide authentication credentials, cancel request display error page, take action challenge. bad user credentials provided, may called multiple times request. Note, one 'blocking' 'asyncBlocking' modes must specified extraInfoSpec parameter. Parameters - callback function callback parameter looks like:(details: object, asyncCallback?: function) => BlockingResponse | undefined - details object - challenger object server requesting authentication. - host string - port number - - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - isProxy boolean True Proxy-Authenticate, false WWW-Authenticate. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - realm string optional authentication realm provided server, one. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - scheme string authentication scheme, e.g. Basic Digest. - statusCode number Chrome 43+Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - asyncCallback function optional Chrome 58+The asyncCallback parameter looks like:(response: BlockingResponse) => void - response - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnAuthRequiredOptions[] optional onBeforeRedirect chrome.webRequest.onBeforeRedirect.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeRedirectOptions[], ) Fired server-initiated redirect occur. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - redirectUrl string new URL. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along redirect. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnBeforeRedirectOptions[] optional onBeforeRequest chrome.webRequest.onBeforeRequest.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeRequestOptions[], ) Fired request occur. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string optional Chrome 106+The UUID document making request. - documentLifecycle extensionTypes.DocumentLifecycle optional Chrome 106+The lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameType extensionTypes.FrameType optional Chrome 106+The type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestBody object optional Contains HTTP request body data. provided extraInfoSpec contains 'requestBody'. - error string optional Errors obtaining request body data. - formData object optional request method POST body sequence key-value pairs encoded UTF8, encoded either multipart/form-data, application/x-www-form-urlencoded, dictionary present key contains list values key. data another media type, malformed, dictionary present. example value dictionary {'key': ['value1', 'value2']}. - raw UploadData[] optional request method PUT POST, body already parsed formData, unparsed request body elements contained array. - - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnBeforeRequestOptions[] optional onBeforeSendHeaders chrome.webRequest.onBeforeSendHeaders.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeSendHeadersOptions[], ) Fired sending HTTP request, request headers available. may occur TCP connection made server, HTTP data sent. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestHeaders HttpHeaders optional HTTP request headers going sent request. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnBeforeSendHeadersOptions[] optional onCompleted chrome.webRequest.onCompleted.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnCompletedOptions[], ) Fired request completed. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnCompletedOptions[] optional onErrorOccurred chrome.webRequest.onErrorOccurred.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnErrorOccurredOptions[], ) Fired error occurs. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. value present request navigation frame. - documentLifecycleChrome 106+ lifecycle document in. - error string error description. string guaranteed remain backwards compatible releases. must parse act based upon content. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnErrorOccurredOptions[] optional onHeadersReceived chrome.webRequest.onHeadersReceived.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnHeadersReceivedOptions[], ) Fired HTTP response headers request received. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received response. - statusCode number Chrome 43+Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line). - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnHeadersReceivedOptions[] optional onResponseStarted chrome.webRequest.onResponseStarted.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnResponseStartedOptions[], ) Fired first byte response body received. HTTP requests, means status line response headers available. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnResponseStartedOptions[] optional onSendHeaders chrome.webRequest.onSendHeaders.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnSendHeadersOptions[], ) Fired request going sent server (modifications previous onBeforeSendHeaders callbacks visible time onSendHeaders fired). Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestHeaders HttpHeaders optional HTTP request headers sent request. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnSendHeadersOptions[] optional"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/windows", "title": "chrome.windows | API | Chrome for Developers", "text": "Description Use chrome.windows API interact browser windows. use API create, modify, rearrange windows browser. Permissions requested, windows.Window contains array tabs.Tab objects. must declare \"tabs\" permission manifest need access url , pendingUrl , title , favIconUrl properties tabs.Tab . example: { \"name\": \"My extension\", ... \"permissions\": [\"tabs\"], ... } Concepts usage current window Many functions extension system take optional windowId argument, defaults current window. current window window contains code currently executing. important realize different topmost focused window. example, say extension creates tabs windows single HTML file, HTML file contains call tabs.query() . current window window contains page made call, matter topmost window is. case service workers, value current window falls back last active window. circumstances, may current window background pages. Examples try API, install windows API example chrome-extension-samples repository. Types CreateType Specifies type browser window create. 'panel' deprecated available existing allowlisted extensions Chrome OS. Enum \"normal\" \"popup\" \"panel\" Specifies window standard window. Specifies window popup window. Specifies window panel. QueryOptions Properties - populate boolean optional true, windows.Window object atabs property contains list thetabs.Tab objects. TheTab objects contain theurl ,pendingUrl ,title , andfavIconUrl properties extension's manifest file includes the\"tabs\" permission. - windowTypes WindowType[] optional set, windows.Window returned filtered based type. unset, default filter set to['normal', 'popup'] . Window Properties - alwaysOnTop boolean Whether window set always top. - focused boolean Whether window currently focused window. - height number optional height window, including frame, pixels. circumstances window may assigned height property; example, querying closed windows thesessions API. - id number optional ID window. Window IDs unique within browser session. circumstances window may assigned ID property; example, querying windows using thesessions API, case session ID may present. - incognito boolean Whether window incognito. - left number optional offset window left edge screen pixels. circumstances window may assigned left property; example, querying closed windows thesessions API. - sessionId string optional session ID used uniquely identify window, obtained sessions API. - state WindowState optional state browser window. - tabs Tab[] optional Array tabs.Tab objects representing current tabs window. - top number optional offset window top edge screen pixels. circumstances window may assigned top property; example, querying closed windows thesessions API. - type WindowType optional type browser window is. - width number optional width window, including frame, pixels. circumstances window may assigned width property; example, querying closed windows thesessions API. WindowState state browser window. circumstances window may assigned state property; example, querying closed windows sessions API. Enum \"normal\" \"minimized\" \"maximized\" \"fullscreen\" \"locked-fullscreen\" Normal window state (not minimized, maximized, fullscreen). Minimized window state. Maximized window state. Fullscreen window state. Locked fullscreen window state. fullscreen state cannot exited user action available allowlisted extensions Chrome OS. WindowType type browser window is. circumstances window may assigned type property; example, querying closed windows sessions API. Enum \"normal\" \"popup\" \"panel\" \"app\" \"devtools\" normal browser window. browser popup. Deprecated API. Chrome App panel-style window. Extensions see panel windows. Deprecated API. Chrome App window. Extensions see app windows. Developer Tools window. Properties WINDOW_ID_CURRENT windowId value represents current window. Value -2 WINDOW_ID_NONE windowId value represents absence Chrome browser window. Value -1 Methods create() chrome.windows.create( createData?: object, callback?: function, ) Creates (opens) new browser window optional sizing, position, default URL provided. Parameters - createData object optional - focused boolean optional true , opens active window. Iffalse , opens inactive window. - height number optional height pixels new window, including frame. specified, defaults natural height. - incognito boolean optional Whether new window incognito window. - left number optional number pixels position new window left edge screen. specified, new window offset naturally last focused window. value ignored panels. - setSelfAsOpener boolean optional Chrome 64+If true , newly-created window's 'window.opener' set caller unit related browsing contexts caller. - state WindowState optional Chrome 44+The initial state window. minimized ,maximized , andfullscreen states cannot combined withleft ,top ,width , orheight . - tabId number optional ID tab add new window. - top number optional number pixels position new window top edge screen. specified, new window offset naturally last focused window. value ignored panels. - type CreateType optional Specifies type browser window create. - url string | string[] optional URL array URLs open tabs window. Fully-qualified URLs must include scheme, e.g., 'http://www.google.com', 'www.google.com'. Non-fully-qualified URLs considered relative within extension. Defaults New Tab Page. - width number optional width pixels new window, including frame. specified, defaults natural width. - - callback function optional callback parameter looks like:(window?: Window) => void - window Window optional Contains details created window. - Returns - Promise<Window | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.windows.get( windowId: number, queryOptions?: QueryOptions, callback?: function, ) Gets details window. Parameters - windowId number - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.windows.getAll( queryOptions?: QueryOptions, callback?: function, ) Gets windows. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(windows: Window[]) => void - windows Window[] - Returns - Promise<Window[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCurrent() chrome.windows.getCurrent( queryOptions?: QueryOptions, callback?: function, ) Gets current window. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getLastFocused() chrome.windows.getLastFocused( queryOptions?: QueryOptions, callback?: function, ) Gets window recently focused \u2014 typically window 'on top'. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.windows.remove( windowId: number, callback?: function, ) Removes (closes) window tabs inside it. Parameters - windowId number - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.windows.update( windowId: number, updateInfo: object, callback?: function, ) Updates properties window. Specify properties changed; unspecified properties unchanged. Parameters - windowId number - updateInfo object - drawAttention boolean optional true , causes window displayed manner draws user's attention window, without changing focused window. effect lasts user changes focus window. option effect window already focus. Set tofalse cancel previousdrawAttention request. - focused boolean optional true , brings window front; cannot combined state 'minimized'. Iffalse , brings next window z-order front; cannot combined state 'fullscreen' 'maximized'. - height number optional height resize window pixels. value ignored panels. - left number optional offset left edge screen move window pixels. value ignored panels. - state WindowState optional new state window. 'minimized', 'maximized', 'fullscreen' states cannot combined 'left', 'top', 'width', 'height'. - top number optional offset top edge screen move window pixels. value ignored panels. - width number optional width resize window pixels. value ignored panels. - - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBoundsChanged chrome.windows.onBoundsChanged.addListener( callback: function, ) Fired window resized; event dispatched new bounds committed, in-progress changes. Parameters - callback function callback parameter looks like:(window: Window) => void - window - onCreated chrome.windows.onCreated.addListener( callback: function, filters?: object, ) Fired window created. Parameters - callback function Chrome 46+The callback parameter looks like:(window: Window) => void - window Details created window. - - filters object optional - windowTypes Conditions window's type created must satisfy. default satisfies ['normal', 'popup'] . - onFocusChanged chrome.windows.onFocusChanged.addListener( callback: function, filters?: object, ) Fired currently focused window changes. Returns chrome.windows.WINDOW_ID_NONE Chrome windows lost focus. Note: Linux window managers, WINDOW_ID_NONE always sent immediately preceding switch one Chrome window another. Parameters - callback function Chrome 46+The callback parameter looks like:(windowId: number) => void - windowId number ID newly-focused window. - - filters object optional - windowTypes Conditions window's type removed must satisfy. default satisfies ['normal', 'popup'] . - onRemoved chrome.windows.onRemoved.addListener( callback: function, filters?: object, ) Fired window removed (closed). Parameters - callback function Chrome 46+The callback parameter looks like:(windowId: number) => void - windowId number ID removed window. - - filters object optional - windowTypes Conditions window's type removed must satisfy. default satisfies ['normal', 'popup'] . -"},
{"source": "https://developer.chrome.com/docs/extensions/mv2/reference/browserAction", "title": "chrome.browserAction | Reference | Chrome for Developers", "text": "Description Use browser actions put icons main Google Chrome toolbar, right address bar. addition icon, browser action tooltip, badge, popup. Availability following figure, multicolored square right address bar icon browser action. popup icon. want create icon always active, use page action instead browser action. Manifest Register browser action extension manifest like this: { \"name\": \"My extension\", ... \"browser_action\": { \"default_icon\": { // optional \"16\": \"images/icon16.png\", // optional \"24\": \"images/icon24.png\", // optional \"32\": \"images/icon32.png\" // optional }, \"default_title\": \"Google Mail\", // optional, shown tooltip \"default_popup\": \"popup.html\" // optional }, ... } provide size icon used Chrome, Chrome select closest one scale appropriate size fill 16-dip space. However, exact size provided, scaling cause icon lose detail look fuzzy. Since devices less-common scale factors like 1.5x 1.2x becoming common, encouraged provide multiple sizes icons. also ensures icon display size ever changed, need work provide different icons! old syntax registering default icon still supported: { \"name\": \"My extension\", ... \"browser_action\": { ... \"default_icon\": \"images/icon32.png\" // optional // equivalent \"default_icon\": { \"32\": \"images/icon32.png\" } }, ... } Parts UI browser action icon, tooltip, badge, popup. Icon browser action icons Chrome 16 dips (device-independent pixels) wide high. Larger icons resized fit, best results, use 16-dip square icon. set icon two ways: using static image using HTML5 canvas element. Using static images easier simple applications, create dynamic UIs\u2014such smooth animation\u2014using canvas element. Static images format WebKit display, including BMP, GIF, ICO, JPEG, PNG. unpacked extensions, images must PNG format. set icon, use default_icon field browser_action manifest, call browserAction.setIcon method. properly display icon screen pixel density (ratio size_in_pixel / size_in_dip ) different 1, icon defined set images different sizes. actual image display selected set best fit pixel size 16 dip. icon set contain size icon specification, Chrome select appropriate one. Tooltip set tooltip, use default_title field browser_action manifest, call browserAction.setTitle method. specify locale-specific strings default_title field; see Internationalization details. Badge Browser actions optionally display badge\u2014a bit text layered icon. Badges make easy update browser action display small amount information state extension. badge limited space, 4 characters less. Set text color badge using browserAction.setBadgeText browserAction.setBadgeBackgroundColor , respectively. Popup browser action popup, popup appears user clicks extension's icon. popup contain HTML contents like, automatically sized fit contents. popup cannot smaller 25x25 cannot larger 800x600. add popup browser action, create HTML file popup's contents. Specify HTML file default_popup field browser_action manifest, call browserAction.setPopup method. Tips best visual impact, follow guidelines: - use browser actions features make sense pages. - use browser actions features make sense pages. Use page actions instead. - use big, colorful icons make 16x16-dip space. Browser action icons seem little bigger heavier page action icons. - attempt mimic Google Chrome's monochrome menu icon. work well themes, anyway, extensions stand little. - use alpha transparency add soft edges icon. many people use themes, icon look nice variety background colors. - constantly animate icon. That's annoying. Examples find simple examples using browser actions examples/api/browserAction directory. examples help viewing source code, see Samples. Types ColorArray Type [number, number, number, number] ImageDataType Pixel data image. Must ImageData object; example, canvas element. Type ImageData TabDetails Properties - tabId number optional ID tab query state for. tab specified, non-tab-specific state returned. Methods disable() chrome.browserAction.disable( tabId?: number, callback?: function, ) Disables browser action tab. Parameters - tabId number optional ID tab modify browser action. - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. enable() chrome.browserAction.enable( tabId?: number, callback?: function, ) Enables browser action tab. Defaults enabled. Parameters - tabId number optional ID tab modify browser action. - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. getBadgeBackgroundColor() chrome.browserAction.getBadgeBackgroundColor( details: TabDetails, callback?: function, ) Gets background color browser action. Parameters - details - callback function optional callback parameter looks like:(result: ColorArray) => void - result - Returns - Promise<ColorArray> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. getBadgeText() chrome.browserAction.getBadgeText( details: TabDetails, callback?: function, ) Gets badge text browser action. tab specified, non-tab-specific badge text returned. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. getPopup() chrome.browserAction.getPopup( details: TabDetails, callback?: function, ) Gets HTML document set popup browser action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. getTitle() chrome.browserAction.getTitle( details: TabDetails, callback?: function, ) Gets title browser action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. setBadgeBackgroundColor() chrome.browserAction.setBadgeBackgroundColor( details: object, callback?: function, ) Sets background color badge. Parameters - details object - color string | ColorArray array four integers range 0-255 make RGBA color badge. also string CSS hex color value; example, #FF0000 or#F00 (red). Renders colors full opacity. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. setBadgeText() chrome.browserAction.setBadgeText( details: object, callback?: function, ) Sets badge text browser action. badge displayed top icon. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - text string optional number characters passed, four fit space. empty string ( '' ) passed, badge text cleared. IftabId specified andtext null, text specified tab cleared defaults global badge text. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. setIcon() chrome.browserAction.setIcon( details: object, callback?: function, ) Sets icon browser action. icon specified path image file, pixel data canvas element, dictionary one those. Either path imageData property must specified. Parameters - details object - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.imageData = foo' equivalent 'details.imageData = {'16': foo}' - path string | object optional Either relative image path dictionary {size -> relative image path} pointing icon set. icon specified dictionary, image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.path = foo' equivalent 'details.path = {'16': foo}' - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. setPopup() chrome.browserAction.setPopup( details: object, callback?: function, ) Sets HTML document opened popup user clicks browser action icon. Parameters - details object - popup string relative path HTML file show popup. set empty string ( '' ), popup shown. - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks. setTitle() chrome.browserAction.setTitle( details: object, callback?: function, ) Sets title browser action. title appears tooltip. Parameters - details object - tabId number optional Limits change particular tab selected. Automatically resets tab closed. - title string string browser action display moused over. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, platforms need use callbacks."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/contentSettings", "title": "chrome.contentSettings | API | Chrome for Developers", "text": "Description Use chrome.contentSettings API change settings control whether websites use features cookies, JavaScript, plugins. generally speaking, content settings allow customize Chrome's behavior per-site basis instead globally. Permissions contentSettings must declare \"contentSettings\" permission extension's manifest use API. example: { \"name\": \"My extension\", ... \"permissions\": [ \"contentSettings\" ], ... } Concepts usage Content setting patterns use patterns specify websites content setting affects. example, https://*.youtube.com/* specifies youtube.com subdomains. syntax content setting patterns match patterns, differences: - http ,https , andftp URLs, path must wildcard (/* ). Forfile URLs, path must completely specified must contain wildcards. - contrast match patterns, content setting patterns specify port number. port number specified, pattern matches websites port. port number specified, pattern matches ports. Pattern precedence one content setting rule applies given site, rule specific pattern takes precedence. example, following patterns ordered precedence: https://www.example.com/* https://*.example.com/* (matching example.com subdomains)<all_urls> (matching every URL) Three kinds wildcards affect specific pattern is: - Wildcards port (for example https://www.example.com:*/* ) - Wildcards scheme (for example *://www.example.com:123/* ) - Wildcards hostname (for example https://*.example.com:123/* ) pattern specific another pattern one part less specific another part, different parts checked following order: hostname, scheme, port. example, following patterns ordered precedence: https://www.example.com:*/* Specifies hostname scheme.*:/www.example.com:123/* high, although specifies hostname, specify scheme.https://*.example.com:123/* Lower although specifies port scheme, wildcard hostname. Primary secondary patterns URL taken account deciding content setting apply depends content type. example, contentSettings.notifications settings based URL shown omnibox. URL called \"primary\" URL. content types take additional URLs account. example, whether site allowed set contentSettings.cookies decided based URL HTTP request (which primary URL case) well URL shown omnibox (which called \"secondary\" URL). multiple rules primary secondary patterns, rule specific primary pattern takes precedence. multiple rules primary pattern, rule specific secondary pattern takes precedence. example, following list primary/secondary pattern pairs ordered precedence: | Precedence | Primary pattern | Secondary pattern | |---|---|---| | 1 | https://www.moose.com/* , | https://www.wombat.com/* | | 2 | https://www.moose.com/* , | <all_urls> | | 3 | <all_urls> , | https://www.wombat.com/* | | 4 | <all_urls> , | <all_urls> | Secondary patterns supported images content setting. Resource identifiers Resource identifiers allow specify content settings specific subtypes content type. Currently, content type supports resource identifiers contentSettings.plugins , resource identifier identifies specific plugin. applying content settings, first settings specific plugin checked. settings found specific plugin, general content settings plugins checked. example, content setting rule resource identifier adobe-flash-player pattern <all_urls> , takes precedence rule without resource identifier pattern https://www.example.com/* , even pattern specific. get list resource identifiers content type calling contentSettings.ContentSetting.getResourceIdentifiers() method. returned list change set installed plugins user's machine, Chrome tries keep identifiers stable across plugin updates. Examples try API, install contentSettings API example chrome-extension-samples repository. Types AutoVerifyContentSetting Enum \"allow\" \"block\" CameraContentSetting Enum \"allow\" \"block\" \"ask\" ClipboardContentSetting Enum \"allow\" \"block\" \"ask\" ContentSetting Properties - clear void PromiseClear content setting rules set extension. clear function looks like:(details: object, callback?: function) => {...} - details object - scope Scope optional clear setting (default: regular). - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets current content setting given pair URLs. get function looks like:(details: object, callback?: function) => {...} - details object - incognito boolean optional Whether check content settings incognito session. (default false) - primaryUrl string primary URL content setting retrieved. Note meaning primary URL depends content type. - resourceIdentifier ResourceIdentifier optional specific identifier type content settings retrieved. - secondaryUrl string optional secondary URL content setting retrieved. Defaults primary URL. Note meaning secondary URL depends content type, content types use secondary URLs. - - callback function optional callback parameter looks like:(details: object) => void - details object - setting content setting. See description individual ContentSetting objects possible values. - - - returns Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getResourceIdentifiers void PromiseThe getResourceIdentifiers function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:(resourceIdentifiers?: ResourceIdentifier[]) => void - resourceIdentifiers ResourceIdentifier[] optional list resource identifiers content type, undefined content type use resource identifiers. - - returns Promise<ResourceIdentifier[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseApplies new content setting rule. set function looks like:(details: object, callback?: function) => {...} - details object - primaryPattern string pattern primary URL. details format pattern, see Content Setting Patterns. - resourceIdentifier ResourceIdentifier optional resource identifier content type. - scope Scope optional set setting (default: regular). - secondaryPattern string optional pattern secondary URL. Defaults matching URLs. details format pattern, see Content Setting Patterns. - setting setting applied rule. See description individual ContentSetting objects possible values. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - CookiesContentSetting Enum \"allow\" \"block\" \"session_only\" FullscreenContentSetting Value \"allow\" ImagesContentSetting Enum \"allow\" \"block\" JavascriptContentSetting Enum \"allow\" \"block\" LocationContentSetting Enum \"allow\" \"block\" \"ask\" MicrophoneContentSetting Enum \"allow\" \"block\" \"ask\" MouselockContentSetting Value \"allow\" MultipleAutomaticDownloadsContentSetting Enum \"allow\" \"block\" \"ask\" NotificationsContentSetting Enum \"allow\" \"block\" \"ask\" PluginsContentSetting Value \"block\" PopupsContentSetting Enum \"allow\" \"block\" PpapiBrokerContentSetting Value \"block\" ResourceIdentifier content type using resource identifiers contentSettings.plugins . information, see Resource Identifiers. Properties - description string optional human readable description resource. - id string resource identifier given content type. Scope scope ContentSetting. One regular : setting regular profile (which inherited incognito profile overridden elsewhere), incognito\\_session\\_only : setting incognito profile set incognito session deleted incognito session ends (overrides regular settings). Enum \"regular\" \"incognito_session_only\" Properties automaticDownloads Whether allow sites download multiple files automatically. One allow : Allow sites download multiple files automatically, block : allow sites download multiple files automatically, ask : Ask site wants download files automatically first file. Default ask . primary URL URL top-level frame. secondary URL used. autoVerify Whether allow sites use Private State Tokens API. One allow : Allow sites use Private State Tokens API, block : Block sites using Private State Tokens API. Default allow . primary URL URL top-level frame. secondary URL used. NOTE: calling set() , primary pattern must . camera Whether allow sites access camera. One allow : Allow sites access camera, block : allow sites access camera, ask : Ask site wants access camera. Default ask . primary URL URL document requested camera access. secondary URL used. NOTE: 'allow' setting valid patterns ''. clipboard Whether allow sites access clipboard via advanced capabilities Async Clipboard API. \"Advanced\" capabilities include anything besides writing built-in formats user gesture, i.e. ability read, ability write custom formats, ability write without user gesture. One allow : Allow sites use advanced clipboard capabilities, block : allow sites use advanced clipboard capabilties, ask : Ask site wants use advanced clipboard capabilities. Default ask . primary URL URL document requested clipboard access. secondary URL used. cookies Whether allow cookies local data set websites. One allow : Accept cookies, block : Block cookies, session\\_only : Accept cookies current session. Default allow . primary URL URL representing cookie origin. secondary URL URL top-level frame. fullscreen Deprecated. longer effect. Fullscreen permission automatically granted sites. Value always allow . images Whether show images. One allow : Show images, block : show images. Default allow . primary URL URL top-level frame. secondary URL URL image. javascript Whether run JavaScript. One allow : Run JavaScript, block : run JavaScript. Default allow . primary URL URL top-level frame. secondary URL used. location Whether allow Geolocation. One allow : Allow sites track physical location, block : allow sites track physical location, ask : Ask allowing sites track physical location. Default ask . primary URL URL document requested location data. secondary URL URL top-level frame (which may may differ requesting URL). microphone Whether allow sites access microphone. One allow : Allow sites access microphone, block : allow sites access microphone, ask : Ask site wants access microphone. Default ask . primary URL URL document requested microphone access. secondary URL used. NOTE: 'allow' setting valid patterns ''. mouselock Deprecated. longer effect. Mouse lock permission automatically granted sites. Value always allow . notifications Whether allow sites show desktop notifications. One allow : Allow sites show desktop notifications, block : allow sites show desktop notifications, ask : Ask site wants show desktop notifications. Default ask . primary URL URL document wants show notification. secondary URL used. plugins Deprecated. Flash support removed Chrome 88, permission longer effect. Value always block . Calls set() clear() ignored. popups Whether allow sites show pop-ups. One allow : Allow sites show pop-ups, block : allow sites show pop-ups. Default block . primary URL URL top-level frame. secondary URL used. unsandboxedPlugins Deprecated. Previously, controlled whether allow sites run plugins unsandboxed, however, Flash broker process removed Chrome 88, permission longer effect. Value always block . Calls set() clear() ignored."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/declarativeContent", "title": "chrome.declarativeContent | API | Chrome for Developers", "text": "Description Use chrome.declarativeContent API take actions depending content page, without requiring permission read page's content. Permissions declarativeContent Concepts usage Declarative Content API lets enable extension's action depending URL web page, CSS selector matches element page, without needing add host permissions inject content script. Use activeTab permission interact page user clicks extension's action. Rules Rules consists conditions actions. conditions fulfilled, actions executed. actions setIcon() showAction() . PageStateMatcher matches web pages listed criteria met. match page url, css compound selector bookmarked state page. following rule enables extension's action Google pages password field present: let rule1 = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: { hostSuffix: '.google.com', schemes: ['https'] }, css: [\"input[type='password']\"] }) ], actions: [ new chrome.declarativeContent.ShowAction() ] }; also enable extension's action Google sites video, add second condition, condition sufficient trigger specified actions: let rule2 = { conditions: [ new chrome.declarativeContent.PageStateMatcher({ pageUrl: { hostSuffix: '.google.com', schemes: ['https'] }, css: [\"input[type='password']\"] }), new chrome.declarativeContent.PageStateMatcher({ css: [\"video\"] }) ], actions: [ new chrome.declarativeContent.ShowAction() ] }; onPageChanged event tests whether rule least one fulfilled condition executes actions. Rules persist across browsing sessions; therefore, extension installation time first use removeRules clear previously installed rules use addRules register new ones. chrome.runtime.onInstalled.addListener(function(details) { chrome.declarativeContent.onPageChanged.removeRules(undefined, function() { chrome.declarativeContent.onPageChanged.addRules([rule2]); }); }); activeTab permission, extension display permission warnings user clicks extension action, run relevant pages. Page URL matching PageStateMatcher.pageurl matches URL criteria fulfilled. common criteria concatenation either host, path, URL, followed Contains, Equals, Prefix, Suffix. following table contains examples: | Criteria | Matches | |---|---| { hostSuffix: 'google.com' } | Google URLs | { pathPrefix: '/docs/extensions' } | Extension docs URLs | { urlContains: 'developer.chrome.com' } | chrome developers docs URLs | criteria case sensitive. complete list criteria, see UrlFilter. CSS Matching PageStateMatcher.css conditions must compound selectors, meaning can't include combinators like whitespace \"> \" selectors. helps Chrome match selectors efficiently. | Compound Selectors (OK) | Complex Selectors (Not OK) | |---|---| | div p | iframe.special[src^='http'] | p>span.highlight | ns|* | p + ol | #abcd:checked | p::first-line | CSS conditions match displayed elements: element matches selector display:none one parent elements display:none , cause condition match. Elements styled visibility:hidden , positioned off-screen, hidden elements still make condition match. Bookmarked state matching PageStateMatcher.isBookmarked condition allows matching bookmarked state current URL user's profile. make use condition \"bookmarks\" permission must declared extension manifest. Types ImageDataType See https://developer.mozilla.org/en-US/docs/Web/API/ImageData. Type ImageData PageStateMatcher Matches state web page based various criteria. Properties - constructor void constructor function looks like:(arg: PageStateMatcher) => {...} - arg - returns - - css string[] optional Matches CSS selectors array match displayed elements frame origin page's main frame. selectors array must compound selectors speed matching. Note: Listing hundreds CSS selectors listing CSS selectors match hundreds times per page slow web sites. - isBookmarked boolean optional Chrome 45+Matches bookmarked state page equal specified value. Requres bookmarks permission. - pageUrl UrlFilter optional Matches conditions UrlFilter fulfilled top-level URL page. RequestContentScript Declarative event action injects content script. WARNING: action still experimental supported stable builds Chrome. Properties - constructor void constructor function looks like:(arg: RequestContentScript) => {...} - returns - - allFrames boolean optional Whether content script runs frames matching page, top frame. Default false . - css string[] optional Names CSS files injected part content script. - js string[] optional Names JavaScript files injected part content script. - matchAboutBlank boolean optional Whether insert content script about:blank andabout:srcdoc . Default isfalse . SetIcon Declarative event action sets n-dip square icon extension's page action browser action corresponding conditions met. action used without host permissions, extension must page browser action. Exactly one imageData path must specified. dictionaries mapping number pixels image representation. image representation imageData ImageData object; example, canvas element, image representation path path image file relative extension's manifest. scale screen pixels fit device-independent pixel, scale * n icon used. scale missing, another image resized required size. Properties - constructor void constructor function looks like:(arg: SetIcon) => {...} - arg - returns - - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, image used chosen depending screen's pixel density. number image pixels fit one screen space unit equalsscale , image sizescale * n selected, n size icon UI. least one image must specified. Note thatdetails.imageData = foo equivalent todetails.imageData = {'16': foo} . ShowAction declarative event action sets extension's toolbar action enabled state corresponding conditions met. action used without host permissions. extension activeTab permission, clicking page action grants access active tab. pages conditions met extension's toolbar action grey-scale, clicking open context menu, instead triggering action. Properties - constructor void constructor function looks like:(arg: ShowAction) => {...} - arg - returns - ShowPageAction Please use declarativeContent.ShowAction . declarative event action sets extension's page action enabled state corresponding conditions met. action used without host permissions, extension must page action. extension activeTab permission, clicking page action grants access active tab. pages conditions met extension's toolbar action grey-scale, clicking open context menu, instead triggering action. Properties - constructor void constructor function looks like:(arg: ShowPageAction) => {...} - arg - returns - Events onPageChanged Provides Declarative Event API consisting addRules , removeRules , getRules ."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/declarativeNetRequest", "title": "chrome.declarativeNetRequest | API | Chrome for Developers", "text": "Description chrome.declarativeNetRequest API used block modify network requests specifying declarative rules. lets extensions modify network requests without intercepting viewing content, thus providing privacy. Permissions declarativeNetRequest declarativeNetRequestWithHostAccess \"declarativeNetRequest \" \"declarativeNetRequestWithHostAccess \" permissions provide capabilities. differences permissions requested granted. \"declarativeNetRequest\" - Triggers permission warning install time provides implicit access allow ,allowAllRequests andblock rules. Use possible avoid needing request full access hosts. \"declarativeNetRequestFeedback\" - Enables debugging features unpacked extensions, specifically getMatchedRules() andonRuleMatchedDebug . \"declarativeNetRequestWithHostAccess\" - permission warning shown install time, must request host permissions perform action host. appropriate want use declarative net request rules extension already host permissions without generating additional warnings. Availability Manifest addition permissions described previously, certain types rulesets, static rulesets specifically, require declaring \"declarative_net_request\" manifest key, dictionary single key called \"rule_resources\" . key array containing dictionaries type Ruleset , shown following. (Note name 'Ruleset' appear manifest's JSON since merely array.) Static rulesets explained later document. { \"name\": \"My extension\", ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, { \"id\": \"ruleset_2\", \"enabled\": false, \"path\": \"rules_2.json\" }] }, \"permissions\": [ \"declarativeNetRequest\", \"declarativeNetRequestFeedback\", ], \"host_permissions\": [ \"http://www.blogger.com/*\", \"http://*.google.com/*\" ], ... } Rules rulesets use API, specify one rulesets. ruleset contains array rules. single rule one following: - Block network request. - Upgrade schema (http https). - Prevent request getting blocked negating matching blocked rules. - Redirect network request. - Modify request response headers. three types rulesets, managed slightly different ways. - Dynamic - Persist across browser sessions extension upgrades managed using JavaScript extension use. - Session - Cleared browser shuts new version extension installed. Session rules managed using JavaScript extension use. - Static - Packaged, installed, updated extension installed upgraded. Static rules stored JSON-formatted rule files listed manifest file. Dynamic session-scoped rulesets Dynamic session rulesets managed using JavaScript extension use. - Dynamic rules persist across browser sessions extension upgrades. - Session rules cleared browser shuts new version extension installed. one ruleset types. extension add remove rules dynamically calling updateDynamicRules() updateSessionRules() , provided rule limits exceeded. information rule limits, see Rule limits. see example code examples. Static rulesets Unlike dynamic session rules, static rules packaged, installed, updated extension installed upgraded. They're stored rule files JSON format, indicated extension using \"declarative_net_request\" \"rule_resources\" keys described above, well one Ruleset dictionaries. Ruleset dictionary contains path rule file, ID ruleset contained file, whether ruleset enabled disabled. last two important enable disable ruleset programmatically. { ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, ... ] } ... } test rule files, load extension unpacked. Errors warnings invalid static rules displayed unpacked extensions. Invalid static rules packed extensions ignored. Expedited review Changes static rulesets may eligible expedited review. See expedited review eligible changes. Enable disable static rules rulesets individual static rules complete static rulesets may enabled disabled runtime. set enabled static rules rulesets persisted across browser sessions. Neither persisted across extension updates, meaning rules chose leave rule files available update. performance reasons also limits number rules rulesets may enabled one time. Call getAvailableStaticRuleCount() check number additional rules may enabled. information rule limits, see Rule limits. enable disable static rules, call updateStaticRules() . method takes UpdateStaticRulesOptions object, contains arrays IDs rules enable disable. IDs defined using \"id\" key Ruleset dictionary. maximum limit 5000 disabled static rules. enable disable static rulesets, call updateEnabledRulesets() . method takes UpdateRulesetOptions object, contains arrays IDs rulesets enable disable. IDs defined using \"id\" key Ruleset dictionary. Build rules Regardless type, rule starts four fields shown following. \"id\" \"priority\" keys take number, \"action\" \"condition\" keys may provide several blocking redirecting conditions. following rule blocks script requests originating \"foo.com\" URL \"abc\" substring. { \"id\" : 1, \"priority\": 1, \"action\" : { \"type\" : \"block\" }, \"condition\" : { \"urlFilter\" : \"abc\", \"initiatorDomains\" : [\"foo.com\"], \"resourceTypes\" : [\"script\"] } } URL matching Declarative Net Request provides ability match URLs either pattern matching syntax regular expressions. URL filter syntax rule's \"condition\" key allows \"urlFilter\" key acting URLs specified domain. create patterns using pattern matching tokens. examples. urlFilter | Matches | match | |---|---|---| \"abc\" | https://abcd.com https://example.com/abcd | https://ab.com | \"abc*d\" | https://abcd.com https://example.com/abcxyzd | https://abc.com | \"||a.example.com\" | https://a.example.com/ https://b.a.example.com/xyz https://a.example.company | https://example.com/ | \"|https*\" | https://example.com | http://example.com/ http://https.com | \"example*^123|\" | https://example.com/123 http://abc.com/example?123 | https://example.com/1234 https://abc.com/example0123 | Regular expressions Conditions also use regular expressions. See \"regexFilter\" key. learn limits apply conditions, see Rules use regular expressions. Write good URL conditions Take care writing rules always match entire domain. Otherwise, rule may match situations unexpected. example, using pattern matching syntax: google.com incorrectly matcheshttps://example.com/?param=google.com ||google.com incorrectly matcheshttps://google.company https://www.google.com incorrectly matcheshttps://example.com/?param=https://www.google.com Consider using: ||google.com/ , matches paths subdomains.|https://www.google.com/ matches paths subdomains. Similarly, use ^ / characters anchor regular expression. example, ^https:\\/\\/www\\.google\\.com\\/ matches path https://www.google.com. Rule evaluation DNR rules applied browser across various stages network request lifecycle. request request made, extension block redirect (including upgrading scheme HTTP HTTPS) matching rule. extension, browser determines list matching rules. Rules modifyHeaders action included handled later. Additionally, rules responseHeaders condition considered later (when response headers available) included. Then, extension, Chrome picks one candidate per request. Chrome finds matching rule, ordering matching rules priority. Rules priority ordered action (allow allowAllRequests > block > upgradeScheme > redirect ). candidate allow allowAllRequests rule, frame request made previously matched allowAllRequests rule higher equal priority extension, request \"allowed\" extension effect request. one extension wants block redirect request, single action take chosen. Chrome sorting rules order block > redirect upgradeScheme > allow allowAllRequests . two rules type, Chrome chooses rule recently installed extension. request headers sent Chrome sends request headers server, headers updated based matching modifyHeaders rules. Within single extension, Chrome builds list modifications perform finding matching modifyHeaders rules. Similar before, rules higher priority matching allow allowAllRequests rules included. rules applied Chrome order rules recently installed extension always evaluated rules older extension. Additionally, rules higher priority one extension always applied rules lower priority extension. Notably, even across extensions: - rule appends header, lower priority rules append header. Set remove operations allowed. - rule sets header, lower priority rules extension append header. modifications allowed. - rule removes header, lower priority rules cannot modify header. response received response headers received, Chrome evaluates rules responseHeaders condition. sorting rules action priority excluding rules made redundant matching allow allowAllRequests rule (this happens identically steps \"Before request\"), Chrome may block redirect request behalf extension. Note request made stage, request already sent server server received data like request body. block redirect rule response headers condition still run\u2013but cannot actually block redirect request. case block rule, handled page made request receiving blocked response Chrome terminating request early. case redirect rule, Chrome makes new request redirected URL. Make sure consider behaviors meet privacy expectations extension. request blocked redirected, Chrome applies modifyHeaders rules. Applying modifications response headers works way described \"Before request headers sent\". Applying modifications request headers nothing, since request already made. Safe rules Safe rules defined rules action block , allow , allowAllRequests upgradeScheme . rules subject increased dynamic rules quota. Rule limits performance overhead loading evaluating rules browser, limits apply using API. Limits depend type rule using. Static rules Static rules specified rule files declared manifest file. extension specify 100 static rulesets part \"rule_resources\" manifest key, 50 rulesets enabled time. latter called MAX_NUMBER_OF_ENABLED_STATIC_RULESETS . Collectively, rulesets guaranteed least 30,000 rules. called GUARANTEED_MINIMUM_STATIC_RULES . number rules available depends many rules enabled extensions installed user's browser. find number runtime calling getAvailableStaticRuleCount() . see example code examples. Session rules extension 5000 session rules. exposed MAX_NUMBER_OF_SESSION_RULES . Chrome 120, limit 5000 combined dynamic session rules. Dynamic rules extension least 5000 dynamic rules. exposed MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Starting Chrome 121, larger limit 30,000 rules available safe dynamic rules, exposed MAX_NUMBER_OF_DYNAMIC_RULES . unsafe rules added within limit 5000 also count towards limit. Chrome 120, 5000 combined dynamic session rules limit. Rules use regular expressions types rules use regular expressions; however, total number regular expression rules type cannot exceed 1000. called MAX_NUMBER_OF_REGEX_RULES. Additionally, rule must less 2KB compiled. roughly correlates complexity rule. try load rule exceeds limit, see warning like following rule ignored. rules_1.json: Rule id 1 specified complex regex allowed part \"regexFilter\" key. Interactions service workers declarativeNetRequest applies requests reach network stack. includes responses HTTP cache, may include responses go service worker's onfetch handler. declarativeNetRequest affect responses generated service worker retrieved CacheStorage , affect calls fetch() made service worker. Web accessible resources declarativeNetRequest rule cannot redirect public resource request resource web accessible. triggers error. true even specified web accessible resource owned redirecting extension. declare resources declarativeNetRequest, use manifest's \"web_accessible_resources\" array. Header modification append operation supported following headers: accept , accept-encoding , accept-language , access-control-request-headers , cache-control , connection , content-language , cookie , forwarded , if-match , if-none-match , keep-alive , range , te , trailer , transfer-encoding , upgrade , user-agent , via , want-digest , x-forwarded-for . Examples Code examples Update dynamic rules following example shows call updateDynamicRules() . procedure updateSessionRules() same. // Get arrays containing new old rules const newRules = await getNewRules(); const oldRules = await chrome.declarativeNetRequest.getDynamicRules(); const oldRuleIds = oldRules.map(rule => rule.id); // Use arrays update dynamic rules await chrome.declarativeNetRequest.updateDynamicRules({ removeRuleIds: oldRuleIds, addRules: newRules }); Update static rulesets following example shows enable disable rulesets considering number available maximum number enabled static rulesets. would number static rules need exceeds number allowed. work, rulesets installed rulesets disabled (setting \"Enabled\" false within manifest file). async function updateStaticRules(enableRulesetIds, disableCandidateIds) { // Create options structure call updateEnabledRulesets() let options = { enableRulesetIds: enableRulesetIds } // Get number enabled static rules const enabledStaticCount = await chrome.declarativeNetRequest.getEnabledRulesets(); // Compare rule counts determine anything needs disabled // new rules enabled const proposedCount = enableRulesetIds.length; (enabledStaticCount + proposedCount > chrome.declarativeNetRequest.MAX_NUMBER_OF_ENABLED_STATIC_RULESETS) { options.disableRulesetIds = disableCandidateIds } // Update enabled static rules await chrome.declarativeNetRequest.updateEnabledRulesets(options); } Rule examples following examples illustrate Chrome prioritizes rules extension. reviewing them, may want open prioritization rules separate window. \"priority\" key examples require host permission *://*.example.com/* . work priority particular URL, look (developer-defined) \"priority\" key, \"action\" key \"urlFilter\" key. examples refer example rule file shown them. - Navigation https://google.com - Two rules cover URL: rules IDs 1 4. rule ID 1 applies \"block\" actions higher priority than\"redirect\" actions. remaining rules apply longer URLs. - Navigation https://google.com/1234 - longer URL, rule ID 2 matches addition rules IDs 1 4. rule ID 2 applies \"allow\" higher priority than\"block\" and\"redirect\" . - Navigation https://google.com/12345 - four rules match URL. rule ID 3 applies developer-defined priority highest group. [ { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"block\" }, \"condition\": {\"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 2, \"priority\": 1, \"action\": { \"type\": \"allow\" }, \"condition\": { \"urlFilter\": \"||google.com/123\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 3, \"priority\": 2, \"action\": { \"type\": \"block\" }, \"condition\": { \"urlFilter\": \"||google.com/12345\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 4, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"url\": \"https://example.com\" } }, \"condition\": { \"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, ] Redirects example requires host permission *://*.example.com/* . following example shows redirect request example.com page within extension itself. extension path /a.jpg resolves chrome-extension://EXTENSION_ID/a.jpg , EXTENSION_ID ID extension. work manifest declare /a.jpg web accessible resource. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"extensionPath\": \"/a.jpg\" } }, \"condition\": { \"urlFilter\": \"||https://www.example.com/\", \"resourceTypes\": [\"main_frame\"] } } following uses \"transform\" key redirect subdomain example.com. uses domain name anchor (\"||\") intercept requests scheme example.com. \"scheme\" key \"transform\" specifies redirects subdomain always use \"https\". { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"transform\": { \"scheme\": \"https\", \"host\": \"new.example.com\" } } }, \"condition\": { \"urlFilter\": \"||example.com/\", \"resourceTypes\": [\"main_frame\"] } } following example uses regular expressions redirect https://www.abc.xyz.com/path https://abc.xyz.com/path . \"regexFilter\" key, notice periods escaped capturing group selects either \"abc\" \"def\". \"regexSubstitution\" key specifies first returned match regular expression using \"\\1\". case, \"abc\" captured redirected URL placed substitution. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"regexSubstitution\": \"https://\\\\1.xyz.com/\" } }, \"condition\": { \"regexFilter\": \"^https://www\\\\.(abc|def)\\\\.xyz\\\\.com/\", \"resourceTypes\": [ \"main_frame\" ] } } Headers following example removes cookies main frame sub frames. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"modifyHeaders\", \"requestHeaders\": [{ \"header\": \"cookie\", \"operation\": \"remove\" }] }, \"condition\": { \"resourceTypes\": [\"main_frame\", \"sub_frame\"] } } Types DomainType describes whether request first third party frame originated. request said first party domain (eTLD+1) frame request originated. Enum \"firstParty\" \"thirdParty\" network request first party frame originated. network request third party frame originated. ExtensionActionOptions Properties - displayActionCountAsBadgeText boolean optional Whether automatically display action count page extension's badge text. preference persisted across sessions. - tabUpdate TabActionCountUpdate optional Chrome 89+Details tab's action count adjusted. GetDisabledRuleIdsOptions Properties - rulesetId string id corresponding static Ruleset . GetRulesFilter Properties - ruleIds number[] optional specified, rules matching IDs included. HeaderInfo Properties - excludedValues string[] optional specified, condition matched header exists value contains least one element list. uses match pattern syntax values . - header string name header. condition matches name values andexcludedValues specified. - values string[] optional specified, condition matches header's value matches least one pattern list. supports case-insensitive header value matching plus following constructs: '*' : Matches number characters. '?' : Matches zero one character(s). '*' '?' escaped backslash, e.g. '\\*' '\\?' HeaderOperation describes possible operations \"modifyHeaders\" rule. Enum \"append\" \"set\" \"remove\" Adds new entry specified header. operation supported request headers. Sets new value specified header, removing existing headers name. Removes entries specified header. IsRegexSupportedResult Properties - isSupported boolean - reason UnsupportedRegexReason optional Specifies reason regular expression supported. provided isSupported false. MatchedRule Properties - ruleId number matching rule's ID. - rulesetId string ID Ruleset rule belongs to. rule originating set dynamic rules, equal toDYNAMIC_RULESET_ID . MatchedRuleInfo Properties - rule - tabId number tabId tab request originated tab still active. Else -1. - timeStamp number time rule matched. Timestamps correspond Javascript convention times, i.e. number milliseconds since epoch. MatchedRuleInfoDebug Properties - request Details request rule matched. - rule MatchedRulesFilter Properties - minTimeStamp number optional specified, matches rules given timestamp. - tabId number optional specified, matches rules given tab. Matches rules associated active tab set -1. ModifyHeaderInfo Properties - header string name header modified. - operation operation performed header. - value string optional new value header. Must specified append andset operations. QueryKeyValue Properties - key string - replaceOnly boolean optional Chrome 94+If true, query key replaced already present. Otherwise, key also added missing. Defaults false. - value string QueryTransform Properties - addOrReplaceParams QueryKeyValue[] optional list query key-value pairs added replaced. - removeParams string[] optional list query keys removed. Redirect Properties - extensionPath string optional Path relative extension directory. start '/'. - regexSubstitution string optional Substitution pattern rules specify regexFilter . first match ofregexFilter within url replaced pattern. WithinregexSubstitution , backslash-escaped digits (\\1 \\9) used insert corresponding capture groups. \\0 refers entire matching text. - transform URLTransform optional Url transformations perform. - url string optional redirect url. Redirects JavaScript urls allowed. RegexOptions Properties - isCaseSensitive boolean optional Whether regex specified case sensitive. Default true. - regex string regular expresson check. - requireCapturing boolean optional Whether regex specified requires capturing. Capturing required redirect rules specify aregexSubstition action. default false. RequestDetails Properties - documentId string optional Chrome 106+The unique identifier frame's document, request frame. - documentLifecycle DocumentLifecycle optional Chrome 106+The lifecycle frame's document, request frame. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameType FrameType optional Chrome 106+The type frame, request frame. - initiator string optional origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The unique identifier frame's parent document, request frame parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. - tabId number ID tab request takes place. Set -1 request related tab. - type resource type request. - url string URL request. RequestMethod describes HTTP request method network request. Enum \"connect\" \"delete\" \"get\" \"head\" \"options\" \"patch\" \"post\" \"put\" \"other\" ResourceType describes resource type network request. Enum \"main_frame\" \"sub_frame\" \"stylesheet\" \"script\" \"image\" \"font\" \"object\" \"xmlhttprequest\" \"ping\" \"csp_report\" \"media\" \"websocket\" \"webtransport\" \"webbundle\" \"other\" Rule Properties - action action take rule matched. - condition condition rule triggered. - id number id uniquely identifies rule. Mandatory >= 1. - priority number optional Rule priority. Defaults 1. specified, >= 1. RuleAction Properties - redirect Redirect optional Describes redirect performed. valid redirect rules. - requestHeaders ModifyHeaderInfo[] optional Chrome 86+The request headers modify request. valid RuleActionType \"modifyHeaders\". - responseHeaders ModifyHeaderInfo[] optional Chrome 86+The response headers modify request. valid RuleActionType \"modifyHeaders\". - type type action perform. RuleActionType Describes kind action take given RuleCondition matches. Enum \"block\" \"redirect\" \"allow\" \"upgradeScheme\" \"modifyHeaders\" \"allowAllRequests\" Block network request. Redirect network request. Allow network request. request intercepted allow rule matches it. Upgrade network request url's scheme https request http ftp. Modify request/response headers network request. Allow requests within frame hierarchy, including frame request itself. RuleCondition Properties - domainType DomainType optional Specifies whether network request first-party third-party domain originated. omitted, requests accepted. - domains string[] optional Deprecated since Chrome 101Use initiatorDomains insteadThe rule match network requests originating list domains . - excludedDomains string[] optional Deprecated since Chrome 101Use excludedInitiatorDomains insteadThe rule match network requests originating list excludedDomains . - excludedInitiatorDomains string[] optional Chrome 101+The rule match network requests originating list excludedInitiatorDomains . list empty omitted, domains excluded. takes precedence overinitiatorDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also excluded. - excludedRequestDomains string[] optional Chrome 101+The rule match network requests domains matches one list excludedRequestDomains . list empty omitted, domains excluded. takes precedence overrequestDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also excluded. - excludedRequestMethods RequestMethod[] optional Chrome 91+List request methods rule match. one requestMethods andexcludedRequestMethods specified. neither specified, request methods matched. - excludedResourceTypes ResourceType[] optional List resource types rule match. one resourceTypes andexcludedResourceTypes specified. neither specified, resource types except \"main_frame\" blocked. - excludedResponseHeaders HeaderInfo[] optional Chrome 128+Rule match request matches response header condition list (if specified). excludedResponseHeaders andresponseHeaders specified, theexcludedResponseHeaders property takes precedence. - excludedTabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE excludes requests originate tab. supported session-scoped rules. - initiatorDomains string[] optional Chrome 101+The rule match network requests originating list initiatorDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also matched. - isUrlFilterCaseSensitive boolean optional Whether urlFilter orregexFilter (whichever specified) case sensitive. Default false. - regexFilter string optional Regular expression match network request url. follows RE2 syntax. Note: one urlFilter orregexFilter specified.Note: regexFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. - requestDomains string[] optional Chrome 101+The rule match network requests domain matches one list requestDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also matched. - requestMethods RequestMethod[] optional Chrome 91+List HTTP request methods rule match. empty list allowed. Note: Specifying requestMethods rule condition also exclude non-HTTP(s) requests, whereas specifyingexcludedRequestMethods not. - resourceTypes ResourceType[] optional List resource types rule match. empty list allowed. Note: must specified allowAllRequests rules may include thesub_frame andmain_frame resource types. - responseHeaders HeaderInfo[] optional Chrome 128+Rule matches request matches response header condition list (if specified). - tabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE matches requests originate tab. empty list allowed. supported session-scoped rules. - urlFilter string optional pattern matched network request url. Supported constructs: '*' : Wildcard: Matches number characters. '|' : Left/right anchor: used either end pattern, specifies beginning/end url respectively. '||' : Domain name anchor: used beginning pattern, specifies start (sub-)domain URL. '^' : Separator character: matches anything except letter, digit, one following: _ ,- ,. , or% . also match end URL.Therefore urlFilter composed following parts: (optional Left/Domain name anchor) + pattern + (optional Right anchor).If omitted, urls matched. empty string allowed. pattern beginning ||* allowed. Use* instead.Note: one urlFilter orregexFilter specified.Note: urlFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. example, request url http://abc.\u0440\u0444?q=\u0444, theurlFilter matched url http://abc.xn--p1ai/?q=%D1%84. Ruleset Properties - enabled boolean Whether ruleset enabled default. - id string non-empty string uniquely identifying ruleset. IDs beginning '_' reserved internal use. - path string path JSON ruleset relative extension directory. RulesMatchedDetails Properties - rulesMatchedInfo Rules matching given filter. TabActionCountUpdate Properties - increment number amount increment tab's action count by. Negative values decrement count. - tabId number tab update action count. TestMatchOutcomeResult Properties - matchedRules rules (if any) match hypothetical request. TestMatchRequestDetails Properties - initiator string optional initiator URL (if any) hypothetical request. - method RequestMethod optional Standard HTTP method hypothetical request. Defaults \"get\" HTTP requests ignored non-HTTP requests. - responseHeaders object optional Chrome 129+The headers provided hypothetical response request get blocked redirected sent. Represented object maps header name list string values. specified, hypothetical response would return empty response headers, match rules match non-existence headers. E.g. {\"content-type\": [\"text/html; charset=utf-8\", \"multipart/form-data\"]} - tabId number optional ID tab hypothetical request takes place. need correspond real tab ID. Default -1, meaning request related tab. - type resource type hypothetical request. - url string URL hypothetical request. UnsupportedRegexReason Describes reason given regular expression supported. Enum \"syntaxError\" \"memoryLimitExceeded\" regular expression syntactically incorrect, uses features available RE2 syntax. regular expression exceeds memory limit. UpdateRuleOptions Properties - addRules Rule[] optional Rules add. - removeRuleIds number[] optional IDs rules remove. invalid IDs ignored. UpdateRulesetOptions Properties UpdateStaticRulesOptions Properties URLTransform Properties - fragment string optional new fragment request. either empty, case existing fragment cleared; begin '#'. - host string optional new host request. - password string optional new password request. - path string optional new path request. empty, existing path cleared. - port string optional new port request. empty, existing port cleared. - query string optional new query request. either empty, case existing query cleared; begin '?'. - queryTransform QueryTransform optional Add, remove replace query key-value pairs. - scheme string optional new scheme request. Allowed values \"http\", \"https\", \"ftp\" \"chrome-extension\". - username string optional new username request. Properties DYNAMIC_RULESET_ID Ruleset ID dynamic rules added extension. Value \"_dynamic\" GETMATCHEDRULES_QUOTA_INTERVAL Time interval within MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL getMatchedRules calls made, specified minutes. Additional calls fail immediately set runtime.lastError . Note: getMatchedRules calls associated user gesture exempt quota. Value 10 GUARANTEED_MINIMUM_STATIC_RULES minimum number static rules guaranteed extension across enabled static rulesets. rules limit count towards global static rule limit. Value 30000 MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL number times getMatchedRules called within period GETMATCHEDRULES_QUOTA_INTERVAL . Value 20 MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. Value 30000 MAX_NUMBER_OF_ENABLED_STATIC_RULESETS maximum number static Rulesets extension enable one time. Value 50 MAX_NUMBER_OF_REGEX_RULES maximum number regular expression rules extension add. limit evaluated separately set dynamic rules specified rule resources file. Value 1000 MAX_NUMBER_OF_SESSION_RULES maximum number session scoped rules extension add. Value 5000 MAX_NUMBER_OF_STATIC_RULESETS maximum number static Rulesets extension specify part \"rule_resources\" manifest key. Value 100 MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES maximum number \"unsafe\" dynamic rules extension add. Value 5000 MAX_NUMBER_OF_UNSAFE_SESSION_RULES maximum number \"unsafe\" session scoped rules extension add. Value 5000 SESSION_RULESET_ID Ruleset ID session-scoped rules added extension. Value \"_session\" Methods getAvailableStaticRuleCount() chrome.declarativeNetRequest.getAvailableStaticRuleCount( callback?: function, ) Returns number static rules extension enable global static rule limit reached. Parameters - callback function optional callback parameter looks like:(count: number) => void - count number - Returns - Promise<number> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDisabledRuleIds() chrome.declarativeNetRequest.getDisabledRuleIds( options: GetDisabledRuleIdsOptions, callback?: function, ) Returns list static rules given Ruleset currently disabled. Parameters - options Specifies ruleset query. - callback function optional callback parameter looks like:(disabledRuleIds: number[]) => void - disabledRuleIds number[] - Returns - Promise<number[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDynamicRules() chrome.declarativeNetRequest.getDynamicRules( filter?: GetRulesFilter, callback?: function, ) Returns current set dynamic rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getEnabledRulesets() chrome.declarativeNetRequest.getEnabledRulesets( callback?: function, ) Returns ids current set enabled static rulesets. Parameters - callback function optional callback parameter looks like:(rulesetIds: string[]) => void - rulesetIds string[] - Returns - Promise<string[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMatchedRules() chrome.declarativeNetRequest.getMatchedRules( filter?: MatchedRulesFilter, callback?: function, ) Returns rules matched extension. Callers optionally filter list matched rules specifying filter . method available extensions \"declarativeNetRequestFeedback\" permission \"activeTab\" permission granted tabId specified filter . Note: Rules associated active document matched five minutes ago returned. Parameters - filter MatchedRulesFilter optional object filter list matched rules. - callback function optional callback parameter looks like:(details: RulesMatchedDetails) => void - details - Returns - Promise<RulesMatchedDetails> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSessionRules() chrome.declarativeNetRequest.getSessionRules( filter?: GetRulesFilter, callback?: function, ) Returns current set session scoped rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isRegexSupported() chrome.declarativeNetRequest.isRegexSupported( regexOptions: RegexOptions, callback?: function, ) Checks given regular expression supported regexFilter rule condition. Parameters - regexOptions regular expression check. - callback function optional callback parameter looks like:(result: IsRegexSupportedResult) => void - result - Returns - Promise<IsRegexSupportedResult> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setExtensionActionOptions() chrome.declarativeNetRequest.setExtensionActionOptions( options: ExtensionActionOptions, callback?: function, ) Configures action count tabs displayed extension action's badge text provides way action count incremented. Parameters - options - callback function optional Chrome 89+The callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. testMatchOutcome() chrome.declarativeNetRequest.testMatchOutcome( request: TestMatchRequestDetails, callback?: function, ) Checks extension's declarativeNetRequest rules would match hypothetical request. Note: available unpacked extensions intended used extension development. Parameters - request - callback function optional callback parameter looks like:(result: TestMatchOutcomeResult) => void - result - Returns - Promise<TestMatchOutcomeResult> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateDynamicRules() chrome.declarativeNetRequest.updateDynamicRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set dynamic rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across browser sessions across extension updates. - Static rules specified part extension package removed using function. MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. number unsafe rules must exceedMAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateEnabledRulesets() chrome.declarativeNetRequest.updateEnabledRulesets( options: UpdateRulesetOptions, callback?: function, ) Updates set enabled static rulesets extension. rulesets IDs listed options.disableRulesetIds first removed, rulesets listed options.enableRulesetIds added. Note set enabled static rulesets persisted across sessions across extension updates, i.e. rule_resources manifest key determine set enabled static rulesets extension update. Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateSessionRules() chrome.declarativeNetRequest.updateSessionRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set session scoped rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across sessions backed memory. MAX_NUMBER_OF_SESSION_RULES maximum number session rules extension add. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateStaticRules() chrome.declarativeNetRequest.updateStaticRules( options: UpdateStaticRulesOptions, callback?: function, ) Disables enables individual static rules Ruleset . Changes rules belonging disabled Ruleset take effect next time becomes enabled. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onRuleMatchedDebug chrome.declarativeNetRequest.onRuleMatchedDebug.addListener( callback: function, ) Fired rule matched request. available unpacked extensions \"declarativeNetRequestFeedback\" permission intended used debugging purposes only. Parameters - callback function callback parameter looks like:(info: MatchedRuleInfoDebug) => void - info -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/declarativeNetRequest", "title": "chrome.declarativeNetRequest | API | Chrome for Developers", "text": "Description chrome.declarativeNetRequest API used block modify network requests specifying declarative rules. lets extensions modify network requests without intercepting viewing content, thus providing privacy. Permissions declarativeNetRequest declarativeNetRequestWithHostAccess \"declarativeNetRequest \" \"declarativeNetRequestWithHostAccess \" permissions provide capabilities. differences permissions requested granted. \"declarativeNetRequest\" - Triggers permission warning install time provides implicit access allow ,allowAllRequests andblock rules. Use possible avoid needing request full access hosts. \"declarativeNetRequestFeedback\" - Enables debugging features unpacked extensions, specifically getMatchedRules() andonRuleMatchedDebug . \"declarativeNetRequestWithHostAccess\" - permission warning shown install time, must request host permissions perform action host. appropriate want use declarative net request rules extension already host permissions without generating additional warnings. Availability Manifest addition permissions described previously, certain types rulesets, static rulesets specifically, require declaring \"declarative_net_request\" manifest key, dictionary single key called \"rule_resources\" . key array containing dictionaries type Ruleset , shown following. (Note name 'Ruleset' appear manifest's JSON since merely array.) Static rulesets explained later document. { \"name\": \"My extension\", ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, { \"id\": \"ruleset_2\", \"enabled\": false, \"path\": \"rules_2.json\" }] }, \"permissions\": [ \"declarativeNetRequest\", \"declarativeNetRequestFeedback\", ], \"host_permissions\": [ \"http://www.blogger.com/*\", \"http://*.google.com/*\" ], ... } Rules rulesets use API, specify one rulesets. ruleset contains array rules. single rule one following: - Block network request. - Upgrade schema (http https). - Prevent request getting blocked negating matching blocked rules. - Redirect network request. - Modify request response headers. three types rulesets, managed slightly different ways. - Dynamic - Persist across browser sessions extension upgrades managed using JavaScript extension use. - Session - Cleared browser shuts new version extension installed. Session rules managed using JavaScript extension use. - Static - Packaged, installed, updated extension installed upgraded. Static rules stored JSON-formatted rule files listed manifest file. Dynamic session-scoped rulesets Dynamic session rulesets managed using JavaScript extension use. - Dynamic rules persist across browser sessions extension upgrades. - Session rules cleared browser shuts new version extension installed. one ruleset types. extension add remove rules dynamically calling updateDynamicRules() updateSessionRules() , provided rule limits exceeded. information rule limits, see Rule limits. see example code examples. Static rulesets Unlike dynamic session rules, static rules packaged, installed, updated extension installed upgraded. They're stored rule files JSON format, indicated extension using \"declarative_net_request\" \"rule_resources\" keys described above, well one Ruleset dictionaries. Ruleset dictionary contains path rule file, ID ruleset contained file, whether ruleset enabled disabled. last two important enable disable ruleset programmatically. { ... \"declarative_net_request\" : { \"rule_resources\" : [{ \"id\": \"ruleset_1\", \"enabled\": true, \"path\": \"rules_1.json\" }, ... ] } ... } test rule files, load extension unpacked. Errors warnings invalid static rules displayed unpacked extensions. Invalid static rules packed extensions ignored. Expedited review Changes static rulesets may eligible expedited review. See expedited review eligible changes. Enable disable static rules rulesets individual static rules complete static rulesets may enabled disabled runtime. set enabled static rules rulesets persisted across browser sessions. Neither persisted across extension updates, meaning rules chose leave rule files available update. performance reasons also limits number rules rulesets may enabled one time. Call getAvailableStaticRuleCount() check number additional rules may enabled. information rule limits, see Rule limits. enable disable static rules, call updateStaticRules() . method takes UpdateStaticRulesOptions object, contains arrays IDs rules enable disable. IDs defined using \"id\" key Ruleset dictionary. maximum limit 5000 disabled static rules. enable disable static rulesets, call updateEnabledRulesets() . method takes UpdateRulesetOptions object, contains arrays IDs rulesets enable disable. IDs defined using \"id\" key Ruleset dictionary. Build rules Regardless type, rule starts four fields shown following. \"id\" \"priority\" keys take number, \"action\" \"condition\" keys may provide several blocking redirecting conditions. following rule blocks script requests originating \"foo.com\" URL \"abc\" substring. { \"id\" : 1, \"priority\": 1, \"action\" : { \"type\" : \"block\" }, \"condition\" : { \"urlFilter\" : \"abc\", \"initiatorDomains\" : [\"foo.com\"], \"resourceTypes\" : [\"script\"] } } URL matching Declarative Net Request provides ability match URLs either pattern matching syntax regular expressions. URL filter syntax rule's \"condition\" key allows \"urlFilter\" key acting URLs specified domain. create patterns using pattern matching tokens. examples. urlFilter | Matches | match | |---|---|---| \"abc\" | https://abcd.com https://example.com/abcd | https://ab.com | \"abc*d\" | https://abcd.com https://example.com/abcxyzd | https://abc.com | \"||a.example.com\" | https://a.example.com/ https://b.a.example.com/xyz https://a.example.company | https://example.com/ | \"|https*\" | https://example.com | http://example.com/ http://https.com | \"example*^123|\" | https://example.com/123 http://abc.com/example?123 | https://example.com/1234 https://abc.com/example0123 | Regular expressions Conditions also use regular expressions. See \"regexFilter\" key. learn limits apply conditions, see Rules use regular expressions. Write good URL conditions Take care writing rules always match entire domain. Otherwise, rule may match situations unexpected. example, using pattern matching syntax: google.com incorrectly matcheshttps://example.com/?param=google.com ||google.com incorrectly matcheshttps://google.company https://www.google.com incorrectly matcheshttps://example.com/?param=https://www.google.com Consider using: ||google.com/ , matches paths subdomains.|https://www.google.com/ matches paths subdomains. Similarly, use ^ / characters anchor regular expression. example, ^https:\\/\\/www\\.google\\.com\\/ matches path https://www.google.com. Rule evaluation DNR rules applied browser across various stages network request lifecycle. request request made, extension block redirect (including upgrading scheme HTTP HTTPS) matching rule. extension, browser determines list matching rules. Rules modifyHeaders action included handled later. Additionally, rules responseHeaders condition considered later (when response headers available) included. Then, extension, Chrome picks one candidate per request. Chrome finds matching rule, ordering matching rules priority. Rules priority ordered action (allow allowAllRequests > block > upgradeScheme > redirect ). candidate allow allowAllRequests rule, frame request made previously matched allowAllRequests rule higher equal priority extension, request \"allowed\" extension effect request. one extension wants block redirect request, single action take chosen. Chrome sorting rules order block > redirect upgradeScheme > allow allowAllRequests . two rules type, Chrome chooses rule recently installed extension. request headers sent Chrome sends request headers server, headers updated based matching modifyHeaders rules. Within single extension, Chrome builds list modifications perform finding matching modifyHeaders rules. Similar before, rules higher priority matching allow allowAllRequests rules included. rules applied Chrome order rules recently installed extension always evaluated rules older extension. Additionally, rules higher priority one extension always applied rules lower priority extension. Notably, even across extensions: - rule appends header, lower priority rules append header. Set remove operations allowed. - rule sets header, lower priority rules extension append header. modifications allowed. - rule removes header, lower priority rules cannot modify header. response received response headers received, Chrome evaluates rules responseHeaders condition. sorting rules action priority excluding rules made redundant matching allow allowAllRequests rule (this happens identically steps \"Before request\"), Chrome may block redirect request behalf extension. Note request made stage, request already sent server server received data like request body. block redirect rule response headers condition still run\u2013but cannot actually block redirect request. case block rule, handled page made request receiving blocked response Chrome terminating request early. case redirect rule, Chrome makes new request redirected URL. Make sure consider behaviors meet privacy expectations extension. request blocked redirected, Chrome applies modifyHeaders rules. Applying modifications response headers works way described \"Before request headers sent\". Applying modifications request headers nothing, since request already made. Safe rules Safe rules defined rules action block , allow , allowAllRequests upgradeScheme . rules subject increased dynamic rules quota. Rule limits performance overhead loading evaluating rules browser, limits apply using API. Limits depend type rule using. Static rules Static rules specified rule files declared manifest file. extension specify 100 static rulesets part \"rule_resources\" manifest key, 50 rulesets enabled time. latter called MAX_NUMBER_OF_ENABLED_STATIC_RULESETS . Collectively, rulesets guaranteed least 30,000 rules. called GUARANTEED_MINIMUM_STATIC_RULES . number rules available depends many rules enabled extensions installed user's browser. find number runtime calling getAvailableStaticRuleCount() . see example code examples. Session rules extension 5000 session rules. exposed MAX_NUMBER_OF_SESSION_RULES . Chrome 120, limit 5000 combined dynamic session rules. Dynamic rules extension least 5000 dynamic rules. exposed MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Starting Chrome 121, larger limit 30,000 rules available safe dynamic rules, exposed MAX_NUMBER_OF_DYNAMIC_RULES . unsafe rules added within limit 5000 also count towards limit. Chrome 120, 5000 combined dynamic session rules limit. Rules use regular expressions types rules use regular expressions; however, total number regular expression rules type cannot exceed 1000. called MAX_NUMBER_OF_REGEX_RULES. Additionally, rule must less 2KB compiled. roughly correlates complexity rule. try load rule exceeds limit, see warning like following rule ignored. rules_1.json: Rule id 1 specified complex regex allowed part \"regexFilter\" key. Interactions service workers declarativeNetRequest applies requests reach network stack. includes responses HTTP cache, may include responses go service worker's onfetch handler. declarativeNetRequest affect responses generated service worker retrieved CacheStorage , affect calls fetch() made service worker. Web accessible resources declarativeNetRequest rule cannot redirect public resource request resource web accessible. triggers error. true even specified web accessible resource owned redirecting extension. declare resources declarativeNetRequest, use manifest's \"web_accessible_resources\" array. Header modification append operation supported following headers: accept , accept-encoding , accept-language , access-control-request-headers , cache-control , connection , content-language , cookie , forwarded , if-match , if-none-match , keep-alive , range , te , trailer , transfer-encoding , upgrade , user-agent , via , want-digest , x-forwarded-for . Examples Code examples Update dynamic rules following example shows call updateDynamicRules() . procedure updateSessionRules() same. // Get arrays containing new old rules const newRules = await getNewRules(); const oldRules = await chrome.declarativeNetRequest.getDynamicRules(); const oldRuleIds = oldRules.map(rule => rule.id); // Use arrays update dynamic rules await chrome.declarativeNetRequest.updateDynamicRules({ removeRuleIds: oldRuleIds, addRules: newRules }); Update static rulesets following example shows enable disable rulesets considering number available maximum number enabled static rulesets. would number static rules need exceeds number allowed. work, rulesets installed rulesets disabled (setting \"Enabled\" false within manifest file). async function updateStaticRules(enableRulesetIds, disableCandidateIds) { // Create options structure call updateEnabledRulesets() let options = { enableRulesetIds: enableRulesetIds } // Get number enabled static rules const enabledStaticCount = await chrome.declarativeNetRequest.getEnabledRulesets(); // Compare rule counts determine anything needs disabled // new rules enabled const proposedCount = enableRulesetIds.length; (enabledStaticCount + proposedCount > chrome.declarativeNetRequest.MAX_NUMBER_OF_ENABLED_STATIC_RULESETS) { options.disableRulesetIds = disableCandidateIds } // Update enabled static rules await chrome.declarativeNetRequest.updateEnabledRulesets(options); } Rule examples following examples illustrate Chrome prioritizes rules extension. reviewing them, may want open prioritization rules separate window. \"priority\" key examples require host permission *://*.example.com/* . work priority particular URL, look (developer-defined) \"priority\" key, \"action\" key \"urlFilter\" key. examples refer example rule file shown them. - Navigation https://google.com - Two rules cover URL: rules IDs 1 4. rule ID 1 applies \"block\" actions higher priority than\"redirect\" actions. remaining rules apply longer URLs. - Navigation https://google.com/1234 - longer URL, rule ID 2 matches addition rules IDs 1 4. rule ID 2 applies \"allow\" higher priority than\"block\" and\"redirect\" . - Navigation https://google.com/12345 - four rules match URL. rule ID 3 applies developer-defined priority highest group. [ { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"block\" }, \"condition\": {\"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 2, \"priority\": 1, \"action\": { \"type\": \"allow\" }, \"condition\": { \"urlFilter\": \"||google.com/123\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 3, \"priority\": 2, \"action\": { \"type\": \"block\" }, \"condition\": { \"urlFilter\": \"||google.com/12345\", \"resourceTypes\": [\"main_frame\"] } }, { \"id\": 4, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"url\": \"https://example.com\" } }, \"condition\": { \"urlFilter\": \"||google.com/\", \"resourceTypes\": [\"main_frame\"] } }, ] Redirects example requires host permission *://*.example.com/* . following example shows redirect request example.com page within extension itself. extension path /a.jpg resolves chrome-extension://EXTENSION_ID/a.jpg , EXTENSION_ID ID extension. work manifest declare /a.jpg web accessible resource. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"extensionPath\": \"/a.jpg\" } }, \"condition\": { \"urlFilter\": \"||https://www.example.com/\", \"resourceTypes\": [\"main_frame\"] } } following uses \"transform\" key redirect subdomain example.com. uses domain name anchor (\"||\") intercept requests scheme example.com. \"scheme\" key \"transform\" specifies redirects subdomain always use \"https\". { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"transform\": { \"scheme\": \"https\", \"host\": \"new.example.com\" } } }, \"condition\": { \"urlFilter\": \"||example.com/\", \"resourceTypes\": [\"main_frame\"] } } following example uses regular expressions redirect https://www.abc.xyz.com/path https://abc.xyz.com/path . \"regexFilter\" key, notice periods escaped capturing group selects either \"abc\" \"def\". \"regexSubstitution\" key specifies first returned match regular expression using \"\\1\". case, \"abc\" captured redirected URL placed substitution. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"redirect\", \"redirect\": { \"regexSubstitution\": \"https://\\\\1.xyz.com/\" } }, \"condition\": { \"regexFilter\": \"^https://www\\\\.(abc|def)\\\\.xyz\\\\.com/\", \"resourceTypes\": [ \"main_frame\" ] } } Headers following example removes cookies main frame sub frames. { \"id\": 1, \"priority\": 1, \"action\": { \"type\": \"modifyHeaders\", \"requestHeaders\": [{ \"header\": \"cookie\", \"operation\": \"remove\" }] }, \"condition\": { \"resourceTypes\": [\"main_frame\", \"sub_frame\"] } } Types DomainType describes whether request first third party frame originated. request said first party domain (eTLD+1) frame request originated. Enum \"firstParty\" \"thirdParty\" network request first party frame originated. network request third party frame originated. ExtensionActionOptions Properties - displayActionCountAsBadgeText boolean optional Whether automatically display action count page extension's badge text. preference persisted across sessions. - tabUpdate TabActionCountUpdate optional Chrome 89+Details tab's action count adjusted. GetDisabledRuleIdsOptions Properties - rulesetId string id corresponding static Ruleset . GetRulesFilter Properties - ruleIds number[] optional specified, rules matching IDs included. HeaderInfo Properties - excludedValues string[] optional specified, condition matched header exists value contains least one element list. uses match pattern syntax values . - header string name header. condition matches name values andexcludedValues specified. - values string[] optional specified, condition matches header's value matches least one pattern list. supports case-insensitive header value matching plus following constructs: '*' : Matches number characters. '?' : Matches zero one character(s). '*' '?' escaped backslash, e.g. '\\*' '\\?' HeaderOperation describes possible operations \"modifyHeaders\" rule. Enum \"append\" \"set\" \"remove\" Adds new entry specified header. operation supported request headers. Sets new value specified header, removing existing headers name. Removes entries specified header. IsRegexSupportedResult Properties - isSupported boolean - reason UnsupportedRegexReason optional Specifies reason regular expression supported. provided isSupported false. MatchedRule Properties - ruleId number matching rule's ID. - rulesetId string ID Ruleset rule belongs to. rule originating set dynamic rules, equal toDYNAMIC_RULESET_ID . MatchedRuleInfo Properties - rule - tabId number tabId tab request originated tab still active. Else -1. - timeStamp number time rule matched. Timestamps correspond Javascript convention times, i.e. number milliseconds since epoch. MatchedRuleInfoDebug Properties - request Details request rule matched. - rule MatchedRulesFilter Properties - minTimeStamp number optional specified, matches rules given timestamp. - tabId number optional specified, matches rules given tab. Matches rules associated active tab set -1. ModifyHeaderInfo Properties - header string name header modified. - operation operation performed header. - value string optional new value header. Must specified append andset operations. QueryKeyValue Properties - key string - replaceOnly boolean optional Chrome 94+If true, query key replaced already present. Otherwise, key also added missing. Defaults false. - value string QueryTransform Properties - addOrReplaceParams QueryKeyValue[] optional list query key-value pairs added replaced. - removeParams string[] optional list query keys removed. Redirect Properties - extensionPath string optional Path relative extension directory. start '/'. - regexSubstitution string optional Substitution pattern rules specify regexFilter . first match ofregexFilter within url replaced pattern. WithinregexSubstitution , backslash-escaped digits (\\1 \\9) used insert corresponding capture groups. \\0 refers entire matching text. - transform URLTransform optional Url transformations perform. - url string optional redirect url. Redirects JavaScript urls allowed. RegexOptions Properties - isCaseSensitive boolean optional Whether regex specified case sensitive. Default true. - regex string regular expresson check. - requireCapturing boolean optional Whether regex specified requires capturing. Capturing required redirect rules specify aregexSubstition action. default false. RequestDetails Properties - documentId string optional Chrome 106+The unique identifier frame's document, request frame. - documentLifecycle DocumentLifecycle optional Chrome 106+The lifecycle frame's document, request frame. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameType FrameType optional Chrome 106+The type frame, request frame. - initiator string optional origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The unique identifier frame's parent document, request frame parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. - tabId number ID tab request takes place. Set -1 request related tab. - type resource type request. - url string URL request. RequestMethod describes HTTP request method network request. Enum \"connect\" \"delete\" \"get\" \"head\" \"options\" \"patch\" \"post\" \"put\" \"other\" ResourceType describes resource type network request. Enum \"main_frame\" \"sub_frame\" \"stylesheet\" \"script\" \"image\" \"font\" \"object\" \"xmlhttprequest\" \"ping\" \"csp_report\" \"media\" \"websocket\" \"webtransport\" \"webbundle\" \"other\" Rule Properties - action action take rule matched. - condition condition rule triggered. - id number id uniquely identifies rule. Mandatory >= 1. - priority number optional Rule priority. Defaults 1. specified, >= 1. RuleAction Properties - redirect Redirect optional Describes redirect performed. valid redirect rules. - requestHeaders ModifyHeaderInfo[] optional Chrome 86+The request headers modify request. valid RuleActionType \"modifyHeaders\". - responseHeaders ModifyHeaderInfo[] optional Chrome 86+The response headers modify request. valid RuleActionType \"modifyHeaders\". - type type action perform. RuleActionType Describes kind action take given RuleCondition matches. Enum \"block\" \"redirect\" \"allow\" \"upgradeScheme\" \"modifyHeaders\" \"allowAllRequests\" Block network request. Redirect network request. Allow network request. request intercepted allow rule matches it. Upgrade network request url's scheme https request http ftp. Modify request/response headers network request. Allow requests within frame hierarchy, including frame request itself. RuleCondition Properties - domainType DomainType optional Specifies whether network request first-party third-party domain originated. omitted, requests accepted. - domains string[] optional Deprecated since Chrome 101Use initiatorDomains insteadThe rule match network requests originating list domains . - excludedDomains string[] optional Deprecated since Chrome 101Use excludedInitiatorDomains insteadThe rule match network requests originating list excludedDomains . - excludedInitiatorDomains string[] optional Chrome 101+The rule match network requests originating list excludedInitiatorDomains . list empty omitted, domains excluded. takes precedence overinitiatorDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also excluded. - excludedRequestDomains string[] optional Chrome 101+The rule match network requests domains matches one list excludedRequestDomains . list empty omitted, domains excluded. takes precedence overrequestDomains .Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also excluded. - excludedRequestMethods RequestMethod[] optional Chrome 91+List request methods rule match. one requestMethods andexcludedRequestMethods specified. neither specified, request methods matched. - excludedResourceTypes ResourceType[] optional List resource types rule match. one resourceTypes andexcludedResourceTypes specified. neither specified, resource types except \"main_frame\" blocked. - excludedResponseHeaders HeaderInfo[] optional Chrome 128+Rule match request matches response header condition list (if specified). excludedResponseHeaders andresponseHeaders specified, theexcludedResponseHeaders property takes precedence. - excludedTabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE excludes requests originate tab. supported session-scoped rules. - initiatorDomains string[] optional Chrome 101+The rule match network requests originating list initiatorDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - matches request initiator request url. - Sub-domains listed domains also matched. - isUrlFilterCaseSensitive boolean optional Whether urlFilter orregexFilter (whichever specified) case sensitive. Default false. - regexFilter string optional Regular expression match network request url. follows RE2 syntax. Note: one urlFilter orregexFilter specified.Note: regexFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. - requestDomains string[] optional Chrome 101+The rule match network requests domain matches one list requestDomains . list omitted, rule applied requests domains. empty list allowed.Notes: - Sub-domains like \"a.example.com\" also allowed. - entries must consist ascii characters. - Use punycode encoding internationalized domains. - Sub-domains listed domains also matched. - requestMethods RequestMethod[] optional Chrome 91+List HTTP request methods rule match. empty list allowed. Note: Specifying requestMethods rule condition also exclude non-HTTP(s) requests, whereas specifyingexcludedRequestMethods not. - resourceTypes ResourceType[] optional List resource types rule match. empty list allowed. Note: must specified allowAllRequests rules may include thesub_frame andmain_frame resource types. - responseHeaders HeaderInfo[] optional Chrome 128+Rule matches request matches response header condition list (if specified). - tabIds number[] optional Chrome 92+List tabs.Tab.id rule match. ID oftabs.TAB_ID_NONE matches requests originate tab. empty list allowed. supported session-scoped rules. - urlFilter string optional pattern matched network request url. Supported constructs: '*' : Wildcard: Matches number characters. '|' : Left/right anchor: used either end pattern, specifies beginning/end url respectively. '||' : Domain name anchor: used beginning pattern, specifies start (sub-)domain URL. '^' : Separator character: matches anything except letter, digit, one following: _ ,- ,. , or% . also match end URL.Therefore urlFilter composed following parts: (optional Left/Domain name anchor) + pattern + (optional Right anchor).If omitted, urls matched. empty string allowed. pattern beginning ||* allowed. Use* instead.Note: one urlFilter orregexFilter specified.Note: urlFilter must composed ASCII characters. matched url host encoded punycode format (in case internationalized domains) non-ascii characters url encoded utf-8. example, request url http://abc.\u0440\u0444?q=\u0444, theurlFilter matched url http://abc.xn--p1ai/?q=%D1%84. Ruleset Properties - enabled boolean Whether ruleset enabled default. - id string non-empty string uniquely identifying ruleset. IDs beginning '_' reserved internal use. - path string path JSON ruleset relative extension directory. RulesMatchedDetails Properties - rulesMatchedInfo Rules matching given filter. TabActionCountUpdate Properties - increment number amount increment tab's action count by. Negative values decrement count. - tabId number tab update action count. TestMatchOutcomeResult Properties - matchedRules rules (if any) match hypothetical request. TestMatchRequestDetails Properties - initiator string optional initiator URL (if any) hypothetical request. - method RequestMethod optional Standard HTTP method hypothetical request. Defaults \"get\" HTTP requests ignored non-HTTP requests. - responseHeaders object optional Chrome 129+The headers provided hypothetical response request get blocked redirected sent. Represented object maps header name list string values. specified, hypothetical response would return empty response headers, match rules match non-existence headers. E.g. {\"content-type\": [\"text/html; charset=utf-8\", \"multipart/form-data\"]} - tabId number optional ID tab hypothetical request takes place. need correspond real tab ID. Default -1, meaning request related tab. - type resource type hypothetical request. - url string URL hypothetical request. UnsupportedRegexReason Describes reason given regular expression supported. Enum \"syntaxError\" \"memoryLimitExceeded\" regular expression syntactically incorrect, uses features available RE2 syntax. regular expression exceeds memory limit. UpdateRuleOptions Properties - addRules Rule[] optional Rules add. - removeRuleIds number[] optional IDs rules remove. invalid IDs ignored. UpdateRulesetOptions Properties UpdateStaticRulesOptions Properties URLTransform Properties - fragment string optional new fragment request. either empty, case existing fragment cleared; begin '#'. - host string optional new host request. - password string optional new password request. - path string optional new path request. empty, existing path cleared. - port string optional new port request. empty, existing port cleared. - query string optional new query request. either empty, case existing query cleared; begin '?'. - queryTransform QueryTransform optional Add, remove replace query key-value pairs. - scheme string optional new scheme request. Allowed values \"http\", \"https\", \"ftp\" \"chrome-extension\". - username string optional new username request. Properties DYNAMIC_RULESET_ID Ruleset ID dynamic rules added extension. Value \"_dynamic\" GETMATCHEDRULES_QUOTA_INTERVAL Time interval within MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL getMatchedRules calls made, specified minutes. Additional calls fail immediately set runtime.lastError . Note: getMatchedRules calls associated user gesture exempt quota. Value 10 GUARANTEED_MINIMUM_STATIC_RULES minimum number static rules guaranteed extension across enabled static rulesets. rules limit count towards global static rule limit. Value 30000 MAX_GETMATCHEDRULES_CALLS_PER_INTERVAL number times getMatchedRules called within period GETMATCHEDRULES_QUOTA_INTERVAL . Value 20 MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. Value 30000 MAX_NUMBER_OF_ENABLED_STATIC_RULESETS maximum number static Rulesets extension enable one time. Value 50 MAX_NUMBER_OF_REGEX_RULES maximum number regular expression rules extension add. limit evaluated separately set dynamic rules specified rule resources file. Value 1000 MAX_NUMBER_OF_SESSION_RULES maximum number session scoped rules extension add. Value 5000 MAX_NUMBER_OF_STATIC_RULESETS maximum number static Rulesets extension specify part \"rule_resources\" manifest key. Value 100 MAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES maximum number \"unsafe\" dynamic rules extension add. Value 5000 MAX_NUMBER_OF_UNSAFE_SESSION_RULES maximum number \"unsafe\" session scoped rules extension add. Value 5000 SESSION_RULESET_ID Ruleset ID session-scoped rules added extension. Value \"_session\" Methods getAvailableStaticRuleCount() chrome.declarativeNetRequest.getAvailableStaticRuleCount( callback?: function, ) Returns number static rules extension enable global static rule limit reached. Parameters - callback function optional callback parameter looks like:(count: number) => void - count number - Returns - Promise<number> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDisabledRuleIds() chrome.declarativeNetRequest.getDisabledRuleIds( options: GetDisabledRuleIdsOptions, callback?: function, ) Returns list static rules given Ruleset currently disabled. Parameters - options Specifies ruleset query. - callback function optional callback parameter looks like:(disabledRuleIds: number[]) => void - disabledRuleIds number[] - Returns - Promise<number[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getDynamicRules() chrome.declarativeNetRequest.getDynamicRules( filter?: GetRulesFilter, callback?: function, ) Returns current set dynamic rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getEnabledRulesets() chrome.declarativeNetRequest.getEnabledRulesets( callback?: function, ) Returns ids current set enabled static rulesets. Parameters - callback function optional callback parameter looks like:(rulesetIds: string[]) => void - rulesetIds string[] - Returns - Promise<string[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMatchedRules() chrome.declarativeNetRequest.getMatchedRules( filter?: MatchedRulesFilter, callback?: function, ) Returns rules matched extension. Callers optionally filter list matched rules specifying filter . method available extensions \"declarativeNetRequestFeedback\" permission \"activeTab\" permission granted tabId specified filter . Note: Rules associated active document matched five minutes ago returned. Parameters - filter MatchedRulesFilter optional object filter list matched rules. - callback function optional callback parameter looks like:(details: RulesMatchedDetails) => void - details - Returns - Promise<RulesMatchedDetails> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getSessionRules() chrome.declarativeNetRequest.getSessionRules( filter?: GetRulesFilter, callback?: function, ) Returns current set session scoped rules extension. Callers optionally filter list fetched rules specifying filter . Parameters - filter GetRulesFilter optional Chrome 111+An object filter list fetched rules. - callback function optional callback parameter looks like:(rules: Rule[]) => void - rules Rule[] - Returns - Promise<Rule[]> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isRegexSupported() chrome.declarativeNetRequest.isRegexSupported( regexOptions: RegexOptions, callback?: function, ) Checks given regular expression supported regexFilter rule condition. Parameters - regexOptions regular expression check. - callback function optional callback parameter looks like:(result: IsRegexSupportedResult) => void - result - Returns - Promise<IsRegexSupportedResult> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setExtensionActionOptions() chrome.declarativeNetRequest.setExtensionActionOptions( options: ExtensionActionOptions, callback?: function, ) Configures action count tabs displayed extension action's badge text provides way action count incremented. Parameters - options - callback function optional Chrome 89+The callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. testMatchOutcome() chrome.declarativeNetRequest.testMatchOutcome( request: TestMatchRequestDetails, callback?: function, ) Checks extension's declarativeNetRequest rules would match hypothetical request. Note: available unpacked extensions intended used extension development. Parameters - request - callback function optional callback parameter looks like:(result: TestMatchOutcomeResult) => void - result - Returns - Promise<TestMatchOutcomeResult> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateDynamicRules() chrome.declarativeNetRequest.updateDynamicRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set dynamic rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across browser sessions across extension updates. - Static rules specified part extension package removed using function. MAX_NUMBER_OF_DYNAMIC_RULES maximum number dynamic rules extension add. number unsafe rules must exceedMAX_NUMBER_OF_UNSAFE_DYNAMIC_RULES . Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateEnabledRulesets() chrome.declarativeNetRequest.updateEnabledRulesets( options: UpdateRulesetOptions, callback?: function, ) Updates set enabled static rulesets extension. rulesets IDs listed options.disableRulesetIds first removed, rulesets listed options.enableRulesetIds added. Note set enabled static rulesets persisted across sessions across extension updates, i.e. rule_resources manifest key determine set enabled static rulesets extension update. Parameters - optionsChrome 87+ - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateSessionRules() chrome.declarativeNetRequest.updateSessionRules( options: UpdateRuleOptions, callback?: function, ) Modifies current set session scoped rules extension. rules IDs listed options.removeRuleIds first removed, rules given options.addRules added. Notes: - update happens single atomic operation: either specified rules added removed, error returned. - rules persisted across sessions backed memory. MAX_NUMBER_OF_SESSION_RULES maximum number session rules extension add. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 91+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateStaticRules() chrome.declarativeNetRequest.updateStaticRules( options: UpdateStaticRulesOptions, callback?: function, ) Disables enables individual static rules Ruleset . Changes rules belonging disabled Ruleset take effect next time becomes enabled. Parameters - options - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onRuleMatchedDebug chrome.declarativeNetRequest.onRuleMatchedDebug.addListener( callback: function, ) Fired rule matched request. available unpacked extensions \"declarativeNetRequestFeedback\" permission intended used debugging purposes only. Parameters - callback function callback parameter looks like:(info: MatchedRuleInfoDebug) => void - info -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/events", "title": "chrome.events | API | Chrome for Developers", "text": "Description chrome.events namespace contains common types used APIs dispatching events notify something interesting happens. Concepts usage Event object lets notified something interesting happens. Here's example using chrome.alarms.onAlarm event notified whenever alarm elapsed: chrome.alarms.onAlarm.addListener((alarm) => { appendToLog(`alarms.onAlarm -- name: ${alarm.name}, scheduledTime: ${alarm.scheduledTime}`); }); example shows, register notification using addListener() . argument addListener() always function define handle event, parameters function depend event handling. Checking documentation alarms.onAlarm , see function single parameter: alarms.Alarm object details elapsed alarm. Example APIs using Events: alarms, i18n, identity, runtime. chrome APIs do. Declarative Event Handlers declarative event handlers provide means define rules consisting declarative conditions actions. Conditions evaluated browser rather JavaScript engine reduces roundtrip latencies allows high efficiency. Declarative event handlers used example Declarative Content API. page describes underlying concepts declarative event handlers. Rules simplest possible rule consists one conditions one actions: const rule = { conditions: [ /* conditions */ ], actions: [ /* actions */ ] }; conditions fulfilled, actions executed. addition conditions actions may give rule identifier, simplifies unregistering previously registered rules, priority define precedences among rules. Priorities considered rules conflict need executed specific order. Actions executed descending order priority rules. const rule = { id: \"my rule\", // optional, generated set. priority: 100, // optional, defaults 100. conditions: [ /* conditions */ ], actions: [ /* actions */ ] }; Event objects Event objects may support rules. event objects call callback function events happen test whether registered rule least one fulfilled condition execute actions associated rule. Event objects supporting declarative API three relevant methods: events.Event.addRules() , events.Event.removeRules() , events.Event.getRules() . Add rules add rules call addRules() function event object. takes array rule instances first parameter callback function called completion. const rule_list = [rule1, rule2, ...]; addRules(rule_list, (details) => {...}); rules inserted successfully, details parameter contains array inserted rules appearing order passed rule_list optional parameters id priority filled generated values. rule invalid, example, contained invalid condition action, none rules added runtime.lastError variable set callback function called. rule rule_list must contain unique identifier already used another rule empty identifier. Remove rules remove rules call removeRules() function. accepts optional array rule identifiers first parameter callback function second parameter. const rule_ids = [\"id1\", \"id2\", ...]; removeRules(rule_ids, () => {...}); rule_ids array identifiers, rules identifiers listed array removed. rule_ids lists identifier, unknown, identifier silently ignored. rule_ids undefined , registered rules extension removed. callback() function called rules removed. Retrieve rules retrieve list registered rules, call getRules() function. accepts optional array rule identifiers semantics removeRules() callback function. const rule_ids = [\"id1\", \"id2\", ...]; getRules(rule_ids, (details) => {...}); details parameter passed callback() function refers array rules including filled optional parameters. Performance achieve maximum performance, keep following guidelines mind. Register unregister rules bulk. registration unregistration, Chrome needs update internal data structures. update expensive operation. const rule1 = {...}; const rule2 = {...}; chrome.declarativeWebRequest.onRequest.addRules([rule1]); chrome.declarativeWebRequest.onRequest.addRules([rule2]); const rule1 = {...}; const rule2 = {...}; chrome.declarativeWebRequest.onRequest.addRules([rule1, rule2]); Prefer substring matching regular expressions events.UrlFilter. Substring based matching extremely fast. const match = new chrome.declarativeWebRequest.RequestMatcher({ url: {urlMatches: \"example.com/[^?]*foo\" } }); const match = new chrome.declarativeWebRequest.RequestMatcher({ url: {hostSuffix: \"example.com\", pathContains: \"foo\"} }); many rules share actions, merge rules one. Rules trigger actions soon single condition fulfilled. speeds matching reduces memory consumption duplicate action sets. const condition1 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }); const condition2 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }); const rule1 = { conditions: [condition1], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; const rule2 = { conditions: [condition2], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; chrome.declarativeWebRequest.onRequest.addRules([rule1, rule2]); const condition1 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'example.com' } }); const condition2 = new chrome.declarativeWebRequest.RequestMatcher({ url: { hostSuffix: 'foobar.com' } }); const rule = { conditions: [condition1, condition2], actions: [new chrome.declarativeWebRequest.CancelRequest()] }; chrome.declarativeWebRequest.onRequest.addRules([rule]); Filtered events Filtered events mechanism allows listeners specify subset events interested in. listener uses filter invoked events pass filter, makes listening code declarative efficient. service worker need woken handle events care about. Filtered events intended allow transition manual filtering code. chrome.webNavigation.onCommitted.addListener((event) => { (hasHostSuffix(event.url, 'google.com') || hasHostSuffix(event.url, 'google.com.au')) { // ... } }); chrome.webNavigation.onCommitted.addListener((event) => { // ... }, {url: [{hostSuffix: 'google.com'}, {hostSuffix: 'google.com.au'}]}); Events support specific filters meaningful event. list filters event supports listed documentation event \"filters\" section. matching URLs (as example above), event filters support URL matching capabilities expressible events.UrlFilter , except scheme port matching. Types Event object allows addition removal listeners Chrome event. Properties - addListener void Registers event listener callback event. addListener function looks like:(callback: H) => {...} - callback H Called event occurs. parameters function depend type event. - - addRules void Registers rules handle events. addRules function looks like: [], callback?: function) => {...}(rules: Rule<anyany> - getRules void Returns currently registered rules. getRules function looks like:(ruleIdentifiers?: string[], callback: function) => {...} - ruleIdentifiers string[] optional array passed, rules identifiers contained array returned. - callback function callback parameter looks like: []) => void(rules: Rule<anyany> - rules Rule<anyany>[] Rules registered, optional parameters filled values. - - - hasListener void hasListener function looks like:(callback: H) => {...} - callback H Listener whose registration status shall tested. - returns boolean True callback registered event. - - hasListeners void hasListeners function looks like:() => {...} - returns boolean True event listeners registered event. - - removeListener void Deregisters event listener callback event. removeListener function looks like:(callback: H) => {...} - callback H Listener shall unregistered. - - removeRules void Unregisters currently registered rules. removeRules function looks like:(ruleIdentifiers?: string[], callback?: function) => {...} - ruleIdentifiers string[] optional array passed, rules identifiers contained array unregistered. - callback function optional callback parameter looks like:() => void - Rule Description declarative rule handling events. Properties - actions any[] List actions triggered one conditions fulfilled. - conditions any[] List conditions trigger actions. - id string optional Optional identifier allows referencing rule. - priority number optional Optional priority rule. Defaults 100. - tags string[] optional Tags used annotate rules perform operations sets rules. UrlFilter Filters URLs various criteria. See event filtering. criteria case sensitive. Properties - cidrBlocks string[] optional Chrome 123+Matches host part URL IP address contained CIDR blocks specified array. - hostContains string optional Matches host name URL contains specified string. test whether host name component prefix 'foo', use hostContains: '.foo'. matches 'www.foobar.com' 'foo.com', implicit dot added beginning host name. Similarly, hostContains used match component suffix ('foo.') exactly match components ('.foo.'). Suffix- exact-matching last components need done separately using hostSuffix, implicit dot added end host name. - hostEquals string optional Matches host name URL equal specified string. - hostPrefix string optional Matches host name URL starts specified string. - hostSuffix string optional Matches host name URL ends specified string. - originAndPathMatches string optional Matches URL without query segment fragment identifier matches specified regular expression. Port numbers stripped URL match default port number. regular expressions use RE2 syntax. - pathContains string optional Matches path segment URL contains specified string. - pathEquals string optional Matches path segment URL equal specified string. - pathPrefix string optional Matches path segment URL starts specified string. - pathSuffix string optional Matches path segment URL ends specified string. - ports (number | number[])[] optional Matches port URL contained specified port lists. example [80, 443, [1000, 1200]] matches requests port 80, 443 range 1000-1200. - queryContains string optional Matches query segment URL contains specified string. - queryEquals string optional Matches query segment URL equal specified string. - queryPrefix string optional Matches query segment URL starts specified string. - querySuffix string optional Matches query segment URL ends specified string. - schemes string[] optional Matches scheme URL equal schemes specified array. - urlContains string optional Matches URL (without fragment identifier) contains specified string. Port numbers stripped URL match default port number. - urlEquals string optional Matches URL (without fragment identifier) equal specified string. Port numbers stripped URL match default port number. - urlMatches string optional Matches URL (without fragment identifier) matches specified regular expression. Port numbers stripped URL match default port number. regular expressions use RE2 syntax. - urlPrefix string optional Matches URL (without fragment identifier) starts specified string. Port numbers stripped URL match default port number. - urlSuffix string optional Matches URL (without fragment identifier) ends specified string. Port numbers stripped URL match default port number."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extension", "title": "chrome.extension | API | Chrome for Developers", "text": "Description chrome.extension API utilities used extension page. includes support exchanging messages extension content scripts extensions, described detail Message Passing. Types ViewType type extension view. Enum \"tab\" \"popup\" Properties inIncognitoContext True content scripts running inside incognito tabs, extension pages running inside incognito process. latter applies extensions 'split' incognito_behavior. Type boolean Methods getBackgroundPage() chrome.extension.getBackgroundPage() Returns JavaScript 'window' object background page running inside current extension. Returns null extension background page. Returns - Window | undefined getViews() chrome.extension.getViews( fetchProperties?: object, ) Returns array JavaScript 'window' objects pages running inside current extension. Parameters - fetchProperties object optional - tabId number optional Chrome 54+Find view according tab id. field omitted, returns views. - type ViewType optional type view get. omitted, returns views (including background pages tabs). - windowId number optional window restrict search to. omitted, returns views. - Returns - Window[] Array global objects isAllowedFileSchemeAccess() chrome.extension.isAllowedFileSchemeAccess( callback?: function, ) Retrieves state extension's access 'file://' scheme. corresponds user-controlled per-extension 'Allow access File URLs' setting accessible via chrome://extensions page. Parameters - callback function optional callback parameter looks like:(isAllowedAccess: boolean) => void - isAllowedAccess boolean True extension access 'file://' scheme, false otherwise. - Returns - Promise<boolean> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isAllowedIncognitoAccess() chrome.extension.isAllowedIncognitoAccess( callback?: function, ) Retrieves state extension's access Incognito-mode. corresponds user-controlled per-extension 'Allowed Incognito' setting accessible via chrome://extensions page. Parameters - callback function optional callback parameter looks like:(isAllowedAccess: boolean) => void - isAllowedAccess boolean True extension access Incognito mode, false otherwise. - Returns - Promise<boolean> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUpdateUrlData() chrome.extension.setUpdateUrlData( data: string, ) Sets value ap CGI parameter used extension's update URL. value ignored extensions hosted Chrome Extension Gallery. Parameters - data string"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extensionTypes", "title": "chrome.extensionTypes | API | Chrome for Developers", "text": "Description chrome.extensionTypes API contains type declarations Chrome extensions. Types Enum \"author\" \"user\" DeleteInjectionDetails Details CSS remove. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies CSS removed frames current page. default, it'sfalse removed top frame. Iftrue andframeId set, code removed selected frame child frames. - code string optional CSS code remove. - cssOrigin CSSOrigin optional origin CSS remove. Defaults \"author\" . - file string optional CSS file remove. - frameId number optional frame CSS removed. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also removed about:blank about:srcdoc frames extension access parent document. default false . DocumentLifecycle document lifecycle frame. Enum \"prerender\" \"active\" \"cached\" \"pending_deletion\" ExecutionWorld JavaScript world script execute within. either isolated world unique extension, main world DOM shared page's JavaScript, user scripts world available scripts registered User Scripts API. Enum \"ISOLATED\" \"MAIN\" \"USER_SCRIPT\" FrameType type frame. Enum \"outermost_frame\" \"fenced_frame\" \"sub_frame\" ImageDetails Details format quality image. Properties - format ImageFormat optional format resulting image. Default \"jpeg\" . - quality number optional format \"jpeg\" , controls quality resulting image. value ignored PNG images. quality decreased, resulting image visual artifacts, number bytes needed store decrease. ImageFormat format image. Enum \"jpeg\" \"png\" InjectDetails Details script CSS inject. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies JavaScript CSS injected frames current page. default, it'sfalse injected top frame. Iftrue andframeId set, code inserted selected frame child frames. - code string optional JavaScript CSS code inject. Warning: careful using code parameter. Incorrect use may open extension cross site scripting attacks - cssOrigin CSSOrigin optional Chrome 66+The origin CSS inject. may specified CSS, JavaScript. Defaults \"author\" . - file string optional JavaScript CSS file inject. - frameId number optional Chrome 50+The frame script CSS injected. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also injected about:blank about:srcdoc frames extension access parent document. Code cannot inserted top-level about:-frames. default false . - runAt RunAt optional soonest JavaScript CSS injected tab. Defaults \"document_idle\". RunAt soonest JavaScript CSS injected tab. Enum \"document_start\" \"document_end\" \"document_idle\" Script injected files css, DOM constructed script run. Script injected immediately DOM complete, subresources like images frames loaded. browser chooses time inject script \"document_end\" immediately window.onload event fires. exact moment injection depends complex document long taking load, optimized page load speed. Content scripts running \"document_idle\" need listen window.onload event; guaranteed run DOM completes. script definitely needs run window.onload , extension check onload already fired using document.readyState property."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/extensionTypes", "title": "chrome.extensionTypes | API | Chrome for Developers", "text": "Description chrome.extensionTypes API contains type declarations Chrome extensions. Types Enum \"author\" \"user\" DeleteInjectionDetails Details CSS remove. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies CSS removed frames current page. default, it'sfalse removed top frame. Iftrue andframeId set, code removed selected frame child frames. - code string optional CSS code remove. - cssOrigin CSSOrigin optional origin CSS remove. Defaults \"author\" . - file string optional CSS file remove. - frameId number optional frame CSS removed. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also removed about:blank about:srcdoc frames extension access parent document. default false . DocumentLifecycle document lifecycle frame. Enum \"prerender\" \"active\" \"cached\" \"pending_deletion\" ExecutionWorld JavaScript world script execute within. either isolated world unique extension, main world DOM shared page's JavaScript, user scripts world available scripts registered User Scripts API. Enum \"ISOLATED\" \"MAIN\" \"USER_SCRIPT\" FrameType type frame. Enum \"outermost_frame\" \"fenced_frame\" \"sub_frame\" ImageDetails Details format quality image. Properties - format ImageFormat optional format resulting image. Default \"jpeg\" . - quality number optional format \"jpeg\" , controls quality resulting image. value ignored PNG images. quality decreased, resulting image visual artifacts, number bytes needed store decrease. ImageFormat format image. Enum \"jpeg\" \"png\" InjectDetails Details script CSS inject. Either code file property must set, may set time. Properties - allFrames boolean optional allFrames true , implies JavaScript CSS injected frames current page. default, it'sfalse injected top frame. Iftrue andframeId set, code inserted selected frame child frames. - code string optional JavaScript CSS code inject. Warning: careful using code parameter. Incorrect use may open extension cross site scripting attacks - cssOrigin CSSOrigin optional Chrome 66+The origin CSS inject. may specified CSS, JavaScript. Defaults \"author\" . - file string optional JavaScript CSS file inject. - frameId number optional Chrome 50+The frame script CSS injected. Defaults 0 (the top-level frame). - matchAboutBlank boolean optional matchAboutBlank true, code also injected about:blank about:srcdoc frames extension access parent document. Code cannot inserted top-level about:-frames. default false . - runAt RunAt optional soonest JavaScript CSS injected tab. Defaults \"document_idle\". RunAt soonest JavaScript CSS injected tab. Enum \"document_start\" \"document_end\" \"document_idle\" Script injected files css, DOM constructed script run. Script injected immediately DOM complete, subresources like images frames loaded. browser chooses time inject script \"document_end\" immediately window.onload event fires. exact moment injection depends complex document long taking load, optimized page load speed. Content scripts running \"document_idle\" need listen window.onload event; guaranteed run DOM completes. script definitely needs run window.onload , extension check onload already fired using document.readyState property."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/history", "title": "chrome.history | API | Chrome for Developers", "text": "Description Use chrome.history API interact browser's record visited pages. add, remove, query URLs browser's history. override history page version, see Override Pages. Permissions history interact user's browser history, use history API. use history API, declare \"history\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"history\" ], ... } Concepts usage Transition types history API uses transition types describe browser navigated particular URL particular visit. example, user visits page clicking link another page, transition type \"link\". See reference content list transition types. Examples try API, install history API example chrome-extension-samples repository. Types HistoryItem object encapsulating one result history query. Properties - id string unique identifier item. - lastVisitTime number optional page last loaded, represented milliseconds since epoch. - title string optional title page last loaded. - typedCount number optional number times user navigated page typing address. - url string optional URL navigated user. - visitCount number optional number times user navigated page. Enum \"link\" \"typed\" \"auto_bookmark\" \"auto_subframe\" \"manual_subframe\" \"generated\" \"auto_toplevel\" \"form_submit\" \"reload\" \"keyword\" \"keyword_generated\" user arrived page clicking link another page. user arrived page typing URL address bar. also used explicit navigation actions. user arrived page suggestion UI, example, menu item. user arrived page subframe navigation request, ad loading frame previous page. always generate new navigation entries back forward menus. user arrived page selecting something subframe. user arrived page typing address bar selecting entry look like URL, Google Search suggestion. example, match might URL Google Search result page, might appear user \"Search Google ...\". different typed navigations user type see destination URL. They're also related keyword navigations. page specified command line start page. user arrived page filling values form submitting form. form submissions use transition type. user reloaded page, either clicking reload button pressing Enter address bar. Session restore Reopen closed tab also use transition type. URL page generated replaceable keyword default search provider. Corresponds visit generated keyword. UrlDetails Properties - url string URL operation. must format returned call history.search() . VisitItem object encapsulating one visit URL. Properties - id string unique identifier corresponding history.HistoryItem . - isLocal boolean Chrome 115+True visit originated device. False synced different device. - referringVisitId string visit ID referrer. - transition transition type visit referrer. - visitId string unique identifier visit. - visitTime number optional visit occurred, represented milliseconds since epoch. Methods addUrl() chrome.history.addUrl( details: UrlDetails, callback?: function, ) Adds URL history current time transition type \"link\". Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteAll() chrome.history.deleteAll( callback?: function, ) Deletes items history. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteRange() chrome.history.deleteRange( range: object, callback?: function, ) Removes items within specified date range history. Pages removed history unless visits fall within range. Parameters - range object - endTime number Items added history date, represented milliseconds since epoch. - startTime number Items added history date, represented milliseconds since epoch. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. deleteUrl() chrome.history.deleteUrl( details: UrlDetails, callback?: function, ) Removes occurrences given URL history. Parameters - details - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getVisits() chrome.history.getVisits( details: UrlDetails, callback?: function, ) Retrieves information visits URL. Parameters - details - callback function optional callback parameter looks like:(results: VisitItem[]) => void - results - Returns - Promise<VisitItem[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. search() chrome.history.search( query: object, callback?: function, ) Searches history last visit time page matching query. Parameters - query object - endTime number optional Limit results visited date, represented milliseconds since epoch. - maxResults number optional maximum number results retrieve. Defaults 100. - startTime number optional Limit results visited date, represented milliseconds since epoch. property specified, default 24 hours. - text string free-text query history service. Leave empty retrieve pages. - - callback function optional callback parameter looks like:(results: HistoryItem[]) => void - results - Returns - Promise<HistoryItem[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onVisited chrome.history.onVisited.addListener( callback: function, ) Fired URL visited, providing HistoryItem data URL. event fires page loaded. Parameters - callback function callback parameter looks like:(result: HistoryItem) => void - result - onVisitRemoved chrome.history.onVisitRemoved.addListener( callback: function, ) Fired one URLs removed history. visits removed URL purged history. Parameters - callback function callback parameter looks like:(removed: object) => void - removed object - allHistory boolean True history removed. true, urls empty. - urls string[] optional - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/i18n", "title": "chrome.i18n | API | Chrome for Developers", "text": "Description Use chrome.i18n infrastructure implement internationalization across whole app extension. Manifest extension /_locales directory, manifest must define \"default_locale\" . Concepts usage need put user-visible strings file named messages.json . time add new locale, add messages file directory named /_locales/_localeCode_ , localeCode code en English. Here's file hierarchy internationalized extension supports English (en ), Spanish (es ), Korean (ko ): Support multiple languages Say extension files shown following figure: internationalize extension, name user-visible string put messages file. extension's manifest, CSS files, JavaScript code use string's name get localized version. Here's extension looks like internationalized (note still English strings): notes internationalizing: - use supported locales. use unsupported locale, Google Chrome ignores it. manifest.json CSS files, refer string named messagename like this:__MSG_messagename__ extension app's JavaScript code, refer string named messagename like this: chrome.i18n.getMessage(\"messagename\") call getMessage() , supply 9 strings included message. See Examples: getMessage details.Some messages, @@bidi_dir and@@ui_locale , provided internationalization system. See Predefined messages section full list predefined message names.In messages.json , user-visible string name, \"message\" item, optional \"description\" item. name key \"extName\" \"search_string\" identifies string. \"message\" specifies value string locale. optional \"description\" provides help translators, might able see string used extension. example:{ \"search_string\": { \"message\": \"hello%20world\", \"description\": \"The string search for. Put %20 words go together.\" }, ... } information, see Formats: Locale-Specific Messages. extension internationalized, translating straightforward. copy messages.json , translate it, put copy new directory /_locales . example, support Spanish, put translated copy messages.json /_locales/es . following figure shows previous extension new Spanish translation. Predefined messages internationalization system provides predefined messages help localize. include @@ui_locale , detect current UI locale, @@bidi_... messages let detect text direction. latter messages similar names constants gadgets BIDI (bi-directional) API. special message @@extension_id used CSS JavaScript files, whether extension app localized. message work manifest files. following table describes predefined message. | Message name | Description | |---|---| @@extension_id | extension app ID; might use string construct URLs resources inside extension. Even unlocalized extensions use message. Note: can't use message manifest file. | @@ui_locale | current locale; might use string construct locale-specific URLs. | @@bidi_dir | text direction current locale, either \"ltr\" left-to-right languages English \"rtl\" right-to-left languages Arabic. | @@bidi_reversed_dir | @@bidi_dir \"ltr\", \"rtl\"; otherwise, \"ltr\". | @@bidi_start_edge | @@bidi_dir \"ltr\", \"left\"; otherwise, \"right\". | @@bidi_end_edge | @@bidi_dir \"ltr\", \"right\"; otherwise, \"left\". | Here's example using @@extension_id CSS file construct URL: body { background-image:url('chrome-extension://__MSG_@@extension_id__/background.png'); } extension ID abcdefghijklmnopqrstuvwxyzabcdef, bold line previous code snippet becomes: background-image:url('chrome-extension://abcdefghijklmnopqrstuvwxyzabcdef/background.png'); Here's example using @@bidi_* messages CSS file: body { direction: __MSG_@@bidi_dir__; } div#header { margin-bottom: 1.05em; overflow: hidden; padding-bottom: 1.5em; padding-__MSG_@@bidi_start_edge__: 0; padding-__MSG_@@bidi_end_edge__: 1.5em; position: relative; } left-to-right languages English, bold lines become: dir: ltr; padding-left: 0; padding-right: 1.5em; Locales choose many locales, including (such en ) let single translation support multiple variations language (such en_GB en_US ). localize extension locale supported Chrome Web Store. locale listed here, choose closest alternative. example, default locale extension \"de_CH\" , choose \"de\" Chrome Web Store. | Locale code | Language (region) | |---|---| | ar | Arabic | | | Amharic | | bg | Bulgarian | | bn | Bengali | | ca | Catalan | | cs | Czech | | da | Danish | | de | German | | el | Greek | | en | English | | en_AU | English (Australia) | | en_GB | English (Great Britain) | | en_US | English (USA) | | es | Spanish | | es_419 | Spanish (Latin America Caribbean) | | et | Estonian | | fa | Persian | | fi | Finnish | | fil | Filipino | | fr | French | | gu | Gujarati | | | Hebrew | | hi | Hindi | | hr | Croatian | | hu | Hungarian | | id | Indonesian | | | Italian | | ja | Japanese | | kn | Kannada | | ko | Korean | | lt | Lithuanian | | lv | Latvian | | ml | Malayalam | | mr | Marathi | | ms | Malay | | nl | Dutch | | | Norwegian | | pl | Polish | | pt_BR | Portuguese (Brazil) | | pt_PT | Portuguese (Portugal) | | ro | Romanian | | ru | Russian | | sk | Slovak | | sl | Slovenian | | sr | Serbian | | sv | Swedish | | sw | Swahili | | ta | Tamil | | te | Telugu | | th | Thai | | tr | Turkish | | uk | Ukrainian | | vi | Vietnamese | | zh_CN | Chinese (China) | | zh_TW | Chinese (Taiwan) | Search messages define every string every supported locale. long default locale's messages.json file value every string, extension app run matter sparse translation is. Here's extension system searches message: - Search messages file (if any) user's preferred locale. example, Google Chrome's locale set British English ( en_GB ), system first looks message in/_locales/en_GB/messages.json . file exists message there, system looks further. - user's preferred locale region (that is, locale underscore: _), search locale without region. example, en_GB messages file exist contain message, system looks theen messages file. file exists message there, system looks further. - Search messages file default locale. example, extension's \"default_locale\" set \"es\", neither /_locales/en_GB/messages.json nor/_locales/en/messages.json contains message, extension uses message from/_locales/es/messages.json . following figure, message named \"colores\" three locales extension supports, \"extName\" two locales. Wherever user running Google Chrome US English sees label \"Colors\", user British English sees \"Colours\". US English British English users see extension name \"Hello World\". default language Spanish, users running Google Chrome non-English language see label \"Colores\" extension name \"Hola mundo\". Set browser's locale test translations, might want set browser's locale. section tells set locale Windows, Mac OS, Linux, ChromeOS. Windows change locale using either locale-specific shortcut Google Chrome UI. shortcut approach quicker, set up, lets use several languages once. Use locale-specific shortcut create use shortcut launches Google Chrome particular locale: - Make copy Google Chrome shortcut that's already desktop. - Rename new shortcut match new locale. Change shortcut's properties Target field specifies --lang and--user-data-dir flags. target look something like this:path_to_chrome.exe --lang=locale --user-data-dir=c:\\locale_profile_dir Launch Google Chrome double-clicking shortcut. example, create shortcut launches Google Chrome Spanish (es ), might create shortcut named chrome-es following target: path_to_chrome.exe --lang=es --user-data-dir=c:\\chrome-profile-es create many shortcuts like, making straightforward test multiple languages. example: path_to_chrome.exe --lang=en --user-data-dir=c:\\chrome-profile-en path_to_chrome.exe --lang=en_GB --user-data-dir=c:\\chrome-profile-en_GB path_to_chrome.exe --lang=ko --user-data-dir=c:\\chrome-profile-ko Use UI Here's change locale using UI Google Chrome Windows: - App icon > Options - Choose Hood tab - Scroll Web Content - Click Change font language settings - Choose Languages tab - Use drop set Google Chrome language - Restart Chrome Mac OS change locale Mac, use system preferences. - Apple menu, choose System Preferences - Personal section, choose International - Choose language location - Restart Chrome Linux change locale Linux, first quit Google Chrome. Then, one line, set LANGUAGE environment variable launch Google Chrome. example: LANGUAGE=es ./chrome ChromeOS change locale ChromeOS: - system tray, choose Settings. - Languages input section, choose Language drop-down. - language listed, click Add languages add it. - added, click 3-dot actions menu item next language choose Display ChromeOS language. - Click Restart button appears next set language restart ChromeOS. Examples find examples internationalization examples/api/i18n directory. complete example, see examples/extensions/news. examples help viewing source code, see Samples. getMessage() following code gets localized message browser displays string. replaces two placeholders within message strings \"string1\" \"string2\". function getMessage() { var message = chrome.i18n.getMessage(\"click_here\", [\"string1\", \"string2\"]); document.getElementById(\"languageSpan\").innerHTML = message; } Here's supply use single string: // JavaScript code status.innerText = chrome.i18n.getMessage(\"error\", errorDetails); \"error\": { \"message\": \"Error: $details$\", \"description\": \"Generic error template. Expects error parameter passed in.\", \"placeholders\": { \"details\": { \"content\": \"$1\", \"example\": \"Failed fetch RSS feed.\" } } } information placeholders, see Locale-Specific Messages page. details calling getMessage() , see API reference. getAcceptLanguages() following code gets accept-languages browser displays string separating accept-language ','. function getAcceptLanguages() { chrome.i18n.getAcceptLanguages(function(languageList) { var languages = languageList.join(\",\"); document.getElementById(\"languageSpan\").innerHTML = languages; }) } details calling getAcceptLanguages() , see API reference. detectLanguage() following code detects 3 languages given string displays result strings separated new lines. function detectLanguage(inputText) { chrome.i18n.detectLanguage(inputText, function(result) { var outputLang = \"Detected Language: \"; var outputPercent = \"Language Percentage: \"; for(i = 0; < result.languages.length; i++) { outputLang += result.languages[i].language + \" \"; outputPercent +=result.languages[i].percentage + \" \"; } document.getElementById(\"languageSpan\").innerHTML = outputLang + \"\\n\" + outputPercent + \"\\nReliable: \" + result.isReliable; }); } details calling detectLanguage(inputText) , see API reference. Types LanguageCode ISO language code en fr . complete list languages supported method, see kLanguageInfoTable. unknown language, und returned, means [percentage] text unknown CLD Type string Methods detectLanguage() chrome.i18n.detectLanguage( text: string, callback?: function, ) Detects language provided text using CLD. Parameters - text string User input string translated. - callback function optional callback parameter looks like:(result: object) => void - result object LanguageDetectionResult object holds detected langugae reliability array DetectedLanguage - isReliable boolean CLD detected language reliability - languages object[] array detectedLanguage - language string - percentage number percentage detected language - - - Returns - Promise<object> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAcceptLanguages() chrome.i18n.getAcceptLanguages( callback?: function, ) Gets accept-languages browser. different locale used browser; get locale, use i18n.getUILanguage . Parameters - callback function optional callback parameter looks like:(languages: string[]) => void - languages string[] Array LanguageCode - Returns - Promise<LanguageCode[]> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getMessage() chrome.i18n.getMessage( messageName: string, substitutions?: any, options?: object, ) Gets localized string specified message. message missing, method returns empty string (''). format getMessage() call wrong \u2014 example, messageName string substitutions array 9 elements \u2014 method returns undefined . Parameters - messageName string name message, specified messages.json file. - substitutions optional 9 substitution strings, message requires any. - options object optional Chrome 79+- escapeLt boolean optional Escape < translation to< . applies message itself, placeholders. Developers might want use translation used HTML context. Closure Templates used Closure Compiler generate automatically. - Returns - string Message localized current locale. getUILanguage() chrome.i18n.getUILanguage() Gets browser UI language browser. different i18n.getAcceptLanguages returns preferred user languages. Returns - string browser UI language code en-US fr-FR."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest", "title": "Manifest file format | Chrome for Developers", "text": "Every extension must manifest.json file root directory lists important information structure behavior extension. page explains structure extension manifests features include. Examples following example manifests show basic manifest structure commonly used features starting point creating manifest: Minimal manifest { \"manifest_version\": 3, \"name\": \"Minimal Manifest\", \"version\": \"1.0.0\", \"description\": \"A basic example extension required keys\", \"icons\": { \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" }, } Register content script { \"manifest_version\": 3, \"name\": \"Run script automatically\", \"description\": \"Runs script www.example.com automatically user installs extension\", \"version\": \"1.0\", \"icons\": { \"16\": \"images/icon-16.png\", \"32\": \"images/icon-32.png\", \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" }, \"content_scripts\": [ { \"js\": [ \"content-script.js\" ], \"matches\": [ \"http://*.example.com//\" ] } ] } Inject content script { \"manifest_version\": 3, \"name\": \"Click run\", \"description\": \"Runs script user clicks action toolbar icon.\", \"version\": \"1.0\", \"icons\": { \"16\": \"images/icon-16.png\", \"32\": \"images/icon-32.png\", \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" }, \"background\": { \"service_worker\": \"service-worker.js\" }, \"action\": { \"default_icon\": { \"16\": \"images/icon-16.png\", \"32\": \"images/icon-32.png\", \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" } }, \"permissions\": [\"scripting\", \"activeTab\"] } Popup permissions { \"manifest_version\": 3, \"name\": \"Popup extension requests permissions\", \"description\": \"Extension includes popup requests host permissions storage permissions .\", \"version\": \"1.0\", \"icons\": { \"16\": \"images/icon-16.png\", \"32\": \"images/icon-32.png\", \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" }, \"action\": { \"default_popup\": \"popup.html\" }, \"host_permissions\": [ \"https://*.example.com/\" ], \"permissions\": [ \"storage\" ] } Side panel { \"manifest_version\": 3, \"name\": \"Side panel extension\", \"version\": \"1.0\", \"description\": \"Extension default side panel.\", \"icons\": { \"16\": \"images/icon-16.png\", \"48\": \"images/icon-48.png\", \"128\": \"images/icon-128.png\" }, \"side_panel\": { \"default_path\": \"sidepanel.html\" }, \"permissions\": [\"sidePanel\"] } Manifest keys following list supported manifest keys. Keys required Extensions platform \"manifest_version\" - integer specifying version manifest file format extension uses. supported value 3 . \"name\" - string identifies extension Chrome Web Store, install dialog, user's Chrome Extensions page ( chrome://extensions ). maximum length 75 characters. information using locale-specific names, see Internationalization. \"version\" - string identifies extension's version number. information version number formatting, see Version. Keys required Chrome Web Store \"description\" - string describes extension Chrome Web Store user's extension management page. maximum length 132 characters. information localizing descriptions, see Internationalization. \"icons\" - One icons represent extension. information best practices, see Icons. Optional keys \"action\" - Defines appearance behavior extension's icon Google Toolbar. information, see chrome.action . \"author\" - Specifies email address account used create extension. \"background\" - Specifies JavaScript file containing extension's service worker, acts event handler. information, see extension service workers. \"chrome_settings_overrides\" - Defines overrides selected Chrome settings. information, see Overriding Chrome settings. \"chrome_url_overrides\" - Defines overrides default Chrome pages. information, see Override Chrome pages. \"commands\" - Defines keyboard shortcuts within extension. information, see chrome.commands. \"content_scripts\" - Specifies JavaScript CSS files used user opens certain web pages. information, see Content scripts. \"content_security_policy\" - Defines restrictions scripts, styles, resources extension use. information, see Content security policy. \"cross_origin_embedder_policy\" - Specifies value Cross-Origin-Embedder-Policy HTTP header, configures embedding cross-origin resources extension page. \"cross_origin_opener_policy\" - Specifies value Cross-Origin-Opener-Policy HTTP header, lets ensure top-level extension page share browsing context group cross-origin documents. \"declarative_net_request\" - Defines static rules declarativeNetRequest API, allows blocking modifying network requests. \"default_locale\" - string defines default language extension supports multiple locales. Examples include \"en\" \"pt_BR\". key required localized extensions, must used extensions localized. information, see Internationalization. \"devtools_page\" - Defines pages use DevTools APIs. \"export\" - Allows resources exported extension. information, see Export. \"externally_connectable\" - Specifies pages extensions connect extensions. information, see \"externally_connectable\" . \"homepage_url\" - string specifying URL extension's homepage. undefined, homepage defaults extension's Chrome Web Store page. field particularly useful host extension site. \"host_permissions\" - Lists web pages extension allowed interact with, defined using URL match patterns. User permission sites requested install time. information, see Host permissions. \"import\" - Allows resources imported extension. information, see Import. \"incognito\" - Defines extension behaves incognito mode. Supported values \"spanning\" ,\"split\" , and\"not_allowed\" . information, see Incognito. \"key\" - Specifies extension's ID various development use cases. information, see Key. \"minimum_chrome_version\" - Defines oldest Chrome version install extension. value must substring existing Chrome browser version string, \"107\" or\"107.0.5304.87\" . Users versions Chrome older minimum version see \"Not compatible\" warning Chrome Web Store, unable install extension. add existing extension, users whose Chrome version older receive automatic updates extension. includes business users ephemeral mode. \"oauth2\" - Allows use OAuth 2.0 security ID. value key must object \"client_id\" and\"scopes\" properties. details, see OAuth 2.0 tutorial. \"omnibox\" - Allows extension register keyword Chrome's address bar. information, see Omnibox. \"optional_host_permissions\" - Declares optional host permissions extension. \"optional_permissions\" - Declares optional permissions extension. \"options_page\" - Specifies path options.html file extension use options page. information, see Give users options. \"options_ui\" - Specifies path HTML file lets user change extension options Chrome Extensions page. information, see Embedded options. \"permissions\" - Enables use particular extension APIs. See Permissions general explanation. Reference pages individual APIs list permissions require. \"requirements\" - Lists technologies required use extension. list supported requirements, see Requirements. \"sandbox\" - Defines set extension pages access extension APIs direct access non-sandboxed pages. information, see Sandbox. \"short_name\" - string containing shortened version extension's name used character space limited. maximum length 12 characters. undefined, truncated version \"name\" key displays instead. \"side_panel\" - Identifies HTML file display sidePanel. \"storage\" - Declares JSON schema managed storage area. information, see Manifest storage areas. \"tts_engine\" - Registers extension text speech engine. information, see ttsEngine API. \"update_url\" - string containing URL extension's updates page. Use key hosting extension outside Chrome Web Store. \"version_name\" - string describing extension's version. Examples include \"1.0 beta\" and\"build rc2\" . unspecified, \"version\" value displays extension management page instead. \"web_accessible_resources\" - Defines files within extension accessed web pages extensions. information, see Web Accessible Resources. Optional ChromeOS keys \"file_browser_handlers\" - Provides access fileBrowserHandler API, lets extensions access ChromeOS file browser. \"file_handlers\" - Specifies file types ChromeOS extensions handle. information, see file_handlers . \"file_system_provider_capabilities\" - Allows access fileSystemProvider API, lets extensions create file systems ChromeOS use. \"input_components\" - Allows use Input Method Editor API. information, see input_components ."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/active-trials", "title": "404 | Page Not Found | Chrome for Developers", "text": "developer.chrome.com uses cookies Google deliver enhance quality services analyze traffic. Learn more."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/author", "title": "Manifest - Author | Chrome Extensions | Chrome for Developers", "text": "optional manifest key takes object \"email\" key (see example below). email address extension author. publishing CRX file Chrome Web Store, string MUST match email address account used publish extension. { // ... \"author\": { \"email\": \"user@example.com\" }, // ... }"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/background", "title": "Manifest - background | Chrome Extensions | Chrome for Developers", "text": "Manifest - background Stay organized collections Save categorize content based preferences. optional manifest key used specify javascript file extension service worker. service worker background script acts extension's main event handler. information, visit comprehensive introduction service workers. { ... \"background\": { \"service_worker\": \"service-worker.js\", \"type\": \"module\" }, ... } Except otherwise noted, content page licensed Creative Commons Attribution 4.0 License, code samples licensed Apache 2.0 License. details, see Google Developers Site Policies. Java registered trademark Oracle and/or affiliates. Last updated 2023-05-24 UTC. [[[\"Easy understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing information need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2023-05-24 UTC.\"],[],[]]"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/chrome-settings-override", "title": "Overriding Chrome settings | Chrome Extensions | Chrome for Developers", "text": "Settings overrides way extensions override selected Chrome settings. API available Windows Mac current versions Chrome. Homepage, search provider, startup pages example homepage, search provider, startup pages modified extension manifest. domain used settings API must verified (via Google Search Console) developer account publishing extension. Note verify ownership domain (for example, https://example.com) use subdomain page (for example, https://app.example.com https://example.com/page.html) within extension. Using settings override permission also requesting additional capabilities permissions inconsistent single purpose policy. Chrome detects item potentially violating single purpose policy, confirmation dialog shown user. Extensions limit modifying single setting without seeking additional capabilities permissions get confirmation dialog. applies Chrome 107 later. { \"name\": \"My extension\", ... \"chrome_settings_overrides\": { \"homepage\": \"https://www.homepage.com\", \"search_provider\": { \"name\": \"name.__MSG_url_domain__\", \"keyword\": \"keyword.__MSG_url_domain__\", \"search_url\": \"https://www.foo.__MSG_url_domain__/s?q={searchTerms}\", \"favicon_url\": \"https://www.foo.__MSG_url_domain__/favicon.ico\", \"suggest_url\": \"https://www.foo.__MSG_url_domain__/suggest?q={searchTerms}\", \"instant_url\": \"https://www.foo.__MSG_url_domain__/instant?q={searchTerms}\", \"image_url\": \"https://www.foo.__MSG_url_domain__/image?q={searchTerms}\", \"search_url_post_params\": \"search_lang=__MSG_url_domain__\", \"suggest_url_post_params\": \"suggest_lang=__MSG_url_domain__\", \"instant_url_post_params\": \"instant_lang=__MSG_url_domain__\", \"image_url_post_params\": \"image_lang=__MSG_url_domain__\", \"alternate_urls\": [ \"https://www.moo.__MSG_url_domain__/s?q={searchTerms}\", \"https://www.noo.__MSG_url_domain__/s?q={searchTerms}\" ], \"encoding\": \"UTF-8\", \"is_default\": true }, \"startup_pages\": [\"https://www.startup.com\"] }, \"default_locale\": \"de\", ... } Customizing values Values manifest customized following ways: - values search_provider ,homepage , andstartup_pages properties localized using thechrome.i18n API. external extensions, search_provider ,homepage andstartup_pages URL values parametrized using registry key. Create new registry entry next the\"update_url\" key (see instructions here). key name is\"install_parameter\" , value arbitrary string:{ \"update_url\": \"https://clients2.google.com/service/update2/crx\", \"install_parameter\": \"Value\" } occurrences substring \"__PARAM__\" manifest URLs substituted the\"install_parameter\" value. If\"install_parameter\" absent, occurrences of\"__PARAM__\" removed. Note that\"__PARAM__\" cannot part hostname. needs occur first '/' URL. Reference extension override one following properties manifest: alternate_urls (array strings, optional)- list URL patterns used addition search_url. encoding (string, optional)- encoding used search terms. required set prepopulated_id . favicon_url (string, optional)- icon URL search engine. required set prepopulated_id . homepage (string, optional)- new value homepage. image_url (string, optional)- URL search engine uses image search. used, engine support image search. image_url_post_params (string, optional)- post parameters image_url . is_default (boolean, required)- Specifies whether search provider default. keyword (string, optional)- omnibox keyword search engine. required set prepopulated_id . name (string, optional)- Name search engine displayed user. required set prepopulated_id . prepopulated_id (integer, optional)- ID Chrome's built-in search engine. search_provider (object, optional)- search engine. search_url (string, required)- search URL search engine uses. search_url_post_params (string, optional)- post parameters search_url . startup_pages (array strings, optional)- array length one containing URL used startup page. suggest_url (string, optional)- URL search engine uses suggestions. used, engine support suggestions. suggest_url_post_params (string, optional)- post parameters suggest_url ."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/content-scripts", "title": "Manifest - content scripts | Chrome Extensions | Chrome for Developers", "text": "\"content_scripts\" key specifies statically loaded JavaScript CSS file used every time page opened matches certain URL pattern. Extensions also inject content scripts programmatically, see Injecting Scripts details. Manifest supported keys \"content_scripts\" . \"matches\" key either \"js\" \"css\" required. manifest.json { \"name\": \"My extension\", ... \"content_scripts\": [ { \"matches\": [\"https://*.example.com/*\"], \"css\": [\"my-styles.css\"], \"js\": [\"content-script.js\"], \"exclude_matches\": [\"*://*/*foo*\"], \"include_globs\": [\"*example.com/???s/*\"], \"exclude_globs\": [\"*bar*\"], \"all_frames\": false, \"match_origin_as_fallback\": false, \"match_about_blank\": false, \"run_at\": \"document_idle\", \"world\": \"ISOLATED\", } ], ... } Files file must contain relative path resource extension's root directory. Leading slashes (/ ) automatically trimmed. \"run_at\" key specifies file injected. \"css\" - Array- Optional. array CSS file paths, injected order array, DOM construction page rendering occurs. \"js\" - Array,- Optional. array JavaScript file paths, injected order appear array, css files injected. string array must relative path resource extension's root directory. Leading slashes ('/') automatically trimmed. Match URLs \"matches\" property required. use \"exclude_matches\" , \"include_globs\" , \"exclude_globs\" customize URLs inject code into. \"matches\" key trigger warning. \"matches\" - Array- Required. Specifies URL patterns inject content scripts into. See Match Patterns syntax. \"exclude_matches\" - Array- Optional. Excludes URL patterns inject content scripts into. See Match Patterns syntax. \"include_globs\" - Array- Optional. Applied matches include URLs also match glob. Intended emulate @include Greasemonkey keyword. \"exclude_globs\" - Array- Optional. Applied matches exclude URLs match glob. Intended emulate @exclude Greasemonkey keyword. Glob URLs contain \"wildcards\" * question marks. wildcard * matches string length, including empty string, question mark ? matches single character. content script injected page if: - URL matches \"matches\" and\"include_globs\" patterns. - URL match \"exclude_matches\" or\"exclude_globs\" patterns. Globs URL matching examples \"include_globs\" manifest.json { ... \"content_scripts\": [ { \"matches\": [\"https://*.example.com/*\"], \"include_globs\": [\"https://???.example.com/foo/*\"], \"js\": [\"content-script.js\"] } ], ... } https://www.example.com/foo/bar https://the.example.com/foo/ https://my.example.com/foo/bar https://example.com/foo/* https://www.example.com/foo manifest.json { ... \"content_scripts\": [ { \"matches\": [\"https://*.example.com/*\"], \"include_globs\": [\"*example.com/???s/*\"], \"js\": [\"content-script.js\"] } ], ... } https://www.example.com/arts/index.html https://www.example.com/jobs/index.html https://www.example.com/sports/index.html https://www.example.com/music/index.html \"exclude_globs\" manifest.json { ... \"content_scripts\": [ { \"matches\": [\"https://*.example.com/*\"], \"exclude_globs\": [\"*science*\"], \"js\": [\"content-script.js\"] } ], ... } https://history.example.com https://.example.com/music https://science.example.com https://www.example.com/science Advanced customization example manifest.json { ... \"content_scripts\": [ { \"matches\": [\"https://*.example.com/*\"], \"exclude_matches\": [\"*://*/*business*\"], \"include_globs\": [\"*example.com/???s/*\"], \"exclude_globs\": [\"*science*\"], \"js\": [\"content-script.js\"] } ], ... } https://www.example.com/arts/index.html https://.example.com/jobs/index.html https://science.example.com https://www.example.com/jobs/business https://www.example.com/science Frames \"all_frames\" key specifies content script injected frames matching specified URL requirements. set false inject topmost frame. used along \"match_about_blank\" inject about:blank frame. inject frames like data: , blob: , filesystem: , set \"match_origin_as_fallback\" true . details, see Inject related frames \"all_frames\" Boolean- Optional. Defaults false , meaning top frame matched. set true, inject frames, even frame topmost frame tab. frame checked independently URL requirements, inject child frames URL requirements met. \"match_about_blank\" - Boolean- Optional. Defaults false . Whether script inject anabout:blank frame parent URL matches one patterns declared in\"matches\" . \"match_origin_as_fallback\" - Boolean- Optional. Defaults false . Whether script inject frames created matching origin, whose URL origin may directly match pattern. include frames different schemes, asabout: ,data: ,blob: , andfilesystem: . Run time execution environment default, content scripts injected document resources finished loading, live private isolated execution environment accessible page extensions. change defaults following keys: \"run_at\" -document_start |document_end |document_idle - Optional. Specifies script injected page. corresponds loading states Document.readyState: \"document_start\" : DOM still loading.\"document_end\" : page's resources still loading\"document_idle\" : DOM resources finished loading. default. \"world\" -ISOLATED |MAIN - Optional. JavaScript world script execute within. Defaults \"ISOLATED\" , execution environment unique content script. Choosing the\"MAIN\" world means script share execution environment host page's JavaScript. See Work isolated worlds learn more. Example See Run every page tutorial build extension injects content script manifest."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/content-security-policy", "title": "Manifest - Content Security Policy | Chrome Extensions | Chrome for Developers", "text": "optional manifest key containing web platform content security policy specifies restrictions scripts, styles, resources extension use. Within manifest key, separate optional policies defined extension pages sandboxed extension pages. \"extension pages\" policy applies page worker contexts extension. would include extension popup, background worker, tabs HTML pages iframes opened extension. sandbox policy applies pages specified sandbox page manifest. Default Policy content security policy defined user manifest, default properties used extension pages sandboxed extension pages. defaults equivalent specifying following policies manifest: { // ... \"content_security_policy\": { \"extension_pages\": \"script-src 'self'; object-src 'self';\", \"sandbox\": \"sandbox allow-scripts allow-forms allow-popups allow-modals; script-src 'self' 'unsafe-inline' 'unsafe-eval'; child-src 'self';\" } // ... } case, extension load local scripts objects packaged resources. WebAssembly disabled, extension run inline Javascript able evaluate strings executable code. sandbox page added, relaxed permissions evaluating scripts outside extension. Minimum customized Content Security Policies Developers may add remove rules extension, use minimum required content security policy, fit needs project. Extension Pages Policy Chrome enforces minimum content security policy extension pages. equivalent specifying following policy manifest: { // ... \"content_security_policy\": { \"extension_pages\": \"script-src 'self' 'wasm-unsafe-eval'; object-src 'self';\" } // ... } extension_pages policy cannot relaxed beyond minimum value. words, cannot add script sources directives, adding 'unsafe-eval' script-src . add disallowed source extension's policy, Chrome throw error like install time: 'content_security_policy.extension_pages': Insecure CSP value \"'unsafe-eval'\" directive 'script-src'. Sandbox Pages Policy default policy sandboxed pages much lenient extension pages, sandbox page access extension APIs, direct access non-sandboxed pages. sandbox content security policy customized needed."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/content_security_policy", "title": "404 | Page Not Found | Chrome for Developers", "text": "Get inspired Blog Docs Build Chrome Learn Chrome works, participate origin trials, build Chrome everywhere. Web Platform Capabilities ChromeDriver Extensions Chrome Web Store Chromium Aurora Web Android Origin trials Release notes Productivity Create best experience users web's best tools. DevTools Lighthouse Chrome UX Report Accessibility Get things done quicker neater, ready-made libraries. Workbox Puppeteer Experience Design beautiful performant web Chrome. AI Performance CSS UI Identity Payments Privacy security Resources Chrome team. documentation Baseline web.dev PageSpeed Insights audit New Chrome / Sign Get inspired Blog Docs New Chrome Build Chrome Web Platform Capabilities ChromeDriver Extensions Chrome Web Store Chromium Aurora Web Android Origin trials Release notes Productivity DevTools Lighthouse Chrome UX Report Accessibility Workbox Puppeteer Experience AI Performance CSS UI Identity Payments Privacy security Resources documentation Baseline web.dev PageSpeed Insights audit 404 Sorry, find page. / Contribute File bug See open issues Related content Chromium updates Case studies Archive Podcasts & shows Follow @ChromiumDev X YouTube Chrome Developers LinkedIn RSS"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/cross-origin-embedder-policy", "title": "Cross-origin embedder policy | Chrome Extensions | Chrome for Developers", "text": "cross_origin_embedder_policy manifest key lets extension specify value Cross-Origin-Embedder-Policy (COEP) response header requests extension's origin. includes extension's service worker, popup, options page, tabs open extension resource, etc. Together cross_origin_opener_policy, key allows extension opt cross-origin isolation. Manifest declaration cross_origin_embedder_policy manifest key contains object one property named value takes string. Chrome uses string value Cross-Origin-Embedder-Policy header serving resources extension's origin. example: { ... \"cross_origin_embedder_policy\": { \"value\": \"require-corp\" }, ... } See Cross-origin isolation overview information feature."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/cross-origin-opener-policy", "title": "Cross-origin opener policy | Chrome Extensions | Chrome for Developers", "text": "cross_origin_opener_policy manifest key lets extensions specify value Cross-Origin-Opener-Policy (COOP) response header requests extension's origin. includes extension's service worker, popup, options page, tabs open extension resource, etc. Together cross_origin_embedder_policy, key allows extensions opt cross-origin isolation. Manifest declaration cross_origin_opener_policy manifest key contains object one property named value takes string. Chrome uses string value Cross-Origin-Opener-Policy header serving resources extension's origin. example: { ... \"cross_origin_opener_policy\": { \"value\": \"same-origin\" }, ... } See Cross-origin isolation overview information feature."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/default-locale", "title": "Manifest - Default Locale | Chrome Extensions | Chrome for Developers", "text": "Defines default language extension supports multiple locales. name subdirectory _locales contains default language extension. example, following code indicates English default language: \"default_locale\": \"en\" field required localized extensions (those _locales directory), must absent extensions _locales directory. details, see Internationalization."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/description", "title": "Manifest - Description | Chrome Extensions | Chrome for Developers", "text": "Manifest - Description Stay organized collections Save categorize content based preferences. plain text string (no HTML formatting; 132 characters) describes extension. example: \"description\": \"A description extension\" description suitable browser's Extensions page (chrome://extensions) Chrome Web Store. specify locale-specific strings field; see Internationalization details. Except otherwise noted, content page licensed Creative Commons Attribution 4.0 License, code samples licensed Apache 2.0 License. details, see Google Developers Site Policies. Java registered trademark Oracle and/or affiliates. Last updated 2013-05-12 UTC. [[[\"Easy understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing information need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2013-05-12 UTC.\"],[],[]]"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/event-rules", "title": "event_rules | Chrome Extensions | Chrome for Developers", "text": "event_rules manifest property provides mechanism add rules intercept, block, modify web requests in-flight using declarativeWebRequest take actions depending content page, without requiring permission read page's content using declarativeContent. Translating rules javascript manifest following defines rule display page action current page video css tag javascript: chrome.declarativeContent.onPageChanged.addRules([{ actions: [ new chrome.declarativeContent.ShowPageAction() ], conditions: [ new chrome.declarativeContent.PageStateMatcher( {css: [\"video\"]} ) ] }]); definition manifest: { \"name\": \"Sample extension\", \"event_rules\": [{ \"event\": \"declarativeContent.onPageChanged\", \"actions\": [{ \"type\": \"declarativeContent.ShowPageAction\" }], \"conditions\": [{ \"type\": \"declarativeContent.PageStateMatcher\", \"css\": [\"video\"] }] }], ... }"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/externally-connectable", "title": "externally_connectable | Chrome Extensions | Chrome for Developers", "text": "\"externally_connectable\" manifest property declares extensions web pages connect extension using runtime.connect() runtime.sendMessage() . tutorial message passing, see cross-extension messaging sending messages web pages. Connect without externally_connectable externally_connectable key declared extension's manifest, extensions connect, web pages connect. consequence, updating manifest use externally_connectable , \"ids\": [\"*\"] specified, extensions lose ability connect extension. may unintended consequence, keep mind. Manifest { \"name\": \"My externally connectable extension\", \"externally_connectable\": { \"ids\": [ \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", ... ], // field specified, web pages connect. \"matches\": [ \"https://*.google.com/*\", \"*://*.chromium.org/*\", ... ], \"accepts_tls_channel_id\": false }, ... } Reference \"externally_connectable\" manifest key includes following optional properties: \"ids\" - IDs extensions allowed connect. left empty unspecified, extensions apps connect. wildcard \"*\" allow extensions apps connect. \"matches\" - URL patterns web pages allowed connect. left empty unspecified, web pages connect. Patterns cannot include wildcard domains subdomains (effective) top-level domains, example: | \u2705 Valid URLs | \u274c Invalid URLs | |---|---| *://example.com/ | *://example.com/one/ | http://*.example.org/* | <all_urls> | https://example.com/* | http://*/* | \"accepts_tls_channel_id\" - Enables extension use TLS channel ID web page connecting it. web page must also opt send TLS channel ID extension setting includeTlsChannelId totrue runtime.connect's connectInfo runtime.sendMessage's options. set tofalse , runtime.MessageSender.tlsChannelId never set circumstance. affect content scripts."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/file-handlers", "title": "file_handlers | Chrome Extensions | Chrome for Developers", "text": "\"file_handlers\" manifest key specifies file types handled ChromeOS extension. process file, use web platform's Launch Handler API. extension specific information, see File Handling. \"file_handlers\": [ { \"action\": \"/open_text.html\", \"name\": \"Plain text\", \"accept\": { \"text/plain\": [\".txt\"] } \"launch_type\": \"single-client\" } ] \"file_handlers\" (dictionary, optional)- Specifies file types extension open. \"action\" (string, required)- Specifies HTML file show file opened. file must within extension. Processing file, whether displayed used way, done JavaScript using appropriate web platform APIs. code must separate JavaScript file included via <script> tag. \"name\" (string, required)- user friendly description action. \"accept\" (dictionary, required)- file types processed page specified \"action\" . items dictionary key/value pair key MIME type value array file extensions. known MIME types allowed key. Custom file types allowed key custom type must known MIME type, mapping MIME type custom file type must supported underlying operating system. \"launch_type\" (object, optional)- Specifies whether multiple files opened single client multiple clients. Valid values \"single-client\" and\"multiple-clients\" . default value is\"single-client\" ."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/homepage-url", "title": "Manifest - Homepage Url | Chrome Extensions | Chrome for Developers", "text": "Manifest - Homepage Url Stay organized collections Save categorize content based preferences. optional manifest key containing string valid homepage URL. Developers may choose set extension's homepage personal company's website. parameter left undefined, default homepage extension's Chrome Web Store page listed extensions management page (chrome://extensions). field particularly useful host extension site. { // ... \"homepage_url\": \"https://example.com,\", // ... } ``` Except otherwise noted, content page licensed Creative Commons Attribution 4.0 License, code samples licensed Apache 2.0 License. details, see Google Developers Site Policies. Java registered trademark Oracle and/or affiliates. Last updated 2013-05-12 UTC. [[[\"Easy understand\",\"easyToUnderstand\",\"thumb-up\"],[\"Solved problem\",\"solvedMyProblem\",\"thumb-up\"],[\"Other\",\"otherUp\",\"thumb-up\"]],[[\"Missing information need\",\"missingTheInformationINeed\",\"thumb-down\"],[\"Too complicated / many steps\",\"tooComplicatedTooManySteps\",\"thumb-down\"],[\"Out date\",\"outOfDate\",\"thumb-down\"],[\"Samples / code issue\",\"samplesCodeIssue\",\"thumb-down\"],[\"Other\",\"otherDown\",\"thumb-down\"]],[\"Last updated 2013-05-12 UTC.\"],[],[]]"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/icons", "title": "Manifest - Icons | Chrome Extensions | Chrome for Developers", "text": "One icons represent extension theme. always provide 128x128 icon; used installation Chrome Web Store. Extensions also provide 48x48 icon, used extensions management page (chrome://extensions). also specify 16x16 icon used favicon extension's pages. Icons generally PNG format, PNG best support transparency. can, however, raster format supported Blink, including BMP, GIF, ICO, JPEG. Here's example declare icons manifest: \"icons\": { \"16\": \"icon16.png\", \"32\": \"icon32.png\", \"48\": \"icon48.png\", \"128\": \"icon128.png\" }, See Extension icons details Chrome Web Store requirements best practices."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/incognito", "title": "Manifest - Incognito | Chrome Extensions | Chrome for Developers", "text": "Use \"incognito\" manifest key either \"spanning\" \"split\" specify extension behave allowed run incognito mode. Using \"not_allowed\" prevent extension enabled incognito mode. Spanning mode default mode \"spanning\" , means extension run single shared process. events messages incognito tab sent shared process, incognito flag indicating came from. incognito tabs cannot use shared process, extension using \"spanning\" incognito mode able load pages extension package main frame incognito tab. Split mode \"split\" mode means pages incognito window run incognito process. extension contains background page, also run incognito process. incognito process runs along side regular process, separate memory-only cookie store. process sees events messages context (for example, incognito process see incognito tab updates). processes unable communicate other. allowed extension cannot enabled incognito mode. Available Chrome 47. choose rule thumb, extension needs load tab incognito browser, use split incognito behavior. extension needs logged remote server use spanning incognito behavior. chrome.storage.sync chrome.storage.local always shared regular incognito processes. recommended use persisting extension's settings."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/input-components", "title": "Manifest - input_components | Chrome Extensions | Chrome for Developers", "text": "optional Manifest key enabling use input.ime API (Input Method Editor) use ChromeOS. allows extension handle keystrokes, set composition, open assistive windows. Developers must also declare \"input\" permission extension's \"permissions\" array. key accepts array objects: name , id , language , layouts , input_view , options_page (Refer table below). | Property | Type | Description | |---|---|---| name | string | Required name input component object. | id | string | Optional component object id. | language | string (or array strings) | Optional specified language list applicable languages. Examples: \"en\", [\"en\", \"pt\"] | layouts | string (or array strings) | Optional list input methods. Note ChromeOS supports one layout per input method. multiple layouts specified, selection order undefined. Extensions therefore strongly encouraged specify one layout per input method. keyboard layouts, xkb: prefix indicates keyboard layout extension. | | Example: [\"us::eng\"] | || input_view | string | Optional string specifying extension resource. | options_page | string | Optional string specifying extension resource. provided, default extension's options page used. | { // ... \"input_components\": [{ \"name\": \"ToUpperIME\", \"id\": \"ToUpperIME\", \"language\": \"en\", \"layouts\": [\"us::eng\"] }] // ... }"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/key", "title": "Manifest - key | Chrome Extensions | Chrome for Developers", "text": "value maintains unique ID extension, theme loaded development. following common use cases: - configure server accept requests Chrome Extension origin. - extensions websites send messages extension. - website access web_accessible_resources extension. Keep consistent extension ID Preserving single ID essential development. keep consistent ID, follow steps: Upload extension developer dashboard Package extension directory .zip file upload Chrome Developer Dashboard without publishing it: - Developer Dashboard, click Add new item. - Click Browse files, select extension's zip file, upload it. - Go Package tab click View public key. popup open, follow steps: - Copy code -----BEGIN PUBLIC KEY----- and-----END PUBLIC KEY----- . - Remove newlines order make single line text. Add code manifest.json \"key\" field. way extension use ID. { // manifest.json \"manifest_version\": 3, ... \"key\": \"ThisKeyIsGoingToBeVeryLong/go8GGC2u3UD9WI3MkmBgyiDPP2OreImEQhPvwpliioUMJmERZK3zPAx72z8MDvGp7Fx7ZlzuZpL4yyp4zXBI+MUhFGoqEh32oYnm4qkS4JpjWva5Ktn4YpAWxd4pSCVs8I4MZms20+yx5OlnlmWQEwQiiIwPPwG1e1jRw0Ak5duPpE3uysVGZXkGhC5FyOFM+oVXwc1kMqrrKnQiMJ3lgh59LjkX4z1cDNX3MomyUMJ+I+DaWC2VdHggB74BNANSd+zkPQeNKg3o7FetlDJya1bk8ofdNBARxHFMBtMXu/ONfCT3Q2kCY9gZDRktmNRiHG/1cXhkIcN1RWrbsCkwIDAQAB\", } Compare IDs Open Extensions Management page chrome://extensions , ensure Developer mode enabled, upload unpackaged extension directory. Compare extension ID extensions management page Item ID Developer Dashboard. match."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/manifest-version", "title": "Manifest Version | Chrome Extensions | Chrome for Developers", "text": "integer specifying version manifest file format package requires. key required. example: \"manifest_version\": 3 Supported values key are: 3 : Use Manifest V3 format associated feature set. current version Manifest V3. Chrome Web Store longer accepts manifest V2 extensions (see Manifest V2 support timeline details). manifest versions future (V4 beyond), scheduled yet."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/minimum-chrome-version", "title": "Manifest - Minimum Chrome Version | Chrome Extensions | Chrome for Developers", "text": "optional manifest key containing string defines versions Chrome able install extension. value set string must substring existing Chrome browser version string. Use full version number specify specific update Chrome, use first number string specify particular major version. { // ... \"minimum_chrome_version\": \"126\", // ... } Enforcement New Installs versions Chrome older minimum version, Chrome Web Store show \"Not compatible\" message place install button. Users versions able install extension. Existing Installs Existing users extension receive updates minimum_chrome_version higher current browser version. happens silently exercise caution consider ways letting existing users know longer receiving updates."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/name", "title": "Manifest - name | Chrome Extensions | Chrome for Developers", "text": "\"name\" key (required) short, plain text string (maximum 75 characters) identifies extension. example: { \"name\": \"My extension name\" } specify locale-specific string; see Internationalization details. displayed following locations: - Install dialog - Extensions page (chrome://extensions) - Chrome Web Store See also Short Name."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/oauth2", "title": "Manifest - oauth2 | Chrome Extensions | Chrome for Developers", "text": "optional manifest key enabling use OAuth 2.0 security ID extension. key takes object two required sub-properties: \"client_id\" \"scopes\" . developing extension uses \"oauth2\" key, consider also setting extension's \"key\" keep consistent extension ID. detailed implementation instructions, visit full OAuth 2.0 tutorial. { // ... \"oauth2\": { \"client_id\": \"YOUR_EXTENSION_OAUTH_CLIENT_ID.apps.googleusercontent.com\", \"scopes\": [\"https://www.googleapis.com/auth/contacts.readonly\"] }, \"key\": \"EXTENSION_PUBLIC_KEY\", // ... } ```"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/requirements", "title": "Manifest - Requirements | Chrome Extensions | Chrome for Developers", "text": "Technologies required extension. Hosting sites Chrome Web Store may use list dissuade users installing extensions work computer. Additional requirements checks may added future. \"3D\" requirement denotes GPU hardware acceleration takes either \"webgl\" \"css3d\" valid values. \"webgl\" requirement refers WebGL API. information Chrome 3D graphics support, see help article WebGL 3D graphics. list 3D-related features extension requires, demonstrated following example: \"requirements\": { \"3D\": { \"features\": [\"webgl\"] } } NPAPI Plugin support extensions discontinued Chrome version 45. part this, \"plugins\" requirement deprecated, longer used manifest file."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/sandbox", "title": "Manifest - Sandbox | Chrome Extensions | Chrome for Developers", "text": "Defines collection extension pages served sandboxed unique origin. Content Security Policy used extension's sandboxed pages specified \"content_security_policy\" key. sandbox two implications: - sandboxed page access extension APIs, direct access non-sandboxed pages (it may communicate using postMessage() ). - sandboxed page subject Content Security Policy (CSP) used rest extension (it separate CSP value). means that, example, use inline script eval() . example, here's specify two extension pages served sandbox custom CSP: { ... \"content_security_policy\": { \"sandbox\": \"sandbox allow-scripts; script-src 'self' https://example.com\" }, \"sandbox\": { \"pages\": [ \"page1.html\", \"directory/page2.html\" ] }, ... } specified, default \"content_security_policy\" value sandbox allow-scripts allow-forms allow-popups allow-modals; script-src 'self' 'unsafe-inline' 'unsafe-eval'; child-src 'self'; . specify CSP value restrict sandbox even further, MUST include \"sandbox\" directive MUST allow-same-origin token (see HTML5 specification possible sandbox tokens). Note need list pages expect loaded windows frames. Resources used sandboxed pages (e.g. stylesheets JavaScript source files) need appear pages list use sandbox frame embeds them. \"Using eval() Chrome Extensions\" goes detail implementing sandboxing workflow enables use libraries would otherwise issues executing extension's default Content Security Policy."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/shared-modules", "title": "Shared modules | Chrome Extensions | Chrome for Developers", "text": "Shared Modules permissionless collections resources shared extensions. Common uses Shared Modules are: - API. distribute Shared Module provide HTML, JS, resources provide API updated independently extensions depend it. - download optimization. Shared Module contains common resources used many extensions. downloaded once, first time dependent extension installed. Manifest Shared Modules used two manifest fields: \"export\" \"import\" . Export export field indicates extension Shared Module exports resources: { \"version\": \"1.0\", \"name\": \"My Shared Module\", \"export\": { // Optional list extension IDs explicitly allowed // import Shared Module's resources. allowlist // given, extensions allowed import it. \"allowlist\": [ \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\" ] } // Note: permissions allowed Shared Modules } Import import field used extensions apps declare depend resources particular Shared Modules: { \"version\": \"1.0\", \"name\": \"My Importing Extension\", ... \"import\": [ {\"id\": \"cccccccccccccccccccccccccccccccc\"}, {\"id\": \"dddddddddddddddddddddddddddddddd\" \"minimum_version\": \"0.5\" // optional }, ] } Accessing resources Shared Module resources accessed reserved path _modules/SHARED_MODULE_ID root importing extension. example, include script foo.js Shared Module ID \"cccccccccccccccccccccccccccccccc\", use path root extension: <script src=\"_modules/cccccccccccccccccccccccccccccccc/foo.js\"> importing extension ID \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", full URL resources Shared Module is: chrome-extension://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/_modules/cccccccccccccccccccccccccccccccc/ Note since resources Shared Modules overlaid origin importing extension, privileges granted importing extension available code Shared Modules. Also, Shared Module access resources importing extension using absolute paths. Install / uninstall Shared Module automatically installed Chrome Web Store needed dependent extension automatically uninstalled last extension references uninstalled. upload extension uses Shared Module, Shared Module must published Chrome Web Store extension must restricted using Shared Module allowlist. development, need manually install Shared Modules extension uses. Automatic installs happen extensions side-loaded loaded unpacked extensions. locally installed, unpacked Shared Modules, must use key field ensure Shared Modules use correct IDs."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/short-name", "title": "Manifest - short_name | Chrome Extensions | Chrome for Developers", "text": "optional manifest key defining short version extension's name (maximum 12 characters recommended). key specified, truncated version \"name\" key used. short name typically used insufficient space display full name. { // ... \"short_name\": \"Short Name\" // ... }"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/storage", "title": "Manifest for managed storage | Chrome Extensions | Chrome for Developers", "text": "Unlike local sync storage areas, managed storage area requires structure declared JSON Schema strictly validated Chrome. schema must stored file indicated \"managed_schema\" property \"storage\" manifest key declares enterprise policies supported extension. Policies analogous options configured system administrator policy installed extensions, allowing extension preconfigured users organization. See Chrome handles policies examples Chrome itself. declaring policies read storage.managed API. extension enforce policies configured administrator. Sample manifest.json storage.managed_schema property indicates file within extension contains policy schema. { \"name\": \"My enterprise extension\", \"storage\": { \"managed_schema\": \"schema.json\" }, ... } Chrome load policies underlying operating system Google Apps signed-in users. storage.onChanged event fired whenever policy change detected. verify policies Chrome loaded chrome://policy. Schema format JSON Schema format additional requirements Chrome: - top-level schema must type object . - top-level object can't haveadditionalProperties . Theproperties declared policies extension. - schema must either $ref value exactly onetype . schema invalid Chrome load extension indicate reason schema validated. policy value conform schema published storage.managed API. Sample schema { \"type\": \"object\", // \"properties\" maps optional key object schema. // top-level object, keys policy names supported. \"properties\": { // policy name \"AutoSave\" mapped schema, case // declares simple boolean value. // \"title\" \"description\" optional used show // user-friendly name documentation administrator. \"AutoSave\": { \"title\": \"Automatically save changes.\", \"description\": \"If set true changes automatically saved.\", \"type\": \"boolean\" }, // simple types supported include \"integer\", \"string\" \"number\". \"PollRefreshRate\": { \"type\": \"integer\" }, \"DefaultServiceUrl\": { \"type\": \"string\" }, // \"array\" list items conform another schema, described // \"items\". example schema [ \"one\", \"two\" ]. \"ServiceUrls\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }, // complex example describes list bookmarks. bookmark // \"title\", \"url\" list \"children\" bookmarks. // \"id\" attribute used name schema, schemas reuse // using \"$ref\" attribute. \"Bookmarks\": { \"type\": \"array\", \"id\": \"ListOfBookmarks\", \"items\": { \"type\": \"object\", \"properties\": { \"title\": { \"type\": \"string\" }, \"url\": { \"type\": \"string\" }, \"children\": { \"$ref\": \"ListOfBookmarks\" } } } }, // \"object\" known properties listed \"properties\", // optionally \"additionalProperties\" indicating schema apply // keys found \"properties\". // example policy could map URL settings. example value: // { // \"youtube.com\": { // \"blocklisted\": true // }, // \"google.com\": { // \"bypass_proxy\": true // } // } \"SettingsForUrls\": { \"type\": \"object\", \"additionalProperties\": { \"type\": \"object\", \"properties\": { \"blocklisted\": { \"type\": \"boolean\" }, \"bypass_proxy\": { \"type\": \"boolean\" } } } } } }"},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/trial_tokens", "title": "Manifest - Trial tokens | Chrome Extensions | Chrome for Developers", "text": "array trial tokens enable Origin Trial Deprecation Trial features extension contexts. browse register active trials active trials page. participate multiple trials simultaneously, include token separate array entry. \"trial_tokens\": [\"AnlT7gRo/750gGKtoI/A3D2rL5yAQA9wISlLqHGE6vJQinPfk0HiIij5LhWs+iuB7mTeotXmEXkvdpOAC1YjAgAAAG97Im9yaWdpbiI6ImNocm9tZS1leHRlbnNpb246Ly9sampoamFha21uY2lib25uanBhb2dsYmhjamVvbGhrayIsImZlYXR1cmUiOiJJQ2Fubm90QmVsaWV2ZVlvdVdhc3RlZFlvdXJUaW1lRGVjb2RpbmdUaGlzIiwiZXhwaXJ5Ijo1NzI1NDA3OTk5fQ==\"] Learn register use tokens extension official guide."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/version", "title": "Manifest - Version | Chrome Extensions | Chrome for Developers", "text": "One four dot-separated integers identifying version extension. couple rules apply integers: - integers must 0 65535, inclusive. - Non-zero integers can't start 0. example, 032 invalid begins zero. - must zero. example, 0 0.0.0.0 invalid 0.1.0.0 valid. examples valid versions: \"version\": \"1\" \"version\": \"1.0\" \"version\": \"2.10.2\" \"version\": \"3.1.2.4567\" published extension newer version string installed extension, extension automatically updated. comparison starts leftmost integers. Then, integers equal, integers right compared, on. example, 1.2.0 newer version 1.1.9.9999. missing integer equal zero. example, 1.1.9.9999 newer 1.1, 1.1.9.9999 older 1.2. Version name addition \"version\" field, used update purposes, \"version_name\" set descriptive version string used display purposes present. examples version names: \"version_name\": \"1.0 beta\" \"version_name\": \"build rc2\" \"version_name\": \"3.1.2.4567\" version_name present, version field used display purposes well."},
{"source": "https://developer.chrome.com/docs/extensions/reference/manifest/web-accessible-resources", "title": "Manifest - Web Accessible Resources | Chrome Extensions | Chrome for Developers", "text": "Web-accessible resources files inside extension accessed web pages extensions. Extensions typically use feature expose images assets need loaded web pages, asset included extension's bundle made web accessible. default resources web accessible, allows malicious website fingerprint extensions user installed exploit vulnerabilities (for example XSS bugs) installed extensions. pages scripts loaded extension's origin access extension's resources. Manifest declaration Use web_accessible_resources manifest property declare resources exposed origins. property array objects declares resource access rules. object maps array extension resources array URLs and/or extension IDs access resources. { ... \"web_accessible_resources\": [ { \"resources\": [ \"test1.png\", \"test2.png\" ], \"matches\": [ \"https://web-accessible-resources-1.glitch.me/*\" ] }, { \"resources\": [ \"test3.png\", \"test4.png\" ], \"matches\": [ \"https://web-accessible-resources-2.glitch.me/*\" ], \"use_dynamic_url\": true } ], ... } object array contains elements: \"resources\" - array strings, containing relative path given resource extension's root directory. Resources may contain asterisks ( * ) wildcard matches. example,\"/images/*\" exposes everything extension'simages/ directory, recursively, while\"*.png\" exposes PNG files. \"matches\" - array strings, containing match pattern specifies sites access set resources. origin used match URLs. Origins include subdomain matching. Google Chrome emits \"Invalid match pattern\" error pattern path '/*'. \"extension_ids\" - array strings, containing ID extension access resources. \"use_dynamic_url\" - true, allow resources accessed dynamic ID. dynamic ID generated per session. means regenerated browser restarts extension reloads. element must include \"resources\" element either \"matches\" \"extension_ids\" element. establishes mapping exposes specified resources either web pages matching pattern extensions matching IDs. \"use_dynamic_url\" element optional. Navigability resources Resources available webpage via URL chrome-extension://[PACKAGE ID]/[PATH] , generated runtime.getURL() method. resources served appropriate CORS headers, they're available via fetch() . navigation web origin extension resource blocked unless resource listed web accessible. Note corner cases: - extension uses webRequest API redirect public resource request resource web accessible, request also blocked. - holds true even resource web accessible owned redirecting extension. - Navigation blocked incognito mode unless value \"incognito\" field set to\"split\" . Content scripts need allowed. Example Web Accessible Resources example demonstrates use element working extension."},
{"source": "https://developer.chrome.com/docs/extensions/mv2/reference/pageAction", "title": "chrome.pageAction | Reference | Chrome for Developers", "text": "Description Use chrome.pageAction API put icons main Google Chrome toolbar, right address bar. Page actions represent actions taken current page, applicable pages. Page actions appear grayed inactive. Availability examples: - Subscribe page's RSS feed - Make slideshow page's photos RSS icon following screenshot represents page action lets subscribe RSS feed current page. Hidden page actions appear grayed out. example, RSS feed grayed out, can't subscribe feed current page: Please consider using browser action instead, users always interact extension. Manifest Register page action extension manifest like this: { \"name\": \"My extension\", ... \"page_action\": { \"default_icon\": { // optional \"16\": \"images/icon16.png\", // optional \"24\": \"images/icon24.png\", // optional \"32\": \"images/icon32.png\" // optional }, \"default_title\": \"Google Mail\", // optional; shown tooltip \"default_popup\": \"popup.html\" // optional }, ... } Since devices less-common scale factors like 1.5x 1.2x becoming common, encouraged provide multiple sizes icons. Chrome select closest one scale fill 16-dip space. also ensures icon display size ever changed, need work provide different icons! However, size difference extreme, scaling cause icon lose detail look fuzzy. old syntax registering default icon still supported: { \"name\": \"My extension\", ... \"page_action\": { ... \"default_icon\": \"images/icon32.png\" // optional // equivalent \"default_icon\": { \"32\": \"images/icon32.png\" } }, ... } Parts UI Like browser actions, page actions icon, tooltip, popup; can't badges, however. addition, page actions grayed out. find information icons, tooltips, popups reading browser action UI. make page action appear grayed using pageAction.show pageAction.hide methods, respectively. default, page action appears grayed out. show it, specify tab icon appear. icon remains visible tab closed starts displaying different URL (because user clicks link, example). Tips best visual impact, follow guidelines: - use page actions features make sense pages. - use page actions features make sense pages. Use browser actions instead. - constantly animate icon. That's annoying. Types ImageDataType Pixel data image. Must ImageData object (for example, canvas element). Type ImageData TabDetails Properties - tabId number optional ID tab query state for. tab specified, non-tab-specific state returned. Methods getPopup() chrome.pageAction.getPopup( details: TabDetails, callback?: function, ) Gets html document set popup page action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. getTitle() chrome.pageAction.getTitle( details: TabDetails, callback?: function, ) Gets title page action. Parameters - details - callback function optional callback parameter looks like:(result: string) => void - result string - Returns - Promise<string> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. hide() chrome.pageAction.hide( tabId: number, callback?: function, ) Hides page action. Hidden page actions still appear Chrome toolbar, grayed out. Parameters - tabId number id tab want modify page action. - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. setIcon() chrome.pageAction.setIcon( details: object, callback?: function, ) Sets icon page action. icon specified either path image file pixel data canvas element, dictionary either one those. Either path imageData property must specified. Parameters - details object - iconIndex number optional Deprecated. argument ignored. - imageData ImageData | object optional Either ImageData object dictionary {size -> ImageData} representing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.imageData = foo' equivalent 'details.imageData = {'16': foo}' - path string | object optional Either relative image path dictionary {size -> relative image path} pointing icon set. icon specified dictionary, actual image used chosen depending screen's pixel density. number image pixels fit one screen space unit equals scale , image sizescale * n selected, n size icon UI. least one image must specified. Note 'details.path = foo' equivalent 'details.path = {'16': foo}' - tabId number id tab want modify page action. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. setPopup() chrome.pageAction.setPopup( details: object, callback?: function, ) Sets HTML document opened popup user clicks page action's icon. Parameters - details object - popup string relative path HTML file show popup. set empty string ( '' ), popup shown. - tabId number id tab want modify page action. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. setTitle() chrome.pageAction.setTitle( details: object, callback?: function, ) Sets title page action. displayed tooltip page action. Parameters - details object - tabId number id tab want modify page action. - title string tooltip string. - - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks. show() chrome.pageAction.show( tabId: number, callback?: function, ) Shows page action. page action shown whenever tab selected. Parameters - tabId number id tab want modify page action. - callback function optional Chrome 67+The callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, platforms need use callbacks."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/permissions", "title": "chrome.permissions | API | Chrome for Developers", "text": "Description Use chrome.permissions API request declared optional permissions run time rather install time, users understand permissions needed grant necessary. Concepts usage Permission warnings exist describe capabilities granted API, warnings may obvious. Permissions API allows developers explain permission warnings introduce new features gradually gives users risk-free introduction extension. way, users specify much access willing grant features want enable. example, optional permissions extension's core functionality overriding new tab page. One feature displaying user's goal day. feature requires storage permission, include warning. extension additional feature, users enable clicking following button: Displaying user's top sites requires topSites permission, following warning. Implement optional permissions Step 1: Decide permissions required optional extension declare required optional permissions. general, should: - Use required permissions needed extension's basic functionality. - Use optional permissions needed optional features extension. Advantages required permissions: - Fewer prompts: extension prompt user accept permissions. - Simpler development: Required permissions guaranteed present. Advantages optional permissions: - Better security: Extensions run fewer permissions since users enable permissions needed. - Better information users: extension explain needs particular permission user enables relevant feature. - Easier upgrades: upgrade extension, Chrome disable users upgrade adds optional rather required permissions. Step 2: Declare optional permissions manifest Declare optional permissions extension manifest optional_permissions key, using format permissions field: { \"name\": \"My extension\", ... \"optional_permissions\": [\"tabs\"], \"optional_host_permissions\": [\"https://www.google.com/\"], ... } want request hosts discover runtime, include \"https://*/*\" extension's optional_host_permissions field. lets specify origin \"Permissions.origins\" long matching scheme. Permissions specified optional Chrome extension permissions specified optional, following exceptions. | Permission | Description | |---|---| \"debugger\" | chrome.debugger API serves alternate transport Chrome's remote debugging protocol. | \"declarativeNetRequest\" | Grants extension access chrome.declarativeNetRequest API. | \"devtools\" | Allows extension expand Chrome DevTools functionality. | \"geolocation\" | Allows extension use HTML5 geolocation API. | \"mdns\" | Grants extension access chrome.mdns API. | \"proxy\" | Grants extension access chrome.proxy API manage Chrome's proxy settings. | \"tts\" | chrome.tts API plays synthesized text-to-speech (TTS). | \"ttsEngine\" | chrome.ttsEngine API implements text-to-speech (TTS) engine using extension. | \"wallpaper\" | ChromeOS only. Use chrome.wallpaper API change ChromeOS wallpaper. | View Declare Permissions information available permissions warnings. Step 3: Request optional permissions Request permissions within user gesture using permissions.request() : document.querySelector('#my-button').addEventListener('click', (event) => { // Permissions must requested inside user gesture, like button's // click handler. chrome.permissions.request({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (granted) => { // callback argument true user granted permissions. (granted) { doSomething(); } else { doSomethingElse(); } }); }); Chrome prompts user adding permissions results different warning messages user already seen accepted. example, previous code might result prompt like this: Step 4: Check extension's current permissions check whether extension specific permission set permissions, use permission.contains() : chrome.permissions.contains({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (result) => { (result) { // extension permissions. } else { // extension permissions. } }); Step 5: Remove permissions remove permissions longer need them. permission removed, calling permissions.request() usually adds permission back without prompting user. chrome.permissions.remove({ permissions: ['tabs'], origins: ['https://www.google.com/'] }, (removed) => { (removed) { // permissions removed. } else { // permissions removed (e.g., tried remove // required permissions). } }); Types Permissions Properties - origins string[] optional list host permissions, including specified optional_permissions orpermissions keys manifest, associated Content Scripts. - permissions string[] optional List named permissions (does include hosts origins). Methods addHostAccessRequest() chrome.permissions.addHostAccessRequest( request: object, callback?: function, ) Adds host access request. Request signaled user extension granted access host request. Request reset cross-origin navigation. accepted, grants persistent access site\u2019s top origin Parameters - request object - documentId string optional id document host access requests shown. Must top-level document within tab. provided, request shown tab specified document removed document navigates new origin. Adding new request override existent request tabId . ortabId must specified. - pattern string optional URL pattern host access requests shown. provided, host access requests shown URLs match pattern. - tabId number optional id tab host access requests shown. provided, request shown specified tab removed tab navigates new origin. Adding new request override existent request documentId . ordocumentId must specified. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. contains() chrome.permissions.contains( permissions: Permissions, callback?: function, ) Checks extension specified permissions. Parameters - permissions - callback function optional callback parameter looks like:(result: boolean) => void - result boolean True extension specified permissions. origin specified optional permission content script match pattern, return false unless permissions granted. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.permissions.getAll( callback?: function, ) Gets extension's current set permissions. Parameters - callback function optional callback parameter looks like:(permissions: Permissions) => void - permissions extension's active permissions. Note origins property contain granted origins specified thepermissions andoptional_permissions keys manifest associated Content Scripts. - Returns - Promise<Permissions> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.permissions.remove( permissions: Permissions, callback?: function, ) Removes access specified permissions. problems removing permissions, runtime.lastError set. Parameters - permissions - callback function optional callback parameter looks like:(removed: boolean) => void - removed boolean True permissions removed. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeHostAccessRequest() chrome.permissions.removeHostAccessRequest( request: object, callback?: function, ) Removes host access request, existent. Parameters - request object - documentId string optional id document host access request removed. Must top-level document within tab. tabId must specified. - pattern string optional URL pattern host access request removed. provided, must exactly match pattern existing host access request. - tabId number optional id tab host access request removed. documentId must specified. - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. request() chrome.permissions.request( permissions: Permissions, callback?: function, ) Requests access specified permissions, displaying prompt user necessary. permissions must either defined optional_permissions field manifest required permissions withheld user. Paths origin patterns ignored. request subsets optional origin permissions; example, specify *://*\\/* optional_permissions section manifest, request http://example.com/ . problems requesting permissions, runtime.lastError set. Parameters - permissions - callback function optional callback parameter looks like:(granted: boolean) => void - granted boolean True user granted specified permissions. - Returns - Promise<boolean> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onAdded chrome.permissions.onAdded.addListener( callback: function, ) Fired extension acquires new permissions. Parameters - callback function callback parameter looks like:(permissions: Permissions) => void - permissions - onRemoved chrome.permissions.onRemoved.addListener( callback: function, ) Fired access permissions removed extension. Parameters - callback function callback parameter looks like:(permissions: Permissions) => void - permissions -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/permissions-list", "title": "Permissions | Chrome for Developers", "text": "access extension APIs features, must declare permissions extension's manifest. permissions trigger warnings users must allow continue using extension. information permissions work, see Declare permissions. best practices using permissions warnings, see Permission warning guidelines. following list available permissions warnings triggered specific permissions. \"accessibilityFeatures.modify\" - Lets extensions modify accessibility feature states using chrome.accessibilityFeatures API. Warning displayed: Change accessibility settings. \"accessibilityFeatures.read\" - Lets extensions read accessibility states using chrome.accessibilityFeatures API. Warning displayed: Read accessibility settings. \"activeTab\" - Gives temporary access active tab user gesture. details, see activeTab . \"alarms\" - Gives access chrome.alarms API. \"audio\" - Gives access chrome.audio API. \"background\" - Makes Chrome start early (as soon user logs computer, launch Chrome), shut late (even last window closed, user explicitly quits Chrome). \"bookmarks\" - Gives access chrome.bookmarks API. Warning displayed: Read change bookmarks. \"browsingData\" - Gives access chrome.browsingData API. \"certificateProvider\" - Gives access chrome.certificateProvider API. \"clipboardRead\" - Lets extension paste items clipboard using web platform Clipboard API. Warning displayed: Read data copy paste. \"clipboardWrite\" - Lets extension cut copy items clipboard using web platform Clipboard API. Warning displayed: Modify data copy paste. \"contentSettings\" - Gives access chrome.contentSettings API. Warning displayed: Change settings control websites' access features cookies, JavaScript, plugins, geolocation, microphone, camera etc. \"contextMenus\" - Gives access chrome.contextMenus API. \"cookies\" - Gives access chrome.cookies API. \"debugger\" - Gives access chrome.debugger API. Warnings displayed: - Access page debugger backend. - Read change data websites. \"declarativeContent\" - Gives access chrome.declarativeContent API. \"declarativeNetRequest\" - Gives access chrome.declarativeNetRequest API. Warning displayed: Block content page. \"declarativeNetRequestWithHostAccess\" - Gives access chrome.declarativeNetRequest API requires host permissions actions. \"declarativeNetRequestFeedback\" - Gives permission write errors warnings DevTools console using chrome.declarativeNetRequest API. permission use unpacked extensions ignored extensions installed Chrome Web Store. Warning displayed: Read browsing history. \"dns\" - Gives access chrome.dns API. \"desktopCapture\" - Gives access chrome.desktopCapture API. Warning displayed: Capture content screen. \"documentScan\" - Gives access chrome.documentScan API. \"downloads\" - Gives access chrome.downloads API. Warning displayed: Manage downloads. \"downloads.open\" - Allows use chrome.downloads.open() . Warning displayed: Manage downloads. \"downloads.ui\" - Allows use chrome.downloads.setUiOptions() . Warning displayed: Manage downloads. \"enterprise.deviceAttributes\" - Gives access chrome.enterprise.deviceAttributes API. \"enterprise.hardwarePlatform\" - Gives access chrome.enterprise.hardwarePlatform API. \"enterprise.networkingAttributes\" - Gives access chrome.enterprise.networkingAttributes API. \"enterprise.platformKeys\" - Gives access chrome.enterprise.platformKeys API. \"favicon\" - Grants access Favicon API. Warning displayed: Read icons websites visit. \"fileBrowserHandler\" - Gives access chrome.fileBrowserHandler API. \"fileSystemProvider\" - Gives access chrome.fileSystemProvider API. \"fontSettings\" - Gives access chrome.fontSettings API. \"gcm\" - Gives access chrome.gcm andchrome.instanceID APIs. \"geolocation\" - Allows extension use geolocation API without prompting user permission. Warning displayed: Detect physical location. \"history\" - Gives access chrome.history API. Warning displayed: Read change browsing history signed-in devices. \"identity\" - Gives access chrome.identity API. Warning displayed: Know email address. \"identity.email\" - Gives access user's email address chrome.identity API. Warning displayed: Know email address. \"idle\" - Gives access chrome.idle API. \"loginState\" - Gives access chrome.loginState API. \"management\" - Gives access chrome.management API. Warning displayed: Manage apps, extensions, themes. \"nativeMessaging\" - Gives access native messaging API. Warning displayed: Communicate cooperating native applications. \"notifications\" - Gives access chrome.notifications API. Warning displayed: Display notifications. \"offscreen\" - Gives access chrome.offscreen API. \"pageCapture\" - Gives access chrome.pageCapture API. Warning displayed: Read change data websites. \"platformKeys\" - Gives access chrome.platformKeys API. \"power\" - Gives access chrome.power API. \"printerProvider\" - Gives access chrome.printerProvider API. \"printing\" - Gives access chrome.printing API. \"printingMetrics\" - Gives access chrome.printingMetrics API. \"privacy\" - Gives access chrome.privacy API. Warning displayed: Change privacy-related settings. \"processes\" - Gives access chrome.processes API. \"proxy\" - Gives access chrome.proxy API. Warning displayed: Read change data websites. \"readingList\" - Gives access chrome.readingList API. Warning displayed: Read change entries reading list. \"runtime\" - Gives access runtime.connectNative() andruntime.sendNativeMessage() . features theruntime namespace, permission required. \"scripting\" - Gives access chrome.scripting API. \"search\" - Gives access chrome.search API. \"sessions\" - Gives access chrome.sessions API. Warnings displayed: - used \"history\" permission: Read change browsing history signed-in devices. - used \"tabs\" permission: Read browsing history signed-in devices. - used \"sidePanel\" - Gives access chrome.sidePanel API. \"storage\" - Gives access chrome.storage API. \"system.cpu\" - Gives access chrome.system.cpu API. \"system.display\" - Gives access chrome.system.display API. \"system.memory\" - Gives access chrome.system.memory API. \"system.storage\" - Gives access chrome.system.storage API. Warning displayed: Identify eject storage devices. \"tabCapture\" - Gives access chrome.tabCapture API. Warning displayed: Read change data websites. \"tabGroups\" - Gives access chrome.tabGroups API. Warning displayed: View manage tab groups. \"tabs\" - Gives access privileged fields Tab objects used several APIs, including chrome.tabs andchrome.windows . usually need declare permission use APIs. Warning displayed: Read browsing history. \"topSites\" - Gives access chrome.topSites API. Warning displayed: Read list frequently visited websites. \"tts\" - Gives access chrome.tts API. \"ttsEngine\" - Gives access chrome.ttsEngine API. Warning displayed: Read text spoken using synthesized speech. \"unlimitedStorage\" - Provides unlimited quota chrome.storage.local ,IndexedDB ,Cache Storage , andOrigin Private File System . information, see Storage cookies. \"vpnProvider\" - Gives access chrome.vpnProvider API. \"wallpaper\" - Gives access chrome.wallpaper API. \"webAuthenticationProxy\" - Gives access chrome.webAuthenticationProxy API. Warning displayed: Read change data websites. \"webNavigation\" - Gives access chrome.webNavigation API. Warning displayed: Read browsing history. \"webRequest\" - Gives access chrome.webRequest API. \"webRequestBlocking\" - Allows use chrome.webRequest API blocking."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/printerProvider", "title": "chrome.printerProvider | API | Chrome for Developers", "text": "Description chrome.printerProvider API exposes events used print manager query printers controlled extensions, query capabilities submit print jobs printers. Permissions printerProvider Availability Types PrinterInfo Properties - description string optional Printer's human readable description. - id string Unique printer ID. - name string Printer's human readable name. PrintError Error codes returned response onPrintRequested event. Enum \"OK\" \"FAILED\" \"INVALID_TICKET\" \"INVALID_DATA\" Specifies operation completed successfully. Specifies general failure occured. Specifies print ticket invalid. example, ticket inconsistent capabilities, extension able handle settings ticket. Specifies document invalid. example, data may corrupted format incompatible extension. PrintJob Properties - contentType string document content type. Supported formats \"application/pdf\" and\"image/pwg-raster\" . - document Blob Blob containing document data print. Format must match contentType . - printerId string ID printer handle job. - ticket object Print ticket CJT format. CJT reference marked deprecated. deprecated Google Cloud Print only. deprecated ChromeOS printing. - title string print job title. Events onGetCapabilityRequested chrome.printerProvider.onGetCapabilityRequested.addListener( callback: function, ) Event fired print manager requests printer capabilities. Parameters - callback function callback parameter looks like:(printerId: string, resultCallback: function) => void - printerId string - resultCallback function resultCallback parameter looks like:(capabilities: object) => void - capabilities object Device capabilities CDD format. - - onGetPrintersRequested chrome.printerProvider.onGetPrintersRequested.addListener( callback: function, ) Event fired print manager requests printers provided extensions. Parameters - callback function callback parameter looks like:(resultCallback: function) => void - resultCallback function resultCallback parameter looks like:(printerInfo: PrinterInfo[]) => void - printerInfo - - onGetUsbPrinterInfoRequested chrome.printerProvider.onGetUsbPrinterInfoRequested.addListener( callback: function, ) Event fired print manager requests information USB device may printer. Note: application rely event fired per device. connected device supported returned onGetPrintersRequested event. Parameters - callback function callback parameter looks like:(device: usb.Device, resultCallback: function) => void - device - resultCallback function resultCallback parameter looks like:(printerInfo?: PrinterInfo) => void - printerInfo PrinterInfo optional - - onPrintRequested chrome.printerProvider.onPrintRequested.addListener( callback: function, ) Event fired print manager requests printing. Parameters - callback function callback parameter looks like:(printJob: PrintJob, resultCallback: function) => void - printJob - resultCallback function resultCallback parameter looks like:(result: PrintError) => void - result - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/printing", "title": "chrome.printing | API | Chrome for Developers", "text": "Description Use chrome.printing API send print jobs printers installed Chromebook. Permissions printing Availability chrome.printing methods events require declare \"printing\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"printing\" ], ... } Examples examples demonstrate using methods printing namespace. code copied based api-samples/printing extensions-samples Github repo. cancelJob() example uses onJobStatusChanged handler hide 'cancel' button jobStatus neither PENDING IN_PROGRESS . Note networks Chromebook connected directly printer, states may pass quickly cancel button visible long enough called. greatly simplified printing example. chrome.printing.onJobStatusChanged.addListener((jobId, status) => { const cancelButton = document.getElementById(\"cancelButton\"); cancelButton.addEventListener('click', () => { chrome.printing.cancelJob(jobId).then((response) => { (response !== undefined) { console.log(response.status); } (chrome.runtime.lastError !== undefined) { console.log(chrome.runtime.lastError.message); } }); }); (status !== \"PENDING\" && status !== \"IN_PROGRESS\") { cancelButton.style.visibility = 'hidden'; } else { cancelButton.style.visibility = 'visible'; } } getPrinters() getPrinterInfo() single example used functions getting printer information requires printer ID, retrieved calling getPrinters() . example logs name description default printer console. simplified version printing example. const printers = await chrome.printing.getPrinters(); const defaultPrinter = printers.find((printer) => { const printerInfo = await chrome.printing.getPrinterInfo(printer.id); return printerInfo.isDefault; } console.log(`Default printer: ${defaultPrinter.name}.\\n\\t${defaultPrinter.description}`); submitJob() submitJob() method requires three things. - ticket structure specifying capabilities printer used. user needs select available capabilities, retrieve specific printer usinggetPrinterInfo() . - SubmitJobRequest structure, specifies printer use, file date print. structure contains reference theticket structure. - blob file data print. Calling submitJob() triggers dialog box asking user confirm printing. Use PrintingAPIExtensionsAllowlist bypass confirmation. simplified version printing example. Notice ticket attached SubmitJobRequest structure (line 8) data print converted blob (line 10). Getting ID printer (line 1) complicated sample shown here. const defaultPrinter = getDefaultPrinter(); const ticket = getPrinterTicket(defaultPrinter); const arrayBuffer = getPrintData(); const submitJobRequest = { job: { printerId: defaultPrinter, title: 'test job', ticket: ticket, contentType: 'application/pdf', document: new Blob([new Uint8Array(arrayBuffer)], { type: 'application/pdf' }); } }; chrome.printing.submitJob(submitJobRequest, (response) => { (response !== undefined) { console.log(response.status); } (chrome.runtime.lastError !== undefined) { console.log(chrome.runtime.lastError.message); } }); Roll printing example shows build printer ticket continuous (or roll) printing, often used receipt printing. submitJobRequest object roll printing shown submitJob() example. need change default value paper cutting, use vendor_ticket_item key. (The default varies printer printer.) change value, provide array one member: object whose id 'finishings' . value either 'trim' printers cut roll end printing 'none' printers require print job torn off. const ticket = { version: '1.0', print: { vendor_ticket_item: [{id: 'finishings', value: 'trim'}], color: {type: 'STANDARD_MONOCHROME'}, duplex: {type: 'NO_DUPLEX'}, page_orientation: {type: 'PORTRAIT'}, copies: {copies: 1}, dpi: {horizontal_dpi: 300, vertical_dpi: 300}, media_size: { width_microns: 72320, height_microns: 100000 }, collate: {collate: false} } }; printers support \"finishings\" option. determine printer does, call getPrinterInfo() look \"display_name\" \"finishings/11\" . \"vendor_capability\": [ { \"display_name\": \"finishings/11\", \"id\": \"finishings/11\", \"type\": \"TYPED_VALUE\", \"typed_value_cap\": { \"value_type\": \"BOOLEAN\" } }, ... ] values ticket's media_size key specific printer. select appropriate size call getPrinterInfo() . returned GetPrinterResponse contains array supported media sizes \"media_size\".\"option\" . Choose option whose \"is_continuous_feed\" value true. Use height width values ticket. \"media_size\": { \"option\": [ { \"custom_display_name\": \"\", \"is_continuous_feed\": true, \"max_height_microns\": 2000000, \"min_height_microns\": 25400, \"width_microns\": 50800 }, ... ] } Types GetPrinterInfoResponse Properties - capabilities object optional Printer capabilities CDD format. property may missing. - status status printer. JobStatus Status print job. Enum \"PENDING\" \"IN_PROGRESS\" \"FAILED\" \"CANCELED\" \"PRINTED\" Print job received Chrome side processed yet. Print job sent printing. Print job interrupted due error. Print job canceled user via API. Print job printed without errors. Printer Properties - description string human-readable description printer. - id string printer's identifier; guaranteed unique among printers device. - isDefault boolean flag shows whether printer fits DefaultPrinterSelection rules. Note several printers could flagged. - name string name printer. - recentlyUsedRank number optional value showing recent printer used printing Chrome. lower value recent printer used. minimum value 0. Missing value indicates printer used recently. value guaranteed unique amongst printers. - source source printer (user policy configured). - uri string printer URI. used extensions choose printer user. PrinterSource source printer. Enum \"USER\" \"POLICY\" Printer added user. Printer added via policy. PrinterStatus status printer. Enum \"DOOR_OPEN\" \"TRAY_MISSING\" \"OUT_OF_INK\" \"OUT_OF_PAPER\" \"OUTPUT_FULL\" \"PAPER_JAM\" \"GENERIC_ISSUE\" \"STOPPED\" \"UNREACHABLE\" \"EXPIRED_CERTIFICATE\" \"AVAILABLE\" door printer open. Printer still accepts print jobs. tray printer missing. Printer still accepts print jobs. printer ink. Printer still accepts print jobs. printer paper. Printer still accepts print jobs. output area printer (e.g. tray) full. Printer still accepts print jobs. printer paper jam. Printer still accepts print jobs. generic issue. Printer still accepts print jobs. printer stopped print still accepts print jobs. printer unreachable accept print jobs. SSL certificate expired. Printer accepts jobs fail. printer available. SubmitJobRequest Properties - job print job submitted. supported content type \"application/pdf\", Cloud Job Ticket include FitToPageTicketItem ,PageRangeTicketItem ,ReverseOrderTicketItem andVendorTicketItem fields since irrelevant native printing. fields must present. SubmitJobResponse Properties - jobId string optional id created print job. unique identifier among print jobs device. status OK, jobId null. - status status request. SubmitJobStatus status submitJob request. Enum \"OK\" \"USER_REJECTED\" Sent print job request accepted. Sent print job request rejected user. Properties MAX_GET_PRINTER_INFO_CALLS_PER_MINUTE maximum number times getPrinterInfo called per minute. Value 20 MAX_SUBMIT_JOB_CALLS_PER_MINUTE maximum number times submitJob called per minute. Value 40 Methods cancelJob() chrome.printing.cancelJob( jobId: string, callback?: function, ) Cancels previously submitted job. Parameters - jobId string id print job cancel. id received SubmitJobResponse . - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPrinterInfo() chrome.printing.getPrinterInfo( printerId: string, callback?: function, ) Returns status capabilities printer CDD format. call fail runtime error printers given id installed. Parameters - printerId string - callback function optional callback parameter looks like:(response: GetPrinterInfoResponse) => void - response - Returns - Promise<GetPrinterInfoResponse> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPrinters() chrome.printing.getPrinters( callback?: function, ) Returns list available printers device. includes manually added, enterprise discovered printers. Parameters Returns - Promise<Printer[]> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. submitJob() chrome.printing.submitJob( request: SubmitJobRequest, callback?: function, ) Submits job printing. extension listed PrintingAPIExtensionsAllowlist policy, user prompted accept print job. Chrome 120, function return promise. Parameters - request - callback function optional callback parameter looks like:(response: SubmitJobResponse) => void - response - Returns - Promise<SubmitJobResponse> Chrome 100+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onJobStatusChanged chrome.printing.onJobStatusChanged.addListener( callback: function, ) Event fired status job changed. fired jobs created extension."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/runtime", "title": "chrome.runtime | API | Chrome for Developers", "text": "Description Use chrome.runtime API retrieve service worker, return details manifest, listen respond events extension lifecycle. also use API convert relative path URLs fully-qualified URLs. members API require permissions. permission needed connectNative() , sendNativeMessage() onNativeConnect . following example shows declare \"nativeMessaging\" permission manifest: manifest.json: { \"name\": \"My extension\", ... \"permissions\": [ \"nativeMessaging\" ], ... } Concepts usage Runtime API provides methods support number areas extensions use: - Message passing - extension communicate different contexts within extension also extensions using methods events: connect() ,onConnect ,onConnectExternal ,sendMessage() ,onMessage andonMessageExternal . addition, extension pass messages native applications user's device usingconnectNative() andsendNativeMessage() . - Accessing extension platform metadata - methods let retrieve several specific pieces metadata extension platform. Methods category include getManifest() , andgetPlatformInfo() . - Managing extension lifecycle options - properties let perform meta-operations extension, display options page. Methods events category include onInstalled ,onStartup ,openOptionsPage() ,reload() ,requestUpdateCheck() , andsetUninstallURL() . - Helper utilities - methods provide utility conversion internal resource representations external formats. Methods category include getURL() . - Kiosk mode utilities - methods available ChromeOS, exist mainly support kiosk implementations. Methods category include restart() andrestartAfterDelay() `. Unpacked extension behavior unpacked extension reloaded, treated update. means chrome.runtime.onInstalled event fire \"update\" reason. includes extension reloaded chrome.runtime.reload() . Use cases Add image web page web page access asset hosted another domain, must specify resource's full URL (e.g. <img src=\"https://example.com/logo.png\"> ). true include extension asset web page. two differences extension's assets must exposed web accessible resources typically content scripts responsible injecting extension assets. example, extension add logo.png page content script injected using runtime.getURL() create fully-qualified URL. first, asset must declared web accessible resource manifest. manifest.json: { ... \"web_accessible_resources\": [ { \"resources\": [ \"logo.png\" ], \"matches\": [ \"https://*/*\" ] } ], ... } content.js: { // Block used avoid setting global variables const img = document.createElement('img'); img.src = chrome.runtime.getURL('logo.png'); document.body.append(img); } Send data content script service worker common extension's content scripts need data managed another part extension, like service worker. Much like two browser windows opened web page, two contexts cannot directly access other's values. Instead, extension use message passing coordinate across different contexts. example, content script needs data extension's service worker initialize UI. get data, passes developer-defined get-user-data message service worker, responds copy user's information. content.js: // 1. Send message service worker requesting user's data chrome.runtime.sendMessage('get-user-data', (response) => { // 3. Got asynchronous response data service worker console.log('received user data', response); initializeUI(response); }); service-worker.js: // Example simple user data object const user = { username: 'demo-user' }; chrome.runtime.onMessage.addListener((message, sender, sendResponse) => { // 2. page requested user data, respond copy `user` (message === 'get-user-data') { sendResponse(user); } }); Gather feedback uninstall Many extensions use post-uninstall surveys understand extension could better serve users improve retention. following example shows add functionality. background.js: chrome.runtime.onInstalled.addListener(details => { (details.reason === chrome.runtime.OnInstalledReason.INSTALL) { chrome.runtime.setUninstallURL('https://example.com/extension-survey'); } }); Examples See Manifest V3 - Web Accessible Resources demo Runtime API examples. Types ContextFilter filter match certain extension contexts. Matching contexts must match specified filters; filter specified matches available contexts. Thus, filter `{}` match available contexts. Properties - contextIds string[] optional - contextTypes ContextType[] optional - documentIds string[] optional - documentOrigins string[] optional - documentUrls string[] optional - frameIds number[] optional - incognito boolean optional - tabIds number[] optional - windowIds number[] optional ContextType Enum \"TAB\" \"POPUP\" \"BACKGROUND\" \"OFFSCREEN_DOCUMENT\" \"SIDE_PANEL\" \"DEVELOPER_TOOLS\" Specifies context type tab Specifies context type extension popup window Specifies context type service worker. Specifies context type offscreen document. Specifies context type side panel. Specifies context type developer tools. ExtensionContext context hosting extension content. Properties - contextId string unique identifier context - contextType type context corresponds to. - documentId string optional UUID document associated context, undefined context hosted document. - documentOrigin string optional origin document associated context, undefined context hosted document. - documentUrl string optional URL document associated context, undefined context hosted document. - frameId number ID frame context, -1 context hosted frame. - incognito boolean Whether context associated incognito profile. - tabId number ID tab context, -1 context hosted tab. - windowId number ID window context, -1 context hosted window. MessageSender object containing information script context sent message request. Properties - documentId string optional Chrome 106+A UUID document opened connection. - documentLifecycle string optional Chrome 106+The lifecycle document opened connection time port created. Note lifecycle state document may changed since port creation. - frameId number optional frame opened connection. 0 top-level frames, positive child frames. set tab set. - id string optional ID extension opened connection, any. - nativeApplication string optional Chrome 74+The name native application opened connection, any. - origin string optional Chrome 80+The origin page frame opened connection. vary url property (e.g., about:blank) opaque (e.g., sandboxed iframes). useful identifying origin trusted can't immediately tell URL. - tab Tab optional tabs.Tab opened connection, any. property present connection opened tab (including content scripts), receiver extension, app. - tlsChannelId string optional TLS channel ID page frame opened connection, requested extension, available. - url string optional URL page frame opened connection. sender iframe, iframe's URL URL page hosts it. OnInstalledReason reason event dispatched. Enum \"install\" \"update\" \"chrome_update\" \"shared_module_update\" Specifies event reason installation. Specifies event reason extension update. Specifies event reason Chrome update. Specifies event reason update shared module. OnRestartRequiredReason reason event dispatched. 'app_update' used restart needed application updated newer version. 'os_update' used restart needed browser/OS updated newer version. 'periodic' used system runs permitted uptime set enterprise policy. Enum \"app_update\" \"os_update\" \"periodic\" Specifies event reason update app. Specifies event reason update operating system. Specifies event reason periodic restart app. PlatformArch machine's processor architecture. Enum \"arm\" \"arm64\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies processer architecture arm. Specifies processer architecture arm64. Specifies processer architecture x86-32. Specifies processer architecture x86-64. Specifies processer architecture mips. Specifies processer architecture mips64. PlatformInfo object containing information current platform. Properties - arch machine's processor architecture. - nacl_arch native client architecture. may different arch platforms. - os operating system Chrome running on. PlatformNaclArch native client architecture. may different arch platforms. Enum \"arm\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies native client architecture arm. Specifies native client architecture x86-32. Specifies native client architecture x86-64. Specifies native client architecture mips. Specifies native client architecture mips64. PlatformOs operating system Chrome running on. Enum \"mac\" \"win\" \"android\" \"cros\" \"linux\" \"openbsd\" \"fuchsia\" Specifies MacOS operating system. Specifies Windows operating system. Specifies Android operating system. Specifies Chrome operating system. Specifies Linux operating system. Specifies OpenBSD operating system. Specifies Fuchsia operating system. Port object allows two way communication pages. See Long-lived connections information. Properties - name string name port, specified call runtime.connect . - onDisconnect Event<functionvoidvoid> Fired port disconnected end(s). runtime.lastError may set port disconnected error. port closed via disconnect, event fired end. event fired (see also Port lifetime).The onDisconnect.addListener function looks like:(callback: function) => {...} - onMessage Event<functionvoidvoid> event fired postMessage called end port. onMessage.addListener function looks like:(callback: function) => {...} - sender MessageSender optional property present ports passed onConnect / onConnectExternal / onConnectNative listeners. - disconnect void Immediately disconnect port. Calling disconnect() already-disconnected port effect. port disconnected, new events dispatched port.The disconnect function looks like:() => {...} - postMessage void Send message end port. port disconnected, error thrown. postMessage function looks like:(message: any) => {...} - message Chrome 52+The message send. object JSON-ifiable. - RequestUpdateCheckStatus Result update check. Enum \"throttled\" \"no_update\" \"update_available\" Specifies status check throttled. occur repeated checks within short amount time. Specifies available updates install. Specifies available update install. Properties id ID extension/app. Type string lastError Populated error message calling API function fails; otherwise undefined. defined within scope function's callback. error produced, runtime.lastError accessed within callback, message logged console listing API function produced error. API functions return promises set property. Type object Properties - message string optional Details error occurred. Methods connect() chrome.runtime.connect( extensionId?: string, connectInfo?: object, ) Attempts connect listeners within extension (such background page), extensions/apps. useful content scripts connecting extension processes, inter-app/extension communication, web messaging. Note connect listeners content script. Extensions may connect content scripts embedded tabs via tabs.connect . Parameters - extensionId string optional ID extension connect to. omitted, connection attempted extension. Required sending messages web page web messaging. - connectInfo object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onConnectExternal processes listening connection event. - name string optional passed onConnect processes listening connection event. - Returns - Port messages sent received. port's onDisconnect event fired extension exist. connectNative() chrome.runtime.connectNative( application: string, ) Connects native application host machine. method requires \"nativeMessaging\" permission. See Native Messaging information. Parameters - application string name registered application connect to. Returns - Port messages sent received application getBackgroundPage() chrome.runtime.getBackgroundPage( callback?: function, ) Background pages exist MV3 extensions. Retrieves JavaScript 'window' object background page running inside current extension/app. background page event page, system ensure loaded calling callback. background page, error set. Parameters - callback function optional callback parameter looks like:(backgroundPage?: Window) => void - backgroundPage Window optional JavaScript 'window' object background page. - Returns - Promise<Window | undefined> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getContexts() chrome.runtime.getContexts( filter: ContextFilter, callback?: function, ) Fetches information active contexts associated extension Parameters - filter filter find matching contexts. context matches matches specified fields filter. unspecified field filter matches contexts. - callback function optional callback parameter looks like:(contexts: ExtensionContext[]) => void - contexts matching contexts, any. - Returns - Promise<ExtensionContext[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getManifest() chrome.runtime.getManifest() Returns details app extension manifest. object returned serialization full manifest file. Returns - object manifest details. getPackageDirectoryEntry() chrome.runtime.getPackageDirectoryEntry( callback?: function, ) Returns DirectoryEntry package directory. Parameters - callback function optional callback parameter looks like:(directoryEntry: DirectoryEntry) => void - directoryEntry DirectoryEntry - Returns - Promise<DirectoryEntry> Chrome 122+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPlatformInfo() chrome.runtime.getPlatformInfo( callback?: function, ) Returns information current platform. Parameters - callback function optional callback parameter looks like:(platformInfo: PlatformInfo) => void - platformInfo - Returns - Promise<PlatformInfo> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getURL() chrome.runtime.getURL( path: string, ) Converts relative path within app/extension install directory fully-qualified URL. Parameters - path string path resource within app/extension expressed relative install directory. Returns - string fully-qualified URL resource. openOptionsPage() chrome.runtime.openOptionsPage( callback?: function, ) Open Extension's options page, possible. precise behavior may depend manifest's options_ui options_page key, Chrome happens support time. example, page may opened new tab, within chrome://extensions, within App, may focus open options page. never cause caller page reload. Extension declare options page, Chrome failed create one reason, callback set lastError . Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.runtime.reload() Reloads app extension. method supported kiosk mode. kiosk mode, use chrome.runtime.restart() method. requestUpdateCheck() chrome.runtime.requestUpdateCheck( callback?: function, ) Requests immediate update check done app/extension. Important: extensions/apps use method, since Chrome already automatic checks every hours, listen runtime.onUpdateAvailable event without needing call requestUpdateCheck. method appropriate call limited circumstances, extension talks backend service, backend service determined client extension version far date like prompt user update. uses requestUpdateCheck, calling unconditionally based repeating timer, probably serve waste client, network, server resources. Note: called callback, instead returning object function return two properties separate arguments passed callback. Parameters - callback function optional callback parameter looks like:(result: object) => void - result object Chrome 109+RequestUpdateCheckResult object holds status update check details result update available - status Result update check. - version string optional update available, contains version available update. - - Returns - Promise<object> Chrome 109+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restart() chrome.runtime.restart() Restart ChromeOS device app runs kiosk mode. Otherwise, no-op. restartAfterDelay() chrome.runtime.restartAfterDelay( seconds: number, callback?: function, ) Restart ChromeOS device app runs kiosk mode given seconds. called time ends, reboot delayed. called value -1, reboot cancelled. no-op non-kiosk mode. allowed called repeatedly first extension invoke API. Parameters - seconds number Time wait seconds rebooting device, -1 cancel scheduled reboot. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.runtime.sendMessage( extensionId?: string, message: any, options?: object, callback?: function, ) Sends single message event listeners within extension different extension/app. Similar runtime.connect sends single message, optional response. sending extension, runtime.onMessage event fired every frame extension (except sender's frame), runtime.onMessageExternal , different extension. Note extensions cannot send messages content scripts using method. send messages content scripts, use tabs.sendMessage . Parameters - extensionId string optional ID extension send message to. omitted, message sent extension/app. Required sending messages web page web messaging. - message message send. message JSON-ifiable object. - options object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onMessageExternal processes listening connection event. - - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting extension, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendNativeMessage() chrome.runtime.sendNativeMessage( application: string, message: object, callback?: function, ) Send single message native application. method requires \"nativeMessaging\" permission. Parameters - application string name native messaging host. - message object message passed native messaging host. - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response response message sent native messaging host. error occurs connecting native messaging host, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUninstallURL() chrome.runtime.setUninstallURL( url: string, callback?: function, ) Sets URL visited upon uninstallation. may used clean server-side data, analytics, implement surveys. Maximum 1023 characters. Parameters - url string URL opened extension uninstalled. URL must http: https: scheme. Set empty string open new tab upon uninstallation. - callback function optional Chrome 45+The callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBrowserUpdateAvailable chrome.runtime.onBrowserUpdateAvailable.addListener( callback: function, ) Please use runtime.onRestartRequired . Fired Chrome update available, installed immediately browser restart required. Parameters - callback function callback parameter looks like:() => void onConnect chrome.runtime.onConnect.addListener( callback: function, ) Fired connection made either extension process content script (by runtime.connect ). onConnectExternal chrome.runtime.onConnectExternal.addListener( callback: function, ) Fired connection made another extension (by runtime.connect ), externally connectable web site. onConnectNative chrome.runtime.onConnectNative.addListener( callback: function, ) Fired connection made native application. event requires \"nativeMessaging\" permission. supported Chrome OS. onInstalled chrome.runtime.onInstalled.addListener( callback: function, ) Fired extension first installed, extension updated new version, Chrome updated new version. Parameters - callback function callback parameter looks like:(details: object) => void - details object - id string optional Indicates ID imported shared module extension updated. present 'reason' 'shared_module_update'. - previousVersion string optional Indicates previous version extension, updated. present 'reason' 'update'. - reason reason event dispatched. - - onMessage chrome.runtime.onMessage.addListener( callback: function, ) Fired message sent either extension process (by runtime.sendMessage ) content script (by tabs.sendMessage ). Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onMessageExternal chrome.runtime.onMessageExternal.addListener( callback: function, ) Fired message sent another extension (by runtime.sendMessage ). Cannot used content script. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onRestartRequired chrome.runtime.onRestartRequired.addListener( callback: function, ) Fired app device runs needs restarted. app close windows earliest convenient time let restart happen. app nothing, restart enforced 24-hour grace period passed. Currently, event fired Chrome OS kiosk apps. Parameters - callback function callback parameter looks like:(reason: OnRestartRequiredReason) => void - reason - onStartup chrome.runtime.onStartup.addListener( callback: function, ) Fired profile extension installed first starts up. event fired incognito profile started, even extension operating 'split' incognito mode. Parameters - callback function callback parameter looks like:() => void onSuspend chrome.runtime.onSuspend.addListener( callback: function, ) Sent event page unloaded. gives extension opportunity clean up. Note since page unloading, asynchronous operations started handling event guaranteed complete. activity event page occurs gets unloaded onSuspendCanceled event sent page unloaded. Parameters - callback function callback parameter looks like:() => void onSuspendCanceled chrome.runtime.onSuspendCanceled.addListener( callback: function, ) Sent onSuspend indicate app unloaded all. Parameters - callback function callback parameter looks like:() => void onUpdateAvailable chrome.runtime.onUpdateAvailable.addListener( callback: function, ) Fired update available, installed immediately app currently running. nothing, update installed next time background page gets unloaded, want installed sooner explicitly call chrome.runtime.reload(). extension using persistent background page, background page course never gets unloaded, unless call chrome.runtime.reload() manually response event update get installed next time Chrome restarts. handlers listening event, extension persistent background page, behaves chrome.runtime.reload() called response event. Parameters - callback function callback parameter looks like:(details: object) => void - details object - version string version number available update. - - onUserScriptConnect chrome.runtime.onUserScriptConnect.addListener( callback: function, ) Fired connection made user script extension. onUserScriptMessage chrome.runtime.onUserScriptMessage.addListener( callback: function, ) Fired message sent user script associated extension. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/runtime", "title": "chrome.runtime | API | Chrome for Developers", "text": "Description Use chrome.runtime API retrieve service worker, return details manifest, listen respond events extension lifecycle. also use API convert relative path URLs fully-qualified URLs. members API require permissions. permission needed connectNative() , sendNativeMessage() onNativeConnect . following example shows declare \"nativeMessaging\" permission manifest: manifest.json: { \"name\": \"My extension\", ... \"permissions\": [ \"nativeMessaging\" ], ... } Concepts usage Runtime API provides methods support number areas extensions use: - Message passing - extension communicate different contexts within extension also extensions using methods events: connect() ,onConnect ,onConnectExternal ,sendMessage() ,onMessage andonMessageExternal . addition, extension pass messages native applications user's device usingconnectNative() andsendNativeMessage() . - Accessing extension platform metadata - methods let retrieve several specific pieces metadata extension platform. Methods category include getManifest() , andgetPlatformInfo() . - Managing extension lifecycle options - properties let perform meta-operations extension, display options page. Methods events category include onInstalled ,onStartup ,openOptionsPage() ,reload() ,requestUpdateCheck() , andsetUninstallURL() . - Helper utilities - methods provide utility conversion internal resource representations external formats. Methods category include getURL() . - Kiosk mode utilities - methods available ChromeOS, exist mainly support kiosk implementations. Methods category include restart() andrestartAfterDelay() `. Unpacked extension behavior unpacked extension reloaded, treated update. means chrome.runtime.onInstalled event fire \"update\" reason. includes extension reloaded chrome.runtime.reload() . Use cases Add image web page web page access asset hosted another domain, must specify resource's full URL (e.g. <img src=\"https://example.com/logo.png\"> ). true include extension asset web page. two differences extension's assets must exposed web accessible resources typically content scripts responsible injecting extension assets. example, extension add logo.png page content script injected using runtime.getURL() create fully-qualified URL. first, asset must declared web accessible resource manifest. manifest.json: { ... \"web_accessible_resources\": [ { \"resources\": [ \"logo.png\" ], \"matches\": [ \"https://*/*\" ] } ], ... } content.js: { // Block used avoid setting global variables const img = document.createElement('img'); img.src = chrome.runtime.getURL('logo.png'); document.body.append(img); } Send data content script service worker common extension's content scripts need data managed another part extension, like service worker. Much like two browser windows opened web page, two contexts cannot directly access other's values. Instead, extension use message passing coordinate across different contexts. example, content script needs data extension's service worker initialize UI. get data, passes developer-defined get-user-data message service worker, responds copy user's information. content.js: // 1. Send message service worker requesting user's data chrome.runtime.sendMessage('get-user-data', (response) => { // 3. Got asynchronous response data service worker console.log('received user data', response); initializeUI(response); }); service-worker.js: // Example simple user data object const user = { username: 'demo-user' }; chrome.runtime.onMessage.addListener((message, sender, sendResponse) => { // 2. page requested user data, respond copy `user` (message === 'get-user-data') { sendResponse(user); } }); Gather feedback uninstall Many extensions use post-uninstall surveys understand extension could better serve users improve retention. following example shows add functionality. background.js: chrome.runtime.onInstalled.addListener(details => { (details.reason === chrome.runtime.OnInstalledReason.INSTALL) { chrome.runtime.setUninstallURL('https://example.com/extension-survey'); } }); Examples See Manifest V3 - Web Accessible Resources demo Runtime API examples. Types ContextFilter filter match certain extension contexts. Matching contexts must match specified filters; filter specified matches available contexts. Thus, filter `{}` match available contexts. Properties - contextIds string[] optional - contextTypes ContextType[] optional - documentIds string[] optional - documentOrigins string[] optional - documentUrls string[] optional - frameIds number[] optional - incognito boolean optional - tabIds number[] optional - windowIds number[] optional ContextType Enum \"TAB\" \"POPUP\" \"BACKGROUND\" \"OFFSCREEN_DOCUMENT\" \"SIDE_PANEL\" \"DEVELOPER_TOOLS\" Specifies context type tab Specifies context type extension popup window Specifies context type service worker. Specifies context type offscreen document. Specifies context type side panel. Specifies context type developer tools. ExtensionContext context hosting extension content. Properties - contextId string unique identifier context - contextType type context corresponds to. - documentId string optional UUID document associated context, undefined context hosted document. - documentOrigin string optional origin document associated context, undefined context hosted document. - documentUrl string optional URL document associated context, undefined context hosted document. - frameId number ID frame context, -1 context hosted frame. - incognito boolean Whether context associated incognito profile. - tabId number ID tab context, -1 context hosted tab. - windowId number ID window context, -1 context hosted window. MessageSender object containing information script context sent message request. Properties - documentId string optional Chrome 106+A UUID document opened connection. - documentLifecycle string optional Chrome 106+The lifecycle document opened connection time port created. Note lifecycle state document may changed since port creation. - frameId number optional frame opened connection. 0 top-level frames, positive child frames. set tab set. - id string optional ID extension opened connection, any. - nativeApplication string optional Chrome 74+The name native application opened connection, any. - origin string optional Chrome 80+The origin page frame opened connection. vary url property (e.g., about:blank) opaque (e.g., sandboxed iframes). useful identifying origin trusted can't immediately tell URL. - tab Tab optional tabs.Tab opened connection, any. property present connection opened tab (including content scripts), receiver extension, app. - tlsChannelId string optional TLS channel ID page frame opened connection, requested extension, available. - url string optional URL page frame opened connection. sender iframe, iframe's URL URL page hosts it. OnInstalledReason reason event dispatched. Enum \"install\" \"update\" \"chrome_update\" \"shared_module_update\" Specifies event reason installation. Specifies event reason extension update. Specifies event reason Chrome update. Specifies event reason update shared module. OnRestartRequiredReason reason event dispatched. 'app_update' used restart needed application updated newer version. 'os_update' used restart needed browser/OS updated newer version. 'periodic' used system runs permitted uptime set enterprise policy. Enum \"app_update\" \"os_update\" \"periodic\" Specifies event reason update app. Specifies event reason update operating system. Specifies event reason periodic restart app. PlatformArch machine's processor architecture. Enum \"arm\" \"arm64\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies processer architecture arm. Specifies processer architecture arm64. Specifies processer architecture x86-32. Specifies processer architecture x86-64. Specifies processer architecture mips. Specifies processer architecture mips64. PlatformInfo object containing information current platform. Properties - arch machine's processor architecture. - nacl_arch native client architecture. may different arch platforms. - os operating system Chrome running on. PlatformNaclArch native client architecture. may different arch platforms. Enum \"arm\" \"x86-32\" \"x86-64\" \"mips\" \"mips64\" Specifies native client architecture arm. Specifies native client architecture x86-32. Specifies native client architecture x86-64. Specifies native client architecture mips. Specifies native client architecture mips64. PlatformOs operating system Chrome running on. Enum \"mac\" \"win\" \"android\" \"cros\" \"linux\" \"openbsd\" \"fuchsia\" Specifies MacOS operating system. Specifies Windows operating system. Specifies Android operating system. Specifies Chrome operating system. Specifies Linux operating system. Specifies OpenBSD operating system. Specifies Fuchsia operating system. Port object allows two way communication pages. See Long-lived connections information. Properties - name string name port, specified call runtime.connect . - onDisconnect Event<functionvoidvoid> Fired port disconnected end(s). runtime.lastError may set port disconnected error. port closed via disconnect, event fired end. event fired (see also Port lifetime).The onDisconnect.addListener function looks like:(callback: function) => {...} - onMessage Event<functionvoidvoid> event fired postMessage called end port. onMessage.addListener function looks like:(callback: function) => {...} - sender MessageSender optional property present ports passed onConnect / onConnectExternal / onConnectNative listeners. - disconnect void Immediately disconnect port. Calling disconnect() already-disconnected port effect. port disconnected, new events dispatched port.The disconnect function looks like:() => {...} - postMessage void Send message end port. port disconnected, error thrown. postMessage function looks like:(message: any) => {...} - message Chrome 52+The message send. object JSON-ifiable. - RequestUpdateCheckStatus Result update check. Enum \"throttled\" \"no_update\" \"update_available\" Specifies status check throttled. occur repeated checks within short amount time. Specifies available updates install. Specifies available update install. Properties id ID extension/app. Type string lastError Populated error message calling API function fails; otherwise undefined. defined within scope function's callback. error produced, runtime.lastError accessed within callback, message logged console listing API function produced error. API functions return promises set property. Type object Properties - message string optional Details error occurred. Methods connect() chrome.runtime.connect( extensionId?: string, connectInfo?: object, ) Attempts connect listeners within extension (such background page), extensions/apps. useful content scripts connecting extension processes, inter-app/extension communication, web messaging. Note connect listeners content script. Extensions may connect content scripts embedded tabs via tabs.connect . Parameters - extensionId string optional ID extension connect to. omitted, connection attempted extension. Required sending messages web page web messaging. - connectInfo object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onConnectExternal processes listening connection event. - name string optional passed onConnect processes listening connection event. - Returns - Port messages sent received. port's onDisconnect event fired extension exist. connectNative() chrome.runtime.connectNative( application: string, ) Connects native application host machine. method requires \"nativeMessaging\" permission. See Native Messaging information. Parameters - application string name registered application connect to. Returns - Port messages sent received application getBackgroundPage() chrome.runtime.getBackgroundPage( callback?: function, ) Background pages exist MV3 extensions. Retrieves JavaScript 'window' object background page running inside current extension/app. background page event page, system ensure loaded calling callback. background page, error set. Parameters - callback function optional callback parameter looks like:(backgroundPage?: Window) => void - backgroundPage Window optional JavaScript 'window' object background page. - Returns - Promise<Window | undefined> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getContexts() chrome.runtime.getContexts( filter: ContextFilter, callback?: function, ) Fetches information active contexts associated extension Parameters - filter filter find matching contexts. context matches matches specified fields filter. unspecified field filter matches contexts. - callback function optional callback parameter looks like:(contexts: ExtensionContext[]) => void - contexts matching contexts, any. - Returns - Promise<ExtensionContext[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getManifest() chrome.runtime.getManifest() Returns details app extension manifest. object returned serialization full manifest file. Returns - object manifest details. getPackageDirectoryEntry() chrome.runtime.getPackageDirectoryEntry( callback?: function, ) Returns DirectoryEntry package directory. Parameters - callback function optional callback parameter looks like:(directoryEntry: DirectoryEntry) => void - directoryEntry DirectoryEntry - Returns - Promise<DirectoryEntry> Chrome 122+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getPlatformInfo() chrome.runtime.getPlatformInfo( callback?: function, ) Returns information current platform. Parameters - callback function optional callback parameter looks like:(platformInfo: PlatformInfo) => void - platformInfo - Returns - Promise<PlatformInfo> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getURL() chrome.runtime.getURL( path: string, ) Converts relative path within app/extension install directory fully-qualified URL. Parameters - path string path resource within app/extension expressed relative install directory. Returns - string fully-qualified URL resource. openOptionsPage() chrome.runtime.openOptionsPage( callback?: function, ) Open Extension's options page, possible. precise behavior may depend manifest's options_ui options_page key, Chrome happens support time. example, page may opened new tab, within chrome://extensions, within App, may focus open options page. never cause caller page reload. Extension declare options page, Chrome failed create one reason, callback set lastError . Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.runtime.reload() Reloads app extension. method supported kiosk mode. kiosk mode, use chrome.runtime.restart() method. requestUpdateCheck() chrome.runtime.requestUpdateCheck( callback?: function, ) Requests immediate update check done app/extension. Important: extensions/apps use method, since Chrome already automatic checks every hours, listen runtime.onUpdateAvailable event without needing call requestUpdateCheck. method appropriate call limited circumstances, extension talks backend service, backend service determined client extension version far date like prompt user update. uses requestUpdateCheck, calling unconditionally based repeating timer, probably serve waste client, network, server resources. Note: called callback, instead returning object function return two properties separate arguments passed callback. Parameters - callback function optional callback parameter looks like:(result: object) => void - result object Chrome 109+RequestUpdateCheckResult object holds status update check details result update available - status Result update check. - version string optional update available, contains version available update. - - Returns - Promise<object> Chrome 109+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restart() chrome.runtime.restart() Restart ChromeOS device app runs kiosk mode. Otherwise, no-op. restartAfterDelay() chrome.runtime.restartAfterDelay( seconds: number, callback?: function, ) Restart ChromeOS device app runs kiosk mode given seconds. called time ends, reboot delayed. called value -1, reboot cancelled. no-op non-kiosk mode. allowed called repeatedly first extension invoke API. Parameters - seconds number Time wait seconds rebooting device, -1 cancel scheduled reboot. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.runtime.sendMessage( extensionId?: string, message: any, options?: object, callback?: function, ) Sends single message event listeners within extension different extension/app. Similar runtime.connect sends single message, optional response. sending extension, runtime.onMessage event fired every frame extension (except sender's frame), runtime.onMessageExternal , different extension. Note extensions cannot send messages content scripts using method. send messages content scripts, use tabs.sendMessage . Parameters - extensionId string optional ID extension send message to. omitted, message sent extension/app. Required sending messages web page web messaging. - message message send. message JSON-ifiable object. - options object optional - includeTlsChannelId boolean optional Whether TLS channel ID passed onMessageExternal processes listening connection event. - - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting extension, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendNativeMessage() chrome.runtime.sendNativeMessage( application: string, message: object, callback?: function, ) Send single message native application. method requires \"nativeMessaging\" permission. Parameters - application string name native messaging host. - message object message passed native messaging host. - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response response message sent native messaging host. error occurs connecting native messaging host, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setUninstallURL() chrome.runtime.setUninstallURL( url: string, callback?: function, ) Sets URL visited upon uninstallation. may used clean server-side data, analytics, implement surveys. Maximum 1023 characters. Parameters - url string URL opened extension uninstalled. URL must http: https: scheme. Set empty string open new tab upon uninstallation. - callback function optional Chrome 45+The callback parameter looks like:() => void Returns - Promise<void> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBrowserUpdateAvailable chrome.runtime.onBrowserUpdateAvailable.addListener( callback: function, ) Please use runtime.onRestartRequired . Fired Chrome update available, installed immediately browser restart required. Parameters - callback function callback parameter looks like:() => void onConnect chrome.runtime.onConnect.addListener( callback: function, ) Fired connection made either extension process content script (by runtime.connect ). onConnectExternal chrome.runtime.onConnectExternal.addListener( callback: function, ) Fired connection made another extension (by runtime.connect ), externally connectable web site. onConnectNative chrome.runtime.onConnectNative.addListener( callback: function, ) Fired connection made native application. event requires \"nativeMessaging\" permission. supported Chrome OS. onInstalled chrome.runtime.onInstalled.addListener( callback: function, ) Fired extension first installed, extension updated new version, Chrome updated new version. Parameters - callback function callback parameter looks like:(details: object) => void - details object - id string optional Indicates ID imported shared module extension updated. present 'reason' 'shared_module_update'. - previousVersion string optional Indicates previous version extension, updated. present 'reason' 'update'. - reason reason event dispatched. - - onMessage chrome.runtime.onMessage.addListener( callback: function, ) Fired message sent either extension process (by runtime.sendMessage ) content script (by tabs.sendMessage ). Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onMessageExternal chrome.runtime.onMessageExternal.addListener( callback: function, ) Fired message sent another extension (by runtime.sendMessage ). Cannot used content script. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined - onRestartRequired chrome.runtime.onRestartRequired.addListener( callback: function, ) Fired app device runs needs restarted. app close windows earliest convenient time let restart happen. app nothing, restart enforced 24-hour grace period passed. Currently, event fired Chrome OS kiosk apps. Parameters - callback function callback parameter looks like:(reason: OnRestartRequiredReason) => void - reason - onStartup chrome.runtime.onStartup.addListener( callback: function, ) Fired profile extension installed first starts up. event fired incognito profile started, even extension operating 'split' incognito mode. Parameters - callback function callback parameter looks like:() => void onSuspend chrome.runtime.onSuspend.addListener( callback: function, ) Sent event page unloaded. gives extension opportunity clean up. Note since page unloading, asynchronous operations started handling event guaranteed complete. activity event page occurs gets unloaded onSuspendCanceled event sent page unloaded. Parameters - callback function callback parameter looks like:() => void onSuspendCanceled chrome.runtime.onSuspendCanceled.addListener( callback: function, ) Sent onSuspend indicate app unloaded all. Parameters - callback function callback parameter looks like:() => void onUpdateAvailable chrome.runtime.onUpdateAvailable.addListener( callback: function, ) Fired update available, installed immediately app currently running. nothing, update installed next time background page gets unloaded, want installed sooner explicitly call chrome.runtime.reload(). extension using persistent background page, background page course never gets unloaded, unless call chrome.runtime.reload() manually response event update get installed next time Chrome restarts. handlers listening event, extension persistent background page, behaves chrome.runtime.reload() called response event. Parameters - callback function callback parameter looks like:(details: object) => void - details object - version string version number available update. - - onUserScriptConnect chrome.runtime.onUserScriptConnect.addListener( callback: function, ) Fired connection made user script extension. onUserScriptMessage chrome.runtime.onUserScriptMessage.addListener( callback: function, ) Fired message sent user script associated extension. Parameters - callback function callback parameter looks like:(message: any, sender: MessageSender, sendResponse: function) => boolean | undefined - message - sender - sendResponse function sendResponse parameter looks like:() => void - returns boolean | undefined -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/scripting", "title": "chrome.scripting | API | Chrome for Developers", "text": "Description Use chrome.scripting API execute script different contexts. Permissions scripting Availability Manifest use chrome.scripting API, declare \"scripting\" permission manifest plus host permissions pages inject scripts into. Use \"host_permissions\" key \"activeTab\" permission, grants temporary host permissions. following example uses activeTab permission. { \"name\": \"Scripting Extension\", \"manifest_version\": 3, \"permissions\": [\"scripting\", \"activeTab\"], ... } Concepts usage use chrome.scripting API inject JavaScript CSS websites. similar content scripts. using chrome.scripting namespace, extensions make decisions runtime. Injection targets use target parameter specify target inject JavaScript CSS into. required field tabId . default, injection run main frame specified tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected\")); run frames specified tab, set allFrames boolean true . function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected frames\")); also inject specific frames tab specifying individual frame IDs. information frame IDs, see chrome.webNavigation API. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), frameIds : [ frameId1, frameId2 ]}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected target frames\")); Injected code Extensions specify code injected either via external file runtime variable. Files Files specified strings paths relative extension's root directory. following code inject file script.js main frame tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"injected script file\")); Runtime functions injecting JavaScript scripting.executeScript() , specify function executed instead file. function function variable available current extension context. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : getTitle, }) .then(() => console.log(\"injected function\")); function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor() { document.body.style.backgroundColor = getUserColor(); } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, }) .then(() => console.log(\"injected function\")); work around using args property: function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor(backgroundColor) { document.body.style.backgroundColor = backgroundColor; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, args : [ getUserColor() ], }) .then(() => console.log(\"injected function\")); Runtime strings injecting CSS within page, also specify string used css property. option available scripting.insertCSS() ; can't execute string using scripting.executeScript() . function getTabId() { ... } const css = \"body { background-color: red; }\"; chrome.scripting .insertCSS({ target : {tabId : getTabId()}, css : css, }) .then(() => console.log(\"CSS injected\")); Handle results results executing JavaScript passed extension. single result included per-frame. main frame guaranteed first index resulting array; frames non-deterministic order. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : getTitle, }) .then(injectionResults => { (const {frameId, result} injectionResults) { console.log(`Frame ${frameId} result:`, result); } }); scripting.insertCSS() return results. Promises resulting value script execution promise, Chrome wait promise settle return resulting value. function getTabId() { ... } async function addIframe() { const iframe = document.createElement(\"iframe\"); const loadComplete = new Promise(resolve => iframe.addEventListener(\"load\", resolve)); iframe.src = \"https://example.com\"; document.body.appendChild(iframe); await loadComplete; return iframe.contentWindow.document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : addIframe, }) .then(injectionResults => { (const frameResult injectionResults) { const {frameId, result} = frameResult; console.log(`Frame ${frameId} result:`, result); } }); Examples Unregister dynamic content scripts following snippet contains function unregisters dynamic content scripts extension previously registered. async function unregisterAllDynamicContentScripts() { try { const scripts = await chrome.scripting.getRegisteredContentScripts(); const scriptIds = scripts.map(script => script.id); return chrome.scripting.unregisterContentScripts(scriptIds); } catch (error) { const message = [ \"An unexpected error occurred while\", \"unregistering dynamic content scripts.\", ].join(\" \"); throw new Error(message, {cause : error}); } } try chrome.scripting API, install scripting sample Chrome extension samples repository. Types ContentScriptFilter Properties - ids string[] optional specified, getRegisteredContentScripts return scripts id specified list. CSSInjection Properties - css string optional string containing CSS inject. Exactly one files andcss must specified. - files string[] optional path CSS files inject, relative extension's root directory. Exactly one files andcss must specified. - origin StyleOrigin optional style origin injection. Defaults 'AUTHOR' . - target Details specifying target insert CSS. ExecutionWorld JavaScript world script execute within. Enum \"ISOLATED\" \"MAIN\" Specifies isolated world, execution environment unique extension. Specifies main world DOM, execution environment shared host page's JavaScript. InjectionResult Properties - documentId string Chrome 106+The document associated injection. - frameId number Chrome 90+The frame associated injection. - result optional result script execution. InjectionTarget Properties - allFrames boolean optional Whether script inject frames within tab. Defaults false. must true frameIds specified. - documentIds string[] optional Chrome 106+The IDs specific documentIds inject into. must set frameIds set. - frameIds number[] optional IDs specific frames inject into. - tabId number ID tab inject. RegisteredContentScript Properties - allFrames boolean optional specified true, inject frames, even frame top-most frame tab. frame checked independently URL requirements; inject child frames URL requirements met. Defaults false, meaning top frame matched. - css string[] optional list CSS files injected matching pages. injected order appear array, DOM constructed displayed page. - excludeMatches string[] optional Excludes pages content script would otherwise injected into. See Match Patterns details syntax strings. - id string id content script, specified API call. Must start '_' reserved prefix generated script IDs. - js string[] optional list JavaScript files injected matching pages. injected order appear array. - matchOriginAsFallback boolean optional Chrome 119+Indicates whether script injected frames URL contains unsupported scheme; specifically: about:, data:, blob:, filesystem:. cases, URL's origin checked determine script injected. origin null (as case data: URLs) used origin either frame created current frame frame initiated navigation frame. Note may parent frame. - matches string[] optional Specifies pages content script injected into. See Match Patterns details syntax strings. Must specified registerContentScripts . - persistAcrossSessions boolean optional Specifies content script persist future sessions. default true. - runAt RunAt optional Specifies JavaScript files injected web page. preferred default value document_idle . - world ExecutionWorld optional Chrome 102+The JavaScript \"world\" run script in. Defaults ISOLATED . ScriptInjection Properties - args any[] optional Chrome 92+The arguments pass provided function. valid func parameter specified. arguments must JSON-serializable. - files string[] optional path JS CSS files inject, relative extension's root directory. Exactly one files orfunc must specified. - injectImmediately boolean optional Chrome 102+Whether injection triggered target soon possible. Note guarantee injection occur prior page load, page may already loaded time script reaches target. - target Details specifying target inject script. - world ExecutionWorld optional Chrome 95+The JavaScript \"world\" run script in. Defaults ISOLATED . - func void optional Chrome 92+A JavaScript function inject. function serialized, deserialized injection. means bound parameters execution context lost. Exactly one files orfunc must specified.The func function looks like:() => {...} StyleOrigin origin style change. See style origins info. Enum \"AUTHOR\" \"USER\" Methods executeScript() chrome.scripting.executeScript( injection: ScriptInjection, callback?: function, ) Injects script target context. default, script run document_idle , immediately page already loaded. injectImmediately property set, script inject without waiting, even page finished loading. script evaluates promise, browser wait promise settle return resulting value. Parameters - injection details script inject. - callback function optional callback parameter looks like:(results: InjectionResult[]) => void - results - Returns - Promise<InjectionResult[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRegisteredContentScripts() chrome.scripting.getRegisteredContentScripts( filter?: ContentScriptFilter, callback?: function, ) Returns dynamically registered content scripts extension match given filter. Parameters - filter ContentScriptFilter optional object filter extension's dynamically registered scripts. - callback function optional callback parameter looks like:(scripts: RegisteredContentScript[]) => void - scripts - Returns - Promise<RegisteredContentScript[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. insertCSS() chrome.scripting.insertCSS( injection: CSSInjection, callback?: function, ) Inserts CSS stylesheet target context. multiple frames specified, unsuccessful injections ignored. Parameters - injection details styles insert. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. registerContentScripts() chrome.scripting.registerContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Registers one content scripts extension. Parameters - scripts Contains list scripts registered. errors script parsing/file validation, IDs specified already exist, scripts registered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCSS() chrome.scripting.removeCSS( injection: CSSInjection, callback?: function, ) Removes CSS stylesheet previously inserted extension target context. Parameters - injection details styles remove. Note css ,files , andorigin properties must exactly match stylesheet inserted throughinsertCSS . Attempting remove non-existent stylesheet no-op. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unregisterContentScripts() chrome.scripting.unregisterContentScripts( filter?: ContentScriptFilter, callback?: function, ) Unregisters content scripts extension. Parameters - filter ContentScriptFilter optional specified, unregisters dynamic content scripts match filter. Otherwise, extension's dynamic content scripts unregistered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateContentScripts() chrome.scripting.updateContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Updates one content scripts extension. Parameters - scripts Contains list scripts updated. property updated existing script specified object. errors script parsing/file validation, IDs specified correspond fully registered script, scripts updated. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/scripting", "title": "chrome.scripting | API | Chrome for Developers", "text": "Description Use chrome.scripting API execute script different contexts. Permissions scripting Availability Manifest use chrome.scripting API, declare \"scripting\" permission manifest plus host permissions pages inject scripts into. Use \"host_permissions\" key \"activeTab\" permission, grants temporary host permissions. following example uses activeTab permission. { \"name\": \"Scripting Extension\", \"manifest_version\": 3, \"permissions\": [\"scripting\", \"activeTab\"], ... } Concepts usage use chrome.scripting API inject JavaScript CSS websites. similar content scripts. using chrome.scripting namespace, extensions make decisions runtime. Injection targets use target parameter specify target inject JavaScript CSS into. required field tabId . default, injection run main frame specified tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected\")); run frames specified tab, set allFrames boolean true . function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected frames\")); also inject specific frames tab specifying individual frame IDs. information frame IDs, see chrome.webNavigation API. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId(), frameIds : [ frameId1, frameId2 ]}, files : [ \"script.js\" ], }) .then(() => console.log(\"script injected target frames\")); Injected code Extensions specify code injected either via external file runtime variable. Files Files specified strings paths relative extension's root directory. following code inject file script.js main frame tab. function getTabId() { ... } chrome.scripting .executeScript({ target : {tabId : getTabId()}, files : [ \"script.js\" ], }) .then(() => console.log(\"injected script file\")); Runtime functions injecting JavaScript scripting.executeScript() , specify function executed instead file. function function variable available current extension context. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : getTitle, }) .then(() => console.log(\"injected function\")); function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor() { document.body.style.backgroundColor = getUserColor(); } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, }) .then(() => console.log(\"injected function\")); work around using args property: function getTabId() { ... } function getUserColor() { ... } function changeBackgroundColor(backgroundColor) { document.body.style.backgroundColor = backgroundColor; } chrome.scripting .executeScript({ target : {tabId : getTabId()}, func : changeBackgroundColor, args : [ getUserColor() ], }) .then(() => console.log(\"injected function\")); Runtime strings injecting CSS within page, also specify string used css property. option available scripting.insertCSS() ; can't execute string using scripting.executeScript() . function getTabId() { ... } const css = \"body { background-color: red; }\"; chrome.scripting .insertCSS({ target : {tabId : getTabId()}, css : css, }) .then(() => console.log(\"CSS injected\")); Handle results results executing JavaScript passed extension. single result included per-frame. main frame guaranteed first index resulting array; frames non-deterministic order. function getTabId() { ... } function getTitle() { return document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : getTitle, }) .then(injectionResults => { (const {frameId, result} injectionResults) { console.log(`Frame ${frameId} result:`, result); } }); scripting.insertCSS() return results. Promises resulting value script execution promise, Chrome wait promise settle return resulting value. function getTabId() { ... } async function addIframe() { const iframe = document.createElement(\"iframe\"); const loadComplete = new Promise(resolve => iframe.addEventListener(\"load\", resolve)); iframe.src = \"https://example.com\"; document.body.appendChild(iframe); await loadComplete; return iframe.contentWindow.document.title; } chrome.scripting .executeScript({ target : {tabId : getTabId(), allFrames : true}, func : addIframe, }) .then(injectionResults => { (const frameResult injectionResults) { const {frameId, result} = frameResult; console.log(`Frame ${frameId} result:`, result); } }); Examples Unregister dynamic content scripts following snippet contains function unregisters dynamic content scripts extension previously registered. async function unregisterAllDynamicContentScripts() { try { const scripts = await chrome.scripting.getRegisteredContentScripts(); const scriptIds = scripts.map(script => script.id); return chrome.scripting.unregisterContentScripts(scriptIds); } catch (error) { const message = [ \"An unexpected error occurred while\", \"unregistering dynamic content scripts.\", ].join(\" \"); throw new Error(message, {cause : error}); } } try chrome.scripting API, install scripting sample Chrome extension samples repository. Types ContentScriptFilter Properties - ids string[] optional specified, getRegisteredContentScripts return scripts id specified list. CSSInjection Properties - css string optional string containing CSS inject. Exactly one files andcss must specified. - files string[] optional path CSS files inject, relative extension's root directory. Exactly one files andcss must specified. - origin StyleOrigin optional style origin injection. Defaults 'AUTHOR' . - target Details specifying target insert CSS. ExecutionWorld JavaScript world script execute within. Enum \"ISOLATED\" \"MAIN\" Specifies isolated world, execution environment unique extension. Specifies main world DOM, execution environment shared host page's JavaScript. InjectionResult Properties - documentId string Chrome 106+The document associated injection. - frameId number Chrome 90+The frame associated injection. - result optional result script execution. InjectionTarget Properties - allFrames boolean optional Whether script inject frames within tab. Defaults false. must true frameIds specified. - documentIds string[] optional Chrome 106+The IDs specific documentIds inject into. must set frameIds set. - frameIds number[] optional IDs specific frames inject into. - tabId number ID tab inject. RegisteredContentScript Properties - allFrames boolean optional specified true, inject frames, even frame top-most frame tab. frame checked independently URL requirements; inject child frames URL requirements met. Defaults false, meaning top frame matched. - css string[] optional list CSS files injected matching pages. injected order appear array, DOM constructed displayed page. - excludeMatches string[] optional Excludes pages content script would otherwise injected into. See Match Patterns details syntax strings. - id string id content script, specified API call. Must start '_' reserved prefix generated script IDs. - js string[] optional list JavaScript files injected matching pages. injected order appear array. - matchOriginAsFallback boolean optional Chrome 119+Indicates whether script injected frames URL contains unsupported scheme; specifically: about:, data:, blob:, filesystem:. cases, URL's origin checked determine script injected. origin null (as case data: URLs) used origin either frame created current frame frame initiated navigation frame. Note may parent frame. - matches string[] optional Specifies pages content script injected into. See Match Patterns details syntax strings. Must specified registerContentScripts . - persistAcrossSessions boolean optional Specifies content script persist future sessions. default true. - runAt RunAt optional Specifies JavaScript files injected web page. preferred default value document_idle . - world ExecutionWorld optional Chrome 102+The JavaScript \"world\" run script in. Defaults ISOLATED . ScriptInjection Properties - args any[] optional Chrome 92+The arguments pass provided function. valid func parameter specified. arguments must JSON-serializable. - files string[] optional path JS CSS files inject, relative extension's root directory. Exactly one files orfunc must specified. - injectImmediately boolean optional Chrome 102+Whether injection triggered target soon possible. Note guarantee injection occur prior page load, page may already loaded time script reaches target. - target Details specifying target inject script. - world ExecutionWorld optional Chrome 95+The JavaScript \"world\" run script in. Defaults ISOLATED . - func void optional Chrome 92+A JavaScript function inject. function serialized, deserialized injection. means bound parameters execution context lost. Exactly one files orfunc must specified.The func function looks like:() => {...} StyleOrigin origin style change. See style origins info. Enum \"AUTHOR\" \"USER\" Methods executeScript() chrome.scripting.executeScript( injection: ScriptInjection, callback?: function, ) Injects script target context. default, script run document_idle , immediately page already loaded. injectImmediately property set, script inject without waiting, even page finished loading. script evaluates promise, browser wait promise settle return resulting value. Parameters - injection details script inject. - callback function optional callback parameter looks like:(results: InjectionResult[]) => void - results - Returns - Promise<InjectionResult[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRegisteredContentScripts() chrome.scripting.getRegisteredContentScripts( filter?: ContentScriptFilter, callback?: function, ) Returns dynamically registered content scripts extension match given filter. Parameters - filter ContentScriptFilter optional object filter extension's dynamically registered scripts. - callback function optional callback parameter looks like:(scripts: RegisteredContentScript[]) => void - scripts - Returns - Promise<RegisteredContentScript[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. insertCSS() chrome.scripting.insertCSS( injection: CSSInjection, callback?: function, ) Inserts CSS stylesheet target context. multiple frames specified, unsuccessful injections ignored. Parameters - injection details styles insert. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. registerContentScripts() chrome.scripting.registerContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Registers one content scripts extension. Parameters - scripts Contains list scripts registered. errors script parsing/file validation, IDs specified already exist, scripts registered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. removeCSS() chrome.scripting.removeCSS( injection: CSSInjection, callback?: function, ) Removes CSS stylesheet previously inserted extension target context. Parameters - injection details styles remove. Note css ,files , andorigin properties must exactly match stylesheet inserted throughinsertCSS . Attempting remove non-existent stylesheet no-op. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. unregisterContentScripts() chrome.scripting.unregisterContentScripts( filter?: ContentScriptFilter, callback?: function, ) Unregisters content scripts extension. Parameters - filter ContentScriptFilter optional specified, unregisters dynamic content scripts match filter. Otherwise, extension's dynamic content scripts unregistered. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. updateContentScripts() chrome.scripting.updateContentScripts( scripts: RegisteredContentScript[], callback?: function, ) Updates one content scripts extension. Parameters - scripts Contains list scripts updated. property updated existing script specified object. errors script parsing/file validation, IDs specified correspond fully registered script, scripts updated. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/sessions", "title": "chrome.sessions | API | Chrome for Developers", "text": "Description Use chrome.sessions API query restore tabs windows browsing session. Permissions sessions Types Device Properties - deviceName string name foreign device. - sessions Session[] list open window sessions foreign device, sorted recently least recently modified session. Filter Properties - maxResults number optional maximum number entries fetched requested list. Omit parameter fetch maximum number entries ( sessions.MAX_SESSION_RESULTS ). Session Properties - lastModified number time window tab closed modified, represented milliseconds since epoch. - tab Tab optional tabs.Tab , entry describes tab. Either orsessions.Session.window set. - window Window optional windows.Window , entry describes window. Either orsessions.Session.tab set. Properties MAX_SESSION_RESULTS maximum number sessions.Session included requested list. Value 25 Methods getDevices() chrome.sessions.getDevices( filter?: Filter, callback?: function, ) Retrieves devices synced sessions. Parameters - filter Filter optional - callback function optional callback parameter looks like:(devices: Device[]) => void - devices Device[] list sessions.Device objects synced session, sorted order device recently modified session device least recently modified session.tabs.Tab objects sorted recency thewindows.Window thesessions.Session objects. - Returns - Promise<Device[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getRecentlyClosed() chrome.sessions.getRecentlyClosed( filter?: Filter, callback?: function, ) Gets list recently closed tabs and/or windows. Parameters - filter Filter optional - callback function optional callback parameter looks like:(sessions: Session[]) => void - sessions Session[] list closed entries reverse order closed (the recently closed tab window index 0 ). entries may contain either tabs windows. - Returns - Promise<Session[]> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. restore() chrome.sessions.restore( sessionId?: string, callback?: function, ) Reopens windows.Window tabs.Tab , optional callback run entry restored. Parameters - sessionId string optional windows.Window.sessionId , ortabs.Tab.sessionId restore. parameter specified, recently closed session restored. - callback function optional callback parameter looks like:(restoredSession: Session) => void - restoredSession sessions.Session containing restoredwindows.Window ortabs.Tab object. - Returns - Promise<Session> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onChanged chrome.sessions.onChanged.addListener( callback: function, ) Fired recently closed tabs and/or windows changed. event monitor synced sessions changes. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/storage", "title": "chrome.storage | API | Chrome for Developers", "text": "Description Use chrome.storage API store, retrieve, track changes user data. Permissions storage use storage API, declare \"storage\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"storage\" ], ... } Concepts usage Storage API provides extension-specific way persist user data state. similar web platform's storage APIs (IndexedDB, Storage), designed meet storage needs extensions. following key features: - extension contexts, including extension service worker content scripts access Storage API. - JSON serializable values stored object properties. - Storage API asynchronous bulk read write operations. - Even user clears cache browsing history, data persists. - Stored settings persist even using split incognito. - Includes exclusive read-only managed storage area enterprise policies. extensions use web storage APIs? extensions use Storage interface (accessible window.localStorage ) contexts (popup HTML pages), recommend following reasons: - Extension service workers can't use Web Storage API. - Content scripts share storage host page. - Data saved using Web Storage API lost user clears browsing history. move data web storage APIs extension storage APIs service worker: - Prepare offscreen document html page script file. script file contain conversion routine onMessage handler. - extension service worker, check chrome.storage data. - data found, call createDocument() . - returned Promise resolves, call sendMessage() start conversion routine. - Inside offscreen document's onMessage handler, call conversion routine. also nuances web storage APIs work extensions. Learn Storage Cookies article. Storage areas Storage API divided following storage areas: storage.local - Data stored locally cleared extension removed. storage limit 10 MB (5 MB Chrome 113 earlier), increased requesting \"unlimitedStorage\" permission. recommend usingstorage.local store larger amounts data. storage.managed - Managed storage read-only storage policy installed extensions managed system administrators using developer-defined schema enterprise policies. Policies analogous options configured system administrator instead user, allowing extension preconfigured users organization. information policies, see Documentation Administrators. learn managed storage area, see Manifest storage areas. storage.session - Holds data memory duration browser session. default, exposed content scripts, behavior changed setting chrome.storage.session.setAccessLevel() . storage limit 10 MB (1 MB Chrome 111 earlier). Thestorage.session interface one several recommend service workers. storage.sync - syncing enabled, data synced Chrome browser user logged into. disabled, behaves like storage.local . Chrome stores data locally browser offline resumes syncing back online. quota limitation approximately 100 KB, 8 KB per item. recommend usingstorage.sync preserve user settings across synced browsers. working sensitive user data, instead usestorage.session . Storage throttling limits Storage API following usage limitations: - Storing data often comes performance costs, API includes storage quotas. recommend careful data store lose ability store data. - Storage take time complete. Make sure structure code account time. details storage area limitations happens they're exceeded, see quota information sync , local , session . Use cases following sections demonstrate common use cases Storage API. Synchronous response storage updates track changes made storage, add listener onChanged event. anything changes storage, event fires. sample code listens changes: background.js: chrome.storage.onChanged.addListener((changes, namespace) => { (let [key, { oldValue, newValue }] Object.entries(changes)) { console.log( `Storage key \"${key}\" namespace \"${namespace}\" changed.`, `Old value \"${oldValue}\", new value \"${newValue}\".` ); } }); take idea even further. example, options page allows user toggle \"debug mode\" (implementation shown here). options page immediately saves new settings storage.sync , service worker uses storage.onChanged apply setting soon possible. options.html: <!-- type=\"module\" allows use top level await --> <script defer src=\"options.js\" type=\"module\"></script> <form id=\"optionsForm\"> <label for=\"debug\"> <input type=\"checkbox\" name=\"debug\" id=\"debug\"> Enable debug mode </label> </form> options.js: // In-page cache user's options const options = {}; const optionsForm = document.getElementById(\"optionsForm\"); // Immediately persist options changes optionsForm.debug.addEventListener(\"change\", (event) => { options.debug = event.target.checked; chrome.storage.sync.set({ options }); }); // Initialize form user's option settings const data = await chrome.storage.sync.get(\"options\"); Object.assign(options, data.options); optionsForm.debug.checked = Boolean(options.debug); background.js: function setDebugMode() { /* ... */ } // Watch changes user's options & apply chrome.storage.onChanged.addListener((changes, area) => { (area === 'sync' && changes.options?.newValue) { const debugMode = Boolean(changes.options.newValue.debug); console.log('enable debug mode?', debugMode); setDebugMode(debugMode); } }); Asynchronous preload storage service workers run time, Manifest V3 extensions sometimes need asynchronously load data storage execute event handlers. this, following snippet uses async action.onClicked event handler waits storageCache global populated executing logic. background.js: // expose data retrieve storage.sync. const storageCache = { count: 0 }; // Asynchronously retrieve data storage.sync, cache it. const initStorageCache = chrome.storage.sync.get().then((items) => { // Copy data retrieved storage storageCache. Object.assign(storageCache, items); }); chrome.action.onClicked.addListener(async (tab) => { try { await initStorageCache; } catch (e) { // Handle error occurred storage initialization. } // Normal action handler logic. storageCache.count++; storageCache.lastTabId = tab.id; chrome.storage.sync.set(storageCache); }); Examples following samples demonstrate local , sync , session storage areas: Local chrome.storage.local.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.local.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); Sync chrome.storage.sync.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.sync.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); Session chrome.storage.session.set({ key: value }).then(() => { console.log(\"Value set\"); }); chrome.storage.session.get([\"key\"]).then((result) => { console.log(\"Value \" + result.key); }); see demos Storage API, explore following samples: Types AccessLevel storage area's access level. Enum \"TRUSTED_CONTEXTS\" \"TRUSTED_AND_UNTRUSTED_CONTEXTS\" Specifies contexts originating extension itself. Specifies contexts originating outside extension. StorageArea Properties - onChanged Event<functionvoidvoid> Chrome 73+Fired one items change. onChanged.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(changes: object) => void - changes object - - - clear void PromiseRemoves items storage. clear function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets one items storage. get function looks like:(keys?: string | string[] | object, callback?: function) => {...} - keys string | string[] | object optional single key get, list keys get, dictionary specifying default values (see description object). empty list object return empty result object. Pass null get entire contents storage. - callback function optional callback parameter looks like:(items: object) => void - items object Object items key-value mappings. - - returns Promise<object> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getBytesInUse void PromiseGets amount space (in bytes) used one items. getBytesInUse function looks like:(keys?: string | string[], callback?: function) => {...} - keys string | string[] optional single key list keys get total usage for. empty list return 0. Pass null get total usage storage. - callback function optional callback parameter looks like:(bytesInUse: number) => void - bytesInUse number Amount space used storage, bytes. - - returns Promise<number> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - getKeys void Promise Chrome 130+Gets keys storage. getKeys function looks like:(callback?: function) => {...} - callback function optional callback parameter looks like:(keys: string[]) => void - keys string[] Array keys read storage. - - returns Promise<string[]> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - remove void PromiseRemoves one items storage. remove function looks like:(keys: string | string[], callback?: function) => {...} - keys string | string[] single key list keys items remove. - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseSets multiple items. set function looks like:(items: object, callback?: function) => {...} - items object object gives key/value pair update storage with. key/value pairs storage affected. Primitive values numbers serialize expected. Values typeof \"object\" and\"function\" typically serialize to{} , exception ofArray (serializes expected),Date , andRegex (serialize using theirString representation). - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - setAccessLevel void Promise Chrome 102+Sets desired access level storage area. default trusted contexts. setAccessLevel function looks like:(accessOptions: object, callback?: function) => {...} - accessOptions object - accessLevel access level storage area. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - StorageChange Properties - newValue optional new value item, new value. - oldValue optional old value item, old value. Properties local Items local storage area local machine. Type StorageArea & object Properties - QUOTA_BYTES 10485760 maximum amount (in bytes) data stored local storage, measured JSON stringification every value plus every key's length. value ignored extension unlimitedStorage permission. Updates would cause limit exceeded fail immediately setruntime.lastError using callback, rejected Promise using async/await. managed Items managed storage area set enterprise policy configured domain administrator, read-only extension; trying modify namespace results error. information configuring policy, see Manifest storage areas. Type session Items session storage area stored in-memory persisted disk. Type StorageArea & object Properties - QUOTA_BYTES 10485760 maximum amount (in bytes) data stored memory, measured estimating dynamically allocated memory usage every value key. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. sync Items sync storage area synced using Chrome Sync. Type StorageArea & object Properties - MAX_ITEMS 512 maximum number items stored sync storage. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE 1000000 DeprecatedThe storage.sync API longer sustained write operation quota. - MAX_WRITE_OPERATIONS_PER_HOUR 1800 maximum number set ,remove , orclear operations performed hour. 1 every 2 seconds, lower ceiling short term higher writes-per-minute limit.Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - MAX_WRITE_OPERATIONS_PER_MINUTE 120 maximum number set ,remove , orclear operations performed minute. 2 per second, providing higher throughput writes-per-hour shorter period time.Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - QUOTA_BYTES 102400 maximum total amount (in bytes) data stored sync storage, measured JSON stringification every value plus every key's length. Updates would cause limit exceeded fail immediately set runtime.lastError using callback, Promise rejected. - QUOTA_BYTES_PER_ITEM 8192 maximum size (in bytes) individual item sync storage, measured JSON stringification value plus key length. Updates containing items larger limit fail immediately set runtime.lastError using callback, Promise rejected. Events onChanged chrome.storage.onChanged.addListener( callback: function, ) Fired one items change. Parameters - callback function callback parameter looks like:(changes: object, areaName: string) => void - changes object - areaName string -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabGroups", "title": "chrome.tabGroups | API | Chrome for Developers", "text": "Description Use chrome.tabGroups API interact browser's tab grouping system. use API modify rearrange tab groups browser. group ungroup tabs, query tabs groups, use chrome.tabs API. Permissions tabGroups Availability Types Color group's color. Enum \"grey\" \"blue\" \"red\" \"yellow\" \"green\" \"pink\" \"purple\" \"cyan\" \"orange\" TabGroup Properties - collapsed boolean Whether group collapsed. collapsed group one whose tabs hidden. - color group's color. - id number ID group. Group IDs unique within browser session. - title string optional title group. - windowId number ID window contains group. Properties TAB_GROUP_ID_NONE ID represents absence group. Value -1 Methods get() chrome.tabGroups.get( groupId: number, callback?: function, ) Retrieves details specified group. Parameters - groupId number - callback function optional callback parameter looks like:(group: TabGroup) => void - group - Returns - Promise<TabGroup> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.tabGroups.move( groupId: number, moveProperties: object, callback?: function, ) Moves group tabs within window, new window. Parameters - groupId number ID group move. - moveProperties object - index number position move group to. Use -1 place group end window. - windowId number optional window move group to. Defaults window group currently in. Note groups moved windows windows.WindowType type\"normal\" . - - callback function optional callback parameter looks like:(group?: TabGroup) => void - group TabGroup optional Details moved group. - Returns - Promise<TabGroup | undefined> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.tabGroups.query( queryInfo: object, callback?: function, ) Gets groups specified properties, groups properties specified. Parameters - queryInfo object - collapsed boolean optional Whether groups collapsed. - color Color optional color groups. - title string optional Match group titles pattern. - windowId number optional ID parent window, windows.WINDOW_ID_CURRENT current window. - - callback function optional callback parameter looks like:(result: TabGroup[]) => void - result TabGroup[] - Returns - Promise<TabGroup[]> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.tabGroups.update( groupId: number, updateProperties: object, callback?: function, ) Modifies properties group. Properties specified updateProperties modified. Parameters - groupId number ID group modify. - updateProperties object - collapsed boolean optional Whether group collapsed. - color Color optional color group. - title string optional title group. - - callback function optional callback parameter looks like:(group?: TabGroup) => void - group TabGroup optional Details updated group. - Returns - Promise<TabGroup | undefined> Chrome 90+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onCreated chrome.tabGroups.onCreated.addListener( callback: function, ) Fired group created. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onMoved chrome.tabGroups.onMoved.addListener( callback: function, ) Fired group moved within window. Move events still fired individual tabs within group, well group itself. event fired group moved windows; instead, removed one window created another. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onRemoved chrome.tabGroups.onRemoved.addListener( callback: function, ) Fired group closed, either directly user automatically contained zero tabs. Parameters - callback function callback parameter looks like:(group: TabGroup) => void - group - onUpdated chrome.tabGroups.onUpdated.addListener( callback: function, ) Fired group updated."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tabs", "title": "chrome.tabs | API | Chrome for Developers", "text": "Description Use chrome.tabs API interact browser's tab system. use API create, modify, rearrange tabs browser. Tabs API offers features manipulating managing tabs, also detect language tab, take screenshot, communicate tab's content scripts. Permissions features require permissions use. example: creating new tab, reloading tab, navigating another URL, etc. three permissions developers aware working Tabs API. - \"tabs\" permission permission give access chrome.tabs namespace. Instead, grants extension ability calltabs.query() four sensitive properties ontabs.Tab instances:url ,pendingUrl ,title , andfavIconUrl .{ \"name\": \"My extension\", ... \"permissions\": [ \"tabs\" ], ... } - Host permissions Host permissions allow extension read query matching tab's four sensitive tabs.Tab properties. also interact directly matching tabs using methods astabs.captureVisibleTab() ,scripting.executeScript() ,scripting.insertCSS() , andscripting.removeCSS() .{ \"name\": \"My extension\", ... \"host_permissions\": [ \"http://*/*\", \"https://*/*\" ], ... } - \"activeTab\" permission activeTab grants extension temporary host permission current tab response user invocation. Unlike host permissions,activeTab trigger warnings.{ \"name\": \"My extension\", ... \"permissions\": [ \"activeTab\" ], ... } Use cases following sections demonstrate common use cases. Open extension page new tab common pattern extensions open onboarding page new tab extension installed. following example shows this. background.js: chrome.runtime.onInstalled.addListener(({reason}) => { (reason === 'install') { chrome.tabs.create({ url: \"onboarding.html\" }); } }); Get current tab example demonstrates extension's service worker retrieve active tab currently-focused window (or recently-focused window, Chrome windows focused). usually thought user's current tab. async function getCurrentTab() { let queryOptions = { active: true, lastFocusedWindow: true }; // `tab` either `tabs.Tab` instance `undefined`. let [tab] = await chrome.tabs.query(queryOptions); return tab; } function getCurrentTab(callback) { let queryOptions = { active: true, lastFocusedWindow: true }; chrome.tabs.query(queryOptions, ([tab]) => { (chrome.runtime.lastError) console.error(chrome.runtime.lastError); // `tab` either `tabs.Tab` instance `undefined`. callback(tab); }); } Mute specified tab example shows extension toggle muted state given tab. async function toggleMuteState(tabId) { const tab = await chrome.tabs.get(tabId); const muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, {muted}); console.log(`Tab ${tab.id} ${muted ? \"muted\" : \"unmuted\"}`); } function toggleMuteState(tabId) { chrome.tabs.get(tabId, async (tab) => { let muted = !tab.mutedInfo.muted; await chrome.tabs.update(tabId, { muted }); console.log(`Tab ${tab.id} ${ muted ? \"muted\" : \"unmuted\" }`); }); } Move current tab first position clicked example shows move tab drag may may progress. example uses chrome.tabs.move , use waiting pattern calls modify tabs drag progress. chrome.tabs.onActivated.addListener(moveToFirstPosition); async function moveToFirstPosition(activeInfo) { try { await chrome.tabs.move(activeInfo.tabId, {index: 0}); console.log(\"Success.\"); } catch (error) { (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPosition(activeInfo), 50); } else { console.error(error); } } } chrome.tabs.onActivated.addListener(moveToFirstPositionMV2); function moveToFirstPositionMV2(activeInfo) { chrome.tabs.move(activeInfo.tabId, { index: 0 }, () => { (chrome.runtime.lastError) { const error = chrome.runtime.lastError; (error == \"Error: Tabs cannot edited right (user may dragging tab).\") { setTimeout(() => moveToFirstPositionMV2(activeInfo), 50); } else { console.error(error); } } else { console.log(\"Success.\"); } }); } Pass message selected tab's content script example demonstrates extension's service worker communicate content scripts specific browser tabs using tabs.sendMessage() . function sendMessageToActiveTab(message) { const [tab] = await chrome.tabs.query({ active: true, lastFocusedWindow: true }); const response = await chrome.tabs.sendMessage(tab.id, message); // TODO: something response. } Extension examples Tabs API extensions demos, explore following: Types MutedInfo tab's muted state reason last state change. Properties - extensionId string optional ID extension changed muted state. set extension reason muted state last changed. - muted boolean Whether tab muted (prevented playing sound). tab may muted even played currently playing sound. Equivalent whether 'muted' audio indicator showing. - reason MutedInfoReason optional reason tab muted unmuted. set tab's mute state never changed. MutedInfoReason event caused muted state change. Enum \"user\" \"capture\" \"extension\" user input action set muted state. Tab capture started, forcing muted state change. extension, identified extensionId field, set muted state. Tab Properties - active boolean Whether tab active window. necessarily mean window focused. - audible boolean optional Chrome 45+Whether tab produced sound past couple seconds (but might heard also muted). Equivalent whether 'speaker audio' indicator showing. - autoDiscardable boolean Chrome 54+Whether tab discarded automatically browser resources low. - discarded boolean Chrome 54+Whether tab discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - favIconUrl string optional URL tab's favicon. property present extension's manifest includes \"tabs\" permission. may also empty string tab loading. - frozen boolean PendingWhether tab frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number Chrome 88+The ID group tab belongs to. - height number optional height tab pixels. - highlighted boolean Whether tab highlighted. - id number optional ID tab. Tab IDs unique within browser session. circumstances tab may assigned ID; example, querying foreign tabs using sessions API, case session ID may present. Tab ID also set tochrome.tabs.TAB_ID_NONE apps devtools windows. - incognito boolean Whether tab incognito window. - index number zero-based index tab within window. - lastAccessed number Chrome 121+The last time tab became active window number milliseconds since epoch. - mutedInfo MutedInfo optional Chrome 46+The tab's muted state reason last state change. - openerTabId number optional ID tab opened tab, any. property present opener tab still exists. - pendingUrl string optional Chrome 79+The URL tab navigating to, committed. property present extension's manifest includes \"tabs\" permission pending navigation. - pinned boolean Whether tab pinned. - selected boolean DeprecatedPlease use tabs.Tab.highlighted .Whether tab selected. - sessionId string optional session ID used uniquely identify tab obtained sessions API. - status TabStatus optional tab's loading status. - title string optional title tab. property present extension's manifest includes \"tabs\" permission. - url string optional last committed URL main frame tab. property present extension's manifest includes \"tabs\" permission may empty string tab yet committed. See alsoTab.pendingUrl . - width number optional width tab pixels. - windowId number ID window contains tab. TabStatus tab's loading status. Enum \"unloaded\" \"loading\" \"complete\" WindowType type window. Enum \"normal\" \"popup\" \"panel\" \"app\" \"devtools\" ZoomSettings Defines zoom changes tab handled scope. Properties - defaultZoomFactor number optional Chrome 43+Used return default zoom level current tab calls tabs.getZoomSettings. - mode ZoomSettingsMode optional Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . - scope ZoomSettingsScope optional Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin inautomatic mode, andper-tab otherwise. ZoomSettingsMode Defines zoom changes handled, i.e., entity responsible actual scaling page; defaults automatic . Enum \"automatic\" \"manual\" \"disabled\" Zoom changes handled automatically browser. Overrides automatic handling zoom changes. onZoomChange event still dispatched, extension's responsibility listen event manually scale page. mode support per-origin zooming, thus ignores scope zoom setting assumes per-tab . Disables zooming tab. tab reverts default zoom level, attempted zoom changes ignored. ZoomSettingsScope Defines whether zoom changes persist page's origin, take effect tab; defaults per-origin automatic mode, per-tab otherwise. Enum \"per-origin\" \"per-tab\" Zoom changes persist zoomed page's origin, i.e., tabs navigated origin zoomed well. Moreover, per-origin zoom changes saved origin, meaning navigating pages origin, zoomed zoom factor. per-origin scope available automatic mode. Zoom changes take effect tab, zoom changes tabs affect zooming tab. Also, per-tab zoom changes reset navigation; navigating tab always loads pages per-origin zoom factors. Properties MAX_CAPTURE_VISIBLE_TAB_CALLS_PER_SECOND maximum number times captureVisibleTab called per second. captureVisibleTab expensive called often. Value 2 TAB_ID_NONE ID represents absence browser tab. Value -1 TAB_INDEX_NONE index represents absence tab index tab_strip. Value -1 Methods captureVisibleTab() chrome.tabs.captureVisibleTab( windowId?: number, options?: ImageDetails, callback?: function, ) Captures visible area currently active tab specified window. order call method, extension must either <all_urls> permission activeTab permission. addition sites extensions normally access, method allows extensions capture sensitive sites otherwise restricted, including chrome:-scheme pages, extensions' pages, data: URLs. sensitive sites captured activeTab permission. File URLs may captured extension granted file access. Parameters - windowId number optional target window. Defaults current window. - options ImageDetails optional - callback function optional callback parameter looks like:(dataUrl: string) => void - dataUrl string data URL encodes image visible area captured tab. May assigned 'src' property HTML img element display. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. connect() chrome.tabs.connect( tabId: number, connectInfo?: object, ) Connects content script(s) specified tab. runtime.onConnect event fired content script running specified tab current extension. details, see Content Script Messaging. Parameters - tabId number - connectInfo object optional - documentId string optional Chrome 106+Open port specific document identified documentId instead frames tab. - frameId number optional Open port specific frame identified frameId instead frames tab. - name string optional passed onConnect content scripts listening connection event. - Returns - port used communicate content scripts running specified tab. port's runtime.Port event fired tab closes exist. create() chrome.tabs.create( createProperties: object, callback?: function, ) Creates new tab. Parameters - createProperties object - active boolean optional Whether tab become active tab window. affect whether window focused (see windows.update ). Defaults totrue . - index number optional position tab take window. provided value clamped zero number tabs window. - openerTabId number optional ID tab opened tab. specified, opener tab must window newly created tab. - pinned boolean optional Whether tab pinned. Defaults false - selected boolean optional DeprecatedPlease use active. Whether tab become selected tab window. Defaults true - url string optional URL initially navigate tab to. Fully-qualified URLs must include scheme (i.e., 'http://www.google.com', 'www.google.com'). Relative URLs relative current page within extension. Defaults New Tab Page. - windowId number optional window create new tab. Defaults current window. - - callback function optional callback parameter looks like:(tab: Tab) => void - tab created tab. - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. detectLanguage() chrome.tabs.detectLanguage( tabId?: number, callback?: function, ) Detects primary language content tab. Parameters - tabId number optional Defaults active tab current window. - callback function optional callback parameter looks like:(language: string) => void - language string ISO language code en orfr . complete list languages supported method, see kLanguageInfoTable. second fourth columns checked first non-NULL value returned, except Simplified Chinese whichzh-CN returned. unknown/undefined language,und returned. - Returns - Promise<string> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. discard() chrome.tabs.discard( tabId?: number, callback?: function, ) Discards tab memory. Discarded tabs still visible tab strip reloaded activated. Parameters - tabId number optional ID tab discarded. specified, tab discarded unless active already discarded. omitted, browser discards least important tab. fail discardable tabs exist. - callback function optional callback parameter looks like:(tab?: Tab) => void - tab Tab optional discarded tab, successfully discarded; undefined otherwise. - Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. duplicate() chrome.tabs.duplicate( tabId: number, callback?: function, ) Duplicates tab. Parameters - tabId number ID tab duplicate. - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.tabs.get( tabId: number, callback?: function, ) Retrieves details specified tab. Parameters - tabId number - callback function optional callback parameter looks like:(tab: Tab) => void - tab - Returns - Promise<Tab> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCurrent() chrome.tabs.getCurrent( callback?: function, ) Gets tab script call made from. Returns undefined called non-tab context (for example, background page popup view). Parameters Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoom() chrome.tabs.getZoom( tabId?: number, callback?: function, ) Gets current zoom factor specified tab. Parameters - tabId number optional ID tab get current zoom factor from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomFactor: number) => void - zoomFactor number tab's current zoom factor. - Returns - Promise<number> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getZoomSettings() chrome.tabs.getZoomSettings( tabId?: number, callback?: function, ) Gets current zoom settings specified tab. Parameters - tabId number optional ID tab get current zoom settings from; defaults active tab current window. - callback function optional callback parameter looks like:(zoomSettings: ZoomSettings) => void - zoomSettings tab's current zoom settings. - Returns - Promise<ZoomSettings> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goBack() chrome.tabs.goBack( tabId?: number, callback?: function, ) Go back previous page, one available. Parameters - tabId number optional ID tab navigate back; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. goForward() chrome.tabs.goForward( tabId?: number, callback?: function, ) Go foward next page, one available. Parameters - tabId number optional ID tab navigate forward; defaults selected tab current window. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. group() chrome.tabs.group( options: object, callback?: function, ) Adds one tabs specified group, group specified, adds given tabs newly created group. Parameters - options object - createProperties object optional Configurations creating group. Cannot used groupId already specified. - windowId number optional window new group. Defaults current window. - - groupId number optional ID group add tabs to. specified, new group created. - tabIds number | [number, ...number[]] tab ID list tab IDs add specified group. - - callback function optional callback parameter looks like:(groupId: number) => void - groupId number ID group tabs added to. - Returns - Promise<number> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. highlight() chrome.tabs.highlight( highlightInfo: object, callback?: function, ) Highlights given tabs focuses first group. appear nothing specified tab currently active. Parameters - highlightInfo object - tabs number | number[] One tab indices highlight. - windowId number optional window contains tabs. - - callback function optional callback parameter looks like:(window: Window) => void - window Contains details window whose tabs highlighted. - Returns - Promise<windows.Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. move() chrome.tabs.move( tabIds: number | number[], moveProperties: object, callback?: function, ) Moves one tabs new position within window, new window. Note tabs moved normal (window.type === \"normal\") windows. Parameters - tabIds number | number[] tab ID list tab IDs move. - moveProperties object - index number position move window to. Use -1 place tab end window. - windowId number optional Defaults window tab currently in. - - callback function optional callback parameter looks like:(tabs: Tab | Tab[]) => void Returns - Chrome 88+ Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. query() chrome.tabs.query( queryInfo: object, callback?: function, ) Gets tabs specified properties, tabs properties specified. Parameters - queryInfo object - active boolean optional Whether tabs active windows. - audible boolean optional Chrome 45+Whether tabs audible. - autoDiscardable boolean optional Chrome 54+Whether tabs discarded automatically browser resources low. - currentWindow boolean optional Whether tabs current window. - discarded boolean optional Chrome 54+Whether tabs discarded. discarded tab one whose content unloaded memory, still visible tab strip. content reloaded next time activated. - frozen boolean optional PendingWhether tabs frozen. frozen tab cannot execute tasks, including event handlers timers. visible tab strip content loaded memory. unfrozen activation. - groupId number optional Chrome 88+The ID group tabs in, tabGroups.TAB_GROUP_ID_NONE ungrouped tabs. - highlighted boolean optional Whether tabs highlighted. - index number optional position tabs within windows. - lastFocusedWindow boolean optional Whether tabs last focused window. - muted boolean optional Chrome 45+Whether tabs muted. - pinned boolean optional Whether tabs pinned. - status TabStatus optional tab loading status. - title string optional Match page titles pattern. property ignored extension \"tabs\" permission. - url string | string[] optional Match tabs one URL patterns. Fragment identifiers matched. property ignored extension \"tabs\" permission. - windowId number optional ID parent window, windows.WINDOW_ID_CURRENT current window. - windowType WindowType optional type window tabs in. - - callback function optional callback parameter looks like:(result: Tab[]) => void - result Tab[] - Returns - Promise<Tab[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. reload() chrome.tabs.reload( tabId?: number, reloadProperties?: object, callback?: function, ) Reload tab. Parameters - tabId number optional ID tab reload; defaults selected tab current window. - reloadProperties object optional - bypassCache boolean optional Whether bypass local caching. Defaults false . - - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.tabs.remove( tabIds: number | number[], callback?: function, ) Closes one tabs. Parameters - tabIds number | number[] tab ID list tab IDs close. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendMessage() chrome.tabs.sendMessage( tabId: number, message: any, options?: object, callback?: function, ) Sends single message content script(s) specified tab, optional callback run response sent back. runtime.onMessage event fired content script running specified tab current extension. Parameters - tabId number - message message send. message JSON-ifiable object. - options object optional - callback function optional Chrome 99+The callback parameter looks like:(response: any) => void - response JSON response object sent handler message. error occurs connecting specified tab, callback called arguments runtime.lastError set error message. - Returns - Promise<any> Chrome 99+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoom() chrome.tabs.setZoom( tabId?: number, zoomFactor: number, callback?: function, ) Zooms specified tab. Parameters - tabId number optional ID tab zoom; defaults active tab current window. - zoomFactor number new zoom factor. value 0 sets tab current default zoom factor. Values greater than0 specify (possibly non-default) zoom factor tab. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setZoomSettings() chrome.tabs.setZoomSettings( tabId?: number, zoomSettings: ZoomSettings, callback?: function, ) Sets zoom settings specified tab, define zoom changes handled. settings reset defaults upon navigating tab. Parameters - tabId number optional ID tab change zoom settings for; defaults active tab current window. - zoomSettings Defines zoom changes handled scope. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. ungroup() chrome.tabs.ungroup( tabIds: number | [number, ...number[]], callback?: function, ) Removes one tabs respective groups. groups become empty, deleted. Parameters - tabIds number | [number, ...number[]] tab ID list tab IDs remove respective groups. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.tabs.update( tabId?: number, updateProperties: object, callback?: function, ) Modifies properties tab. Properties specified updateProperties modified. Parameters - tabId number optional Defaults selected tab current window. - updateProperties object - active boolean optional Whether tab active. affect whether window focused (see windows.update ). - autoDiscardable boolean optional Chrome 54+Whether tab discarded automatically browser resources low. - highlighted boolean optional Adds removes tab current selection. - muted boolean optional Chrome 45+Whether tab muted. - openerTabId number optional ID tab opened tab. specified, opener tab must window tab. - pinned boolean optional Whether tab pinned. - selected boolean optional DeprecatedPlease use highlighted. Whether tab selected. - url string optional URL navigate tab to. JavaScript URLs supported; use scripting.executeScript instead. - - callback function optional callback parameter looks like:(tab?: Tab) => void Returns - Promise<Tab | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActivated chrome.tabs.onActivated.addListener( callback: function, ) Fires active tab window changes. Note tab's URL may set time event fired, listen onUpdated events notified URL set. Parameters - callback function callback parameter looks like:(activeInfo: object) => void - activeInfo object - tabId number ID tab become active. - windowId number ID window active tab changed inside of. - - onAttached chrome.tabs.onAttached.addListener( callback: function, ) Fired tab attached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, attachInfo: object) => void - tabId number - attachInfo object - newPosition number - newWindowId number - - onCreated chrome.tabs.onCreated.addListener( callback: function, ) Fired tab created. Note tab's URL tab group membership may set time event fired, listen onUpdated events notified URL set tab added tab group. onDetached chrome.tabs.onDetached.addListener( callback: function, ) Fired tab detached window; example, moved windows. Parameters - callback function callback parameter looks like:(tabId: number, detachInfo: object) => void - tabId number - detachInfo object - oldPosition number - oldWindowId number - - onHighlighted chrome.tabs.onHighlighted.addListener( callback: function, ) Fired highlighted selected tabs window changes. Parameters - callback function callback parameter looks like:(highlightInfo: object) => void - highlightInfo object - tabIds number[] highlighted tabs window. - windowId number window whose tabs changed. - - onMoved chrome.tabs.onMoved.addListener( callback: function, ) Fired tab moved within window. one move event fired, representing tab user directly moved. Move events fired tabs must move response manually-moved tab. event fired tab moved windows; details, see tabs.onDetached . Parameters - callback function callback parameter looks like:(tabId: number, moveInfo: object) => void - tabId number - moveInfo object - fromIndex number - toIndex number - windowId number - - onRemoved chrome.tabs.onRemoved.addListener( callback: function, ) Fired tab closed. Parameters - callback function callback parameter looks like:(tabId: number, removeInfo: object) => void - tabId number - removeInfo object - isWindowClosing boolean True tab closed parent window closed. - windowId number window whose tab closed. - - onReplaced chrome.tabs.onReplaced.addListener( callback: function, ) Fired tab replaced another tab due prerendering instant. Parameters - callback function callback parameter looks like:(addedTabId: number, removedTabId: number) => void - addedTabId number - removedTabId number - onUpdated chrome.tabs.onUpdated.addListener( callback: function, ) Fired tab updated. Parameters - callback function callback parameter looks like:(tabId: number, changeInfo: object, tab: Tab) => void - tabId number - changeInfo object - audible boolean optional Chrome 45+The tab's new audible state. - autoDiscardable boolean optional Chrome 54+The tab's new auto-discardable state. - discarded boolean optional Chrome 54+The tab's new discarded state. - favIconUrl string optional tab's new favicon URL. - frozen boolean optional PendingThe tab's new frozen state. - groupId number optional Chrome 88+The tab's new group. - mutedInfo MutedInfo optional Chrome 46+The tab's new muted state reason change. - pinned boolean optional tab's new pinned state. - status TabStatus optional tab's loading status. - title string optional Chrome 48+The tab's new title. - url string optional tab's URL changed. - - tab - onZoomChange chrome.tabs.onZoomChange.addListener( callback: function, ) Fired tab zoomed. Parameters - callback function callback parameter looks like:(ZoomChangeInfo: object) => void - ZoomChangeInfo object - newZoomFactor number - oldZoomFactor number - tabId number - zoomSettings - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/tts", "title": "chrome.tts | API | Chrome for Developers", "text": "Description Use chrome.tts API play synthesized text-to-speech (TTS). See also related ttsEngine API, allows extension implement speech engine. Chrome provides capability Windows (using SAPI 5), Mac OS X, ChromeOS, using speech synthesis capabilities provided operating system. platforms, user install extensions register alternative speech engines. Permissions tts Concepts usage Generate speech Call speak() extension speak. example: chrome.tts.speak('Hello, world.'); stop speaking immediately, call stop() : chrome.tts.stop(); provide options control various properties speech, rate, pitch, more. example: chrome.tts.speak('Hello, world.', {'rate': 2.0}); also good idea specify language synthesizer supporting language (and regional dialect, applicable) chosen. chrome.tts.speak('Hello, world.', {'lang': 'en-US', 'rate': 2.0}); default, call speak() interrupts ongoing speech speaks immediately. determine call would interrupting anything, call isSpeaking() . addition, use enqueue option cause utterance added queue utterances spoken current utterance finished. chrome.tts.speak('Speak first.'); chrome.tts.speak( 'Speak next, first sentence done.', {'enqueue': true}); complete description options found tts.speak() . speech engines support options. catch errors make sure calling speak() correctly, pass callback function takes arguments. Inside callback, check runtime.lastError see errors. chrome.tts.speak( utterance, options, function() { (chrome.runtime.lastError) { console.log('Error: ' + chrome.runtime.lastError.message); } } ); callback returns right away, engine started generating speech. purpose callback alert syntax errors use TTS API, catch possible errors might occur process synthesizing outputting speech. catch errors too, need use event listener, described next section. Listen events get real-time information status synthesized speech, pass event listener options speak() , like this: chrome.tts.speak( utterance, { onEvent: function(event) { console.log('Event ' + event.type + ' position ' + event.charIndex); (event.type == 'error') { console.log('Error: ' + event.errorMessage); } } }, callback ); event includes event type, character index current speech relative utterance, error events, optional error message. event types are: 'start' : engine started speaking utterance.'word' : word boundary reached. Useevent.charIndex determine current speech position.'sentence' : sentence boundary reached. Useevent.charIndex determine current speech position.'marker' : SSML marker reached. Useevent.charIndex determine current speech position.'end' : engine finished speaking utterance.'interrupted' : utterance interrupted another call tospeak() orstop() finish.'cancelled' : utterance queued, cancelled another call tospeak() orstop() never began speak all.'error' : engine-specific error occurred utterance cannot spoken. Checkevent.errorMessage details. Four event types\u2014'end' , 'interrupted' , 'cancelled' , 'error' \u2014are final. one events received, utterance longer speak new events utterance received. voices may support event types, voices may send events all. want use voice unless sends certain events, pass events require requiredEventTypes member options object, use getVoices() choose voice meets requirements. described follows. SSML markup Utterances used API may include markup using Speech Synthesis Markup Language (SSML). use SSML, first argument speak() complete SSML document XML header top-level <speak> tag, document fragment. example: chrome.tts.speak( '<?xml version=\"1.0\"?>' + '<speak>' + ' <emphasis>second</emphasis> ' + ' word sentence emphasized.' + '</speak>' ); speech engines support SSML tags, may support SSML all, engines required ignore SSML support still speak underlying text. Choose voice default, Chrome chooses appropriate voice utterance want speak, based language. Windows, Mac OS X, ChromeOS systems, speech synthesis provided operating system able speak text least one language. users may variety voices available, though, operating system speech engines implemented Chrome extensions. cases, implement custom code choose appropriate voice, present user list choices. get list voices, call getVoices() pass function receives array TtsVoice objects argument: chrome.tts.getVoices( function(voices) { (var = 0; < voices.length; i++) { console.log('Voice ' + + ':'); console.log(' name: ' + voices[i].voiceName); console.log(' lang: ' + voices[i].lang); console.log(' extension id: ' + voices[i].extensionId); console.log(' event types: ' + voices[i].eventTypes); } } ); Types EventType Enum \"start\" \"end\" \"word\" \"sentence\" \"marker\" \"interrupted\" \"cancelled\" \"error\" \"pause\" \"resume\" TtsEvent event TTS engine communicate status utterance. Properties - charIndex number optional index current character utterance. word events, event fires end one word beginning next. charIndex represents point text beginning next word spoken. - errorMessage string optional error description, event type error . - length number optional Chrome 74+The length next part utterance. example, word event, length word spoken next. set -1 set speech engine. - type type start soon speech started,word word boundary reached,sentence sentence boundary reached,marker SSML mark element reached,end end utterance reached,interrupted utterance stopped interrupted reaching end,cancelled removed queue ever synthesized, orerror error occurs. pausing speech, apause event fired particular utterance paused middle, andresume utterance resumes speech. Note pause resume events may fire speech paused in-between utterances. TtsOptions speech options TTS engine. Properties - desiredEventTypes string[] optional TTS event types interested listening to. missing, event types may sent. - enqueue boolean optional true, enqueues utterance TTS already progress. false (the default), interrupts current speech flushes speech queue speaking new utterance. - extensionId string optional extension ID speech engine use, known. - gender VoiceGender optional Deprecated since Chrome 77Gender deprecated ignored. Gender voice synthesized speech. - lang string optional language used synthesis, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - pitch number optional Speaking pitch 0 2 inclusive, 0 lowest 2 highest. 1.0 corresponds voice's default pitch. - rate number optional Speaking rate relative default rate voice. 1.0 default rate, normally around 180 220 words per minute. 2.0 twice fast, 0.5 half fast. Values 0.1 10.0 strictly disallowed, many voices constrain minimum maximum rates further\u2014for example particular voice may actually speak faster 3 times normal even specify value larger 3.0. - requiredEventTypes string[] optional TTS event types voice must support. - voiceName string optional name voice use synthesis. empty, uses available voice. - volume number optional Speaking volume 0 1 inclusive, 0 lowest 1 highest, default 1.0. - onEvent void optional function called events occur process speaking utterance. onEvent function looks like:(event: TtsEvent) => {...} - event update event text-to-speech engine indicating status utterance. - TtsVoice description voice available speech synthesis. Properties - eventTypes EventType[] optional callback event types voice capable sending. - extensionId string optional ID extension providing voice. - gender VoiceGender optional Deprecated since Chrome 70Gender deprecated ignored. voice's gender. - lang string optional language voice supports, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - remote boolean optional true, synthesis engine remote network resource. may higher latency may incur bandwidth costs. - voiceName string optional name voice. VoiceGender Gender deprecated ignored. Enum \"male\" \"female\" Methods getVoices() chrome.tts.getVoices( callback?: function, ) Gets array available voices. Parameters - callback function optional callback parameter looks like:(voices: TtsVoice[]) => void - voices TtsVoice[] Array tts.TtsVoice objects representing available voices speech synthesis. - Returns - Promise<TtsVoice[]> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. isSpeaking() chrome.tts.isSpeaking( callback?: function, ) Checks whether engine currently speaking. Mac OS X, result true whenever system speech engine speaking, even speech initiated Chrome. Parameters - callback function optional callback parameter looks like:(speaking: boolean) => void - speaking boolean True speaking, false otherwise. - Returns - Promise<boolean> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. pause() chrome.tts.pause() Pauses speech synthesis, potentially middle utterance. call resume stop un-pause speech. resume() chrome.tts.resume() speech paused, resumes speaking left off. speak() chrome.tts.speak( utterance: string, options?: TtsOptions, callback?: function, ) Speaks text using text-to-speech engine. Parameters - utterance string text speak, either plain text complete, well-formed SSML document. Speech engines support SSML strip away tags speak text. maximum length text 32,768 characters. - options TtsOptions optional speech options. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 101+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. stop() chrome.tts.stop() Stops current speech flushes queue pending utterances. addition, speech paused, un-paused next call speak. Events onVoicesChanged chrome.tts.onVoicesChanged.addListener( callback: function, ) Called list tts.TtsVoice would returned getVoices changed. Parameters - callback function callback parameter looks like:() => void"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/ttsEngine", "title": "chrome.ttsEngine | API | Chrome for Developers", "text": "Description Use chrome.ttsEngine API implement text-to-speech(TTS) engine using extension. extension registers using API, receive events containing utterance spoken parameters extension Chrome App uses tts API generate speech. extension use available web technology synthesize output speech, send events back calling function report status. Permissions ttsEngine Concepts usage extension register speech engine. so, intercept calls functions tts.speak() tts.stop() provide alternate implementation. Extensions free use available web technology provide speech, including streaming audio server, HTML5 audio. extension could even something different utterances, like display closed captions popup send log messages remote server. implement TTS engine, extension must declare \"ttsEngine\" permission declare voices provides extension manifest, like this: { \"name\": \"My TTS Engine\", \"version\": \"1.0\", \"permissions\": [\"ttsEngine\"], \"tts_engine\": { \"voices\": [ { \"voice_name\": \"Alice\", \"lang\": \"en-US\", \"event_types\": [\"start\", \"marker\", \"end\"] }, { \"voice_name\": \"Pat\", \"lang\": \"en-US\", \"event_types\": [\"end\"] } ] }, \"background\": { \"page\": \"background.html\", \"persistent\": false } } extension specify number voices. voice_name parameter required. name descriptive enough identifies name voice engine used. unlikely event two extensions register voices name, client specify ID extension synthesis. lang parameter optional, highly recommended. Almost always, voice synthesize speech single language. engine supports one language, easily register separate voice language. rare circumstances single voice handle one language, easiest list two separate voices handle using logic internally. However, want create voice handle utterances language, leave lang parameter extension's manifest. Finally, event_types parameter required engine send events update client progress speech synthesis. minimum, supporting 'end' event type indicate speech finished highly recommended, otherwise Chrome cannot schedule queued utterances. loaded, extension replace list declared voices calling chrome.ttsEngine.updateVoices . (Note parameters used programatic call updateVoices camel case: e.g., voiceName , unlike manifest file uses voice_name .) possible event types send correspond event types speak() method receives: 'start' : engine started speaking utterance.'word' : word boundary reached. Useevent.charIndex determine current speech position.'sentence' : sentence boundary reached. Useevent.charIndex determine current speech position.'marker' : SSML marker reached. Useevent.charIndex determine current speech position.'end' : engine finished speaking utterance.'error' : engine-specific error occurred utterance cannot spoken. Pass information inevent.errorMessage . 'interrupted' 'cancelled' events sent speech engine; generated automatically Chrome. Text-to-speech clients get voice information extension's manifest calling tts.getVoices , assuming registered speech event listeners described below. Handle speech events generate speech request clients, extension must register listeners onSpeak onStop , like this: const speakListener = (utterance, options, sendTtsEvent) => { sendTtsEvent({type: 'start', charIndex: 0}) // (start speaking) sendTtsEvent({type: 'end', charIndex: utterance.length}) }; const stopListener = () => { // (stop speech) }; chrome.ttsEngine.onSpeak.addListener(speakListener); chrome.ttsEngine.onStop.addListener(stopListener); decision whether send given speech request extension based solely whether extension supports given voice parameters manifest registered listeners onSpeak onStop . words, there's way extension receive speech request dynamically decide whether handle it. Types AudioBuffer Parameters containing audio buffer associated data. Properties - audioBuffer ArrayBuffer audio buffer text-to-speech engine. length exactly audioStreamOptions.bufferSize encoded mono, audioStreamOptions.sampleRate, linear pcm, 32-bit signed float i.e. Float32Array type javascript. - charIndex number optional character index associated audio buffer. - isLastBuffer boolean optional True audio buffer last text spoken. AudioStreamOptions Contains audio stream format expected produced engine. Properties - bufferSize number number samples within audio buffer. - sampleRate number sample rate expected audio buffer. LanguageInstallStatus install status voice. Enum \"notInstalled\" \"installing\" \"installed\" \"failed\" LanguageStatus Install status language. Properties - error string optional Detail installation failures. Optionally populated language failed install. - installStatus Installation status. - lang string Language string form language code-region code, region may omitted. Examples en, en-AU, zh-CH. LanguageUninstallOptions Options uninstalling given language. Properties - uninstallImmediately boolean True TTS client wants language immediately uninstalled. engine may choose whether uninstall language, based parameter requestor information. false, may use criteria, recent usage, determine uninstall. SpeakOptions Options specified tts.speak() method. Properties - gender VoiceGender optional Deprecated since Chrome 92Gender deprecated ignored. Gender voice synthesized speech. - lang string optional language used synthesis, form language-region. Examples: 'en', 'en-US', 'en-GB', 'zh-CN'. - pitch number optional Speaking pitch 0 2 inclusive, 0 lowest 2 highest. 1.0 corresponds voice's default pitch. - rate number optional Speaking rate relative default rate voice. 1.0 default rate, normally around 180 220 words per minute. 2.0 twice fast, 0.5 half fast. value guaranteed 0.1 10.0, inclusive. voice support full range rates, return error. Instead, clip rate range voice supports. - voiceName string optional name voice use synthesis. - volume number optional Speaking volume 0 1 inclusive, 0 lowest 1 highest, default 1.0. TtsClient Identifier client requesting status. Properties - id string Client making language management request. extension, unique extension ID. Chrome features, human-readable name feature. - source Type requestor. TtsClientSource Type requestor. Enum \"chromefeature\" \"extension\" VoiceGender Gender deprecated ignored. Enum \"male\" \"female\" Methods updateLanguage() chrome.ttsEngine.updateLanguage( status: LanguageStatus, ) Called engine language install attempted, language uninstalled. Also called response status request client. voice installed uninstalled, engine also call ttsEngine.updateVoices register voice. Parameters - status install status language. updateVoices() chrome.ttsEngine.updateVoices( voices: TtsVoice[], ) Called engine update list voices. list overrides voices declared extension's manifest. Parameters - voices TtsVoice[] Array tts.TtsVoice objects representing available voices speech synthesis. Events onInstallLanguageRequest chrome.ttsEngine.onInstallLanguageRequest.addListener( callback: function, ) Fired TTS client requests install new language. engine attempt download install language, call ttsEngine.updateLanguage result. success, engine also call ttsEngine.updateVoices register newly available voices. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string) => void - requestor - lang string - onLanguageStatusRequest chrome.ttsEngine.onLanguageStatusRequest.addListener( callback: function, ) Fired TTS client requests install status language. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string) => void - requestor - lang string - onPause chrome.ttsEngine.onPause.addListener( callback: function, ) Optional: engine supports pause event, pause current utterance spoken, any, receives resume event stop event. Note stop event also clear paused state. Parameters - callback function callback parameter looks like:() => void onResume chrome.ttsEngine.onResume.addListener( callback: function, ) Optional: engine supports pause event, also support resume event, continue speaking current utterance, any. Note stop event also clear paused state. Parameters - callback function callback parameter looks like:() => void onSpeak chrome.ttsEngine.onSpeak.addListener( callback: function, ) Called user makes call tts.speak() one voices extension's manifest first match options object. Parameters - callback function callback parameter looks like:(utterance: string, options: SpeakOptions, sendTtsEvent: function) => void - utterance string - options - sendTtsEvent function sendTtsEvent parameter looks like:(event: tts.TtsEvent) => void - event event text-to-speech engine indicating status utterance. - - onSpeakWithAudioStream chrome.ttsEngine.onSpeakWithAudioStream.addListener( callback: function, ) Called user makes call tts.speak() one voices extension's manifest first match options object. Differs ttsEngine.onSpeak Chrome provides audio playback services handles dispatching tts events. Parameters - callback function callback parameter looks like:(utterance: string, options: SpeakOptions, audioStreamOptions: AudioStreamOptions, sendTtsAudio: function, sendError: function) => void - utterance string - options - audioStreamOptions - sendTtsAudio function sendTtsAudio parameter looks like:(audioBufferParams: AudioBuffer) => void - audioBufferParams Parameters containing audio buffer associated data. - - sendError function Chrome 94+The sendError parameter looks like:(errorMessage?: string) => void - errorMessage string optional string describing error. - - onStop chrome.ttsEngine.onStop.addListener( callback: function, ) Fired call made tts.stop extension may middle speaking. extension receives call onStop speech already stopped, nothing (not raise error). speech paused state, cancel paused state. Parameters - callback function callback parameter looks like:() => void onUninstallLanguageRequest chrome.ttsEngine.onUninstallLanguageRequest.addListener( callback: function, ) Fired TTS client indicates language longer needed. Parameters - callback function callback parameter looks like:(requestor: TtsClient, lang: string, uninstallOptions: LanguageUninstallOptions) => void - requestor - lang string - uninstallOptions -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/types", "title": "chrome.types | API | Chrome for Developers", "text": "Description chrome.types API contains type declarations Chrome. Chrome settings ChromeSetting type provides common set functions (get() , set() , clear() ) well event publisher (onChange ) settings Chrome browser. proxy settings examples demonstrate functions intended used. Scope lifecycle Chrome distinguishes three different scopes browser settings: regular - Settings set regular scope apply regular browser windows inherited incognito windows overwritten. settings stored disk remain place cleared governing extension, governing extension disabled uninstalled. incognito_persistent - Settings set incognito_persistent scope apply incognito windows. these, overrideregular settings. settings stored disk remain place cleared governing extension, governing extension disabled uninstalled. incognito_session_only - Settings set incognito_session_only scope apply incognito windows. these, overrideregular andincognito_persistent settings. settings stored disk cleared last incognito window closed. set least one incognito window open. Precedence Chrome manages settings different layers. following list describes layers may influence effective settings, increasing order precedence. - System settings provided operating system - Command-line parameters - Settings provided extensions - Policies list implies, policies might overrule changes specify extension. use get() function determine whether extension capable providing setting whether setting would overridden. discussed previously, Chrome allows using different settings regular windows incognito windows. following example illustrates behavior. Assume policy overrides settings extension set settings regular windows (R) settings incognito windows (I). - (R) set, settings effective regular incognito windows. - (I) set, settings effective incognito windows. Regular windows use settings determined lower layers (command-line options system settings). - (R) (I) set, respective settings used regular incognito windows. two extensions want set setting different values, extension installed recently takes precedence extensions. recently installed extension sets (I), settings regular windows defined previously installed extensions. effective value setting one results considering precedence rules. used Chrome. Types ChromeSetting interface allows access Chrome browser setting. See accessibilityFeatures example. Properties - onChange Event<functionvoidvoid> Fired setting changes. onChange.addListener function looks like:(callback: function) => {...} - callback function callback parameter looks like:(details: object) => void - details object - incognitoSpecific boolean optional Whether value changed specific incognito session. property present user enabled extension incognito mode. - levelOfControl level control setting. - value value setting change. - - - - clear void PromiseClears setting, restoring default value. clear function looks like:(details: object, callback?: function) => {...} - details object setting clear. - scope ChromeSettingScope optional clear setting (default: regular). - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - get void PromiseGets value setting. get function looks like:(details: object, callback?: function) => {...} - details object setting consider. - incognito boolean optional Whether return value applies incognito session (default false). - - callback function optional callback parameter looks like:(details: object) => void - details object Details currently effective value. - incognitoSpecific boolean optional Whether effective value specific incognito session. property present incognito property thedetails parameter ofget() true. - levelOfControl level control setting. - value value setting. - - - returns Promise<object> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - - set void PromiseSets value setting. set function looks like:(details: object, callback?: function) => {...} - details object setting change. - scope ChromeSettingScope optional set setting (default: regular). - value value setting. Note every setting specific value type, described together setting. extension set value different type. - - callback function optional callback parameter looks like:() => void - returns Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. - ChromeSettingScope scope ChromeSetting. One regular : setting regular profile (which inherited incognito profile overridden elsewhere),regular\\_only : setting regular profile (not inherited incognito profile),incognito\\_persistent : setting incognito profile survives browser restarts (overrides regular preferences),incognito\\_session\\_only : setting incognito profile set incognito session deleted incognito session ends (overrides regular incognito_persistent preferences). Enum \"regular\" \"regular_only\" \"incognito_persistent\" \"incognito_session_only\" LevelOfControl One not\\_controllable : cannot controlled extensioncontrolled\\_by\\_other\\_extensions : controlled extensions higher precedencecontrollable\\_by\\_this\\_extension : controlled extensioncontrolled\\_by\\_this\\_extension : controlled extension Enum \"not_controllable\" \"controlled_by_other_extensions\" \"controllable_by_this_extension\" \"controlled_by_this_extension\""},
{"source": "https://developer.chrome.com/docs/apps/reference/usb", "title": "chrome.usb | Platform Apps APIs | Chrome for Developers", "text": "Description Use chrome.usb API interact connected USB devices. API provides access USB operations within context app. Using API, apps function drivers hardware devices. Errors generated API reported setting runtime.lastError executing function's regular callback. callback's regular parameters undefined case. Permissions usb Types ConfigDescriptor Properties - active boolean Chrome 47+Is active configuration? - configurationValue number configuration number. - description string optional Description configuration. - extra_data ArrayBuffer Extra descriptor data associated configuration. - interfaces Available interfaces. - maxPower number maximum power needed device milliamps (mA). - remoteWakeup boolean device supports remote wakeup. - selfPowered boolean device self-powered. ConnectionHandle Properties - handle number opaque handle representing connection USB device associated claimed interfaces pending transfers. new handle created time device opened. connection handle different Device.device . - productId number product ID. - vendorId number device vendor ID. ControlTransferInfo Properties - data ArrayBuffer optional data transmit (required output transfers). - direction transfer direction ( \"in\" or\"out\" ). - index number wIndex field, see Ibid. - length number optional maximum number bytes receive (required input transfers). - recipient transfer target. target given index must claimed if\"interface\" or\"endpoint\" . - request number bRequest field, see Universal Serial Bus Specification Revision 1.1 \u00a7 9.3. - requestType request type. - timeout number optional Chrome 43+Request timeout (in milliseconds). default value 0 indicates timeout. - value number wValue field, see Ibid. Device Properties - device number opaque ID USB device. remains unchanged device unplugged. - manufacturerName string Chrome 46+The iManufacturer string read device, available. - productId number product ID. - productName string Chrome 46+The iProduct string read device, available. - serialNumber string Chrome 46+The iSerialNumber string read device, available. - vendorId number device vendor ID. - version number Chrome 51+The device version (bcdDevice field). DeviceFilter Properties - interfaceClass number optional USB interface class, matches interface device. - interfaceProtocol number optional USB interface protocol, checked interface sub-class matches. - interfaceSubclass number optional USB interface sub-class, checked interface class matches. - productId number optional Device product ID, checked vendor ID matches. - vendorId number optional Device vendor ID. DevicePromptOptions Properties - filters DeviceFilter[] optional Filter list devices presented user. multiple filters provided devices matching filter displayed. - multiple boolean optional Allow user select multiple devices. Direction Direction, Recipient, RequestType, TransferType map namesakes within USB specification. Enum \"in\" \"out\" EndpointDescriptor Properties - address number Endpoint address. - direction Transfer direction. - extra_data ArrayBuffer Extra descriptor data associated endpoint. - maximumPacketSize number Maximum packet size. - pollingInterval number optional Polling interval (interrupt isochronous only). - synchronization SynchronizationType optional Transfer synchronization mode (isochronous only). - type Transfer type. - usage UsageType optional Endpoint usage hint. EnumerateDevicesAndRequestAccessOptions Properties - interfaceId number optional interface ID request access to. available Chrome OS. effect platforms. - productId number product ID. - vendorId number device vendor ID. EnumerateDevicesOptions Properties - filters DeviceFilter[] optional device matching given filter returned. empty filter list return devices app permission for. - productId number optional DeprecatedEquivalent setting DeviceFilter.productId . - vendorId number optional DeprecatedEquivalent setting DeviceFilter.vendorId . GenericTransferInfo Properties - data ArrayBuffer optional data transmit (required output transfers). - direction transfer direction ( \"in\" or\"out\" ). - endpoint number target endpoint address. interface containing endpoint must claimed. - length number optional maximum number bytes receive (required input transfers). - timeout number optional Chrome 43+Request timeout (in milliseconds). default value 0 indicates timeout. InterfaceDescriptor Properties - alternateSetting number interface alternate setting number (defaults 0 - description string optional Description interface. - endpoints Available endpoints. - extra_data ArrayBuffer Extra descriptor data associated interface. - interfaceClass number USB interface class. - interfaceNumber number interface number. - interfaceProtocol number USB interface protocol. - interfaceSubclass number USB interface sub-class. IsochronousTransferInfo Properties - packetLength number length packets transfer. - packets number total number packets transfer. - transferInfo Transfer parameters. transfer length data buffer specified parameter block split along packetLength boundaries form individual packets transfer. Recipient Enum \"device\" \"interface\" \"endpoint\" \"other\" RequestType Enum \"standard\" \"class\" \"vendor\" \"reserved\" SynchronizationType interrupt isochronous modes, SynchronizationType UsageType map namesakes within USB specification. Enum \"asynchronous\" \"adaptive\" \"synchronous\" TransferResultInfo Properties - data ArrayBuffer optional data returned input transfer. undefined output transfers. - resultCode number optional value 0 indicates transfer success. values indicate failure. TransferType Enum \"control\" \"interrupt\" \"isochronous\" \"bulk\" UsageType Enum \"data\" \"feedback\" \"explicitFeedback\" \"periodic\" \"notification\" Methods bulkTransfer() chrome.usb.bulkTransfer( handle: ConnectionHandle, transferInfo: GenericTransferInfo, callback?: function, ) Performs bulk transfer specified device. Parameters - handle open connection device. - transferInfo transfer parameters. - callback function optional callback parameter looks like:(info: TransferResultInfo) => void - info - Returns - Promise<TransferResultInfo> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. claimInterface() chrome.usb.claimInterface( handle: ConnectionHandle, interfaceNumber: number, callback?: function, ) Claims interface USB device. data transfered interface associated endpoints interface must claimed. one connection handle claim interface given time. interface already claimed, call fail. releaseInterface called interface longer needed. Parameters - handle open connection device. - interfaceNumber number interface claimed. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. closeDevice() chrome.usb.closeDevice( handle: ConnectionHandle, callback?: function, ) Closes connection handle. Invoking operations handle closed safe operation causes action taken. Parameters - handle ConnectionHandle close. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. controlTransfer() chrome.usb.controlTransfer( handle: ConnectionHandle, transferInfo: ControlTransferInfo, callback?: function, ) Performs control transfer specified device. Control transfers refer either device, interface endpoint. Transfers interface endpoint require interface claimed. Parameters - handle open connection device. - transferInfo - callback function optional callback parameter looks like:(info: TransferResultInfo) => void - info - Returns - Promise<TransferResultInfo> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. findDevices() chrome.usb.findDevices( options: EnumerateDevicesAndRequestAccessOptions, callback?: function, ) Finds USB devices specified vendor, product (optionally) interface IDs permissions allow opens use. access request rejected device fails opened connection handle created returned. Calling method equivalent calling getDevices followed openDevice device. Parameters - properties search target devices. - callback function optional callback parameter looks like:(handles: ConnectionHandle[]) => void - handles - Returns - Promise<ConnectionHandle[]> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. getConfiguration() chrome.usb.getConfiguration( handle: ConnectionHandle, callback?: function, ) Gets configuration descriptor currently selected configuration. Parameters - handle open connection device. - callback function optional callback parameter looks like:(config: ConfigDescriptor) => void - config - Returns - Promise<ConfigDescriptor> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. getConfigurations() chrome.usb.getConfigurations( device: Device, callback?: function, ) Returns full set device configuration descriptors. Parameters - device Device fetch descriptors from. - callback function optional callback parameter looks like:(configs: ConfigDescriptor[]) => void - configs - Returns - Promise<ConfigDescriptor[]> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. getDevices() chrome.usb.getDevices( options: EnumerateDevicesOptions, callback?: function, ) Enumerates connected USB devices. Parameters Returns - Promise<Device[]> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. getUserSelectedDevices() chrome.usb.getUserSelectedDevices( options: DevicePromptOptions, callback?: function, ) Presents device picker user returns Device selected. user cancels picker devices empty. user gesture required dialog display. Without user gesture, callback run though user cancelled. Parameters Returns - Promise<Device[]> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. interruptTransfer() chrome.usb.interruptTransfer( handle: ConnectionHandle, transferInfo: GenericTransferInfo, callback?: function, ) Performs interrupt transfer specified device. Parameters - handle open connection device. - transferInfo transfer parameters. - callback function optional callback parameter looks like:(info: TransferResultInfo) => void - info - Returns - Promise<TransferResultInfo> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. isochronousTransfer() chrome.usb.isochronousTransfer( handle: ConnectionHandle, transferInfo: IsochronousTransferInfo, callback?: function, ) Performs isochronous transfer specific device. Parameters - handle open connection device. - transferInfo - callback function optional callback parameter looks like:(info: TransferResultInfo) => void - info - Returns - Promise<TransferResultInfo> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. listInterfaces() chrome.usb.listInterfaces( handle: ConnectionHandle, callback?: function, ) Lists interfaces USB device. Parameters - handle open connection device. - callback function optional callback parameter looks like:(descriptors: InterfaceDescriptor[]) => void - descriptors - Returns - Promise<InterfaceDescriptor[]> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. openDevice() chrome.usb.openDevice( device: Device, callback?: function, ) Opens USB device returned getDevices . Parameters - device Device open. - callback function optional callback parameter looks like:(handle: ConnectionHandle) => void - handle - Returns - Promise<ConnectionHandle> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. releaseInterface() chrome.usb.releaseInterface( handle: ConnectionHandle, interfaceNumber: number, callback?: function, ) Releases claimed interface. Parameters - handle open connection device. - interfaceNumber number interface released. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. requestAccess() chrome.usb.requestAccess( device: Device, interfaceId: number, callback?: function, ) function Chrome OS specific calling platforms would fail. operation implicitly performed part openDevice function return true platforms. Requests access permission broker device claimed Chrome OS given interface device claimed. Parameters - device Device request access to. - interfaceId number particular interface requested. - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. resetDevice() chrome.usb.resetDevice( handle: ConnectionHandle, callback?: function, ) Tries reset USB device. reset fails, given connection handle closed USB device appear disconnected reconnected. case getDevices findDevices must called acquire device. Parameters - handle connection handle reset. - callback function optional callback parameter looks like:(success: boolean) => void - success boolean - Returns - Promise<boolean> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. setConfiguration() chrome.usb.setConfiguration( handle: ConnectionHandle, configurationValue: number, callback?: function, ) Select device configuration. function effectively resets device selecting one device's available configurations. configuration values greater 0 valid however buggy devices working configuration 0 value allowed. Parameters - handle open connection device. - configurationValue number - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. setInterfaceAlternateSetting() chrome.usb.setInterfaceAlternateSetting( handle: ConnectionHandle, interfaceNumber: number, alternateSetting: number, callback?: function, ) Selects alternate setting previously claimed interface. Parameters - handle open connection device interface claimed. - interfaceNumber number interface configure. - alternateSetting number alternate setting configure. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, platforms need use callbacks. Events onDeviceAdded chrome.usb.onDeviceAdded.addListener( callback: function, ) Event generated device added system. Events broadcast apps extensions permission access device. Permission may granted install time, user accepted optional permission (see permissions.request ), getUserSelectedDevices . Parameters - callback function callback parameter looks like:(device: Device) => void - device - onDeviceRemoved chrome.usb.onDeviceRemoved.addListener( callback: function, ) Event generated device removed system. See onDeviceAdded events delivered."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/vpnProvider", "title": "chrome.vpnProvider | API | Chrome for Developers", "text": "Description Use chrome.vpnProvider API implement VPN client. Permissions vpnProvider Availability Concepts usage Typical usage chrome.vpnProvider follows: Create VPN configurations calling createConfig() . VPN configuration persistent entry shown user ChromeOS UI. user select VPN configuration list connect disconnect it.Add listeners onPlatformMessage ,onPacketReceived , andonConfigRemoved events.When user connects VPN configuration, onPlatformMessage received message\"connected\" . period the\"connected\" and\"disconnected\" messages called \"VPN session\". time period, extension receives message said VPN session.Initiate connection VPN server start VPN client. Set Parameters connection calling setParameters() .Notify connection state \"connected\" callingnotifyConnectionStateChanged() .When steps previous completed without errors, virtual tunnel created network stack ChromeOS. IP packets sent tunnel calling sendPacket() packets originating ChromeOS device received using theonPacketReceived event handler.When user disconnects VPN configuration, onPlatformMessage fired message\"disconnected\" .If VPN configuration longer necessary, destroyed calling destroyConfig() . Types Parameters Properties - address string IP address VPN interface CIDR notation. IPv4 currently supported mode. - broadcastAddress string optional Broadcast address VPN interface. (default: deduced IP address mask) - dnsServers string[] list IPs DNS servers. - domainSearch string[] optional list search domains. (default: search domain) - exclusionList string[] Exclude network traffic list IP blocks CIDR notation tunnel. used bypass traffic VPN server. many rules match destination, rule longest matching prefix wins. Entries correspond CIDR block treated duplicates. duplicates collated (exclusionList + inclusionList) list eliminated exact duplicate entry eliminated undefined. - inclusionList string[] Include network traffic list IP blocks CIDR notation tunnel. parameter used set split tunnel. default traffic directed tunnel. Adding entry \"0.0.0.0/0\" list gets user traffic redirected tunnel. many rules match destination, rule longest matching prefix wins. Entries correspond CIDR block treated duplicates. duplicates collated (exclusionList + inclusionList) list eliminated exact duplicate entry eliminated undefined. - mtu string optional MTU setting VPN interface. (default: 1500 bytes) - reconnect string optional Chrome 51+Whether VPN extension implements auto-reconnection. true, linkDown ,linkUp ,linkChanged ,suspend , andresume platform messages used signal respective events. false, system forcibly disconnect VPN network topology changes, user need reconnect manually. (default: false)This property new Chrome 51; generate exception earlier versions. try/catch used conditionally enable feature based browser support. PlatformMessage enum used platform notify client VPN session status. Enum \"connected\" \"disconnected\" \"error\" \"linkDown\" \"linkUp\" \"linkChanged\" \"suspend\" \"resume\" Indicates VPN configuration connected. Indicates VPN configuration disconnected. Indicates error occurred VPN connection, example timeout. description error given error argument onPlatformMessage. Indicates default physical network connection down. Indicates default physical network connection back up. Indicates default physical network connection changed, e.g. wifi->mobile. Indicates OS preparing suspend, VPN drop connection. extension guaranteed receive event prior suspending. Indicates OS resumed user logged back in, VPN try reconnect. UIEvent enum used platform indicate event triggered onUIEvent . Enum \"showAddDialog\" \"showConfigureDialog\" Requests VPN client show add configuration dialog box user. Requests VPN client show configuration settings dialog box user. VpnConnectionState enum used VPN client inform platform current state. helps provide meaningful messages user. Enum \"connected\" \"failure\" Specifies VPN connection successful. Specifies VPN connection failed. Methods createConfig() chrome.vpnProvider.createConfig( name: string, callback?: function, ) Creates new VPN configuration persists across multiple login sessions user. Parameters - name string name VPN configuration. - callback function optional callback parameter looks like:(id: string) => void - id string unique ID created configuration, undefined failure. - Returns - Promise<string> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. destroyConfig() chrome.vpnProvider.destroyConfig( id: string, callback?: function, ) Destroys VPN configuration created extension. Parameters - id string ID VPN configuration destroy. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. notifyConnectionStateChanged() chrome.vpnProvider.notifyConnectionStateChanged( state: VpnConnectionState, callback?: function, ) Notifies VPN session state platform. succeed VPN session owned extension. Parameters - state VPN session state VPN client. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. sendPacket() chrome.vpnProvider.sendPacket( data: ArrayBuffer, callback?: function, ) Sends IP packet tunnel created VPN session. succeed VPN session owned extension. Parameters - data ArrayBuffer IP packet sent platform. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. setParameters() chrome.vpnProvider.setParameters( parameters: Parameters, callback?: function, ) Sets parameters VPN session. called immediately \"connected\" received platform. succeed VPN session owned extension. Parameters - parameters parameters VPN session. - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 96+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onConfigCreated chrome.vpnProvider.onConfigCreated.addListener( callback: function, ) Triggered configuration created platform extension. Parameters - callback function callback parameter looks like:(id: string, name: string, data: object) => void - id string - name string - data object - onConfigRemoved chrome.vpnProvider.onConfigRemoved.addListener( callback: function, ) Triggered configuration created extension removed platform. Parameters - callback function callback parameter looks like:(id: string) => void - id string - onPacketReceived chrome.vpnProvider.onPacketReceived.addListener( callback: function, ) Triggered IP packet received via tunnel VPN session owned extension. Parameters - callback function callback parameter looks like:(data: ArrayBuffer) => void - data ArrayBuffer - onPlatformMessage chrome.vpnProvider.onPlatformMessage.addListener( callback: function, ) Triggered message received platform VPN configuration owned extension. Parameters - callback function callback parameter looks like:(id: string, message: PlatformMessage, error: string) => void - id string - message - error string - onUIEvent chrome.vpnProvider.onUIEvent.addListener( callback: function, ) Triggered UI event extension. UI events signals platform indicate app UI dialog needs shown user."},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webNavigation", "title": "chrome.webNavigation | API | Chrome for Developers", "text": "Description Use chrome.webNavigation API receive notifications status navigation requests in-flight. Permissions webNavigation chrome.webNavigation methods events require declare \"webNavigation\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"webNavigation\" ], ... } Concepts usage Event order navigation successfully completed, events fired following order: onBeforeNavigate -> onCommitted -> [onDOMContentLoaded] -> onCompleted error occurs process results onErrorOccurred event. specific navigation, events fired onErrorOccurred . navigating frame contains subframes, onCommitted fired children's onBeforeNavigate ; onCompleted fired children's onCompleted . reference fragment frame changed, onReferenceFragmentUpdated event fired. event fire time onDOMContentLoaded , even onCompleted . history API used modify state frame (e.g. using history.pushState() , onHistoryStateUpdated event fired. event fire time onDOMContentLoaded . navigation restored page Back Forward Cache, onDOMContentLoaded event fire. event fired content already completed load page first visited. navigation triggered using Chrome Instant Instant Pages, completely loaded page swapped current tab. case, onTabReplaced event fired. Relation webRequest events defined ordering events webRequest API events webNavigation API. possible webRequest events still received frames already started new navigation, navigation proceeds network resources already fully loaded. general, webNavigation events closely related navigation state displayed UI, webRequest events correspond state network stack generally opaque user. Tab IDs navigating tabs correspond actual tabs Chrome's UI, example, tab pre-rendered. tabs accessible using tabs API request information calling webNavigation.getFrame() webNavigation.getAllFrames() . tab swapped in, onTabReplaced event fired become accessible APIs. Timestamps important note technical oddities OS's handling distinct Chrome processes cause clock skewed browser extension processes. means timeStamp property WebNavigation event timeStamp property guaranteed internally consistent. Comparing one event another event give correct offset them, comparing current time inside extension (using (new Date()).getTime() , instance) might give unexpected results. Frame IDs Frames within tab identified frame ID. frame ID main frame always 0, ID child frames positive number. document constructed frame, frame ID remains constant lifetime document. Chrome 49, ID also constant lifetime frame (across multiple navigations). Due multi-process nature Chrome, tab might use different processes render source destination web page. Therefore, navigation takes place new process, might receive events new old page new navigation committed (i.e. onCommitted event sent new main frame). words, possible one pending sequence webNavigation events frameId . sequences distinguished processId key. Also note provisional load process might switched several times. happens load redirected different site. case, receive repeated onBeforeNavigate onErrorOccurred events, receive final onCommitted event. Another concept problematic extensions lifecycle frame. frame hosts document (which associated committed URL). document change (say navigating) frameId won't, difficult associate something happened specific document frameIds. introducing concept documentId unique identifier per document. frame navigated opens new document identifier change. field useful determining pages change lifecycle state (between prerender/active/cached) remains same. Transition types qualifiers webNavigation onCommitted event transitionType transitionQualifiers property. transition type used history API describing browser navigated particular URL. addition, several transition qualifiers returned define navigation. following transition qualifiers exist: | Transition qualifier | Description | |---|---| | \"client_redirect\" | One redirects caused JavaScript meta refresh tags page happened navigation. | | \"server_redirect\" | One redirects caused HTTP headers sent server happened navigation. | | \"forward_back\" | user used Forward Back button initiate navigation. | | \"from_address_bar\" | user initiated navigation address bar (aka Omnibox). | Examples try API, install webNavigation API example chrome-extension-samples repository. Types TransitionQualifier Enum \"client_redirect\" \"server_redirect\" \"forward_back\" \"from_address_bar\" TransitionType Cause navigation. transition types defined history API used. transition types defined history API except \"start_page\" place \"auto_toplevel\" (for backwards compatibility). Enum \"link\" \"typed\" \"auto_bookmark\" \"auto_subframe\" \"manual_subframe\" \"generated\" \"start_page\" \"form_submit\" \"reload\" \"keyword\" \"keyword_generated\" Methods getAllFrames() chrome.webNavigation.getAllFrames( details: object, callback?: function, ) Retrieves information frames given tab. Parameters - details object Information tab retrieve frames from. - tabId number ID tab. - - callback function optional callback parameter looks like:(details?: object[]) => void - details object[] optional list frames given tab, null specified tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameId number ID frame. 0 indicates main frame; positive value indicates ID subframe. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - url string URL currently associated frame. - - Returns - Promise<object[] | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFrame() chrome.webNavigation.getFrame( details: object, callback?: function, ) Retrieves information given frame. frame refers <iframe> <frame> web page identified tab ID frame ID. Parameters - details object Information frame retrieve information about. - documentId string optional Chrome 106+The UUID document. frameId and/or tabId provided validated match document found provided document ID. - frameId number optional ID frame given tab. - processId number optional Deprecated since Chrome 49Frames uniquely identified tab ID frame ID; process ID longer needed therefore ignored. ID process runs renderer tab. - tabId number optional ID tab frame is. - - callback function optional callback parameter looks like:(details?: object) => void - details object optional Information requested frame, null specified frame ID and/or tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - url string URL currently associated frame, frame identified frameId existed one point given tab. fact URL associated given frameId imply corresponding frame still exists. - - Returns - Promise<object | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBeforeNavigate chrome.webNavigation.onBeforeNavigate.addListener( callback: function, filters?: object, ) Fired navigation occur. Parameters - function callback parameter looks like:(details: object) => void - object - Chrome 106+ lifecycle document in. - number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique given tab process. - Chrome 106+ type frame navigation occurred in. - string optional Chrome 106+A UUID parent document owning frame. set parent. - number ID parent frame, -1 main frame. - number Deprecated since Chrome 50The processId longer set event, since process render resulting document known onCommit. value -1. - number ID tab navigation occur. - number time browser start navigation, milliseconds since epoch. - string - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCommitted chrome.webNavigation.onCommitted.addListener( callback: function, filters?: object, ) Fired navigation committed. document (and resources refers to, images subframes) might still downloading, least part document received server browser decided switch new document. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCompleted chrome.webNavigation.onCompleted.addListener( callback: function, filters?: object, ) Fired document, including resources refers to, completely loaded initialized. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time document finished loading, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCreatedNavigationTarget chrome.webNavigation.onCreatedNavigationTarget.addListener( callback: function, filters?: object, ) Fired new window, new tab existing window, created host navigation. Parameters - function callback parameter looks like:(details: object) => void - object - number ID frame sourceTabId navigation triggered. 0 indicates main frame. - number ID process runs renderer source frame. - number ID tab navigation triggered. - number ID tab url opened - number time browser create new view, milliseconds since epoch. - string URL opened new window. - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onDOMContentLoaded chrome.webNavigation.onDOMContentLoaded.addListener( callback: function, filters?: object, ) Fired page's DOM fully constructed, referenced resources may finish loading. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time page's DOM fully constructed, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onErrorOccurred chrome.webNavigation.onErrorOccurred.addListener( callback: function, filters?: object, ) Fired error occurs navigation aborted. happen either network error occurred, user aborted navigation. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - error string error description. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number Deprecated since Chrome 50The processId longer set event. value -1. - tabId number ID tab navigation occurs. - timeStamp number time error occurred, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onHistoryStateUpdated chrome.webNavigation.onHistoryStateUpdated.addListener( callback: function, filters?: object, ) Fired frame's history updated new URL. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onReferenceFragmentUpdated chrome.webNavigation.onReferenceFragmentUpdated.addListener( callback: function, filters?: object, ) Fired reference fragment frame updated. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onTabReplaced chrome.webNavigation.onTabReplaced.addListener( callback: function, ) Fired contents tab replaced different (usually previously pre-rendered) tab. Parameters - callback function callback parameter looks like:(details: object) => void - details object - replacedTabId number ID tab replaced. - tabId number ID tab replaced old tab. - timeStamp number time replacement happened, milliseconds since epoch. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webNavigation", "title": "chrome.webNavigation | API | Chrome for Developers", "text": "Description Use chrome.webNavigation API receive notifications status navigation requests in-flight. Permissions webNavigation chrome.webNavigation methods events require declare \"webNavigation\" permission extension manifest. example: { \"name\": \"My extension\", ... \"permissions\": [ \"webNavigation\" ], ... } Concepts usage Event order navigation successfully completed, events fired following order: onBeforeNavigate -> onCommitted -> [onDOMContentLoaded] -> onCompleted error occurs process results onErrorOccurred event. specific navigation, events fired onErrorOccurred . navigating frame contains subframes, onCommitted fired children's onBeforeNavigate ; onCompleted fired children's onCompleted . reference fragment frame changed, onReferenceFragmentUpdated event fired. event fire time onDOMContentLoaded , even onCompleted . history API used modify state frame (e.g. using history.pushState() , onHistoryStateUpdated event fired. event fire time onDOMContentLoaded . navigation restored page Back Forward Cache, onDOMContentLoaded event fire. event fired content already completed load page first visited. navigation triggered using Chrome Instant Instant Pages, completely loaded page swapped current tab. case, onTabReplaced event fired. Relation webRequest events defined ordering events webRequest API events webNavigation API. possible webRequest events still received frames already started new navigation, navigation proceeds network resources already fully loaded. general, webNavigation events closely related navigation state displayed UI, webRequest events correspond state network stack generally opaque user. Tab IDs navigating tabs correspond actual tabs Chrome's UI, example, tab pre-rendered. tabs accessible using tabs API request information calling webNavigation.getFrame() webNavigation.getAllFrames() . tab swapped in, onTabReplaced event fired become accessible APIs. Timestamps important note technical oddities OS's handling distinct Chrome processes cause clock skewed browser extension processes. means timeStamp property WebNavigation event timeStamp property guaranteed internally consistent. Comparing one event another event give correct offset them, comparing current time inside extension (using (new Date()).getTime() , instance) might give unexpected results. Frame IDs Frames within tab identified frame ID. frame ID main frame always 0, ID child frames positive number. document constructed frame, frame ID remains constant lifetime document. Chrome 49, ID also constant lifetime frame (across multiple navigations). Due multi-process nature Chrome, tab might use different processes render source destination web page. Therefore, navigation takes place new process, might receive events new old page new navigation committed (i.e. onCommitted event sent new main frame). words, possible one pending sequence webNavigation events frameId . sequences distinguished processId key. Also note provisional load process might switched several times. happens load redirected different site. case, receive repeated onBeforeNavigate onErrorOccurred events, receive final onCommitted event. Another concept problematic extensions lifecycle frame. frame hosts document (which associated committed URL). document change (say navigating) frameId won't, difficult associate something happened specific document frameIds. introducing concept documentId unique identifier per document. frame navigated opens new document identifier change. field useful determining pages change lifecycle state (between prerender/active/cached) remains same. Transition types qualifiers webNavigation onCommitted event transitionType transitionQualifiers property. transition type used history API describing browser navigated particular URL. addition, several transition qualifiers returned define navigation. following transition qualifiers exist: | Transition qualifier | Description | |---|---| | \"client_redirect\" | One redirects caused JavaScript meta refresh tags page happened navigation. | | \"server_redirect\" | One redirects caused HTTP headers sent server happened navigation. | | \"forward_back\" | user used Forward Back button initiate navigation. | | \"from_address_bar\" | user initiated navigation address bar (aka Omnibox). | Examples try API, install webNavigation API example chrome-extension-samples repository. Types TransitionQualifier Enum \"client_redirect\" \"server_redirect\" \"forward_back\" \"from_address_bar\" TransitionType Cause navigation. transition types defined history API used. transition types defined history API except \"start_page\" place \"auto_toplevel\" (for backwards compatibility). Enum \"link\" \"typed\" \"auto_bookmark\" \"auto_subframe\" \"manual_subframe\" \"generated\" \"start_page\" \"form_submit\" \"reload\" \"keyword\" \"keyword_generated\" Methods getAllFrames() chrome.webNavigation.getAllFrames( details: object, callback?: function, ) Retrieves information frames given tab. Parameters - details object Information tab retrieve frames from. - tabId number ID tab. - - callback function optional callback parameter looks like:(details?: object[]) => void - details object[] optional list frames given tab, null specified tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameId number ID frame. 0 indicates main frame; positive value indicates ID subframe. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - url string URL currently associated frame. - - Returns - Promise<object[] | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getFrame() chrome.webNavigation.getFrame( details: object, callback?: function, ) Retrieves information given frame. frame refers <iframe> <frame> web page identified tab ID frame ID. Parameters - details object Information frame retrieve information about. - documentId string optional Chrome 106+The UUID document. frameId and/or tabId provided validated match document found provided document ID. - frameId number optional ID frame given tab. - processId number optional Deprecated since Chrome 49Frames uniquely identified tab ID frame ID; process ID longer needed therefore ignored. ID process runs renderer tab. - tabId number optional ID tab frame is. - - callback function optional callback parameter looks like:(details?: object) => void - details object optional Information requested frame, null specified frame ID and/or tab ID invalid. - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - errorOccurred boolean True last navigation frame interrupted error, i.e. onErrorOccurred event fired. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number ID parent frame, -1 main frame. - url string URL currently associated frame, frame identified frameId existed one point given tab. fact URL associated given frameId imply corresponding frame still exists. - - Returns - Promise<object | undefined> Chrome 93+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBeforeNavigate chrome.webNavigation.onBeforeNavigate.addListener( callback: function, filters?: object, ) Fired navigation occur. Parameters - function callback parameter looks like:(details: object) => void - object - Chrome 106+ lifecycle document in. - number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique given tab process. - Chrome 106+ type frame navigation occurred in. - string optional Chrome 106+A UUID parent document owning frame. set parent. - number ID parent frame, -1 main frame. - number Deprecated since Chrome 50The processId longer set event, since process render resulting document known onCommit. value -1. - number ID tab navigation occur. - number time browser start navigation, milliseconds since epoch. - string - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCommitted chrome.webNavigation.onCommitted.addListener( callback: function, filters?: object, ) Fired navigation committed. document (and resources refers to, images subframes) might still downloading, least part document received server browser decided switch new document. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCompleted chrome.webNavigation.onCompleted.addListener( callback: function, filters?: object, ) Fired document, including resources refers to, completely loaded initialized. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time document finished loading, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onCreatedNavigationTarget chrome.webNavigation.onCreatedNavigationTarget.addListener( callback: function, filters?: object, ) Fired new window, new tab existing window, created host navigation. Parameters - function callback parameter looks like:(details: object) => void - object - number ID frame sourceTabId navigation triggered. 0 indicates main frame. - number ID process runs renderer source frame. - number ID tab navigation triggered. - number ID tab url opened - number time browser create new view, milliseconds since epoch. - string URL opened new window. - - - object optional - Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onDOMContentLoaded chrome.webNavigation.onDOMContentLoaded.addListener( callback: function, filters?: object, ) Fired page's DOM fully constructed, referenced resources may finish loading. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time page's DOM fully constructed, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onErrorOccurred chrome.webNavigation.onErrorOccurred.addListener( callback: function, filters?: object, ) Fired error occurs navigation aborted. happen either network error occurred, user aborted navigation. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - error string error description. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number Deprecated since Chrome 50The processId longer set event. value -1. - tabId number ID tab navigation occurs. - timeStamp number time error occurred, milliseconds since epoch. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onHistoryStateUpdated chrome.webNavigation.onHistoryStateUpdated.addListener( callback: function, filters?: object, ) Fired frame's history updated new URL. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onReferenceFragmentUpdated chrome.webNavigation.onReferenceFragmentUpdated.addListener( callback: function, filters?: object, ) Fired reference fragment frame updated. future events frame use updated URL. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+A UUID document loaded. - documentLifecycleChrome 106+ lifecycle document in. - frameId number 0 indicates navigation happens tab content window; positive value indicates navigation subframe. Frame IDs unique within tab. - frameTypeChrome 106+ type frame navigation occurred in. - parentDocumentId string optional Chrome 106+A UUID parent document owning frame. set parent. - parentFrameId number Chrome 74+The ID parent frame, -1 main frame. - processId number ID process runs renderer frame. - tabId number ID tab navigation occurs. - timeStamp number time navigation committed, milliseconds since epoch. - transitionQualifiers list transition qualifiers. - transitionType Cause navigation. - url string - - - filters object optional - url Conditions URL navigated must satisfy. 'schemes' 'ports' fields UrlFilter ignored event. - onTabReplaced chrome.webNavigation.onTabReplaced.addListener( callback: function, ) Fired contents tab replaced different (usually previously pre-rendered) tab. Parameters - callback function callback parameter looks like:(details: object) => void - details object - replacedTabId number ID tab replaced. - tabId number ID tab replaced old tab. - timeStamp number time replacement happened, milliseconds since epoch. - -"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/webRequest", "title": "chrome.webRequest | API | Chrome for Developers", "text": "Description Use chrome.webRequest API observe analyze traffic intercept, block, modify requests in-flight. Permissions webRequest must declare \"webRequest\" permission extension manifest use web request API, along necessary host permissions. intercept sub-resource request, extension must access requested URL initiator. example: { \"name\": \"My extension\", ... \"permissions\": [ \"webRequest\" ], \"host_permissions\": [ \"*://*.google.com/*\" ], ... } webRequestBlocking Required register blocking event handlers. Manifest V3, available policy installed extensions. webRequestAuthProvider Required use onAuthRequired method. See Handling authentication. Concepts usage Life cycle requests web request API defines set events follow life cycle web request. use events observe analyze traffic. Certain synchronous events allow intercept, block, modify request. event life cycle successful requests illustrated here, followed event definitions: onBeforeRequest (optionally synchronous)- Fires request occur. event sent TCP connection made used cancel redirect requests. onBeforeSendHeaders (optionally synchronous)- Fires request occur initial headers prepared. event intended allow extensions add, modify, delete request headers (*). onBeforeSendHeaders event passed subscribers, different subscribers may attempt modify request; see Implementation details section handled. event used cancel request. onSendHeaders - Fires extensions chance modify request headers, presents final (*) version. event triggered headers sent network. event informational handled asynchronously. allow modifying cancelling request. onHeadersReceived (optionally synchronous)- Fires time HTTP(S) response header received. Due redirects authentication requests happen multiple times per request. event intended allow extensions add, modify, delete response headers, incoming Content-Type headers. caching directives processed event triggered, modifying headers Cache-Control influence browser's cache. also allows cancel redirect request. onAuthRequired (optionally synchronous)- Fires request requires authentication user. event handled synchronously provide authentication credentials. Note extensions may provide invalid credentials. Take care enter infinite loop repeatedly providing invalid credentials. also used cancel request. onBeforeRedirect - Fires redirect executed. redirection triggered HTTP response code extension. event informational handled asynchronously. allow modify cancel request. onResponseStarted - Fires first byte response body received. HTTP requests, means status line response headers available. event informational handled asynchronously. allow modifying canceling request. onCompleted - Fires request processed successfully. onErrorOccurred - Fires request could processed successfully. web request API guarantees request, either onCompleted onErrorOccurred fired final event one exception: request redirected data:// URL, onBeforeRedirect last reported event. * Note web request API presents abstraction network stack extension. Internally, one URL request split several HTTP requests (for example, fetch individual byte ranges large file) handled network stack without communicating network. reason, API provide final HTTP headers sent network. example, headers related caching invisible extension. following headers currently provided onBeforeSendHeaders event. list guaranteed complete stable. - Authorization - Cache-Control - Connection - Content-Length - Host - If-Modified-Since - If-None-Match - If-Range - Partial-Data - Pragma - Proxy-Authorization - Proxy-Connection - Transfer-Encoding Starting Chrome 79, request header modifications affect Cross-Origin Resource Sharing (CORS) checks. modified headers cross-origin requests meet criteria, result sending CORS preflight ask server headers accepted. really need modify headers way violate CORS protocol, need specify 'extraHeaders' opt_extraInfoSpec . hand, response header modifications work deceive CORS checks. need deceive CORS protocol, also need specify 'extraHeaders' response modifications. Starting Chrome 79, webRequest API intercept CORS preflight requests responses default. CORS preflight request URL visible extension listener 'extraHeaders' specified opt_extraInfoSpec request URL. onBeforeRequest also take 'extraHeaders' Chrome 79. Starting Chrome 79, following request header provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec : - Origin Starting Chrome 72, need modify responses Cross Origin Read Blocking (CORB) block response, need specify 'extraHeaders' opt_extraInfoSpec . Starting Chrome 72, following request headers provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec : - Accept-Language - Accept-Encoding - Referer - Cookie Starting Chrome 72, Set-Cookie response header provided cannot modified removed without specifying 'extraHeaders' opt_extraInfoSpec . Starting Chrome 89, X-Frame-Options response header cannot effectively modified removed without specifying 'extraHeaders' opt_extraInfoSpec . webRequest API exposes requests extension permission see, given host permissions. Moreover, following schemes accessible: http:// , https:// , ftp:// , file:// , ws:// (since Chrome 58), wss:// (since Chrome 58), urn: (since Chrome 91), chrome-extension:// . addition, even certain requests URLs using one schemes hidden. include chrome-extension://other_extension_id other_extension_id ID extension handle request, https://www.google.com/chrome , sensitive requests core browser functionality. Also synchronous XMLHttpRequests extension hidden blocking event handlers order prevent deadlocks. Note supported schemes set available events might limited due nature corresponding protocol. example, file: scheme, onBeforeRequest , onResponseStarted , onCompleted , onErrorOccurred may dispatched. Starting Chrome 58, webRequest API supports intercepting WebSocket handshake request. Since handshake done means HTTP upgrade request, flow fits HTTP-oriented webRequest model. Note API intercept: - Individual messages sent established WebSocket connection. - WebSocket closing connection. Redirects supported WebSocket requests. Starting Chrome 72, extension able intercept request host permissions requested URL request initiator. Starting Chrome 96, webRequest API supports intercepting WebTransport HTTP/3 handshake request. Since handshake done means HTTP CONNECT request, flow fits HTTP-oriented webRequest model. Note that: - session established, extensions cannot observe intervene session via webRequest API. - Modifying HTTP request headers onBeforeSendHeaders ignored. - Redirects authentications supported WebTransport HTTP/3. Request IDs request identified request ID. ID unique within browser session context extension. remains constant life cycle request used match events request. Note several HTTP requests mapped one web request case HTTP redirection HTTP authentication. Registering event listeners register event listener web request, use variation usual addListener() function. addition specifying callback function, specify filter argument, may specify optional extra info argument. three arguments web request API's addListener() following definitions: var callback = function(details) {...}; var filter = {...}; var opt_extraInfoSpec = [...]; Here's example listening onBeforeRequest event: chrome.webRequest.onBeforeRequest.addListener( callback, filter, opt_extraInfoSpec); addListener() call takes mandatory callback function first parameter. callback function passed dictionary containing information current URL request. information dictionary depends specific event type well content opt_extraInfoSpec . optional opt_extraInfoSpec array contains string 'blocking' (only allowed specific events), callback function handled synchronously. means request blocked callback function returns. case, callback return webRequest.BlockingResponse determines life cycle request. Depending context, response allows canceling redirecting request (onBeforeRequest ), canceling request modifying headers (onBeforeSendHeaders , onHeadersReceived ), canceling request providing authentication credentials (onAuthRequired ). optional opt_extraInfoSpec array contains string 'asyncBlocking' instead (only allowed onAuthRequired ), extension generate webRequest.BlockingResponse asynchronously. webRequest.RequestFilter filter allows limiting requests events triggered various dimensions: - URLs - URL patterns *://www.google.com/foo*bar . - Types - Request types main_frame (a document loaded top-level frame),sub_frame (a document loaded embedded frame), andimage (an image web site). SeewebRequest.RequestFilter . - Tab ID - identifier one tab. - Window ID - identifier window. Depending event type, specify strings opt_extraInfoSpec ask additional information request. used provide detailed information request's data explicitly requested. Handling authentication handle requests HTTP authentication, add \"webRequestAuthProvider\" permission manifest file: { \"permissions\": [ \"webRequest\", \"webRequestAuthProvider\" ] } Note permission required policy installed extension \"webRequestBlocking\" permission. provide credentials synchronously: chrome.webRequest.onAuthRequired.addListener((details) => { return { authCredentials: { username: 'guest', password: 'guest' } }; }, { urls: ['https://httpbin.org/basic-auth/guest/guest'] }, ['blocking'] ); provide credentials asynchronously: chrome.webRequest.onAuthRequired.addListener((details, callback) => { callback({ authCredentials: { username: 'guest', password: 'guest' } }); }, { urls: ['https://httpbin.org/basic-auth/guest/guest'] }, ['asyncBlocking'] ); Implementation details Several implementation details important understand developing extension uses web request API: web_accessible_resources extension uses webRequest APIs redirect public resource request resource web accessible, blocked result error. holds true even resource web accessible owned redirecting extension. declare resources use declarativeWebRequest APIs, \"web_accessible_resources\" array must declared populated manifest documented here. Conflict resolution current implementation web request API, request considered canceled least one extension instructs cancel request. extension cancels request, extensions notified onErrorOccurred event. one extension redirect request modify header time. one extension attempts modify request, recently installed extension wins, others ignored. extension notified instruction modify redirect ignored. Caching Chrome employs two caches\u2014an on-disk cache fast in-memory cache. lifetime in-memory cache attached lifetime render process, roughly corresponds tab. Requests answered in-memory cache invisible web request API. request handler changes behavior (for example, behavior according requests blocked), simple page refresh might respect changed behavior. ensure behavior change goes through, call handlerBehaviorChanged() flush in-memory cache. often; flushing cache expensive operation. need call handlerBehaviorChanged() registering unregistering event listener. Timestamps timestamp property web request events guaranteed internally consistent. Comparing one event another event give correct offset them, comparing current time inside extension (via (new Date()).getTime() , instance) might give unexpected results. Error handling try register event invalid arguments, JavaScript error thrown, event handler registered. error thrown event handled event handler returns invalid blocking response, error message logged extension's console, handler ignored request. Examples following example illustrates block requests www.evil.com : chrome.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: details.url.indexOf(\"://www.evil.com/\") != -1}; }, {urls: [\"<all_urls>\"]}, [\"blocking\"] ); function uses blocking event handler, requires \"webRequest\" well \"webRequestBlocking\" permission manifest file. following example achieves goal efficient way requests targeted www.evil.com need passed extension: chrome.webRequest.onBeforeRequest.addListener( function(details) { return {cancel: true}; }, {urls: [\"*://www.evil.com/*\"]}, [\"blocking\"] ); following example illustrates delete User-Agent header requests: chrome.webRequest.onBeforeSendHeaders.addListener( function(details) { (var = 0; < details.requestHeaders.length; ++i) { (details.requestHeaders[i].name === 'User-Agent') { details.requestHeaders.splice(i, 1); break; } } return {requestHeaders: details.requestHeaders}; }, {urls: [\"<all_urls>\"]}, [\"blocking\", \"requestHeaders\"] ); try chrome.webRequest API, install webRequest sample chrome-extension-samples repository. Types BlockingResponse Returns value event handlers 'blocking' extraInfoSpec applied. Allows event handler modify network requests. Properties - authCredentials object optional used response onAuthRequired event. set, request made using supplied credentials. - password string - username string - - cancel boolean optional true, request cancelled. prevents request sent. used response onBeforeRequest, onBeforeSendHeaders, onHeadersReceived onAuthRequired events. - redirectUrl string optional used response onBeforeRequest onHeadersReceived events. set, original request prevented sent/completed instead redirected given URL. Redirections non-HTTP schemes data: allowed. Redirects initiated redirect action use original request method redirect, one exception: redirect initiated onHeadersReceived stage, redirect issued using GET method. Redirects URLs withws:// andwss:// schemes ignored. - requestHeaders HttpHeaders optional used response onBeforeSendHeaders event. set, request made request headers instead. - responseHeaders HttpHeaders optional used response onHeadersReceived event. set, server assumed responded response headers instead. return responseHeaders really want modify headers order limit number conflicts (only one extension may modifyresponseHeaders request). FormDataItem Contains data passed within form data. urlencoded form stored string data utf-8 string ArrayBuffer otherwise. form-data ArrayBuffer. form-data represents uploading file, string filename, filename provided. Enum ArrayBuffer string HttpHeaders array HTTP headers. header represented dictionary containing keys name either value binaryValue . Type object[] Properties - binaryValue number[] optional Value HTTP header cannot represented UTF-8, stored individual byte values (0..255). - name string Name HTTP header. - value string optional Value HTTP header represented UTF-8. IgnoredActionType Enum \"redirect\" \"request_headers\" \"response_headers\" \"auth_credentials\" OnAuthRequiredOptions Enum \"responseHeaders\" \"blocking\" \"asyncBlocking\" \"extraHeaders\" Specifies response headers included event. Specifies request blocked callback function returns. Specifies callback function handled asynchronously. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeRedirectOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeRequestOptions Enum \"blocking\" \"requestBody\" \"extraHeaders\" Specifies request blocked callback function returns. Specifies request body included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnBeforeSendHeadersOptions Enum \"requestHeaders\" \"blocking\" \"extraHeaders\" Specifies request header included event. Specifies request blocked callback function returns. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnCompletedOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnErrorOccurredOptions Value \"extraHeaders\" OnHeadersReceivedOptions Enum \"blocking\" \"responseHeaders\" \"extraHeaders\" Specifies request blocked callback function returns. Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnResponseStartedOptions Enum \"responseHeaders\" \"extraHeaders\" Specifies response headers included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). OnSendHeadersOptions Enum \"requestHeaders\" \"extraHeaders\" Specifies request header included event. Specifies headers violate Cross-Origin Resource Sharing (CORS). RequestFilter object describing filters apply webRequest events. Properties - tabId number optional - types ResourceType[] optional list request types. Requests cannot match types filtered out. - urls string[] list URLs URL patterns. Requests cannot match URLs filtered out. - windowId number optional ResourceType Enum \"main_frame\" \"sub_frame\" \"stylesheet\" \"script\" \"image\" \"font\" \"object\" \"xmlhttprequest\" \"ping\" \"csp_report\" \"media\" \"websocket\" \"webbundle\" \"other\" Specifies resource main frame. Specifies resource sub frame. Specifies resource stylesheet. Specifies resource script. Specifies resource image. Specifies resource font. Specifies resource object. Specifies resource XMLHttpRequest. Specifies resource ping. Specifies resource Content Security Policy (CSP) report. Specifies resource media object. Specifies resource WebSocket. Specifies resource WebBundle. Specifies resource type included listed types. UploadData Contains data uploaded URL request. Properties - bytes optional ArrayBuffer copy data. - file string optional string file's path name. Properties MAX_HANDLER_BEHAVIOR_CHANGED_CALLS_PER_10_MINUTES maximum number times handlerBehaviorChanged called per 10 minute sustained interval. handlerBehaviorChanged expensive function call called often. Value 20 Methods handlerBehaviorChanged() chrome.webRequest.handlerBehaviorChanged( callback?: function, ) Needs called behavior webRequest handlers changed prevent incorrect handling due caching. function call expensive. call often. Parameters - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 116+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onActionIgnored chrome.webRequest.onActionIgnored.addListener( callback: function, ) Fired extension's proposed modification network request ignored. happens case conflicts extensions. Parameters - callback function callback parameter looks like:(details: object) => void - details object - action proposed action ignored. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - - onAuthRequired chrome.webRequest.onAuthRequired.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnAuthRequiredOptions[], ) Fired authentication failure received. listener three options: provide authentication credentials, cancel request display error page, take action challenge. bad user credentials provided, may called multiple times request. Note, one 'blocking' 'asyncBlocking' modes must specified extraInfoSpec parameter. Parameters - callback function callback parameter looks like:(details: object, asyncCallback?: function) => BlockingResponse | undefined - details object - challenger object server requesting authentication. - host string - port number - - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - isProxy boolean True Proxy-Authenticate, false WWW-Authenticate. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - realm string optional authentication realm provided server, one. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - scheme string authentication scheme, e.g. Basic Digest. - statusCode number Chrome 43+Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - asyncCallback function optional Chrome 58+The asyncCallback parameter looks like:(response: BlockingResponse) => void - response - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnAuthRequiredOptions[] optional onBeforeRedirect chrome.webRequest.onBeforeRedirect.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeRedirectOptions[], ) Fired server-initiated redirect occur. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - redirectUrl string new URL. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along redirect. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnBeforeRedirectOptions[] optional onBeforeRequest chrome.webRequest.onBeforeRequest.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeRequestOptions[], ) Fired request occur. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string optional Chrome 106+The UUID document making request. - documentLifecycle extensionTypes.DocumentLifecycle optional Chrome 106+The lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameType extensionTypes.FrameType optional Chrome 106+The type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestBody object optional Contains HTTP request body data. provided extraInfoSpec contains 'requestBody'. - error string optional Errors obtaining request body data. - formData object optional request method POST body sequence key-value pairs encoded UTF8, encoded either multipart/form-data, application/x-www-form-urlencoded, dictionary present key contains list values key. data another media type, malformed, dictionary present. example value dictionary {'key': ['value1', 'value2']}. - raw UploadData[] optional request method PUT POST, body already parsed formData, unparsed request body elements contained array. - - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnBeforeRequestOptions[] optional onBeforeSendHeaders chrome.webRequest.onBeforeSendHeaders.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnBeforeSendHeadersOptions[], ) Fired sending HTTP request, request headers available. may occur TCP connection made server, HTTP data sent. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestHeaders HttpHeaders optional HTTP request headers going sent request. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnBeforeSendHeadersOptions[] optional onCompleted chrome.webRequest.onCompleted.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnCompletedOptions[], ) Fired request completed. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnCompletedOptions[] optional onErrorOccurred chrome.webRequest.onErrorOccurred.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnErrorOccurredOptions[], ) Fired error occurs. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. value present request navigation frame. - documentLifecycleChrome 106+ lifecycle document in. - error string error description. string guaranteed remain backwards compatible releases. must parse act based upon content. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnErrorOccurredOptions[] optional onHeadersReceived chrome.webRequest.onHeadersReceived.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnHeadersReceivedOptions[], ) Fired HTTP response headers request received. Parameters - callback function callback parameter looks like:(details: object) => BlockingResponse | undefined - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received response. - statusCode number Chrome 43+Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line). - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - returns BlockingResponse | undefined \"blocking\" specified \"extraInfoSpec\" parameter, event listener return object type. - - filter - extraInfoSpec OnHeadersReceivedOptions[] optional onResponseStarted chrome.webRequest.onResponseStarted.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnResponseStartedOptions[], ) Fired first byte response body received. HTTP requests, means status line response headers available. Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - fromCache boolean Indicates response fetched disk cache. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - ip string optional server IP address request actually sent to. Note may literal IPv6 address. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - responseHeaders HttpHeaders optional HTTP response headers received along response. - statusCode number Standard HTTP status code returned server. - statusLine string HTTP status line response 'HTTP/0.9 200 OK' string HTTP/0.9 responses (i.e., responses lack status line) empty string headers. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnResponseStartedOptions[] optional onSendHeaders chrome.webRequest.onSendHeaders.addListener( callback: function, filter: RequestFilter, extraInfoSpec?: OnSendHeadersOptions[], ) Fired request going sent server (modifications previous onBeforeSendHeaders callbacks visible time onSendHeaders fired). Parameters - callback function callback parameter looks like:(details: object) => void - details object - documentId string Chrome 106+The UUID document making request. - documentLifecycleChrome 106+ lifecycle document in. - frameId number value 0 indicates request happens main frame; positive value indicates ID subframe request happens. document (sub-)frame loaded ( type ismain_frame orsub_frame ),frameId indicates ID frame, ID outer frame. Frame IDs unique within tab. - frameTypeChrome 106+ type frame request occurred in. - initiator string optional Chrome 63+The origin request initiated. change redirects. opaque origin, string 'null' used. - method string Standard HTTP method. - parentDocumentId string optional Chrome 106+The UUID parent document owning frame. set parent. - parentFrameId number ID frame wraps frame sent request. Set -1 parent frame exists. - requestHeaders HttpHeaders optional HTTP request headers sent request. - requestId string ID request. Request IDs unique within browser session. result, could used relate different events request. - tabId number ID tab request takes place. Set -1 request related tab. - timeStamp number time signal triggered, milliseconds since epoch. - type requested resource used. - url string - - - filter - extraInfoSpec OnSendHeadersOptions[] optional"},
{"source": "https://developer.chrome.com/docs/extensions/reference/api/windows", "title": "chrome.windows | API | Chrome for Developers", "text": "Description Use chrome.windows API interact browser windows. use API create, modify, rearrange windows browser. Permissions requested, windows.Window contains array tabs.Tab objects. must declare \"tabs\" permission manifest need access url , pendingUrl , title , favIconUrl properties tabs.Tab . example: { \"name\": \"My extension\", ... \"permissions\": [\"tabs\"], ... } Concepts usage current window Many functions extension system take optional windowId argument, defaults current window. current window window contains code currently executing. important realize different topmost focused window. example, say extension creates tabs windows single HTML file, HTML file contains call tabs.query() . current window window contains page made call, matter topmost window is. case service workers, value current window falls back last active window. circumstances, may current window background pages. Examples try API, install windows API example chrome-extension-samples repository. Types CreateType Specifies type browser window create. 'panel' deprecated available existing allowlisted extensions Chrome OS. Enum \"normal\" \"popup\" \"panel\" Specifies window standard window. Specifies window popup window. Specifies window panel. QueryOptions Properties - populate boolean optional true, windows.Window object atabs property contains list thetabs.Tab objects. TheTab objects contain theurl ,pendingUrl ,title , andfavIconUrl properties extension's manifest file includes the\"tabs\" permission. - windowTypes WindowType[] optional set, windows.Window returned filtered based type. unset, default filter set to['normal', 'popup'] . Window Properties - alwaysOnTop boolean Whether window set always top. - focused boolean Whether window currently focused window. - height number optional height window, including frame, pixels. circumstances window may assigned height property; example, querying closed windows thesessions API. - id number optional ID window. Window IDs unique within browser session. circumstances window may assigned ID property; example, querying windows using thesessions API, case session ID may present. - incognito boolean Whether window incognito. - left number optional offset window left edge screen pixels. circumstances window may assigned left property; example, querying closed windows thesessions API. - sessionId string optional session ID used uniquely identify window, obtained sessions API. - state WindowState optional state browser window. - tabs Tab[] optional Array tabs.Tab objects representing current tabs window. - top number optional offset window top edge screen pixels. circumstances window may assigned top property; example, querying closed windows thesessions API. - type WindowType optional type browser window is. - width number optional width window, including frame, pixels. circumstances window may assigned width property; example, querying closed windows thesessions API. WindowState state browser window. circumstances window may assigned state property; example, querying closed windows sessions API. Enum \"normal\" \"minimized\" \"maximized\" \"fullscreen\" \"locked-fullscreen\" Normal window state (not minimized, maximized, fullscreen). Minimized window state. Maximized window state. Fullscreen window state. Locked fullscreen window state. fullscreen state cannot exited user action available allowlisted extensions Chrome OS. WindowType type browser window is. circumstances window may assigned type property; example, querying closed windows sessions API. Enum \"normal\" \"popup\" \"panel\" \"app\" \"devtools\" normal browser window. browser popup. Deprecated API. Chrome App panel-style window. Extensions see panel windows. Deprecated API. Chrome App window. Extensions see app windows. Developer Tools window. Properties WINDOW_ID_CURRENT windowId value represents current window. Value -2 WINDOW_ID_NONE windowId value represents absence Chrome browser window. Value -1 Methods create() chrome.windows.create( createData?: object, callback?: function, ) Creates (opens) new browser window optional sizing, position, default URL provided. Parameters - createData object optional - focused boolean optional true , opens active window. Iffalse , opens inactive window. - height number optional height pixels new window, including frame. specified, defaults natural height. - incognito boolean optional Whether new window incognito window. - left number optional number pixels position new window left edge screen. specified, new window offset naturally last focused window. value ignored panels. - setSelfAsOpener boolean optional Chrome 64+If true , newly-created window's 'window.opener' set caller unit related browsing contexts caller. - state WindowState optional Chrome 44+The initial state window. minimized ,maximized , andfullscreen states cannot combined withleft ,top ,width , orheight . - tabId number optional ID tab add new window. - top number optional number pixels position new window top edge screen. specified, new window offset naturally last focused window. value ignored panels. - type CreateType optional Specifies type browser window create. - url string | string[] optional URL array URLs open tabs window. Fully-qualified URLs must include scheme, e.g., 'http://www.google.com', 'www.google.com'. Non-fully-qualified URLs considered relative within extension. Defaults New Tab Page. - width number optional width pixels new window, including frame. specified, defaults natural width. - - callback function optional callback parameter looks like:(window?: Window) => void - window Window optional Contains details created window. - Returns - Promise<Window | undefined> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. get() chrome.windows.get( windowId: number, queryOptions?: QueryOptions, callback?: function, ) Gets details window. Parameters - windowId number - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getAll() chrome.windows.getAll( queryOptions?: QueryOptions, callback?: function, ) Gets windows. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(windows: Window[]) => void - windows Window[] - Returns - Promise<Window[]> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getCurrent() chrome.windows.getCurrent( queryOptions?: QueryOptions, callback?: function, ) Gets current window. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. getLastFocused() chrome.windows.getLastFocused( queryOptions?: QueryOptions, callback?: function, ) Gets window recently focused \u2014 typically window 'on top'. Parameters - queryOptions QueryOptions optional Chrome 88+ - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. remove() chrome.windows.remove( windowId: number, callback?: function, ) Removes (closes) window tabs inside it. Parameters - windowId number - callback function optional callback parameter looks like:() => void Returns - Promise<void> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. update() chrome.windows.update( windowId: number, updateInfo: object, callback?: function, ) Updates properties window. Specify properties changed; unspecified properties unchanged. Parameters - windowId number - updateInfo object - drawAttention boolean optional true , causes window displayed manner draws user's attention window, without changing focused window. effect lasts user changes focus window. option effect window already focus. Set tofalse cancel previousdrawAttention request. - focused boolean optional true , brings window front; cannot combined state 'minimized'. Iffalse , brings next window z-order front; cannot combined state 'fullscreen' 'maximized'. - height number optional height resize window pixels. value ignored panels. - left number optional offset left edge screen move window pixels. value ignored panels. - state WindowState optional new state window. 'minimized', 'maximized', 'fullscreen' states cannot combined 'left', 'top', 'width', 'height'. - top number optional offset top edge screen move window pixels. value ignored panels. - width number optional width resize window pixels. value ignored panels. - - callback function optional callback parameter looks like:(window: Window) => void - window - Returns - Promise<Window> Chrome 88+Promises supported Manifest V3 later, callbacks provided backward compatibility. cannot use function call. promise resolves type passed callback. Events onBoundsChanged chrome.windows.onBoundsChanged.addListener( callback: function, ) Fired window resized; event dispatched new bounds committed, in-progress changes. Parameters - callback function callback parameter looks like:(window: Window) => void - window - onCreated chrome.windows.onCreated.addListener( callback: function, filters?: object, ) Fired window created. Parameters - callback function Chrome 46+The callback parameter looks like:(window: Window) => void - window Details created window. - - filters object optional - windowTypes Conditions window's type created must satisfy. default satisfies ['normal', 'popup'] . - onFocusChanged chrome.windows.onFocusChanged.addListener( callback: function, filters?: object, ) Fired currently focused window changes. Returns chrome.windows.WINDOW_ID_NONE Chrome windows lost focus. Note: Linux window managers, WINDOW_ID_NONE always sent immediately preceding switch one Chrome window another. Parameters - callback function Chrome 46+The callback parameter looks like:(windowId: number) => void - windowId number ID newly-focused window. - - filters object optional - windowTypes Conditions window's type removed must satisfy. default satisfies ['normal', 'popup'] . - onRemoved chrome.windows.onRemoved.addListener( callback: function, filters?: object, ) Fired window removed (closed). Parameters - callback function Chrome 46+The callback parameter looks like:(windowId: number) => void - windowId number ID removed window. - - filters object optional - windowTypes Conditions window's type removed must satisfy. default satisfies ['normal', 'popup'] . -"}]